; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_ice:
	DS	40840
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	#include <debug.h>
;   10	
;   11	#include <fileioc.h>
;   12	#include <graphx.h>
;   13	
;   14	#include "parse.h"
;   15	#include "main.h"
;   16	#include "errors.h"
;   17	#include "output.h"
;   18	#include "operator.h"
;   19	#include "stack.h"
;   20	
;   21	ice_t ice;
	SEGMENT CODE
;   22	
;   23	void main() {
_main:
	LD	HL,-58
	CALL	__frameset
;   24	    uint8_t a = 0, selectedProgram = 0, key, amountOfPrograms, res, *outputDataPtr, *search_pos = NULL;
	LD	(IX+-1),0
	LD	BC,0
	LD	(IX+-11),BC
;   25	    char *var_name;
;   26	    unsigned int token, headerSize, programSize, programDataSize;
;   27	    signed char buf[30];
;   28	    const char ICEheader[] = {tii, 0};
	LEA	DE,IX+-22
;   29	
;   30	    // Yay, GUI! :)
;   31	    gfx_Begin(gfx_8bpp);
	LD	BC,39
	PUSH	BC
	LD	HL,_0temp0
	LD	BC,2
	LDIR	
	CALL	_gfx_Begin
	POP	BC
;   32	    gfx_SetColor(189);
	LD	BC,189
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   33	    gfx_FillRectangle_NoClip(0, 0, 320, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   34	    gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   35	    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   36	    gfx_HorizLine_NoClip(0, 10, 320);
	LD	BC,320
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   37	    gfx_PrintStringXY("ICE Compiler v1.6 - By Peter \"PT_\" Tillema", 21, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,21
	PUSH	BC
	LD	BC,L__0
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   38	    
;   39	    // Get all the programs that start with the [i] token
;   40	    while((var_name = ti_DetectVar(&search_pos, ICEheader, TI_PRGM_TYPE)) != NULL && ++selectedProgram <= 22) {
	JR	L_2
L_3:
;   41	        gfx_PrintStringXY(var_name, 10, selectedProgram*10 + 3);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-5)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   42	    }
L_2:
	LD	BC,5
	PUSH	BC
	PEA	IX+-22
	PEA	IX+-11
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-5),HL
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	Z,L_4
	INC	(IX+-1)
	LD	A,22
	CP	A,(IX+-1)
	JR	NC,L_3
L_4:
;   43	    amountOfPrograms = selectedProgram;
	LD	A,(IX+-1)
	LD	(IX+-6),A
;   44	    
;   45	    // Check if there are ICE programs
;   46	    if (!amountOfPrograms) {
	OR	A,A
	JR	NZ,L_7
;   47	        gfx_PrintStringXY("No programs found!", 10, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   48	        goto stop;
	JR	L_5
;   49	    }
L_7:
;   50	    
;   51	    // Select a program
;   52	    selectedProgram = 1;
	LD	(IX+-1),1
;   53	    while ((key = os_GetCSC()) != sk_Enter) {
	JR	L_19
L_20:
;   54	        uint8_t selectionOffset = selectedProgram*10 + 3;
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,(IX+-1)
	ADD	A,A
	ADD	A,3
	LD	(IX+-8),A
;   55	
;   56	        gfx_PrintStringXY(">", 1, selectionOffset);
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,1
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   57	
;   58	        if (key) {
	LD	A,(IX+-2)
	OR	A,A
	JR	Z,L_19
;   59	            gfx_SetColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   60	            gfx_FillRectangle_NoClip(1, selectionOffset, 8, 8);
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   61	
;   62	            // Stop and quit
;   63	            if (key == sk_Clear) {
	LD	A,(IX+-2)
	CP	A,15
	JR	Z,L_8
;   64	                goto err;
;   65	            }
;   66	
;   67	            // Select the next program
;   68	            if (key == sk_Down && selectedProgram != amountOfPrograms) {
	LD	A,(IX+-2)
	CP	A,1
	JR	NZ,L_17
	LD	A,(IX+-1)
	CP	A,(IX+-6)
	JR	Z,L_17
;   69	                selectedProgram++;
	INC	(IX+-1)
;   70	            }
L_17:
;   71	            
;   72	            // Select the previous program
;   73	            if (key == sk_Up && selectedProgram != 1) {
	LD	A,(IX+-2)
	CP	A,4
	JR	NZ,L_19
	LD	A,(IX+-1)
	CP	A,1
	JR	Z,L_19
;   74	                selectedProgram--;
	DEC	(IX+-1)
;   75	            }
;   76	        }
;   77	    }
L_19:
	CALL	_os_GetCSC
	LD	(IX+-2),A
	CP	A,9
	JR	NZ,L_20
;   78	    
;   79	    gfx_SetColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   80	    gfx_FillRectangle_NoClip(0, 11, 320, 229);
	LD	BC,229
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,11
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   81	    
;   82	    // Grab the right program
;   83	    search_pos = NULL;
	LD	BC,0
	LD	(IX+-11),BC
;   84	    while(((var_name = ti_DetectVar(&search_pos, ICEheader, TI_PRGM_TYPE)) != NULL) && --selectedProgram);
L_24:
	LD	BC,5
	PUSH	BC
	PEA	IX+-22
	PEA	IX+-11
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-5),HL
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	Z,L_25
	DEC	(IX+-1)
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_24
L_25:
;   85	    strcpy(ice.inName, var_name);
	LD	BC,(IX+-5)
	PUSH	BC
	LD	BC,_ice+9
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;   86	    
;   87	    gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   88	    sprintf(buf, "Compiling program %s...", var_name);
	LD	BC,(IX+-5)
	PUSH	BC
	LD	BC,L__15
	PUSH	BC
	PEA	IX+-55
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;   89	    gfx_PrintStringXY(buf, 1, ++ice.messageIndex*10+3);
	LD	A,(_ice+40832)
	INC	A
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PEA	IX+-55
	LD	(_ice+40832),A
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   90	
;   91	    // Find program
;   92	    ti_CloseAll();
	CALL	_ti_CloseAll
;   93	    ice.inPrgm = ti_OpenVar(ice.inName, "r", TI_PRGM_TYPE);
	LD	BC,5
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	LD	BC,_ice+9
	PUSH	BC
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
	LD	(_ice+40833),A
;   94	    if (!ice.inPrgm) {
	OR	A,A
	JR	Z,L_5
;   95	        goto stop;
;   96	    }
;   97	
;   98	    // Setup pointers and header
;   99	    ice.programData     = (uint8_t*)0xD52C00;
	LD	BC,13970432
	LD	(_ice+820),BC
;  100	
;  101	    ice.headerPtr       = (uint8_t*)ice.headerData + 116;
	LD	BC,_ice+20
	LD	(IX+-58),BC
	LD	IY,(IX+-58)
	LEA	BC,IY+116
	LD	(_ice+40823),BC
;  102	    ice.programPtr      = (uint8_t*)ice.programData + 5;
	LD	IY,(_ice+820)
	LEA	BC,IY+5
;  103	    ice.programDataPtr  = (uint8_t*)ice.programDataData;
;  104	    
;  105	    memcpy(ice.headerData, CHeaderData, 116);
	LD	DE,116
	PUSH	DE
	LD	(_ice+40826),BC
	LD	BC,_ice+823
	LD	DE,_CHeaderData
	PUSH	DE
	LD	(_ice+40829),BC
	LD	BC,(IX+-58)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  106	    memcpy(ice.programData, CProgramHeader, 5);
	LD	BC,5
	PUSH	BC
	LD	BC,_CProgramHeader
	PUSH	BC
	LD	BC,(_ice+820)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  107	   
;  108	    // Do the stuff
;  109	    res = parseProgram();
	CALL	_parseProgram
	LD	(IX+-7),A
;  110	    
;  111	    // Create or empty the output program if parsing succeeded
;  112	    if (res == VALID) {
	CP	A,255
	JR	NZ,L_38
;  113	        ice.outPrgm = ti_OpenVar(ice.outName, "w", TI_PPRGM_TYPE);
	LD	BC,6
	PUSH	BC
	LD	BC,L__19
	PUSH	BC
	LD	BC,_ice
	PUSH	BC
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
	LD	(_ice+40834),A
;  114	        if (!ice.outPrgm) {
	OR	A,A
	JR	Z,L_5
;  115	            goto stop;
;  116	        }
;  117	        
;  118	        // Get the sizes of the 3 stacks
;  119	        headerSize = (uint24_t)ice.headerPtr - (uint24_t)ice.headerData;
	LD	BC,_ice+20
	LD	(IX+-25),BC
	LD	HL,(_ice+40823)
	LD	BC,(IX+-25)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-14),HL
;  120	        programSize = (uint24_t)ice.programPtr - (uint24_t)ice.programData;
	LD	HL,(_ice+40826)
	LD	BC,(_ice+820)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-17),HL
;  121	        programDataSize = (uint24_t)ice.programDataPtr - (uint24_t)ice.programDataData;
	LD	HL,(_ice+40829)
	OR	A,A
	LD	BC,_ice+823
	SBC	HL,BC
	LD	(IX+-20),HL
;  122	        
;  123	        // Write ASM header
;  124	        ti_PutC(tExtTok, ice.outPrgm);
	LD	A,(_ice+40834)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,16777199
	PUSH	BC
	CALL	_ti_PutC
	POP	BC
	POP	BC
;  125	        ti_PutC(tAsm84CeCmp, ice.outPrgm);
	LD	A,(_ice+40834)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,123
	PUSH	BC
	CALL	_ti_PutC
	POP	BC
	POP	BC
;  126	        
;  127	        // Write the header, main program, and data to output :D
;  128	        if (headerSize)      ti_Write(ice.headerData, headerSize, 1, ice.outPrgm);
	LD	HL,(IX+-14)
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	Z,L_32
	LD	A,(_ice+40834)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-14)
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_32:
;  129	        if (programSize)     ti_Write(ice.programData, programSize, 1, ice.outPrgm);
	LD	BC,0
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_34
	LD	A,(_ice+40834)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	BC,(_ice+820)
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_34:
;  130	        if (programDataSize) ti_Write(ice.programDataData, programDataSize, 1, ice.outPrgm);
	LD	BC,0
	LD	HL,(IX+-20)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_35
	LD	A,(_ice+40834)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	BC,_ice+823
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_35:
;  131	        
;  132	        // Yep, we are really done!
;  133	        gfx_SetTextFGColor(4);
	LD	BC,4
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  134	        gfx_PrintStringXY("Succesfully compiled!", 1, ++ice.messageIndex*10+3);
	LD	A,(_ice+40832)
	INC	A
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,L__24
	PUSH	BC
	LD	(_ice+40832),A
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  135	        
;  136	        // Skip line
;  137	        ice.messageIndex++;
;  138	        
;  139	        // Output the size
;  140	        gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	LD	A,(_ice+40832)
	INC	A
	LD	(_ice+40832),A
	CALL	_gfx_SetTextFGColor
	POP	BC
;  141	        sprintf(buf, "Output size: %u bytes", headerSize + programSize + programDataSize);
	LD	BC,(IX+-17)
	LD	HL,(IX+-14)
	ADD	HL,BC
	LD	BC,(IX+-20)
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__25
	PUSH	BC
	PEA	IX+-55
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  142	        gfx_PrintStringXY(buf, 1, ++ice.messageIndex*10+3);
	LD	A,(_ice+40832)
	INC	A
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PEA	IX+-55
	LD	(_ice+40832),A
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  143	    } else {
	JR	L_5
L_38:
;  144	        displayError(res);
	LD	A,(IX+-7)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_displayError
	POP	BC
L_5:
;  145	    }
;  146	    
;  147	stop:
;  148	    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  149	    gfx_PrintStringXY("[Press any key to quit]", 85, 230);
	LD	BC,230
	PUSH	BC
	LD	BC,85
	PUSH	BC
	LD	BC,L__26
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  150	    while (!os_GetCSC());
L_41:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_41
L_8:
;  151	err:
;  152	    // Return immediately
;  153	    ti_CloseAll();
	CALL	_ti_CloseAll
;  154	    gfx_End();
	CALL	_gfx_End
;  155	    prgm_CleanUp();
	CALL	_prgm_CleanUp
;  156	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_prgm_CleanUp                       IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function
;_displayError                       IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_PutC                            IMPORT  -----   function
;_parseProgram                       IMPORT  -----   function
;_CProgramHeader                     IMPORT  -----   function
;_CHeaderData                        IMPORT  -----   function
;_memcpy                             IMPORT  -----   function
;_ti_OpenVar                         IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_ice                                STATIC  40840   variable
;_strcpy                             IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_HorizLine_NoClip               IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_0temp0                             STATIC      2   variable
;buf                                  IX-55     30   variable
;G_0                                  IX-25      3   variable
;ICEheader                            IX-22      2   variable
;programDataSize                      IX-20      3   variable
;programSize                          IX-17      3   variable
;headerSize                           IX-14      3   variable
;search_pos                           IX-11      3   variable
;selectionOffset                       IX-8      1   variable
;res                                   IX-7      1   variable
;amountOfPrograms                      IX-6      1   variable
;var_name                              IX-5      3   variable
;key                                   IX-2      1   variable
;selectedProgram                       IX-1      1   variable


; Stack Frame Size: 64 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__0:
	DB	"ICE Compiler v1.6 - By Peter \"PT_\" Tillema"
	DB	0
L__4:
	DB	"No programs found!"
	DB	0
L__5:
	DB	">"
	DB	0
L__15:
	DB	"Compiling program %s..."
	DB	0
L__16:
	DB	"r"
	DB	0
L__19:
	DB	"w"
	DB	0
L__24:
	DB	"Succesfully compiled!"
	DB	0
L__25:
	DB	"Output size: %u bytes"
	DB	0
L__26:
	DB	"[Press any key to quit]"
	DB	0
	SEGMENT TEXT
_0temp0:
	DB	44
	DB	0
	XREF _displayError:ROM
	XREF _CProgramHeader:ROM
	XREF _CHeaderData:ROM
	XREF _parseProgram:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_HorizLine_NoClip:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _ti_PutC:ROM
	XREF _ti_Write:ROM
	XREF _ti_DetectVar:ROM
	XREF _ti_OpenVar:ROM
	XREF _ti_CloseAll:ROM
	XREF _strcpy:ROM
	XREF _memcpy:ROM
	XREF _sprintf:ROM
	XREF _os_GetCSC:ROM
	XREF _prgm_CleanUp:ROM
	XREF __frameset:ROM
	XDEF _main
	XDEF _ice
	END
