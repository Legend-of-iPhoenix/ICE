; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
_parseProgram:
;    1	/* Keep these headers */
;    2	#include <stdbool.h>
	RET	


;**************************** _parseProgram ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT TEXT
_prgmName:
	DB	65
	DB	66
	DB	67
	DB	0
	SEGMENT BSS
_outputName:
	DS	9
_token:
	DS	3
_inputProgram:
	DS	1
_outputProgram:
	DS	1
;    3	#include <stddef.h>
;    4	#include <stdint.h>
;    5	#include <tice.h>
;    6	 
;    7	/* Standard headers - it's recommended to leave them included */
;    8	#include <math.h>
;    9	#include <stdio.h>
;   10	#include <stdlib.h>
;   11	#include <string.h>
;   12	
;   13	/* Shared library headers -- depends on which ones you wish to use */
;   14	#include <fileioc.h>
;   15	
;   16	#include "parseProgram.c"
;   17	
;   18	const char prgmName[] = "ABC";
;   19	char outputName[9];
;   20	unsigned int token;
;   21	ti_var_t inputProgram, outputProgram;
	SEGMENT CODE
;   22	
;   23	void main() {
_main:
	LD	HL,-1
	CALL	__frameset
;   24		uint8_t a = 0;
	LD	(IX+-1),0
;   25		
;   26	    ti_CloseAll();
	CALL	_ti_CloseAll
;   27	    inputProgram = ti_OpenVar(prgmName, "r", ti_Program);
	LD	BC,5
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	LD	BC,_prgmName
	PUSH	BC
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
	LD	(_inputProgram),A
;   28	    if (!inputProgram) 					goto err;
	OR	A,A
	JR	Z,L_1
;   29			
;   30		// Check if it's an ICE program
;   31		if (ti_GetC(inputProgram) != 0x2C)	goto err;
	LD	A,(_inputProgram)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_GetC
	POP	BC
	LD	BC,44
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_1
	JR	L_8
;   32		
;   33		// Get the output 
;   34		while ((token = ti_GetC(inputProgram)) + 1 && token != 0x3F && a < 8) {
L_9:
;   35			outputName[a++] = token;
	LD	A,(_token)
	LD	D,A
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,_outputName
	ADD	HL,BC
	LD	(HL),D
	INC	(IX+-1)
;   36		}
L_8:
	LD	A,(_inputProgram)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_GetC
	POP	BC
	LD	(_token),HL
	INC	HL
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	Z,L_11
	LD	BC,63
	LD	HL,(_token)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_11
	LD	A,(IX+-1)
	CP	A,8
	JR	C,L_9
L_11:
;   37		
;   38		// Create or empty the output program
;   39		outputProgram = ti_OpenVar(outputName, "w", ti_Program);
	LD	BC,5
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	LD	BC,_outputName
	PUSH	BC
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
	LD	(_outputProgram),A
;   40		if (!outputProgram)					goto err;
	OR	A,A
	JR	Z,L_1
;   41		
;   42		while ((token = ti_GetC(inputProgram)) + 1) {
;   43		}
L_13:
	LD	A,(_inputProgram)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_GetC
	POP	BC
	LD	(_token),HL
	INC	HL
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	NZ,L_13
L_1:
;   44		
;   45	err:
;   46		ti_CloseAll();
	CALL	_ti_CloseAll
;   47	    prgm_CleanUp();
	CALL	_prgm_CleanUp
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_prgm_CleanUp                       IMPORT  -----   function
;_outputProgram                      STATIC      1   variable
;_outputName                         STATIC      9   variable
;_token                              STATIC      3   variable
;_ti_GetC                            IMPORT  -----   function
;_inputProgram                       STATIC      1   variable
;_prgmName                           STATIC      4   variable
;_ti_OpenVar                         IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;a                                     IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"r"
	DB	0
L__7:
	DB	"w"
	DB	0
	XREF _ti_GetC:ROM
	XREF _ti_OpenVar:ROM
	XREF _ti_CloseAll:ROM
	XREF _prgm_CleanUp:ROM
	XREF __frameset:ROM
	XDEF _main
	XDEF _outputProgram
	XDEF _inputProgram
	XDEF _token
	XDEF _outputName
	XDEF _prgmName
	XDEF _parseProgram
	END
