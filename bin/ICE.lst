    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\ti84pce.inc"
Listing for file "ice.asm"
    2 00:0000 -  -  -  -  #include "defines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\defines.asm"
    1 00:0000 -  -  -  -  tempToken				.equ saveSScreen+00
    2 00:0000 -  -  -  -  tempToken2				.equ saveSScreen+01
    3 00:0000 -  -  -  -  InputStartData			.equ saveSScreen+02
    4 00:0000 -  -  -  -  RandStartData			.equ saveSScreen+05
    5 00:0000 -  -  -  -  PauseStartData			.equ saveSScreen+08
    6 00:0000 -  -  -  -  MeanStartData			.equ saveSScreen+11
    7 00:0000 -  -  -  -  KeypadStartData			.equ saveSScreen+14
    8 00:0000 -  -  -  -  RootStartData			.equ saveSScreen+17
    9 00:0000 -  -  -  -  PrevProgramPtr			.equ saveSScreen+20
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  stack					.equ saveSScreen+00100
   12 00:0000 -  -  -  -  output					.equ saveSScreen+01100
   13 00:0000 -  -  -  -  programNamesStack		.equ saveSScreen+03000
   14 00:0000 -  -  -  -  labelStack				.equ saveSScreen+03000
   15 00:0000 -  -  -  -  gotoStack				.equ saveSScreen+04000
   16 00:0000 -  -  -  -  programDataOffsetStack	.equ saveSScreen+05000
   17 00:0000 -  -  -  -  tempStringsStack		.equ saveSScreen+06500
   18 00:0000 -  -  -  -  tempListsStack			.equ saveSScreen+08000
   19 00:0000 -  -  -  -  programDataData			.equ saveSScreen+11000
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  tempArg1				.equ pixelShadow2+0000
   22 00:0000 -  -  -  -  tempArg2				.equ pixelShadow2+1000
   23 00:0000 -  -  -  -  tempArg3				.equ pixelShadow2+2000
   24 00:0000 -  -  -  -  tempArg4				.equ pixelShadow2+3000
   25 00:0000 -  -  -  -  tempArg5				.equ pixelShadow2+4000
   26 00:0000 -  -  -  -  tempArg6				.equ pixelShadow2+5000
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  startTab				.equ saveSScreen
   29 00:0000 -  -  -  -  
   30 00:0000 -  -  -  -  program					.equ vRAM+(320*240)
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  fProgram1				.equ -30h
   33 00:0000 -  -  -  -  comp_with_libs			.equ 0										; used if compile with C libs
   34 00:0000 -  -  -  -  good_compilation		.equ 1										; used if compilation is succesfull
   35 00:0000 -  -  -  -  has_already_input		.equ 2										; only once the "Input" routine
   36 00:0000 -  -  -  -  has_already_rand		.equ 3										; only once the "rand" routine
   37 00:0000 -  -  -  -  has_already_pause		.equ 4										; only once the "Pause" routine
   38 00:0000 -  -  -  -  has_already_mean		.equ 5										; only once the "mean()" routine
   39 00:0000 -  -  -  -  has_already_keypad		.equ 6										; only once the scanning the keypad
   40 00:0000 -  -  -  -  used_code				.equ 7										; DefineSprite( must be in front of all the code
   41 00:0000 -  -  -  -  
   42 00:0000 -  -  -  -  fProgram2				.equ -31h
   43 00:0000 -  -  -  -  has_already_root		.equ 0										; only once the "Sqrt(" routine
   44 00:0000 -  -  -  -  
   45 00:0000 -  -  -  -  fExpression1			.equ -40h
   46 00:0000 -  -  -  -  prev_is_number			.equ 0										; used if a number consists of more digits
   47 00:0000 -  -  -  -  chain_operators			.equ 1										; used if the calculation is needed for another calculation
   48 00:0000 -  -  -  -  last_token_is_ret		.equ 2										; used if last token is "Return"
   49 00:0000 -  -  -  -  op_is_last_one			.equ 3										; used if the operator is the last of that line
   50 00:0000 -  -  -  -  output_is_number		.equ 4										; used if the calculation is only a single number, loop-statements can be 
   51 00:0000 -  -  -  -  ans_set_z_flag			.equ 5										; used if the previous calculation sets the zero flag, useful for loop/conditions
   52 00:0000 -  -  -  -  need_push				.equ 6										; used if Ans may not be overwritten
   53 00:0000 -  -  -  -  output_is_string		.equ 7										; used for strings
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  fExpression2			.equ -41h
   56 00:0000 -  -  -  -  use_mean_routine		.equ 0										; used if the function is mean()
   57 00:0000 -  -  -  -  last_token_was_not		.equ 1										; used if the last token is "not(", which can be optimized at If/Repeat/While
   58 00:0000 -  -  -  -  
   59 00:0000 -  -  -  -  fExpression3			.equ -42h
   60 00:0000 -  -  -  -  triggered_a_comma		.equ 0										; used if a comma is entered outside parens, used by functions
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  fFunction1				.equ -50h
   63 00:0000 -  -  -  -  arg1_is_small			.equ 4										; used in C functions
   64 00:0000 -  -  -  -  function_implemented	.equ 4										; used if C function is implemented
   65 00:0000 -  -  -  -  arg2_is_small			.equ 3										; used in C functions
   66 00:0000 -  -  -  -  arg3_is_small			.equ 2										; used in C functions
   67 00:0000 -  -  -  -  arg4_is_small			.equ 1										; used in C functions
   68 00:0000 -  -  -  -  arg5_is_small			.equ 0										; used in C functions
   69 00:0000 -  -  -  -  
   70 00:0000 -  -  -  -  fFunction2				.equ -51h
   71 00:0000 -  -  -  -  negative_for_step		.equ 0										; used for the step in a For loop
   72 00:0000 -  -  -  -  for_step_is_number		.equ 1										; used for the step in a For loop
   73 00:0000 -  -  -  -  end_point_is_number		.equ 2										; used for the end point in a For loop
   74 00:0000 -  -  -  -  
   75 00:0000 -  -  -  -  fAlways1				.equ -50h
   76 00:0000 -  -  -  -  displayed_det			.equ 0										; used if the text of a det( function is displayed in the statusbar
   77 00:0000 -  -  -  -  modified_iy				.equ 1										; used if iy is modified by a C routine
   78 00:0000 -  -  -  -  
   79 00:0000 -  -  -  -  typeNumber				.equ 0
   80 00:0000 -  -  -  -  typeVariable			.equ 1
   81 00:0000 -  -  -  -  typeChainPush			.equ 2
   82 00:0000 -  -  -  -  typeChainAns			.equ 3
   83 00:0000 -  -  -  -  typeReturnValue			.equ 4										; getKey, rand
   84 00:0000 -  -  -  -  typeList				.equ 5
   85 00:0000 -  -  -  -  typeOSList				.equ 6
   86 00:0000 -  -  -  -  typeString				.equ 7
   87 00:0000 -  -  -  -  typeFunction			.equ 00111111b
   88 00:0000 -  -  -  -  typeOperator			.equ 00011111b
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  ChainPush				.equ 0
   91 00:0000 -  -  -  -  ChainAns				.equ 1
   92 00:0000 -  -  -  -  ChainListPush			.equ 2
   93 00:0000 -  -  -  -  ChainListAns			.equ 3
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  OutputInBC				.equ 0
   96 00:0000 -  -  -  -  OutputInDE				.equ 1
   97 00:0000 -  -  -  -  OutputInHL				.equ 2
   98 00:0000 -  -  -  -  
   99 00:0000 -  -  -  -  OutputIsInDE			.equ 0
  100 00:0000 -  -  -  -  OutputIsInHL			.equ 1
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ;---------------------------;
  103 00:0000 -  -  -  -  ;----- User Variables ------;
  104 00:0000 -  -  -  -  ;---------------------------;
  105 00:0000 -  -  -  -  Str0					.equ saveSScreen+15500
  106 00:0000 -  -  -  -  Str1					.equ saveSScreen+16000
  107 00:0000 -  -  -  -  Str2					.equ saveSScreen+16500
  108 00:0000 -  -  -  -  Str3					.equ saveSScreen+17000
  109 00:0000 -  -  -  -  Str4					.equ saveSScreen+17500
  110 00:0000 -  -  -  -  Str5					.equ saveSScreen+18000
  111 00:0000 -  -  -  -  Str6					.equ saveSScreen+18500
  112 00:0000 -  -  -  -  Str7					.equ saveSScreen+19000
  113 00:0000 -  -  -  -  Str8					.equ saveSScreen+19500
  114 00:0000 -  -  -  -  Str9					.equ saveSScreen+20000
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  L1						.equ saveSScreen
  117 00:0000 -  -  -  -  L2						.equ cmdPixelShadow
  118 00:0000 -  -  -  -  L3						.equ pixelShadow2
  119 00:0000 -  -  -  -  L4						.equ plotSScreen
  120 00:0000 -  -  -  -  L5						.equ pixelShadow
  121 00:0000 -  -  -  -  L6						.equ L1+10000
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ; IX offsets
  124 00:0000 -  -  -  -  vA						.equ 0
  125 00:0000 -  -  -  -  vB						.equ 3
  126 00:0000 -  -  -  -  vC						.equ 6
  127 00:0000 -  -  -  -  vD						.equ 9
  128 00:0000 -  -  -  -  vE						.equ 12
  129 00:0000 -  -  -  -  vF						.equ 15
  130 00:0000 -  -  -  -  vG						.equ 18
  131 00:0000 -  -  -  -  vH						.equ 21
  132 00:0000 -  -  -  -  vI						.equ 24
  133 00:0000 -  -  -  -  vJ						.equ 27
  134 00:0000 -  -  -  -  vK						.equ 30
  135 00:0000 -  -  -  -  vL						.equ 33
  136 00:0000 -  -  -  -  vM						.equ 36
  137 00:0000 -  -  -  -  vN						.equ 39
  138 00:0000 -  -  -  -  vO						.equ 42
  139 00:0000 -  -  -  -  vP						.equ 45
  140 00:0000 -  -  -  -  vQ						.equ 48
  141 00:0000 -  -  -  -  vR						.equ 51
  142 00:0000 -  -  -  -  vS						.equ 54
  143 00:0000 -  -  -  -  vT						.equ 57
  144 00:0000 -  -  -  -  vU						.equ 60
  145 00:0000 -  -  -  -  vV						.equ 63
  146 00:0000 -  -  -  -  vW						.equ 66
  147 00:0000 -  -  -  -  vX						.equ 69
  148 00:0000 -  -  -  -  vY						.equ 72
  149 00:0000 -  -  -  -  vZ						.equ 75
  150 00:0000 -  -  -  -  vtheta					.equ 78
  151 00:0000 -  -  -  -  
  152 00:0000 -  -  -  -  rand1					.equ 81
  153 00:0000 -  -  -  -  rand2					.equ 84
Listing for file "ice.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 EF 7B -  -  .db tExtTok, tAsm84CeCmp
    5 00:0002 -  -  -  -  .org UserMem
    6 D1:A881 -  -  -  -  
    7 D1:A881 -  -  -  -  start:
    8 D1:A881 ED 73 22 B0 
              D1 -  -  -  	ld (backupSP), sp
    9 D1:A886 2A 17 23 D0 	ld hl, (begPC)
   10 D1:A88A 22 26 B0 D1 	ld (backupBegPC), hl
   11 D1:A88E 2A 1A 23 D0 	ld hl, (curPC)
   12 D1:A892 22 2E B0 D1 	ld (backupCurPC), hl
   13 D1:A896 2A 1D 23 D0 	ld hl, (endPC)
   14 D1:A89A 22 36 B0 D1 	ld (backupEndPC), hl
   15 D1:A89E CD 48 08 02 	call _RunIndicOff
   16 D1:A8A2 CD E1 BC D1 	call InstallHooks
   17 D1:A8A6 -  -  -  -  GUI:
   18 D1:A8A6 3E 27 -  -  	ld a, lcdBpp8
   19 D1:A8A8 32 18 00 E3 	ld (mpLcdCtrl), a
   20 D1:A8AC 21 00 02 E3 	ld hl, mpLcdPalette
   21 D1:A8B0 06 00 -  -  	ld b, 0
   22 D1:A8B2 50 -  -  -  _:	ld d, b
   23 D1:A8B3 78 -  -  -  	ld a, b
   24 D1:A8B4 E6 C0 -  -  	and 011000000b
   25 D1:A8B6 CB 3A -  -  	srl d
   26 D1:A8B8 1F -  -  -  	rra
   27 D1:A8B9 5F -  -  -  	ld e, a
   28 D1:A8BA 3E 1F -  -  	ld a, 000011111b
   29 D1:A8BC A0 -  -  -  	and b
   30 D1:A8BD B3 -  -  -  	or e
   31 D1:A8BE 77 -  -  -  	ld (hl), a
   32 D1:A8BF 23 -  -  -  	inc hl
   33 D1:A8C0 72 -  -  -  	ld (hl), d
   34 D1:A8C1 23 -  -  -  	inc hl
   35 D1:A8C2 04 -  -  -  	inc b
   36 D1:A8C3 20 ED -  -  	jr nz, -_
   37 D1:A8C5 21 00 00 D4 	ld hl, vRAM
   38 D1:A8C9 36 BD -  -  	ld (hl), 189
   39 D1:A8CB E5 -  -  -  	push hl
   40 D1:A8CC D1 -  -  -  	pop de
   41 D1:A8CD 13 -  -  -  	inc de
   42 D1:A8CE 01 80 0C 00 	ld bc, 320*10
   43 D1:A8D2 ED B0 -  -  	ldir
   44 D1:A8D4 36 00 -  -  	ld (hl), 0
   45 D1:A8D6 01 40 01 00 	ld bc, 320
   46 D1:A8DA ED B0 -  -  	ldir
   47 D1:A8DC 36 FF -  -  	ld (hl), 255
   48 D1:A8DE 01 3F 1E 01 	ld bc, 320*229-1
   49 D1:A8E2 ED B0 -  -  	ldir
   50 D1:A8E4 FD CB D0 CE 	set good_compilation, (iy+fProgram1)
   51 D1:A8E8 FD CB B0 8E 	res modified_iy, (iy+fAlways1)
   52 D1:A8EC 21 04 ED D1 	ld hl, ICEName
   53 D1:A8F0 3E 01 -  -  	ld a, 1
   54 D1:A8F2 32 7D B8 D1 	ld (TextYPos_ASM), a
   55 D1:A8F6 C6 14 -  -  	add a, 20
   56 D1:A8F8 32 4C B8 D1 	ld (TextXPos_ASM), a
   57 D1:A8FC CD 0E B1 D1 	call PrintString
   58 D1:A900 21 7D B8 D1 	ld hl, TextYPos_ASM
   59 D1:A904 34 -  -  -  	inc (hl)
   60 D1:A905 34 -  -  -  	inc (hl)
   61 D1:A906 2A 9D 25 D0 	ld hl, (progPtr)
   62 D1:A90A -  -  -  -  FindPrograms:
   63 D1:A90A CD 7B BC D1 	call FindNextGoodVar
   64 D1:A90E 20 34 -  -  	jr nz, StopFindingPrograms
   65 D1:A910 E5 -  -  -  	push hl
   66 D1:A911 3A 7D B8 D1 		ld a, (TextYPos_ASM)
   67 D1:A915 C6 0A -  -  		add a, 10
   68 D1:A917 38 28 -  -  		jr c, +_
   69 D1:A919 32 7D B8 D1 		ld (TextYPos_ASM), a
   70 D1:A91D 21 0A 00 00 		ld hl, 10
   71 D1:A921 22 4C B8 D1 		ld (TextXPos_ASM), hl
   72 D1:A925 21 61 EA D1 		ld hl, AmountOfPrograms
   73 D1:A929 34 -  -  -  		inc (hl)
   74 D1:A92A CD 98 1F 02 		call _ChkInRAM
   75 D1:A92E 3E 23 -  -  		ld a, '#'
   76 D1:A930 DC 4A B8 D1 		call c, _PrintChar_ASM
   77 D1:A934 2A 4C EA D1 		ld hl, (ProgramNamesPtr)
   78 D1:A938 11 F8 FF FF 		ld de, -8
   79 D1:A93C 19 -  -  -  		add hl, de
   80 D1:A93D CD 0E B1 D1 		call PrintString
   81 D1:A941 E1 -  -  -  _:	pop hl
   82 D1:A942 18 C6 -  -  	jr FindPrograms
   83 D1:A944 -  -  -  -  StopFindingPrograms:
   84 D1:A944 3E 0D -  -  	ld a, 13
   85 D1:A946 32 7D B8 D1 	ld (TextYPos_ASM), a
   86 D1:A94A 21 01 00 00 	ld hl, 1
   87 D1:A94E 22 4C B8 D1 	ld (TextXPos_ASM), hl
   88 D1:A952 3A 61 EA D1 	ld a, (AmountOfPrograms)
   89 D1:A956 B7 -  -  -  	or a
   90 D1:A957 CA 46 AF D1 	jp z, NoProgramsError
   91 D1:A95B 32 C4 A9 D1 	ld (AmountPrograms), a
   92 D1:A95F 2E 01 -  -  	ld l, 1
   93 D1:A961 -  -  -  -  PrintCursor:
   94 D1:A961 5D -  -  -  	ld e, l
   95 D1:A962 16 0A -  -  	ld d, 10
   96 D1:A964 ED 5C -  -  	mlt de
   97 D1:A966 1C -  -  -  	inc e
   98 D1:A967 1C -  -  -  	inc e
   99 D1:A968 1C -  -  -  	inc e
  100 D1:A969 7B -  -  -  	ld a, e
  101 D1:A96A 32 7D B8 D1 	ld (TextYPos_ASM), a
  102 D1:A96E AF -  -  -  	xor a
  103 D1:A96F 32 A2 B8 D1 	ld (color), a
  104 D1:A973 3C -  -  -  	inc a
  105 D1:A974 32 4C B8 D1 	ld (TextXPos_ASM), a
  106 D1:A978 3E 3E -  -  	ld a, '>'
  107 D1:A97A CD 4A B8 D1 	call _PrintChar_ASM
  108 D1:A97E 3E FF -  -  	ld a, 255
  109 D1:A980 32 A2 B8 D1 	ld (color), a
  110 D1:A984 3E 01 -  -  	ld a, 1
  111 D1:A986 32 4C B8 D1 	ld (TextXPos_ASM), a
  112 D1:A98A E5 -  -  -  _:	push hl
  113 D1:A98B CD 4C 01 02 		call _GetCSC
  114 D1:A98F E1 -  -  -  	pop hl
  115 D1:A990 B7 -  -  -  	or a
  116 D1:A991 28 F7 -  -  	jr z, -_
  117 D1:A993 FE 04 -  -  	cp skUp
  118 D1:A995 28 1E -  -  	jr z, PressedUp
  119 D1:A997 FE 01 -  -  	cp skDown
  120 D1:A999 28 27 -  -  	jr z, PressedDown
  121 D1:A99B FE 0F -  -  	cp skClear
  122 D1:A99D CA 11 B0 D1 	jp z, StopProgram
  123 D1:A9A1 FE 09 -  -  	cp skEnter
  124 D1:A9A3 20 E5 -  -  	jr nz, -_
  125 D1:A9A5 -  -  -  -  PressedEnter:
  126 D1:A9A5 2D -  -  -  	dec l
  127 D1:A9A6 26 08 -  -  	ld h, 8
  128 D1:A9A8 ED 6C -  -  	mlt hl
  129 D1:A9AA 11 D6 F5 D0 	ld de, ProgramNamesStack-1
  130 D1:A9AE 19 -  -  -  	add hl, de
  131 D1:A9AF CD 20 03 02 	call _Mov9ToOP1
  132 D1:A9B3 18 1B -  -  	jr StartParsing
  133 D1:A9B5 -  -  -  -  PressedUp:
  134 D1:A9B5 7D -  -  -  	ld a, l
  135 D1:A9B6 3D -  -  -  	dec a
  136 D1:A9B7 28 D1 -  -  	jr z, -_
  137 D1:A9B9 2D -  -  -  	dec l
  138 D1:A9BA 3E 17 -  -  	ld a, 23
  139 D1:A9BC CD 4A B8 D1 	call _PrintChar_ASM
  140 D1:A9C0 18 9F -  -  	jr PrintCursor
  141 D1:A9C2 -  -  -  -  PressedDown:
  142 D1:A9C2 7D -  -  -  	ld a, l
  143 D1:A9C3 -  -  -  -  AmountPrograms = $+1
  144 D1:A9C3 FE 00 -  -  	cp a, 0
  145 D1:A9C5 28 C3 -  -  	jr z, -_
  146 D1:A9C7 2C -  -  -  	inc l
  147 D1:A9C8 3E 17 -  -  	ld a, 23
  148 D1:A9CA CD 4A B8 D1 	call _PrintChar_ASM
  149 D1:A9CE 18 91 -  -  	jr PrintCursor
  150 D1:A9D0 -  -  -  -  StartParsing:
  151 D1:A9D0 3E 05 -  -  	ld a, ProgObj
  152 D1:A9D2 32 F8 05 D0 	ld (OP1), a
  153 D1:A9D6 CD 0C 05 02 _:	call _ChkFindSym
  154 D1:A9DA 30 07 -  -  	jr nc, +_
  155 D1:A9DC 21 F8 05 D0 	ld hl, OP1
  156 D1:A9E0 34 -  -  -  	inc (hl)
  157 D1:A9E1 18 F3 -  -  	jr -_
  158 D1:A9E3 CD 98 1F 02 _:	call _ChkInRAM
  159 D1:A9E7 30 0A -  -  	jr nc, +_
  160 D1:A9E9 EB -  -  -  	ex de, hl
  161 D1:A9EA 11 09 00 00 	ld de, 9
  162 D1:A9EE 19 -  -  -  	add hl, de
  163 D1:A9EF 5E -  -  -  	ld e, (hl)
  164 D1:A9F0 19 -  -  -  	add hl, de
  165 D1:A9F1 23 -  -  -  	inc hl
  166 D1:A9F2 EB -  -  -  	ex de, hl
  167 D1:A9F3 01 00 00 00 _:	ld bc, 0
  168 D1:A9F7 EB -  -  -  	ex de, hl
  169 D1:A9F8 4E -  -  -  	ld c, (hl)																; BC = program length
  170 D1:A9F9 23 -  -  -  	inc hl
  171 D1:A9FA 46 -  -  -  	ld b, (hl)
  172 D1:A9FB 23 -  -  -  	inc hl
  173 D1:A9FC 22 1A 23 D0 	ld (curPC), hl
  174 D1:AA00 22 17 23 D0 	ld (begPC), hl
  175 D1:AA04 09 -  -  -  	add hl, bc
  176 D1:AA05 2B -  -  -  	dec hl
  177 D1:AA06 22 1D 23 D0 	ld (endPC), hl
  178 D1:AA0A CD F9 B0 D1 	call PrintCompilingProgram
  179 D1:AA0E FD 36 D0 01 	ld (iy+fProgram1), 1
  180 D1:AA12 FD 36 CF 00 	ld (iy+fProgram2), 0
  181 D1:AA16 21 13 EF D1 	ld hl, CData
  182 D1:AA1A ED 5B 49 EA 
              D1 -  -  -  	ld de, (programPtr)
  183 D1:AA1F 01 79 00 00 	ld bc, CData2 - CData
  184 D1:AA23 ED B0 -  -  	ldir
  185 D1:AA25 ED 53 49 EA 
              D1 -  -  -  	ld (programPtr), de
  186 D1:AA2A CD 18 B1 D1 	call PreScanPrograms
  187 D1:AA2E 3E CD -  -  	ld a, 0CDh
  188 D1:AA30 21 48 08 02 	ld hl, _RunIndicOff
  189 D1:AA34 CD 4C AC D1 	call InsertAHL															; call _RunIndicOff
  190 D1:AA38 2A 49 EA D1 	ld hl, (programPtr)
  191 D1:AA3C 11 8E 7C FC 	ld de, 4+4+5+UserMem-program
  192 D1:AA40 19 -  -  -  	add hl, de
  193 D1:AA41 CD 4C AC D1 	call InsertAHL															; call *
  194 D1:AA45 01 FD 21 80 	ld bc, 08021FDh
  195 D1:AA49 11 00 D0 C3 	ld de, 0C3D000h
  196 D1:AA4D 21 3C 1A 02 	ld hl, _DrawStatusBar
  197 D1:AA51 CD 81 AC D1 	call InsertBCDEHL														; ld iy, flags \ jp _DrawStatusBar
  198 D1:AA55 2A 49 EA D1 	ld hl, (programPtr)
  199 D1:AA59 22 33 EA D0 	ld (PrevProgramPtr), hl
  200 D1:AA5D 3A 65 EA D1 	ld a, (amountOfCRoutines)
  201 D1:AA61 B7 -  -  -  	or a
  202 D1:AA62 20 0C -  -  	jr nz, CompileProgramFull
  203 D1:AA64 FD CB D0 86 	res comp_with_libs, (iy+fProgram1)
  204 D1:AA68 21 05 2C D5 	ld hl, program+5
  205 D1:AA6C 22 49 EA D1 	ld (programPtr), hl
  206 D1:AA70 -  -  -  -  CompileProgramFull:
  207 D1:AA70 3A 6C EA D1 	ld a, (AmountOfSubPrograms)
  208 D1:AA74 B7 -  -  -  	or a
  209 D1:AA75 20 22 -  -  	jr nz, SkipGetProgramName
  210 D1:AA77 21 6D EA D1 	ld hl, varname
  211 D1:AA7B CD 2F B2 D1 	call GetProgramName
  212 D1:AA7F 21 F9 05 D0 	ld hl, OP1+1
  213 D1:AA83 11 6E EA D1 	ld de, varname+1
  214 D1:AA87 06 08 -  -  	ld b, 8
  215 D1:AA89 -  -  -  -  CheckNames:
  216 D1:AA89 1A -  -  -  	ld a, (de)
  217 D1:AA8A B7 -  -  -  	or a
  218 D1:AA8B 28 07 -  -  	jr z, CheckNamesSameLength
  219 D1:AA8D BE -  -  -  	cp (hl)
  220 D1:AA8E 20 09 -  -  	jr nz, GoodProgramName
  221 D1:AA90 23 -  -  -  	inc hl
  222 D1:AA91 13 -  -  -  	inc de
  223 D1:AA92 10 F5 -  -  	djnz CheckNames
  224 D1:AA94 -  -  -  -  CheckNamesSameLength:
  225 D1:AA94 BE -  -  -  	cp (hl)
  226 D1:AA95 CA 68 AF D1 	jp z, SameNameError
  227 D1:AA99 -  -  -  -  GoodProgramName:
  228 D1:AA99 -  -  -  -  SkipGetProgramName:
  229 D1:AA99 -  -  -  -  
  230 D1:AA99 -  -  -  -  ParseProgramUntilEnd:
  231 D1:AA99 -  -  -  -  CompileLoop:
  232 D1:AA99 AF -  -  -  	xor a
  233 D1:AA9A FD 77 C0 -  	ld (iy+fExpression1), a
  234 D1:AA9D FD 77 BF -  	ld (iy+fExpression2), a
  235 D1:AAA0 FD 77 BE -  	ld (iy+fExpression3), a
  236 D1:AAA3 FD 77 B0 -  	ld (iy+fFunction1), a
  237 D1:AAA6 FD 77 AF -  	ld (iy+fFunction2), a
  238 D1:AAA9 32 62 EA D1 	ld (openedParensE), a
  239 D1:AAAD 32 63 EA D1 	ld (openedParensF), a
  240 D1:AAB1 CD 28 10 02 	call _IncFetch
  241 D1:AAB5 32 1F EA D0 	ld (tempToken), a
  242 D1:AAB9 38 58 -  -  	jr c, FindGotos
  243 D1:AABB FE D4 -  -  	cp tEnd
  244 D1:AABD 20 10 -  -  	jr nz, ++_
  245 D1:AABF 21 66 EA D1 _:	ld hl, amountOfEnds
  246 D1:AAC3 7E -  -  -  	ld a, (hl)
  247 D1:AAC4 35 -  -  -  	dec (hl)
  248 D1:AAC5 B7 -  -  -  	or a
  249 D1:AAC6 CA 86 AF D1 	jp z, EndError
  250 D1:AACA 3A 1F EA D0 	ld a, (tempToken)
  251 D1:AACE C9 -  -  -  	ret
  252 D1:AACF FE D0 -  -  _:	cp tElse
  253 D1:AAD1 28 EC -  -  	jr z, --_
  254 D1:AAD3 CD 78 B2 D1 	call ParseLine
  255 D1:AAD7 2A 1A 23 D0 	ld hl, (curPC)
  256 D1:AADB ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  257 D1:AAE0 B7 -  -  -  	or a
  258 D1:AAE1 ED 52 -  -  	sbc hl, de
  259 D1:AAE3 01 40 01 00 	ld bc, 320
  260 D1:AAE7 CD 54 01 00 	call __imulu
  261 D1:AAEB E5 -  -  -  	push hl
  262 D1:AAEC 2A 1D 23 D0 		ld hl, (endPC)
  263 D1:AAF0 B7 -  -  -  		or a
  264 D1:AAF1 ED 52 -  -  		sbc hl, de
  265 D1:AAF3 23 -  -  -  		inc hl
  266 D1:AAF4 E5 -  -  -  		push hl
  267 D1:AAF5 C1 -  -  -  		pop bc
  268 D1:AAF6 E1 -  -  -  	pop hl
  269 D1:AAF7 CD 40 01 00 	call __idivu
  270 D1:AAFB E5 -  -  -  	push hl
  271 D1:AAFC C1 -  -  -  	pop bc
  272 D1:AAFD 78 -  -  -  	ld a, b
  273 D1:AAFE B1 -  -  -  	or c
  274 D1:AAFF 28 10 -  -  	jr z, +_
  275 D1:AB01 21 40 1F D4 	ld hl, vRAM+(320*25)
  276 D1:AB05 36 00 -  -  	ld (hl), 0
  277 D1:AB07 E5 -  -  -  	push hl
  278 D1:AB08 D1 -  -  -  	pop de
  279 D1:AB09 13 -  -  -  	inc de
  280 D1:AB0A 0B -  -  -  	dec bc
  281 D1:AB0B 78 -  -  -  	ld a, b
  282 D1:AB0C B1 -  -  -  	or c
  283 D1:AB0D 28 8A -  -  	jr z, CompileLoop
  284 D1:AB0F ED B0 -  -  	ldir
  285 D1:AB11 18 86 -  -  _:	jr CompileLoop
  286 D1:AB13 -  -  -  -  FindGotos:
  287 D1:AB13 21 66 EA D1 	ld hl, amountOfEnds
  288 D1:AB17 7E -  -  -  	ld a, (hl)
  289 D1:AB18 B7 -  -  -  	or a
  290 D1:AB19 28 02 -  -  	jr z, +_
  291 D1:AB1B 35 -  -  -  	dec (hl)
  292 D1:AB1C C9 -  -  -  	ret
  293 D1:AB1D 21 6C EA D1 _:	ld hl, AmountOfSubPrograms
  294 D1:AB21 7E -  -  -  	ld a, (hl)
  295 D1:AB22 35 -  -  -  	dec (hl)
  296 D1:AB23 B7 -  -  -  	or a
  297 D1:AB24 C0 -  -  -  	ret nz
  298 D1:AB25 -  -  -  -  FindGotosLoop:
  299 D1:AB25 2A 52 EA D1 	ld hl, (gotoPtr)
  300 D1:AB29 11 BF F9 D0 	ld de, gotoStack
  301 D1:AB2D B7 -  -  -  	or a
  302 D1:AB2E ED 52 -  -  	sbc hl, de
  303 D1:AB30 28 4F -  -  	jr z, AddDataToProgramData												; have we finished all the Goto's?
  304 D1:AB32 19 -  -  -  	add hl, de
  305 D1:AB33 2B -  -  -  	dec hl
  306 D1:AB34 2B -  -  -  	dec hl
  307 D1:AB35 2B -  -  -  	dec hl
  308 D1:AB36 E5 -  -  -  	push hl
  309 D1:AB37 ED 27 -  -  		ld hl, (hl)
  310 D1:AB39 EB -  -  -  		ex de, hl															; de = pointer to goto data
  311 D1:AB3A 2A 4F EA D1 		ld hl, (labelPtr)
  312 D1:AB3E -  -  -  -  FindLabels:
  313 D1:AB3E 01 D7 F5 D0 		ld bc, labelStack
  314 D1:AB42 B7 -  -  -  		or a
  315 D1:AB43 ED 42 -  -  		sbc hl, bc
  316 D1:AB45 CA 92 AF D1 		jp z, LabelError													; have we finished all the Lbl's?
  317 D1:AB49 09 -  -  -  		add hl, bc
  318 D1:AB4A 2B -  -  -  		dec hl
  319 D1:AB4B 2B -  -  -  		dec hl
  320 D1:AB4C 2B -  -  -  		dec hl																; hl = pointer to label
  321 D1:AB4D -  -  -  -  FindLabel:
  322 D1:AB4D E5 -  -  -  		push hl
  323 D1:AB4E D5 -  -  -  			push de
  324 D1:AB4F ED 27 -  -  				ld hl, (hl)													; hl = pointer to label data
  325 D1:AB51 CD C5 AE D1 				call CompareStrings											; is it the right label?
  326 D1:AB55 D1 -  -  -  			pop de
  327 D1:AB56 E1 -  -  -  		pop hl
  328 D1:AB57 20 22 -  -  		jr nz, LabelNotRightOne
  329 D1:AB59 -  -  -  -  RightLabel:
  330 D1:AB59 2B -  -  -  		dec hl
  331 D1:AB5A 2B -  -  -  		dec hl
  332 D1:AB5B 2B -  -  -  		dec hl
  333 D1:AB5C ED 27 -  -  		ld hl, (hl)
  334 D1:AB5E 11 81 7C FC 		ld de, UserMem-program
  335 D1:AB62 19 -  -  -  		add hl, de
  336 D1:AB63 EB -  -  -  		ex de, hl															; de points to label memory
  337 D1:AB64 E1 -  -  -  	pop hl																	; hl = pointer to goto
  338 D1:AB65 2B -  -  -  	dec hl
  339 D1:AB66 2B -  -  -  	dec hl
  340 D1:AB67 2B -  -  -  	dec hl
  341 D1:AB68 ED 27 -  -  	ld hl, (hl)																; hl = pointer to jump to
  342 D1:AB6A ED 1F -  -  	ld (hl), de
  343 D1:AB6C 2A 52 EA D1 	ld hl, (gotoPtr)
  344 D1:AB70 11 FA FF FF 	ld de, -6
  345 D1:AB74 19 -  -  -  	add hl, de																; get next Goto
  346 D1:AB75 22 52 EA D1 	ld (gotoPtr), hl
  347 D1:AB79 18 AA -  -  	jr FindGotosLoop
  348 D1:AB7B -  -  -  -  LabelNotRightOne:
  349 D1:AB7B 2B -  -  -  		dec hl
  350 D1:AB7C 2B -  -  -  		dec hl
  351 D1:AB7D 2B -  -  -  		dec hl
  352 D1:AB7E 18 BE -  -  		jr FindLabels
  353 D1:AB80 -  -  -  -  StopFindLabels:
  354 D1:AB80 E1 -  -  -  	pop hl
  355 D1:AB81 -  -  -  -  AddDataToProgramData:
  356 D1:AB81 FD CB C0 56 	bit last_token_is_ret, (iy+fExpression1)
  357 D1:AB85 20 06 -  -  	jr nz, +_
  358 D1:AB87 3E C9 -  -  	ld a, 0C9h
  359 D1:AB89 CD 0E AD D1 	call InsertA															; ret
  360 D1:AB8D 2A 5E EA D1 _:	ld hl, (programDataDataPtr)
  361 D1:AB91 01 17 15 D1 	ld bc, programDataData
  362 D1:AB95 B7 -  -  -  	or a
  363 D1:AB96 ED 42 -  -  	sbc hl, bc
  364 D1:AB98 E5 -  -  -  	push hl
  365 D1:AB99 C1 -  -  -  	pop bc																	; bc = data length
  366 D1:AB9A 28 3D -  -  	jr z, CreateProgram														; check IF there is data
  367 D1:AB9C ED 5B 49 EA 
              D1 -  -  -  	ld de, (programPtr)
  368 D1:ABA1 21 17 15 D1 	ld hl, programDataData
  369 D1:ABA5 B7 -  -  -  	or a
  370 D1:ABA6 ED 52 -  -  	sbc hl, de
  371 D1:ABA8 E5 -  -  -  	push hl
  372 D1:ABA9 19 -  -  -  		add hl, de
  373 D1:ABAA ED B0 -  -  		ldir																; move the data to the end of the program
  374 D1:ABAC ED 53 49 EA 
              D1 -  -  -  		ld (programPtr), de
  375 D1:ABB1 D1 -  -  -  	pop de
  376 D1:ABB2 2A 55 EA D1 	ld hl, (programDataOffsetPtr)
  377 D1:ABB6 -  -  -  -  AddDataLoop:																; update all the pointers pointing to data
  378 D1:ABB6 01 A7 FD D0 	ld bc, programDataOffsetStack
  379 D1:ABBA B7 -  -  -  	or a
  380 D1:ABBB ED 42 -  -  	sbc hl, bc
  381 D1:ABBD 28 1A -  -  	jr z, CreateProgram														; no more pointers left
  382 D1:ABBF 09 -  -  -  	add hl, bc
  383 D1:ABC0 2B -  -  -  	dec hl
  384 D1:ABC1 2B -  -  -  	dec hl
  385 D1:ABC2 2B -  -  -  	dec hl
  386 D1:ABC3 E5 -  -  -  	push hl
  387 D1:ABC4 ED 27 -  -  		ld hl, (hl)															; complicated stuff XD
  388 D1:ABC6 E5 -  -  -  		push hl
  389 D1:ABC7 ED 27 -  -  			ld hl, (hl)
  390 D1:ABC9 B7 -  -  -  			or a
  391 D1:ABCA ED 52 -  -  			sbc hl, de
  392 D1:ABCC 01 81 7C FC 			ld bc, UserMem-program
  393 D1:ABD0 09 -  -  -  			add hl, bc
  394 D1:ABD1 E5 -  -  -  			push hl
  395 D1:ABD2 C1 -  -  -  			pop bc
  396 D1:ABD3 E1 -  -  -  		pop hl
  397 D1:ABD4 ED 0F -  -  		ld (hl), bc															; ld (XXXXXX), hl
  398 D1:ABD6 E1 -  -  -  	pop hl
  399 D1:ABD7 18 DD -  -  	jr AddDataLoop
  400 D1:ABD9 -  -  -  -  CreateProgram:
  401 D1:ABD9 21 6D EA D1 	ld hl, varname
  402 D1:ABDD CD 20 03 02 	call _Mov9ToOP1
  403 D1:ABE1 CD 0C 05 02 	call _ChkFindSym
  404 D1:ABE5 38 13 -  -  	jr c, ++_
  405 D1:ABE7 CD 98 1F 02 	call _ChkInRAM
  406 D1:ABEB 30 09 -  -  	jr nc, +_
  407 D1:ABED CD 48 14 02 	call _Arc_Unarc
  408 D1:ABF1 01 05 00 00 	ld bc, 5
  409 D1:ABF5 09 -  -  -  	add hl, bc
  410 D1:ABF6 CD 88 05 02 _:	call _DelVar
  411 D1:ABFA 2A 49 EA D1 _:	ld hl, (programPtr)
  412 D1:ABFE 01 00 2C D5 	ld bc, program
  413 D1:AC02 B7 -  -  -  	or a
  414 D1:AC03 ED 42 -  -  	sbc hl, bc
  415 D1:AC05 E5 -  -  -  	push hl
  416 D1:AC06 01 11 00 00 		ld bc, 17
  417 D1:AC0A 09 -  -  -  		add hl, bc
  418 D1:AC0B E5 -  -  -  		push hl
  419 D1:AC0C CD 1C 05 02 			call _EnoughMem
  420 D1:AC10 21 C1 EC D1 			ld hl, NotEnoughMem
  421 D1:AC14 DA 96 AF D1 			jp c, DispFinalString
  422 D1:AC18 E1 -  -  -  		pop hl
  423 D1:AC19 01 F1 FF FF 		ld bc, -15
  424 D1:AC1D 09 -  -  -  		add hl, bc
  425 D1:AC1E CD 34 13 02 		call _CreateProtProg
  426 D1:AC22 C1 -  -  -  	pop bc
  427 D1:AC23 13 -  -  -  	inc de
  428 D1:AC24 13 -  -  -  	inc de
  429 D1:AC25 21 00 2C D5 	ld hl, program
  430 D1:AC29 EB -  -  -  	ex de, hl
  431 D1:AC2A 36 EF -  -  	ld (hl), tExtTok														; insert header
  432 D1:AC2C 23 -  -  -  	inc hl
  433 D1:AC2D 36 7B -  -  	ld (hl), tAsm84CeCmp
  434 D1:AC2F 23 -  -  -  	inc hl
  435 D1:AC30 EB -  -  -  	ex de, hl
  436 D1:AC31 ED B0 -  -  	ldir																	; insert the program data
  437 D1:AC33 21 FB EA D1 	ld hl, GoodCompileMessage
  438 D1:AC37 FD CB D0 CE 	set good_compilation, (iy+fProgram1)
  439 D1:AC3B C3 96 AF D1 	jp DispFinalString														; DONE :D :D :D
  440 D1:AC3F -  -  -  -  
  441 D1:AC3F -  -  -  -  #include "routines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\routines.asm"
    1 D1:AC3F -  -  -  -  InsertBCDEAHL:
    2 D1:AC3F E5 -  -  -  	push hl
    3 D1:AC40 C5 -  -  -  		push bc
    4 D1:AC41 E1 -  -  -  		pop hl
    5 D1:AC42 CD 50 AC D1 		call InsertHL
    6 D1:AC46 EB -  -  -  		ex de, hl
    7 D1:AC47 CD 50 AC D1 		call InsertHL
    8 D1:AC4B E1 -  -  -  	pop hl
    9 D1:AC4C -  -  -  -  InsertAHL:
   10 D1:AC4C CD 0E AD D1 	call InsertA
   11 D1:AC50 -  -  -  -  InsertHL:
   12 D1:AC50 D5 -  -  -  	push de
   13 D1:AC51 EB -  -  -  		ex de, hl
   14 D1:AC52 2A 49 EA D1 		ld hl, (programPtr)
   15 D1:AC56 ED 1F -  -  		ld (hl), de
   16 D1:AC58 23 -  -  -  		inc hl
   17 D1:AC59 23 -  -  -  		inc hl
   18 D1:AC5A 23 -  -  -  		inc hl
   19 D1:AC5B 22 49 EA D1 		ld (programPtr), hl
   20 D1:AC5F D1 -  -  -  	pop de
   21 D1:AC60 C9 -  -  -  	ret
   22 D1:AC61 -  -  -  -  	
   23 D1:AC61 -  -  -  -  InsertCallHL:
   24 D1:AC61 3E CD -  -  	ld a, 0CDh
   25 D1:AC63 18 E7 -  -  	jr InsertAHL
   26 D1:AC65 -  -  -  -  	
   27 D1:AC65 -  -  -  -  InsertHIXC:
   28 D1:AC65 26 27 -  -  	ld h, 027h
   29 D1:AC67 06 03 -  -  	ld b, 3
   30 D1:AC69 ED 4C -  -  	mlt bc
   31 D1:AC6B 79 -  -  -  	ld a, c
   32 D1:AC6C 18 07 -  -  	jr ++_
   33 D1:AC6E -  -  -  -  InsertIXE:
   34 D1:AC6E 26 17 -  -  	ld h, 017h
   35 D1:AC70 16 03 -  -  _:	ld d, 3
   36 D1:AC72 ED 5C -  -  	mlt de
   37 D1:AC74 7B -  -  -  	ld a, e
   38 D1:AC75 2E DD -  -  _:	ld l, 0DDh
   39 D1:AC77 CD 70 1D 02 	call _SetHLUToA
   40 D1:AC7B 18 D3 -  -  	jr InsertHL																; ld hl/de/bc, (ix+*)
   41 D1:AC7D -  -  -  -  InsertIXC:
   42 D1:AC7D 26 07 -  -  	ld h, 007h
   43 D1:AC7F 18 EF -  -  	jr --_
   44 D1:AC81 -  -  -  -  
   45 D1:AC81 -  -  -  -  InsertBCDEHL:
   46 D1:AC81 E5 -  -  -  	push hl
   47 D1:AC82 C5 -  -  -  		push bc
   48 D1:AC83 E1 -  -  -  		pop hl
   49 D1:AC84 CD 50 AC D1 		call InsertHL
   50 D1:AC88 E1 -  -  -  	pop hl
   51 D1:AC89 18 04 -  -  	jr InsertDEHL
   52 D1:AC8B -  -  -  -  InsertADEHL:
   53 D1:AC8B CD 0E AD D1 	call InsertA
   54 D1:AC8F -  -  -  -  InsertDEHL:
   55 D1:AC8F EB -  -  -  	ex de, hl
   56 D1:AC90 CD 50 AC D1 	call InsertHL
   57 D1:AC94 EB -  -  -  	ex de, hl
   58 D1:AC95 18 B9 -  -  	jr InsertHL
   59 D1:AC97 -  -  -  -  	
   60 D1:AC97 -  -  -  -  MaybeInsertIYFlags:
   61 D1:AC97 FD CB B0 4E 	bit modified_iy, (iy+fAlways1)
   62 D1:AC9B C8 -  -  -  	ret z
   63 D1:AC9C FD CB B0 8E 	res modified_iy, (iy+fAlways1)
   64 D1:ACA0 3E FD -  -  	ld a, 0FDh
   65 D1:ACA2 CD 0E AD D1 	call InsertA															; ld iy, flags
   66 D1:ACA6 3E 21 -  -  	ld a, 021h
   67 D1:ACA8 21 80 00 D0 	ld hl, flags
   68 D1:ACAC C3 4C AC D1 	jp InsertAHL															; ld iy, flags
   69 D1:ACB0 -  -  -  -  	
   70 D1:ACB0 -  -  -  -  MaybeChangeHLToDE:
   71 D1:ACB0 3A 6A EA D1 	ld a, (ExprOutput)
   72 D1:ACB4 B7 -  -  -  _:	or a
   73 D1:ACB5 C8 -  -  -  	ret z
   74 D1:ACB6 3E EB -  -  	ld a, 0EBh
   75 D1:ACB8 18 54 -  -  	jr InsertA																; ex de, hl
   76 D1:ACBA -  -  -  -  	
   77 D1:ACBA -  -  -  -  MaybeChangeDEToHL:
   78 D1:ACBA 3A 6A EA D1 	ld a, (ExprOutput)
   79 D1:ACBE EE 01 -  -  	xor 1
   80 D1:ACC0 18 F2 -  -  	jr -_
   81 D1:ACC2 -  -  -  -  	
   82 D1:ACC2 -  -  -  -  CGetArgumentLast:
   83 D1:ACC2 3E C2 -  -  	ld a, 0C2h
   84 D1:ACC4 18 02 -  -  	jr $+4
   85 D1:ACC6 -  -  -  -  CGetArgument:
   86 D1:ACC6 3E CA -  -  	ld a, 0CAh
   87 D1:ACC8 32 DD AC D1 	ld (CGetArgumentLastOrNot), a
   88 D1:ACCC 22 49 EA D1 	ld (programPtr), hl
   89 D1:ACD0 F5 -  -  -  	push af
   90 D1:ACD1 CD 28 10 02 		call _IncFetch
   91 D1:ACD5 CD C6 B2 D1 		call ParseExpression
   92 D1:ACD9 FD CB BE 46 		bit triggered_a_comma, (iy+fExpression3)
   93 D1:ACDD -  -  -  -  CGetArgumentLastOrNot:
   94 D1:ACDD CA 3A AF D1 		jp z, ErrorSyntax
   95 D1:ACE1 2A 49 EA D1 		ld hl, (programPtr)
   96 D1:ACE5 F1 -  -  -  	pop af
   97 D1:ACE6 28 14 -  -  	jr z, InsertPushHLDE
   98 D1:ACE8 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   99 D1:ACEC 28 0E -  -  	jr z, InsertPushHLDE
  100 D1:ACEE 2B -  -  -  	dec hl
  101 D1:ACEF 2B -  -  -  	dec hl
  102 D1:ACF0 22 49 EA D1 	ld (programPtr), hl
  103 D1:ACF4 2B -  -  -  	dec hl
  104 D1:ACF5 2B -  -  -  	dec hl
  105 D1:ACF6 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  106 D1:ACF8 23 -  -  -  	inc hl
  107 D1:ACF9 ED 17 -  -  	ld de, (hl)
  108 D1:ACFB 73 -  -  -  	ld (hl), e
  109 D1:ACFC -  -  -  -  InsertPushHLDE:
  110 D1:ACFC 3A 6B EA D1 	ld a, (ExprOutput2)
  111 D1:AD00 B7 -  -  -  	or a
  112 D1:AD01 20 00 -  -  	jr nz, +_
  113 D1:AD03 -  -  -  -  	;ld hl, (programPtr)
  114 D1:AD03 -  -  -  -  	;dec hl
  115 D1:AD03 -  -  -  -  	;ld (programPtr), hl
  116 D1:AD03 87 -  -  -  _:	add a, a
  117 D1:AD04 87 -  -  -  	add a, a
  118 D1:AD05 87 -  -  -  	add a, a
  119 D1:AD06 87 -  -  -  	add a, a
  120 D1:AD07 C6 D5 -  -  	add a, 0D5h
  121 D1:AD09 2A 49 EA D1 	ld hl, (programPtr)
  122 D1:AD0D 23 -  -  -  	inc hl
  123 D1:AD0E -  -  -  -  InsertA:
  124 D1:AD0E E5 -  -  -  	push hl
  125 D1:AD0F 2A 49 EA D1 		ld hl, (programPtr)
  126 D1:AD13 77 -  -  -  		ld (hl), a
  127 D1:AD14 23 -  -  -  		inc hl
  128 D1:AD15 22 49 EA D1 		ld (programPtr), hl
  129 D1:AD19 E1 -  -  -  	pop hl
  130 D1:AD1A C9 -  -  -  	ret
  131 D1:AD1B -  -  -  -  
  132 D1:AD1B -  -  -  -  CAddArgument:
  133 D1:AD1B C5 -  -  -  	push bc
  134 D1:AD1C B7 -  -  -  		or a
  135 D1:AD1D ED 42 -  -  		sbc hl, bc
  136 D1:AD1F E5 -  -  -  		push hl
  137 D1:AD20 C1 -  -  -  		pop bc
  138 D1:AD21 E1 -  -  -  	pop hl
  139 D1:AD22 ED B0 -  -  	ldir
  140 D1:AD24 C9 -  -  -  	ret
  141 D1:AD25 -  -  -  -  	
  142 D1:AD25 -  -  -  -  InsertProgramPtrToDataOffset:
  143 D1:AD25 D5 -  -  -  	push de
  144 D1:AD26 2A 55 EA D1 		ld hl, (programDataOffsetPtr)
  145 D1:AD2A ED 5B 49 EA 
              D1 -  -  -  		ld de, (programPtr)
  146 D1:AD2F ED 1F -  -  		ld (hl), de
  147 D1:AD31 23 -  -  -  		inc hl
  148 D1:AD32 23 -  -  -  		inc hl
  149 D1:AD33 23 -  -  -  		inc hl
  150 D1:AD34 22 55 EA D1 		ld (programDataOffsetPtr), hl
  151 D1:AD38 D1 -  -  -  	pop de
  152 D1:AD39 C9 -  -  -  	ret
  153 D1:AD3A -  -  -  -  	
  154 D1:AD3A -  -  -  -  GetFunction:
  155 D1:AD3A C5 -  -  -  	push bc
  156 D1:AD3B D5 -  -  -  		push de
  157 D1:AD3C CD 43 AD D1 			call GetRightFunction
  158 D1:AD40 D1 -  -  -  		pop de
  159 D1:AD41 C1 -  -  -  	pop bc
  160 D1:AD42 C9 -  -  -  	ret
  161 D1:AD43 -  -  -  -  	
  162 D1:AD43 -  -  -  -  GetRightFunction:
  163 D1:AD43 05 -  -  -  	dec b
  164 D1:AD44 CA 88 AD D1 	jp z, GetFunctionDE
  165 D1:AD48 05 -  -  -  	dec b
  166 D1:AD49 C2 F0 AD D1 	jp nz, GetFunctionBC
  167 D1:AD4D -  -  -  -  GetFunctionHL:
  168 D1:AD4D FE AD -  -  	cp tGetKey
  169 D1:AD4F 20 12 -  -  	jr nz, +_
  170 D1:AD51 21 4C 01 02 	ld hl, _GetCSC
  171 D1:AD55 CD 61 AC D1 	call InsertCallHL														; call _GetCSC
  172 D1:AD59 3E B7 -  -  	ld a, 0B7h
  173 D1:AD5B 21 ED 62 6F 	ld hl, 06F62EDh
  174 D1:AD5F C3 4C AC D1 	jp InsertAHL															; or a \ sbc hl, hl \ ld l, a
  175 D1:AD63 FE AB -  -  _:	cp trand
  176 D1:AD65 20 19 -  -  	jr nz, +_
  177 D1:AD67 3E D5 -  -  	ld a, 0D5h
  178 D1:AD69 FD CB C0 76 	bit need_push, (iy+fExpression1)
  179 D1:AD6D C4 0E AD D1 	call nz, InsertA														; push de
  180 D1:AD71 CD 8D AE D1 	call InsertRandRoutine
  181 D1:AD75 FD CB C0 76 	bit need_push, (iy+fExpression1)
  182 D1:AD79 C8 -  -  -  	ret z
  183 D1:AD7A 3E D1 -  -  	ld a, 0D1h
  184 D1:AD7C C3 0E AD D1 	jp InsertA																; pop de
  185 D1:AD80 CD 29 AE D1 _:	call InsertKeypadRoutine1
  186 D1:AD84 C3 51 AE D1 	jp InsertKeypadRoutine2
  187 D1:AD88 -  -  -  -  GetFunctionDE:
  188 D1:AD88 FE AD -  -  	cp tGetKey
  189 D1:AD8A 20 2D -  -  	jr nz, +_
  190 D1:AD8C 3E E5 -  -  	ld a, 0E5h
  191 D1:AD8E FD CB C0 76 	bit need_push, (iy+fExpression1)
  192 D1:AD92 C4 0E AD D1 	call nz, InsertA														; push hl
  193 D1:AD96 21 4C 01 02 	ld hl, _GetCSC
  194 D1:AD9A CD 61 AC D1 	call InsertCallHL														; call _GetCSC
  195 D1:AD9E FD CB C0 76 	bit need_push, (iy+fExpression1)
  196 D1:ADA2 28 06 -  -  	jr z, $+8
  197 D1:ADA4 3E E1 -  -  	ld a, 0E1h
  198 D1:ADA6 CD 0E AD D1 	call InsertA															; pop hl
  199 D1:ADAA 3E 11 -  -  	ld a, 011h
  200 D1:ADAC CD 0E AD D1 	call InsertA															; ld de, *
  201 D1:ADB0 AF -  -  -  	xor a
  202 D1:ADB1 21 00 00 5F 	ld hl, 05F0000h
  203 D1:ADB5 C3 4C AC D1 	jp InsertAHL															; ld de, 0 \ ld e, a
  204 D1:ADB9 FE AB -  -  _:	cp trand
  205 D1:ADBB 20 1F -  -  	jr nz, ++_
  206 D1:ADBD 3E E5 -  -  	ld a, 0E5h
  207 D1:ADBF FD CB C0 76 	bit need_push, (iy+fExpression1)
  208 D1:ADC3 C4 0E AD D1 	call nz, InsertA														; push hl
  209 D1:ADC7 CD 8D AE D1 	call InsertRandRoutine
  210 D1:ADCB 3E EB -  -  _:	ld a, 0EBh
  211 D1:ADCD CD 0E AD D1 	call InsertA															; ex de, hl
  212 D1:ADD1 FD CB C0 76 	bit need_push, (iy+fExpression1)
  213 D1:ADD5 C8 -  -  -  	ret z
  214 D1:ADD6 3E E1 -  -  	ld a, 0E1h
  215 D1:ADD8 C3 0E AD D1 	jp InsertA																; pop hl
  216 D1:ADDC CD 29 AE D1 _:	call InsertKeypadRoutine1
  217 D1:ADE0 3E E5 -  -  	ld a, 0E5h
  218 D1:ADE2 FD CB C0 76 	bit need_push, (iy+fExpression1)
  219 D1:ADE6 C4 0E AD D1 	call nz, InsertA														; push hl
  220 D1:ADEA CD 51 AE D1 	call InsertKeypadRoutine2
  221 D1:ADEE 18 DB -  -  	jr --_
  222 D1:ADF0 -  -  -  -  GetFunctionBC:
  223 D1:ADF0 FE AD -  -  	cp tGetKey
  224 D1:ADF2 20 17 -  -  	jr nz, +_
  225 D1:ADF4 21 4C 01 02 	ld hl, _GetCSC
  226 D1:ADF8 CD 61 AC D1 	call InsertCallHL														; call _GetCSC
  227 D1:ADFC 3E 01 -  -  	ld a, 001h
  228 D1:ADFE CD 0E AD D1 	call InsertA															; ld bc, *
  229 D1:AE02 AF -  -  -  	xor a
  230 D1:AE03 21 00 00 4F 	ld hl, 04F0000h
  231 D1:AE07 C3 4C AC D1 	jp InsertAHL															; ld bc, 0 \ ld c, a
  232 D1:AE0B FE AB -  -  _:	cp trand
  233 D1:AE0D 20 10 -  -  	jr nz, ++_
  234 D1:AE0F CD 8D AE D1 	call InsertRandRoutine
  235 D1:AE13 3E E5 -  -  _:	ld a, 0E5h
  236 D1:AE15 CD 0E AD D1 	call InsertA															; push hl
  237 D1:AE19 3E C1 -  -  	ld a, 0C1h
  238 D1:AE1B C3 0E AD D1 	jp InsertA																; pop bc
  239 D1:AE1F CD 29 AE D1 _:	call InsertKeypadRoutine1
  240 D1:AE23 CD 51 AE D1 	call InsertKeypadRoutine2
  241 D1:AE27 18 EA -  -  	jr --_
  242 D1:AE29 -  -  -  -  InsertKeypadRoutine1:
  243 D1:AE29 47 -  -  -  	ld b, a
  244 D1:AE2A 3E 06 -  -  	ld a, 006h
  245 D1:AE2C CD 0E AD D1 	call InsertA															; ld b, *
  246 D1:AE30 78 -  -  -  	ld a, b
  247 D1:AE31 3D -  -  -  	dec a
  248 D1:AE32 0F -  -  -  	rrca
  249 D1:AE33 0F -  -  -  	rrca
  250 D1:AE34 E6 0E -  -  	and 00001110b
  251 D1:AE36 4F -  -  -  	ld c, a
  252 D1:AE37 3E 1E -  -  	ld a, 01Eh
  253 D1:AE39 91 -  -  -  	sub c
  254 D1:AE3A CD 0E AD D1 	call InsertA															; ld b, X
  255 D1:AE3E 3E 0E -  -  	ld a, 00Eh
  256 D1:AE40 CD 0E AD D1 	call InsertA															; ld c, *
  257 D1:AE44 78 -  -  -  	ld a, b
  258 D1:AE45 E6 07 -  -  	and 000000111b
  259 D1:AE47 47 -  -  -  	ld b, a
  260 D1:AE48 AF -  -  -  	xor a
  261 D1:AE49 37 -  -  -  	scf
  262 D1:AE4A 17 -  -  -  _:	rla
  263 D1:AE4B 10 FD -  -  	djnz -_
  264 D1:AE4D C3 0E AD D1 	jp InsertA																; ld c, X
  265 D1:AE51 -  -  -  -  	
  266 D1:AE51 -  -  -  -  InsertKeypadRoutine2:
  267 D1:AE51 3E CD -  -  	ld a, 0CDh
  268 D1:AE53 CD 0E AD D1 	call InsertA															; call *
  269 D1:AE57 CD 25 AD D1 	call InsertProgramPtrToDataOffset
  270 D1:AE5B 2A 2D EA D0 	ld hl, (KeypadStartData)
  271 D1:AE5F FD CB D0 76 	bit has_already_keypad, (iy+fProgram1)
  272 D1:AE63 C2 50 AC D1 	jp nz, InsertHL															; call XXXXXX
  273 D1:AE67 2A 5E EA D1 	ld hl, (programDataDataPtr)
  274 D1:AE6B 22 2D EA D0 	ld (KeypadStartData), hl
  275 D1:AE6F E5 -  -  -  	push hl
  276 D1:AE70 D1 -  -  -  	pop de
  277 D1:AE71 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  278 D1:AE75 CD 50 AC D1 	call InsertHL															; call *
  279 D1:AE79 21 C2 EE D1 	ld hl, KeypadRoutine
  280 D1:AE7D 01 14 00 00 	ld bc, KeypadRoutineEnd - KeypadRoutine
  281 D1:AE81 ED B0 -  -  	ldir
  282 D1:AE83 ED 53 5E EA 
              D1 -  -  -  	ld (programDataDataPtr), de
  283 D1:AE88 FD CB D0 F6 	set has_already_keypad, (iy+fProgram1)
  284 D1:AE8C C9 -  -  -  	ret
  285 D1:AE8D -  -  -  -  	
  286 D1:AE8D -  -  -  -  InsertRandRoutine:
  287 D1:AE8D 3E CD -  -  	ld a, 0CDh
  288 D1:AE8F CD 0E AD D1 	call InsertA															; call *
  289 D1:AE93 CD 25 AD D1 	call InsertProgramPtrToDataOffset
  290 D1:AE97 2A 24 EA D0 	ld hl, (RandStartData)
  291 D1:AE9B FD CB D0 5E 	bit has_already_rand, (iy+fProgram1)
  292 D1:AE9F C2 50 AC D1 	jp nz, InsertHL															; call XXXXXX
  293 D1:AEA3 2A 5E EA D1 	ld hl, (programDataDataPtr)
  294 D1:AEA7 22 24 EA D0 	ld (RandStartData), hl
  295 D1:AEAB E5 -  -  -  	push hl
  296 D1:AEAC D1 -  -  -  	pop de
  297 D1:AEAD CD 50 AC D1 	call InsertHL															; call XXXXXX
  298 D1:AEB1 21 46 EE D1 	ld hl, RandRoutine
  299 D1:AEB5 01 36 00 00 	ld bc, RandRoutineEnd - RandRoutine
  300 D1:AEB9 ED B0 -  -  	ldir
  301 D1:AEBB ED 53 5E EA 
              D1 -  -  -  	ld (programDataDataPtr), de
  302 D1:AEC0 FD CB D0 DE 	set has_already_rand, (iy+fProgram1)
  303 D1:AEC4 C9 -  -  -  	ret
  304 D1:AEC5 -  -  -  -  	
  305 D1:AEC5 -  -  -  -  CompareStrings:
  306 D1:AEC5 1A -  -  -  	ld a, (de)
  307 D1:AEC6 FE 3F -  -  	cp tEnter
  308 D1:AEC8 C8 -  -  -  	ret z
  309 D1:AEC9 BE -  -  -  	cp a, (hl)
  310 D1:AECA 23 -  -  -  	inc hl
  311 D1:AECB 13 -  -  -  	inc de
  312 D1:AECC C0 -  -  -  	ret nz
  313 D1:AECD 18 F6 -  -  	jr CompareStrings
  314 D1:AECF -  -  -  -  	
  315 D1:AECF -  -  -  -  SubError:
  316 D1:AECF 3E 2D -  -  	ld a, '-'
  317 D1:AED1 18 4D -  -  	jr DispOperatorErrorString
  318 D1:AED3 -  -  -  -  AddError:
  319 D1:AED3 3E 2B -  -  	ld a, '+'
  320 D1:AED5 18 49 -  -  	jr DispOperatorErrorString
  321 D1:AED7 -  -  -  -  DivError:
  322 D1:AED7 3E 2F -  -  	ld a, '/'
  323 D1:AED9 18 45 -  -  	jr DispOperatorErrorString
  324 D1:AEDB -  -  -  -  MulError:
  325 D1:AEDB 3E 2A -  -  	ld a, '*'
  326 D1:AEDD 18 41 -  -  	jr DispOperatorErrorString
  327 D1:AEDF -  -  -  -  	
  328 D1:AEDF -  -  -  -  GLETError:
  329 D1:AEDF 3A 20 EA D0 	ld a, (tempToken2)
  330 D1:AEE3 FE 6E -  -  	cp tGE
  331 D1:AEE5 0E 19 -  -  	ld c, 019h
  332 D1:AEE7 28 36 -  -  	jr z, DispOperatorErrorString2
  333 D1:AEE9 FE 6D -  -  	cp tLE
  334 D1:AEEB 0E 17 -  -  	ld c, 017h
  335 D1:AEED 28 30 -  -  	jr z, DispOperatorErrorString2
  336 D1:AEEF FE 6C -  -  	cp tGT
  337 D1:AEF1 0E 3E -  -  	ld c, '>'
  338 D1:AEF3 28 2A -  -  	jr z, DispOperatorErrorString2
  339 D1:AEF5 3E 3C -  -  	ld a, '<'
  340 D1:AEF7 18 27 -  -  	jr DispOperatorErrorString
  341 D1:AEF9 -  -  -  -  
  342 D1:AEF9 -  -  -  -  NEQError:
  343 D1:AEF9 3A 20 EA D0 	ld a, (tempToken2)
  344 D1:AEFD FE 6A -  -  	cp tEq
  345 D1:AEFF 3E 3D -  -  	ld a, '='
  346 D1:AF01 28 1D -  -  	jr z, DispOperatorErrorString
  347 D1:AF03 3E 18 -  -  	ld a, 018h
  348 D1:AF05 18 19 -  -  	jr DispOperatorErrorString
  349 D1:AF07 -  -  -  -  XORANDError:
  350 D1:AF07 3A 20 EA D0 	ld a, (tempToken2)
  351 D1:AF0B FE 3C -  -  	cp tOr
  352 D1:AF0D 0E 7C -  -  	ld c, '|'
  353 D1:AF0F 28 0E -  -  	jr z, DispOperatorErrorString2
  354 D1:AF11 FE 3D -  -  	cp tXor
  355 D1:AF13 0E 5E -  -  	ld c, '^'
  356 D1:AF15 28 08 -  -  	jr z, DispOperatorErrorString2
  357 D1:AF17 3E 26 -  -  	ld a, '&'
  358 D1:AF19 18 05 -  -  	jr DispOperatorErrorString
  359 D1:AF1B -  -  -  -  StoError:
  360 D1:AF1B 3E 1C -  -  	ld a, 01Ch
  361 D1:AF1D 18 01 -  -  	jr DispOperatorErrorString
  362 D1:AF1F -  -  -  -  	
  363 D1:AF1F -  -  -  -  DispOperatorErrorString2:
  364 D1:AF1F 79 -  -  -  	ld a, c
  365 D1:AF20 -  -  -  -  DispOperatorErrorString:
  366 D1:AF20 F5 -  -  -  	push af
  367 D1:AF21 CD D8 B0 D1 		call ClearScreen
  368 D1:AF25 21 D4 EA D1 		ld hl, ErrorMessageStandard
  369 D1:AF29 CD 0E B1 D1 		call PrintString
  370 D1:AF2D F1 -  -  -  	pop af
  371 D1:AF2E CD 4A B8 D1 	call _PrintChar_ASM
  372 D1:AF32 3E 27 -  -  	ld a, '\''
  373 D1:AF34 CD 4A B8 D1 	call _PrintChar_ASM
  374 D1:AF38 18 66 -  -  	jr ReturnToOS
  375 D1:AF3A -  -  -  -  	
  376 D1:AF3A -  -  -  -  ErrorSyntax:
  377 D1:AF3A 21 13 EC D1 	ld hl, SyntaxErrorMessage
  378 D1:AF3E 18 56 -  -  	jr DispFinalString
  379 D1:AF40 -  -  -  -  MismatchError:
  380 D1:AF40 21 81 EC D1 	ld hl, MismatchErrorMessage
  381 D1:AF44 18 50 -  -  	jr DispFinalString
  382 D1:AF46 -  -  -  -  NoProgramsError:
  383 D1:AF46 21 11 EB D1 	ld hl, NoProgramsMessage
  384 D1:AF4A FD CB D0 CE 	set good_compilation, (iy+fProgram1)
  385 D1:AF4E 18 46 -  -  	jr DispFinalString
  386 D1:AF50 -  -  -  -  InvalidTokenError:
  387 D1:AF50 21 24 EB D1 	ld hl, InvalidTokenMessage
  388 D1:AF54 18 40 -  -  	jr DispFinalString
  389 D1:AF56 -  -  -  -  InvalidNameLength:
  390 D1:AF56 21 59 EB D1 	ld hl, InvalidNameLengthMessage
  391 D1:AF5A 18 3A -  -  	jr DispFinalString
  392 D1:AF5C -  -  -  -  ErrorNotFound:
  393 D1:AF5C 21 D4 EB D1 	ld hl, NotFoundMessage
  394 D1:AF60 18 34 -  -  	jr DispFinalString
  395 D1:AF62 -  -  -  -  ErrorUsedCode:
  396 D1:AF62 21 48 EC D1 	ld hl, UsedCodeMessage
  397 D1:AF66 18 2E -  -  	jr DispFinalString
  398 D1:AF68 -  -  -  -  SameNameError:
  399 D1:AF68 21 70 EB D1 	ld hl, SameNameMessage
  400 D1:AF6C 18 28 -  -  	jr DispFinalString
  401 D1:AF6E -  -  -  -  FunctionError:
  402 D1:AF6E 21 AC EB D1 	ld hl, FunctionFunctionMessage
  403 D1:AF72 18 22 -  -  	jr DispFinalString
  404 D1:AF74 -  -  -  -  UnknownError:
  405 D1:AF74 21 99 EC D1 	ld hl, UnknownMessage
  406 D1:AF78 18 1C -  -  	jr DispFinalString
  407 D1:AF7A -  -  -  -  WrongSpriteDataError:
  408 D1:AF7A 21 97 EB D1 	ld hl, WrongSpriteDataMessgae
  409 D1:AF7E 18 16 -  -  	jr DispFinalString
  410 D1:AF80 -  -  -  -  ImplementError:
  411 D1:AF80 21 E7 EB D1 	ld hl, ImplementMessage
  412 D1:AF84 18 10 -  -  	jr DispFinalString
  413 D1:AF86 -  -  -  -  EndError:
  414 D1:AF86 21 EC EA D1 	ld hl, EndErrorMessage
  415 D1:AF8A 18 0A -  -  	jr DispFinalString
  416 D1:AF8C -  -  -  -  ErrorTooLargeLoop:
  417 D1:AF8C 21 2E EC D1 	ld hl, TooLargeLoopMessage
  418 D1:AF90 18 04 -  -  	jr DispFinalString
  419 D1:AF92 -  -  -  -  LabelError:
  420 D1:AF92 21 D6 EC D1 	ld hl, LabelErrorMessage
  421 D1:AF96 -  -  -  -  	
  422 D1:AF96 -  -  -  -  DispFinalString:
  423 D1:AF96 E5 -  -  -  	push hl
  424 D1:AF97 CD D8 B0 D1 		call ClearScreen
  425 D1:AF9B E1 -  -  -  	pop hl
  426 D1:AF9C CD 0E B1 D1 	call PrintString
  427 D1:AFA0 -  -  -  -  ReturnToOS:
  428 D1:AFA0 FD CB D0 4E 	bit good_compilation, (iy+fProgram1)
  429 D1:AFA4 20 51 -  -  	jr nz, SkipDisplayLineNumber
  430 D1:AFA6 3E 15 -  -  	ld a, 21
  431 D1:AFA8 32 7D B8 D1 	ld (TextYPos_ASM), a
  432 D1:AFAC 21 01 00 00 	ld hl, 1
  433 D1:AFB0 22 4C B8 D1 	ld (TextXPos_ASM), hl
  434 D1:AFB4 21 72 EC D1 	ld hl, LineNumber
  435 D1:AFB8 CD 0E B1 D1 	call PrintString
  436 D1:AFBC 2A 1A 23 D0 	ld hl, (curPC)
  437 D1:AFC0 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  438 D1:AFC5 B7 -  -  -  	or a
  439 D1:AFC6 ED 52 -  -  	sbc hl, de
  440 D1:AFC8 E5 -  -  -  	push hl
  441 D1:AFC9 C1 -  -  -  	pop bc
  442 D1:AFCA ED 62 -  -  	sbc hl, hl
  443 D1:AFCC 23 -  -  -  	inc hl
  444 D1:AFCD EB -  -  -  	ex de, hl
  445 D1:AFCE -  -  -  -  GetAmountOfLines:
  446 D1:AFCE 78 -  -  -  	ld a, b
  447 D1:AFCF B1 -  -  -  	or c
  448 D1:AFD0 28 09 -  -  	jr z, GetAmountOfLinesStop
  449 D1:AFD2 3E 3F -  -  	ld a, tEnter
  450 D1:AFD4 ED B1 -  -  	cpir
  451 D1:AFD6 20 03 -  -  	jr nz, GetAmountOfLinesStop
  452 D1:AFD8 13 -  -  -  	inc de
  453 D1:AFD9 18 F3 -  -  	jr GetAmountOfLines
  454 D1:AFDB -  -  -  -  GetAmountOfLinesStop:
  455 D1:AFDB EB -  -  -  	ex de, hl
  456 D1:AFDC AF -  -  -  	xor a
  457 D1:AFDD 11 18 06 D0 	ld de, OP3+10
  458 D1:AFE1 12 -  -  -  	ld (de), a
  459 D1:AFE2 -  -  -  -  NumberToStringLoop:
  460 D1:AFE2 3E 0A -  -  	ld a, 10
  461 D1:AFE4 CD 90 1D 02 	call _DivHLByA
  462 D1:AFE8 C6 30 -  -  	add a, t0
  463 D1:AFEA 1B -  -  -  	dec de
  464 D1:AFEB 12 -  -  -  	ld (de), a
  465 D1:AFEC 19 -  -  -  	add hl, de
  466 D1:AFED B7 -  -  -  	or a
  467 D1:AFEE ED 52 -  -  	sbc hl, de
  468 D1:AFF0 20 F0 -  -  	jr nz, NumberToStringLoop
  469 D1:AFF2 EB -  -  -  	ex de, hl
  470 D1:AFF3 CD 0E B1 D1 	call PrintString
  471 D1:AFF7 -  -  -  -  SkipDisplayLineNumber:
  472 D1:AFF7 3E E6 -  -  	ld a, 230
  473 D1:AFF9 32 7D B8 D1 	ld (TextYPos_ASM), a
  474 D1:AFFD 21 55 00 00 	ld hl, 85
  475 D1:B001 22 4C B8 D1 	ld (TextXPos_ASM), hl
  476 D1:B005 21 2F ED D1 	ld hl, PressKey
  477 D1:B009 CD 0E B1 D1 	call PrintString
  478 D1:B00D CD 8C 0D 02 	call _GetKey
  479 D1:B011 -  -  -  -  StopProgram:
  480 D1:B011 2A 1A 23 D0 	ld hl, (curPC)
  481 D1:B015 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  482 D1:B01A 37 -  -  -  	scf
  483 D1:B01B ED 52 -  -  	sbc hl, de
  484 D1:B01D 40 22 E3 08 	ld.sis (errOffset - 0D00000h), hl
  485 D1:B021 -  -  -  -  backupSP = $+1
  486 D1:B021 31 00 00 00 	ld sp, 0
  487 D1:B025 -  -  -  -  backupBegPC = $+1
  488 D1:B025 21 00 00 00 	ld hl, 0
  489 D1:B029 22 17 23 D0 	ld (begPC), hl
  490 D1:B02D -  -  -  -  backupCurPC = $+1
  491 D1:B02D 21 00 00 00 	ld hl, 0
  492 D1:B031 22 1A 23 D0 	ld (curPC), hl
  493 D1:B035 -  -  -  -  backupEndPC = $+1
  494 D1:B035 21 00 00 00 	ld hl, 0
  495 D1:B039 22 1D 23 D0 	ld (endPC), hl
  496 D1:B03D CD 08 08 02 	call _ClrLCDFull
  497 D1:B041 CD 28 08 02 	call _HomeUp
  498 D1:B045 3E 2D -  -  	ld a, lcdBpp16
  499 D1:B047 32 18 00 E3 	ld (mpLcdCtrl), a
  500 D1:B04B CD 3C 1A 02 	call _DrawStatusBar
  501 D1:B04F C9 -  -  -  	ret
  502 D1:B050 FD CB D0 4E 	bit good_compilation, (iy+fProgram1)
  503 D1:B054 C0 -  -  -  	ret nz
  504 D1:B055 -  -  -  -  #include "editor.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\editor.asm"
    1 D1:B055 -  -  -  -  OpenEditBuffer:
    2 D1:B055 21 F9 05 D0 	ld hl, OP1+1
    3 D1:B059 11 5B 06 D0 	ld de, progToEdit
    4 D1:B05D 01 08 00 00 	ld bc, 8
    5 D1:B061 ED B0 -  -  	ldir
    6 D1:B063 11 1F EA D0 	ld de, saveSScreen
    7 D1:B067 21 75 B0 D1 	ld hl, +_
    8 D1:B06B 01 63 00 00 	ld bc, StopProgramEditor - +_
    9 D1:B06F ED B0 -  -  	ldir
   10 D1:B071 C3 1F EA D0 	jp saveSScreen
   11 D1:B075 21 81 A8 D1 _:	ld hl, UserMem
   12 D1:B079 ED 5B 8C 11 
              D0 -  -  -  	ld de, (asm_prgm_size)
   13 D1:B07E CD 90 05 02 	call _DelMem
   14 D1:B082 3E 46 -  -  	ld a, kPrgmEd
   15 D1:B084 CD 6C 01 02 	call _NewContext
   16 D1:B088 40 ED 4B E3 
              08 -  -  -  	ld.sis bc, (errOffset - 0D00000h)
   17 D1:B08D 2A 3D 24 D0 	ld hl, (editTail)
   18 D1:B091 ED 5B 3A 24 
              D0 -  -  -  	ld de, (editCursor)
   19 D1:B096 ED B0 -  -  	ldir
   20 D1:B098 22 3D 24 D0 	ld (editTail), hl
   21 D1:B09C ED 53 3A 24 
              D0 -  -  -  	ld (editCursor), de
   22 D1:B0A1 -  -  -  -  FindPreviousEnter:
   23 D1:B0A1 CD F8 0C 02 	call _BufLeft
   24 D1:B0A5 28 0C -  -  	jr z, AtTopOfProgram
   25 D1:B0A7 7B -  -  -  	ld a, e
   26 D1:B0A8 FE 3F -  -  	cp tEnter
   27 D1:B0AA 28 03 -  -  	jr z, +_
   28 D1:B0AC 03 -  -  -  	inc bc
   29 D1:B0AD 18 F2 -  -  	jr FindPreviousEnter
   30 D1:B0AF CD FC 0C 02 _:	call _BufRight
   31 D1:B0B3 -  -  -  -  AtTopOfProgram:
   32 D1:B0B3 C5 -  -  -  	push bc
   33 D1:B0B4 CD 1C 08 02 		call _ClrWindow
   34 D1:B0B8 21 01 00 00 		ld hl, 0000001h
   35 D1:B0BC 22 95 05 D0 		ld (curRow), hl
   36 D1:B0C0 3E 3A -  -  		ld a, ':'
   37 D1:B0C2 CD B8 07 02 		call _PutC
   38 D1:B0C6 CD 68 0D 02 		call _DispEOW
   39 D1:B0CA C1 -  -  -  	pop bc
   40 D1:B0CB 78 -  -  -  _:	ld a, b
   41 D1:B0CC B1 -  -  -  	or c
   42 D1:B0CD CA 54 01 02 	jp z, _Mon
   43 D1:B0D1 CD 4C 0D 02 	call _CursorRight
   44 D1:B0D5 0B -  -  -  	dec bc
   45 D1:B0D6 18 F3 -  -  	jr -_
   46 D1:B0D8 -  -  -  -  StopProgramEditor:
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\routines.asm"
  505 D1:B0D8 -  -  -  -  	
  506 D1:B0D8 -  -  -  -  ClearScreen:
  507 D1:B0D8 21 00 0F D4 	ld hl, vRAM+(320*12)
  508 D1:B0DC 36 FF -  -  	ld (hl), 255
  509 D1:B0DE E5 -  -  -  	push hl
  510 D1:B0DF D1 -  -  -  	pop de
  511 D1:B0E0 13 -  -  -  	inc de
  512 D1:B0E1 01 FF 1C 01 	ld bc, 320*228-1
  513 D1:B0E5 ED B0 -  -  	ldir
  514 D1:B0E7 03 -  -  -  	inc bc
  515 D1:B0E8 ED 43 4C B8 
              D1 -  -  -  	ld (TextXPos_ASM), bc
  516 D1:B0ED 3E 0C -  -  	ld a, 12
  517 D1:B0EF 32 7D B8 D1 	ld (TextYPos_ASM), a
  518 D1:B0F3 AF -  -  -  	xor a
  519 D1:B0F4 32 A2 B8 D1 	ld (color), a
  520 D1:B0F8 C9 -  -  -  	ret
  521 D1:B0F9 -  -  -  -  	
  522 D1:B0F9 -  -  -  -  PrintCompilingProgram:
  523 D1:B0F9 AF -  -  -  	xor a
  524 D1:B0FA 32 01 06 D0 	ld (OP1+9), a
  525 D1:B0FE CD D8 B0 D1 	call ClearScreen
  526 D1:B102 21 F1 EC D1 	ld hl, StartParseMessage
  527 D1:B106 CD 0E B1 D1 	call PrintString
  528 D1:B10A 21 F9 05 D0 	ld hl, OP1+1
  529 D1:B10E -  -  -  -  	
  530 D1:B10E -  -  -  -  PrintString:
  531 D1:B10E 7E -  -  -  	ld a, (hl)
  532 D1:B10F 23 -  -  -  	inc hl
  533 D1:B110 B7 -  -  -  	or a
  534 D1:B111 C4 4A B8 D1 	call nz, _PrintChar_ASM
  535 D1:B115 20 F7 -  -  	jr nz, PrintString
  536 D1:B117 C9 -  -  -  	ret
  537 D1:B118 -  -  -  -  	
  538 D1:B118 -  -  -  -  PreScanPrograms:
  539 D1:B118 2A 1D 23 D0 	ld hl, (endPC)
  540 D1:B11C ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  541 D1:B121 B7 -  -  -  	or a
  542 D1:B122 ED 52 -  -  	sbc hl, de
  543 D1:B124 23 -  -  -  	inc hl
  544 D1:B125 E5 -  -  -  	push hl
  545 D1:B126 C1 -  -  -  	pop bc
  546 D1:B127 2A 1A 23 D0 	ld hl, (curPC)
  547 D1:B12B -  -  -  -  ScanLoop:
  548 D1:B12B 78 -  -  -  	ld a, b
  549 D1:B12C B1 -  -  -  	or a, c
  550 D1:B12D C8 -  -  -  	ret z
  551 D1:B12E 7E -  -  -  	ld a, (hl)
  552 D1:B12F CD AC 04 02 	call _IsA2ByteTok
  553 D1:B133 20 02 -  -  	jr nz, +_
  554 D1:B135 23 -  -  -  	inc hl
  555 D1:B136 0B -  -  -  	dec bc
  556 D1:B137 23 -  -  -  _:	inc hl
  557 D1:B138 0B -  -  -  	dec bc
  558 D1:B139 FE B3 -  -  	cp tDet
  559 D1:B13B 28 2B -  -  	jr z, ScanFoundDet
  560 D1:B13D FE D8 -  -  	cp tPause
  561 D1:B13F 28 13 -  -  	jr z, ScanFoundPause
  562 D1:B141 FE BC -  -  	cp tSqrt
  563 D1:B143 28 1A -  -  	jr z, ScanFoundRoot
  564 D1:B145 FE DC -  -  	cp tInput
  565 D1:B147 20 E2 -  -  	jr nz, ScanLoop
  566 D1:B149 -  -  -  -  ScanFoundInput:
  567 D1:B149 3A 67 EA D1 	ld a, (amountOfInput)
  568 D1:B14D 3C -  -  -  	inc a
  569 D1:B14E 32 67 EA D1 	ld (amountOfInput), a
  570 D1:B152 18 D7 -  -  	jr ScanLoop
  571 D1:B154 -  -  -  -  ScanFoundPause:
  572 D1:B154 3A 68 EA D1 	ld a, (amountOfPause)
  573 D1:B158 3C -  -  -  	inc a
  574 D1:B159 32 68 EA D1 	ld (amountOfPause), a
  575 D1:B15D 18 CC -  -  	jr ScanLoop
  576 D1:B15F -  -  -  -  ScanFoundRoot:
  577 D1:B15F 3A 69 EA D1 	ld a, (amountOfRoot)
  578 D1:B163 3C -  -  -  	inc a
  579 D1:B164 32 69 EA D1 	ld (amountOfRoot), a
  580 D1:B168 -  -  -  -  ScanFoundDet:
  581 D1:B168 23 -  -  -  	inc hl
  582 D1:B169 7E -  -  -  	ld a, (hl)
  583 D1:B16A D6 30 -  -  	sub t0
  584 D1:B16C 38 BD -  -  	jr c, ScanLoop
  585 D1:B16E FE 0A -  -  	cp t9-t0+1
  586 D1:B170 30 B9 -  -  	jr nc, ScanLoop
  587 D1:B172 11 00 00 00 	ld de, 0
  588 D1:B176 5F -  -  -  	ld e, a
  589 D1:B177 23 -  -  -  	inc hl
  590 D1:B178 0B -  -  -  	dec bc
  591 D1:B179 78 -  -  -  	ld a, b
  592 D1:B17A B1 -  -  -  	or c
  593 D1:B17B 28 21 -  -  	jr z, FoundRightCFunction
  594 D1:B17D 7E -  -  -  	ld a, (hl)
  595 D1:B17E FE 2B -  -  	cp tComma
  596 D1:B180 28 1C -  -  	jr z, FoundRightCFunction
  597 D1:B182 FE 3F -  -  	cp tEnter
  598 D1:B184 28 18 -  -  	jr z, FoundRightCFunction
  599 D1:B186 D6 30 -  -  	sub t0
  600 D1:B188 38 14 -  -  	jr c, FoundRightCFunction
  601 D1:B18A FE 0A -  -  	cp t9-t0+1
  602 D1:B18C 30 10 -  -  	jr nc, FoundRightCFunction
  603 D1:B18E E5 -  -  -  	push hl
  604 D1:B18F EB -  -  -  		ex de, hl
  605 D1:B190 29 -  -  -  		add hl, hl
  606 D1:B191 E5 -  -  -  		push hl
  607 D1:B192 D1 -  -  -  		pop de
  608 D1:B193 29 -  -  -  		add hl, hl
  609 D1:B194 29 -  -  -  		add hl, hl
  610 D1:B195 19 -  -  -  		add hl, de
  611 D1:B196 11 00 00 00 		ld de, 0
  612 D1:B19A 5F -  -  -  		ld e, a
  613 D1:B19B 19 -  -  -  		add hl, de
  614 D1:B19C EB -  -  -  		ex de, hl
  615 D1:B19D E1 -  -  -  	pop hl
  616 D1:B19E -  -  -  -  FoundRightCFunction:
  617 D1:B19E E5 -  -  -  	push hl
  618 D1:B19F EB -  -  -  		ex de, hl
  619 D1:B1A0 11 4F 00 00 		ld de, AMOUNT_OF_C_FUNCTIONS
  620 D1:B1A4 B7 -  -  -  		or a
  621 D1:B1A5 ED 52 -  -  		sbc hl, de
  622 D1:B1A7 30 1F -  -  		jr nc,  WrongCFunction
  623 D1:B1A9 19 -  -  -  		add hl, de
  624 D1:B1AA EB -  -  -  		ex de, hl
  625 D1:B1AB 21 77 EA D1 		ld hl, usedCroutines
  626 D1:B1AF 19 -  -  -  		add hl, de
  627 D1:B1B0 7E -  -  -  		ld a, (hl)
  628 D1:B1B1 B7 -  -  -  		or a
  629 D1:B1B2 20 14 -  -  		jr nz, FunctionAlreadyInProgram
  630 D1:B1B4 -  -  -  -  AddCFunctionToProgram:
  631 D1:B1B4 3A 65 EA D1 		ld a, (amountOfCRoutines)
  632 D1:B1B8 3C -  -  -  		inc a
  633 D1:B1B9 77 -  -  -  		ld (hl), a
  634 D1:B1BA 32 65 EA D1 		ld (amountOfCRoutines), a
  635 D1:B1BE 3E C3 -  -  		ld a, 0C3h
  636 D1:B1C0 D5 -  -  -  		push de
  637 D1:B1C1 E1 -  -  -  		pop hl
  638 D1:B1C2 29 -  -  -  		add hl, hl
  639 D1:B1C3 19 -  -  -  		add hl, de
  640 D1:B1C4 CD 4C AC D1 		call InsertAHL																; jp *
  641 D1:B1C8 -  -  -  -  FunctionAlreadyInProgram:
  642 D1:B1C8 -  -  -  -  WrongCFunction:
  643 D1:B1C8 E1 -  -  -  	pop hl
  644 D1:B1C9 C3 2B B1 D1 	jp ScanLoop
  645 D1:B1CD -  -  -  -  
  646 D1:B1CD -  -  -  -  GetSpriteData:
  647 D1:B1CD B7 -  -  -  	or a
  648 D1:B1CE ED 52 -  -  	sbc hl, de
  649 D1:B1D0 C8 -  -  -  	ret z
  650 D1:B1D1 19 -  -  -  	add hl, de
  651 D1:B1D2 1A -  -  -  	ld a, (de)
  652 D1:B1D3 D6 30 -  -  	sub t0
  653 D1:B1D5 DA 7A AF D1 	jp c, WrongSpriteDataError
  654 D1:B1D9 FE 11 -  -  	cp tA-t0
  655 D1:B1DB 38 0A -  -  	jr c, +_
  656 D1:B1DD D6 11 -  -  	sub tA-t0
  657 D1:B1DF FE 06 -  -  	cp tG-tA
  658 D1:B1E1 D2 7A AF D1 	jp nc, WrongSpriteDataError
  659 D1:B1E5 C6 0A -  -  	add a, 10
  660 D1:B1E7 87 -  -  -  _:	add a, a
  661 D1:B1E8 87 -  -  -  	add a, a
  662 D1:B1E9 87 -  -  -  	add a, a
  663 D1:B1EA 87 -  -  -  	add a, a
  664 D1:B1EB DD 67 -  -  	ld ixh, a
  665 D1:B1ED 13 -  -  -  	inc de
  666 D1:B1EE B7 -  -  -  	or a
  667 D1:B1EF ED 52 -  -  	sbc hl, de
  668 D1:B1F1 CA 3A AF D1 	jp z, ErrorSyntax
  669 D1:B1F5 19 -  -  -  	add hl, de
  670 D1:B1F6 1A -  -  -  	ld a, (de)
  671 D1:B1F7 D6 30 -  -  	sub t0
  672 D1:B1F9 DA 7A AF D1 	jp c, WrongSpriteDataError
  673 D1:B1FD FE 11 -  -  	cp tA-t0
  674 D1:B1FF 38 0A -  -  	jr c, +_
  675 D1:B201 D6 11 -  -  	sub tA-t0
  676 D1:B203 FE 06 -  -  	cp tG-tA
  677 D1:B205 D2 7A AF D1 	jp nc, WrongSpriteDataError
  678 D1:B209 C6 0A -  -  	add a, 10
  679 D1:B20B DD B4 -  -  _:	or a, ixh
  680 D1:B20D 02 -  -  -  	ld (bc), a
  681 D1:B20E 03 -  -  -  	inc bc
  682 D1:B20F 13 -  -  -  	inc de
  683 D1:B210 18 BB -  -  	jr GetSpriteData
  684 D1:B212 -  -  -  -  	
  685 D1:B212 -  -  -  -  UpdateSpritePointers:
  686 D1:B212 C5 -  -  -  	push bc
  687 D1:B213 2A 49 EA D1 		ld hl, (programPtr)
  688 D1:B217 ED 5B 33 EA 
              D0 -  -  -  		ld de, (PrevProgramPtr)
  689 D1:B21C B7 -  -  -  		or a
  690 D1:B21D ED 52 -  -  		sbc hl, de
  691 D1:B21F EB -  -  -  		ex de, hl
  692 D1:B220 01 F4 FF FF 		ld bc, -12
  693 D1:B224 09 -  -  -  		add hl, bc
  694 D1:B225 E5 -  -  -  		push hl
  695 D1:B226 ED 27 -  -  			ld hl, (hl)
  696 D1:B228 19 -  -  -  			add hl, de
  697 D1:B229 EB -  -  -  			ex de, hl
  698 D1:B22A E1 -  -  -  		pop hl
  699 D1:B22B ED 1F -  -  		ld (hl), de
  700 D1:B22D C1 -  -  -  	pop bc
  701 D1:B22E C9 -  -  -  	ret
  702 D1:B22F -  -  -  -  	
  703 D1:B22F -  -  -  -  GetProgramName:
  704 D1:B22F E5 -  -  -  	push hl
  705 D1:B230 CD 28 10 02 		call _IncFetch
  706 D1:B234 E1 -  -  -  	pop hl
  707 D1:B235 DA 56 AF D1 	jp c, InvalidNameLength
  708 D1:B239 23 -  -  -  	inc hl
  709 D1:B23A FE 3F -  -  	cp tEnter
  710 D1:B23C CA 56 AF D1 	jp z, InvalidNameLength
  711 D1:B240 FE 41 -  -  	cp tA
  712 D1:B242 DA 50 AF D1 	jp c, InvalidTokenError
  713 D1:B246 FE 5C -  -  	cp ttheta+1
  714 D1:B248 D2 50 AF D1 	jp nc, InvalidTokenError
  715 D1:B24C 77 -  -  -  	ld (hl), a
  716 D1:B24D 1E 08 -  -  	ld e, 8
  717 D1:B24F -  -  -  -  GetProgramNameLoop:
  718 D1:B24F E5 -  -  -  	push hl
  719 D1:B250 CD 28 10 02 		call _IncFetch
  720 D1:B254 E1 -  -  -  	pop hl
  721 D1:B255 23 -  -  -  	inc hl
  722 D1:B256 36 00 -  -  	ld (hl), 0
  723 D1:B258 D8 -  -  -  	ret c
  724 D1:B259 FE 3F -  -  	cp tEnter
  725 D1:B25B C8 -  -  -  	ret z
  726 D1:B25C FE 30 -  -  	cp t0
  727 D1:B25E DA 50 AF D1 _:	jp c, InvalidTokenError
  728 D1:B262 FE 3A -  -  	cp t9+1
  729 D1:B264 38 0A -  -  	jr c, +_
  730 D1:B266 FE 41 -  -  	cp tA
  731 D1:B268 38 F4 -  -  	jr c, -_
  732 D1:B26A FE 5C -  -  	cp ttheta+1
  733 D1:B26C D2 50 AF D1 	jp nc, InvalidTokenError
  734 D1:B270 77 -  -  -  _:	ld (hl), a
  735 D1:B271 1D -  -  -  	dec e
  736 D1:B272 20 DB -  -  	jr nz, GetProgramNameLoop
  737 D1:B274 C3 56 AF D1 	jp InvalidNameLength
Listing for file "ice.asm"
  442 D1:B278 -  -  -  -  #include "parse.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
    1 D1:B278 -  -  -  -  ParseLine:
    2 D1:B278 CD 2C 10 02 	call _CurFetch
    3 D1:B27C FE 3F -  -  	cp tEnter
    4 D1:B27E C8 -  -  -  	ret z
    5 D1:B27F 21 12 E9 D1 	ld hl, FunctionsSingle
    6 D1:B283 01 10 00 00 	ld bc, FunctionsSingleEnd - FunctionsSingle
    7 D1:B287 ED B1 -  -  	cpir
    8 D1:B289 20 2F -  -  	jr nz, ParseExpression2
    9 D1:B28B FE 62 -  -  	cp tVarOut
   10 D1:B28D 28 10 -  -  	jr z, +_
   11 D1:B28F FE 2C -  -  	cp tii
   12 D1:B291 28 0C -  -  	jr z, +_
   13 D1:B293 FD CB D0 7E 	bit used_code, (iy+fProgram1)
   14 D1:B297 FD CB D0 FE 	set used_code, (iy+fProgram1)
   15 D1:B29B CC 12 B2 D1 	call z, UpdateSpritePointers
   16 D1:B29F 3A 63 EA D1 _:	ld a, (openedParensF)
   17 D1:B2A3 B7 -  -  -  	or a
   18 D1:B2A4 C2 6E AF D1 	jp nz, FunctionError
   19 D1:B2A8 FD 77 B0 -  	ld (iy+fFunction1), a
   20 D1:B2AB FD 77 AF -  	ld (iy+fFunction2), a
   21 D1:B2AE 06 03 -  -  	ld b, 3
   22 D1:B2B0 ED 4C -  -  	mlt bc
   23 D1:B2B2 21 22 E9 D1 	ld hl, FunctionsSingleStart
   24 D1:B2B6 09 -  -  -  	add hl, bc
   25 D1:B2B7 ED 27 -  -  	ld hl, (hl)
   26 D1:B2B9 E9 -  -  -  	jp (hl)
   27 D1:B2BA -  -  -  -  	
   28 D1:B2BA -  -  -  -  ParseExpression2:
   29 D1:B2BA FD CB D0 7E 	bit used_code, (iy+fProgram1)
   30 D1:B2BE FD CB D0 FE 	set used_code, (iy+fProgram1)
   31 D1:B2C2 CC 12 B2 D1 	call z, UpdateSpritePointers
   32 D1:B2C6 -  -  -  -  ParseExpression:
   33 D1:B2C6 21 83 EA D0 	ld hl, stack
   34 D1:B2CA 22 43 EA D1 	ld (stackPtr), hl
   35 D1:B2CE 21 6B EE D0 	ld hl, output
   36 D1:B2D2 22 46 EA D1 	ld (outputPtr), hl
   37 D1:B2D6 AF -  -  -  	xor a
   38 D1:B2D7 32 62 EA D1 	ld (openedParensE), a
   39 D1:B2DB FD 77 C0 -  	ld (iy+fExpression1), a
   40 D1:B2DE FD 77 BF -  	ld (iy+fExpression2), a
   41 D1:B2E1 FD 77 BE -  	ld (iy+fExpression3), a
   42 D1:B2E4 CD 2C 10 02 	call _CurFetch
   43 D1:B2E8 -  -  -  -  MainLoopResCarryFlag:
   44 D1:B2E8 B7 -  -  -  	or a	
   45 D1:B2E9 -  -  -  -  MainLoop:
   46 D1:B2E9 32 1F EA D0 	ld (tempToken), a
   47 D1:B2ED DA 7C B6 D1 	jp c, StopParsing
   48 D1:B2F1 FE 30 -  -  	cp t0
   49 D1:B2F3 38 45 -  -  	jr c, NotANumber
   50 D1:B2F5 FE 3A -  -  	cp t9+1
   51 D1:B2F7 30 41 -  -  	jr nc, NotANumber
   52 D1:B2F9 -  -  -  -  ANumber:
   53 D1:B2F9 -  -  -  -  #include "number.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\number.asm"
    1 D1:B2F9 2A 46 EA D1 	ld hl, (outputPtr)
    2 D1:B2FD FD CB C0 46 	bit prev_is_number, (iy+fExpression1)
    3 D1:B301 FD CB C0 C6 	set prev_is_number, (iy+fExpression1)
    4 D1:B305 28 1A -  -  	jr z, AddNumberToStack
    5 D1:B307 -  -  -  -  ChangeLastNumberFromStack:
    6 D1:B307 2B -  -  -  	dec hl
    7 D1:B308 2B -  -  -  	dec hl
    8 D1:B309 2B -  -  -  	dec hl
    9 D1:B30A E5 -  -  -  	push hl
   10 D1:B30B ED 27 -  -  		ld hl, (hl)
   11 D1:B30D 29 -  -  -  		add hl, hl											; HL * 10
   12 D1:B30E E5 -  -  -  		push hl
   13 D1:B30F D1 -  -  -  		pop de
   14 D1:B310 29 -  -  -  		add hl, hl
   15 D1:B311 29 -  -  -  		add hl, hl
   16 D1:B312 19 -  -  -  		add hl, de
   17 D1:B313 D6 30 -  -  		sub a, t0											; HL + <number>
   18 D1:B315 11 00 00 00 		ld de, 0
   19 D1:B319 5F -  -  -  		ld e, a
   20 D1:B31A 19 -  -  -  		add hl, de
   21 D1:B31B D1 -  -  -  	pop de
   22 D1:B31C EB -  -  -  	ex de, hl
   23 D1:B31D ED 1F -  -  	ld (hl), de
   24 D1:B31F 18 13 -  -  	jr NumberStop
   25 D1:B321 -  -  -  -  AddNumberToStack:
   26 D1:B321 36 00 -  -  	ld (hl), typeNumber
   27 D1:B323 23 -  -  -  	inc hl
   28 D1:B324 D6 30 -  -  	sub a, t0												; new number
   29 D1:B326 -  -  -  -  InsertAndUpdatePointer
   30 D1:B326 11 00 00 00 	ld de, 0
   31 D1:B32A 5F -  -  -  	ld e, a
   32 D1:B32B ED 1F -  -  	ld (hl), de
   33 D1:B32D -  -  -  -  UpdatePointer:
   34 D1:B32D 23 -  -  -  	inc hl
   35 D1:B32E 23 -  -  -  	inc hl
   36 D1:B32F 23 -  -  -  	inc hl
   37 D1:B330 22 46 EA D1 	ld (outputPtr), hl
   38 D1:B334 -  -  -  -  NumberStop:
   39 D1:B334 CD 28 10 02 	call _IncFetch
   40 D1:B338 18 AF -  -  	jr MainLoop
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   54 D1:B33A -  -  -  -  
   55 D1:B33A -  -  -  -  NotANumber:
   56 D1:B33A FD CB C0 86 	res prev_is_number, (iy+fExpression1)
   57 D1:B33E FE 41 -  -  	cp tA
   58 D1:B340 38 0F -  -  	jr c, NotAVariable
   59 D1:B342 FE 5C -  -  	cp ttheta+1
   60 D1:B344 30 0B -  -  	jr nc, NotAVariable
   61 D1:B346 -  -  -  -  AVariable:
   62 D1:B346 2A 46 EA D1 	ld hl, (outputPtr)
   63 D1:B34A 36 01 -  -  	ld (hl), typeVariable
   64 D1:B34C 23 -  -  -  	inc hl
   65 D1:B34D D6 41 -  -  	sub a, tA
   66 D1:B34F 18 D5 -  -  	jr InsertAndUpdatePointer
   67 D1:B351 -  -  -  -  NotAVariable:
   68 D1:B351 21 D6 E8 D1 	ld hl, operators_booleans
   69 D1:B355 01 0F 00 00 	ld bc, 15
   70 D1:B359 ED B1 -  -  	cpir
   71 D1:B35B 20 75 -  -  	jr nz, NotABoolean
   72 D1:B35D -  -  -  -  ABoolean:
   73 D1:B35D -  -  -  -  #include "operator.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operator.asm"
    1 D1:B35D 21 03 EA D1 	ld hl, precedence
    2 D1:B361 09 -  -  -  	add hl, bc
    3 D1:B362 5E -  -  -  	ld e, (hl)										; e = precedence of current token
    4 D1:B363 FE 04 -  -  	cp tStore
    5 D1:B365 CC 15 B8 D1 	call z, MoveStackEntryToOutput
    6 D1:B369 -  -  -  -  CheckOperator:
    7 D1:B369 2A 43 EA D1 	ld hl, (stackPtr)
    8 D1:B36D 01 83 EA D0 	ld bc, stack
    9 D1:B371 B7 -  -  -  	or a
   10 D1:B372 ED 42 -  -  	sbc hl, bc
   11 D1:B374 28 41 -  -  	jr z, InsertBoolean
   12 D1:B376 09 -  -  -  	add hl, bc
   13 D1:B377 2B -  -  -  	dec hl
   14 D1:B378 2B -  -  -  	dec hl
   15 D1:B379 2B -  -  -  	dec hl
   16 D1:B37A 2B -  -  -  	dec hl
   17 D1:B37B 7E -  -  -  	ld a, (hl)
   18 D1:B37C FE 1F -  -  	cp typeOperator
   19 D1:B37E 20 37 -  -  	jr nz, InsertBoolean
   20 D1:B380 23 -  -  -  	inc hl
   21 D1:B381 7E -  -  -  	ld a, (hl)
   22 D1:B382 21 D6 E8 D1 	ld hl, operators_booleans
   23 D1:B386 01 0F 00 00 	ld bc, 15
   24 D1:B38A ED B1 -  -  	cpir
   25 D1:B38C 21 12 EA D1 	ld hl, precedence2
   26 D1:B390 09 -  -  -  	add hl, bc
   27 D1:B391 7E -  -  -  	ld a, (hl)										; a = precedence of last token on stack
   28 D1:B392 BB -  -  -  	cp a, e											; if a <= e then move
   29 D1:B393 38 22 -  -  	jr c, InsertBoolean
   30 D1:B395 -  -  -  -  MoveBooleanFromStackToOutput:
   31 D1:B395 7B -  -  -  	ld a, e											; save for the precedence of current token
   32 D1:B396 ED 5B 46 EA 
              D1 -  -  -  	ld de, (outputPtr)
   33 D1:B39B 2A 43 EA D1 	ld hl, (stackPtr)
   34 D1:B39F 2B -  -  -  	dec hl
   35 D1:B3A0 2B -  -  -  	dec hl
   36 D1:B3A1 2B -  -  -  	dec hl
   37 D1:B3A2 2B -  -  -  	dec hl
   38 D1:B3A3 22 43 EA D1 	ld (stackPtr), hl
   39 D1:B3A7 ED A0 -  -  	ldi
   40 D1:B3A9 ED A0 -  -  	ldi
   41 D1:B3AB ED A0 -  -  	ldi
   42 D1:B3AD ED A0 -  -  	ldi
   43 D1:B3AF ED 53 46 EA 
              D1 -  -  -  	ld (outputPtr), de
   44 D1:B3B4 5F -  -  -  	ld e, a
   45 D1:B3B5 18 B2 -  -  	jr CheckOperator
   46 D1:B3B7 -  -  -  -  InsertBoolean:
   47 D1:B3B7 2A 43 EA D1 	ld hl, (stackPtr)
   48 D1:B3BB 36 1F -  -  	ld (hl), typeOperator
   49 D1:B3BD 23 -  -  -  	inc hl
   50 D1:B3BE 3A 1F EA D0 	ld a, (tempToken)
   51 D1:B3C2 77 -  -  -  	ld (hl), a
   52 D1:B3C3 23 -  -  -  	inc hl
   53 D1:B3C4 23 -  -  -  	inc hl
   54 D1:B3C5 23 -  -  -  	inc hl
   55 D1:B3C6 22 43 EA D1 	ld (stackPtr), hl
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   74 D1:B3CA -  -  -  -  
   75 D1:B3CA -  -  -  -  ReturnToLoop:
   76 D1:B3CA CD 28 10 02 	call _IncFetch
   77 D1:B3CE C3 E9 B2 D1 	jp MainLoop
   78 D1:B3D2 -  -  -  -  NotABoolean:
   79 D1:B3D2 FE 2B -  -  	cp tComma
   80 D1:B3D4 28 06 -  -  	jr z, CloseArgument
   81 D1:B3D6 FE 11 -  -  	cp tRParen
   82 D1:B3D8 C2 6B B4 D1 	jp nz, NotACommaOrRParen
   83 D1:B3DC -  -  -  -  CloseArgument:
   84 D1:B3DC -  -  -  -  #include "closing.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\closing.asm"
    1 D1:B3DC 21 62 EA D1 	ld hl, openedParensE
    2 D1:B3E0 47 -  -  -  	ld b, a
    3 D1:B3E1 7E -  -  -  	ld a, (hl)
    4 D1:B3E2 B7 -  -  -  	or a
    5 D1:B3E3 28 6D -  -  	jr z, MismatchedParens
    6 D1:B3E5 78 -  -  -  	ld a, b
    7 D1:B3E6 FE 2B -  -  	cp tComma
    8 D1:B3E8 28 01 -  -  	jr z, +_
    9 D1:B3EA 35 -  -  -  	dec (hl)
   10 D1:B3EB 2A 43 EA D1 _:	ld hl, (stackPtr)
   11 D1:B3EF 01 83 EA D0 	ld bc, stack
   12 D1:B3F3 B7 -  -  -  	or a
   13 D1:B3F4 ED 42 -  -  	sbc hl, bc
   14 D1:B3F6 28 52 -  -  	jr z, StopMovingForArgument2
   15 D1:B3F8 09 -  -  -  	add hl, bc
   16 D1:B3F9 2B -  -  -  	dec hl
   17 D1:B3FA 2B -  -  -  	dec hl
   18 D1:B3FB 2B -  -  -  	dec hl
   19 D1:B3FC 2B -  -  -  	dec hl
   20 D1:B3FD 7E -  -  -  	ld a, (hl)
   21 D1:B3FE FE 3F -  -  	cp typeFunction
   22 D1:B400 28 23 -  -  	jr z, StopMovingForArgument
   23 D1:B402 FE 1F -  -  	cp typeOperator
   24 D1:B404 20 06 -  -  	jr nz, +_
   25 D1:B406 23 -  -  -  	inc hl
   26 D1:B407 7E -  -  -  	ld a, (hl)
   27 D1:B408 2B -  -  -  	dec hl
   28 D1:B409 B7 -  -  -  	or a
   29 D1:B40A 28 19 -  -  	jr z, StopMovingForArgument
   30 D1:B40C 22 43 EA D1 _:	ld (stackPtr), hl
   31 D1:B410 ED 5B 46 EA 
              D1 -  -  -  	ld de, (outputPtr)
   32 D1:B415 ED A0 -  -  	ldi
   33 D1:B417 ED A0 -  -  	ldi
   34 D1:B419 ED A0 -  -  	ldi
   35 D1:B41B ED A0 -  -  	ldi
   36 D1:B41D ED 53 46 EA 
              D1 -  -  -  	ld (outputPtr), de
   37 D1:B422 18 C7 -  -  	jr --_
   38 D1:B424 09 -  -  -  _:	add hl, bc
   39 D1:B425 -  -  -  -  StopMovingForArgument:
   40 D1:B425 3A 1F EA D0 	ld a, (tempToken)
   41 D1:B429 FE 2B -  -  	cp tComma
   42 D1:B42B 28 1D -  -  	jr z, StopMovingForArgument2
   43 D1:B42D 22 43 EA D1 	ld (stackPtr), hl
   44 D1:B431 23 -  -  -  	inc hl
   45 D1:B432 7E -  -  -  	ld a, (hl)
   46 D1:B433 FE 10 -  -  	cp tLParen
   47 D1:B435 28 13 -  -  	jr z, StopMovingForArgument2
   48 D1:B437 2B -  -  -  	dec hl
   49 D1:B438 ED 5B 46 EA 
              D1 -  -  -  	ld de, (outputPtr)
   50 D1:B43D ED A0 -  -  	ldi
   51 D1:B43F ED A0 -  -  	ldi
   52 D1:B441 ED A0 -  -  	ldi
   53 D1:B443 ED A0 -  -  	ldi
   54 D1:B445 ED 53 46 EA 
              D1 -  -  -  	ld (outputPtr), de
   55 D1:B44A -  -  -  -  StopMovingForArgument2:
   56 D1:B44A CD 28 10 02 	call _IncFetch
   57 D1:B44E C3 E9 B2 D1 	jp MainLoop
   58 D1:B452 -  -  -  -  MismatchedParens:
   59 D1:B452 3A 63 EA D1 	ld a, (openedParensF)
   60 D1:B456 B7 -  -  -  	or a
   61 D1:B457 CA 40 AF D1 	jp z, MismatchError
   62 D1:B45B 3A 1F EA D0 	ld a, (tempToken)
   63 D1:B45F FE 2B -  -  	cp tComma
   64 D1:B461 20 04 -  -  	jr nz, +_
   65 D1:B463 FD CB BE C6 	set triggered_a_comma, (iy+fExpression3)
   66 D1:B467 C3 7C B6 D1 _:	jp StopParsing
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   85 D1:B46B -  -  -  -  
   86 D1:B46B -  -  -  -  NotACommaOrRParen:
   87 D1:B46B FE 08 -  -  	cp tLBrace
   88 D1:B46D C2 FD B4 D1 	jp nz, NotAList
   89 D1:B471 -  -  -  -  AList:
   90 D1:B471 -  -  -  -  #include "list.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\list.asm"
    1 D1:B471 2A 46 EA D1 	ld hl, (outputPtr)
    2 D1:B475 36 05 -  -  	ld (hl), typeList
    3 D1:B477 23 -  -  -  	inc hl
    4 D1:B478 ED 5B 5B EA 
              D1 -  -  -  	ld de, (tempListsPtr)
    5 D1:B47D ED 1F -  -  	ld (hl), de
    6 D1:B47F ED 53 DF B4 
              D1 -  -  -  	ld (ListLengthSMC), de
    7 D1:B484 23 -  -  -  	inc hl
    8 D1:B485 23 -  -  -  	inc hl
    9 D1:B486 23 -  -  -  	inc hl
   10 D1:B487 22 46 EA D1 	ld (outputPtr), hl
   11 D1:B48B EB -  -  -  	ex de, hl
   12 D1:B48C 23 -  -  -  	inc hl
   13 D1:B48D 23 -  -  -  	inc hl
   14 D1:B48E 23 -  -  -  	inc hl
   15 D1:B48F 22 5B EA D1 	ld (tempListsPtr), hl
   16 D1:B493 -  -  -  -  ListStart:
   17 D1:B493 B7 -  -  -  	or a
   18 D1:B494 ED 62 -  -  	sbc hl, hl
   19 D1:B496 -  -  -  -  ListLoop:
   20 D1:B496 E5 -  -  -  	push hl
   21 D1:B497 CD 28 10 02 		call _IncFetch
   22 D1:B49B E1 -  -  -  	pop hl
   23 D1:B49C FE 30 -  -  	cp t0
   24 D1:B49E 38 14 -  -  	jr c, ListNotNumber
   25 D1:B4A0 FE 3A -  -  	cp t9+1
   26 D1:B4A2 30 10 -  -  	jr nc, ListNotNumber
   27 D1:B4A4 D6 30 -  -  	sub t0
   28 D1:B4A6 29 -  -  -  	add hl, hl
   29 D1:B4A7 E5 -  -  -  	push hl
   30 D1:B4A8 D1 -  -  -  	pop de
   31 D1:B4A9 29 -  -  -  	add hl, hl
   32 D1:B4AA 29 -  -  -  	add hl, hl
   33 D1:B4AB 19 -  -  -  	add hl, de
   34 D1:B4AC 11 00 00 00 	ld de, 0
   35 D1:B4B0 5F -  -  -  	ld e, a
   36 D1:B4B1 19 -  -  -  	add hl, de
   37 D1:B4B2 18 E2 -  -  	jr ListLoop
   38 D1:B4B4 -  -  -  -  ListNotNumber:
   39 D1:B4B4 FE 2B -  -  	cp tComma
   40 D1:B4B6 20 10 -  -  	jr nz, ListNotNumberOrComma
   41 D1:B4B8 EB -  -  -  	ex de, hl
   42 D1:B4B9 2A 5B EA D1 	ld hl, (tempListsPtr)
   43 D1:B4BD ED 1F -  -  	ld (hl), de
   44 D1:B4BF 23 -  -  -  	inc hl
   45 D1:B4C0 23 -  -  -  	inc hl
   46 D1:B4C1 23 -  -  -  	inc hl
   47 D1:B4C2 22 5B EA D1 	ld (tempListsPtr), hl
   48 D1:B4C6 18 CB -  -  	jr ListStart
   49 D1:B4C8 -  -  -  -  ListNotNumberOrComma:
   50 D1:B4C8 FE 09 -  -  	cp tRBrace
   51 D1:B4CA 28 04 -  -  	jr z, ListStop
   52 D1:B4CC FE 04 -  -  	cp tStore
   53 D1:B4CE 20 25 -  -  	jr nz, ListError
   54 D1:B4D0 -  -  -  -  ListStop:
   55 D1:B4D0 EB -  -  -  	ex de, hl
   56 D1:B4D1 2A 5B EA D1 	ld hl, (tempListsPtr)
   57 D1:B4D5 ED 1F -  -  	ld (hl), de
   58 D1:B4D7 23 -  -  -  	inc hl
   59 D1:B4D8 23 -  -  -  	inc hl
   60 D1:B4D9 23 -  -  -  	inc hl
   61 D1:B4DA 22 5B EA D1 	ld (tempListsPtr),  hl
   62 D1:B4DE -  -  -  -  ListLengthSMC = $+1
   63 D1:B4DE 11 00 00 00 	ld de, 0
   64 D1:B4E2 2B -  -  -  	dec hl
   65 D1:B4E3 2B -  -  -  	dec hl
   66 D1:B4E4 2B -  -  -  	dec hl
   67 D1:B4E5 B7 -  -  -  	or a
   68 D1:B4E6 ED 52 -  -  	sbc hl, de
   69 D1:B4E8 EB -  -  -  	ex de, hl
   70 D1:B4E9 ED 1F -  -  	ld (hl), de
   71 D1:B4EB FE 04 -  -  	cp tStore
   72 D1:B4ED C4 28 10 02 	call nz, _IncFetch
   73 D1:B4F1 C3 E9 B2 D1 	jp MainLoop
   74 D1:B4F5 -  -  -  -  ListError:
   75 D1:B4F5 21 37 EB D1 	ld hl, InvalidListArgumentMessage
   76 D1:B4F9 C3 96 AF D1 	jp DispFinalString
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   91 D1:B4FD -  -  -  -  
   92 D1:B4FD -  -  -  -  NotAList:
   93 D1:B4FD FE 5D -  -  	cp tVarLst
   94 D1:B4FF 20 4E -  -  	jr nz, NotAnOSList
   95 D1:B501 -  -  -  -  AnOSList:
   96 D1:B501 CD 28 10 02 	call _IncFetch
   97 D1:B505 FE 06 -  -  	cp 6
   98 D1:B507 D2 50 AF D1 	jp nc, InvalidTokenError
   99 D1:B50B 4F -  -  -  	ld c, a
  100 D1:B50C 06 03 -  -  	ld b, 3
  101 D1:B50E ED 4C -  -  	mlt bc
  102 D1:B510 21 21 EA D1 	ld hl, lists
  103 D1:B514 09 -  -  -  	add hl, bc
  104 D1:B515 ED 27 -  -  	ld hl, (hl)
  105 D1:B517 EB -  -  -  	ex de, hl
  106 D1:B518 2A 46 EA D1 	ld hl, (outputPtr)
  107 D1:B51C 36 06 -  -  	ld (hl), typeOSList
  108 D1:B51E 23 -  -  -  	inc hl
  109 D1:B51F ED 1F -  -  	ld (hl), de
  110 D1:B521 23 -  -  -  	inc hl
  111 D1:B522 23 -  -  -  	inc hl
  112 D1:B523 23 -  -  -  	inc hl
  113 D1:B524 22 46 EA D1 	ld (outputPtr), hl
  114 D1:B528 CD 28 10 02 	call _IncFetch
  115 D1:B52C FE 10 -  -  	cp tLParen
  116 D1:B52E C2 E8 B2 D1 	jp nz, MainLoopResCarryFlag
  117 D1:B532 21 62 EA D1 	ld hl, openedParensE
  118 D1:B536 34 -  -  -  	inc (hl)
  119 D1:B537 2A 43 EA D1 	ld hl, (stackPtr)
  120 D1:B53B 36 1F -  -  	ld (hl), typeOperator
  121 D1:B53D 23 -  -  -  	inc hl
  122 D1:B53E 36 00 -  -  	ld (hl), 0
  123 D1:B540 23 -  -  -  	inc hl
  124 D1:B541 23 -  -  -  	inc hl
  125 D1:B542 23 -  -  -  	inc hl
  126 D1:B543 22 43 EA D1 	ld (stackPtr), hl
  127 D1:B547 CD 28 10 02 	call _IncFetch
  128 D1:B54B C3 E9 B2 D1 	jp MainLoop
  129 D1:B54F -  -  -  -  NotAnOSList:
  130 D1:B54F FE 2A -  -  	cp tString
  131 D1:B551 20 53 -  -  	jr nz, NotAString
  132 D1:B553 -  -  -  -  AString:
  133 D1:B553 2A 46 EA D1 	ld hl, (outputPtr)
  134 D1:B557 36 07 -  -  	ld (hl), typeString
  135 D1:B559 23 -  -  -  	inc hl
  136 D1:B55A ED 5B 58 EA 
              D1 -  -  -  	ld de, (tempStringsPtr)
  137 D1:B55F ED 1F -  -  	ld (hl), de
  138 D1:B561 23 -  -  -  	inc hl
  139 D1:B562 23 -  -  -  	inc hl
  140 D1:B563 23 -  -  -  	inc hl
  141 D1:B564 22 46 EA D1 	ld (outputPtr), hl
  142 D1:B568 -  -  -  -  StringLoop:
  143 D1:B568 CD 28 10 02 	call _IncFetch
  144 D1:B56C 38 2C -  -  	jr c, StringStop2
  145 D1:B56E FE 3F -  -  	cp tEnter
  146 D1:B570 28 28 -  -  	jr z, StringStop2
  147 D1:B572 FE 2A -  -  	cp tString
  148 D1:B574 28 1E -  -  	jr z, StringStop
  149 D1:B576 FE 04 -  -  	cp tStore
  150 D1:B578 28 1A -  -  	jr z, StringStop
  151 D1:B57A CD AC 04 02 	call _IsA2ByteTok
  152 D1:B57E 20 06 -  -  	jr nz, +_
  153 D1:B580 23 -  -  -  	inc hl
  154 D1:B581 22 1A 23 D0 	ld (curPC), hl
  155 D1:B585 2B -  -  -  	dec hl
  156 D1:B586 D5 -  -  -  _:	push de
  157 D1:B587 CD 70 08 02 		call _Get_Tok_Strng
  158 D1:B58B D1 -  -  -  	pop de
  159 D1:B58C 21 0E 06 D0 	ld hl, OP3
  160 D1:B590 ED B0 -  -  	ldir
  161 D1:B592 18 D4 -  -  	jr StringLoop
  162 D1:B594 -  -  -  -  StringStop:
  163 D1:B594 FE 3F -  -  	cp tEnter
  164 D1:B596 C4 28 10 02 	call nz, _IncFetch
  165 D1:B59A -  -  -  -  StringStop2:
  166 D1:B59A EB -  -  -  	ex de, hl
  167 D1:B59B 36 00 -  -  	ld (hl), 0
  168 D1:B59D 23 -  -  -  	inc hl
  169 D1:B59E 22 58 EA D1 	ld (tempStringsPtr), hl
  170 D1:B5A2 C3 E9 B2 D1 	jp MainLoop
  171 D1:B5A6 -  -  -  -  NotAString:
  172 D1:B5A6 FE 3F -  -  	cp tEnter
  173 D1:B5A8 CA 7C B6 D1 	jp z, StopParsing
  174 D1:B5AC 21 F3 E8 D1 	ld hl, FunctionsWithReturnValue
  175 D1:B5B0 01 0A 00 00 	ld bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValue
  176 D1:B5B4 ED B1 -  -  	cpir
  177 D1:B5B6 C2 50 AF D1 	jp nz, InvalidTokenError
  178 D1:B5BA FE AD -  -  	cp tGetKey
  179 D1:B5BC 28 0A -  -  	jr z, AddFunctionToOutput
  180 D1:B5BE FE 0D -  -  	cp tSqr
  181 D1:B5C0 28 06 -  -  	jr z, AddFunctionToOutput
  182 D1:B5C2 FE AB -  -  	cp trand
  183 D1:B5C4 C2 56 B6 D1 	jp nz, AddFunctionToStack
  184 D1:B5C8 -  -  -  -  AddFunctionToOutput:
  185 D1:B5C8 2A 46 EA D1 	ld hl, (outputPtr)
  186 D1:B5CC 1E 04 -  -  	ld e, typeReturnValue
  187 D1:B5CE FE 0D -  -  	cp tSqr
  188 D1:B5D0 20 02 -  -  	jr nz, +_
  189 D1:B5D2 1E 3F -  -  	ld e, typeFunction
  190 D1:B5D4 73 -  -  -  _:	ld (hl), e
  191 D1:B5D5 23 -  -  -  	inc hl
  192 D1:B5D6 77 -  -  -  	ld (hl), a
  193 D1:B5D7 23 -  -  -  	inc hl
  194 D1:B5D8 23 -  -  -  	inc hl
  195 D1:B5D9 23 -  -  -  	inc hl
  196 D1:B5DA 22 46 EA D1 	ld (outputPtr), hl
  197 D1:B5DE FE AD -  -  	cp tGetKey
  198 D1:B5E0 C2 CA B3 D1 	jp nz, ReturnToLoop
  199 D1:B5E4 CD 28 10 02 	call _IncFetch
  200 D1:B5E8 DA E9 B2 D1 	jp c, MainLoop
  201 D1:B5EC FE 10 -  -  	cp tLParen
  202 D1:B5EE C2 E8 B2 D1 	jp nz, MainLoopResCarryFlag
  203 D1:B5F2 CD 28 10 02 	call _IncFetch
  204 D1:B5F6 DA 3A AF D1 _:	jp c, ErrorSyntax
  205 D1:B5FA FE 3F -  -  	cp tEnter
  206 D1:B5FC CA 3A AF D1 	jp z, ErrorSyntax
  207 D1:B600 D6 30 -  -  	sub t0
  208 D1:B602 38 F2 -  -  	jr c, -_
  209 D1:B604 FE 0A -  -  	cp t9-t0+1
  210 D1:B606 D2 3A AF D1 _:	jp nc, ErrorSyntax
  211 D1:B60A 11 00 00 00 	ld de, 0
  212 D1:B60E 5F -  -  -  	ld e, a
  213 D1:B60F CD 28 10 02 	call _IncFetch
  214 D1:B613 38 35 -  -  	jr c, AddGetKeyDirect
  215 D1:B615 FE 3F -  -  	cp tEnter
  216 D1:B617 28 31 -  -  	jr z, AddGetKeyDirect
  217 D1:B619 FE 11 -  -  	cp tRParen
  218 D1:B61B 28 29 -  -  	jr z, +_
  219 D1:B61D FE 04 -  -  	cp tStore
  220 D1:B61F 28 29 -  -  	jr z, AddGetKeyDirect
  221 D1:B621 D6 30 -  -  	sub t0
  222 D1:B623 38 D1 -  -  	jr c, --_
  223 D1:B625 FE 0A -  -  	cp t9-t0+1
  224 D1:B627 30 DD -  -  	jr nc, -_
  225 D1:B629 D5 -  -  -  	push de
  226 D1:B62A E1 -  -  -  	pop hl
  227 D1:B62B 29 -  -  -  	add hl, hl
  228 D1:B62C 29 -  -  -  	add hl, hl
  229 D1:B62D 19 -  -  -  	add hl, de
  230 D1:B62E 29 -  -  -  	add hl, hl
  231 D1:B62F 5F -  -  -  	ld e, a
  232 D1:B630 19 -  -  -  	add hl, de
  233 D1:B631 EB -  -  -  	ex de, hl
  234 D1:B632 CD 28 10 02 	call _IncFetch
  235 D1:B636 38 12 -  -  	jr c, AddGetKeyDirect
  236 D1:B638 FE 3F -  -  	cp tEnter
  237 D1:B63A 28 0E -  -  	jr z, AddGetKeyDirect
  238 D1:B63C FE 04 -  -  	cp tStore
  239 D1:B63E 28 0A -  -  	jr z, AddGetKeyDirect
  240 D1:B640 FE 11 -  -  	cp tRParen
  241 D1:B642 C2 3A AF D1 	jp nz, ErrorSyntax
  242 D1:B646 CD 28 10 02 _:	call _IncFetch
  243 D1:B64A -  -  -  -  AddGetKeyDirect:
  244 D1:B64A 2A 46 EA D1 	ld hl, (outputPtr)
  245 D1:B64E 2B -  -  -  	dec hl
  246 D1:B64F 2B -  -  -  	dec hl
  247 D1:B650 2B -  -  -  	dec hl
  248 D1:B651 73 -  -  -  	ld (hl), e
  249 D1:B652 C3 E9 B2 D1 	jp MainLoop
  250 D1:B656 -  -  -  -  AddFunctionToStack:
  251 D1:B656 21 62 EA D1 	ld hl, openedParensE
  252 D1:B65A 34 -  -  -  	inc (hl)
  253 D1:B65B CD AC 04 02 	call _IsA2ByteTok
  254 D1:B65F CC 28 10 02 	call z, _IncFetch
  255 D1:B663 47 -  -  -  	ld b, a
  256 D1:B664 2A 43 EA D1 	ld hl, (stackPtr)
  257 D1:B668 3A 1F EA D0 	ld a, (tempToken)
  258 D1:B66C 36 3F -  -  	ld (hl), typeFunction
  259 D1:B66E 23 -  -  -  	inc hl
  260 D1:B66F 77 -  -  -  	ld (hl), a
  261 D1:B670 23 -  -  -  	inc hl
  262 D1:B671 70 -  -  -  	ld (hl), b
  263 D1:B672 23 -  -  -  	inc hl
  264 D1:B673 23 -  -  -  	inc hl
  265 D1:B674 22 43 EA D1 	ld (stackPtr), hl
  266 D1:B678 C3 CA B3 D1 	jp ReturnToLoop
  267 D1:B67C -  -  -  -  StopParsing:																; move stack to output
  268 D1:B67C CD 15 B8 D1 	call MoveStackEntryToOutput
  269 D1:B680 2A 46 EA D1 	ld hl, (outputPtr)
  270 D1:B684 11 6B EE D0 	ld de, output
  271 D1:B688 B7 -  -  -  	or a
  272 D1:B689 ED 52 -  -  	sbc hl, de
  273 D1:B68B E5 -  -  -  	push hl
  274 D1:B68C C1 -  -  -  	pop bc																	; BC / 4 is amount of elements in the stack
  275 D1:B68D D5 -  -  -  	push de
  276 D1:B68E E1 -  -  -  	pop hl
  277 D1:B68F 3E 01 -  -  	ld a, OutputIsInHL
  278 D1:B691 32 6A EA D1 	ld (ExprOutput), a
  279 D1:B695 32 6B EA D1 	ld (ExprOutput2), a
  280 D1:B699 78 -  -  -  	ld a, b
  281 D1:B69A B1 -  -  -  	or a, c
  282 D1:B69B FE 04 -  -  	cp 4
  283 D1:B69D D8 -  -  -  	ret c
  284 D1:B69E CA AD B7 D1 	jp z, ParseSingleArgument
  285 D1:B6A2 -  -  -  -  Loop:
  286 D1:B6A2 AF -  -  -  	xor a
  287 D1:B6A3 FD 77 C0 -  	ld (iy+fExpression1), a
  288 D1:B6A6 FD 77 BF -  	ld (iy+fExpression2), a
  289 D1:B6A9 ED 42 -  -  	sbc hl, bc
  290 D1:B6AB 11 6B EE D0 	ld de, output
  291 D1:B6AF ED 52 -  -  	sbc hl, de
  292 D1:B6B1 CA 3A AF D1 	jp z, ErrorSyntax
  293 D1:B6B5 19 -  -  -  	add hl, de
  294 D1:B6B6 09 -  -  -  	add hl, bc
  295 D1:B6B7 E5 -  -  -  	push hl
  296 D1:B6B8 21 0C 00 00 		ld hl, 12
  297 D1:B6BC B7 -  -  -  		or a
  298 D1:B6BD ED 42 -  -  		sbc hl, bc
  299 D1:B6BF 20 04 -  -  		jr nz, +_
  300 D1:B6C1 FD CB C0 DE 		set op_is_last_one, (iy+fExpression1)
  301 D1:B6C5 E1 -  -  -  _:	pop hl
  302 D1:B6C6 78 -  -  -  	ld a, b
  303 D1:B6C7 B1 -  -  -  	or a, c
  304 D1:B6C8 FE 04 -  -  	cp 4
  305 D1:B6CA CA A3 B7 D1 	jp z, StopParseExpression
  306 D1:B6CE 7E -  -  -  	ld a, (hl)
  307 D1:B6CF FE 1F -  -  	cp typeOperator
  308 D1:B6D1 28 5B -  -  	jr z, ExpressOperator
  309 D1:B6D3 FE 3F -  -  	cp typeFunction
  310 D1:B6D5 28 06 -  -  	jr z, ExpressFunction
  311 D1:B6D7 23 -  -  -  	inc hl
  312 D1:B6D8 23 -  -  -  	inc hl
  313 D1:B6D9 23 -  -  -  	inc hl
  314 D1:B6DA 23 -  -  -  	inc hl
  315 D1:B6DB 18 C5 -  -  	jr Loop
  316 D1:B6DD -  -  -  -  ExpressFunction:
  317 D1:B6DD 23 -  -  -  	inc hl																	; function = a
  318 D1:B6DE 7E -  -  -  	ld a, (hl)
  319 D1:B6DF 2B -  -  -  	dec hl
  320 D1:B6E0 C5 -  -  -  	push bc
  321 D1:B6E1 E5 -  -  -  		push hl
  322 D1:B6E2 CD 65 C5 D1 			call ExecuteFunction
  323 D1:B6E6 D1 -  -  -  		pop de
  324 D1:B6E7 D5 -  -  -  		push de
  325 D1:B6E8 E1 -  -  -  		pop hl
  326 D1:B6E9 23 -  -  -  		inc hl
  327 D1:B6EA 23 -  -  -  		inc hl
  328 D1:B6EB 23 -  -  -  		inc hl
  329 D1:B6EC 23 -  -  -  		inc hl
  330 D1:B6ED 3A 64 EA D1 		ld a, (amountOfArguments)
  331 D1:B6F1 3D -  -  -  		dec a
  332 D1:B6F2 28 07 -  -  		jr z, ++_
  333 D1:B6F4 47 -  -  -  		ld b, a
  334 D1:B6F5 1B -  -  -  _:		dec de
  335 D1:B6F6 1B -  -  -  		dec de
  336 D1:B6F7 1B -  -  -  		dec de
  337 D1:B6F8 1B -  -  -  		dec de
  338 D1:B6F9 10 FA -  -  		djnz -_
  339 D1:B6FB C1 -  -  -  _:	pop bc
  340 D1:B6FC D5 -  -  -  	push de
  341 D1:B6FD C5 -  -  -  		push bc
  342 D1:B6FE E5 -  -  -  			push hl
  343 D1:B6FF ED B0 -  -  				ldir
  344 D1:B701 E1 -  -  -  			pop hl
  345 D1:B702 C1 -  -  -  		pop bc
  346 D1:B703 D1 -  -  -  	pop de
  347 D1:B704 EB -  -  -  	ex de, hl
  348 D1:B705 09 -  -  -  	add hl, bc
  349 D1:B706 B7 -  -  -  	or a
  350 D1:B707 ED 52 -  -  	sbc hl, de
  351 D1:B709 E5 -  -  -  	push hl
  352 D1:B70A C1 -  -  -  	pop bc																	; BC = BC+DE-HL
  353 D1:B70B 78 -  -  -  	ld a, b
  354 D1:B70C B1 -  -  -  	or c
  355 D1:B70D FE 04 -  -  	cp 4
  356 D1:B70F 20 0F -  -  	jr nz, +_
  357 D1:B711 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  358 D1:B715 CA A3 B7 D1 	jp z, StopParseExpression
  359 D1:B719 DD 27 FD -  	ld hl, (ix-3)
  360 D1:B71C C3 B8 B7 D1 	jp ParseSingleArgument2
  361 D1:B720 EB -  -  -  _:	ex de, hl
  362 D1:B721 3A 64 EA D1 	ld a, (amountOfArguments)
  363 D1:B725 47 -  -  -  	ld b, a
  364 D1:B726 2B -  -  -  _:	dec hl
  365 D1:B727 2B -  -  -  	dec hl
  366 D1:B728 2B -  -  -  	dec hl
  367 D1:B729 2B -  -  -  	dec hl
  368 D1:B72A 10 FA -  -  	djnz -_
  369 D1:B72C 18 4E -  -  	jr AddChain
  370 D1:B72E -  -  -  -  ExpressOperator:
  371 D1:B72E 23 -  -  -  	inc hl
  372 D1:B72F 7E -  -  -  	ld a, (hl)
  373 D1:B730 2B -  -  -  	dec hl
  374 D1:B731 C5 -  -  -  	push bc
  375 D1:B732 E5 -  -  -  		push hl
  376 D1:B733 DD E1 -  -  		pop ix
  377 D1:B735 DD 17 FD -  		ld de, (ix-3)
  378 D1:B738 DD 07 F9 -  		ld bc, (ix-7)
  379 D1:B73B CD 72 D2 D1 		call ExecuteOperator
  380 D1:B73F 3A 6B EA D1 		ld a, (ExprOutput2)
  381 D1:B743 32 6A EA D1 		ld (ExprOutput), a
  382 D1:B747 ED 12 FC -  		lea de, ix-4
  383 D1:B74A C1 -  -  -  	pop bc
  384 D1:B74B 21 08 00 00 	ld hl, 8
  385 D1:B74F 19 -  -  -  	add hl, de
  386 D1:B750 D5 -  -  -  	push de
  387 D1:B751 C5 -  -  -  		push bc
  388 D1:B752 ED B0 -  -  			ldir
  389 D1:B754 C1 -  -  -  		pop bc
  390 D1:B755 21 F4 FF FF 		ld hl, -12
  391 D1:B759 09 -  -  -  		add hl, bc
  392 D1:B75A 19 -  -  -  		add hl, de
  393 D1:B75B B7 -  -  -  		or a
  394 D1:B75C ED 52 -  -  		sbc hl, de
  395 D1:B75E E5 -  -  -  		push hl
  396 D1:B75F C1 -  -  -  		pop bc
  397 D1:B760 E1 -  -  -  	pop hl
  398 D1:B761 20 0D -  -  	jr nz, +_
  399 D1:B763 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  400 D1:B767 CA A3 B7 D1 	jp z, StopParseExpression
  401 D1:B76B DD 27 F9 -  	ld hl, (ix-7)
  402 D1:B76E 18 48 -  -  	jr ParseSingleArgument2
  403 D1:B770 03 -  -  -  _:	inc bc
  404 D1:B771 03 -  -  -  	inc bc
  405 D1:B772 03 -  -  -  	inc bc
  406 D1:B773 03 -  -  -  	inc bc
  407 D1:B774 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  408 D1:B778 C2 A2 B6 D1 	jp nz, Loop
  409 D1:B77C -  -  -  -  AddChain:
  410 D1:B77C 1E 03 -  -  	ld e, typeChainAns
  411 D1:B77E 7E -  -  -  	ld a, (hl)
  412 D1:B77F FE 1F -  -  	cp typeOperator
  413 D1:B781 30 15 -  -  	jr nc, ChainAns2
  414 D1:B783 23 -  -  -  	inc hl
  415 D1:B784 23 -  -  -  	inc hl
  416 D1:B785 23 -  -  -  	inc hl
  417 D1:B786 23 -  -  -  	inc hl
  418 D1:B787 B6 -  -  -  	or a, (hl)
  419 D1:B788 2B -  -  -  	dec hl
  420 D1:B789 2B -  -  -  	dec hl
  421 D1:B78A 2B -  -  -  	dec hl
  422 D1:B78B 2B -  -  -  	dec hl
  423 D1:B78C FE 1F -  -  	cp typeOperator
  424 D1:B78E 28 08 -  -  	jr z, ChainAns2
  425 D1:B790 -  -  -  -  ChainPush2:
  426 D1:B790 E5 -  -  -  	push hl
  427 D1:B791 CD FC AC D1 		call InsertPushHLDE
  428 D1:B795 E1 -  -  -  	pop hl
  429 D1:B796 1E 02 -  -  	ld e, typeChainPush
  430 D1:B798 -  -  -  -  ChainAns2:
  431 D1:B798 E5 -  -  -  	push hl
  432 D1:B799 2B -  -  -  		dec hl
  433 D1:B79A 2B -  -  -  		dec hl
  434 D1:B79B 2B -  -  -  		dec hl
  435 D1:B79C 2B -  -  -  		dec hl
  436 D1:B79D 73 -  -  -  		ld (hl), e
  437 D1:B79E E1 -  -  -  	pop hl
  438 D1:B79F C3 A2 B6 D1 	jp Loop
  439 D1:B7A3 -  -  -  -  	
  440 D1:B7A3 -  -  -  -  StopParseExpression:
  441 D1:B7A3 3A 63 EA D1 	ld a, (openedParensF)
  442 D1:B7A7 B7 -  -  -  	or a
  443 D1:B7A8 C2 BA AC D1 	jp nz, MaybeChangeDEToHL
  444 D1:B7AC C9 -  -  -  	ret
  445 D1:B7AD -  -  -  -  	
  446 D1:B7AD -  -  -  -  ParseSingleArgument:
  447 D1:B7AD 7E -  -  -  	ld a, (hl)
  448 D1:B7AE B7 -  -  -  	or a
  449 D1:B7AF 20 0D -  -  	jr nz, ParseSingleNotNumber
  450 D1:B7B1 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  451 D1:B7B5 23 -  -  -  	inc hl
  452 D1:B7B6 ED 27 -  -  	ld hl, (hl)
  453 D1:B7B8 -  -  -  -  ParseSingleArgument2:
  454 D1:B7B8 3E 21 -  -  	ld a, 021h
  455 D1:B7BA C3 4C AC D1 	jp InsertAHL															; ld hl, *
  456 D1:B7BE -  -  -  -  ParseSingleNotNumber:
  457 D1:B7BE 3D -  -  -  	dec a
  458 D1:B7BF 20 06 -  -  	jr nz, ParseSingleNotVariable
  459 D1:B7C1 23 -  -  -  	inc hl
  460 D1:B7C2 4E -  -  -  	ld c, (hl)
  461 D1:B7C3 C3 65 AC D1 	jp InsertHIXC
  462 D1:B7C7 -  -  -  -  ParseSingleNotVariable:
  463 D1:B7C7 D6 03 -  -  	sub a, 3
  464 D1:B7C9 20 0C -  -  	jr nz, ParseSingleNotFunction
  465 D1:B7CB 23 -  -  -  	inc hl
  466 D1:B7CC 7E -  -  -  	ld a, (hl)
  467 D1:B7CD 06 02 -  -  	ld b, OutputInHL
  468 D1:B7CF FD CB C0 B6 	res need_push, (iy+fExpression1)
  469 D1:B7D3 C3 3A AD D1 	jp GetFunction
  470 D1:B7D7 -  -  -  -  ParseSingleNotFunction:
  471 D1:B7D7 D6 03 -  -  	sub a, 3
  472 D1:B7D9 C2 3A AF D1 	jp nz, ErrorSyntax
  473 D1:B7DD FD CB C0 FE 	set output_is_string, (iy+fExpression1)
  474 D1:B7E1 E5 -  -  -  	push hl
  475 D1:B7E2 3E 21 -  -  		ld a, 021h
  476 D1:B7E4 CD 0E AD D1 		call InsertA														; ld hl, *
  477 D1:B7E8 CD 25 AD D1 		call InsertProgramPtrToDataOffset
  478 D1:B7EC 2A 5E EA D1 		ld hl, (programDataDataPtr)
  479 D1:B7F0 CD 50 AC D1 		call InsertHL														; ld hl, XXXXXXX
  480 D1:B7F4 E1 -  -  -  	pop hl
  481 D1:B7F5 23 -  -  -  	inc hl
  482 D1:B7F6 ED 17 -  -  	ld de, (hl)																; hl points to string in string stack
  483 D1:B7F8 ED 27 -  -  	ld hl, (hl)
  484 D1:B7FA 01 FF FF FF 	ld bc, -1
  485 D1:B7FE AF -  -  -  	xor a
  486 D1:B7FF ED B1 -  -  	cpir
  487 D1:B801 ED 52 -  -  	sbc hl, de
  488 D1:B803 E5 -  -  -  	push hl
  489 D1:B804 C1 -  -  -  	pop bc																	; bc = length of string
  490 D1:B805 EB -  -  -  	ex de, hl
  491 D1:B806 ED 5B 5E EA 
              D1 -  -  -  	ld de, (programDataDataPtr)
  492 D1:B80B D5 -  -  -  	push de
  493 D1:B80C ED B0 -  -  		ldir
  494 D1:B80E ED 53 5E EA 
              D1 -  -  -  		ld (programDataDataPtr), de
  495 D1:B813 E1 -  -  -  	pop hl
  496 D1:B814 C9 -  -  -  	ret
  497 D1:B815 -  -  -  -  	
  498 D1:B815 -  -  -  -  MoveStackEntryToOutput:
  499 D1:B815 2A 43 EA D1 	ld hl, (stackPtr)
  500 D1:B819 11 83 EA D0 	ld de, stack
  501 D1:B81D B7 -  -  -  	or a
  502 D1:B81E ED 52 -  -  	sbc hl, de
  503 D1:B820 C8 -  -  -  	ret z
  504 D1:B821 19 -  -  -  	add hl, de
  505 D1:B822 2B -  -  -  	dec hl
  506 D1:B823 2B -  -  -  	dec hl
  507 D1:B824 2B -  -  -  	dec hl
  508 D1:B825 2B -  -  -  	dec hl
  509 D1:B826 22 43 EA D1 	ld (stackPtr), hl
  510 D1:B82A ED 5B 46 EA 
              D1 -  -  -  	ld de, (outputPtr)
  511 D1:B82F 7E -  -  -  	ld a, (hl)
  512 D1:B830 FE 3F -  -  	cp typeFunction
  513 D1:B832 20 07 -  -  	jr nz, +_
  514 D1:B834 23 -  -  -  	inc hl
  515 D1:B835 7E -  -  -  	ld a, (hl)
  516 D1:B836 2B -  -  -  	dec hl
  517 D1:B837 FE 10 -  -  	cp tLParen
  518 D1:B839 28 DA -  -  	jr z, MoveStackEntryToOutput
  519 D1:B83B ED A0 -  -  _:	ldi
  520 D1:B83D ED A0 -  -  	ldi
  521 D1:B83F ED A0 -  -  	ldi
  522 D1:B841 ED A0 -  -  	ldi
  523 D1:B843 ED 53 46 EA 
              D1 -  -  -  	ld (outputPtr), de
  524 D1:B848 18 CB -  -  	jr MoveStackEntryToOutput
Listing for file "ice.asm"
  443 D1:B84A -  -  -  -  #include "putchar.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\putchar.asm"
    1 D1:B84A -  -  -  -  _PrintChar_ASM:
    2 D1:B84A E5 -  -  -  	push hl
    3 D1:B84B -  -  -  -  TextXPos_ASM = $+1
    4 D1:B84B 01 00 00 00 		ld	bc, 0
    5 D1:B84F F5 -  -  -  		push af
    6 D1:B850 F5 -  -  -  			push af
    7 D1:B851 C5 -  -  -  				push bc
    8 D1:B852 B7 -  -  -  					or	a,a
    9 D1:B853 ED 62 -  -  					sbc	hl,hl
   10 D1:B855 6F -  -  -  					ld	l,a
   11 D1:B856 11 B8 B8 D1 					ld	de, DefaultCharSpacing_ASM
   12 D1:B85A 19 -  -  -  					add	hl,de
   13 D1:B85B 7E -  -  -  					ld	a,(hl)
   14 D1:B85C 32 9F B8 D1 					ld	(charwidth),a
   15 D1:B860 B7 -  -  -  					or	a,a
   16 D1:B861 ED 62 -  -  					sbc	hl,hl
   17 D1:B863 6F -  -  -  					ld	l,a
   18 D1:B864 ED 44 -  -  					neg
   19 D1:B866 32 70 B8 D1 					ld	(CharWidthDelta_ASM),a
   20 D1:B86A 09 -  -  -  					add	hl,bc
   21 D1:B86B 22 4C B8 D1 					ld	(TextXPos_ASM),hl
   22 D1:B86F -  -  -  -  CharWidthDelta_ASM =$+1
   23 D1:B86F 11 FF FF FF 					ld	de,$FFFFFF
   24 D1:B873 21 40 01 00 					ld	hl,lcdWidth
   25 D1:B877 19 -  -  -  					add	hl,de
   26 D1:B878 22 AC B8 D1 					ld	(line_change),hl
   27 D1:B87C -  -  -  -  TextYPos_ASM = $+1
   28 D1:B87C 2E 00 -  -  					ld	l,0
   29 D1:B87E 26 A0 -  -  					ld	h,160
   30 D1:B880 ED 6C -  -  					mlt	hl
   31 D1:B882 29 -  -  -  					add	hl,hl
   32 D1:B883 11 00 00 D4 					ld	de,vRAM
   33 D1:B887 19 -  -  -  					add	hl,de
   34 D1:B888 D1 -  -  -  				pop	de
   35 D1:B889 19 -  -  -  				add	hl,de
   36 D1:B88A F1 -  -  -  			pop	af
   37 D1:B88B EB -  -  -  			ex	de,hl
   38 D1:B88C B7 -  -  -  			or	a,a
   39 D1:B88D ED 62 -  -  			sbc	hl,hl
   40 D1:B88F D6 17 -  -  			sub a, 23
   41 D1:B891 6F -  -  -  			ld	l,a
   42 D1:B892 29 -  -  -  			add	hl,hl
   43 D1:B893 29 -  -  -  			add	hl,hl
   44 D1:B894 29 -  -  -  			add	hl,hl
   45 D1:B895 01 33 B9 D1 			ld	bc, DefaultTextData_ASM
   46 D1:B899 09 -  -  -  			add	hl,bc
   47 D1:B89A 06 08 -  -  			ld	b,8
   48 D1:B89C C5 -  -  -  iloop:		push bc
   49 D1:B89D 4E -  -  -  				ld c,(hl)
   50 D1:B89E -  -  -  -  charwidth =$+1
   51 D1:B89E 06 00 -  -  				ld b,0
   52 D1:B8A0 EB -  -  -  				ex de,hl
   53 D1:B8A1 -  -  -  -  color = $+1
   54 D1:B8A1 3E 00 -  -  				ld a, 0
   55 D1:B8A3 CB 21 -  -  cloop:			sla	c
   56 D1:B8A5 30 01 -  -  				jr nc,+_
   57 D1:B8A7 77 -  -  -  				ld (hl), a
   58 D1:B8A8 23 -  -  -  _:				inc	hl
   59 D1:B8A9 10 F8 -  -  				djnz cloop
   60 D1:B8AB -  -  -  -  line_change =$+1
   61 D1:B8AB 01 00 00 00 				ld bc,0
   62 D1:B8AF 09 -  -  -  				add	hl,bc
   63 D1:B8B0 EB -  -  -  				ex de,hl
   64 D1:B8B1 23 -  -  -  				inc	hl
   65 D1:B8B2 C1 -  -  -  			pop	bc
   66 D1:B8B3 10 E7 -  -  			djnz iloop
   67 D1:B8B5 F1 -  -  -  		pop	af
   68 D1:B8B6 E1 -  -  -  	pop	hl
   69 D1:B8B7 C9 -  -  -  	ret
   70 D1:B8B8 -  -  -  -  
   71 D1:B8B8 -  -  -  -  DefaultCharSpacing_ASM:
   72 D1:B8B8 -  -  -  -  	;   0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
   73 D1:B8B8 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 02 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8	; 0
   74 D1:B8C8 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	; 1
   75 D1:B8D8 03 04 06 08 
              08 08 08 05 
              05 05 08 07 
              04 07 03 08 	.db 3,4,6,8,8,8,8,5,5,5,8,7,4,7,3,8	; 2
   76 D1:B8E8 08 07 08 08 
              08 08 08 08 
              08 08 03 04 
              06 07 06 07 	.db 8,7,8,8,8,8,8,8,8,8,3,4,6,7,6,7	; 3
   77 D1:B8F8 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	; 4
   78 D1:B908 08 08 08 08 
              08 08 08 08 
              08 08 08 05 
              08 05 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,5,8,5,8,8	; 5
   79 D1:B918 04 08 08 08 
              08 08 08 08 
              08 05 08 08 
              05 08 08 08 	.db 4,8,8,8,8,8,8,8,8,5,8,8,5,8,8,8	; 6
   80 D1:B928 08 08 08 08 
              07 08 08 08 
              08 08 08 -  	.db 8,8,8,8,7,8,8,8,8,8,8			; 7
   81 D1:B933 -  -  -  -   
   82 D1:B933 -  -  -  -  ;-------------------------------------------------------------------------------
   83 D1:B933 -  -  -  -  DefaultTextData_ASM:
   84 D1:B933 FF FF FF FF 
              FF FF FF FF Char000: .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF	; _
   85 D1:B93B 18 3C 7E 18 
              18 18 18 00 Char024: .db $18,$3C,$7E,$18,$18,$18,$18,$00	; .
   86 D1:B943 18 18 18 18 
              7E 3C 18 00 Char025: .db $18,$18,$18,$18,$7E,$3C,$18,$00	; .
   87 D1:B94B 00 18 0C FE 
              0C 18 00 00 Char026: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	; .
   88 D1:B953 00 30 60 FE 
              60 30 00 00 Char027: .db $00,$30,$60,$FE,$60,$30,$00,$00	; .
   89 D1:B95B 00 18 0C FE 
              0C 18 00 00 Char028: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	; ->
   90 D1:B963 00 24 66 FF 
              66 24 00 00 Char029: .db $00,$24,$66,$FF,$66,$24,$00,$00	; .
   91 D1:B96B 00 18 3C 7E 
              FF FF 00 00 Char030: .db $00,$18,$3C,$7E,$FF,$FF,$00,$00	; .
   92 D1:B973 00 FF FF 7E 
              3C 18 00 00 Char031: .db $00,$FF,$FF,$7E,$3C,$18,$00,$00	; .
   93 D1:B97B 00 00 00 00 
              00 00 00 00 Char032: .db $00,$00,$00,$00,$00,$00,$00,$00	;  
   94 D1:B983 C0 C0 C0 C0 
              C0 00 C0 00 Char033: .db $C0,$C0,$C0,$C0,$C0,$00,$C0,$00	; !
   95 D1:B98B D8 D8 D8 00 
              00 00 00 00 Char034: .db $D8,$D8,$D8,$00,$00,$00,$00,$00	; "
   96 D1:B993 6C 6C FE 6C 
              FE 6C 6C 00 Char035: .db $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
   97 D1:B99B 18 7E C0 7C 
              06 FC 18 00 Char036: .db $18,$7E,$C0,$7C,$06,$FC,$18,$00	; $
   98 D1:B9A3 00 C6 CC 18 
              30 66 C6 00 Char037: .db $00,$C6,$CC,$18,$30,$66,$C6,$00	; %
   99 D1:B9AB 38 6C 38 76 
              DC CC 76 00 Char038: .db $38,$6C,$38,$76,$DC,$CC,$76,$00	; &
  100 D1:B9B3 30 30 60 00 
              00 00 00 00 Char039: .db $30,$30,$60,$00,$00,$00,$00,$00	; '
  101 D1:B9BB 30 60 C0 C0 
              C0 60 30 00 Char040: .db $30,$60,$C0,$C0,$C0,$60,$30,$00	; (
  102 D1:B9C3 C0 60 30 30 
              30 60 C0 00 Char041: .db $C0,$60,$30,$30,$30,$60,$C0,$00	; )
  103 D1:B9CB 00 66 3C FF 
              3C 66 00 00 Char042: .db $00,$66,$3C,$FF,$3C,$66,$00,$00	; *
  104 D1:B9D3 00 30 30 FC 
              FC 30 30 00 Char043: .db $00,$30,$30,$FC,$FC,$30,$30,$00	; +
  105 D1:B9DB 00 00 00 00 
              00 60 60 C0 Char044: .db $00,$00,$00,$00,$00,$60,$60,$C0	; ,
  106 D1:B9E3 00 00 00 FC 
              00 00 00 00 Char045: .db $00,$00,$00,$FC,$00,$00,$00,$00	; -
  107 D1:B9EB 00 00 00 00 
              00 C0 C0 00 Char046: .db $00,$00,$00,$00,$00,$C0,$C0,$00	; .
  108 D1:B9F3 06 0C 18 30 
              60 C0 80 00 Char047: .db $06,$0C,$18,$30,$60,$C0,$80,$00	; /
  109 D1:B9FB 7C CE DE F6 
              E6 C6 7C 00 Char048: .db $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00	; 0
  110 D1:BA03 30 70 30 30 
              30 30 FC 00 Char049: .db $30,$70,$30,$30,$30,$30,$FC,$00	; 1
  111 D1:BA0B 7C C6 06 7C 
              C0 C0 FE 00 Char050: .db $7C,$C6,$06,$7C,$C0,$C0,$FE,$00	; 2
  112 D1:BA13 FC 06 06 3C 
              06 06 FC 00 Char051: .db $FC,$06,$06,$3C,$06,$06,$FC,$00	; 3
  113 D1:BA1B 0C CC CC CC 
              FE 0C 0C 00 Char052: .db $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00	; 4
  114 D1:BA23 FE C0 FC 06 
              06 C6 7C 00 Char053: .db $FE,$C0,$FC,$06,$06,$C6,$7C,$00	; 5
  115 D1:BA2B 7C C0 C0 FC 
              C6 C6 7C 00 Char054: .db $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00	; 6
  116 D1:BA33 FE 06 06 0C 
              18 30 30 00 Char055: .db $FE,$06,$06,$0C,$18,$30,$30,$00	; 7
  117 D1:BA3B 7C C6 C6 7C 
              C6 C6 7C 00 Char056: .db $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00	; 8
  118 D1:BA43 7C C6 C6 7E 
              06 06 7C 00 Char057: .db $7C,$C6,$C6,$7E,$06,$06,$7C,$00	; 9
  119 D1:BA4B 00 C0 C0 00 
              00 C0 C0 00 Char058: .db $00,$C0,$C0,$00,$00,$C0,$C0,$00	; :
  120 D1:BA53 00 60 60 00 
              00 60 60 C0 Char059: .db $00,$60,$60,$00,$00,$60,$60,$C0	; ;
  121 D1:BA5B 18 30 60 C0 
              60 30 18 00 Char060: .db $18,$30,$60,$C0,$60,$30,$18,$00	; <
  122 D1:BA63 00 00 FC 00 
              FC 00 00 00 Char061: .db $00,$00,$FC,$00,$FC,$00,$00,$00	; =
  123 D1:BA6B C0 60 30 18 
              30 60 C0 00 Char062: .db $C0,$60,$30,$18,$30,$60,$C0,$00	; >
  124 D1:BA73 78 CC 18 30 
              30 00 30 00 Char063: .db $78,$CC,$18,$30,$30,$00,$30,$00	; ?
  125 D1:BA7B 7C C6 DE DE 
              DE C0 7E 00 Char064: .db $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00	; @
  126 D1:BA83 38 6C C6 C6 
              FE C6 C6 00 Char065: .db $38,$6C,$C6,$C6,$FE,$C6,$C6,$00	; A
  127 D1:BA8B FC C6 C6 FC 
              C6 C6 FC 00 Char066: .db $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00	; B
  128 D1:BA93 7C C6 C0 C0 
              C0 C6 7C 00 Char067: .db $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00	; C
  129 D1:BA9B F8 CC C6 C6 
              C6 CC F8 00 Char068: .db $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00	; D
  130 D1:BAA3 FE C0 C0 F8 
              C0 C0 FE 00 Char069: .db $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00	; E
  131 D1:BAAB FE C0 C0 F8 
              C0 C0 C0 00 Char070: .db $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00	; F
  132 D1:BAB3 7C C6 C0 C0 
              CE C6 7C 00 Char071: .db $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00	; G
  133 D1:BABB C6 C6 C6 FE 
              C6 C6 C6 00 Char072: .db $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00	; H
  134 D1:BAC3 7E 18 18 18 
              18 18 7E 00 Char073: .db $7E,$18,$18,$18,$18,$18,$7E,$00	; I
  135 D1:BACB 06 06 06 06 
              06 C6 7C 00 Char074: .db $06,$06,$06,$06,$06,$C6,$7C,$00	; J
  136 D1:BAD3 C6 CC D8 F0 
              D8 CC C6 00 Char075: .db $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
  137 D1:BADB C0 C0 C0 C0 
              C0 C0 FE 00 Char076: .db $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00	; L
  138 D1:BAE3 C6 EE FE FE 
              D6 C6 C6 00 Char077: .db $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00	; M
  139 D1:BAEB C6 E6 F6 DE 
              CE C6 C6 00 Char078: .db $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
  140 D1:BAF3 7C C6 C6 C6 
              C6 C6 7C 00 Char079: .db $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00	; O
  141 D1:BAFB FC C6 C6 FC 
              C0 C0 C0 00 Char080: .db $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00	; P
  142 D1:BB03 7C C6 C6 C6 
              D6 DE 7C 06 Char081: .db $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06	; Q
  143 D1:BB0B FC C6 C6 FC 
              D8 CC C6 00 Char082: .db $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00	; R
  144 D1:BB13 7C C6 C0 7C 
              06 C6 7C 00 Char083: .db $7C,$C6,$C0,$7C,$06,$C6,$7C,$00	; S
  145 D1:BB1B FF 18 18 18 
              18 18 18 00 Char084: .db $FF,$18,$18,$18,$18,$18,$18,$00	; T
  146 D1:BB23 C6 C6 C6 C6 
              C6 C6 FE 00 Char085: .db $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00	; U
  147 D1:BB2B C6 C6 C6 C6 
              C6 7C 38 00 Char086: .db $C6,$C6,$C6,$C6,$C6,$7C,$38,$00	; V
  148 D1:BB33 C6 C6 C6 C6 
              D6 FE 6C 00 Char087: .db $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00	; W
  149 D1:BB3B C6 C6 6C 38 
              6C C6 C6 00 Char088: .db $C6,$C6,$6C,$38,$6C,$C6,$C6,$00	; X
  150 D1:BB43 C6 C6 C6 7C 
              18 30 E0 00 Char089: .db $C6,$C6,$C6,$7C,$18,$30,$E0,$00	; Y
  151 D1:BB4B FE 06 0C 18 
              30 60 FE 00 Char090: .db $FE,$06,$0C,$18,$30,$60,$FE,$00	; Z
  152 D1:BB53 F0 C0 C0 C0 
              C0 C0 F0 00 Char091: .db $F0,$C0,$C0,$C0,$C0,$C0,$F0,$00	; [
  153 D1:BB5B C0 60 30 18 
              0C 06 02 00 Char092: .db $C0,$60,$30,$18,$0C,$06,$02,$00	; \
  154 D1:BB63 F0 30 30 30 
              30 30 F0 00 Char093: .db $F0,$30,$30,$30,$30,$30,$F0,$00	; ]
  155 D1:BB6B 10 38 6C C6 
              00 00 00 00 Char094: .db $10,$38,$6C,$C6,$00,$00,$00,$00	; ^
  156 D1:BB73 00 00 00 00 
              00 00 00 FF Char095: .db $00,$00,$00,$00,$00,$00,$00,$FF	; _
  157 D1:BB7B C0 C0 60 00 
              00 00 00 00 Char096: .db $C0,$C0,$60,$00,$00,$00,$00,$00	; `
  158 D1:BB83 00 00 7C 06 
              7E C6 7E 00 Char097: .db $00,$00,$7C,$06,$7E,$C6,$7E,$00	; a
  159 D1:BB8B C0 C0 C0 FC 
              C6 C6 FC 00 Char098: .db $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00	; b
  160 D1:BB93 00 00 7C C6 
              C0 C6 7C 00 Char099: .db $00,$00,$7C,$C6,$C0,$C6,$7C,$00	; c
  161 D1:BB9B 06 06 06 7E 
              C6 C6 7E 00 Char100: .db $06,$06,$06,$7E,$C6,$C6,$7E,$00	; d
  162 D1:BBA3 00 00 7C C6 
              FE C0 7C 00 Char101: .db $00,$00,$7C,$C6,$FE,$C0,$7C,$00	; e
  163 D1:BBAB 1C 36 30 78 
              30 30 78 00 Char102: .db $1C,$36,$30,$78,$30,$30,$78,$00	; f
  164 D1:BBB3 00 00 7E C6 
              C6 7E 06 FC Char103: .db $00,$00,$7E,$C6,$C6,$7E,$06,$FC	; g
  165 D1:BBBB C0 C0 FC C6 
              C6 C6 C6 00 Char104: .db $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00	; h
  166 D1:BBC3 60 00 E0 60 
              60 60 F0 00 Char105: .db $60,$00,$E0,$60,$60,$60,$F0,$00	; i
  167 D1:BBCB 06 00 06 06 
              06 06 C6 7C Char106: .db $06,$00,$06,$06,$06,$06,$C6,$7C	; j
  168 D1:BBD3 C0 C0 CC D8 
              F8 CC C6 00 Char107: .db $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00	; k
  169 D1:BBDB E0 60 60 60 
              60 60 F0 00 Char108: .db $E0,$60,$60,$60,$60,$60,$F0,$00	; l
  170 D1:BBE3 00 00 CC FE 
              FE D6 D6 00 Char109: .db $00,$00,$CC,$FE,$FE,$D6,$D6,$00	; m
  171 D1:BBEB 00 00 FC C6 
              C6 C6 C6 00 Char110: .db $00,$00,$FC,$C6,$C6,$C6,$C6,$00	; n
  172 D1:BBF3 00 00 7C C6 
              C6 C6 7C 00 Char111: .db $00,$00,$7C,$C6,$C6,$C6,$7C,$00	; o
  173 D1:BBFB 00 00 FC C6 
              C6 FC C0 C0 Char112: .db $00,$00,$FC,$C6,$C6,$FC,$C0,$C0	; p
  174 D1:BC03 00 00 7E C6 
              C6 7E 06 06 Char113: .db $00,$00,$7E,$C6,$C6,$7E,$06,$06	; q
  175 D1:BC0B 00 00 FC C6 
              C0 C0 C0 00 Char114: .db $00,$00,$FC,$C6,$C0,$C0,$C0,$00	; r
  176 D1:BC13 00 00 7E C0 
              7C 06 FC 00 Char115: .db $00,$00,$7E,$C0,$7C,$06,$FC,$00	; s
  177 D1:BC1B 30 30 FC 30 
              30 30 1C 00 Char116: .db $30,$30,$FC,$30,$30,$30,$1C,$00	; t
  178 D1:BC23 00 00 C6 C6 
              C6 C6 7E 00 Char117: .db $00,$00,$C6,$C6,$C6,$C6,$7E,$00	; u
  179 D1:BC2B 00 00 C6 C6 
              C6 7C 38 00 Char118: .db $00,$00,$C6,$C6,$C6,$7C,$38,$00	; v
  180 D1:BC33 00 00 C6 C6 
              D6 FE 6C 00 Char119: .db $00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
  181 D1:BC3B 00 00 C6 6C 
              38 6C C6 00 Char120: .db $00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
  182 D1:BC43 00 00 C6 C6 
              C6 7E 06 FC Char121: .db $00,$00,$C6,$C6,$C6,$7E,$06,$FC	; y
  183 D1:BC4B 00 00 FE 0C 
              38 60 FE 00 Char122: .db $00,$00,$FE,$0C,$38,$60,$FE,$00	; z
  184 D1:BC53 1C 30 30 E0 
              30 30 1C 00 Char123: .db $1C,$30,$30,$E0,$30,$30,$1C,$00	; {
  185 D1:BC5B C0 C0 C0 00 
              C0 C0 C0 00 Char124: .db $C0,$C0,$C0,$00,$C0,$C0,$C0,$00	; |
  186 D1:BC63 E0 30 30 1C 
              30 30 E0 00 Char125: .db $E0,$30,$30,$1C,$30,$30,$E0,$00	; }
  187 D1:BC6B 76 DC 00 00 
              00 00 00 00 Char126: .db $76,$DC,$00,$00,$00,$00,$00,$00	; ~
  188 D1:BC73 00 10 38 6C 
              C6 C6 FE 00 Char127: .db $00,$10,$38,$6C,$C6,$C6,$FE,$00	; .
Listing for file "ice.asm"
  444 D1:BC7B -  -  -  -  #include "programs.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\programs.asm"
    1 D1:BC7B -  -  -  -  FindNextGoodVar:
    2 D1:BC7B ED 5B 9A 25 
              D0 -  -  -  	ld de, (pTemp)
    3 D1:BC80 CD 3C 01 02 	call _CpHLDE
    4 D1:BC84 20 02 -  -  	jr nz, FindContinue
    5 D1:BC86 3C -  -  -  	inc a									; return nz
    6 D1:BC87 C9 -  -  -  	ret
    7 D1:BC88 -  -  -  -  FindContinue:
    8 D1:BC88 7E -  -  -  	ld a, (hl)
    9 D1:BC89 2B -  -  -  	dec hl
   10 D1:BC8A 2B -  -  -  	dec hl
   11 D1:BC8B 2B -  -  -  	dec hl
   12 D1:BC8C FE 05 -  -  	cp ProgObj
   13 D1:BC8E 28 04 -  -  	jr z, FindGoodProgram
   14 D1:BC90 FE 06 -  -  	cp ProtProgObj
   15 D1:BC92 20 43 -  -  	jr nz, FindWrongProgram
   16 D1:BC94 -  -  -  -  FindGoodProgram:
   17 D1:BC94 5E -  -  -  	ld e, (hl)
   18 D1:BC95 2B -  -  -  	dec hl
   19 D1:BC96 56 -  -  -  	ld d, (hl)
   20 D1:BC97 2B -  -  -  	dec hl
   21 D1:BC98 7E -  -  -  	ld a, (hl)
   22 D1:BC99 CD 68 1D 02 	call _SetDEUToA
   23 D1:BC9D FE D0 -  -  	cp 0D0h
   24 D1:BC9F 30 0C -  -  	jr nc, +_
   25 D1:BCA1 E5 -  -  -  	push hl
   26 D1:BCA2 EB -  -  -  		ex de, hl
   27 D1:BCA3 11 09 00 00 		ld de, 9
   28 D1:BCA7 19 -  -  -  		add hl, de
   29 D1:BCA8 5E -  -  -  		ld e, (hl)
   30 D1:BCA9 1C -  -  -  		inc e
   31 D1:BCAA 19 -  -  -  		add hl, de
   32 D1:BCAB EB -  -  -  		ex de, hl
   33 D1:BCAC E1 -  -  -  	pop hl
   34 D1:BCAD 13 -  -  -  _:	inc de
   35 D1:BCAE 13 -  -  -  	inc de
   36 D1:BCAF 1A -  -  -  	ld a, (de)
   37 D1:BCB0 FE 2C -  -  	cp tii
   38 D1:BCB2 20 25 -  -  	jr nz, FindWrongProgram2
   39 D1:BCB4 2B -  -  -  	dec hl
   40 D1:BCB5 D5 -  -  -  	push de
   41 D1:BCB6 E5 -  -  -  		push hl
   42 D1:BCB7 2A 4C EA D1 			ld hl, (ProgramNamesPtr)
   43 D1:BCBB 11 08 00 00 			ld de, 8
   44 D1:BCBF 19 -  -  -  			add hl, de
   45 D1:BCC0 22 4C EA D1 			ld (ProgramNamesPtr), hl
   46 D1:BCC4 B7 -  -  -  			or a
   47 D1:BCC5 ED 52 -  -  			sbc hl, de
   48 D1:BCC7 EB -  -  -  			ex de, hl
   49 D1:BCC8 E1 -  -  -  		pop hl
   50 D1:BCC9 46 -  -  -  		ld b, (hl)
   51 D1:BCCA 48 -  -  -  		ld c, b
   52 D1:BCCB 2B -  -  -  		dec hl
   53 D1:BCCC -  -  -  -  FindCopyProgName:
   54 D1:BCCC 7E -  -  -  		ld a, (hl)
   55 D1:BCCD 12 -  -  -  		ld (de), a
   56 D1:BCCE 2B -  -  -  		dec hl
   57 D1:BCCF 13 -  -  -  		inc de
   58 D1:BCD0 10 FA -  -  		djnz FindCopyProgName
   59 D1:BCD2 AF -  -  -  		xor a
   60 D1:BCD3 12 -  -  -  		ld (de), a
   61 D1:BCD4 D1 -  -  -  	pop de
   62 D1:BCD5 BF -  -  -  	cp a
   63 D1:BCD6 C9 -  -  -  	ret
   64 D1:BCD7 -  -  -  -  FindWrongProgram:
   65 D1:BCD7 2B -  -  -  	dec hl
   66 D1:BCD8 2B -  -  -  	dec hl
   67 D1:BCD9 -  -  -  -  FindWrongProgram2:
   68 D1:BCD9 2B -  -  -  	dec hl
   69 D1:BCDA 46 -  -  -  	ld b, (hl)
   70 D1:BCDB 2B -  -  -  	dec hl
   71 D1:BCDC -  -  -  -  FindSkipProgramName:
   72 D1:BCDC 2B -  -  -  	dec hl
   73 D1:BCDD 10 FD -  -  	djnz FindSkipProgramName
   74 D1:BCDF 18 9A -  -  	jr FindNextGoodVar
Listing for file "ice.asm"
  445 D1:BCE1 -  -  -  -  #include "hooks.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\hooks.asm"
    1 D1:BCE1 -  -  -  -  InstallHooks:
    2 D1:BCE1 21 C6 EA D1 	ld hl, ICEAppvar
    3 D1:BCE5 CD 20 03 02 	call _Mov9ToOP1
    4 D1:BCE9 CD 0C 05 02 	call _ChkFindSym
    5 D1:BCED 38 13 -  -  	jr c, ++_
    6 D1:BCEF CD 98 1F 02 	call _ChkInRAM
    7 D1:BCF3 30 09 -  -  	jr nc, +_
    8 D1:BCF5 CD 48 14 02 	call _Arc_Unarc
    9 D1:BCF9 01 05 00 00 	ld bc, 5
   10 D1:BCFD 09 -  -  -  	add hl, bc
   11 D1:BCFE CD 88 05 02 _:	call _DelVar
   12 D1:BD02 21 28 08 00 _:	ld hl, Hooks_end - KeyHook_start
   13 D1:BD06 CD 30 13 02 	call _CreateAppVar
   14 D1:BD0A 13 -  -  -  	inc de
   15 D1:BD0B 13 -  -  -  	inc de
   16 D1:BD0C 21 3D BD D1 	ld hl, KeyHook_start
   17 D1:BD10 01 28 08 00 	ld bc, Hooks_end - KeyHook_start
   18 D1:BD14 ED B0 -  -  	ldir
   19 D1:BD16 CD C8 02 02 	call _OP4ToOP1
   20 D1:BD1A CD 48 14 02 	call _Arc_Unarc
   21 D1:BD1E CD 0C 05 02 	call _ChkFindSym
   22 D1:BD22 21 13 00 00 	ld hl, 19														; archived program header+VAT entry
   23 D1:BD26 19 -  -  -  	add hl, de
   24 D1:BD27 CD CC 13 02 	call _SetGetKeyHook
   25 D1:BD2B -  -  -  -  	
   26 D1:BD2B 11 4F 07 00 	ld de, KeyHook_end - KeyHook_start
   27 D1:BD2F 19 -  -  -  	add hl, de
   28 D1:BD30 CD F8 13 02 	call _SetTokenHook
   29 D1:BD34 -  -  -  -  	
   30 D1:BD34 11 2B 00 00 	ld de, TokenHook_end - TokenHook_start
   31 D1:BD38 19 -  -  -  	add hl, de
   32 D1:BD39 C3 C4 13 02 	jp _SetCursorhook
   33 D1:BD3D -  -  -  -  	
   34 D1:BD3D -  -  -  -  KeyHook_start:
   35 D1:BD3D 83 -  -  -  	.db 83h
   36 D1:BD3E B7 -  -  -  	or a
   37 D1:BD3F C8 -  -  -  	ret z
   38 D1:BD40 47 -  -  -  	ld b, a
   39 D1:BD41 3A E0 07 D0 	ld a, (cxCurApp)
   40 D1:BD45 FE 46 -  -  	cp cxPrgmEdit
   41 D1:BD47 78 -  -  -  	ld a, b
   42 D1:BD48 C0 -  -  -  	ret nz
   43 D1:BD49 F5 -  -  -  	push af
   44 D1:BD4A CD A0 20 02 		call _os_ClearStatusBarLow
   45 D1:BD4E FD CB B0 86 		res displayed_det, (iy+fAlways1)
   46 D1:BD52 F1 -  -  -  	pop af
   47 D1:BD53 FE 5A -  -  	cp kTrace
   48 D1:BD55 C0 -  -  -  	ret nz
   49 D1:BD56 -  -  -  -  DisplayCustomTokensAndCFunctions:
   50 D1:BD56 CD A8 08 02 	call _CursorOff
   51 D1:BD5A 16 00 -  -  	ld d, 0
   52 D1:BD5C -  -  -  -  DisplayTabWithTokens:
   53 D1:BD5C D5 -  -  -  	push de
   54 D1:BD5D CD 08 08 02 		call _ClrLCDFull
   55 D1:BD61 D1 -  -  -  	pop de
   56 D1:BD62 21 1E 00 00 	ld hl, 30
   57 D1:BD66 22 D5 08 D0 	ld (penRow), hl
   58 D1:BD6A 21 0C 00 00 	ld hl, 12
   59 D1:BD6E 22 D2 08 D0 	ld (penCol), hl
   60 D1:BD72 06 00 -  -  	ld b, 0
   61 D1:BD74 7A -  -  -  	ld a, d
   62 D1:BD75 1E 03 -  -  	ld e, 3
   63 D1:BD77 ED 5C -  -  	mlt de
   64 D1:BD79 21 19 06 00 	ld hl, TabData - KeyHook_start
   65 D1:BD7D 19 -  -  -  	add hl, de
   66 D1:BD7E ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
   67 D1:BD83 19 -  -  -  	add hl, de
   68 D1:BD84 ED 27 -  -  	ld hl, (hl)
   69 D1:BD86 19 -  -  -  	add hl, de
   70 D1:BD87 57 -  -  -  	ld d, a
   71 D1:BD88 1E 00 -  -  	ld e, 0
   72 D1:BD8A 18 0F -  -  	jr DisplayTokensLoop
   73 D1:BD8C -  -  -  -  KeyIsLeft:
   74 D1:BD8C 7A -  -  -  	ld a, d
   75 D1:BD8D B7 -  -  -  	or a
   76 D1:BD8E 28 61 -  -  	jr z, KeyLoop
   77 D1:BD90 15 -  -  -  	dec d
   78 D1:BD91 18 C9 -  -  	jr DisplayTabWithTokens
   79 D1:BD93 -  -  -  -  KeyIsRight:
   80 D1:BD93 7A -  -  -  	ld a, d
   81 D1:BD94 FE 05 -  -  	cp 5
   82 D1:BD96 28 59 -  -  	jr z, KeyLoop
   83 D1:BD98 14 -  -  -  	inc d
   84 D1:BD99 18 C1 -  -  	jr DisplayTabWithTokens
   85 D1:BD9B -  -  -  -  DisplayTokensLoop:
   86 D1:BD9B 78 -  -  -  	ld a, b
   87 D1:BD9C FE 10 -  -  	cp 16
   88 D1:BD9E 28 22 -  -  	jr z, StopDisplayingTokens
   89 D1:BDA0 04 -  -  -  	inc b
   90 D1:BDA1 CD 34 08 02 	call _VPutS
   91 D1:BDA5 E5 -  -  -  	push hl
   92 D1:BDA6 D5 -  -  -  		push de
   93 D1:BDA7 2A D5 08 D0 			ld hl, (penRow)
   94 D1:BDAB 11 0D 00 00 			ld de, 13
   95 D1:BDAF 19 -  -  -  			add hl, de
   96 D1:BDB0 22 D5 08 D0 			ld (penRow), hl
   97 D1:BDB4 21 0C 00 00 			ld hl, 12
   98 D1:BDB8 22 D2 08 D0 			ld (penCol), hl
   99 D1:BDBC D1 -  -  -  		pop de
  100 D1:BDBD E1 -  -  -  	pop hl
  101 D1:BDBE 7E -  -  -  	ld a, (hl)
  102 D1:BDBF B7 -  -  -  	or a
  103 D1:BDC0 20 D9 -  -  	jr nz, DisplayTokensLoop
  104 D1:BDC2 -  -  -  -  StopDisplayingTokens:
  105 D1:BDC2 21 01 00 00 	ld hl, 1
  106 D1:BDC6 22 D2 08 D0 	ld (penCol), hl
  107 D1:BDCA -  -  -  -  GetRightCustomToken:
  108 D1:BDCA 7B -  -  -  	ld a, e
  109 D1:BDCB 42 -  -  -  	ld b, d
  110 D1:BDCC 16 0D -  -  	ld d, 13
  111 D1:BDCE ED 5C -  -  	mlt de
  112 D1:BDD0 21 1E 00 00 	ld hl, 30
  113 D1:BDD4 19 -  -  -  	add hl, de
  114 D1:BDD5 50 -  -  -  	ld d, b
  115 D1:BDD6 5F -  -  -  	ld e, a
  116 D1:BDD7 22 D5 08 D0 	ld (penRow), hl
  117 D1:BDDB 21 01 00 00 	ld hl, 1
  118 D1:BDDF 22 D2 08 D0 	ld (penCol), hl
  119 D1:BDE3 E5 -  -  -  	push hl
  120 D1:BDE4 D5 -  -  -  		push de
  121 D1:BDE5 3E 3E -  -  			ld a, '>'
  122 D1:BDE7 CD 30 08 02 			call _VPutMap
  123 D1:BDEB D1 -  -  -  		pop de
  124 D1:BDEC E1 -  -  -  	pop hl
  125 D1:BDED 22 D2 08 D0 	ld (penCol), hl
  126 D1:BDF1 -  -  -  -  KeyLoop:
  127 D1:BDF1 CD 4C 01 02 	call _GetCSC
  128 D1:BDF5 B7 -  -  -  	or a
  129 D1:BDF6 28 F9 -  -  	jr z, KeyLoop
  130 D1:BDF8 FE 02 -  -  	cp skLeft
  131 D1:BDFA 28 90 -  -  	jr z, KeyIsLeft
  132 D1:BDFC FE 03 -  -  	cp skRight
  133 D1:BDFE 28 93 -  -  	jr z, KeyIsRight
  134 D1:BE00 FE 04 -  -  	cp skUp
  135 D1:BE02 20 1B -  -  	jr nz, KeyNotUp
  136 D1:BE04 7B -  -  -  	ld a, e
  137 D1:BE05 B7 -  -  -  	or a
  138 D1:BE06 28 E9 -  -  	jr z, KeyLoop
  139 D1:BE08 1D -  -  -  	dec e
  140 D1:BE09 -  -  -  -  EraseCursor:
  141 D1:BE09 D5 -  -  -  	push de
  142 D1:BE0A 3E 20 -  -  		ld a, ' '
  143 D1:BE0C CD 30 08 02 		call _VPutMap
  144 D1:BE10 3E 20 -  -  		ld a, ' '
  145 D1:BE12 CD 30 08 02 		call _VPutMap
  146 D1:BE16 3E 20 -  -  		ld a, ' '
  147 D1:BE18 CD 30 08 02 		call _VPutMap
  148 D1:BE1C D1 -  -  -  	pop de
  149 D1:BE1D 18 AB -  -  	jr GetRightCustomToken
  150 D1:BE1F -  -  -  -  KeyNotUp:
  151 D1:BE1F FE 01 -  -  	cp skDown
  152 D1:BE21 20 12 -  -  	jr nz, KeyNotDown
  153 D1:BE23 7A -  -  -  	ld a, d
  154 D1:BE24 FE 05 -  -  	cp 5
  155 D1:BE26 7B -  -  -  	ld a, e
  156 D1:BE27 20 04 -  -  	jr nz, +_
  157 D1:BE29 FE 02 -  -  	cp (AMOUNT_OF_C_FUNCTIONS + AMOUNT_OF_CUSTOM_TOKENS)%16 - 1
  158 D1:BE2B 28 C4 -  -  	jr z, KeyLoop
  159 D1:BE2D 7B -  -  -  _:	ld a, e
  160 D1:BE2E FE 0F -  -  	cp 16-1
  161 D1:BE30 28 BF -  -  	jr z, KeyLoop
  162 D1:BE32 1C -  -  -  	inc e
  163 D1:BE33 18 D4 -  -  	jr EraseCursor
  164 D1:BE35 -  -  -  -  KeyNotDown:
  165 D1:BE35 FE 0F -  -  	cp skClear
  166 D1:BE37 28 75 -  -  	jr z, KeyIsClear
  167 D1:BE39 FE 09 -  -  	cp skEnter
  168 D1:BE3B 20 B4 -  -  	jr nz, KeyLoop
  169 D1:BE3D 7B -  -  -  	ld a, e
  170 D1:BE3E 1E 10 -  -  	ld e, 16
  171 D1:BE40 ED 5C -  -  	mlt de
  172 D1:BE42 83 -  -  -  	add a, e
  173 D1:BE43 D6 04 -  -  	sub AMOUNT_OF_CUSTOM_TOKENS
  174 D1:BE45 38 4F -  -  	jr c, InsertCustomToken
  175 D1:BE47 21 1F EA D0 	ld hl, saveSScreen
  176 D1:BE4B 36 B3 -  -  	ld (hl), tDet
  177 D1:BE4D 23 -  -  -  	inc hl
  178 D1:BE4E FE 0A -  -  	cp 10
  179 D1:BE50 38 17 -  -  	jr c, +_
  180 D1:BE52 57 -  -  -  	ld d, a
  181 D1:BE53 1E 0A -  -  	ld e, 10
  182 D1:BE55 AF -  -  -  	xor a
  183 D1:BE56 06 08 -  -  	ld b, 8
  184 D1:BE58 -  -  -  -  _loop:
  185 D1:BE58 CB 22 -  -  	sla d
  186 D1:BE5A 17 -  -  -  	rla
  187 D1:BE5B BB -  -  -  	cp e
  188 D1:BE5C 38 02 -  -  	jr c, $+4
  189 D1:BE5E 93 -  -  -  	sub e
  190 D1:BE5F 14 -  -  -  	inc d
  191 D1:BE60 10 F6 -  -  	djnz _loop
  192 D1:BE62 5F -  -  -  	ld e, a
  193 D1:BE63 7A -  -  -  	ld a, d
  194 D1:BE64 C6 30 -  -  	add a, t0
  195 D1:BE66 77 -  -  -  	ld (hl), a
  196 D1:BE67 23 -  -  -  	inc hl
  197 D1:BE68 7B -  -  -  	ld a, e
  198 D1:BE69 C6 30 -  -  _:	add a, t0
  199 D1:BE6B 77 -  -  -  	ld (hl), a
  200 D1:BE6C 23 -  -  -  	inc hl
  201 D1:BE6D 36 00 -  -  	ld (hl), 0
  202 D1:BE6F 21 1F EA D0 	ld hl, saveSScreen
  203 D1:BE73 -  -  -  -  InsertCFunctionLoop:
  204 D1:BE73 7E -  -  -  	ld a, (hl)
  205 D1:BE74 B7 -  -  -  	or a
  206 D1:BE75 28 37 -  -  	jr z, BufferSearch
  207 D1:BE77 ED 5B 3D 24 
              D0 -  -  -  	ld de, (editTail)
  208 D1:BE7C 1A -  -  -  	ld a, (de)
  209 D1:BE7D FE 3F -  -  	cp tEnter
  210 D1:BE7F 16 00 -  -  	ld d, 0
  211 D1:BE81 5E -  -  -  	ld e, (hl)
  212 D1:BE82 28 09 -  -  	jr z, +_
  213 D1:BE84 E5 -  -  -  	push hl
  214 D1:BE85 CD 08 0D 02 		call _BufReplace
  215 D1:BE89 E1 -  -  -  	pop hl
  216 D1:BE8A 23 -  -  -  	inc hl
  217 D1:BE8B 18 E6 -  -  	jr InsertCFunctionLoop
  218 D1:BE8D E5 -  -  -  _:	push hl
  219 D1:BE8E CD 00 0D 02 		call _BufInsert
  220 D1:BE92 E1 -  -  -  	pop hl
  221 D1:BE93 23 -  -  -  	inc hl
  222 D1:BE94 18 DD -  -  	jr InsertCFunctionLoop
  223 D1:BE96 -  -  -  -  InsertCustomToken:
  224 D1:BE96 C6 0E -  -  	add a, 10+AMOUNT_OF_CUSTOM_TOKENS
  225 D1:BE98 5F -  -  -  	ld e, a
  226 D1:BE99 16 62 -  -  	ld d, tVarOut
  227 D1:BE9B 2A 3A 24 D0 	ld hl, (editCursor)
  228 D1:BE9F 7E -  -  -  	ld a, (hl)
  229 D1:BEA0 FE 3F -  -  	cp tEnter
  230 D1:BEA2 28 06 -  -  	jr z, +_
  231 D1:BEA4 CD 08 0D 02 	call _BufReplace
  232 D1:BEA8 18 04 -  -  	jr BufferSearch
  233 D1:BEAA CD 00 0D 02 _:	call _BufInsert
  234 D1:BEAE -  -  -  -  KeyIsClear:
  235 D1:BEAE -  -  -  -  BufferSearch:
  236 D1:BEAE 01 00 00 00 	ld bc, 0
  237 D1:BEB2 CD F8 0C 02 _:	call _BufLeft
  238 D1:BEB6 28 0C -  -  	jr z, BufferFound
  239 D1:BEB8 7B -  -  -  	ld a, e
  240 D1:BEB9 FE 3F -  -  	cp tEnter
  241 D1:BEBB 28 03 -  -  	jr z, +_
  242 D1:BEBD 03 -  -  -  	inc bc
  243 D1:BEBE 18 F2 -  -  	jr -_
  244 D1:BEC0 CD FC 0C 02 _:	call _BufRight
  245 D1:BEC4 -  -  -  -  BufferFound:
  246 D1:BEC4 C5 -  -  -  	push bc
  247 D1:BEC5 CD 08 08 02 		call _ClrLCDFull
  248 D1:BEC9 CD 18 08 02 		call _ClrTxtShd
  249 D1:BECD 11 46 07 00 		ld de, CustomTokensProgramText - KeyHook_start
  250 D1:BED1 2A DB 25 D0 		ld hl, (rawKeyHookPtr)
  251 D1:BED5 19 -  -  -  		add hl, de
  252 D1:BED6 AF -  -  -  		xor a
  253 D1:BED7 32 96 05 D0 		ld (curCol), a
  254 D1:BEDB 32 95 05 D0 		ld (curRow), a
  255 D1:BEDF CD C0 07 02 		call _PutS
  256 D1:BEE3 21 5B 06 D0 		ld hl, progToEdit
  257 D1:BEE7 06 08 -  -  		ld b, 8
  258 D1:BEE9 7E -  -  -  _:		ld a, (hl)
  259 D1:BEEA B7 -  -  -  		or a
  260 D1:BEEB 28 07 -  -  		jr z, +_
  261 D1:BEED CD B8 07 02 		call _PutC
  262 D1:BEF1 23 -  -  -  		inc hl
  263 D1:BEF2 10 F5 -  -  		djnz -_
  264 D1:BEF4 CD F0 07 02 _:		call _NewLine
  265 D1:BEF8 3E 3A -  -  		ld a, ':'
  266 D1:BEFA CD B8 07 02 		call _PutC
  267 D1:BEFE CD 68 0D 02 		call _DispEOW
  268 D1:BF02 C1 -  -  -  	pop bc
  269 D1:BF03 -  -  -  -  MoveCursorOnce:
  270 D1:BF03 78 -  -  -  	ld a, b
  271 D1:BF04 B1 -  -  -  	or c
  272 D1:BF05 28 07 -  -  	jr z, ReturnToEditor
  273 D1:BF07 CD 4C 0D 02 	call _CursorRight
  274 D1:BF0B 0B -  -  -  	dec bc
  275 D1:BF0C 18 F5 -  -  	jr MoveCursorOnce
  276 D1:BF0E -  -  -  -  ReturnToEditor:
  277 D1:BF0E CD B0 08 02 	call _CursorOn
  278 D1:BF12 3C -  -  -  	inc a																	; reset zero flag
  279 D1:BF13 3E 00 -  -  	ld a, 0
  280 D1:BF15 C9 -  -  -  	ret
  281 D1:BF16 -  -  -  -  CustomTokensData:
  282 D1:BF16 -  -  -  -  Tab1:
  283 D1:BF16 45 78 65 63 
              48 65 78 28 
              00 -  -  -  C1:		.db "ExecHex(", 0
  284 D1:BF1F 44 65 66 69 
              6E 65 53 70 
              72 69 74 65 
              28 00 -  -  C2:		.db "DefineSprite(", 0
  285 D1:BF2D 43 61 6C 6C 
              20 00 -  -  C3:		.db "Call ", 0
  286 D1:BF33 43 6F 6D 70 
              69 6C 65 50 
              72 67 6D 28 
              00 -  -  -  C4:		.db "CompilePrgm(", 0
  287 D1:BF40 -  -  -  -  
  288 D1:BF40 -  -  -  -  #define AMOUNT_OF_C_FUNCTIONS 79
  289 D1:BF40 -  -  -  -  
  290 D1:BF40 42 65 67 69 
              6E 00 -  -  C6:		.db "Begin", 0
  291 D1:BF46 45 6E 64 00 C7:		.db "End", 0
  292 D1:BF4A 53 65 74 43 
              6F 6C 6F 72 
              00 -  -  -  C8:		.db "SetColor", 0
  293 D1:BF53 53 65 74 44 
              65 66 61 75 
              6C 74 50 61 
              6C 65 74 74 
              65 00 -  -  C9:		.db "SetDefaultPalette", 0
  294 D1:BF65 53 65 74 50 
              61 6C 65 74 
              74 65 00 -  C10:	.db "SetPalette", 0
  295 D1:BF70 46 69 6C 6C 
              53 63 72 65 
              65 6E 00 -  C11:	.db "FillScreen", 0
  296 D1:BF7B 53 65 74 50 
              69 78 65 6C 
              00 -  -  -  C12:	.db "SetPixel", 0
  297 D1:BF84 47 65 74 50 
              69 78 65 6C 
              00 -  -  -  C13:	.db "GetPixel", 0
  298 D1:BF8D 47 65 74 44 
              72 61 77 00 C14:	.db "GetDraw", 0
  299 D1:BF95 53 65 74 44 
              72 61 77 00 C15:	.db "SetDraw", 0
  300 D1:BF9D 53 77 61 70 
              44 72 61 77 
              00 -  -  -  C16:	.db "SwapDraw", 0
  301 D1:BFA6 42 6C 69 74 
              00 -  -  -  C17:	.db "Blit", 0
  302 D1:BFAB -  -  -  -  Tab2:
  303 D1:BFAB 42 6C 69 74 
              4C 69 6E 65 
              73 00 -  -  C18:	.db "BlitLines", 0
  304 D1:BFB5 42 6C 69 74 
              41 72 65 61 
              00 -  -  -  C19:	.db "BlitArea", 0
  305 D1:BFBE 50 72 69 6E 
              74 43 68 61 
              72 00 -  -  C20:	.db "PrintChar", 0
  306 D1:BFC8 50 72 69 6E 
              74 49 6E 74 
              00 -  -  -  C21:	.db "PrintInt", 0
  307 D1:BFD1 50 72 69 6E 
              74 55 49 6E 
              74 00 -  -  C22:	.db "PrintUInt", 0
  308 D1:BFDB 50 72 69 6E 
              74 53 74 72 
              69 6E 67 00 C23:	.db "PrintString", 0
  309 D1:BFE7 50 72 69 6E 
              74 53 74 72 
              69 6E 67 58 
              59 00 -  -  C24:	.db "PrintStringXY", 0
  310 D1:BFF5 53 65 74 54 
              65 78 74 58 
              59 00 -  -  C25:	.db "SetTextXY", 0
  311 D1:BFFF 53 65 74 54 
              65 78 74 42 
              47 43 6F 6C 
              6F 72 00 -  C26:	.db "SetTextBGColor", 0
  312 D1:C00E 53 65 74 54 
              65 78 74 46 
              47 43 6F 6C 
              6F 72 00 -  C27:	.db "SetTextFGColor", 0
  313 D1:C01D 53 65 74 54 
              65 78 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C28:	.db "SetTextTransparentColor", 0
  314 D1:C035 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 44 61 74 
              61 00 -  -  C29:	.db "SetCustomFontData", 0
  315 D1:C047 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 53 70 61 
              63 69 6E 67 
              00 -  -  -  C30:	.db "SetCustomFontSpacing", 0
  316 D1:C05C 53 65 74 4D 
              6F 6E 6F 73 
              70 61 63 65 
              46 6F 6E 74 
              00 -  -  -  C31:	.db "SetMonospaceFont", 0
  317 D1:C06D 47 65 74 53 
              74 72 69 6E 
              67 57 69 64 
              74 68 00 -  C32:	.db "GetStringWidth", 0
  318 D1:C07C 47 65 74 43 
              68 61 72 57 
              69 64 74 68 
              00 -  -  -  C33:	.db "GetCharWidth", 0
  319 D1:C089 -  -  -  -  Tab3:
  320 D1:C089 47 65 74 54 
              65 78 74 58 
              00 -  -  -  C34:	.db "GetTextX", 0
  321 D1:C092 47 65 74 54 
              65 78 74 59 
              00 -  -  -  C35:	.db "GetTextY", 0
  322 D1:C09B 4C 69 6E 65 
              00 -  -  -  C36:	.db "Line", 0
  323 D1:C0A0 48 6F 72 69 
              7A 4C 69 6E 
              65 00 -  -  C37:	.db "HorizLine", 0
  324 D1:C0AA 56 65 72 74 
              4C 69 6E 65 
              00 -  -  -  C38:	.db "VertLine", 0
  325 D1:C0B3 43 69 72 63 
              6C 65 00 -  C39:	.db "Circle", 0
  326 D1:C0BA 46 69 6C 6C 
              43 69 72 63 
              6C 65 00 -  C40:	.db "FillCircle", 0
  327 D1:C0C5 52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C41:	.db "Rectangle", 0
  328 D1:C0CF 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C42:	.db "FillRectangle", 0
  329 D1:C0DD 4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C43:	.db "Line_NoClip", 0
  330 D1:C0E9 48 6F 72 69 
              7A 4C 69 6E 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C44:	.db "HorizLine_NoClip", 0
  331 D1:C0FA 56 65 72 74 
              4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C45:	.db "VertLine_NoClip", 0
  332 D1:C10A 46 69 6C 6C 
              43 69 72 63 
              6C 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C46:	.db "FillCircle_NoClip", 0
  333 D1:C11C 52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C47:	.db "Rectangle_NoClip", 0
  334 D1:C12D 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C48:	.db "FillRectangle_NoClip", 0
  335 D1:C142 53 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C49:	.db "SetClipRegion", 0
  336 D1:C150 -  -  -  -  Tab4:
  337 D1:C150 47 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C50:	.db "GetClipRegion", 0
  338 D1:C15E 53 68 69 66 
              74 44 6F 77 
              6E 00 -  -  C51:	.db "ShiftDown", 0
  339 D1:C168 53 68 69 66 
              74 55 70 00 C52:	.db "ShiftUp", 0
  340 D1:C170 53 68 69 66 
              74 4C 65 66 
              74 00 -  -  C53:	.db "ShiftLeft", 0
  341 D1:C17A 53 68 69 66 
              74 52 69 67 
              68 74 00 -  C54:	.db "ShiftRight", 0
  342 D1:C185 54 69 6C 65 
              6D 61 70 00 C55:	.db "Tilemap", 0
  343 D1:C18D 54 69 6C 65 
              6D 61 70 5F 
              4E 6F 43 6C 
              69 70 00 -  C56:	.db "Tilemap_NoClip", 0
  344 D1:C19C 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 00 -  C57:	.db "TransparentTilemap", 0
  345 D1:C1AF 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C58:	.db "TransparentTilemap_NoClip", 0
  346 D1:C1C9 54 69 6C 65 
              50 74 72 00 C59:	.db "TilePtr", 0
  347 D1:C1D1 54 69 6C 65 
              50 74 72 4D 
              61 70 70 65 
              64 00 -  -  C60:	.db "TilePtrMapped", 0
  348 D1:C1DF 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              00 -  -  -  C61:	.db "LZDecompress", 0
  349 D1:C1EC 41 6C 6C 6F 
              63 53 70 72 
              69 74 65 00 C62:	.db "AllocSprite", 0
  350 D1:C1F8 53 70 72 69 
              74 65 00 -  C63:	.db "Sprite", 0
  351 D1:C1FF 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 00 -  -  C64:	.db "TransparentSprite", 0
  352 D1:C211 53 70 72 69 
              74 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C65:	.db "Sprite_NoClip", 0
  353 D1:C21F -  -  -  -  Tab5:
  354 D1:C21F 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C66:	.db "TransparentSprite_NoClip", 0
  355 D1:C238 47 65 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C67:	.db "GetSprite_NoClip", 0
  356 D1:C249 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              5F 4E 6F 43 
              6C 69 70 00 C68:	.db "ScaledSprite_NoClip", 0
  357 D1:C25D 53 63 61 6C 
              65 64 54 72 
              61 6E 73 70 
              61 72 65 6E 
              74 53 70 72 
              69 74 65 5F 
              4E 6F 43 6C 
              69 70 00 -  C69:	.db "ScaledTransparentSprite_NoClip", 0
  358 D1:C27C 46 6C 69 70 
              53 70 72 69 
              74 65 59 00 C70:	.db "FlipSpriteY", 0
  359 D1:C288 46 6C 69 70 
              53 70 72 69 
              74 65 58 00 C71:	.db "FlipSpriteX", 0
  360 D1:C294 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 00 -  -  C72:	.db "RotateSpriteC", 0
  361 D1:C2A2 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 43 00 -  C73:	.db "RotateSpriteCC", 0
  362 D1:C2B1 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              48 61 6C 66 
              00 -  -  -  C74:	.db "RotateSpriteHalf", 0
  363 D1:C2C2 50 6F 6C 79 
              67 6F 6E 00 C75:	.db "Polygon", 0
  364 D1:C2CA 50 6F 6C 79 
              67 6F 6E 5F 
              4E 6F 43 6C 
              69 70 00 -  C76:	.db "Polygon_NoClip", 0
  365 D1:C2D9 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              00 -  -  -  C77:	.db "FillTriangle", 0
  366 D1:C2E6 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              5F 4E 6F 43 
              6C 69 70 00 C78:	.db "FillTriangle_NoClip", 0
  367 D1:C2FA 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              53 70 72 69 
              74 65 00 -  C79:	.db "LZDecompressSprite", 0
  368 D1:C30D 53 65 74 54 
              65 78 74 53 
              63 61 6C 65 
              00 -  -  -  C80:	.db "SetTextScale", 0
  369 D1:C31A 53 65 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C81:	.db "SetTransparentColor", 0
  370 D1:C32E -  -  -  -  Tab6:
  371 D1:C32E 5A 65 72 6F 
              53 63 72 65 
              65 6E 00 -  C82:	.db "ZeroScreen", 0
  372 D1:C339 53 65 74 54 
              65 78 74 43 
              6F 6E 66 69 
              67 00 -  -  C83:	.db "SetTextConfig", 0
  373 D1:C347 47 65 74 53 
              70 72 69 74 
              65 43 68 61 
              72 00 -  -  C84:	.db "GetSpriteChar", 0
  374 D1:C355 00 -  -  -  		.db 0
  375 D1:C356 -  -  -  -  TabData:
  376 D1:C356 D9 01 00 -  	.dl Tab1 - KeyHook_start
  377 D1:C359 6E 02 00 -  	.dl Tab2 - KeyHook_start
  378 D1:C35C 4C 03 00 -  	.dl Tab3 - KeyHook_start
  379 D1:C35F 13 04 00 -  	.dl Tab4 - KeyHook_start
  380 D1:C362 E2 04 00 -  	.dl Tab5 - KeyHook_start
  381 D1:C365 F1 05 00 -  	.dl Tab6 - KeyHook_start
  382 D1:C368 -  -  -  -  	
  383 D1:C368 -  -  -  -  CData5:
  384 D1:C368 03 02 00 -  	.dl C6 - KeyHook_start
  385 D1:C36B 09 02 00 -  	.dl C7 - KeyHook_start
  386 D1:C36E 0D 02 00 -  	.dl C8 - KeyHook_start
  387 D1:C371 16 02 00 -  	.dl C9 - KeyHook_start
  388 D1:C374 28 02 00 -  	.dl C10 - KeyHook_start
  389 D1:C377 33 02 00 -  	.dl C11 - KeyHook_start
  390 D1:C37A 3E 02 00 -  	.dl C12 - KeyHook_start
  391 D1:C37D 47 02 00 -  	.dl C13 - KeyHook_start
  392 D1:C380 50 02 00 -  	.dl C14 - KeyHook_start
  393 D1:C383 58 02 00 -  	.dl C15 - KeyHook_start
  394 D1:C386 60 02 00 -  	.dl C16 - KeyHook_start
  395 D1:C389 69 02 00 -  	.dl C17 - KeyHook_start
  396 D1:C38C 6E 02 00 -  	.dl C18 - KeyHook_start
  397 D1:C38F 78 02 00 -  	.dl C19 - KeyHook_start
  398 D1:C392 81 02 00 -  	.dl C20 - KeyHook_start
  399 D1:C395 8B 02 00 -  	.dl C21 - KeyHook_start
  400 D1:C398 94 02 00 -  	.dl C22 - KeyHook_start
  401 D1:C39B 9E 02 00 -  	.dl C23 - KeyHook_start
  402 D1:C39E AA 02 00 -  	.dl C24 - KeyHook_start
  403 D1:C3A1 B8 02 00 -  	.dl C25 - KeyHook_start
  404 D1:C3A4 C2 02 00 -  	.dl C26 - KeyHook_start
  405 D1:C3A7 D1 02 00 -  	.dl C27 - KeyHook_start
  406 D1:C3AA E0 02 00 -  	.dl C28 - KeyHook_start
  407 D1:C3AD F8 02 00 -  	.dl C29 - KeyHook_start
  408 D1:C3B0 0A 03 00 -  	.dl C30 - KeyHook_start
  409 D1:C3B3 1F 03 00 -  	.dl C31 - KeyHook_start
  410 D1:C3B6 30 03 00 -  	.dl C32 - KeyHook_start
  411 D1:C3B9 3F 03 00 -  	.dl C33 - KeyHook_start
  412 D1:C3BC 4C 03 00 -  	.dl C34 - KeyHook_start
  413 D1:C3BF 55 03 00 -  	.dl C35 - KeyHook_start
  414 D1:C3C2 5E 03 00 -  	.dl C36 - KeyHook_start
  415 D1:C3C5 63 03 00 -  	.dl C37 - KeyHook_start
  416 D1:C3C8 6D 03 00 -  	.dl C38 - KeyHook_start
  417 D1:C3CB 76 03 00 -  	.dl C39 - KeyHook_start
  418 D1:C3CE 7D 03 00 -  	.dl C40 - KeyHook_start
  419 D1:C3D1 88 03 00 -  	.dl C41 - KeyHook_start
  420 D1:C3D4 92 03 00 -  	.dl C42 - KeyHook_start
  421 D1:C3D7 A0 03 00 -  	.dl C43 - KeyHook_start
  422 D1:C3DA AC 03 00 -  	.dl C44 - KeyHook_start
  423 D1:C3DD BD 03 00 -  	.dl C45 - KeyHook_start
  424 D1:C3E0 CD 03 00 -  	.dl C46 - KeyHook_start
  425 D1:C3E3 DF 03 00 -  	.dl C47 - KeyHook_start
  426 D1:C3E6 F0 03 00 -  	.dl C48 - KeyHook_start
  427 D1:C3E9 05 04 00 -  	.dl C49 - KeyHook_start
  428 D1:C3EC 13 04 00 -  	.dl C50 - KeyHook_start
  429 D1:C3EF 21 04 00 -  	.dl C51 - KeyHook_start
  430 D1:C3F2 2B 04 00 -  	.dl C52 - KeyHook_start
  431 D1:C3F5 33 04 00 -  	.dl C53 - KeyHook_start
  432 D1:C3F8 3D 04 00 -  	.dl C54 - KeyHook_start
  433 D1:C3FB 48 04 00 -  	.dl C55 - KeyHook_start
  434 D1:C3FE 50 04 00 -  	.dl C56 - KeyHook_start
  435 D1:C401 5F 04 00 -  	.dl C57 - KeyHook_start
  436 D1:C404 72 04 00 -  	.dl C58 - KeyHook_start
  437 D1:C407 8C 04 00 -  	.dl C59 - KeyHook_start
  438 D1:C40A 94 04 00 -  	.dl C60 - KeyHook_start
  439 D1:C40D A2 04 00 -  	.dl C61 - KeyHook_start
  440 D1:C410 AF 04 00 -  	.dl C62 - KeyHook_start
  441 D1:C413 BB 04 00 -  	.dl C63 - KeyHook_start
  442 D1:C416 C2 04 00 -  	.dl C64 - KeyHook_start
  443 D1:C419 D4 04 00 -  	.dl C65 - KeyHook_start
  444 D1:C41C E2 04 00 -  	.dl C66 - KeyHook_start
  445 D1:C41F FB 04 00 -  	.dl C67 - KeyHook_start
  446 D1:C422 0C 05 00 -  	.dl C68 - KeyHook_start
  447 D1:C425 20 05 00 -  	.dl C69 - KeyHook_start
  448 D1:C428 3F 05 00 -  	.dl C70 - KeyHook_start
  449 D1:C42B 4B 05 00 -  	.dl C71 - KeyHook_start
  450 D1:C42E 57 05 00 -  	.dl C72 - KeyHook_start
  451 D1:C431 65 05 00 -  	.dl C73 - KeyHook_start
  452 D1:C434 74 05 00 -  	.dl C74 - KeyHook_start
  453 D1:C437 85 05 00 -  	.dl C75 - KeyHook_start
  454 D1:C43A 8D 05 00 -  	.dl C76 - KeyHook_start
  455 D1:C43D 9C 05 00 -  	.dl C77 - KeyHook_start
  456 D1:C440 A9 05 00 -  	.dl C78 - KeyHook_start
  457 D1:C443 BD 05 00 -  	.dl C79 - KeyHook_start
  458 D1:C446 D0 05 00 -  	.dl C80 - KeyHook_start
  459 D1:C449 DD 05 00 -  	.dl C81 - KeyHook_start
  460 D1:C44C F1 05 00 -  	.dl C82 - KeyHook_start
  461 D1:C44F FC 05 00 -  	.dl C83 - KeyHook_start
  462 D1:C452 0A 06 00 -  	.dl C84 - KeyHook_start
  463 D1:C455 -  -  -  -  	
  464 D1:C455 -  -  -  -  #define AMOUNT_OF_CUSTOM_TOKENS 4
  465 D1:C455 08 45 78 65 
              63 48 65 78 
              28 00 -  -  Token1: .db 8,  "ExecHex(", 0
  466 D1:C45F 0D 44 65 66 
              69 6E 65 53 
              70 72 69 74 
              65 28 00 -  Token2: .db 13, "DefineSprite(", 0
  467 D1:C46E 05 43 61 6C 
              6C 20 00 -  Token3: .db 5,  "Call ", 0
  468 D1:C475 0C 43 6F 6D 
              70 69 6C 65 
              50 72 67 6D 
              28 00 -  -  Token4: .db 12, "CompilePrgm(", 0
  469 D1:C483 -  -  -  -  CustomTokensProgramText:
  470 D1:C483 50 52 4F 47 
              52 41 4D 3A 
              00 -  -  -  	.db "PROGRAM:", 0
  471 D1:C48C -  -  -  -  KeyHook_end:
  472 D1:C48C -  -  -  -  
  473 D1:C48C -  -  -  -  TokenHook_start:
  474 D1:C48C 83 -  -  -  	.db 83h
  475 D1:C48D 7A -  -  -  	ld a, d
  476 D1:C48E FE 04 -  -  	cp 4
  477 D1:C490 C0 -  -  -  	ret nz
  478 D1:C491 7B -  -  -  	ld a, e
  479 D1:C492 FE 14 -  -  	cp 5+3+(AMOUNT_OF_CUSTOM_TOKENS*3)
  480 D1:C494 D0 -  -  -  	ret nc
  481 D1:C495 D6 05 -  -  	sub 5
  482 D1:C497 ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
  483 D1:C49C 21 6E 07 00 	ld hl, TokenHook_data - KeyHook_start
  484 D1:C4A0 19 -  -  -  	add hl, de
  485 D1:C4A1 01 00 00 00 	ld bc, 0
  486 D1:C4A5 4F -  -  -  	ld c, a
  487 D1:C4A6 09 -  -  -  	add hl, bc
  488 D1:C4A7 ED 27 -  -  	ld hl, (hl)
  489 D1:C4A9 19 -  -  -  	add hl, de
  490 D1:C4AA C9 -  -  -  	ret
  491 D1:C4AB -  -  -  -  TokenHook_data:
  492 D1:C4AB 17 07 00 -  	.dl Token1 - KeyHook_start - 1
  493 D1:C4AE 21 07 00 -  	.dl Token2 - KeyHook_start - 1
  494 D1:C4B1 30 07 00 -  	.dl Token3 - KeyHook_start - 1
  495 D1:C4B4 37 07 00 -  	.dl Token4 - KeyHook_start - 1
  496 D1:C4B7 -  -  -  -  TokenHook_end:
  497 D1:C4B7 -  -  -  -  
  498 D1:C4B7 -  -  -  -  CursorHook_start:
  499 D1:C4B7 83 -  -  -  	.db 83h
  500 D1:C4B8 FE 24 -  -  	cp 24h
  501 D1:C4BA 20 06 -  -  	jr nz, +_
  502 D1:C4BC 3C -  -  -  	inc a
  503 D1:C4BD 3A 99 05 D0 	ld a, (curUnder)
  504 D1:C4C1 C9 -  -  -  	ret
  505 D1:C4C2 FE 22 -  -  _:	cp 22h
  506 D1:C4C4 C0 -  -  -  	ret nz
  507 D1:C4C5 3A E0 07 D0 	ld a, (cxCurApp)
  508 D1:C4C9 FE 46 -  -  	cp cxPrgmEdit
  509 D1:C4CB C0 -  -  -  	ret nz
  510 D1:C4CC 2A 3A 24 D0 	ld hl, (editCursor)
  511 D1:C4D0 7E -  -  -  	ld a, (hl)
  512 D1:C4D1 FE B3 -  -  	cp tDet
  513 D1:C4D3 C0 -  -  -  	ret nz
  514 D1:C4D4 -  -  -  -  DrawDetText:
  515 D1:C4D4 FD CB B0 46 	bit displayed_det, (iy+fAlways1)
  516 D1:C4D8 C0 -  -  -  	ret nz
  517 D1:C4D9 2A 3D 24 D0 	ld hl, (editTail)
  518 D1:C4DD 23 -  -  -  	inc hl
  519 D1:C4DE 7E -  -  -  	ld a, (hl)
  520 D1:C4DF D6 30 -  -  	sub t0
  521 D1:C4E1 D8 -  -  -  	ret c
  522 D1:C4E2 FE 0A -  -  	cp t9-t0+1
  523 D1:C4E4 ED 4B 40 24 
              D0 -  -  -  	ld bc, (editBtm)
  524 D1:C4E9 11 00 00 00 	ld de, 0
  525 D1:C4ED 5F -  -  -  	ld e, a
  526 D1:C4EE 38 02 -  -  	jr c, GetDetValueLoop
  527 D1:C4F0 -  -  -  -  WrongDetValue:
  528 D1:C4F0 3C -  -  -  	inc a
  529 D1:C4F1 C9 -  -  -  	ret
  530 D1:C4F2 -  -  -  -  GetDetValueLoop:
  531 D1:C4F2 23 -  -  -  	inc hl
  532 D1:C4F3 B7 -  -  -  	or a
  533 D1:C4F4 ED 42 -  -  	sbc hl, bc
  534 D1:C4F6 28 1C -  -  	jr z, GetDetValueStop
  535 D1:C4F8 09 -  -  -  	add hl, bc
  536 D1:C4F9 7E -  -  -  	ld a, (hl)
  537 D1:C4FA D6 30 -  -  	sub t0
  538 D1:C4FC 38 16 -  -  	jr c, GetDetValueStop
  539 D1:C4FE FE 0A -  -  	cp t9-t0+1
  540 D1:C500 30 12 -  -  	jr nc, GetDetValueStop
  541 D1:C502 E5 -  -  -  	push hl
  542 D1:C503 EB -  -  -  		ex de, hl
  543 D1:C504 29 -  -  -  		add hl, hl
  544 D1:C505 E5 -  -  -  		push hl
  545 D1:C506 D1 -  -  -  		pop de
  546 D1:C507 29 -  -  -  		add hl, hl
  547 D1:C508 29 -  -  -  		add hl, hl
  548 D1:C509 19 -  -  -  		add hl, de
  549 D1:C50A 11 00 00 00 		ld de, 0
  550 D1:C50E 5F -  -  -  		ld e, a
  551 D1:C50F 19 -  -  -  		add hl, de
  552 D1:C510 EB -  -  -  		ex de, hl
  553 D1:C511 E1 -  -  -  	pop hl
  554 D1:C512 18 DE -  -  	jr GetDetValueLoop
  555 D1:C514 -  -  -  -  GetDetValueStop:
  556 D1:C514 EB -  -  -  	ex de, hl
  557 D1:C515 11 4F 00 00 	ld de, AMOUNT_OF_C_FUNCTIONS
  558 D1:C519 B7 -  -  -  	or a
  559 D1:C51A ED 52 -  -  	sbc hl, de
  560 D1:C51C 30 D2 -  -  	jr nc, WrongDetValue
  561 D1:C51E 19 -  -  -  	add hl, de
  562 D1:C51F 26 03 -  -  	ld h, 3
  563 D1:C521 ED 6C -  -  	mlt hl
  564 D1:C523 11 2B 06 00 	ld de, CData5 - KeyHook_start
  565 D1:C527 19 -  -  -  	add hl, de
  566 D1:C528 ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
  567 D1:C52D 19 -  -  -  	add hl, de
  568 D1:C52E ED 27 -  -  	ld hl, (hl)
  569 D1:C530 19 -  -  -  	add hl, de
  570 D1:C531 11 1C E7 00 	ld de, 000E71Ch
  571 D1:C535 40 ED 53 AC 
              26 -  -  -  	ld.sis (drawFGColor - 0D00000h), de
  572 D1:C53A 40 ED 5B CC 
              2A -  -  -  	ld.sis de, (statusBarBGColor - 0D00000h)
  573 D1:C53F 40 ED 53 AA 
              26 -  -  -  	ld.sis (drawBGColor - 0D00000h), de
  574 D1:C544 3E 0E -  -  	ld a, 14
  575 D1:C546 32 D5 08 D0 	ld (penRow),a
  576 D1:C54A 11 02 00 00 	ld de, 2
  577 D1:C54E 40 ED 53 D2 
              08 -  -  -  	ld.sis (penCol - 0D00000h), de
  578 D1:C553 CD 34 08 02 	call _VPutS
  579 D1:C557 11 FF FF 00 	ld de, $FFFF
  580 D1:C55B 40 ED 53 AA 
              26 -  -  -  	ld.sis (drawBGColor - 0D00000h), de
  581 D1:C560 FD CB B0 C6 	set displayed_det, (iy+fAlways1)
  582 D1:C564 C9 -  -  -  	ret
  583 D1:C565 -  -  -  -  CursorHook_end:
  584 D1:C565 -  -  -  -  
  585 D1:C565 -  -  -  -  Hooks_end:
Listing for file "ice.asm"
  446 D1:C565 -  -  -  -  #include "operators functions/functions.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\functions.asm"
    1 D1:C565 -  -  -  -  ExecuteFunction:
    2 D1:C565 E5 -  -  -  	push hl
    3 D1:C566 21 F6 E8 D1 		ld hl, FunctionsWithReturnValueArguments
    4 D1:C56A 01 07 00 00 		ld bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValueArguments
    5 D1:C56E ED B1 -  -  		cpir
    6 D1:C570 06 03 -  -  		ld b, 3
    7 D1:C572 ED 4C -  -  		mlt bc
    8 D1:C574 21 FD E8 D1 		ld hl, FunctionsWithReturnValueStart
    9 D1:C578 09 -  -  -  		add hl, bc
   10 D1:C579 ED 27 -  -  		ld hl, (hl)
   11 D1:C57B 22 81 C5 D1 		ld (JumpFunction), hl
   12 D1:C57F E1 -  -  -  	pop hl
   13 D1:C580 -  -  -  -  JumpFunction = $+1
   14 D1:C580 C3 00 00 00 	jp 0
   15 D1:C584 -  -  -  -  	
   16 D1:C584 -  -  -  -  functionPrgm:
   17 D1:C584 CD 97 AC D1 	call MaybeInsertIYFlags
   18 D1:C588 3E 21 -  -  	ld a, 021h
   19 D1:C58A CD 0E AD D1 	call InsertA															; ld hl, *
   20 D1:C58E CD 25 AD D1 	call InsertProgramPtrToDataOffset
   21 D1:C592 2A 5E EA D1 	ld hl, (programDataDataPtr)
   22 D1:C596 E5 -  -  -  	push hl
   23 D1:C597 CD 50 AC D1 		call InsertHL														; ld hl, programname
   24 D1:C59B E1 -  -  -  	pop hl
   25 D1:C59C 36 05 -  -  	ld (hl), ProgObj
   26 D1:C59E CD 2F B2 D1 	call GetProgramName
   27 D1:C5A2 23 -  -  -  	inc hl
   28 D1:C5A3 22 5E EA D1 	ld (programDataDataPtr), hl
   29 D1:C5A7 3E CD -  -  	ld a, 0CDh
   30 D1:C5A9 21 20 03 02 	ld hl, _Mov9ToOP1
   31 D1:C5AD CD 4C AC D1 	call InsertAHL															; call _Mov9ToOP1
   32 D1:C5B1 3E FD -  -  	ld a, 0FDh
   33 D1:C5B3 21 CB 08 CE 	ld hl, 0CE08CBh
   34 D1:C5B7 CD 4C AC D1 	call InsertAHL															; set 1, (iy+8)
   35 D1:C5BB 3E CD -  -  	ld a, 0CDh
   36 D1:C5BD 21 00 0F 02 	ld hl, _ParseInp
   37 D1:C5C1 CD 4C AC D1 	call InsertAHL															; call _ParseInp
   38 D1:C5C5 3E FD -  -  	ld a, 0FDh
   39 D1:C5C7 21 CB 08 8E 	ld hl, 08E08CBh
   40 D1:C5CB C3 4C AC D1 	jp InsertAHL															; res 1, (iy+8)
   41 D1:C5CF -  -  -  -  	
   42 D1:C5CF -  -  -  -  
   43 D1:C5CF -  -  -  -  functionOutput:
   44 D1:C5CF CD 97 AC D1 	call MaybeInsertIYFlags
   45 D1:C5D3 3E 01 -  -  	ld a, 1
   46 D1:C5D5 32 63 EA D1 	ld (openedParensF), a
   47 D1:C5D9 CD 28 10 02 	call _IncFetch
   48 D1:C5DD CD C6 B2 D1 	call ParseExpression
   49 D1:C5E1 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   50 D1:C5E5 FD CB BE 86 	res triggered_a_comma, (iy+fExpression3)
   51 D1:C5E9 CA 3A AF D1 	jp z, ErrorSyntax
   52 D1:C5ED FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   53 D1:C5F1 20 08 -  -  	jr nz, OutputRowIsNumber
   54 D1:C5F3 -  -  -  -  OutputRowIsVariable:
   55 D1:C5F3 3E 7D -  -  	ld a, 07Dh
   56 D1:C5F5 CD 0E AD D1 	call InsertA															; ld a, l
   57 D1:C5F9 18 0E -  -  	jr +_
   58 D1:C5FB -  -  -  -  OutputRowIsNumber:
   59 D1:C5FB 2A 49 EA D1 	ld hl, (programPtr)
   60 D1:C5FF 2B -  -  -  	dec hl
   61 D1:C600 2B -  -  -  	dec hl
   62 D1:C601 22 49 EA D1 	ld (programPtr), hl
   63 D1:C605 2B -  -  -  	dec hl
   64 D1:C606 2B -  -  -  	dec hl
   65 D1:C607 36 3E -  -  	ld (hl), 03Eh															; ld a, *
   66 D1:C609 3E 32 -  -  _:	ld a, 032h
   67 D1:C60B 21 95 05 D0 	ld hl, curRow
   68 D1:C60F CD 4C AC D1 	call InsertAHL															; ld (curRow), a
   69 D1:C613 CD 28 10 02 	call _IncFetch
   70 D1:C617 CD C6 B2 D1 	call ParseExpression
   71 D1:C61B FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   72 D1:C61F FD CB BE 86 	res triggered_a_comma, (iy+fExpression3)
   73 D1:C623 CA 3A AF D1 	jp z, ErrorSyntax
   74 D1:C627 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   75 D1:C62B 20 08 -  -  	jr nz, OutputColumnIsNumber
   76 D1:C62D -  -  -  -  OutputColumnIsVariable:
   77 D1:C62D 3E 7D -  -  	ld a, 07Dh
   78 D1:C62F CD 0E AD D1 	call InsertA															; ld a, l
   79 D1:C633 18 0E -  -  	jr +_
   80 D1:C635 -  -  -  -  OutputColumnIsNumber:
   81 D1:C635 2A 49 EA D1 	ld hl, (programPtr)
   82 D1:C639 2B -  -  -  	dec hl
   83 D1:C63A 2B -  -  -  	dec hl
   84 D1:C63B 22 49 EA D1 	ld (programPtr), hl
   85 D1:C63F 2B -  -  -  	dec hl
   86 D1:C640 2B -  -  -  	dec hl
   87 D1:C641 36 3E -  -  	ld (hl), 03Eh															; ld a, *
   88 D1:C643 3E 32 -  -  _:	ld a, 032h
   89 D1:C645 21 96 05 D0 	ld hl, curCol
   90 D1:C649 CD 4C AC D1 	call InsertAHL															; ld (curCol), a
   91 D1:C64D F6 01 -  -  	or a, 1																	; rest zero flag
   92 D1:C64F CD 6A C6 D1 	call DisplayNumberOrString
   93 D1:C653 C2 3A AF D1 	jp nz, ErrorSyntax
   94 D1:C657 C9 -  -  -  	ret
   95 D1:C658 -  -  -  -  	
   96 D1:C658 -  -  -  -  functionDisp:
   97 D1:C658 CD 97 AC D1 	call MaybeInsertIYFlags
   98 D1:C65C 3E 01 -  -  	ld a, 1
   99 D1:C65E 32 63 EA D1 	ld (openedParensF), a
  100 D1:C662 3D -  -  -  	dec a																	; set zero flag
  101 D1:C663 CD 6A C6 D1 	call DisplayNumberOrString
  102 D1:C667 C8 -  -  -  	ret z
  103 D1:C668 18 EE -  -  	jr functionDisp
  104 D1:C66A -  -  -  -  	
  105 D1:C66A -  -  -  -  DisplayNumberOrString:
  106 D1:C66A F5 -  -  -  	push af
  107 D1:C66B CD 28 10 02 		call _IncFetch
  108 D1:C66F CD C6 B2 D1 		call ParseExpression
  109 D1:C673 ED 5B 49 EA 
              D1 -  -  -  		ld de, (programPtr)
  110 D1:C678 01 0E 00 00 		ld bc, 14
  111 D1:C67C FD CB C0 7E 		bit output_is_string, (iy+fExpression1)
  112 D1:C680 20 0F -  -  		jr nz, DispString
  113 D1:C682 21 7C EE D1 		ld hl, DispNumberRoutine
  114 D1:C686 F1 -  -  -  	pop af
  115 D1:C687 28 16 -  -  	jr z, +_
  116 D1:C689 21 76 EE D1 	ld hl, DispNumberRoutine-6
  117 D1:C68D 0E 08 -  -  	ld c, 8
  118 D1:C68F 18 0E -  -  	jr +_
  119 D1:C691 -  -  -  -  DispString:
  120 D1:C691 21 8A EE D1 		ld hl, DispStringRoutine
  121 D1:C695 0B -  -  -  		dec bc
  122 D1:C696 F1 -  -  -  	pop af
  123 D1:C697 28 06 -  -  	jr z, +_
  124 D1:C699 21 8F EE D1 	ld hl, DispStringRoutine+5
  125 D1:C69D 0E 08 -  -  	ld c, 8
  126 D1:C69F ED B0 -  -  _:	ldir
  127 D1:C6A1 ED 53 49 EA 
              D1 -  -  -  	ld (programPtr), de
  128 D1:C6A6 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
  129 D1:C6AA C9 -  -  -  	ret
  130 D1:C6AB -  -  -  -  	
  131 D1:C6AB -  -  -  -  	
  132 D1:C6AB -  -  -  -  functionLbl:
  133 D1:C6AB DD 2A 4F EA 
              D1 -  -  -  	ld ix, (labelPtr)
  134 D1:C6B0 2A 49 EA D1 	ld hl, (programPtr)
  135 D1:C6B4 DD 2F 00 -  	ld (ix), hl
  136 D1:C6B7 2A 1A 23 D0 	ld hl, (curPC)
  137 D1:C6BB 23 -  -  -  	inc hl
  138 D1:C6BC DD 2F 03 -  	ld (ix+3), hl
  139 D1:C6BF ED 22 06 -  	lea hl, ix+6
  140 D1:C6C2 22 4F EA D1 	ld (labelPtr), hl
  141 D1:C6C6 -  -  -  -  functionSkipLine:
  142 D1:C6C6 2A 1D 23 D0 	ld hl, (endPC)
  143 D1:C6CA ED 5B 1A 23 
              D0 -  -  -  	ld de, (curPC)
  144 D1:C6CF B7 -  -  -  	or a
  145 D1:C6D0 ED 52 -  -  	sbc hl, de
  146 D1:C6D2 D8 -  -  -  	ret c
  147 D1:C6D3 23 -  -  -  	inc hl
  148 D1:C6D4 E5 -  -  -  	push hl
  149 D1:C6D5 C1 -  -  -  	pop bc
  150 D1:C6D6 EB -  -  -  	ex de, hl
  151 D1:C6D7 3E 3F -  -  	ld a, tEnter
  152 D1:C6D9 ED B1 -  -  	cpir
  153 D1:C6DB 2B -  -  -  	dec hl
  154 D1:C6DC 22 1A 23 D0 	ld (curPC), hl
  155 D1:C6E0 C9 -  -  -  	ret
  156 D1:C6E1 -  -  -  -  	
  157 D1:C6E1 -  -  -  -  functionCall:
  158 D1:C6E1 3E CD -  -  	ld a, 0CDh
  159 D1:C6E3 18 02 -  -  	jr $+4
  160 D1:C6E5 -  -  -  -  functionGoto:
  161 D1:C6E5 3E C3 -  -  	ld a, 0C3h
  162 D1:C6E7 CD 0E AD D1 	call InsertA															; jp/call ******
  163 D1:C6EB DD 2A 52 EA 
              D1 -  -  -  	ld ix, (gotoPtr)
  164 D1:C6F0 2A 49 EA D1 	ld hl, (programPtr)
  165 D1:C6F4 DD 2F 00 -  	ld (ix), hl
  166 D1:C6F7 2A 1A 23 D0 	ld hl, (curPC)
  167 D1:C6FB 23 -  -  -  	inc hl
  168 D1:C6FC DD 2F 03 -  	ld (ix+3), hl
  169 D1:C6FF ED 22 06 -  	lea hl, ix+6
  170 D1:C702 22 52 EA D1 	ld (gotoPtr), hl
  171 D1:C706 CD 50 AC D1 	call InsertHL															; jp/call RANDOM
  172 D1:C70A 18 BA -  -  	jr functionSkipLine
  173 D1:C70C -  -  -  -  	
  174 D1:C70C -  -  -  -  functionReturn:
  175 D1:C70C CD C0 0F 02 	call _NxtFetch
  176 D1:C710 30 04 -  -  	jr nc, +_
  177 D1:C712 FD CB C0 D6 	set last_token_is_ret, (iy+fExpression1)
  178 D1:C716 FE CE -  -  _:	cp tIf
  179 D1:C718 20 1C -  -  	jr nz, +_
  180 D1:C71A CD 28 10 02 	call _IncFetch
  181 D1:C71E CD 28 10 02 	call _IncFetch
  182 D1:C722 CD C6 B2 D1 	call ParseExpression
  183 D1:C726 3E 19 -  -  	ld a, 019h
  184 D1:C728 CD 0E AD D1 	call InsertA															; add hl, de
  185 D1:C72C 3E B7 -  -  	ld a, 0B7h
  186 D1:C72E 21 ED 52 C0 	ld hl, 0C052EDh
  187 D1:C732 C3 4C AC D1 	jp InsertAHL															; or a \ sbc hl, de \ ret nz
  188 D1:C736 3E C9 -  -  _:	ld a, 0C9h
  189 D1:C738 C3 0E AD D1 	jp InsertA																; ret
  190 D1:C73C -  -  -  -  		
  191 D1:C73C -  -  -  -  functionRepeat:
  192 D1:C73C 21 66 EA D1 	ld hl, amountOfEnds
  193 D1:C740 34 -  -  -  	inc (hl)
  194 D1:C741 2A 49 EA D1 	ld hl, (programPtr)
  195 D1:C745 11 81 7C FC 	ld de, UserMem - program
  196 D1:C749 19 -  -  -  	add hl, de
  197 D1:C74A E5 -  -  -  	push hl
  198 D1:C74B 2A 1A 23 D0 		ld hl, (curPC)
  199 D1:C74F 23 -  -  -  		inc hl
  200 D1:C750 E5 -  -  -  		push hl
  201 D1:C751 CD 28 10 02 _:			call _IncFetch
  202 D1:C755 DA 3A AF D1 			jp c, ErrorSyntax
  203 D1:C759 FE 3F -  -  			cp tEnter
  204 D1:C75B 20 F4 -  -  			jr nz, -_
  205 D1:C75D CD 99 AA D1 			call ParseProgramUntilEnd
  206 D1:C761 FE D0 -  -  			cp tElse
  207 D1:C763 CA 3A AF D1 			jp z, ErrorSyntax
  208 D1:C767 ED 5B 1A 23 
              D0 -  -  -  			ld de, (curPC)
  209 D1:C76C E1 -  -  -  		pop hl
  210 D1:C76D 22 1A 23 D0 		ld (curPC), hl
  211 D1:C771 D5 -  -  -  		push de
  212 D1:C772 CD C6 B2 D1 			call ParseExpression
  213 D1:C776 D1 -  -  -  		pop de
  214 D1:C777 ED 53 1A 23 
              D0 -  -  -  		ld (curPC), de
  215 D1:C77C FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  216 D1:C780 C2 06 C8 D1 		jp nz, functionRepeatInfinite
  217 D1:C784 FD CB C0 6E 		bit ans_set_z_flag, (iy+fExpression1)
  218 D1:C788 28 14 -  -  		jr z, +_
  219 D1:C78A 2A 49 EA D1 		ld hl, (programPtr)
  220 D1:C78E 2B -  -  -  		dec hl
  221 D1:C78F 2B -  -  -  		dec hl
  222 D1:C790 2B -  -  -  		dec hl
  223 D1:C791 7E -  -  -  		ld a, (hl)
  224 D1:C792 DD 67 -  -  		ld ixh, a
  225 D1:C794 2B -  -  -  		dec hl
  226 D1:C795 2B -  -  -  		dec hl
  227 D1:C796 2B -  -  -  		dec hl
  228 D1:C797 2B -  -  -  		dec hl
  229 D1:C798 22 49 EA D1 		ld (programPtr), hl
  230 D1:C79C 18 1D -  -  		jr functionRepeatInsert
  231 D1:C79E FD CB BF 4E _:		bit last_token_was_not, (iy+fExpression2)
  232 D1:C7A2 28 0D -  -  		jr z, InsertNormalRepeat2
  233 D1:C7A4 2A 49 EA D1 		ld hl, (programPtr)
  234 D1:C7A8 11 F8 FF FF 		ld de, -8
  235 D1:C7AC 19 -  -  -  		add hl, de
  236 D1:C7AD 22 49 EA D1 		ld (programPtr), hl
  237 D1:C7B1 -  -  -  -  InsertNormalRepeat2:
  238 D1:C7B1 3E 19 -  -  		ld a, 019h
  239 D1:C7B3 21 B7 ED 52 		ld hl, 052EDB7h
  240 D1:C7B7 CD 4C AC D1 		call InsertAHL														; add hl, de \ or a \ sbc hl, de
  241 D1:C7BB -  -  -  -  functionRepeatInsert:
  242 D1:C7BB 01 81 7C FC 		ld bc, UserMem - program
  243 D1:C7BF 09 -  -  -  		add hl, bc
  244 D1:C7C0 D1 -  -  -  	pop de
  245 D1:C7C1 B7 -  -  -  	or a
  246 D1:C7C2 ED 52 -  -  	sbc hl, de
  247 D1:C7C4 7C -  -  -  	ld a, h
  248 D1:C7C5 B7 -  -  -  	or a
  249 D1:C7C6 20 23 -  -  	jr nz, functionRepeatLarge
  250 D1:C7C8 7D -  -  -  	ld a, l
  251 D1:C7C9 2F -  -  -  	cpl
  252 D1:C7CA 3D -  -  -  	dec a
  253 D1:C7CB FE 80 -  -  	cp %10000000
  254 D1:C7CD 38 1C -  -  	jr c, functionRepeatLarge
  255 D1:C7CF -  -  -  -  functionRepeatSmall:
  256 D1:C7CF 47 -  -  -  	ld b, a
  257 D1:C7D0 3E 28 -  -  	ld a, 028h
  258 D1:C7D2 FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  259 D1:C7D6 28 02 -  -  	jr z, +_
  260 D1:C7D8 DD 7C -  -  	ld a, ixh
  261 D1:C7DA FD CB BF 4E _:	bit last_token_was_not, (iy+fExpression2)
  262 D1:C7DE 28 02 -  -  	jr z, $+4
  263 D1:C7E0 EE 08 -  -  	xor 8
  264 D1:C7E2 CD 0E AD D1 	call InsertA															; jr [n]z, *
  265 D1:C7E6 78 -  -  -  	ld a, b
  266 D1:C7E7 C3 0E AD D1 	jp InsertA																; jr [n]z, *
  267 D1:C7EB -  -  -  -  functionRepeatLarge:
  268 D1:C7EB EB -  -  -  	ex de, hl
  269 D1:C7EC FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  270 D1:C7F0 28 06 -  -  	jr z, +_
  271 D1:C7F2 DD 7C -  -  	ld a, ixh
  272 D1:C7F4 C6 A2 -  -  	add a, 0A2h
  273 D1:C7F6 18 02 -  -  	jr ++_
  274 D1:C7F8 3E CA -  -  _:	ld a, 0CAh
  275 D1:C7FA FD CB BF 4E _:	bit last_token_was_not, (iy+fExpression2)
  276 D1:C7FE 28 02 -  -  	jr z, $+4
  277 D1:C800 EE 08 -  -  	xor 8
  278 D1:C802 C3 4C AC D1 	jp InsertAHL															; jp [n]z, XXXXXX
  279 D1:C806 -  -  -  -  functionRepeatInfinite:
  280 D1:C806 2A 49 EA D1 		ld hl, (programPtr)
  281 D1:C80A 2B -  -  -  		dec hl
  282 D1:C80B 2B -  -  -  		dec hl
  283 D1:C80C 2B -  -  -  		dec hl
  284 D1:C80D 2B -  -  -  		dec hl
  285 D1:C80E 22 49 EA D1 		ld (programPtr), hl
  286 D1:C812 E5 -  -  -  		push hl
  287 D1:C813 23 -  -  -  			inc hl
  288 D1:C814 ED 27 -  -  			ld hl, (hl)
  289 D1:C816 19 -  -  -  			add hl, de
  290 D1:C817 B7 -  -  -  			or a
  291 D1:C818 ED 52 -  -  			sbc hl, de
  292 D1:C81A E1 -  -  -  		pop hl
  293 D1:C81B C0 -  -  -  		ret nz
  294 D1:C81C 11 81 7C FC 		ld de, UserMem - program
  295 D1:C820 19 -  -  -  		add hl, de
  296 D1:C821 D1 -  -  -  	pop de
  297 D1:C822 B7 -  -  -  	or a
  298 D1:C823 ED 52 -  -  	sbc hl, de
  299 D1:C825 7C -  -  -  	ld a, h
  300 D1:C826 B7 -  -  -  	or a
  301 D1:C827 20 13 -  -  	jr nz, functionRepeatInfiniteLarge
  302 D1:C829 7D -  -  -  	ld a, l
  303 D1:C82A 2F -  -  -  	cpl
  304 D1:C82B 3D -  -  -  	dec a
  305 D1:C82C FE 80 -  -  	cp %10000000
  306 D1:C82E 38 0C -  -  	jr c, functionRepeatInfiniteLarge
  307 D1:C830 -  -  -  -  functionRepeatInfiniteSmall:
  308 D1:C830 47 -  -  -  	ld b, a
  309 D1:C831 3E 18 -  -  	ld a, 018h
  310 D1:C833 CD 0E AD D1 	call InsertA															; jr *
  311 D1:C837 78 -  -  -  	ld a, b
  312 D1:C838 C3 0E AD D1 	jp InsertA																; jr *
  313 D1:C83C -  -  -  -  functionRepeatInfiniteLarge:
  314 D1:C83C EB -  -  -  	ex de, hl
  315 D1:C83D 3E C3 -  -  	ld a, 0C3h
  316 D1:C83F C3 4C AC D1 	jp InsertAHL															; jp XXXXXX
  317 D1:C843 -  -  -  -  
  318 D1:C843 -  -  -  -  functionIf:
  319 D1:C843 37 -  -  -  	scf
  320 D1:C844 ED 62 -  -  	sbc hl, hl
  321 D1:C846 36 02 -  -  	ld (hl), 2
  322 D1:C848 21 66 EA D1 	ld hl, amountOfEnds
  323 D1:C84C 34 -  -  -  	inc (hl)
  324 D1:C84D CD 28 10 02 	call _IncFetch
  325 D1:C851 CD C6 B2 D1 	call ParseExpression
  326 D1:C855 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  327 D1:C859 C2 EA C8 D1 	jp nz, functionIfInfinite
  328 D1:C85D FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  329 D1:C861 28 14 -  -  	jr z, InsertNormalIf
  330 D1:C863 2A 49 EA D1 	ld hl, (programPtr)
  331 D1:C867 2B -  -  -  	dec hl
  332 D1:C868 2B -  -  -  	dec hl
  333 D1:C869 2B -  -  -  	dec hl
  334 D1:C86A 7E -  -  -  	ld a, (hl)
  335 D1:C86B C6 A2 -  -  	add a, 0A2h
  336 D1:C86D 2B -  -  -  	dec hl
  337 D1:C86E 2B -  -  -  	dec hl
  338 D1:C86F 2B -  -  -  	dec hl
  339 D1:C870 2B -  -  -  	dec hl
  340 D1:C871 22 49 EA D1 	ld (programPtr), hl
  341 D1:C875 18 27 -  -  	jr InsertIf
  342 D1:C877 -  -  -  -  InsertNormalIf:
  343 D1:C877 FD CB BF 4E 	bit last_token_was_not, (iy+fExpression2)
  344 D1:C87B 28 0D -  -  	jr z, InsertNormalIf2
  345 D1:C87D 2A 49 EA D1 	ld hl, (programPtr)
  346 D1:C881 11 F8 FF FF 	ld de, -8
  347 D1:C885 19 -  -  -  	add hl, de
  348 D1:C886 22 49 EA D1 	ld (programPtr), hl
  349 D1:C88A -  -  -  -  InsertNormalIf2:
  350 D1:C88A 3E 19 -  -  	ld a, 019h
  351 D1:C88C 21 B7 ED 52 	ld hl, 052EDB7h
  352 D1:C890 CD 4C AC D1 	call InsertAHL															; add hl, de \ or a \ sbc hl, de
  353 D1:C894 3E CA -  -  	ld a, 0CAh
  354 D1:C896 FD CB BF 4E 	bit last_token_was_not, (iy+fExpression2)
  355 D1:C89A 28 02 -  -  	jr z, InsertIf
  356 D1:C89C 3E C2 -  -  	ld a, 0C2h
  357 D1:C89E -  -  -  -  InsertIf:
  358 D1:C89E CD 0E AD D1 	call InsertA															; jp z, ******
  359 D1:C8A2 2A 49 EA D1 	ld hl, (programPtr)
  360 D1:C8A6 E5 -  -  -  	push hl
  361 D1:C8A7 CD 50 AC D1 		call InsertHL														; jp z, XXXXXX
  362 D1:C8AB CD 99 AA D1 		call ParseProgramUntilEnd
  363 D1:C8AF FE D0 -  -  		cp tElse
  364 D1:C8B1 20 29 -  -  		jr nz, +_
  365 D1:C8B3 21 66 EA D1 		ld hl, amountOfEnds
  366 D1:C8B7 34 -  -  -  		inc (hl)
  367 D1:C8B8 3E C3 -  -  		ld a, 0C3h
  368 D1:C8BA CD 0E AD D1 		call InsertA														; jp ******
  369 D1:C8BE ED 5B 49 EA 
              D1 -  -  -  		ld de, (programPtr)
  370 D1:C8C3 CD 50 AC D1 		call InsertHL														; jp XXXXXX
  371 D1:C8C7 01 81 7C FC 		ld bc, UserMem - program
  372 D1:C8CB 09 -  -  -  		add hl, bc
  373 D1:C8CC E5 -  -  -  		push hl
  374 D1:C8CD C1 -  -  -  		pop bc
  375 D1:C8CE E1 -  -  -  	pop hl
  376 D1:C8CF ED 0F -  -  	ld (hl), bc
  377 D1:C8D1 D5 -  -  -  	push de
  378 D1:C8D2 CD 99 AA D1 		call ParseProgramUntilEnd
  379 D1:C8D6 FE D0 -  -  		cp tElse
  380 D1:C8D8 CA 3A AF D1 		jp z, ErrorSyntax
  381 D1:C8DC 2A 49 EA D1 _:		ld hl, (programPtr)
  382 D1:C8E0 11 81 7C FC 		ld de, UserMem - program
  383 D1:C8E4 19 -  -  -  		add hl, de
  384 D1:C8E5 EB -  -  -  		ex de, hl
  385 D1:C8E6 E1 -  -  -  	pop hl
  386 D1:C8E7 ED 1F -  -  	ld (hl), de
  387 D1:C8E9 C9 -  -  -  	ret
  388 D1:C8EA -  -  -  -  functionIfInfinite:
  389 D1:C8EA 2A 49 EA D1 	ld hl, (programPtr)
  390 D1:C8EE 2B -  -  -  	dec hl
  391 D1:C8EF 2B -  -  -  	dec hl
  392 D1:C8F0 2B -  -  -  	dec hl
  393 D1:C8F1 2B -  -  -  	dec hl
  394 D1:C8F2 22 49 EA D1 	ld (programPtr), hl
  395 D1:C8F6 23 -  -  -  	inc hl
  396 D1:C8F7 ED 27 -  -  	ld hl, (hl)
  397 D1:C8F9 19 -  -  -  	add hl, de
  398 D1:C8FA B7 -  -  -  	or a
  399 D1:C8FB ED 52 -  -  	sbc hl, de
  400 D1:C8FD 28 1C -  -  	jr z, functionIfInfiniteFalse
  401 D1:C8FF CD 99 AA D1 	call ParseProgramUntilEnd
  402 D1:C903 FE D0 -  -  	cp tElse
  403 D1:C905 C0 -  -  -  	ret nz
  404 D1:C906 2A 49 EA D1 	ld hl, (programPtr)
  405 D1:C90A E5 -  -  -  	push hl
  406 D1:C90B CD 99 AA D1 		call ParseProgramUntilEnd
  407 D1:C90F FE D0 -  -  		cp tElse
  408 D1:C911 CA 3A AF D1 		jp z, ErrorSyntax
  409 D1:C915 E1 -  -  -  	pop hl
  410 D1:C916 22 49 EA D1 	ld (programPtr), hl
  411 D1:C91A C9 -  -  -  	ret
  412 D1:C91B -  -  -  -  functionIfInfiniteFalse:
  413 D1:C91B 2A 49 EA D1 	ld hl, (programPtr)
  414 D1:C91F E5 -  -  -  	push hl
  415 D1:C920 CD 99 AA D1 		call ParseProgramUntilEnd
  416 D1:C924 E1 -  -  -  	pop hl
  417 D1:C925 22 49 EA D1 	ld (programPtr), hl
  418 D1:C929 FE D0 -  -  	cp tElse
  419 D1:C92B C0 -  -  -  	ret nz
  420 D1:C92C CD 99 AA D1 	call ParseProgramUntilEnd
  421 D1:C930 FE D0 -  -  	cp tElse
  422 D1:C932 CA 3A AF D1 	jp z, ErrorSyntax
  423 D1:C936 C9 -  -  -  	ret
  424 D1:C937 -  -  -  -  	
  425 D1:C937 -  -  -  -  functionWhile:
  426 D1:C937 21 66 EA D1 	ld hl, amountOfEnds
  427 D1:C93B 34 -  -  -  	inc (hl)
  428 D1:C93C CD 28 10 02 	call _IncFetch
  429 D1:C940 DA 3A AF D1 	jp c, ErrorSyntax
  430 D1:C944 FE 3F -  -  	cp tEnter
  431 D1:C946 CA 3A AF D1 	jp z, ErrorSyntax
  432 D1:C94A 2A 49 EA D1 	ld hl, (programPtr)
  433 D1:C94E E5 -  -  -  	push hl
  434 D1:C94F CD C6 B2 D1 		call ParseExpression
  435 D1:C953 FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  436 D1:C957 20 6A -  -  		jr nz, functionWhileInfinite
  437 D1:C959 FD CB C0 6E 		bit ans_set_z_flag, (iy+fExpression1)
  438 D1:C95D 28 14 -  -  		jr z, +_
  439 D1:C95F 2A 49 EA D1 		ld hl, (programPtr)
  440 D1:C963 2B -  -  -  		dec hl
  441 D1:C964 2B -  -  -  		dec hl
  442 D1:C965 2B -  -  -  		dec hl
  443 D1:C966 7E -  -  -  		ld a, (hl)
  444 D1:C967 C6 A2 -  -  		add a, 0A2h
  445 D1:C969 2B -  -  -  		dec hl
  446 D1:C96A 2B -  -  -  		dec hl
  447 D1:C96B 2B -  -  -  		dec hl
  448 D1:C96C 2B -  -  -  		dec hl
  449 D1:C96D 22 49 EA D1 		ld (programPtr), hl
  450 D1:C971 18 1F -  -  		jr InsertNormalWhile
  451 D1:C973 FD CB BF 4E _:		bit last_token_was_not, (iy+fExpression2)
  452 D1:C977 28 0D -  -  		jr z, InsertNormalWhile2
  453 D1:C979 2A 49 EA D1 		ld hl, (programPtr)
  454 D1:C97D 11 F8 FF FF 		ld de, -8
  455 D1:C981 19 -  -  -  		add hl, de
  456 D1:C982 22 49 EA D1 		ld (programPtr), hl
  457 D1:C986 -  -  -  -  InsertNormalWhile2:
  458 D1:C986 3E 19 -  -  		ld a, 019h
  459 D1:C988 21 B7 ED 52 		ld hl, 052EDB7h
  460 D1:C98C CD 4C AC D1 		call InsertAHL														; add hl, de \ or a \ sbc hl, de
  461 D1:C990 3E CA -  -  		ld a, 0CAh
  462 D1:C992 -  -  -  -  InsertNormalWhile:
  463 D1:C992 FD CB BF 4E 		bit last_token_was_not, (iy+fExpression2)
  464 D1:C996 28 02 -  -  		jr z, $+4
  465 D1:C998 EE 08 -  -  		xor 8
  466 D1:C99A CD 0E AD D1 		call InsertA														; jp z, ******
  467 D1:C99E 2A 49 EA D1 		ld hl, (programPtr)
  468 D1:C9A2 E5 -  -  -  		push hl
  469 D1:C9A3 CD 50 AC D1 			call InsertHL													; jp z, ******
  470 D1:C9A7 CD 99 AA D1 			call ParseProgramUntilEnd
  471 D1:C9AB FE D0 -  -  			cp tElse
  472 D1:C9AD CA 3A AF D1 			jp z, ErrorSyntax
  473 D1:C9B1 3E C3 -  -  			ld a, 0C3h
  474 D1:C9B3 D1 -  -  -  		pop de
  475 D1:C9B4 E1 -  -  -  	pop hl
  476 D1:C9B5 01 81 7C FC 	ld bc, UserMem - program
  477 D1:C9B9 09 -  -  -  	add hl, bc
  478 D1:C9BA CD 4C AC D1 	call InsertAHL															; jp XXXXXX
  479 D1:C9BE 09 -  -  -  	add hl, bc
  480 D1:C9BF EB -  -  -  	ex de, hl
  481 D1:C9C0 ED 1F -  -  	ld (hl), de
  482 D1:C9C2 C9 -  -  -  	ret
  483 D1:C9C3 -  -  -  -  functionWhileInfinite:
  484 D1:C9C3 2A 49 EA D1 		ld hl, (programPtr)
  485 D1:C9C7 2B -  -  -  		dec hl
  486 D1:C9C8 2B -  -  -  		dec hl
  487 D1:C9C9 2B -  -  -  		dec hl
  488 D1:C9CA 2B -  -  -  		dec hl
  489 D1:C9CB 22 49 EA D1 		ld (programPtr), hl
  490 D1:C9CF 23 -  -  -  		inc hl
  491 D1:C9D0 ED 27 -  -  		ld hl, (hl)
  492 D1:C9D2 19 -  -  -  		add hl, de
  493 D1:C9D3 B7 -  -  -  		or a
  494 D1:C9D4 ED 52 -  -  		sbc hl, de
  495 D1:C9D6 28 16 -  -  		jr z, +_
  496 D1:C9D8 CD 99 AA D1 		call ParseProgramUntilEnd
  497 D1:C9DC FE D0 -  -  		cp tElse
  498 D1:C9DE CA 3A AF D1 		jp z, ErrorSyntax
  499 D1:C9E2 3E C3 -  -  		ld a, 0C3h
  500 D1:C9E4 E1 -  -  -  	pop hl
  501 D1:C9E5 01 81 7C FC 	ld bc, UserMem - program
  502 D1:C9E9 09 -  -  -  	add hl, bc
  503 D1:C9EA C3 4C AC D1 	jp InsertAHL															; jp XXXXXX
  504 D1:C9EE CD 99 AA D1 _:		call ParseProgramUntilEnd
  505 D1:C9F2 FE D0 -  -  		cp tElse
  506 D1:C9F4 CA 3A AF D1 		jp z, ErrorSyntax
  507 D1:C9F8 E1 -  -  -  	pop hl
  508 D1:C9F9 22 49 EA D1 	ld (programPtr), hl
  509 D1:C9FD C9 -  -  -  	ret
  510 D1:C9FE -  -  -  -  	
  511 D1:C9FE -  -  -  -  functionClrHome:
  512 D1:C9FE CD C0 0F 02 	call _NxtFetch
  513 D1:CA02 38 06 -  -  	jr c, +_
  514 D1:CA04 FE 3F -  -  	cp tEnter
  515 D1:CA06 C2 3A AF D1 	jp nz, ErrorSyntax
  516 D1:CA0A 21 28 08 02 _:	ld hl, _HomeUp
  517 D1:CA0E CD 61 AC D1 	call InsertCallHL														; call _HomeUp
  518 D1:CA12 21 08 08 02 	ld hl, _ClrLCDFull
  519 D1:CA16 C3 4C AC D1 	jp InsertAHL															; call _ClrLCDFull
  520 D1:CA1A -  -  -  -  	
  521 D1:CA1A -  -  -  -  functionPause:
  522 D1:CA1A CD 28 10 02 	call _IncFetch
  523 D1:CA1E 38 59 -  -  	jr c, ++_
  524 D1:CA20 FE 3F -  -  	cp tEnter
  525 D1:CA22 28 55 -  -  	jr z, ++_
  526 D1:CA24 CD C6 B2 D1 	call ParseExpression
  527 D1:CA28 3A 68 EA D1 	ld a, (amountOfPause)
  528 D1:CA2C 3D -  -  -  	dec a
  529 D1:CA2D CA B3 CA D1 	jp z, functionPauseOnce
  530 D1:CA31 FD CB D0 66 	bit has_already_pause, (iy+fProgram1)
  531 D1:CA35 20 54 -  -  	jr nz, AddPause
  532 D1:CA37 3E CD -  -  	ld a, 0CDh
  533 D1:CA39 CD 0E AD D1 	call InsertA															; call *
  534 D1:CA3D CD 25 AD D1 	call InsertProgramPtrToDataOffset
  535 D1:CA41 2A 5E EA D1 	ld hl, (programDataDataPtr)
  536 D1:CA45 22 27 EA D0 	ld (PauseStartData), hl
  537 D1:CA49 E5 -  -  -  	push hl
  538 D1:CA4A D1 -  -  -  	pop de
  539 D1:CA4B FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  540 D1:CA4F 28 10 -  -  	jr z, +_
  541 D1:CA51 E5 -  -  -  	push hl
  542 D1:CA52 2A 49 EA D1 		ld hl, (programPtr)
  543 D1:CA56 2B -  -  -  		dec hl
  544 D1:CA57 2B -  -  -  		dec hl
  545 D1:CA58 2B -  -  -  		dec hl
  546 D1:CA59 2B -  -  -  		dec hl
  547 D1:CA5A ED 07 -  -  		ld bc, (hl)
  548 D1:CA5C 0B -  -  -  		dec bc
  549 D1:CA5D ED 0F -  -  		ld (hl), bc
  550 D1:CA5F E1 -  -  -  	pop hl
  551 D1:CA60 23 -  -  -  	inc hl
  552 D1:CA61 CD 50 AC D1 _:	call InsertHL															; call *
  553 D1:CA65 21 97 EE D1 	ld hl, PauseRoutine
  554 D1:CA69 01 13 00 00 	ld bc, PauseRoutineEnd - PauseRoutine
  555 D1:CA6D ED B0 -  -  	ldir
  556 D1:CA6F ED 53 5E EA 
              D1 -  -  -  	ld (programDataDataPtr), de
  557 D1:CA74 FD CB D0 E6 	set has_already_pause, (iy+fProgram1)
  558 D1:CA78 C9 -  -  -  	ret
  559 D1:CA79 21 4C 01 02 _:	ld hl, _GetCSC
  560 D1:CA7D CD 61 AC D1 	call InsertCallHL														; call _GetCSC
  561 D1:CA81 3E FE -  -  	ld a, 0FEh
  562 D1:CA83 21 09 20 F8 	ld hl, 0F82009h
  563 D1:CA87 C3 4C AC D1 	jp InsertAHL															; cp tEnter \ jr nz, $-9
  564 D1:CA8B -  -  -  -  AddPause:
  565 D1:CA8B 3E CD -  -  	ld a, 0CDh
  566 D1:CA8D CD 0E AD D1 	call InsertA															; call ******
  567 D1:CA91 CD 25 AD D1 	call InsertProgramPtrToDataOffset
  568 D1:CA95 2A 27 EA D0 	ld hl, (PauseStartData)
  569 D1:CA99 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  570 D1:CA9D 28 10 -  -  	jr z, +_
  571 D1:CA9F E5 -  -  -  	push hl
  572 D1:CAA0 2A 49 EA D1 		ld hl, (programPtr)
  573 D1:CAA4 2B -  -  -  		dec hl
  574 D1:CAA5 2B -  -  -  		dec hl
  575 D1:CAA6 2B -  -  -  		dec hl
  576 D1:CAA7 2B -  -  -  		dec hl
  577 D1:CAA8 ED 17 -  -  		ld de, (hl)
  578 D1:CAAA 1B -  -  -  		dec de
  579 D1:CAAB ED 1F -  -  		ld (hl), de
  580 D1:CAAD E1 -  -  -  	pop hl
  581 D1:CAAE 23 -  -  -  	inc hl
  582 D1:CAAF C3 50 AC D1 _:	jp InsertHL																; call XXXXXX
  583 D1:CAB3 -  -  -  -  functionPauseOnce:
  584 D1:CAB3 ED 5B 49 EA 
              D1 -  -  -  	ld de, (programPtr)
  585 D1:CAB8 21 97 EE D1 	ld hl, PauseRoutine
  586 D1:CABC 01 13 00 00 	ld bc, PauseRoutineEnd - PauseRoutine
  587 D1:CAC0 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  588 D1:CAC4 28 11 -  -  	jr z, +_
  589 D1:CAC6 DD 2A 49 EA 
              D1 -  -  -  	ld ix, (programPtr)
  590 D1:CACB DD 17 FD -  	ld de, (ix-3)
  591 D1:CACE 1B -  -  -  	dec de
  592 D1:CACF DD 1F FD -  	ld (ix-3), de
  593 D1:CAD2 ED 12 00 -  	lea de, ix
  594 D1:CAD5 23 -  -  -  	inc hl
  595 D1:CAD6 0B -  -  -  	dec bc
  596 D1:CAD7 ED B0 -  -  _:	ldir
  597 D1:CAD9 1B -  -  -  	dec de
  598 D1:CADA ED 53 49 EA 
              D1 -  -  -  	ld (programPtr), de
  599 D1:CADF C9 -  -  -  	ret
  600 D1:CAE0 -  -  -  -  	
  601 D1:CAE0 -  -  -  -  functionInput:
  602 D1:CAE0 CD 97 AC D1 	call MaybeInsertIYFlags
  603 D1:CAE4 CD 28 10 02 	call _IncFetch
  604 D1:CAE8 FE 41 -  -  	cp tA
  605 D1:CAEA DA 3A AF D1 	jp c, ErrorSyntax
  606 D1:CAEE FE 5C -  -  	cp ttheta+1
  607 D1:CAF0 D2 3A AF D1 	jp nc, ErrorSyntax
  608 D1:CAF4 CD C0 0F 02 	call _NxtFetch
  609 D1:CAF8 38 06 -  -  	jr c, +_
  610 D1:CAFA FE 3F -  -  	cp tEnter
  611 D1:CAFC C2 3A AF D1 	jp nz, ErrorSyntax
  612 D1:CB00 3A 67 EA D1 _:	ld a, (amountOfInput)
  613 D1:CB04 3D -  -  -  	dec a
  614 D1:CB05 28 79 -  -  	jr z, functionInputOnce
  615 D1:CB07 3E 3E -  -  	ld a, 03Eh
  616 D1:CB09 CD 0E AD D1 	call InsertA															; ld a, **
  617 D1:CB0D CD 2C 10 02 	call _CurFetch
  618 D1:CB11 D6 41 -  -  	sub tA
  619 D1:CB13 47 -  -  -  	ld b, a
  620 D1:CB14 87 -  -  -  	add a, a
  621 D1:CB15 80 -  -  -  	add a, b
  622 D1:CB16 CD 0E AD D1 	call InsertA															; ld a, XX
  623 D1:CB1A 3E 32 -  -  	ld a, 032h
  624 D1:CB1C CD 0E AD D1 	call InsertA															; ld (******), a
  625 D1:CB20 CD 25 AD D1 	call InsertProgramPtrToDataOffset
  626 D1:CB24 FD CB D0 56 	bit has_already_input, (iy+fProgram1)
  627 D1:CB28 20 39 -  -  	jr nz, AddPointerToInput
  628 D1:CB2A 2A 5E EA D1 	ld hl, (programDataDataPtr)
  629 D1:CB2E 22 21 EA D0 	ld (InputStartData), hl
  630 D1:CB32 01 3D 00 00 	ld bc, InputOffset-InputRoutine
  631 D1:CB36 09 -  -  -  	add hl, bc
  632 D1:CB37 CD 50 AC D1 	call InsertHL															; ld (XXXXXX), a
  633 D1:CB3B 3E CD -  -  	ld a, 0CDh
  634 D1:CB3D CD 0E AD D1 	call InsertA															; call ******
  635 D1:CB41 CD 25 AD D1 	call InsertProgramPtrToDataOffset
  636 D1:CB45 2A 5E EA D1 	ld hl, (programDataDataPtr)
  637 D1:CB49 E5 -  -  -  	push hl
  638 D1:CB4A D1 -  -  -  	pop de
  639 D1:CB4B CD 50 AC D1 	call InsertHL															; call XXXXXX
  640 D1:CB4F 21 04 EE D1 _:	ld hl, InputRoutine
  641 D1:CB53 01 42 00 00 	ld bc, InputRoutineEnd-InputRoutine
  642 D1:CB57 ED B0 -  -  	ldir
  643 D1:CB59 ED 53 5E EA 
              D1 -  -  -  	ld (programDataDataPtr), de
  644 D1:CB5E FD CB D0 D6 	set has_already_input, (iy+fProgram1)
  645 D1:CB62 C9 -  -  -  	ret
  646 D1:CB63 -  -  -  -  AddPointerToInput:
  647 D1:CB63 2A 21 EA D0 	ld hl, (InputStartData)
  648 D1:CB67 E5 -  -  -  	push hl
  649 D1:CB68 01 3D 00 00 		ld bc, InputOffset-InputRoutine
  650 D1:CB6C 09 -  -  -  		add hl, bc
  651 D1:CB6D CD 50 AC D1 		call InsertHL														; ld (XXXXXX), a
  652 D1:CB71 3E CD -  -  		ld a, 0CDh
  653 D1:CB73 CD 0E AD D1 		call InsertA														; call ******
  654 D1:CB77 CD 25 AD D1 		call InsertProgramPtrToDataOffset
  655 D1:CB7B E1 -  -  -  	pop hl
  656 D1:CB7C C3 50 AC D1 	jp InsertHL																; call XXXXXX
  657 D1:CB80 -  -  -  -  functionInputOnce:
  658 D1:CB80 CD 2C 10 02 	call _CurFetch
  659 D1:CB84 D6 41 -  -  	sub tA
  660 D1:CB86 47 -  -  -  	ld b, a
  661 D1:CB87 87 -  -  -  	add a, a
  662 D1:CB88 80 -  -  -  	add a, b
  663 D1:CB89 32 41 EE D1 	ld (InputOffset), a
  664 D1:CB8D ED 5B 49 EA 
              D1 -  -  -  	ld de, (programPtr)
  665 D1:CB92 21 04 EE D1 	ld hl, InputRoutine
  666 D1:CB96 01 42 00 00 	ld bc, InputRoutineEnd - InputRoutine
  667 D1:CB9A ED B0 -  -  	ldir
  668 D1:CB9C D5 -  -  -  	push de
  669 D1:CB9D DD E1 -  -  	pop ix
  670 D1:CB9F DD 36 FC CD 	ld (ix-4), 0CDh
  671 D1:CBA3 ED 53 49 EA 
              D1 -  -  -  	ld (programPtr), de
  672 D1:CBA8 C9 -  -  -  	ret
  673 D1:CBA9 -  -  -  -  	
  674 D1:CBA9 -  -  -  -  functionNot:
  675 D1:CBA9 3E 01 -  -  	ld a, 1
  676 D1:CBAB 32 64 EA D1 	ld (amountOfArguments), a
  677 D1:CBAF FD CB BF CE 	set last_token_was_not, (iy+fExpression2)
  678 D1:CBB3 E5 -  -  -  	push hl
  679 D1:CBB4 DD E1 -  -  	pop ix
  680 D1:CBB6 DD 7E FC -  	ld a, (ix-4)
  681 D1:CBB9 B7 -  -  -  	or a
  682 D1:CBBA 28 10 -  -  	jr z, NotNumber
  683 D1:CBBC 3D -  -  -  	dec a
  684 D1:CBBD 28 23 -  -  	jr z, NotVariable
  685 D1:CBBF 3D -  -  -  	dec a
  686 D1:CBC0 28 36 -  -  	jr z, NotChainPush
  687 D1:CBC2 3D -  -  -  	dec a
  688 D1:CBC3 28 37 -  -  	jr z, NotChainAns
  689 D1:CBC5 3D -  -  -  	dec a
  690 D1:CBC6 28 48 -  -  	jr z, NotFunction
  691 D1:CBC8 C3 3A AF D1 	jp ErrorSyntax
  692 D1:CBCC -  -  -  -  NotNumber:
  693 D1:CBCC FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  694 D1:CBD0 DD 27 FD -  	ld hl, (ix-3)
  695 D1:CBD3 19 -  -  -  	add hl, de
  696 D1:CBD4 B7 -  -  -  	or a
  697 D1:CBD5 ED 52 -  -  	sbc hl, de
  698 D1:CBD7 21 00 00 00 	ld hl, 0
  699 D1:CBDB 20 01 -  -  	jr nz, +_
  700 D1:CBDD 23 -  -  -  	inc hl
  701 D1:CBDE DD 2F FD -  _:	ld (ix-3), hl
  702 D1:CBE1 C9 -  -  -  	ret
  703 D1:CBE2 -  -  -  -  NotVariable:
  704 D1:CBE2 DD 4E FD -  	ld c, (ix-3)
  705 D1:CBE5 06 03 -  -  	ld b, 3
  706 D1:CBE7 ED 4C -  -  	mlt bc
  707 D1:CBE9 79 -  -  -  	ld a, c
  708 D1:CBEA 21 DD 27 00 	ld hl, 00027DDh
  709 D1:CBEE CD 70 1D 02 	call _SetHLUToA
  710 D1:CBF2 CD 50 AC D1 	call InsertHL															; ld hl, (ix+*)
  711 D1:CBF6 18 04 -  -  	jr NotChainAns
  712 D1:CBF8 -  -  -  -  NotChainPush:
  713 D1:CBF8 C3 74 AF D1 	jp UnknownError
  714 D1:CBFC -  -  -  -  NotChainAns:
  715 D1:CBFC 3E 11 -  -  	ld a, 011h
  716 D1:CBFE CD 0E AD D1 	call InsertA															; ld de, *
  717 D1:CC02 3E FF -  -  	ld a, 0FFh
  718 D1:CC04 11 FF FF 19 	ld de, 019FFFFh
  719 D1:CC08 21 ED 62 23 	ld hl, 02362EDh
  720 D1:CC0C C3 8B AC D1 	jp InsertADEHL															; ld de, -1 \ add hl, de \ sbc hl, hl \ inc hl
  721 D1:CC10 -  -  -  -  NotFunction:
  722 D1:CC10 DD 7E FD -  	ld a, (ix-3)
  723 D1:CC13 06 02 -  -  	ld b, OutputInHL
  724 D1:CC15 CD 3A AD D1 	call GetFunction
  725 D1:CC19 18 E1 -  -  	jr NotChainAns
  726 D1:CC1B -  -  -  -  	
  727 D1:CC1B -  -  -  -  functionCE:
  728 D1:CC1B 23 -  -  -  	inc hl
  729 D1:CC1C 23 -  -  -  	inc hl
  730 D1:CC1D 7E -  -  -  	ld a, (hl)
  731 D1:CC1E FE 32 -  -  	cp tRemainder
  732 D1:CC20 C2 3A AF D1 	jp nz, ErrorSyntax
  733 D1:CC24 11 F6 FF FF 	ld de, -10
  734 D1:CC28 19 -  -  -  	add hl, de
  735 D1:CC29 -  -  -  -  		
  736 D1:CC29 -  -  -  -  functionRemainder:
  737 D1:CC29 3E 02 -  -  	ld a, 2
  738 D1:CC2B 32 64 EA D1 	ld (amountOfArguments), a
  739 D1:CC2F 7E -  -  -  	ld a, (hl)
  740 D1:CC30 DD 67 -  -  	ld ixh, a
  741 D1:CC32 23 -  -  -  	inc hl
  742 D1:CC33 E5 -  -  -  	push hl
  743 D1:CC34 ED 07 -  -  		ld bc, (hl)
  744 D1:CC36 23 -  -  -  		inc hl
  745 D1:CC37 23 -  -  -  		inc hl
  746 D1:CC38 23 -  -  -  		inc hl
  747 D1:CC39 7E -  -  -  		ld a, (hl)
  748 D1:CC3A DD 6F -  -  		ld ixl, a
  749 D1:CC3C 23 -  -  -  		inc hl
  750 D1:CC3D ED 17 -  -  		ld de, (hl)
  751 D1:CC3F E1 -  -  -  	pop hl
  752 D1:CC40 DD 7C -  -  	ld a, ixh
  753 D1:CC42 B7 -  -  -  	or a
  754 D1:CC43 28 18 -  -  	jr z, RemainderNumberXXX
  755 D1:CC45 3D -  -  -  	dec a
  756 D1:CC46 CA BD CC D1 	jp z, RemainderVariableXXX
  757 D1:CC4A 3D -  -  -  	dec a
  758 D1:CC4B CA 03 CD D1 	jp z, RemainderChainPushXXX
  759 D1:CC4F 3D -  -  -  	dec a
  760 D1:CC50 CA 15 CD D1 	jp z, RemainderChainAnsXXX
  761 D1:CC54 3D -  -  -  	dec a
  762 D1:CC55 CA 54 CD D1 	jp z, RemainderFunctionXXX
  763 D1:CC59 C3 3A AF D1 	jp ErrorSyntax
  764 D1:CC5D -  -  -  -  RemainderNumberXXX:
  765 D1:CC5D DD 7D -  -  	ld a, ixl
  766 D1:CC5F B7 -  -  -  	or a
  767 D1:CC60 28 10 -  -  	jr z, RemainderNumberNumber
  768 D1:CC62 3D -  -  -  	dec a
  769 D1:CC63 28 1F -  -  	jr z, RemainderNumberVariable
  770 D1:CC65 3D -  -  -  	dec a
  771 D1:CC66 28 28 -  -  	jr z, RemainderNumberChainPush
  772 D1:CC68 3D -  -  -  	dec a
  773 D1:CC69 28 29 -  -  	jr z, RemainderNumberChainAns
  774 D1:CC6B 3D -  -  -  	dec a
  775 D1:CC6C 28 38 -  -  	jr z, RemainderNumberFunction
  776 D1:CC6E C3 3A AF D1 	jp ErrorSyntax
  777 D1:CC72 -  -  -  -  RemainderNumberNumber:
  778 D1:CC72 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  779 D1:CC76 E5 -  -  -  	push hl
  780 D1:CC77 C5 -  -  -  		push bc
  781 D1:CC78 E1 -  -  -  		pop hl
  782 D1:CC79 D5 -  -  -  		push de
  783 D1:CC7A C1 -  -  -  		pop bc
  784 D1:CC7B CD 44 01 00 		call __idvrmu
  785 D1:CC7F EB -  -  -  		ex de, hl
  786 D1:CC80 E1 -  -  -  	pop hl
  787 D1:CC81 ED 1F -  -  	ld (hl), de
  788 D1:CC83 C9 -  -  -  	ret
  789 D1:CC84 -  -  -  -  RemainderNumberVariable:
  790 D1:CC84 3E 21 -  -  	ld a, 021h
  791 D1:CC86 C5 -  -  -  	push bc
  792 D1:CC87 E1 -  -  -  	pop hl
  793 D1:CC88 CD 4C AC D1 	call InsertAHL															; ld hl, *
  794 D1:CC8C C3 39 CD D1 	jp RemainderChainAnsVariable
  795 D1:CC90 -  -  -  -  RemainderNumberChainPush:
  796 D1:CC90 C3 74 AF D1 	jp UnknownError
  797 D1:CC94 -  -  -  -  RemainderNumberChainAns:
  798 D1:CC94 11 E5 C1 21 	ld de, 021C1E5h
  799 D1:CC98 C5 -  -  -  	push bc
  800 D1:CC99 E1 -  -  -  	pop hl
  801 D1:CC9A CD 8F AC D1 	call InsertDEHL															; push hl \ pop bc \ ld hl, *
  802 D1:CC9E 21 44 01 00 	ld hl, __idvrmu
  803 D1:CCA2 C3 61 AC D1 	jp InsertCallHL															; call __idvrmu
  804 D1:CCA6 -  -  -  -  RemainderNumberFunction:
  805 D1:CCA6 7B -  -  -  	ld a, e
  806 D1:CCA7 C5 -  -  -  	push bc
  807 D1:CCA8 06 00 -  -  		ld b, OutputInBC
  808 D1:CCAA CD 3A AD D1 		call GetFunction
  809 D1:CCAE E1 -  -  -  	pop hl
  810 D1:CCAF 3E 21 -  -  	ld a, 021h
  811 D1:CCB1 CD 4C AC D1 	call InsertAHL															; ld hl, *
  812 D1:CCB5 21 44 01 00 	ld hl, __idvrmu
  813 D1:CCB9 C3 61 AC D1 	jp InsertCallHL															; call __idvrmu
  814 D1:CCBD -  -  -  -  RemainderVariableXXX:
  815 D1:CCBD DD 7D -  -  	ld a, ixl
  816 D1:CCBF B7 -  -  -  	or a
  817 D1:CCC0 28 10 -  -  	jr z, RemainderVariableNumber
  818 D1:CCC2 3D -  -  -  	dec a
  819 D1:CCC3 28 13 -  -  	jr z, RemainderVariableVariable
  820 D1:CCC5 3D -  -  -  	dec a
  821 D1:CCC6 28 16 -  -  	jr z, RemainderVariableChainPush
  822 D1:CCC8 3D -  -  -  	dec a
  823 D1:CCC9 28 17 -  -  	jr z, RemainderVariableChainAns
  824 D1:CCCB 3D -  -  -  	dec a
  825 D1:CCCC 28 2C -  -  	jr z, RemainderVariableFunction
  826 D1:CCCE C3 3A AF D1 	jp ErrorSyntax
  827 D1:CCD2 -  -  -  -  RemainderVariableNumber:
  828 D1:CCD2 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  829 D1:CCD6 18 52 -  -  	jr RemainderChainAnsNumber
  830 D1:CCD8 -  -  -  -  RemainderVariableVariable
  831 D1:CCD8 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  832 D1:CCDC 18 5B -  -  	jr RemainderChainAnsVariable
  833 D1:CCDE -  -  -  -  RemainderVariableChainPush:
  834 D1:CCDE C3 74 AF D1 	jp UnknownError
  835 D1:CCE2 -  -  -  -  RemainderVariableChainAns:
  836 D1:CCE2 3E E5 -  -  	ld a, 0E5h
  837 D1:CCE4 CD 0E AD D1 	call InsertA															; push hl
  838 D1:CCE8 3E C1 -  -  	ld a, 0C1h
  839 D1:CCEA CD 0E AD D1 	call InsertA															; pop bc
  840 D1:CCEE CD 65 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  841 D1:CCF2 21 44 01 00 	ld hl, __idvrmu
  842 D1:CCF6 C3 61 AC D1 	jp InsertCallHL															; call __idvrmu
  843 D1:CCFA -  -  -  -  RemainderVariableFunction:
  844 D1:CCFA 7B -  -  -  	ld a, e
  845 D1:CCFB 06 00 -  -  	ld b, OutputInBC
  846 D1:CCFD CD 3A AD D1 	call GetFunction
  847 D1:CD01 18 EB -  -  	jr -_
  848 D1:CD03 -  -  -  -  RemainderChainPushXXX:
  849 D1:CD03 DD 7D -  -  	ld a, ixl
  850 D1:CD05 FE 03 -  -  	cp typeChainAns
  851 D1:CD07 C2 74 AF D1 	jp nz, UnknownError
  852 D1:CD0B 21 E5 C1 E1 	ld hl, 0E1C1E5h
  853 D1:CD0F CD 4C AC D1 	call InsertAHL															; push hl \ pop bc \ pop hl
  854 D1:CD13 18 1C -  -  	jr +_
  855 D1:CD15 -  -  -  -  RemainderChainAnsXXX:
  856 D1:CD15 DD 7D -  -  	ld a, ixl
  857 D1:CD17 B7 -  -  -  	or a
  858 D1:CD18 28 10 -  -  	jr z, RemainderChainAnsNumber
  859 D1:CD1A 3D -  -  -  	dec a
  860 D1:CD1B 28 1C -  -  	jr z, RemainderChainAnsVariable
  861 D1:CD1D 3D -  -  -  	dec a
  862 D1:CD1E 28 1F -  -  	jr z, RemainderChainAnsChainPush
  863 D1:CD20 3D -  -  -  	dec a
  864 D1:CD21 28 20 -  -  	jr z, RemainderChainAnsChainAns
  865 D1:CD23 3D -  -  -  	dec a
  866 D1:CD24 28 21 -  -  	jr z, RemainderChainAnsFunction
  867 D1:CD26 C3 3A AF D1 	jp ErrorSyntax
  868 D1:CD2A -  -  -  -  RemainderChainAnsNumber:
  869 D1:CD2A EB -  -  -  	ex de, hl
  870 D1:CD2B 3E 01 -  -  	ld a, 001h
  871 D1:CD2D CD 4C AC D1 	call InsertAHL															; ld bc, *
  872 D1:CD31 21 44 01 00 _:	ld hl, __idvrmu
  873 D1:CD35 C3 61 AC D1 	jp InsertCallHL															; call __idvrmu
  874 D1:CD39 -  -  -  -  RemainderChainAnsVariable:
  875 D1:CD39 CD 7D AC D1 	call InsertIXC															; ld bc, (ix+*)
  876 D1:CD3D 18 F2 -  -  	jr -_
  877 D1:CD3F -  -  -  -  RemainderChainAnsChainPush:
  878 D1:CD3F C3 74 AF D1 	jp UnknownError
  879 D1:CD43 -  -  -  -  RemainderChainAnsChainAns:
  880 D1:CD43 C3 74 AF D1 	jp UnknownError
  881 D1:CD47 -  -  -  -  RemainderChainAnsFunction:
  882 D1:CD47 7B -  -  -  	ld a, e
  883 D1:CD48 06 00 -  -  	ld b, OutputInBC
  884 D1:CD4A FD CB C0 F6 	set need_push, (iy+fExpression1)
  885 D1:CD4E CD 3A AD D1 	call GetFunction
  886 D1:CD52 18 DD -  -  	jr -_
  887 D1:CD54 -  -  -  -  RemainderFunctionXXX:
  888 D1:CD54 DD 7D -  -  	ld a, ixl
  889 D1:CD56 B7 -  -  -  	or a
  890 D1:CD57 28 10 -  -  	jr z, RemainderFunctionNumber
  891 D1:CD59 3D -  -  -  	dec a
  892 D1:CD5A 28 16 -  -  	jr z, RemainderFunctionVariable
  893 D1:CD5C 3D -  -  -  	dec a
  894 D1:CD5D 28 1C -  -  	jr z, RemainderFunctionChainPush
  895 D1:CD5F 3D -  -  -  	dec a
  896 D1:CD60 28 1D -  -  	jr z, RemainderFunctionChainAns
  897 D1:CD62 3D -  -  -  	dec a
  898 D1:CD63 28 2F -  -  	jr z, RemainderFunctionFunction
  899 D1:CD65 C3 3A AF D1 	jp ErrorSyntax
  900 D1:CD69 -  -  -  -  RemainderFunctionNumber:
  901 D1:CD69 79 -  -  -  	ld a, c
  902 D1:CD6A 06 02 -  -  	ld b, OutputInHL
  903 D1:CD6C CD 3A AD D1 	call GetFunction
  904 D1:CD70 18 B8 -  -  	jr RemainderChainAnsNumber
  905 D1:CD72 -  -  -  -  RemainderFunctionVariable:
  906 D1:CD72 79 -  -  -  	ld a, c
  907 D1:CD73 06 02 -  -  	ld b, OutputInHL
  908 D1:CD75 CD 3A AD D1 	call GetFunction
  909 D1:CD79 18 BE -  -  	jr RemainderChainAnsVariable
  910 D1:CD7B -  -  -  -  RemainderFunctionChainPush:
  911 D1:CD7B C3 74 AF D1 	jp UnknownError
  912 D1:CD7F -  -  -  -  RemainderFunctionChainAns:
  913 D1:CD7F 3E E5 -  -  	ld a, 0E5h
  914 D1:CD81 CD 0E AD D1 	call InsertA														; push hl
  915 D1:CD85 3E C1 -  -  	ld a, 0C1h
  916 D1:CD87 CD 0E AD D1 	call InsertA														; pop bc
  917 D1:CD8B 79 -  -  -  	ld a, c
  918 D1:CD8C 06 02 -  -  	ld b, OutputInHL
  919 D1:CD8E CD 3A AD D1 	call GetFunction
  920 D1:CD92 18 9D -  -  	jr -_
  921 D1:CD94 -  -  -  -  RemainderFunctionFunction:
  922 D1:CD94 7B -  -  -  	ld a, e
  923 D1:CD95 06 00 -  -  	ld b, OutputInBC
  924 D1:CD97 CD 3A AD D1 	call GetFunction
  925 D1:CD9B 79 -  -  -  	ld a, c
  926 D1:CD9C 06 02 -  -  	ld b, OutputInHL
  927 D1:CD9E CD 3A AD D1 	call GetFunction
  928 D1:CDA2 18 8D -  -  	jr -_
  929 D1:CDA4 -  -  -  -  	
  930 D1:CDA4 -  -  -  -  functionMean:
  931 D1:CDA4 FD CB BF C6 	set use_mean_routine, (iy+fExpression2)
  932 D1:CDA8 -  -  -  -  functionMax:
  933 D1:CDA8 3E 30 -  -  	ld a, 030h
  934 D1:CDAA 18 02 -  -  	jr +_
  935 D1:CDAC -  -  -  -  functionMin:
  936 D1:CDAC 3E 38 -  -  	ld a, 038h
  937 D1:CDAE 32 EB CE D1 _:	ld (MaxMinMeanInsertSMC), a
  938 D1:CDB2 3E 02 -  -  	ld a, 2
  939 D1:CDB4 32 64 EA D1 	ld (amountOfArguments), a
  940 D1:CDB8 2B -  -  -  	dec hl
  941 D1:CDB9 2B -  -  -  	dec hl
  942 D1:CDBA 2B -  -  -  	dec hl
  943 D1:CDBB ED 17 -  -  	ld de, (hl)
  944 D1:CDBD 2B -  -  -  	dec hl
  945 D1:CDBE 7E -  -  -  	ld a, (hl)
  946 D1:CDBF DD 6F -  -  	ld ixl, a
  947 D1:CDC1 2B -  -  -  	dec hl
  948 D1:CDC2 2B -  -  -  	dec hl
  949 D1:CDC3 2B -  -  -  	dec hl
  950 D1:CDC4 ED 07 -  -  	ld bc, (hl)
  951 D1:CDC6 2B -  -  -  	dec hl
  952 D1:CDC7 7E -  -  -  	ld a, (hl)
  953 D1:CDC8 23 -  -  -  	inc hl
  954 D1:CDC9 B7 -  -  -  	or a
  955 D1:CDCA 28 18 -  -  	jr z, MaxMinMeanNumberXXX
  956 D1:CDCC 3D -  -  -  	dec a
  957 D1:CDCD CA 53 CE D1 	jp z, MaxMinMeanVariableXXX
  958 D1:CDD1 3D -  -  -  	dec a
  959 D1:CDD2 CA 9C CE D1 	jp z, MaxMinMeanChainPushXXX
  960 D1:CDD6 3D -  -  -  	dec a
  961 D1:CDD7 CA C0 CE D1 	jp z, MaxMinMeanChainAnsXXX
  962 D1:CDDB 3D -  -  -  	dec a
  963 D1:CDDC CA 0D CF D1 	jp z, MaxMinMeanFunctionXXX
  964 D1:CDE0 C3 3A AF D1 	jp ErrorSyntax
  965 D1:CDE4 -  -  -  -  MaxMinMeanNumberXXX:
  966 D1:CDE4 DD 7D -  -  	ld a, ixl
  967 D1:CDE6 B7 -  -  -  	or a
  968 D1:CDE7 28 10 -  -  	jr z, MaxMinMeanNumberNumber
  969 D1:CDE9 3D -  -  -  	dec a
  970 D1:CDEA 28 4B -  -  	jr z, MaxMinMeanNumberVariable
  971 D1:CDEC 3D -  -  -  	dec a
  972 D1:CDED 28 4F -  -  	jr z, MaxMinMeanNumberChainPush
  973 D1:CDEF 3D -  -  -  	dec a
  974 D1:CDF0 28 50 -  -  	jr z, MaxMinMeanNumberChainAns
  975 D1:CDF2 3D -  -  -  	dec a
  976 D1:CDF3 28 51 -  -  	jr z, MaxMinMeanNumberFunction
  977 D1:CDF5 C3 3A AF D1 	jp ErrorSyntax
  978 D1:CDF9 -  -  -  -  MaxMinMeanNumberNumber:
  979 D1:CDF9 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  980 D1:CDFD E5 -  -  -  	push hl
  981 D1:CDFE FD CB BF 46 		bit use_mean_routine, (iy+fExpression2)
  982 D1:CE02 20 1C -  -  		jr nz, ++_
  983 D1:CE04 3A EB CE D1 		ld a, (MaxMinMeanInsertSMC)
  984 D1:CE08 C5 -  -  -  		push bc
  985 D1:CE09 E1 -  -  -  		pop hl
  986 D1:CE0A FE 30 -  -  		cp 030h
  987 D1:CE0C 28 09 -  -  		jr z, +_
  988 D1:CE0E B7 -  -  -  		or a
  989 D1:CE0F ED 52 -  -  		sbc hl, de
  990 D1:CE11 19 -  -  -  		add hl, de
  991 D1:CE12 30 01 -  -  		jr nc, $+3
  992 D1:CE14 EB -  -  -  		ex de, hl
  993 D1:CE15 18 1C -  -  		jr +++_
  994 D1:CE17 B7 -  -  -  _:		or a
  995 D1:CE18 ED 52 -  -  		sbc hl, de
  996 D1:CE1A 19 -  -  -  		add hl, de
  997 D1:CE1B 38 01 -  -  		jr c, $+3
  998 D1:CE1D EB -  -  -  		ex de, hl
  999 D1:CE1E 18 13 -  -  		jr ++_
 1000 D1:CE20 EB -  -  -  _:		ex de, hl
 1001 D1:CE21 DD 21 00 00 
              00 -  -  -  		ld ix, 0
 1002 D1:CE26 DD 39 -  -  		add ix, sp
 1003 D1:CE28 09 -  -  -  		add hl, bc
 1004 D1:CE29 E5 -  -  -  		push hl
 1005 D1:CE2A DD CB FF 1E 			rr (ix-1)
 1006 D1:CE2E D1 -  -  -  		pop de
 1007 D1:CE2F CB 1A -  -  		rr d
 1008 D1:CE31 CB 1B -  -  		rr e
 1009 D1:CE33 E1 -  -  -  _:	pop hl
 1010 D1:CE34 ED 1F -  -  	ld (hl), de
 1011 D1:CE36 C9 -  -  -  	ret
 1012 D1:CE37 -  -  -  -  MaxMinMeanNumberVariable:
 1013 D1:CE37 C5 -  -  -  	push bc
 1014 D1:CE38 E1 -  -  -  	pop hl
 1015 D1:CE39 EB -  -  -  	ex de, hl
 1016 D1:CE3A E5 -  -  -  	push hl
 1017 D1:CE3B C1 -  -  -  	pop bc
 1018 D1:CE3C 18 2A -  -  	jr MaxMinMeanVariableNumber
 1019 D1:CE3E -  -  -  -  MaxMinMeanNumberChainPush:
 1020 D1:CE3E C3 74 AF D1 	jp UnknownError
 1021 D1:CE42 -  -  -  -  MaxMinMeanNumberChainAns:
 1022 D1:CE42 C5 -  -  -  	push bc
 1023 D1:CE43 D1 -  -  -  	pop de
 1024 D1:CE44 18 09 -  -  	jr +_
 1025 D1:CE46 -  -  -  -  MaxMinMeanNumberFunction:
 1026 D1:CE46 7B -  -  -  	ld a, e
 1027 D1:CE47 C5 -  -  -  	push bc
 1028 D1:CE48 06 02 -  -  		ld b, OutputInHL
 1029 D1:CE4A CD 3A AD D1 		call GetFunction
 1030 D1:CE4E D1 -  -  -  	pop de
 1031 D1:CE4F C3 D5 CE D1 _:	jp MaxMinMeanChainAnsNumber
 1032 D1:CE53 -  -  -  -  MaxMinMeanVariableXXX:
 1033 D1:CE53 DD 7D -  -  	ld a, ixl
 1034 D1:CE55 B7 -  -  -  	or a
 1035 D1:CE56 28 10 -  -  	jr z, MaxMinMeanVariableNumber
 1036 D1:CE58 3D -  -  -  	dec a
 1037 D1:CE59 28 13 -  -  	jr z, MaxMinMeanVariableVariable
 1038 D1:CE5B 3D -  -  -  	dec a
 1039 D1:CE5C 28 18 -  -  	jr z, MaxMinMeanVariableChainPush
 1040 D1:CE5E 3D -  -  -  	dec a
 1041 D1:CE5F 28 2B -  -  	jr z, MaxMinMeanVariableChainAns
 1042 D1:CE61 3D -  -  -  	dec a
 1043 D1:CE62 28 2F -  -  	jr z, MaxMinMeanVariableFunction
 1044 D1:CE64 C3 3A AF D1 	jp ErrorSyntax
 1045 D1:CE68 -  -  -  -  MaxMinMeanVariableNumber:
 1046 D1:CE68 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1047 D1:CE6C 18 67 -  -  	jr MaxMinMeanChainAnsNumber
 1048 D1:CE6E -  -  -  -  MaxMinMeanVariableVariable
 1049 D1:CE6E CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1050 D1:CE72 C3 F2 CE D1 	jp MaxMinMeanChainAnsVariable
 1051 D1:CE76 -  -  -  -  MaxMinMeanVariableChainPush:
 1052 D1:CE76 2A 49 EA D1 	ld hl, (programPtr)
 1053 D1:CE7A 2B -  -  -  	dec hl
 1054 D1:CE7B 7E -  -  -  	ld a, (hl)
 1055 D1:CE7C FE E5 -  -  	cp 0E5h
 1056 D1:CE7E 28 03 -  -  	jr z, +_
 1057 D1:CE80 36 E1 -  -  	ld (hl), 0E1h
 1058 D1:CE82 23 -  -  -  	inc hl
 1059 D1:CE83 22 49 EA D1 _:	ld (programPtr), hl
 1060 D1:CE87 59 -  -  -  	ld e, c
 1061 D1:CE88 C3 F2 CE D1 	jp MaxMinMeanChainAnsVariable
 1062 D1:CE8C -  -  -  -  MaxMinMeanVariableChainAns:
 1063 D1:CE8C 59 -  -  -  _:	ld e, c
 1064 D1:CE8D CD 6E AC D1 	call InsertIXE															; ld de, (ix+*)
 1065 D1:CE91 18 49 -  -  	jr MaxMinMeanInsert
 1066 D1:CE93 -  -  -  -  MaxMinMeanVariableFunction:
 1067 D1:CE93 7B -  -  -  	ld a, e
 1068 D1:CE94 06 02 -  -  	ld b, OutputInHL
 1069 D1:CE96 CD 3A AD D1 	call GetFunction
 1070 D1:CE9A 18 F0 -  -  	jr -_
 1071 D1:CE9C -  -  -  -  MaxMinMeanChainPushXXX:
 1072 D1:CE9C DD 7D -  -  	ld a, ixl
 1073 D1:CE9E FE 03 -  -  	cp typeChainAns
 1074 D1:CEA0 C2 74 AF D1 	jp nz, UnknownError
 1075 D1:CEA4 FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
 1076 D1:CEA8 20 0E -  -  	jr nz, +_
 1077 D1:CEAA 3E EB -  -  	ld a, 0EBh
 1078 D1:CEAC CD 0E AD D1 	call InsertA															; ex de, hl
 1079 D1:CEB0 3E E1 -  -  	ld a, 0E1h
 1080 D1:CEB2 CD 0E AD D1 	call InsertA															; pop hl
 1081 D1:CEB6 18 24 -  -  	jr MaxMinMeanInsert
 1082 D1:CEB8 3E D1 -  -  _:	ld a, 0D1h
 1083 D1:CEBA CD 0E AD D1 	call InsertA															; pop de
 1084 D1:CEBE 18 1C -  -  	jr MaxMinMeanInsert
 1085 D1:CEC0 -  -  -  -  MaxMinMeanChainAnsXXX:
 1086 D1:CEC0 DD 7D -  -  	ld a, ixl
 1087 D1:CEC2 B7 -  -  -  	or a
 1088 D1:CEC3 28 10 -  -  	jr z, MaxMinMeanChainAnsNumber
 1089 D1:CEC5 3D -  -  -  	dec a
 1090 D1:CEC6 28 2A -  -  	jr z, MaxMinMeanChainAnsVariable
 1091 D1:CEC8 3D -  -  -  	dec a
 1092 D1:CEC9 28 2D -  -  	jr z, MaxMinMeanChainAnsChainPush
 1093 D1:CECB 3D -  -  -  	dec a
 1094 D1:CECC 28 2E -  -  	jr z, MaxMinMeanChainAnsChainAns
 1095 D1:CECE 3D -  -  -  	dec a
 1096 D1:CECF 28 2F -  -  	jr z, MaxMinMeanChainAnsFunction
 1097 D1:CED1 C3 3A AF D1 	jp ErrorSyntax
 1098 D1:CED5 -  -  -  -  MaxMinMeanChainAnsNumber:
 1099 D1:CED5 EB -  -  -  	ex de, hl
 1100 D1:CED6 3E 11 -  -  	ld a, 011h
 1101 D1:CED8 CD 4C AC D1 	call InsertAHL															; ld de, *
 1102 D1:CEDC -  -  -  -  MaxMinMeanInsert:
 1103 D1:CEDC FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
 1104 D1:CEE0 C2 6C CF D1 	jp nz, MeanInsert
 1105 D1:CEE4 3E B7 -  -  	ld a, 0B7h
 1106 D1:CEE6 11 ED 52 19 	ld de, 01952EDh
 1107 D1:CEEA -  -  -  -  MaxMinMeanInsertSMC = $+1
 1108 D1:CEEA 21 30 01 EB 	ld hl, 0EB0130h
 1109 D1:CEEE C3 8B AC D1 	jp InsertADEHL															; or a \ sbc hl, de \ add hl, de \ jr [n]c, $+3 \ add hl, de
 1110 D1:CEF2 -  -  -  -  MaxMinMeanChainAnsVariable:
 1111 D1:CEF2 CD 6E AC D1 	call InsertIXE															; ld de, (ix+*)
 1112 D1:CEF6 18 E4 -  -  	jr MaxMinMeanInsert
 1113 D1:CEF8 -  -  -  -  MaxMinMeanChainAnsChainPush:
 1114 D1:CEF8 C3 74 AF D1 	jp UnknownError
 1115 D1:CEFC -  -  -  -  MaxMinMeanChainAnsChainAns:
 1116 D1:CEFC C3 74 AF D1 	jp UnknownError
 1117 D1:CF00 -  -  -  -  MaxMinMeanChainAnsFunction:
 1118 D1:CF00 7B -  -  -  	ld a, e
 1119 D1:CF01 06 01 -  -  	ld b, OutputInDE
 1120 D1:CF03 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1121 D1:CF07 CD 3A AD D1 	call GetFunction
 1122 D1:CF0B 18 CF -  -  _:	jr MaxMinMeanInsert
 1123 D1:CF0D -  -  -  -  MaxMinMeanFunctionXXX:
 1124 D1:CF0D DD 7D -  -  	ld a, ixl
 1125 D1:CF0F B7 -  -  -  	or a
 1126 D1:CF10 28 10 -  -  	jr z, MaxMinMeanFunctionNumber
 1127 D1:CF12 3D -  -  -  	dec a
 1128 D1:CF13 28 16 -  -  	jr z, MaxMinMeanFunctionVariable
 1129 D1:CF15 3D -  -  -  	dec a
 1130 D1:CF16 28 1C -  -  	jr z, MaxMinMeanFunctionChainPush
 1131 D1:CF18 3D -  -  -  	dec a
 1132 D1:CF19 28 1D -  -  	jr z, MaxMinMeanFunctionChainAns
 1133 D1:CF1B 3D -  -  -  	dec a
 1134 D1:CF1C 28 38 -  -  	jr z, MaxMinMeanFunctionFunction
 1135 D1:CF1E C3 3A AF D1 	jp ErrorSyntax
 1136 D1:CF22 -  -  -  -  MaxMinMeanFunctionNumber:
 1137 D1:CF22 79 -  -  -  	ld a, c
 1138 D1:CF23 06 02 -  -  	ld b, OutputInHL
 1139 D1:CF25 CD 3A AD D1 	call GetFunction
 1140 D1:CF29 18 AA -  -  	jr MaxMinMeanChainAnsNumber
 1141 D1:CF2B -  -  -  -  MaxMinMeanFunctionVariable:
 1142 D1:CF2B 79 -  -  -  	ld a, c
 1143 D1:CF2C 06 02 -  -  	ld b, OutputInHL
 1144 D1:CF2E CD 3A AD D1 	call GetFunction
 1145 D1:CF32 18 BE -  -  	jr MaxMinMeanChainAnsVariable
 1146 D1:CF34 -  -  -  -  MaxMinMeanFunctionChainPush:
 1147 D1:CF34 C3 74 AF D1 	jp UnknownError
 1148 D1:CF38 -  -  -  -  MaxMinMeanFunctionChainAns:
 1149 D1:CF38 FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
 1150 D1:CF3C 20 13 -  -  	jr nz, ++_
 1151 D1:CF3E 3E EB -  -  	ld a, 0EBh
 1152 D1:CF40 CD 0E AD D1 	call InsertA															; ex de, hl
 1153 D1:CF44 79 -  -  -  	ld a, c
 1154 D1:CF45 06 02 -  -  	ld b, OutputInHL
 1155 D1:CF47 FD CB C0 F6 _:	set need_push, (iy+fExpression1)
 1156 D1:CF4B CD 3A AD D1 	call GetFunction
 1157 D1:CF4F 18 8B -  -  	jr MaxMinMeanInsert
 1158 D1:CF51 79 -  -  -  _:	ld a, c
 1159 D1:CF52 06 01 -  -  	ld b, OutputInDE
 1160 D1:CF54 18 F1 -  -  	jr --_
 1161 D1:CF56 -  -  -  -  MaxMinMeanFunctionFunction:
 1162 D1:CF56 7B -  -  -  	ld a, e
 1163 D1:CF57 06 01 -  -  	ld b, OutputInDE
 1164 D1:CF59 CD 3A AD D1 	call GetFunction
 1165 D1:CF5D 79 -  -  -  	ld a, c
 1166 D1:CF5E 06 02 -  -  	ld b, OutputInHL
 1167 D1:CF60 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1168 D1:CF64 CD 3A AD D1 	call GetFunction
 1169 D1:CF68 C3 DC CE D1 	jp MaxMinMeanInsert
 1170 D1:CF6C -  -  -  -  MeanInsert:
 1171 D1:CF6C FD CB D0 6E 	bit has_already_mean, (iy+fProgram1)
 1172 D1:CF70 20 2C -  -  	jr nz, +_
 1173 D1:CF72 3E CD -  -  	ld a, 0CDh
 1174 D1:CF74 CD 0E AD D1 	call InsertA															; call *
 1175 D1:CF78 CD 25 AD D1 	call InsertProgramPtrToDataOffset
 1176 D1:CF7C 2A 5E EA D1 	ld hl, (programDataDataPtr)
 1177 D1:CF80 22 2A EA D0 	ld (MeanStartData), hl
 1178 D1:CF84 E5 -  -  -  	push hl
 1179 D1:CF85 D1 -  -  -  	pop de
 1180 D1:CF86 CD 50 AC D1 	call InsertHL															; call *
 1181 D1:CF8A 21 AA EE D1 	ld hl, MeanRoutine
 1182 D1:CF8E 01 18 00 00 	ld bc, MeanRoutineEnd - MeanRoutine
 1183 D1:CF92 ED B0 -  -  	ldir
 1184 D1:CF94 ED 53 5E EA 
              D1 -  -  -  	ld (programDataDataPtr), de
 1185 D1:CF99 FD CB D0 EE 	set has_already_mean, (iy+fProgram1)
 1186 D1:CF9D C9 -  -  -  	ret
 1187 D1:CF9E 3E CD -  -  _:	ld a, 0CDh
 1188 D1:CFA0 CD 0E AD D1 	call InsertA															; call ******
 1189 D1:CFA4 CD 25 AD D1 	call InsertProgramPtrToDataOffset
 1190 D1:CFA8 2A 2A EA D0 	ld hl, (MeanStartData)
 1191 D1:CFAC C3 50 AC D1 	jp InsertHL																; call XXXXXX
 1192 D1:CFB0 -  -  -  -  	
 1193 D1:CFB0 -  -  -  -  functionSqrt:
 1194 D1:CFB0 3E 01 -  -  	ld a, 1
 1195 D1:CFB2 32 64 EA D1 	ld (amountOfArguments), a
 1196 D1:CFB6 FD CB BF CE 	set last_token_was_not, (iy+fExpression2)
 1197 D1:CFBA E5 -  -  -  	push hl
 1198 D1:CFBB DD E1 -  -  	pop ix
 1199 D1:CFBD DD 7E FC -  	ld a, (ix-4)
 1200 D1:CFC0 B7 -  -  -  	or a
 1201 D1:CFC1 28 10 -  -  	jr z, SqrtNumber
 1202 D1:CFC3 3D -  -  -  	dec a
 1203 D1:CFC4 28 1E -  -  	jr z, SqrtVariable
 1204 D1:CFC6 3D -  -  -  	dec a
 1205 D1:CFC7 28 31 -  -  	jr z, SqrtChainPush
 1206 D1:CFC9 3D -  -  -  	dec a
 1207 D1:CFCA 28 32 -  -  	jr z, SqrtChainAns
 1208 D1:CFCC 3D -  -  -  	dec a
 1209 D1:CFCD 28 3F -  -  	jr z, SqrtFunction
 1210 D1:CFCF C3 3A AF D1 	jp ErrorSyntax
 1211 D1:CFD3 -  -  -  -  SqrtNumber:
 1212 D1:CFD3 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1213 D1:CFD7 DD 27 FD -  	ld hl, (ix-3)
 1214 D1:CFDA E5 -  -  -  	push hl
 1215 D1:CFDB C1 -  -  -  	pop bc
 1216 D1:CFDC CD 54 01 00 	call __imulu
 1217 D1:CFE0 DD 2F FD -  	ld (ix-3), hl
 1218 D1:CFE3 C9 -  -  -  	ret
 1219 D1:CFE4 -  -  -  -  SqrtVariable:
 1220 D1:CFE4 DD 4E FD -  	ld c, (ix-3)
 1221 D1:CFE7 06 03 -  -  	ld b, 3
 1222 D1:CFE9 ED 4C -  -  	mlt bc
 1223 D1:CFEB 79 -  -  -  	ld a, c
 1224 D1:CFEC 21 DD 27 00 	ld hl, 00027DDh
 1225 D1:CFF0 CD 70 1D 02 	call _SetHLUToA
 1226 D1:CFF4 CD 50 AC D1 	call InsertHL															; ld hl, (ix+*)
 1227 D1:CFF8 18 08 -  -  	jr SqrtChainAns2
 1228 D1:CFFA -  -  -  -  SqrtChainPush:
 1229 D1:CFFA C3 74 AF D1 	jp UnknownError
 1230 D1:CFFE -  -  -  -  SqrtChainAns:
 1231 D1:CFFE CD BA AC D1 	call MaybeChangeDEToHL
 1232 D1:D002 -  -  -  -  SqrtChainAns2:
 1233 D1:D002 11 E5 C1 CD 	ld de, 0CDC1E5h
 1234 D1:D006 21 58 01 00 	ld hl, __imuls
 1235 D1:D00A C3 8F AC D1 	jp InsertDEHL															; push hl \ pop bc \ call __imuls
 1236 D1:D00E -  -  -  -  SqrtFunction:
 1237 D1:D00E DD 7E FD -  	ld a, (ix-3)
 1238 D1:D011 06 02 -  -  	ld b, OutputInHL
 1239 D1:D013 CD 3A AD D1 	call GetFunction
 1240 D1:D017 18 E9 -  -  	jr SqrtChainAns2
 1241 D1:D019 -  -  -  -  	
 1242 D1:D019 -  -  -  -  functionC:
 1243 D1:D019 3E 01 -  -  	ld a, 1
 1244 D1:D01B 32 63 EA D1 	ld (openedParensF), a
 1245 D1:D01F CD 28 10 02 	call _IncFetch
 1246 D1:D023 CD C6 B2 D1 	call ParseExpression
 1247 D1:D027 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
 1248 D1:D02B CA 3A AF D1 	jp z, ErrorSyntax
 1249 D1:D02F 2A 49 EA D1 	ld hl, (programPtr)
 1250 D1:D033 2B -  -  -  	dec hl
 1251 D1:D034 2B -  -  -  	dec hl
 1252 D1:D035 2B -  -  -  	dec hl
 1253 D1:D036 2B -  -  -  	dec hl
 1254 D1:D037 22 49 EA D1 	ld (programPtr), hl
 1255 D1:D03B 23 -  -  -  	inc hl
 1256 D1:D03C ED 27 -  -  	ld hl, (hl)
 1257 D1:D03E 11 4F 00 00 	ld de, AMOUNT_OF_C_FUNCTIONS
 1258 D1:D042 B7 -  -  -  	or a
 1259 D1:D043 ED 52 -  -  	sbc hl, de
 1260 D1:D045 D2 3A AF D1 	jp nc, ErrorSyntax
 1261 D1:D049 19 -  -  -  	add hl, de
 1262 D1:D04A 7D -  -  -  	ld a, l
 1263 D1:D04B B7 -  -  -  	or a
 1264 D1:D04C ED 62 -  -  	sbc hl, hl
 1265 D1:D04E 6F -  -  -  	ld l, a
 1266 D1:D04F 11 87 E8 D1 	ld de, CFunctionsArguments
 1267 D1:D053 19 -  -  -  	add hl, de
 1268 D1:D054 47 -  -  -  	ld b, a
 1269 D1:D055 7E -  -  -  	ld a, (hl)
 1270 D1:D056 FE E0 -  -  	cp %11100000
 1271 D1:D058 CA 80 AF D1 	jp z, ImplementError
 1272 D1:D05C FD 77 B0 -  	ld (iy+fFunction1), a
 1273 D1:D05F 07 -  -  -  	rlca
 1274 D1:D060 07 -  -  -  	rlca
 1275 D1:D061 07 -  -  -  	rlca
 1276 D1:D062 E6 07 -  -  	and 000000111b
 1277 D1:D064 4F -  -  -  	ld c, a
 1278 D1:D065 78 -  -  -  	ld a, b
 1279 D1:D066 06 03 -  -  	ld b, 3
 1280 D1:D068 ED 4C -  -  	mlt bc
 1281 D1:D06A 21 E2 E9 D1 	ld hl, CArguments
 1282 D1:D06E 09 -  -  -  	add hl, bc
 1283 D1:D06F ED 27 -  -  	ld hl, (hl)
 1284 D1:D071 32 0A E5 D1 	ld (CFunctionArgsSMC), a
 1285 D1:D075 E9 -  -  -  	jp (hl)
 1286 D1:D076 -  -  -  -  
 1287 D1:D076 -  -  -  -  functionCustom:
 1288 D1:D076 CD 28 10 02 	call _IncFetch
 1289 D1:D07A D6 0A -  -  	sub 10
 1290 D1:D07C DA 3A AF D1 	jp c, ErrorSyntax
 1291 D1:D080 FE 05 -  -  	cp AMOUNT_OF_CUSTOM_TOKENS + 1
 1292 D1:D082 D2 3A AF D1 	jp nc, ErrorSyntax
 1293 D1:D086 4F -  -  -  	ld c, a
 1294 D1:D087 06 03 -  -  	ld b, 3
 1295 D1:D089 ED 4C -  -  	mlt bc
 1296 D1:D08B 21 F7 E9 D1 	ld hl, functionCustomStart
 1297 D1:D08F 09 -  -  -  	add hl, bc
 1298 D1:D090 ED 27 -  -  	ld hl, (hl)
 1299 D1:D092 E9 -  -  -  	jp (hl)
 1300 D1:D093 -  -  -  -  	
 1301 D1:D093 -  -  -  -  functionExecHex:
 1302 D1:D093 CD 28 10 02 	call _IncFetch
 1303 D1:D097 D8 -  -  -  	ret c
 1304 D1:D098 FE 3F -  -  	cp tEnter
 1305 D1:D09A C8 -  -  -  	ret z
 1306 D1:D09B FE 2A -  -  	cp tString
 1307 D1:D09D C8 -  -  -  	ret z
 1308 D1:D09E 21 33 EA D1 	ld hl, hexadecimals
 1309 D1:D0A2 01 10 00 00 	ld bc, 16
 1310 D1:D0A6 ED B1 -  -  	cpir
 1311 D1:D0A8 C2 3A AF D1 _:	jp nz, ErrorSyntax
 1312 D1:D0AC 51 -  -  -  	ld d, c
 1313 D1:D0AD CD 28 10 02 	call _IncFetch
 1314 D1:D0B1 DA 3A AF D1 	jp c, ErrorSyntax
 1315 D1:D0B5 21 33 EA D1 	ld hl, hexadecimals
 1316 D1:D0B9 01 10 00 00 	ld bc, 16
 1317 D1:D0BD ED B1 -  -  	cpir
 1318 D1:D0BF 20 E7 -  -  	jr nz, -_
 1319 D1:D0C1 7A -  -  -  	ld a, d
 1320 D1:D0C2 87 -  -  -  	add a, a
 1321 D1:D0C3 87 -  -  -  	add a, a
 1322 D1:D0C4 87 -  -  -  	add a, a
 1323 D1:D0C5 87 -  -  -  	add a, a
 1324 D1:D0C6 81 -  -  -  	add a, c
 1325 D1:D0C7 CD 0E AD D1 	call InsertA
 1326 D1:D0CB 18 C6 -  -  	jr functionExecHex
 1327 D1:D0CD -  -  -  -  	
 1328 D1:D0CD -  -  -  -  functionRoot:
 1329 D1:D0CD 3E 01 -  -  	ld a, 1
 1330 D1:D0CF 32 64 EA D1 	ld (amountOfArguments), a
 1331 D1:D0D3 E5 -  -  -  	push hl
 1332 D1:D0D4 DD E1 -  -  	pop ix
 1333 D1:D0D6 DD 7E FC -  	ld a, (ix-4)
 1334 D1:D0D9 B7 -  -  -  	or a
 1335 D1:D0DA 28 10 -  -  	jr z, RootNumber
 1336 D1:D0DC 3D -  -  -  	dec a
 1337 D1:D0DD 28 20 -  -  	jr z, RootVariable
 1338 D1:D0DF 3D -  -  -  	dec a
 1339 D1:D0E0 28 33 -  -  	jr z, RootChainPush
 1340 D1:D0E2 3D -  -  -  	dec a
 1341 D1:D0E3 28 34 -  -  	jr z, RootChainAns
 1342 D1:D0E5 3D -  -  -  	dec a
 1343 D1:D0E6 28 6A -  -  	jr z, RootFunction
 1344 D1:D0E8 C3 3A AF D1 	jp ErrorSyntax
 1345 D1:D0EC -  -  -  -  RootNumber:
 1346 D1:D0EC FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1347 D1:D0F0 DD 27 FD -  	ld hl, (ix-3)
 1348 D1:D0F3 FD E5 -  -  	push iy
 1349 D1:D0F5 CD D6 EE D1 		call RootRoutine
 1350 D1:D0F9 FD E1 -  -  	pop iy
 1351 D1:D0FB DD 2F FD -  	ld (ix-3), hl
 1352 D1:D0FE C9 -  -  -  	ret
 1353 D1:D0FF -  -  -  -  RootVariable:
 1354 D1:D0FF DD 4E FD -  	ld c, (ix-3)
 1355 D1:D102 06 03 -  -  	ld b, 3
 1356 D1:D104 ED 4C -  -  	mlt bc
 1357 D1:D106 79 -  -  -  	ld a, c
 1358 D1:D107 21 DD 27 00 	ld hl, 00027DDh
 1359 D1:D10B CD 70 1D 02 	call _SetHLUToA
 1360 D1:D10F CD 50 AC D1 	call InsertHL															; ld hl, (ix+*)
 1361 D1:D113 18 04 -  -  	jr RootChainAns
 1362 D1:D115 -  -  -  -  RootChainPush:
 1363 D1:D115 C3 74 AF D1 	jp UnknownError
 1364 D1:D119 -  -  -  -  RootChainAns:
 1365 D1:D119 FD CB CF 46 	bit has_already_root, (iy+fProgram2)
 1366 D1:D11D FD CB CF C6 	set has_already_root, (iy+fProgram2)
 1367 D1:D121 20 1D -  -  	jr nz, RootChainAnsRecallRoutine
 1368 D1:D123 -  -  -  -  RootChainAnsAddRoutine:
 1369 D1:D123 FD CB B0 CE 	set modified_iy, (iy+fAlways1)
 1370 D1:D127 ED 5B 5E EA 
              D1 -  -  -  	ld de, (programDataDataPtr)
 1371 D1:D12C ED 53 30 EA 
              D0 -  -  -  	ld (RootStartData), de
 1372 D1:D131 21 D6 EE D1 	ld hl, RootRoutine
 1373 D1:D135 01 2D 00 00 	ld bc, RootRoutineEnd - RootRoutine
 1374 D1:D139 ED B0 -  -  	ldir
 1375 D1:D13B ED 53 5E EA 
              D1 -  -  -  	ld (programDataDataPtr), de
 1376 D1:D140 -  -  -  -  RootChainAnsRecallRoutine:
 1377 D1:D140 3E CD -  -  	ld a, 0CDh
 1378 D1:D142 CD 0E AD D1 	call InsertA															; call *
 1379 D1:D146 CD 25 AD D1 	call InsertProgramPtrToDataOffset
 1380 D1:D14A 2A 30 EA D0 	ld hl, (RootStartData)
 1381 D1:D14E C3 50 AC D1 	jp InsertHL																; call *
 1382 D1:D152 -  -  -  -  RootFunction:
 1383 D1:D152 DD 7E FD -  	ld a, (ix-3)
 1384 D1:D155 06 02 -  -  	ld b, OutputInHL
 1385 D1:D157 CD 3A AD D1 	call GetFunction
 1386 D1:D15B 18 BC -  -  	jr RootChainAns
 1387 D1:D15D -  -  -  -  	
 1388 D1:D15D -  -  -  -  	
 1389 D1:D15D -  -  -  -  	
 1390 D1:D15D -  -  -  -  	
 1391 D1:D15D -  -  -  -  	
 1392 D1:D15D -  -  -  -  	
 1393 D1:D15D -  -  -  -  	
 1394 D1:D15D -  -  -  -  functionDefineSprite:
 1395 D1:D15D FD CB D0 7E 	bit used_code, (iy+fProgram1)
 1396 D1:D161 C2 62 AF D1 	jp nz, ErrorUsedCode
 1397 D1:D165 3E 01 -  -  	ld a, 1
 1398 D1:D167 32 63 EA D1 	ld (openedParensF), a
 1399 D1:D16B CD 25 AD D1 	call InsertProgramPtrToDataOffset
 1400 D1:D16F 2A 5E EA D1 	ld hl, (programDataDataPtr)
 1401 D1:D173 E5 -  -  -  	push hl
 1402 D1:D174 D1 -  -  -  	pop de
 1403 D1:D175 CD 50 AC D1 	call InsertHL
 1404 D1:D179 06 02 -  -  	ld b, 2
 1405 D1:D17B D5 -  -  -  _:	push de
 1406 D1:D17C C5 -  -  -  		push bc
 1407 D1:D17D CD 28 10 02 			call _IncFetch
 1408 D1:D181 CD C6 B2 D1 			call ParseExpression
 1409 D1:D185 FD CB C0 66 			bit output_is_number, (iy+fExpression1)
 1410 D1:D189 CA 3A AF D1 			jp z, ErrorSyntax
 1411 D1:D18D FD CB BE 46 			bit triggered_a_comma, (iy+fExpression3)
 1412 D1:D191 CA 3A AF D1 			jp z, ErrorSyntax
 1413 D1:D195 2A 49 EA D1 			ld hl, (programPtr)
 1414 D1:D199 2B -  -  -  			dec hl
 1415 D1:D19A 2B -  -  -  			dec hl
 1416 D1:D19B 2B -  -  -  			dec hl
 1417 D1:D19C 2B -  -  -  			dec hl
 1418 D1:D19D 22 49 EA D1 			ld (programPtr), hl
 1419 D1:D1A1 23 -  -  -  			inc hl
 1420 D1:D1A2 7E -  -  -  			ld a, (hl)
 1421 D1:D1A3 C1 -  -  -  		pop bc
 1422 D1:D1A4 D1 -  -  -  	pop de
 1423 D1:D1A5 12 -  -  -  	ld (de), a
 1424 D1:D1A6 13 -  -  -  	inc de
 1425 D1:D1A7 10 D2 -  -  	djnz -_
 1426 D1:D1A9 2A 49 EA D1 	ld hl, (programPtr)
 1427 D1:D1AD E5 -  -  -  	push hl
 1428 D1:D1AE ED 53 49 EA 
              D1 -  -  -  		ld (programPtr), de
 1429 D1:D1B3 CD 28 10 02 		call _IncFetch
 1430 D1:D1B7 FE 2A -  -  		cp tString
 1431 D1:D1B9 C2 3A AF D1 		jp nz, ErrorSyntax
 1432 D1:D1BD CD C0 0F 02 		call _NxtFetch
 1433 D1:D1C1 DA 3A AF D1 		jp c, ErrorSyntax
 1434 D1:D1C5 FE 3F -  -  		cp tEnter
 1435 D1:D1C7 CA 3A AF D1 		jp z, ErrorSyntax
 1436 D1:D1CB CD 93 D0 D1 		call functionExecHex
 1437 D1:D1CF 2A 49 EA D1 		ld hl, (programPtr)
 1438 D1:D1D3 22 5E EA D1 		ld (programDataDataPtr), hl
 1439 D1:D1D7 E1 -  -  -  	pop hl
 1440 D1:D1D8 22 49 EA D1 	ld (programPtr), hl
 1441 D1:D1DC C9 -  -  -  	ret
 1442 D1:D1DD -  -  -  -  	
 1443 D1:D1DD -  -  -  -  functionCompilePrgm:
 1444 D1:D1DD 21 F8 05 D0 	ld hl, OP1
 1445 D1:D1E1 CD 2F B2 D1 	call GetProgramName
 1446 D1:D1E5 3E 05 -  -  	ld a, ProgObj
 1447 D1:D1E7 32 F8 05 D0 	ld (OP1), a
 1448 D1:D1EB CD 0C 05 02 	call _ChkFindSym
 1449 D1:D1EF 30 0D -  -  	jr nc, +_
 1450 D1:D1F1 21 F8 05 D0 	ld hl, OP1
 1451 D1:D1F5 34 -  -  -  	inc (hl)
 1452 D1:D1F6 CD 0C 05 02 	call _ChkFindSym
 1453 D1:D1FA DA 5C AF D1 	jp c, ErrorNotFound
 1454 D1:D1FE CD 98 1F 02 _:	call _ChkInRAM
 1455 D1:D202 30 0A -  -  	jr nc, +_
 1456 D1:D204 EB -  -  -  	ex de, hl
 1457 D1:D205 11 09 00 00 	ld de, 9
 1458 D1:D209 19 -  -  -  	add hl, de
 1459 D1:D20A 5E -  -  -  	ld e, (hl)
 1460 D1:D20B 19 -  -  -  	add hl, de
 1461 D1:D20C 23 -  -  -  	inc hl
 1462 D1:D20D EB -  -  -  	ex de, hl
 1463 D1:D20E 2A F8 05 D0 _:	ld hl, (OP1)
 1464 D1:D212 E5 -  -  -  	push hl
 1465 D1:D213 2A FB 05 D0 		ld hl, (OP1+3)
 1466 D1:D217 E5 -  -  -  		push hl
 1467 D1:D218 2A FE 05 D0 			ld hl, (OP1+6)
 1468 D1:D21C E5 -  -  -  			push hl
 1469 D1:D21D 2A 17 23 D0 				ld hl, (begPC)
 1470 D1:D221 E5 -  -  -  				push hl
 1471 D1:D222 2A 1A 23 D0 					ld hl, (curPC)
 1472 D1:D226 E5 -  -  -  					push hl
 1473 D1:D227 2A 1D 23 D0 						ld hl, (endPC)
 1474 D1:D22B E5 -  -  -  						push hl
 1475 D1:D22C EB -  -  -  							ex de, hl
 1476 D1:D22D 01 00 00 00 							ld bc, 0
 1477 D1:D231 4E -  -  -  							ld c, (hl)
 1478 D1:D232 23 -  -  -  							inc hl
 1479 D1:D233 22 1A 23 D0 							ld (curPC), hl
 1480 D1:D237 46 -  -  -  							ld b, (hl)
 1481 D1:D238 23 -  -  -  							inc hl
 1482 D1:D239 22 17 23 D0 							ld (begPC), hl
 1483 D1:D23D 09 -  -  -  							add hl, bc
 1484 D1:D23E 2B -  -  -  							dec hl
 1485 D1:D23F 22 1D 23 D0 							ld (endPC), hl
 1486 D1:D243 CD F9 B0 D1 							call PrintCompilingProgram
 1487 D1:D247 21 6C EA D1 							ld hl, AmountOfSubPrograms
 1488 D1:D24B 34 -  -  -  							inc (hl)
 1489 D1:D24C CD 70 AA D1 							call CompileProgramFull
 1490 D1:D250 E1 -  -  -  						pop hl
 1491 D1:D251 22 1D 23 D0 						ld (endPC), hl
 1492 D1:D255 E1 -  -  -  					pop hl
 1493 D1:D256 22 1A 23 D0 					ld (curPC), hl
 1494 D1:D25A E1 -  -  -  				pop hl
 1495 D1:D25B 22 17 23 D0 				ld (begPC), hl
 1496 D1:D25F E1 -  -  -  			pop hl
 1497 D1:D260 22 FE 05 D0 			ld (OP1+6), hl
 1498 D1:D264 E1 -  -  -  		pop hl
 1499 D1:D265 22 FB 05 D0 		ld (OP1+3), hl
 1500 D1:D269 E1 -  -  -  	pop hl
 1501 D1:D26A 22 F8 05 D0 	ld (OP1), hl
 1502 D1:D26E C3 F9 B0 D1 	jp PrintCompilingProgram
Listing for file "ice.asm"
  447 D1:D272 -  -  -  -  #include "operators functions/operators.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\operators.asm"
    1 D1:D272 -  -  -  -  ExecuteOperator:
    2 D1:D272 32 20 EA D0 	ld (tempToken2), a
    3 D1:D276 21 6B EA D1 	ld hl, ExprOutput2
    4 D1:D27A 36 01 -  -  	ld (hl), OutputIsInHL
    5 D1:D27C B7 -  -  -  	or a
    6 D1:D27D CA C7 D2 D1 	jp z, ListElementXXX
    7 D1:D281 FE 6D -  -  	cp tLE
    8 D1:D283 CC AB DA D1 	call z, SwapLEToGE
    9 D1:D287 FE 6B -  -  	cp tLT
   10 D1:D289 CC AF DA D1 	call z, SwapLTToGT
   11 D1:D28D 32 1F EA D0 	ld (tempToken), a
   12 D1:D291 C5 -  -  -  	push bc
   13 D1:D292 21 D6 E8 D1 		ld hl, operators_booleans
   14 D1:D296 01 0E 00 00 		ld bc, 14
   15 D1:D29A ED B1 -  -  		cpir
   16 D1:D29C 21 E5 E8 D1 		ld hl, operators_special
   17 D1:D2A0 09 -  -  -  		add hl, bc
   18 D1:D2A1 4E -  -  -  		ld c, (hl)
   19 D1:D2A2 79 -  -  -  		ld a, c
   20 D1:D2A3 FE 04 -  -  		cp 4
   21 D1:D2A5 20 04 -  -  		jr nz, +_
   22 D1:D2A7 FD CB C0 EE 		set ans_set_z_flag, (iy+fExpression1)
   23 D1:D2AB 06 12 -  -  _:		ld b, 18
   24 D1:D2AD ED 4C -  -  		mlt bc
   25 D1:D2AF 21 52 E9 D1 		ld hl, operator_start											; start of bunch jumps
   26 D1:D2B3 09 -  -  -  		add hl, bc														; start of right operator
   27 D1:D2B4 DD 7E F8 -  		ld a, (ix-8)
   28 D1:D2B7 4F -  -  -  		ld c, a
   29 D1:D2B8 FE 06 -  -  		cp 6
   30 D1:D2BA D2 3A AF D1 		jp nc, ErrorSyntax
   31 D1:D2BE 06 03 -  -  		ld b, 3
   32 D1:D2C0 ED 4C -  -  		mlt bc
   33 D1:D2C2 09 -  -  -  		add hl, bc														; start of right subelement
   34 D1:D2C3 ED 27 -  -  		ld hl, (hl)
   35 D1:D2C5 C1 -  -  -  	pop bc
   36 D1:D2C6 E9 -  -  -  	jp (hl)
   37 D1:D2C7 -  -  -  -  	
   38 D1:D2C7 -  -  -  -  ListElementXXX:
   39 D1:D2C7 DD 7E FC -  	ld a, (ix-4)
   40 D1:D2CA B7 -  -  -  	or a
   41 D1:D2CB 28 0C -  -  	jr z, ListElementNumber
   42 D1:D2CD 3D -  -  -  	dec a
   43 D1:D2CE 28 14 -  -  	jr z, ListElementVariable
   44 D1:D2D0 3D -  -  -  	dec a
   45 D1:D2D1 28 17 -  -  	jr z, ListElementChainPush
   46 D1:D2D3 3D -  -  -  	dec a
   47 D1:D2D4 28 18 -  -  	jr z, ListElementChainAns
   48 D1:D2D6 3D -  -  -  	dec a
   49 D1:D2D7 28 31 -  -  	jr z, ListElementFunction
   50 D1:D2D9 -  -  -  -  ListElementNumber:
   51 D1:D2D9 3E 2A -  -  	ld a, 02Ah
   52 D1:D2DB C5 -  -  -  	push bc
   53 D1:D2DC E1 -  -  -  	pop hl
   54 D1:D2DD 19 -  -  -  	add hl, de
   55 D1:D2DE 19 -  -  -  	add hl, de
   56 D1:D2DF 19 -  -  -  	add hl, de
   57 D1:D2E0 C3 4C AC D1 	jp InsertAHL															; ld hl, (*)
   58 D1:D2E4 -  -  -  -  ListElementVariable:
   59 D1:D2E4 CD 6E AC D1 	call InsertIXE															; ld de, (ix+*)
   60 D1:D2E8 18 08 -  -  	jr +_
   61 D1:D2EA -  -  -  -  ListElementChainPush:
   62 D1:D2EA C3 74 AF D1 	jp UnknownError
   63 D1:D2EE -  -  -  -  ListElementChainAns:
   64 D1:D2EE CD B0 AC D1 	call MaybeChangeHLToDE
   65 D1:D2F2 3E 21 -  -  _:	ld a, 021h
   66 D1:D2F4 C5 -  -  -  	push bc
   67 D1:D2F5 D1 -  -  -  	pop de
   68 D1:D2F6 21 19 19 19 	ld hl, 0191919h
   69 D1:D2FA CD 8B AC D1 	call InsertADEHL														; ld hl, * \ add hl, de \ add hl, de \ add hl, de
   70 D1:D2FE 3E ED -  -  	ld a, 0EDh
   71 D1:D300 CD 0E AD D1 	call InsertA															; ld hl, (hl) (1)
   72 D1:D304 3E 27 -  -  	ld a, 027h
   73 D1:D306 C3 0E AD D1 	jp InsertA																; ld hl, (hl) (2)
   74 D1:D30A -  -  -  -  ListElementFunction:
   75 D1:D30A 7B -  -  -  	ld a, e
   76 D1:D30B 06 01 -  -  	ld b, OutputInDE
   77 D1:D30D CD 3A AD D1 	call GetFunction
   78 D1:D311 18 DF -  -  	jr -_
   79 D1:D313 -  -  -  -  	
   80 D1:D313 -  -  -  -  SubNumberXXX:
   81 D1:D313 DD 7E FC -  	ld a, (ix-4)
   82 D1:D316 B7 -  -  -  	or a
   83 D1:D317 28 10 -  -  	jr z, SubNumberNumber
   84 D1:D319 3D -  -  -  	dec a
   85 D1:D31A 28 1A -  -  	jr z, SubNumberVariable
   86 D1:D31C 3D -  -  -  	dec a
   87 D1:D31D 28 23 -  -  	jr z, SubNumberChainPush
   88 D1:D31F 3D -  -  -  	dec a
   89 D1:D320 28 24 -  -  	jr z, SubNumberChainAns
   90 D1:D322 3D -  -  -  	dec a
   91 D1:D323 28 31 -  -  	jr z, SubNumberFunction
   92 D1:D325 C3 CF AE D1 	jp SubError
   93 D1:D329 -  -  -  -  SubNumberNumber:
   94 D1:D329 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
   95 D1:D32D C5 -  -  -  	push bc
   96 D1:D32E E1 -  -  -  	pop hl
   97 D1:D32F B7 -  -  -  	or a
   98 D1:D330 ED 52 -  -  	sbc hl, de
   99 D1:D332 DD 2F F9 -  	ld (ix-7), hl
  100 D1:D335 C9 -  -  -  	ret
  101 D1:D336 -  -  -  -  SubNumberVariable:
  102 D1:D336 3E 21 -  -  	ld a, 021h
  103 D1:D338 C5 -  -  -  	push bc
  104 D1:D339 E1 -  -  -  	pop hl
  105 D1:D33A CD 4C AC D1 	call InsertAHL															; ld hl, *
  106 D1:D33E C3 67 D4 D1 	jp SubChainAnsVariable
  107 D1:D342 -  -  -  -  SubNumberChainPush:
  108 D1:D342 C3 74 AF D1 	jp UnknownError
  109 D1:D346 -  -  -  -  SubNumberChainAns:
  110 D1:D346 CD B0 AC D1 	call MaybeChangeHLToDE
  111 D1:D34A 3E 21 -  -  	ld a, 021h
  112 D1:D34C C5 -  -  -  	push bc
  113 D1:D34D D1 -  -  -  	pop de
  114 D1:D34E 21 B7 ED 52 	ld hl, 052EDB7h
  115 D1:D352 C3 8B AC D1 	jp InsertADEHL															; ld hl, * \ or a \ sbc hl, de
  116 D1:D356 -  -  -  -  SubNumberFunction:
  117 D1:D356 7B -  -  -  	ld a, e
  118 D1:D357 C5 -  -  -  	push bc
  119 D1:D358 06 01 -  -  		ld b, OutputInDE
  120 D1:D35A CD 3A AD D1 		call GetFunction
  121 D1:D35E 3E 21 -  -  		ld a, 021h
  122 D1:D360 D1 -  -  -  	pop de
  123 D1:D361 21 B7 ED 52 	ld hl, 052EDB7h
  124 D1:D365 C3 8B AC D1 	jp InsertADEHL															; ld hl, * \ or a \ sbc hl, de
  125 D1:D369 -  -  -  -  SubVariableXXX:
  126 D1:D369 DD 7E FC -  	ld a, (ix-4)
  127 D1:D36C B7 -  -  -  	or a
  128 D1:D36D 28 12 -  -  	jr z, SubVariableNumber
  129 D1:D36F 3D -  -  -  	dec a
  130 D1:D370 28 17 -  -  	jr z, SubVariableVariable
  131 D1:D372 3D -  -  -  	dec a
  132 D1:D373 28 2E -  -  	jr z, SubVariableChainPush
  133 D1:D375 3D -  -  -  	dec a
  134 D1:D376 28 2F -  -  	jr z, SubVariableChainAns
  135 D1:D378 3D -  -  -  	dec a
  136 D1:D379 CA B7 D3 D1 	jp z, SubVariableFunction
  137 D1:D37D C3 CF AE D1 	jp SubError
  138 D1:D381 -  -  -  -  SubVariableNumber:
  139 D1:D381 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  140 D1:D385 C3 24 D4 D1 	jp SubChainAnsNumber
  141 D1:D389 -  -  -  -  SubVariableVariable:
  142 D1:D389 79 -  -  -  	ld a, c
  143 D1:D38A BB -  -  -  	cp e
  144 D1:D38B 20 0E -  -  	jr nz, +_
  145 D1:D38D FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  146 D1:D391 36 00 -  -  	ld (hl), typeNumber
  147 D1:D393 11 00 00 00 	ld de, 0
  148 D1:D397 23 -  -  -  	inc hl
  149 D1:D398 ED 1F -  -  	ld (hl), de
  150 D1:D39A C9 -  -  -  	ret
  151 D1:D39B CD 65 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  152 D1:D39F C3 67 D4 D1 	jp SubChainAnsVariable
  153 D1:D3A3 -  -  -  -  SubVariableChainPush:
  154 D1:D3A3 C3 74 AF D1 	jp UnknownError
  155 D1:D3A7 -  -  -  -  SubVariableChainAns:
  156 D1:D3A7 CD B0 AC D1 	call MaybeChangeHLToDE
  157 D1:D3AB CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  158 D1:D3AF 21 B7 ED 52 	ld hl, 052EDB7h
  159 D1:D3B3 C3 50 AC D1 	jp InsertHL																; or a \ sbc hl, de
  160 D1:D3B7 -  -  -  -  SubVariableFunction:
  161 D1:D3B7 7B -  -  -  	ld a, e
  162 D1:D3B8 06 01 -  -  	ld b, OutputInDE
  163 D1:D3BA CD 3A AD D1 	call GetFunction
  164 D1:D3BE CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  165 D1:D3C2 21 B7 ED 52 	ld hl, 052EDB7h
  166 D1:D3C6 C3 50 AC D1 	jp InsertHL																; or a \ sbc hl, de
  167 D1:D3CA -  -  -  -  SubChainPushXXX:
  168 D1:D3CA DD 7E FC -  	ld a, (ix-4)
  169 D1:D3CD B7 -  -  -  	or a
  170 D1:D3CE 28 12 -  -  	jr z, SubChainPushNumber
  171 D1:D3D0 3D -  -  -  	dec a
  172 D1:D3D1 28 17 -  -  	jr z, SubChainPushVariable
  173 D1:D3D3 3D -  -  -  	dec a
  174 D1:D3D4 28 1C -  -  	jr z, SubChainPushChainPush
  175 D1:D3D6 3D -  -  -  	dec a
  176 D1:D3D7 28 1D -  -  	jr z, SubChainPushChainAns
  177 D1:D3D9 3D -  -  -  	dec a
  178 D1:D3DA CA 04 D4 D1 	jp z, SubChainPushFunction
  179 D1:D3DE C3 CF AE D1 	jp SubError
  180 D1:D3E2 -  -  -  -  SubChainPushNumber:
  181 D1:D3E2 3E E1 -  -  	ld a, 0E1h
  182 D1:D3E4 CD 0E AD D1 	call InsertA															; pop hl
  183 D1:D3E8 18 3A -  -  	jr SubChainAnsNumber
  184 D1:D3EA -  -  -  -  SubChainPushVariable:
  185 D1:D3EA 3E E1 -  -  	ld a, 0E1h
  186 D1:D3EC CD 0E AD D1 	call InsertA															; pop hl
  187 D1:D3F0 18 75 -  -  	jr SubChainAnsVariable
  188 D1:D3F2 -  -  -  -  SubChainPushChainPush:
  189 D1:D3F2 C3 74 AF D1 	jp UnknownError
  190 D1:D3F6 -  -  -  -  SubChainPushChainAns:
  191 D1:D3F6 CD B0 AC D1 	call MaybeChangeHLToDE
  192 D1:D3FA 3E E1 -  -  	ld a, 0E1h
  193 D1:D3FC 21 B7 ED 52 	ld hl, 052EDB7h
  194 D1:D400 C3 4C AC D1 	jp InsertAHL															; pop hl \ or a \ sbc hl, de
  195 D1:D404 -  -  -  -  SubChainPushFunction:
  196 D1:D404 3E E1 -  -  	ld a, 0E1h
  197 D1:D406 CD 0E AD D1 	call InsertA															; pop hl
  198 D1:D40A 18 73 -  -  	jr SubChainAnsFunction
  199 D1:D40C -  -  -  -  SubChainAnsXXX:
  200 D1:D40C DD 7E FC -  	ld a, (ix-4)
  201 D1:D40F B7 -  -  -  	or a
  202 D1:D410 28 12 -  -  	jr z, SubChainAnsNumber
  203 D1:D412 3D -  -  -  	dec a
  204 D1:D413 28 52 -  -  	jr z, SubChainAnsVariable
  205 D1:D415 3D -  -  -  	dec a
  206 D1:D416 28 5F -  -  	jr z, SubChainAnsChainPush
  207 D1:D418 3D -  -  -  	dec a
  208 D1:D419 28 60 -  -  	jr z, SubChainAnsChainAns
  209 D1:D41B 3D -  -  -  	dec a
  210 D1:D41C CA 7F D4 D1 	jp z, SubChainAnsFunction
  211 D1:D420 C3 CF AE D1 	jp SubError
  212 D1:D424 -  -  -  -  SubChainAnsNumber:
  213 D1:D424 B7 -  -  -  	or a
  214 D1:D425 ED 62 -  -  	sbc hl, hl
  215 D1:D427 EB -  -  -  	ex de, hl
  216 D1:D428 ED 52 -  -  	sbc hl, de
  217 D1:D42A C8 -  -  -  	ret z
  218 D1:D42B 1E 07 -  -  	ld e, 7
  219 D1:D42D ED 52 -  -  	sbc hl, de
  220 D1:D42F 30 1C -  -  	jr nc, SubHLDE
  221 D1:D431 19 -  -  -  	add hl, de
  222 D1:D432 45 -  -  -  	ld b, l
  223 D1:D433 3A 6A EA D1 	ld a, (ExprOutput)
  224 D1:D437 B7 -  -  -  	or a
  225 D1:D438 28 09 -  -  	jr z, ++_
  226 D1:D43A 3E 2B -  -  	ld a, 02Bh
  227 D1:D43C CD 0E AD D1 _:	call InsertA															; dec hl/de
  228 D1:D440 10 FA -  -  	djnz -_
  229 D1:D442 C9 -  -  -  	ret
  230 D1:D443 3E 00 -  -  _:	ld a, OutputIsInDE
  231 D1:D445 32 6B EA D1 	ld (ExprOutput2), a
  232 D1:D449 3E 1B -  -  	ld a, 01Bh
  233 D1:D44B 18 EF -  -  	jr --_
  234 D1:D44D -  -  -  -  SubHLDE:
  235 D1:D44D 19 -  -  -  	add hl, de
  236 D1:D44E CD 60 01 00 	call __ineg
  237 D1:D452 3A 6A EA D1 	ld a, (ExprOutput)
  238 D1:D456 B7 -  -  -  	or a
  239 D1:D457 3E 11 -  -  	ld a, 011h
  240 D1:D459 20 02 -  -  	jr nz, +_
  241 D1:D45B 3E 21 -  -  	ld a, 021h
  242 D1:D45D CD 4C AC D1 _:	call InsertAHL															; ld hl/de, 16777215-*
  243 D1:D461 3E 19 -  -  	ld a, 019h
  244 D1:D463 C3 0E AD D1 	jp InsertA																; add hl, de
  245 D1:D467 -  -  -  -  SubChainAnsVariable:
  246 D1:D467 CD BA AC D1 	call MaybeChangeDEToHL
  247 D1:D46B CD 6E AC D1 	call InsertIXE															; ld de, (ix+*)
  248 D1:D46F 21 B7 ED 52 	ld hl, 052EDB7h
  249 D1:D473 C3 50 AC D1 	jp InsertHL																; or a \ sbc hl, de
  250 D1:D477 -  -  -  -  SubChainAnsChainPush:
  251 D1:D477 C3 74 AF D1 	jp UnknownError
  252 D1:D47B -  -  -  -  SubChainAnsChainAns:
  253 D1:D47B C3 74 AF D1 	jp UnknownError
  254 D1:D47F -  -  -  -  SubChainAnsFunction:
  255 D1:D47F 3A 6A EA D1 	ld a, (ExprOutput)
  256 D1:D483 87 -  -  -  	add a, a
  257 D1:D484 87 -  -  -  	add a, a
  258 D1:D485 87 -  -  -  	add a, a
  259 D1:D486 87 -  -  -  	add a, a
  260 D1:D487 C6 D5 -  -  	add a, 0D5h
  261 D1:D489 CD 0E AD D1 	call InsertA															; push hl/de
  262 D1:D48D 7B -  -  -  	ld a, e
  263 D1:D48E 06 01 -  -  	ld b, OutputInDE
  264 D1:D490 CD 3A AD D1 	call GetFunction
  265 D1:D494 3E E1 -  -  	ld a, 0E1h
  266 D1:D496 21 B7 ED 52 	ld hl, 052EDB7h
  267 D1:D49A C3 4C AC D1 	jp InsertAHL															; pop hl \ or a \ sbc hl, de
  268 D1:D49E -  -  -  -  SubFunctionXXX:
  269 D1:D49E DD 7E FC -  	ld a, (ix-4)
  270 D1:D4A1 B7 -  -  -  	or a
  271 D1:D4A2 28 10 -  -  	jr z, SubFunctionNumber
  272 D1:D4A4 3D -  -  -  	dec a
  273 D1:D4A5 28 18 -  -  	jr z, SubFunctionVariable
  274 D1:D4A7 3D -  -  -  	dec a
  275 D1:D4A8 28 20 -  -  	jr z, SubFunctionChainPush
  276 D1:D4AA 3D -  -  -  	dec a
  277 D1:D4AB 28 21 -  -  	jr z, SubFunctionChainAns
  278 D1:D4AD 3D -  -  -  	dec a
  279 D1:D4AE 28 3D -  -  	jr z, SubFunctionFunction
  280 D1:D4B0 C3 CF AE D1 	jp SubError
  281 D1:D4B4 -  -  -  -  SubFunctionNumber:
  282 D1:D4B4 79 -  -  -  	ld a, c
  283 D1:D4B5 06 02 -  -  	ld b, OutputInHL
  284 D1:D4B7 CD 3A AD D1 	call GetFunction
  285 D1:D4BB C3 24 D4 D1 	jp SubChainAnsNumber
  286 D1:D4BF -  -  -  -  SubFunctionVariable:
  287 D1:D4BF 79 -  -  -  	ld a, c
  288 D1:D4C0 06 02 -  -  	ld b, OutputInHL
  289 D1:D4C2 CD 3A AD D1 	call GetFunction
  290 D1:D4C6 C3 67 D4 D1 	jp SubChainAnsVariable
  291 D1:D4CA -  -  -  -  SubFunctionChainPush:
  292 D1:D4CA C3 74 AF D1 	jp UnknownError
  293 D1:D4CE -  -  -  -  SubFunctionChainAns:
  294 D1:D4CE 3A 6A EA D1 	ld a, (ExprOutput)
  295 D1:D4D2 87 -  -  -  	add a, a
  296 D1:D4D3 87 -  -  -  	add a, a
  297 D1:D4D4 87 -  -  -  	add a, a
  298 D1:D4D5 87 -  -  -  	add a, a
  299 D1:D4D6 C6 D5 -  -  	add a, 0D5h
  300 D1:D4D8 CD 0E AD D1 	call InsertA															; push hl/de
  301 D1:D4DC 79 -  -  -  	ld a, c
  302 D1:D4DD 06 02 -  -  	ld b, OutputInHL
  303 D1:D4DF CD 3A AD D1 	call GetFunction
  304 D1:D4E3 3E E1 -  -  	ld a, 0E1h
  305 D1:D4E5 21 B7 ED 52 	ld hl, 052EDB7h
  306 D1:D4E9 C3 4C AC D1 	jp InsertAHL															; pop de \ or a \ sbc hl, de
  307 D1:D4ED -  -  -  -  SubFunctionFunction:
  308 D1:D4ED 7B -  -  -  	ld a, e
  309 D1:D4EE 06 02 -  -  	ld b, OutputInHL
  310 D1:D4F0 CD 3A AD D1 	call GetFunction
  311 D1:D4F4 79 -  -  -  	ld a, c
  312 D1:D4F5 06 01 -  -  	ld b, OutputInDE
  313 D1:D4F7 FD CB C0 F6 	set need_push, (iy+fExpression1)
  314 D1:D4FB CD 3A AD D1 	call GetFunction
  315 D1:D4FF 21 B7 ED 52 	ld hl, 052EDB7h
  316 D1:D503 C3 50 AC D1 	jp InsertHL																; or a \ sbc hl, de
  317 D1:D507 -  -  -  -  
  318 D1:D507 -  -  -  -  AddNumberXXX:
  319 D1:D507 DD 7E FC -  	ld a, (ix-4)
  320 D1:D50A B7 -  -  -  	or a
  321 D1:D50B 28 10 -  -  	jr z, AddNumberNumber
  322 D1:D50D 3D -  -  -  	dec a
  323 D1:D50E 28 17 -  -  	jr z, AddNumberVariable
  324 D1:D510 3D -  -  -  	dec a
  325 D1:D511 28 1B -  -  	jr z, AddNumberChainPush
  326 D1:D513 3D -  -  -  	dec a
  327 D1:D514 28 1C -  -  	jr z, AddNumberChainAns
  328 D1:D516 3D -  -  -  	dec a
  329 D1:D517 28 1F -  -  	jr z, AddNumberFunction
  330 D1:D519 C3 D3 AE D1 	jp AddError
  331 D1:D51D -  -  -  -  AddNumberNumber:
  332 D1:D51D FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  333 D1:D521 EB -  -  -  	ex de, hl
  334 D1:D522 09 -  -  -  	add hl, bc
  335 D1:D523 DD 2F F9 -  	ld (ix-7), hl
  336 D1:D526 C9 -  -  -  	ret
  337 D1:D527 -  -  -  -  AddNumberVariable:
  338 D1:D527 C5 -  -  -  	push bc
  339 D1:D528 E1 -  -  -  	pop hl
  340 D1:D529 EB -  -  -  	ex de, hl
  341 D1:D52A E5 -  -  -  	push hl
  342 D1:D52B C1 -  -  -  	pop bc
  343 D1:D52C 18 2B -  -  	jr AddVariableNumber
  344 D1:D52E -  -  -  -  AddNumberChainPush:
  345 D1:D52E C3 74 AF D1 	jp UnknownError
  346 D1:D532 -  -  -  -  AddNumberChainAns:
  347 D1:D532 C5 -  -  -  	push bc
  348 D1:D533 D1 -  -  -  	pop de
  349 D1:D534 C3 EC D5 D1 	jp AddChainAnsNumber
  350 D1:D538 -  -  -  -  AddNumberFunction:
  351 D1:D538 C5 -  -  -  	push bc
  352 D1:D539 E1 -  -  -  	pop hl
  353 D1:D53A EB -  -  -  	ex de, hl
  354 D1:D53B E5 -  -  -  	push hl
  355 D1:D53C C1 -  -  -  	pop bc
  356 D1:D53D C3 8A D6 D1 	jp AddFunctionNumber
  357 D1:D541 -  -  -  -  AddVariableXXX:
  358 D1:D541 DD 7E FC -  	ld a, (ix-4)
  359 D1:D544 B7 -  -  -  	or a
  360 D1:D545 28 12 -  -  	jr z, AddVariableNumber
  361 D1:D547 3D -  -  -  	dec a
  362 D1:D548 28 17 -  -  	jr z, AddVariableVariable
  363 D1:D54A 3D -  -  -  	dec a
  364 D1:D54B 28 1C -  -  	jr z, AddVariableChainPush
  365 D1:D54D 3D -  -  -  	dec a
  366 D1:D54E 28 24 -  -  	jr z, AddVariableChainAns
  367 D1:D550 3D -  -  -  	dec a
  368 D1:D551 CA 79 D5 D1 	jp z, AddVariableFunction
  369 D1:D555 C3 D3 AE D1 	jp AddError
  370 D1:D559 -  -  -  -  AddVariableNumber:
  371 D1:D559 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  372 D1:D55D C3 EC D5 D1 	jp AddChainAnsNumber
  373 D1:D561 -  -  -  -  AddVariableVariable:
  374 D1:D561 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  375 D1:D565 C3 2B D6 D1 	jp AddChainAnsVariable
  376 D1:D569 -  -  -  -  AddVariableChainPush:
  377 D1:D569 3E E1 -  -  	ld a, 0E1h
  378 D1:D56B CD 0E AD D1 	call InsertA															; pop hl
  379 D1:D56F 59 -  -  -  	ld e, c
  380 D1:D570 C3 2B D6 D1 	jp AddChainAnsVariable
  381 D1:D574 -  -  -  -  AddVariableChainAns:
  382 D1:D574 59 -  -  -  	ld e, c
  383 D1:D575 C3 2B D6 D1 	jp AddChainAnsVariable
  384 D1:D579 -  -  -  -  AddVariableFunction:
  385 D1:D579 7B -  -  -  	ld a, e
  386 D1:D57A 06 02 -  -  	ld b, OutputInHL
  387 D1:D57C CD 3A AD D1 	call GetFunction
  388 D1:D580 59 -  -  -  	ld e, c
  389 D1:D581 CD 6E AC D1 	call InsertIXE															; ld de, (ix+*)
  390 D1:D585 3E 19 -  -  	ld a, 019h
  391 D1:D587 C3 0E AD D1 	jp InsertA																; add hl, de
  392 D1:D58B -  -  -  -  AddChainPushXXX:
  393 D1:D58B DD 7E FC -  	ld a, (ix-4)
  394 D1:D58E B7 -  -  -  	or a
  395 D1:D58F 28 12 -  -  	jr z, AddChainPushNumber
  396 D1:D591 3D -  -  -  	dec a
  397 D1:D592 28 17 -  -  	jr z, AddChainPushVariable
  398 D1:D594 3D -  -  -  	dec a
  399 D1:D595 28 1C -  -  	jr z, AddChainPushChainPush
  400 D1:D597 3D -  -  -  	dec a
  401 D1:D598 28 1D -  -  	jr z, AddChainPushChainAns
  402 D1:D59A 3D -  -  -  	dec a
  403 D1:D59B CA CC D5 D1 	jp z, AddChainPushFunction
  404 D1:D59F C3 D3 AE D1 	jp AddError
  405 D1:D5A3 -  -  -  -  AddChainPushNumber:
  406 D1:D5A3 3E E1 -  -  	ld a, 0E1h
  407 D1:D5A5 CD 0E AD D1 	call InsertA															; pop hl
  408 D1:D5A9 18 41 -  -  	jr AddChainAnsNumber
  409 D1:D5AB -  -  -  -  AddChainPushVariable:
  410 D1:D5AB 3E E1 -  -  	ld a, 0E1h
  411 D1:D5AD CD 0E AD D1 	call InsertA															; pop hl
  412 D1:D5B1 18 78 -  -  	jr AddChainAnsVariable
  413 D1:D5B3 -  -  -  -  AddChainPushChainPush:
  414 D1:D5B3 C3 74 AF D1 	jp UnknownError
  415 D1:D5B7 -  -  -  -  AddChainPushChainAns:
  416 D1:D5B7 3A 6A EA D1 	ld a, (ExprOutput)
  417 D1:D5BB B7 -  -  -  	or a
  418 D1:D5BC 3E D1 -  -  	ld a, 0D1h
  419 D1:D5BE 20 02 -  -  	jr nz, +_
  420 D1:D5C0 3E E1 -  -  	ld a, 0E1h
  421 D1:D5C2 CD 0E AD D1 _:	call InsertA															; pop hl/de
  422 D1:D5C6 3E 19 -  -  	ld a, 019h
  423 D1:D5C8 C3 0E AD D1 	jp InsertA																; add hl, de
  424 D1:D5CC -  -  -  -  AddChainPushFunction:
  425 D1:D5CC 3E E1 -  -  	ld a, 0E1h
  426 D1:D5CE CD 0E AD D1 	call InsertA															; pop hl
  427 D1:D5D2 18 7F -  -  	jr AddChainAnsFunction
  428 D1:D5D4 -  -  -  -  AddChainAnsXXX:
  429 D1:D5D4 DD 7E FC -  	ld a, (ix-4)
  430 D1:D5D7 B7 -  -  -  	or a
  431 D1:D5D8 28 12 -  -  	jr z, AddChainAnsNumber
  432 D1:D5DA 3D -  -  -  	dec a
  433 D1:D5DB 28 4E -  -  	jr z, AddChainAnsVariable
  434 D1:D5DD 3D -  -  -  	dec a
  435 D1:D5DE 28 6B -  -  	jr z, AddChainAnsChainPush
  436 D1:D5E0 3D -  -  -  	dec a
  437 D1:D5E1 28 6C -  -  	jr z, AddChainAnsChainAns
  438 D1:D5E3 3D -  -  -  	dec a
  439 D1:D5E4 CA 53 D6 D1 	jp z, AddChainAnsFunction
  440 D1:D5E8 C3 D3 AE D1 	jp AddError
  441 D1:D5EC -  -  -  -  AddChainAnsNumber:
  442 D1:D5EC B7 -  -  -  	or a
  443 D1:D5ED ED 62 -  -  	sbc hl, hl
  444 D1:D5EF EB -  -  -  	ex de, hl
  445 D1:D5F0 ED 52 -  -  	sbc hl, de
  446 D1:D5F2 C8 -  -  -  	ret z
  447 D1:D5F3 1E 06 -  -  	ld e, 6
  448 D1:D5F5 ED 52 -  -  	sbc hl, de
  449 D1:D5F7 30 1C -  -  	jr nc, AddHLDE
  450 D1:D5F9 19 -  -  -  	add hl, de
  451 D1:D5FA 45 -  -  -  	ld b, l
  452 D1:D5FB 3A 6A EA D1 	ld a, (ExprOutput)
  453 D1:D5FF B7 -  -  -  	or a
  454 D1:D600 28 09 -  -  	jr z, ++_
  455 D1:D602 3E 23 -  -  	ld a, 023h
  456 D1:D604 CD 0E AD D1 _:	call InsertA															; inc hl/de
  457 D1:D608 10 FA -  -  	djnz -_
  458 D1:D60A C9 -  -  -  	ret
  459 D1:D60B 3E 00 -  -  _:	ld a, OutputIsInDE
  460 D1:D60D 32 6B EA D1 	ld (ExprOutput2), a
  461 D1:D611 3E 13 -  -  	ld a, 013h
  462 D1:D613 18 EF -  -  	jr --_
  463 D1:D615 -  -  -  -  AddHLDE:
  464 D1:D615 19 -  -  -  	add hl, de
  465 D1:D616 3A 6A EA D1 	ld a, (ExprOutput)
  466 D1:D61A B7 -  -  -  	or a
  467 D1:D61B 3E 11 -  -  	ld a, 011h
  468 D1:D61D 20 02 -  -  	jr nz, +_
  469 D1:D61F 3E 21 -  -  	ld a, 021h
  470 D1:D621 CD 4C AC D1 _:	call InsertAHL															; ld hl/de, *
  471 D1:D625 3E 19 -  -  	ld a, 019h
  472 D1:D627 C3 0E AD D1 	jp InsertA																; add hl, de
  473 D1:D62B -  -  -  -  AddChainAnsVariable:
  474 D1:D62B 26 17 -  -  	ld h, 017h
  475 D1:D62D 16 03 -  -  	ld d, 3
  476 D1:D62F ED 5C -  -  	mlt de
  477 D1:D631 7B -  -  -  	ld a, e
  478 D1:D632 2E DD -  -  	ld l, 0DDh
  479 D1:D634 CD 70 1D 02 	call _SetHLUToA
  480 D1:D638 3A 6A EA D1 	ld a, (ExprOutput)
  481 D1:D63C B7 -  -  -  	or a
  482 D1:D63D 20 02 -  -  	jr nz, +_
  483 D1:D63F 26 27 -  -  	ld h, 027h
  484 D1:D641 CD 50 AC D1 _:	call InsertHL															; ld hl/de, (ix+*)
  485 D1:D645 3E 19 -  -  	ld a, 019h
  486 D1:D647 C3 0E AD D1 	jp InsertA																; add hl, de
  487 D1:D64B -  -  -  -  AddChainAnsChainPush:
  488 D1:D64B C3 74 AF D1 	jp UnknownError
  489 D1:D64F -  -  -  -  AddChainAnsChainAns:
  490 D1:D64F C3 74 AF D1 	jp UnknownError
  491 D1:D653 -  -  -  -  AddChainAnsFunction:
  492 D1:D653 3A 6A EA D1 	ld a, (ExprOutput)
  493 D1:D657 87 -  -  -  	add a, a
  494 D1:D658 87 -  -  -  	add a, a
  495 D1:D659 87 -  -  -  	add a, a
  496 D1:D65A 87 -  -  -  	add a, a
  497 D1:D65B C6 D5 -  -  	add a, 0D5h
  498 D1:D65D CD 0E AD D1 	call InsertA															; push hl/de
  499 D1:D661 7B -  -  -  	ld a, e
  500 D1:D662 06 02 -  -  	ld b, OutputInHL
  501 D1:D664 CD 3A AD D1 	call GetFunction
  502 D1:D668 3E D1 -  -  	ld a, 0D1h
  503 D1:D66A CD 0E AD D1 	call InsertA															; pop de
  504 D1:D66E 3E 19 -  -  	ld a, 019h
  505 D1:D670 C3 0E AD D1 	jp InsertA																; add hl, de
  506 D1:D674 -  -  -  -  AddFunctionXXX:
  507 D1:D674 DD 7E FC -  	ld a, (ix-4)
  508 D1:D677 B7 -  -  -  	or a
  509 D1:D678 28 10 -  -  	jr z, AddFunctionNumber
  510 D1:D67A 3D -  -  -  	dec a
  511 D1:D67B 28 18 -  -  	jr z, AddFunctionVariable
  512 D1:D67D 3D -  -  -  	dec a
  513 D1:D67E 28 20 -  -  	jr z, AddFunctionChainPush
  514 D1:D680 3D -  -  -  	dec a
  515 D1:D681 28 21 -  -  	jr z, AddFunctionChainAns
  516 D1:D683 3D -  -  -  	dec a
  517 D1:D684 28 3F -  -  	jr z, AddFunctionFunction
  518 D1:D686 C3 D3 AE D1 	jp AddError
  519 D1:D68A -  -  -  -  AddFunctionNumber:
  520 D1:D68A 79 -  -  -  	ld a, c
  521 D1:D68B 06 02 -  -  	ld b, OutputInHL
  522 D1:D68D CD 3A AD D1 	call GetFunction
  523 D1:D691 C3 EC D5 D1 	jp AddChainAnsNumber
  524 D1:D695 -  -  -  -  AddFunctionVariable:
  525 D1:D695 79 -  -  -  	ld a, c
  526 D1:D696 06 02 -  -  	ld b, OutputInHL
  527 D1:D698 CD 3A AD D1 	call GetFunction
  528 D1:D69C C3 2B D6 D1 	jp AddChainAnsVariable
  529 D1:D6A0 -  -  -  -  AddFunctionChainPush:
  530 D1:D6A0 C3 74 AF D1 	jp UnknownError
  531 D1:D6A4 -  -  -  -  AddFunctionChainAns:
  532 D1:D6A4 3A 6A EA D1 	ld a, (ExprOutput)
  533 D1:D6A8 87 -  -  -  	add a, a
  534 D1:D6A9 87 -  -  -  	add a, a
  535 D1:D6AA 87 -  -  -  	add a, a
  536 D1:D6AB 87 -  -  -  	add a, a
  537 D1:D6AC C6 D5 -  -  	add a, 0D5h
  538 D1:D6AE CD 0E AD D1 	call InsertA															; push hl/de
  539 D1:D6B2 79 -  -  -  	ld a, c
  540 D1:D6B3 06 02 -  -  	ld b, OutputInHL
  541 D1:D6B5 CD 3A AD D1 	call GetFunction
  542 D1:D6B9 3E D1 -  -  	ld a, 0D1h
  543 D1:D6BB CD 0E AD D1 	call InsertA															; pop de
  544 D1:D6BF 3E 19 -  -  	ld a, 019h
  545 D1:D6C1 C3 0E AD D1 	jp InsertA																; add hl, de
  546 D1:D6C5 -  -  -  -  AddFunctionFunction:
  547 D1:D6C5 7B -  -  -  	ld a, e
  548 D1:D6C6 06 02 -  -  	ld b, OutputInHL
  549 D1:D6C8 CD 3A AD D1 	call GetFunction
  550 D1:D6CC 79 -  -  -  	ld a, c
  551 D1:D6CD 06 01 -  -  	ld b, OutputInDE
  552 D1:D6CF FD CB C0 F6 	set need_push, (iy+fExpression1)
  553 D1:D6D3 CD 3A AD D1 	call GetFunction
  554 D1:D6D7 3E 19 -  -  	ld a, 019h
  555 D1:D6D9 C3 0E AD D1 	jp InsertA																; add hl, de
  556 D1:D6DD -  -  -  -  	
  557 D1:D6DD -  -  -  -  DivNumberXXX:
  558 D1:D6DD DD 7E FC -  	ld a, (ix-4)
  559 D1:D6E0 B7 -  -  -  	or a
  560 D1:D6E1 28 10 -  -  	jr z, DivNumberNumber
  561 D1:D6E3 3D -  -  -  	dec a
  562 D1:D6E4 28 1D -  -  	jr z, DivNumberVariable
  563 D1:D6E6 3D -  -  -  	dec a
  564 D1:D6E7 28 26 -  -  	jr z, DivNumberChainPush
  565 D1:D6E9 3D -  -  -  	dec a
  566 D1:D6EA 28 27 -  -  	jr z, DivNumberChainAns
  567 D1:D6EC 3D -  -  -  	dec a
  568 D1:D6ED 28 39 -  -  	jr z, DivNumberFunction
  569 D1:D6EF C3 D7 AE D1 	jp DivError
  570 D1:D6F3 -  -  -  -  DivNumberNumber:
  571 D1:D6F3 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  572 D1:D6F7 C5 -  -  -  	push bc
  573 D1:D6F8 E1 -  -  -  	pop hl
  574 D1:D6F9 D5 -  -  -  	push de
  575 D1:D6FA C1 -  -  -  	pop bc
  576 D1:D6FB CD 44 01 00 	call __idvrmu
  577 D1:D6FF DD 1F F9 -  	ld (ix-7), de
  578 D1:D702 C9 -  -  -  	ret
  579 D1:D703 -  -  -  -  DivNumberVariable:
  580 D1:D703 3E 21 -  -  	ld a, 021h
  581 D1:D705 C5 -  -  -  	push bc
  582 D1:D706 E1 -  -  -  	pop hl
  583 D1:D707 CD 4C AC D1 	call InsertAHL															; ld hl, *
  584 D1:D70B C3 3B D8 D1 	jp DivChainAnsVariable
  585 D1:D70F -  -  -  -  DivNumberChainPush:
  586 D1:D70F C3 74 AF D1 	jp UnknownError
  587 D1:D713 -  -  -  -  DivNumberChainAns:
  588 D1:D713 11 E5 C1 21 	ld de, 021C1E5h
  589 D1:D717 C5 -  -  -  	push bc
  590 D1:D718 E1 -  -  -  	pop hl
  591 D1:D719 3A 6A EA D1 	ld a, (ExprOutput)
  592 D1:D71D B7 -  -  -  	or a
  593 D1:D71E 20 02 -  -  	jr nz, +_
  594 D1:D720 1E D5 -  -  	ld e, 0D5h
  595 D1:D722 CD 8F AC D1 _:	call InsertDEHL															; push hl/de \ pop bc \ ld hl, *
  596 D1:D726 18 74 -  -  	jr DivInsert
  597 D1:D728 -  -  -  -  DivNumberFunction:
  598 D1:D728 7B -  -  -  	ld a, e
  599 D1:D729 C5 -  -  -  	push bc
  600 D1:D72A 06 00 -  -  		ld b, OutputInBC
  601 D1:D72C CD 3A AD D1 		call GetFunction
  602 D1:D730 3E 21 -  -  		ld a, 021h
  603 D1:D732 E1 -  -  -  	pop hl
  604 D1:D733 CD 4C AC D1 	call InsertAHL															; ld hl, *
  605 D1:D737 18 63 -  -  	jr DivInsert
  606 D1:D739 -  -  -  -  DivVariableXXX:
  607 D1:D739 DD 7E FC -  	ld a, (ix-4)
  608 D1:D73C B7 -  -  -  	or a
  609 D1:D73D 28 12 -  -  	jr z, DivVariableNumber
  610 D1:D73F 3D -  -  -  	dec a
  611 D1:D740 28 17 -  -  	jr z, DivVariableVariable
  612 D1:D742 3D -  -  -  	dec a
  613 D1:D743 28 2E -  -  	jr z, DivVariableChainPush
  614 D1:D745 3D -  -  -  	dec a
  615 D1:D746 28 2F -  -  	jr z, DivVariableChainAns
  616 D1:D748 3D -  -  -  	dec a
  617 D1:D749 CA 91 D7 D1 	jp z, DivVariableFunction
  618 D1:D74D C3 D7 AE D1 	jp DivError
  619 D1:D751 -  -  -  -  DivVariableNumber:
  620 D1:D751 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  621 D1:D755 C3 0D D8 D1 	jp DivChainAnsNumber
  622 D1:D759 -  -  -  -  DivVariableVariable:
  623 D1:D759 79 -  -  -  	ld a, c
  624 D1:D75A BB -  -  -  	cp e
  625 D1:D75B 20 0E -  -  	jr nz, +_
  626 D1:D75D FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  627 D1:D761 36 00 -  -  	ld (hl), typeNumber
  628 D1:D763 11 01 00 00 	ld de, 1
  629 D1:D767 23 -  -  -  	inc hl
  630 D1:D768 ED 1F -  -  	ld (hl), de
  631 D1:D76A C9 -  -  -  	ret
  632 D1:D76B CD 65 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  633 D1:D76F C3 3B D8 D1 	jp DivChainAnsVariable
  634 D1:D773 -  -  -  -  DivVariableChainPush:
  635 D1:D773 C3 74 AF D1 	jp UnknownError
  636 D1:D777 -  -  -  -  DivVariableChainAns:
  637 D1:D777 3A 6A EA D1 	ld a, (ExprOutput)
  638 D1:D77B 87 -  -  -  	add a, a
  639 D1:D77C 87 -  -  -  	add a, a
  640 D1:D77D 87 -  -  -  	add a, a
  641 D1:D77E 87 -  -  -  	add a, a
  642 D1:D77F C6 D5 -  -  	add a, 0D5h
  643 D1:D781 CD 0E AD D1 	call InsertA															; push hl/de
  644 D1:D785 3E C1 -  -  	ld a, 0C1h
  645 D1:D787 CD 0E AD D1 	call InsertA															; pop bc
  646 D1:D78B CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  647 D1:D78F 18 0B -  -  	jr DivInsert
  648 D1:D791 -  -  -  -  DivVariableFunction:
  649 D1:D791 7B -  -  -  	ld a, e
  650 D1:D792 06 00 -  -  	ld b, OutputInBC
  651 D1:D794 CD 3A AD D1 	call GetFunction
  652 D1:D798 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  653 D1:D79C -  -  -  -  DivInsert:
  654 D1:D79C 3E 00 -  -  	ld a, OutputIsInDE
  655 D1:D79E 32 6B EA D1 	ld (ExprOutput2), a
  656 D1:D7A2 3E CD -  -  	ld a, 0CDh
  657 D1:D7A4 21 44 01 00 	ld hl, __idvrmu
  658 D1:D7A8 C3 4C AC D1 	jp InsertAHL															; call __idvrmu
  659 D1:D7AC -  -  -  -  DivChainPushXXX:
  660 D1:D7AC DD 7E FC -  	ld a, (ix-4)
  661 D1:D7AF B7 -  -  -  	or a
  662 D1:D7B0 28 12 -  -  	jr z, DivChainPushNumber
  663 D1:D7B2 3D -  -  -  	dec a
  664 D1:D7B3 28 17 -  -  	jr z, DivChainPushVariable
  665 D1:D7B5 3D -  -  -  	dec a
  666 D1:D7B6 28 1C -  -  	jr z, DivChainPushChainPush
  667 D1:D7B8 3D -  -  -  	dec a
  668 D1:D7B9 28 1D -  -  	jr z, DivChainPushChainAns
  669 D1:D7BB 3D -  -  -  	dec a
  670 D1:D7BC CA ED D7 D1 	jp z, DivChainPushFunction
  671 D1:D7C0 C3 D7 AE D1 	jp DivError
  672 D1:D7C4 -  -  -  -  DivChainPushNumber:
  673 D1:D7C4 3E E1 -  -  	ld a, 0E1h
  674 D1:D7C6 CD 0E AD D1 	call InsertA															; pop hl
  675 D1:D7CA 18 41 -  -  	jr DivChainAnsNumber
  676 D1:D7CC -  -  -  -  DivChainPushVariable:
  677 D1:D7CC 3E E1 -  -  	ld a, 0E1h
  678 D1:D7CE CD 0E AD D1 	call InsertA															; pop hl
  679 D1:D7D2 18 67 -  -  	jr DivChainAnsVariable
  680 D1:D7D4 -  -  -  -  DivChainPushChainPush:
  681 D1:D7D4 C3 74 AF D1 	jp UnknownError
  682 D1:D7D8 -  -  -  -  DivChainPushChainAns:
  683 D1:D7D8 21 E5 C1 E1 	ld hl, 0E1C1E5h
  684 D1:D7DC 3A 6A EA D1 	ld a, (ExprOutput)
  685 D1:D7E0 87 -  -  -  	add a, a
  686 D1:D7E1 87 -  -  -  	add a, a
  687 D1:D7E2 87 -  -  -  	add a, a
  688 D1:D7E3 87 -  -  -  	add a, a
  689 D1:D7E4 C6 D5 -  -  	add a, 0D5h
  690 D1:D7E6 6F -  -  -  	ld l, a
  691 D1:D7E7 CD 50 AC D1 	call InsertHL															; push hl/de \ pop bc \ pop hl
  692 D1:D7EB 18 AF -  -  _:	jr DivInsert
  693 D1:D7ED -  -  -  -  DivChainPushFunction:
  694 D1:D7ED 3E E1 -  -  	ld a, 0E1h
  695 D1:D7EF CD 0E AD D1 	call InsertA															; pop hl
  696 D1:D7F3 18 58 -  -  	jr DivChainAnsFunction
  697 D1:D7F5 -  -  -  -  DivChainAnsXXX:
  698 D1:D7F5 DD 7E FC -  	ld a, (ix-4)
  699 D1:D7F8 B7 -  -  -  	or a
  700 D1:D7F9 28 12 -  -  	jr z, DivChainAnsNumber
  701 D1:D7FB 3D -  -  -  	dec a
  702 D1:D7FC 28 3D -  -  	jr z, DivChainAnsVariable
  703 D1:D7FE 3D -  -  -  	dec a
  704 D1:D7FF 28 44 -  -  	jr z, DivChainAnsChainPush
  705 D1:D801 3D -  -  -  	dec a
  706 D1:D802 28 45 -  -  	jr z, DivChainAnsChainAns
  707 D1:D804 3D -  -  -  	dec a
  708 D1:D805 CA 4D D8 D1 	jp z, DivChainAnsFunction
  709 D1:D809 C3 D7 AE D1 	jp DivError
  710 D1:D80D -  -  -  -  DivChainAnsNumber:
  711 D1:D80D CD BA AC D1 	call MaybeChangeDEToHL
  712 D1:D811 3E 01 -  -  	ld a, 001h
  713 D1:D813 EB -  -  -  	ex de, hl
  714 D1:D814 11 00 01 00 	ld de, 256
  715 D1:D818 B7 -  -  -  	or a
  716 D1:D819 ED 52 -  -  	sbc hl, de
  717 D1:D81B 30 17 -  -  	jr nc, +_
  718 D1:D81D 19 -  -  -  	add hl, de
  719 D1:D81E 4D -  -  -  	ld c, l
  720 D1:D81F 3E 3E -  -  	ld a, 03Eh
  721 D1:D821 CD 0E AD D1 	call InsertA															; ld a, *
  722 D1:D825 79 -  -  -  	ld a, c
  723 D1:D826 CD 0E AD D1 	call InsertA															; ld a, *
  724 D1:D82A 3E CD -  -  	ld a, 0CDh
  725 D1:D82C 21 90 1D 02 	ld hl, _DivHLByA
  726 D1:D830 C3 4C AC D1 	jp InsertAHL															; call _DivHLByA
  727 D1:D834 19 -  -  -  _:	add hl, de
  728 D1:D835 CD 4C AC D1 	call InsertAHL															; ld bc, *
  729 D1:D839 18 B0 -  -  _:	jr ---_
  730 D1:D83B -  -  -  -  DivChainAnsVariable:
  731 D1:D83B CD BA AC D1 	call MaybeChangeDEToHL
  732 D1:D83F CD 7D AC D1 	call InsertIXC
  733 D1:D843 18 F4 -  -  	jr -_
  734 D1:D845 -  -  -  -  DivChainAnsChainPush:
  735 D1:D845 C3 74 AF D1 	jp UnknownError
  736 D1:D849 -  -  -  -  DivChainAnsChainAns:
  737 D1:D849 C3 74 AF D1 	jp UnknownError
  738 D1:D84D -  -  -  -  DivChainAnsFunction:
  739 D1:D84D 3A 6A EA D1 	ld a, (ExprOutput)
  740 D1:D851 87 -  -  -  	add a, a
  741 D1:D852 87 -  -  -  	add a, a
  742 D1:D853 87 -  -  -  	add a, a
  743 D1:D854 87 -  -  -  	add a, a
  744 D1:D855 C6 D5 -  -  	add a, 0D5h
  745 D1:D857 CD 0E AD D1 	call InsertA															; push hl/de
  746 D1:D85B 7B -  -  -  	ld a, e
  747 D1:D85C 06 00 -  -  	ld b, OutputInBC
  748 D1:D85E CD 3A AD D1 	call GetFunction
  749 D1:D862 3E E1 -  -  	ld a, 0E1h
  750 D1:D864 CD 0E AD D1 	call InsertA															; pop hl
  751 D1:D868 18 CF -  -  _:	jr --_
  752 D1:D86A -  -  -  -  DivFunctionXXX:
  753 D1:D86A DD 7E FC -  	ld a, (ix-4)
  754 D1:D86D B7 -  -  -  	or a
  755 D1:D86E 28 10 -  -  	jr z, DivFunctionNumber
  756 D1:D870 3D -  -  -  	dec a
  757 D1:D871 28 18 -  -  	jr z, DivFunctionVariable
  758 D1:D873 3D -  -  -  	dec a
  759 D1:D874 28 20 -  -  	jr z, DivFunctionChainPush
  760 D1:D876 3D -  -  -  	dec a
  761 D1:D877 28 21 -  -  	jr z, DivFunctionChainAns
  762 D1:D879 3D -  -  -  	dec a
  763 D1:D87A 28 3B -  -  	jr z, DivFunctionFunction
  764 D1:D87C C3 D7 AE D1 	jp DivError
  765 D1:D880 -  -  -  -  DivFunctionNumber:
  766 D1:D880 79 -  -  -  	ld a, c
  767 D1:D881 06 02 -  -  	ld b, OutputInHL
  768 D1:D883 CD 3A AD D1 	call GetFunction
  769 D1:D887 C3 0D D8 D1 	jp DivChainAnsNumber
  770 D1:D88B -  -  -  -  DivFunctionVariable:
  771 D1:D88B 79 -  -  -  	ld a, c
  772 D1:D88C 06 02 -  -  	ld b, OutputInHL
  773 D1:D88E CD 3A AD D1 	call GetFunction
  774 D1:D892 C3 3B D8 D1 	jp DivChainAnsVariable
  775 D1:D896 -  -  -  -  DivFunctionChainPush:
  776 D1:D896 C3 74 AF D1 	jp UnknownError
  777 D1:D89A -  -  -  -  DivFunctionChainAns:
  778 D1:D89A 3A 6A EA D1 	ld a, (ExprOutput)
  779 D1:D89E 87 -  -  -  	add a, a
  780 D1:D89F 87 -  -  -  	add a, a
  781 D1:D8A0 87 -  -  -  	add a, a
  782 D1:D8A1 87 -  -  -  	add a, a
  783 D1:D8A2 C6 D5 -  -  	add a, 0D5h
  784 D1:D8A4 CD 0E AD D1 	call InsertA															; push hl/de
  785 D1:D8A8 3E C1 -  -  	ld a, 0C1h
  786 D1:D8AA CD 0E AD D1 	call InsertA															; pop bc
  787 D1:D8AE 79 -  -  -  	ld a, c
  788 D1:D8AF 06 02 -  -  	ld b, OutputInHL
  789 D1:D8B1 CD 3A AD D1 	call GetFunction
  790 D1:D8B5 18 B1 -  -  	jr -_
  791 D1:D8B7 -  -  -  -  DivFunctionFunction:
  792 D1:D8B7 7B -  -  -  	ld a, e
  793 D1:D8B8 06 00 -  -  	ld b, OutputInBC
  794 D1:D8BA CD 3A AD D1 	call GetFunction
  795 D1:D8BE 79 -  -  -  	ld a, c
  796 D1:D8BF 06 02 -  -  	ld b, OutputInHL
  797 D1:D8C1 CD 3A AD D1 	call GetFunction
  798 D1:D8C5 18 A1 -  -  	jr -_
  799 D1:D8C7 -  -  -  -  	
  800 D1:D8C7 -  -  -  -  MulNumberXXX:
  801 D1:D8C7 DD 7E FC -  	ld a, (ix-4)
  802 D1:D8CA B7 -  -  -  	or a
  803 D1:D8CB 28 10 -  -  	jr z, MulNumberNumber
  804 D1:D8CD 3D -  -  -  	dec a
  805 D1:D8CE 28 1A -  -  	jr z, MulNumberVariable
  806 D1:D8D0 3D -  -  -  	dec a
  807 D1:D8D1 28 1E -  -  	jr z, MulNumberChainPush
  808 D1:D8D3 3D -  -  -  	dec a
  809 D1:D8D4 28 1F -  -  	jr z, MulNumberChainAns
  810 D1:D8D6 3D -  -  -  	dec a
  811 D1:D8D7 28 22 -  -  	jr z, MulNumberFunction
  812 D1:D8D9 C3 DB AE D1 	jp MulError
  813 D1:D8DD -  -  -  -  MulNumberNumber:
  814 D1:D8DD FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  815 D1:D8E1 EB -  -  -  	ex de, hl
  816 D1:D8E2 CD 54 01 00 	call __imulu
  817 D1:D8E6 DD 2F F9 -  	ld (ix-7), hl
  818 D1:D8E9 C9 -  -  -  	ret
  819 D1:D8EA -  -  -  -  MulNumberVariable:
  820 D1:D8EA C5 -  -  -  	push bc
  821 D1:D8EB E1 -  -  -  	pop hl
  822 D1:D8EC EB -  -  -  	ex de, hl
  823 D1:D8ED E5 -  -  -  	push hl
  824 D1:D8EE C1 -  -  -  	pop bc
  825 D1:D8EF 18 2B -  -  	jr MulVariableNumber
  826 D1:D8F1 -  -  -  -  MulNumberChainPush:
  827 D1:D8F1 C3 74 AF D1 	jp UnknownError
  828 D1:D8F5 -  -  -  -  MulNumberChainAns:
  829 D1:D8F5 C5 -  -  -  	push bc
  830 D1:D8F6 D1 -  -  -  	pop de
  831 D1:D8F7 C3 B7 D9 D1 	jp MulChainAnsNumber
  832 D1:D8FB -  -  -  -  MulNumberFunction:
  833 D1:D8FB C5 -  -  -  	push bc
  834 D1:D8FC E1 -  -  -  	pop hl
  835 D1:D8FD EB -  -  -  	ex de, hl
  836 D1:D8FE E5 -  -  -  	push hl
  837 D1:D8FF C1 -  -  -  	pop bc
  838 D1:D900 C3 76 DA D1 	jp MulFunctionNumber
  839 D1:D904 -  -  -  -  MulVariableXXX:
  840 D1:D904 DD 7E FC -  	ld a, (ix-4)
  841 D1:D907 B7 -  -  -  	or a
  842 D1:D908 28 12 -  -  	jr z, MulVariableNumber
  843 D1:D90A 3D -  -  -  	dec a
  844 D1:D90B 28 17 -  -  	jr z, MulVariableVariable
  845 D1:D90D 3D -  -  -  	dec a
  846 D1:D90E 28 1C -  -  	jr z, MulVariableChainPush
  847 D1:D910 3D -  -  -  	dec a
  848 D1:D911 28 24 -  -  	jr z, MulVariableChainAns
  849 D1:D913 3D -  -  -  	dec a
  850 D1:D914 CA 3C D9 D1 	jp z, MulVariableFunction
  851 D1:D918 C3 DB AE D1 	jp MulError
  852 D1:D91C -  -  -  -  MulVariableNumber:
  853 D1:D91C CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  854 D1:D920 C3 B7 D9 D1 	jp MulChainAnsNumber
  855 D1:D924 -  -  -  -  MulVariableVariable:
  856 D1:D924 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  857 D1:D928 C3 21 DA D1 	jp MulChainAnsVariable
  858 D1:D92C -  -  -  -  MulVariableChainPush:
  859 D1:D92C 3E E1 -  -  	ld a, 0E1h
  860 D1:D92E CD 0E AD D1 	call InsertA															; pop hl
  861 D1:D932 59 -  -  -  	ld e, c
  862 D1:D933 C3 21 DA D1 	jp MulChainAnsVariable
  863 D1:D937 -  -  -  -  MulVariableChainAns:
  864 D1:D937 59 -  -  -  	ld e, c
  865 D1:D938 C3 21 DA D1 	jp MulChainAnsVariable
  866 D1:D93C -  -  -  -  MulVariableFunction:
  867 D1:D93C 7B -  -  -  	ld a, e
  868 D1:D93D 06 02 -  -  	ld b, OutputInHL
  869 D1:D93F CD 3A AD D1 	call GetFunction
  870 D1:D943 CD 7D AC D1 	call InsertIXC
  871 D1:D947 21 54 01 00 	ld hl, __imulu
  872 D1:D94B C3 61 AC D1 	jp InsertCallHL															; call __imulu
  873 D1:D94F -  -  -  -  MulChainPushXXX:
  874 D1:D94F DD 7E FC -  	ld a, (ix-4)
  875 D1:D952 B7 -  -  -  	or a
  876 D1:D953 28 12 -  -  	jr z, MulChainPushNumber
  877 D1:D955 3D -  -  -  	dec a
  878 D1:D956 28 17 -  -  	jr z, MulChainPushVariable
  879 D1:D958 3D -  -  -  	dec a
  880 D1:D959 28 1E -  -  	jr z, MulChainPushChainPush
  881 D1:D95B 3D -  -  -  	dec a
  882 D1:D95C 28 1F -  -  	jr z, MulChainPushChainAns
  883 D1:D95E 3D -  -  -  	dec a
  884 D1:D95F CA 91 D9 D1 	jp z, MulChainPushFunction
  885 D1:D963 C3 DB AE D1 	jp MulError
  886 D1:D967 -  -  -  -  MulChainPushNumber:
  887 D1:D967 3E E1 -  -  	ld a, 0E1h
  888 D1:D969 CD 0E AD D1 	call InsertA															; pop hl
  889 D1:D96D 18 48 -  -  	jr MulChainAnsNumber
  890 D1:D96F -  -  -  -  MulChainPushVariable:
  891 D1:D96F 3E E1 -  -  	ld a, 0E1h
  892 D1:D971 CD 0E AD D1 	call InsertA															; pop hl
  893 D1:D975 C3 21 DA D1 	jp MulChainAnsVariable
  894 D1:D979 -  -  -  -  MulChainPushChainPush:
  895 D1:D979 C3 74 AF D1 	jp UnknownError
  896 D1:D97D -  -  -  -  MulChainPushChainAns:
  897 D1:D97D CD BA AC D1 	call MaybeChangeDEToHL
  898 D1:D981 3E C1 -  -  	ld a, 0C1h
  899 D1:D983 CD 0E AD D1 	call InsertA															; pop bc
  900 D1:D987 3E CD -  -  	ld a, 0CDh
  901 D1:D989 21 54 01 00 	ld hl, __imulu
  902 D1:D98D C3 4C AC D1 	jp InsertAHL															; call __imulu
  903 D1:D991 -  -  -  -  MulChainPushFunction:
  904 D1:D991 3E E1 -  -  	ld a, 0E1h
  905 D1:D993 CD 0E AD D1 	call InsertA															; pop hl
  906 D1:D997 C3 3B DA D1 	jp MulChainAnsFunction
  907 D1:D99B -  -  -  -  MulChainAnsXXX:
  908 D1:D99B DD 7E FC -  	ld a, (ix-4)
  909 D1:D99E B7 -  -  -  	or a
  910 D1:D99F 28 16 -  -  	jr z, MulChainAnsNumber
  911 D1:D9A1 3D -  -  -  	dec a
  912 D1:D9A2 28 7D -  -  	jr z, MulChainAnsVariable
  913 D1:D9A4 3D -  -  -  	dec a
  914 D1:D9A5 CA 33 DA D1 	jp z, MulChainAnsChainPush
  915 D1:D9A9 3D -  -  -  	dec a
  916 D1:D9AA CA 37 DA D1 	jp z, MulChainAnsChainAns
  917 D1:D9AE 3D -  -  -  	dec a
  918 D1:D9AF CA 3B DA D1 	jp z, MulChainAnsFunction
  919 D1:D9B3 C3 DB AE D1 	jp MulError
  920 D1:D9B7 -  -  -  -  MulChainAnsNumber:
  921 D1:D9B7 CD 4C 1D 02 	call _ChkDEIs0
  922 D1:D9BB 20 08 -  -  	jr nz, +_
  923 D1:D9BD 21 B7 ED 62 	ld hl, 062EDB7h
  924 D1:D9C1 C3 50 AC D1 	jp InsertHL																; or a \ sbc hl, hl
  925 D1:D9C5 CD BA AC D1 _:	call MaybeChangeDEToHL
  926 D1:D9C9 1B -  -  -  	dec de
  927 D1:D9CA CD 4C 1D 02 	call _ChkDEIs0
  928 D1:D9CE C8 -  -  -  	ret z
  929 D1:D9CF 13 -  -  -  	inc de
  930 D1:D9D0 EB -  -  -  	ex de, hl
  931 D1:D9D1 11 15 00 00 	ld de, 21
  932 D1:D9D5 B7 -  -  -  	or a
  933 D1:D9D6 ED 52 -  -  	sbc hl, de
  934 D1:D9D8 30 16 -  -  	jr nc, ++_
  935 D1:D9DA 19 -  -  -  	add hl, de
  936 D1:D9DB 2D -  -  -  	dec l
  937 D1:D9DC 2D -  -  -  	dec l
  938 D1:D9DD 26 0A -  -  	ld h, 10
  939 D1:D9DF ED 6C -  -  	mlt hl
  940 D1:D9E1 11 47 ED D1 	ld de, MulTable
  941 D1:D9E5 19 -  -  -  	add hl, de
  942 D1:D9E6 46 -  -  -  	ld b, (hl)
  943 D1:D9E7 23 -  -  -  _:	inc hl
  944 D1:D9E8 7E -  -  -  	ld a, (hl)
  945 D1:D9E9 CD 0E AD D1 	call InsertA
  946 D1:D9ED 10 F8 -  -  	djnz -_
  947 D1:D9EF C9 -  -  -  	ret
  948 D1:D9F0 19 -  -  -  _:	add hl, de
  949 D1:D9F1 11 00 01 00 	ld de, 256
  950 D1:D9F5 B7 -  -  -  	or a
  951 D1:D9F6 ED 52 -  -  	sbc hl, de
  952 D1:D9F8 38 10 -  -  	jr c, +_
  953 D1:D9FA 3E 01 -  -  	ld a, 001h
  954 D1:D9FC CD 4C AC D1 	call InsertAHL															; ld bc, *
  955 D1:DA00 3E CD -  -  	ld a, 0CDh
  956 D1:DA02 21 54 01 00 	ld hl, __imulu
  957 D1:DA06 C3 4C AC D1 	jp InsertAHL															; call __imulu
  958 D1:DA0A 19 -  -  -  _:	add hl, de
  959 D1:DA0B 4D -  -  -  	ld c, l
  960 D1:DA0C 3E 3E -  -  	ld a, 03Eh
  961 D1:DA0E CD 0E AD D1 	call InsertA															; ld a, *
  962 D1:DA12 79 -  -  -  	ld a, c
  963 D1:DA13 CD 0E AD D1 	call InsertA															; ld a, *
  964 D1:DA17 3E CD -  -  	ld a, 0CDh
  965 D1:DA19 21 50 01 00 	ld hl, __imul_b
  966 D1:DA1D C3 4C AC D1 	jp InsertAHL															; call __imul_b
  967 D1:DA21 -  -  -  -  MulChainAnsVariable:
  968 D1:DA21 CD BA AC D1 	call MaybeChangeDEToHL
  969 D1:DA25 CD 7D AC D1 	call InsertIXC															; ld bc, (ix+*)
  970 D1:DA29 3E CD -  -  	ld a, 0CDh
  971 D1:DA2B 21 54 01 00 	ld hl, __imulu
  972 D1:DA2F C3 4C AC D1 	jp InsertAHL															; call __imulu
  973 D1:DA33 -  -  -  -  MulChainAnsChainPush:
  974 D1:DA33 C3 74 AF D1 	jp UnknownError
  975 D1:DA37 -  -  -  -  MulChainAnsChainAns:
  976 D1:DA37 C3 74 AF D1 	jp UnknownError
  977 D1:DA3B -  -  -  -  MulChainAnsFunction:
  978 D1:DA3B 3A 6A EA D1 	ld a, (ExprOutput)
  979 D1:DA3F 87 -  -  -  	add a, a
  980 D1:DA40 87 -  -  -  	add a, a
  981 D1:DA41 87 -  -  -  	add a, a
  982 D1:DA42 87 -  -  -  	add a, a
  983 D1:DA43 C6 D5 -  -  	add a, 0D5h
  984 D1:DA45 CD 0E AD D1 	call InsertA															; push hl/de
  985 D1:DA49 7B -  -  -  	ld a, e
  986 D1:DA4A 06 00 -  -  	ld b, OutputInBC
  987 D1:DA4C CD 3A AD D1 	call GetFunction
  988 D1:DA50 3E E1 -  -  	ld a, 0E1h
  989 D1:DA52 CD 0E AD D1 	call InsertA															; pop hl
  990 D1:DA56 3E CD -  -  	ld a, 0CDh
  991 D1:DA58 21 54 01 00 	ld hl, __imulu
  992 D1:DA5C C3 4C AC D1 	jp InsertAHL															; call __imulu
  993 D1:DA60 -  -  -  -  MulFunctionXXX:
  994 D1:DA60 DD 7E FC -  	ld a, (ix-4)
  995 D1:DA63 B7 -  -  -  	or a
  996 D1:DA64 28 10 -  -  	jr z, MulFunctionNumber
  997 D1:DA66 3D -  -  -  	dec a
  998 D1:DA67 28 18 -  -  	jr z, MulFunctionVariable
  999 D1:DA69 3D -  -  -  	dec a
 1000 D1:DA6A 28 20 -  -  	jr z, MulFunctionChainPush
 1001 D1:DA6C 3D -  -  -  	dec a
 1002 D1:DA6D 28 21 -  -  	jr z, MulFunctionChainAns
 1003 D1:DA6F 3D -  -  -  	dec a
 1004 D1:DA70 28 21 -  -  	jr z, MulFunctionFunction
 1005 D1:DA72 C3 DB AE D1 	jp MulError
 1006 D1:DA76 -  -  -  -  MulFunctionNumber:
 1007 D1:DA76 79 -  -  -  	ld a, c
 1008 D1:DA77 06 02 -  -  	ld b, OutputInHL
 1009 D1:DA79 CD 3A AD D1 	call GetFunction
 1010 D1:DA7D C3 B7 D9 D1 	jp MulChainAnsNumber
 1011 D1:DA81 -  -  -  -  MulFunctionVariable:
 1012 D1:DA81 79 -  -  -  	ld a, c
 1013 D1:DA82 06 02 -  -  	ld b, OutputInHL
 1014 D1:DA84 CD 3A AD D1 	call GetFunction
 1015 D1:DA88 C3 21 DA D1 	jp MulChainAnsVariable
 1016 D1:DA8C -  -  -  -  MulFunctionChainPush:
 1017 D1:DA8C C3 74 AF D1 	jp UnknownError
 1018 D1:DA90 -  -  -  -  MulFunctionChainAns:
 1019 D1:DA90 59 -  -  -  	ld e, c
 1020 D1:DA91 18 A8 -  -  	jr MulChainAnsFunction
 1021 D1:DA93 -  -  -  -  MulFunctionFunction:
 1022 D1:DA93 7B -  -  -  	ld a, e
 1023 D1:DA94 06 00 -  -  	ld b, OutputInBC
 1024 D1:DA96 CD 3A AD D1 	call GetFunction
 1025 D1:DA9A 79 -  -  -  	ld a, c
 1026 D1:DA9B 06 02 -  -  	ld b, OutputInHL
 1027 D1:DA9D CD 3A AD D1 	call GetFunction
 1028 D1:DAA1 3E CD -  -  	ld a, 0CDh
 1029 D1:DAA3 21 54 01 00 	ld hl, __imulu
 1030 D1:DAA7 C3 4C AC D1 	jp InsertAHL															; call __imulu
 1031 D1:DAAB -  -  -  -  
 1032 D1:DAAB -  -  -  -  SwapLEToGE:
 1033 D1:DAAB 3E 6E -  -  	ld a, tGE
 1034 D1:DAAD 18 02 -  -  	jr $+4	
 1035 D1:DAAF -  -  -  -  SwapLTToGT:
 1036 D1:DAAF 3E 6C -  -  	ld a, tGT
 1037 D1:DAB1 C5 -  -  -  	push bc
 1038 D1:DAB2 E1 -  -  -  	pop hl
 1039 D1:DAB3 DD 4E FC -  	ld c, (ix-4)
 1040 D1:DAB6 DD 46 F8 -  	ld b, (ix-8)
 1041 D1:DAB9 DD 70 FC -  	ld (ix-4), b
 1042 D1:DABC DD 71 F8 -  	ld (ix-8), c
 1043 D1:DABF EB -  -  -  	ex de, hl
 1044 D1:DAC0 E5 -  -  -  	push hl
 1045 D1:DAC1 C1 -  -  -  	pop bc
 1046 D1:DAC2 C9 -  -  -  	ret
 1047 D1:DAC3 -  -  -  -  
 1048 D1:DAC3 -  -  -  -  GLETNumberXXX:
 1049 D1:DAC3 DD 7E FC -  	ld a, (ix-4)
 1050 D1:DAC6 B7 -  -  -  	or a
 1051 D1:DAC7 28 10 -  -  	jr z, GLETNumberNumber
 1052 D1:DAC9 3D -  -  -  	dec a
 1053 D1:DACA 28 25 -  -  	jr z, GLETNumberVariable
 1054 D1:DACC 3D -  -  -  	dec a
 1055 D1:DACD 28 2E -  -  	jr z, GLETNumberChainPush
 1056 D1:DACF 3D -  -  -  	dec a
 1057 D1:DAD0 28 2F -  -  	jr z, GLETNumberChainAns
 1058 D1:DAD2 3D -  -  -  	dec a
 1059 D1:DAD3 28 3A -  -  	jr z, GLETNumberFunction
 1060 D1:DAD5 C3 DF AE D1 	jp GLETError
 1061 D1:DAD9 -  -  -  -  GLETNumberNumber:
 1062 D1:DAD9 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1063 D1:DADD C5 -  -  -  	push bc
 1064 D1:DADE E1 -  -  -  	pop hl
 1065 D1:DADF 3A 1F EA D0 	ld a, (tempToken)
 1066 D1:DAE3 FE 6E -  -  	cp tGE
 1067 D1:DAE5 28 01 -  -  	jr z, +_
 1068 D1:DAE7 37 -  -  -  	scf
 1069 D1:DAE8 ED 52 -  -  _:	sbc hl, de
 1070 D1:DAEA ED 62 -  -  	sbc hl, hl
 1071 D1:DAEC 23 -  -  -  	inc hl
 1072 D1:DAED DD 2F F9 -  	ld (ix-7), hl
 1073 D1:DAF0 C9 -  -  -  	ret
 1074 D1:DAF1 -  -  -  -  GLETNumberVariable:
 1075 D1:DAF1 3E 21 -  -  	ld a, 021h
 1076 D1:DAF3 C5 -  -  -  	push bc
 1077 D1:DAF4 E1 -  -  -  	pop hl
 1078 D1:DAF5 CD 4C AC D1 	call InsertAHL															; ld hl, *
 1079 D1:DAF9 C3 0D DC D1 	jp GLETChainAnsVariable
 1080 D1:DAFD -  -  -  -  GLETNumberChainPush:
 1081 D1:DAFD C3 74 AF D1 	jp UnknownError
 1082 D1:DB01 -  -  -  -  GLETNumberChainAns:
 1083 D1:DB01 CD B0 AC D1 	call MaybeChangeHLToDE
 1084 D1:DB05 3E 21 -  -  	ld a, 021h
 1085 D1:DB07 C5 -  -  -  	push bc
 1086 D1:DB08 E1 -  -  -  	pop hl
 1087 D1:DB09 CD 4C AC D1 	call InsertAHL															; ld hl, *
 1088 D1:DB0D 18 6F -  -  	jr GLETInsert
 1089 D1:DB0F -  -  -  -  GLETNumberFunction:
 1090 D1:DB0F 7B -  -  -  	ld a, e
 1091 D1:DB10 C5 -  -  -  	push bc
 1092 D1:DB11 06 01 -  -  		ld b, OutputInDE
 1093 D1:DB13 CD 3A AD D1 		call GetFunction
 1094 D1:DB17 3E 21 -  -  		ld a, 021h
 1095 D1:DB19 E1 -  -  -  	pop hl
 1096 D1:DB1A CD 4C AC D1 	call InsertAHL															; ld hl, *
 1097 D1:DB1E 18 5E -  -  	jr GLETInsert
 1098 D1:DB20 -  -  -  -  GLETVariableXXX:
 1099 D1:DB20 DD 7E FC -  	ld a, (ix-4)
 1100 D1:DB23 B7 -  -  -  	or a
 1101 D1:DB24 28 12 -  -  	jr z, GLETVariableNumber
 1102 D1:DB26 3D -  -  -  	dec a
 1103 D1:DB27 28 17 -  -  	jr z, GLETVariableVariable
 1104 D1:DB29 3D -  -  -  	dec a
 1105 D1:DB2A 28 39 -  -  	jr z, GLETVariableChainPush
 1106 D1:DB2C 3D -  -  -  	dec a
 1107 D1:DB2D 28 3A -  -  	jr z, GLETVariableChainAns
 1108 D1:DB2F 3D -  -  -  	dec a
 1109 D1:DB30 CA 73 DB D1 	jp z, GLETVariableFunction
 1110 D1:DB34 C3 DF AE D1 	jp GLETError
 1111 D1:DB38 -  -  -  -  GLETVariableNumber:
 1112 D1:DB38 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1113 D1:DB3C C3 F3 DB D1 	jp GLETChainAnsNumber
 1114 D1:DB40 -  -  -  -  GLETVariableVariable:
 1115 D1:DB40 79 -  -  -  	ld a, c
 1116 D1:DB41 BB -  -  -  	cp e
 1117 D1:DB42 20 19 -  -  	jr nz, ++_
 1118 D1:DB44 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1119 D1:DB48 3A 1F EA D0 	ld a, (tempToken)
 1120 D1:DB4C D6 6C -  -  	sub tGT
 1121 D1:DB4E 28 02 -  -  	jr z, +_
 1122 D1:DB50 3E 01 -  -  	ld a, 1
 1123 D1:DB52 11 00 00 00 _:	ld de, 0
 1124 D1:DB56 5F -  -  -  	ld e, a
 1125 D1:DB57 36 00 -  -  	ld (hl), typeNumber
 1126 D1:DB59 23 -  -  -  	inc hl
 1127 D1:DB5A ED 1F -  -  	ld (hl), de
 1128 D1:DB5C C9 -  -  -  	ret
 1129 D1:DB5D CD 65 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1130 D1:DB61 C3 0D DC D1 	jp GLETChainAnsVariable
 1131 D1:DB65 -  -  -  -  GLETVariableChainPush:
 1132 D1:DB65 C3 74 AF D1 	jp UnknownError
 1133 D1:DB69 -  -  -  -  GLETVariableChainAns:
 1134 D1:DB69 CD B0 AC D1 	call MaybeChangeHLToDE
 1135 D1:DB6D CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1136 D1:DB71 18 0B -  -  	jr GLETInsert
 1137 D1:DB73 -  -  -  -  GLETVariableFunction:
 1138 D1:DB73 7B -  -  -  	ld a, e
 1139 D1:DB74 06 01 -  -  	ld b, OutputInDE
 1140 D1:DB76 CD 3A AD D1 	call GetFunction
 1141 D1:DB7A CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1142 D1:DB7E -  -  -  -  GLETInsert:
 1143 D1:DB7E 11 37 ED 52 	ld de, 052ED37h
 1144 D1:DB82 21 ED 62 23 	ld hl, 02362EDh
 1145 D1:DB86 3A 1F EA D0 	ld a, (tempToken)
 1146 D1:DB8A FE 6C -  -  	cp tGT
 1147 D1:DB8C 28 02 -  -  	jr z, +_
 1148 D1:DB8E 1E B7 -  -  	ld e, 0B7h
 1149 D1:DB90 C3 8F AC D1 _:	jp InsertDEHL															; scf/or a \ sbc hl, de \ sbc hl, hl \ inc hl
 1150 D1:DB94 -  -  -  -  GLETChainPushXXX:
 1151 D1:DB94 DD 7E FC -  	ld a, (ix-4)
 1152 D1:DB97 B7 -  -  -  	or a
 1153 D1:DB98 28 12 -  -  	jr z, GLETChainPushNumber
 1154 D1:DB9A 3D -  -  -  	dec a
 1155 D1:DB9B 28 17 -  -  	jr z, GLETChainPushVariable
 1156 D1:DB9D 3D -  -  -  	dec a
 1157 D1:DB9E 28 1C -  -  	jr z, GLETChainPushChainPush
 1158 D1:DBA0 3D -  -  -  	dec a
 1159 D1:DBA1 28 1D -  -  	jr z, GLETChainPushChainAns
 1160 D1:DBA3 3D -  -  -  	dec a
 1161 D1:DBA4 CA CC DB D1 	jp z, GLETChainPushFunction
 1162 D1:DBA8 C3 DF AE D1 	jp GLETError
 1163 D1:DBAC -  -  -  -  GLETChainPushNumber:
 1164 D1:DBAC 3E E1 -  -  	ld a, 0E1h
 1165 D1:DBAE CD 0E AD D1 	call InsertA															; pop hl
 1166 D1:DBB2 18 3F -  -  	jr GLETChainAnsNumber
 1167 D1:DBB4 -  -  -  -  GLETChainPushVariable:
 1168 D1:DBB4 3E E1 -  -  	ld a, 0E1h
 1169 D1:DBB6 CD 0E AD D1 	call InsertA															; pop hl
 1170 D1:DBBA 18 51 -  -  	jr GLETChainAnsVariable
 1171 D1:DBBC -  -  -  -  GLETChainPushChainPush:
 1172 D1:DBBC C3 74 AF D1 	jp UnknownError
 1173 D1:DBC0 -  -  -  -  GLETChainPushChainAns:
 1174 D1:DBC0 CD B0 AC D1 	call MaybeChangeHLToDE
 1175 D1:DBC4 3E E1 -  -  	ld a, 0E1h
 1176 D1:DBC6 CD 0E AD D1 	call InsertA															; pop hl
 1177 D1:DBCA 18 B2 -  -  	jr GLETInsert
 1178 D1:DBCC -  -  -  -  GLETChainPushFunction:
 1179 D1:DBCC 7B -  -  -  	ld a, e
 1180 D1:DBCD 06 01 -  -  	ld b, OutputInDE
 1181 D1:DBCF CD 3A AD D1 	call GetFunction
 1182 D1:DBD3 3E E1 -  -  	ld a, 0E1h
 1183 D1:DBD5 CD 0E AD D1 	call InsertA															; pop hl
 1184 D1:DBD9 18 A3 -  -  _:	jr GLETInsert
 1185 D1:DBDB -  -  -  -  GLETChainAnsXXX:
 1186 D1:DBDB DD 7E FC -  	ld a, (ix-4)
 1187 D1:DBDE B7 -  -  -  	or a
 1188 D1:DBDF 28 12 -  -  	jr z, GLETChainAnsNumber
 1189 D1:DBE1 3D -  -  -  	dec a
 1190 D1:DBE2 28 29 -  -  	jr z, GLETChainAnsVariable
 1191 D1:DBE4 3D -  -  -  	dec a
 1192 D1:DBE5 28 30 -  -  	jr z, GLETChainAnsChainPush
 1193 D1:DBE7 3D -  -  -  	dec a
 1194 D1:DBE8 28 31 -  -  	jr z, GLETChainAnsChainAns
 1195 D1:DBEA 3D -  -  -  	dec a
 1196 D1:DBEB CA 1F DC D1 	jp z, GLETChainAnsFunction
 1197 D1:DBEF C3 DF AE D1 	jp GLETError
 1198 D1:DBF3 -  -  -  -  GLETChainAnsNumber:
 1199 D1:DBF3 CD BA AC D1 	call MaybeChangeDEToHL
 1200 D1:DBF7 21 1F EA D0 	ld hl, tempToken
 1201 D1:DBFB 7E -  -  -  	ld a, (hl)
 1202 D1:DBFC FE 6C -  -  	cp tGT
 1203 D1:DBFE 20 04 -  -  	jr nz, +_
 1204 D1:DC00 13 -  -  -  	inc de
 1205 D1:DC01 3E 6E -  -  	ld a, tGE
 1206 D1:DC03 77 -  -  -  	ld (hl), a
 1207 D1:DC04 3E 11 -  -  _:	ld a, 011h
 1208 D1:DC06 EB -  -  -  	ex de, hl
 1209 D1:DC07 CD 4C AC D1 	call InsertAHL															; ld de, *
 1210 D1:DC0B 18 CC -  -  	jr --_
 1211 D1:DC0D -  -  -  -  GLETChainAnsVariable:
 1212 D1:DC0D CD BA AC D1 	call MaybeChangeDEToHL
 1213 D1:DC11 CD 6E AC D1 	call InsertIXE															; ld de, (ix+*)
 1214 D1:DC15 18 C2 -  -  	jr --_
 1215 D1:DC17 -  -  -  -  GLETChainAnsChainPush:
 1216 D1:DC17 C3 74 AF D1 	jp UnknownError
 1217 D1:DC1B -  -  -  -  GLETChainAnsChainAns:
 1218 D1:DC1B C3 74 AF D1 	jp UnknownError
 1219 D1:DC1F -  -  -  -  GLETChainAnsFunction:
 1220 D1:DC1F 3A 6A EA D1 	ld a, (ExprOutput)
 1221 D1:DC23 87 -  -  -  	add a, a
 1222 D1:DC24 87 -  -  -  	add a, a
 1223 D1:DC25 87 -  -  -  	add a, a
 1224 D1:DC26 87 -  -  -  	add a, a
 1225 D1:DC27 C6 D5 -  -  	add a, 0D5h
 1226 D1:DC29 CD 0E AD D1 	call InsertA															; push hl/de
 1227 D1:DC2D 7B -  -  -  	ld a, e
 1228 D1:DC2E 06 01 -  -  	ld b, OutputInDE
 1229 D1:DC30 CD 3A AD D1 	call GetFunction
 1230 D1:DC34 3E E1 -  -  	ld a, 0E1h
 1231 D1:DC36 CD 0E AD D1 	call InsertA															; pop hl
 1232 D1:DC3A 18 C8 -  -  _:	jr --_
 1233 D1:DC3C -  -  -  -  GLETFunctionXXX:
 1234 D1:DC3C DD 7E FC -  	ld a, (ix-4)
 1235 D1:DC3F B7 -  -  -  	or a
 1236 D1:DC40 28 10 -  -  	jr z, GLETFunctionNumber
 1237 D1:DC42 3D -  -  -  	dec a
 1238 D1:DC43 28 18 -  -  	jr z, GLETFunctionVariable
 1239 D1:DC45 3D -  -  -  	dec a
 1240 D1:DC46 28 20 -  -  	jr z, GLETFunctionChainPush
 1241 D1:DC48 3D -  -  -  	dec a
 1242 D1:DC49 28 21 -  -  	jr z, GLETFunctionChainAns
 1243 D1:DC4B 3D -  -  -  	dec a
 1244 D1:DC4C 28 3B -  -  	jr z, GLETFunctionFunction
 1245 D1:DC4E C3 DF AE D1 	jp GLETError
 1246 D1:DC52 -  -  -  -  GLETFunctionNumber:
 1247 D1:DC52 79 -  -  -  	ld a, c
 1248 D1:DC53 06 02 -  -  	ld b, OutputInHL
 1249 D1:DC55 CD 3A AD D1 	call GetFunction
 1250 D1:DC59 C3 F3 DB D1 	jp GLETChainAnsNumber
 1251 D1:DC5D -  -  -  -  GLETFunctionVariable:
 1252 D1:DC5D 79 -  -  -  	ld a, c
 1253 D1:DC5E 06 02 -  -  	ld b, OutputInHL
 1254 D1:DC60 CD 3A AD D1 	call GetFunction
 1255 D1:DC64 C3 0D DC D1 	jp GLETChainAnsVariable
 1256 D1:DC68 -  -  -  -  GLETFunctionChainPush:
 1257 D1:DC68 C3 74 AF D1 	jp UnknownError
 1258 D1:DC6C -  -  -  -  GLETFunctionChainAns:
 1259 D1:DC6C 3A 6A EA D1 	ld a, (ExprOutput)
 1260 D1:DC70 87 -  -  -  	add a, a
 1261 D1:DC71 87 -  -  -  	add a, a
 1262 D1:DC72 87 -  -  -  	add a, a
 1263 D1:DC73 87 -  -  -  	add a, a
 1264 D1:DC74 C6 D5 -  -  	add a, 0D5h
 1265 D1:DC76 CD 0E AD D1 	call InsertA															; push hl/de
 1266 D1:DC7A 79 -  -  -  	ld a, c
 1267 D1:DC7B 06 02 -  -  	ld b, OutputInHL
 1268 D1:DC7D CD 3A AD D1 	call GetFunction
 1269 D1:DC81 3E D1 -  -  	ld a, 0D1h
 1270 D1:DC83 CD 0E AD D1 	call InsertA															; pop de
 1271 D1:DC87 18 B1 -  -  	jr -_
 1272 D1:DC89 -  -  -  -  GLETFunctionFunction:
 1273 D1:DC89 7B -  -  -  	ld a, e
 1274 D1:DC8A 06 01 -  -  	ld b, OutputInDE
 1275 D1:DC8C CD 3A AD D1 	call GetFunction
 1276 D1:DC90 79 -  -  -  	ld a, c
 1277 D1:DC91 06 02 -  -  	ld b, OutputInHL
 1278 D1:DC93 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1279 D1:DC97 CD 3A AD D1 	call GetFunction
 1280 D1:DC9B 18 9D -  -  	jr -_
 1281 D1:DC9D -  -  -  -  	
 1282 D1:DC9D -  -  -  -  NEQNumberXXX:
 1283 D1:DC9D DD 7E FC -  	ld a, (ix-4)
 1284 D1:DCA0 B7 -  -  -  	or a
 1285 D1:DCA1 28 10 -  -  	jr z, NEQNumberNumber
 1286 D1:DCA3 3D -  -  -  	dec a
 1287 D1:DCA4 28 33 -  -  	jr z, NEQNumberVariable
 1288 D1:DCA6 3D -  -  -  	dec a
 1289 D1:DCA7 28 37 -  -  	jr z, NEQNumberChainPush
 1290 D1:DCA9 3D -  -  -  	dec a
 1291 D1:DCAA 28 38 -  -  	jr z, NEQNumberChainAns
 1292 D1:DCAC 3D -  -  -  	dec a
 1293 D1:DCAD 28 3B -  -  	jr z, NEQNumberFunction
 1294 D1:DCAF C3 F9 AE D1 	jp NEQError
 1295 D1:DCB3 -  -  -  -  NEQNumberNumber:
 1296 D1:DCB3 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1297 D1:DCB7 EB -  -  -  	ex de, hl
 1298 D1:DCB8 3A 1F EA D0 	ld a, (tempToken)
 1299 D1:DCBC FE 6A -  -  	cp tEq
 1300 D1:DCBE 28 0C -  -  	jr z, +_
 1301 D1:DCC0 B7 -  -  -  	or a
 1302 D1:DCC1 ED 42 -  -  	sbc hl, bc
 1303 D1:DCC3 21 00 00 00 	ld hl, 0
 1304 D1:DCC7 28 01 -  -  	jr z, $+3
 1305 D1:DCC9 23 -  -  -  	inc hl
 1306 D1:DCCA 18 09 -  -  	jr ++_
 1307 D1:DCCC ED 42 -  -  _:	sbc hl, bc
 1308 D1:DCCE 21 00 00 00 	ld hl, 0
 1309 D1:DCD2 20 01 -  -  	jr nz, $+3
 1310 D1:DCD4 23 -  -  -  	inc hl
 1311 D1:DCD5 DD 2F F9 -  _:	ld (ix-7), hl
 1312 D1:DCD8 C9 -  -  -  	ret
 1313 D1:DCD9 -  -  -  -  NEQNumberVariable:
 1314 D1:DCD9 C5 -  -  -  	push bc
 1315 D1:DCDA E1 -  -  -  	pop hl
 1316 D1:DCDB EB -  -  -  	ex de, hl
 1317 D1:DCDC E5 -  -  -  	push hl
 1318 D1:DCDD C1 -  -  -  	pop bc
 1319 D1:DCDE 18 2B -  -  	jr NEQVariableNumber
 1320 D1:DCE0 -  -  -  -  NEQNumberChainPush:
 1321 D1:DCE0 C3 74 AF D1 	jp UnknownError
 1322 D1:DCE4 -  -  -  -  NEQNumberChainAns:
 1323 D1:DCE4 C5 -  -  -  	push bc
 1324 D1:DCE5 D1 -  -  -  	pop de
 1325 D1:DCE6 C3 D0 DD D1 	jp NEQChainAnsNumber
 1326 D1:DCEA -  -  -  -  NEQNumberFunction:
 1327 D1:DCEA C5 -  -  -  	push bc
 1328 D1:DCEB E1 -  -  -  	pop hl
 1329 D1:DCEC EB -  -  -  	ex de, hl
 1330 D1:DCED E5 -  -  -  	push hl
 1331 D1:DCEE C1 -  -  -  	pop bc
 1332 D1:DCEF C3 4D DE D1 	jp NEQFunctionNumber
 1333 D1:DCF3 -  -  -  -  NEQVariableXXX:
 1334 D1:DCF3 DD 7E FC -  	ld a, (ix-4)
 1335 D1:DCF6 B7 -  -  -  	or a
 1336 D1:DCF7 28 12 -  -  	jr z, NEQVariableNumber
 1337 D1:DCF9 3D -  -  -  	dec a
 1338 D1:DCFA 28 17 -  -  	jr z, NEQVariableVariable
 1339 D1:DCFC 3D -  -  -  	dec a
 1340 D1:DCFD 28 39 -  -  	jr z, NEQVariableChainPush
 1341 D1:DCFF 3D -  -  -  	dec a
 1342 D1:DD00 28 3A -  -  	jr z, NEQVariableChainAns
 1343 D1:DD02 3D -  -  -  	dec a
 1344 D1:DD03 CA 41 DD D1 	jp z, NEQVariableFunction
 1345 D1:DD07 C3 F9 AE D1 	jp NEQError
 1346 D1:DD0B -  -  -  -  NEQVariableNumber:
 1347 D1:DD0B CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1348 D1:DD0F C3 D0 DD D1 	jp NEQChainAnsNumber
 1349 D1:DD13 -  -  -  -  NEQVariableVariable:
 1350 D1:DD13 79 -  -  -  	ld a, c
 1351 D1:DD14 BB -  -  -  	cp e
 1352 D1:DD15 20 19 -  -  	jr nz, ++_
 1353 D1:DD17 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1354 D1:DD1B 3A 1F EA D0 	ld a, (tempToken)
 1355 D1:DD1F D6 6F -  -  	sub tNE
 1356 D1:DD21 28 02 -  -  	jr z, +_
 1357 D1:DD23 3E 01 -  -  	ld a, 1
 1358 D1:DD25 11 00 00 00 _:	ld de, 0
 1359 D1:DD29 5F -  -  -  	ld e, a
 1360 D1:DD2A 36 00 -  -  	ld (hl), typeNumber
 1361 D1:DD2C 23 -  -  -  	inc hl
 1362 D1:DD2D ED 1F -  -  	ld (hl), de
 1363 D1:DD2F C9 -  -  -  	ret
 1364 D1:DD30 CD 65 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1365 D1:DD34 C3 F4 DD D1 	jp NEQChainAnsVariable
 1366 D1:DD38 -  -  -  -  NEQVariableChainPush:
 1367 D1:DD38 C3 74 AF D1 	jp UnknownError
 1368 D1:DD3C -  -  -  -  NEQVariableChainAns:
 1369 D1:DD3C 59 -  -  -  	ld e, c
 1370 D1:DD3D C3 F4 DD D1 	jp NEQChainAnsVariable
 1371 D1:DD41 -  -  -  -  NEQVariableFunction:
 1372 D1:DD41 7B -  -  -  	ld a, e
 1373 D1:DD42 06 01 -  -  	ld b, OutputInDE
 1374 D1:DD44 CD 3A AD D1 	call GetFunction
 1375 D1:DD48 CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1376 D1:DD4C -  -  -  -  NEQInsert:
 1377 D1:DD4C 21 B7 ED 52 	ld hl, 052EDB7h
 1378 D1:DD50 CD 50 AC D1 	call InsertHL															; or a \ sbc hl, de
 1379 D1:DD54 11 00 00 00 	ld de, 0
 1380 D1:DD58 21 20 01 23 	ld hl, 0230120h
 1381 D1:DD5C 3A 1F EA D0 	ld a, (tempToken)
 1382 D1:DD60 FE 6A -  -  	cp tEq
 1383 D1:DD62 28 02 -  -  	jr z, +_
 1384 D1:DD64 2E 28 -  -  	ld l, 028h
 1385 D1:DD66 3E 21 -  -  _:	ld a, 021h
 1386 D1:DD68 C3 8B AC D1 	jp InsertADEHL															; ld hl, 0 \ jr [n]z, $+3 \ inc hl
 1387 D1:DD6C -  -  -  -  NEQChainPushXXX:
 1388 D1:DD6C DD 7E FC -  	ld a, (ix-4)
 1389 D1:DD6F B7 -  -  -  	or a
 1390 D1:DD70 28 12 -  -  	jr z, NEQChainPushNumber
 1391 D1:DD72 3D -  -  -  	dec a
 1392 D1:DD73 28 17 -  -  	jr z, NEQChainPushVariable
 1393 D1:DD75 3D -  -  -  	dec a
 1394 D1:DD76 28 1C -  -  	jr z, NEQChainPushChainPush
 1395 D1:DD78 3D -  -  -  	dec a
 1396 D1:DD79 28 1D -  -  	jr z, NEQChainPushChainAns
 1397 D1:DD7B 3D -  -  -  	dec a
 1398 D1:DD7C CA A9 DD D1 	jp z, NEQChainPushFunction
 1399 D1:DD80 C3 F9 AE D1 	jp NEQError
 1400 D1:DD84 -  -  -  -  NEQChainPushNumber:
 1401 D1:DD84 3E E1 -  -  	ld a, 0E1h
 1402 D1:DD86 CD 0E AD D1 	call InsertA															; pop hl
 1403 D1:DD8A 18 44 -  -  	jr NEQChainAnsNumber
 1404 D1:DD8C -  -  -  -  NEQChainPushVariable:
 1405 D1:DD8C 3E E1 -  -  	ld a, 0E1h
 1406 D1:DD8E CD 0E AD D1 	call InsertA															; pop hl
 1407 D1:DD92 18 60 -  -  	jr NEQChainAnsVariable
 1408 D1:DD94 -  -  -  -  NEQChainPushChainPush:
 1409 D1:DD94 C3 74 AF D1 	jp UnknownError
 1410 D1:DD98 -  -  -  -  NEQChainPushChainAns:
 1411 D1:DD98 3A 6A EA D1 	ld a, (ExprOutput)
 1412 D1:DD9C B7 -  -  -  	or a
 1413 D1:DD9D 3E D1 -  -  	ld a, 0D1h
 1414 D1:DD9F 20 02 -  -  	jr nz, +_
 1415 D1:DDA1 3E E1 -  -  	ld a, 0E1h
 1416 D1:DDA3 CD 0E AD D1 _:	call InsertA															; pop hl/de
 1417 D1:DDA7 18 A3 -  -  	jr NEQInsert
 1418 D1:DDA9 -  -  -  -  NEQChainPushFunction:
 1419 D1:DDA9 7B -  -  -  	ld a, e
 1420 D1:DDAA 06 02 -  -  	ld b, OutputInHL
 1421 D1:DDAC CD 3A AD D1 	call GetFunction
 1422 D1:DDB0 3E D1 -  -  	ld a, 0D1h
 1423 D1:DDB2 CD 0E AD D1 	call InsertA															; pop de
 1424 D1:DDB6 18 94 -  -  _:	jr NEQInsert
 1425 D1:DDB8 -  -  -  -  NEQChainAnsXXX:
 1426 D1:DDB8 DD 7E FC -  	ld a, (ix-4)
 1427 D1:DDBB B7 -  -  -  	or a
 1428 D1:DDBC 28 12 -  -  	jr z, NEQChainAnsNumber
 1429 D1:DDBE 3D -  -  -  	dec a
 1430 D1:DDBF 28 33 -  -  	jr z, NEQChainAnsVariable
 1431 D1:DDC1 3D -  -  -  	dec a
 1432 D1:DDC2 28 4C -  -  	jr z, NEQChainAnsChainPush
 1433 D1:DDC4 3D -  -  -  	dec a
 1434 D1:DDC5 28 4D -  -  	jr z, NEQChainAnsChainAns
 1435 D1:DDC7 3D -  -  -  	dec a
 1436 D1:DDC8 CA 18 DE D1 	jp z, NEQChainAnsFunction
 1437 D1:DDCC C3 F9 AE D1 	jp NEQError
 1438 D1:DDD0 -  -  -  -  NEQChainAnsNumber:
 1439 D1:DDD0 FD CB C0 5E 	bit op_is_last_one, (iy+fExpression1)
 1440 D1:DDD4 28 0C -  -  	jr z, +_
 1441 D1:DDD6 3A 1F EA D0 	ld a, (tempToken)
 1442 D1:DDDA FE 6F -  -  	cp tNE
 1443 D1:DDDC 20 04 -  -  	jr nz, +_
 1444 D1:DDDE FD CB C0 AE 	res ans_set_z_flag, (iy+fExpression1)
 1445 D1:DDE2 3A 6A EA D1 _:	ld a, (ExprOutput)
 1446 D1:DDE6 B7 -  -  -  	or a
 1447 D1:DDE7 3E 11 -  -  	ld a, 011h
 1448 D1:DDE9 20 02 -  -  	jr nz, $+4
 1449 D1:DDEB 3E 21 -  -  	ld a, 021h
 1450 D1:DDED EB -  -  -  	ex de, hl
 1451 D1:DDEE CD 4C AC D1 	call InsertAHL															; ld hl/de, *
 1452 D1:DDF2 18 C2 -  -  	jr --_
 1453 D1:DDF4 -  -  -  -  NEQChainAnsVariable:
 1454 D1:DDF4 26 17 -  -  	ld h, 017h
 1455 D1:DDF6 16 03 -  -  	ld d, 3
 1456 D1:DDF8 ED 5C -  -  	mlt de
 1457 D1:DDFA 7B -  -  -  	ld a, e
 1458 D1:DDFB 2E DD -  -  	ld l, 0DDh
 1459 D1:DDFD CD 70 1D 02 	call _SetHLUToA
 1460 D1:DE01 3A 6A EA D1 	ld a, (ExprOutput)
 1461 D1:DE05 B7 -  -  -  	or a
 1462 D1:DE06 20 02 -  -  	jr nz, $+4
 1463 D1:DE08 26 27 -  -  	ld h, 027h
 1464 D1:DE0A CD 50 AC D1 	call InsertHL															; ld hl/de, (ix+*)
 1465 D1:DE0E 18 A6 -  -  	jr --_
 1466 D1:DE10 -  -  -  -  NEQChainAnsChainPush:
 1467 D1:DE10 C3 74 AF D1 	jp UnknownError
 1468 D1:DE14 -  -  -  -  NEQChainAnsChainAns:
 1469 D1:DE14 C3 74 AF D1 	jp UnknownError
 1470 D1:DE18 -  -  -  -  NEQChainAnsFunction:
 1471 D1:DE18 3A 6A EA D1 	ld a, (ExprOutput)
 1472 D1:DE1C 87 -  -  -  	add a, a
 1473 D1:DE1D 87 -  -  -  	add a, a
 1474 D1:DE1E 87 -  -  -  	add a, a
 1475 D1:DE1F 87 -  -  -  	add a, a
 1476 D1:DE20 C6 D5 -  -  	add a, 0D5h
 1477 D1:DE22 CD 0E AD D1 	call InsertA															; push hl/de
 1478 D1:DE26 7B -  -  -  	ld a, e
 1479 D1:DE27 06 02 -  -  	ld b, OutputInHL
 1480 D1:DE29 CD 3A AD D1 	call GetFunction
 1481 D1:DE2D 3E D1 -  -  	ld a, 0D1h
 1482 D1:DE2F CD 0E AD D1 	call InsertA															; pop de
 1483 D1:DE33 C3 4C DD D1 _:	jp NEQInsert
 1484 D1:DE37 -  -  -  -  NEQFunctionXXX:
 1485 D1:DE37 DD 7E FC -  	ld a, (ix-4)
 1486 D1:DE3A B7 -  -  -  	or a
 1487 D1:DE3B 28 10 -  -  	jr z, NEQFunctionNumber
 1488 D1:DE3D 3D -  -  -  	dec a
 1489 D1:DE3E 28 18 -  -  	jr z, NEQFunctionVariable
 1490 D1:DE40 3D -  -  -  	dec a
 1491 D1:DE41 28 1C -  -  	jr z, NEQFunctionChainPush
 1492 D1:DE43 3D -  -  -  	dec a
 1493 D1:DE44 28 1D -  -  	jr z, NEQFunctionChainAns
 1494 D1:DE46 3D -  -  -  	dec a
 1495 D1:DE47 28 1D -  -  	jr z, NEQFunctionFunction
 1496 D1:DE49 C3 F9 AE D1 	jp NEQError
 1497 D1:DE4D -  -  -  -  NEQFunctionNumber:
 1498 D1:DE4D 79 -  -  -  	ld a, c
 1499 D1:DE4E 06 02 -  -  	ld b, OutputInHL
 1500 D1:DE50 CD 3A AD D1 	call GetFunction
 1501 D1:DE54 C3 D0 DD D1 	jp NEQChainAnsNumber
 1502 D1:DE58 -  -  -  -  NEQFunctionVariable:
 1503 D1:DE58 79 -  -  -  	ld a, c
 1504 D1:DE59 4B -  -  -  	ld c, e
 1505 D1:DE5A 5F -  -  -  	ld e, a
 1506 D1:DE5B C3 41 DD D1 	jp NEQVariableFunction
 1507 D1:DE5F -  -  -  -  NEQFunctionChainPush:
 1508 D1:DE5F C3 74 AF D1 	jp UnknownError
 1509 D1:DE63 -  -  -  -  NEQFunctionChainAns:
 1510 D1:DE63 59 -  -  -  	ld e, c
 1511 D1:DE64 18 B2 -  -  	jr NEQChainAnsFunction
 1512 D1:DE66 -  -  -  -  NEQFunctionFunction:
 1513 D1:DE66 7B -  -  -  	ld a, e
 1514 D1:DE67 06 01 -  -  	ld b, OutputInDE
 1515 D1:DE69 CD 3A AD D1 	call GetFunction
 1516 D1:DE6D 79 -  -  -  	ld a, c
 1517 D1:DE6E 06 02 -  -  	ld b, OutputInHL
 1518 D1:DE70 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1519 D1:DE74 CD 3A AD D1 	call GetFunction
 1520 D1:DE78 18 B9 -  -  	jr -_
 1521 D1:DE7A -  -  -  -  
 1522 D1:DE7A -  -  -  -  XORANDNumberXXX:
 1523 D1:DE7A DD 7E FC -  	ld a, (ix-4)
 1524 D1:DE7D B7 -  -  -  	or a
 1525 D1:DE7E 28 10 -  -  	jr z, XORANDNumberNumber
 1526 D1:DE80 3D -  -  -  	dec a
 1527 D1:DE81 28 59 -  -  	jr z, XORANDNumberVariable
 1528 D1:DE83 3D -  -  -  	dec a
 1529 D1:DE84 28 5D -  -  	jr z, XORANDNumberChainPush
 1530 D1:DE86 3D -  -  -  	dec a
 1531 D1:DE87 28 5E -  -  	jr z, XORANDNumberChainAns
 1532 D1:DE89 3D -  -  -  	dec a
 1533 D1:DE8A 28 61 -  -  	jr z, XORANDNumberFunction
 1534 D1:DE8C C3 07 AF D1 	jp XORANDError
 1535 D1:DE90 -  -  -  -  XORANDNumberNumber:
 1536 D1:DE90 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1537 D1:DE94 B7 -  -  -  	or a
 1538 D1:DE95 ED 62 -  -  	sbc hl, hl
 1539 D1:DE97 3A 1F EA D0 	ld a, (tempToken)
 1540 D1:DE9B FE 3D -  -  	cp tXor
 1541 D1:DE9D 28 22 -  -  	jr z, ++_
 1542 D1:DE9F FE 3C -  -  	cp tOr
 1543 D1:DEA1 28 0F -  -  	jr z, +_
 1544 D1:DEA3 CD 48 1D 02 	call _ChkBCIs0
 1545 D1:DEA7 28 2F -  -  	jr z, +++_
 1546 D1:DEA9 CD 4C 1D 02 	call _ChkDEIs0
 1547 D1:DEAD 28 29 -  -  	jr z, +++_
 1548 D1:DEAF 23 -  -  -  	inc hl
 1549 D1:DEB0 18 26 -  -  	jr +++_
 1550 D1:DEB2 CD 48 1D 02 _:	call _ChkBCIs0
 1551 D1:DEB6 47 -  -  -  	ld b, a
 1552 D1:DEB7 CD 4C 1D 02 	call _ChkDEIs0
 1553 D1:DEBB B0 -  -  -  	or a, b
 1554 D1:DEBC 28 1A -  -  	jr z, ++_
 1555 D1:DEBE 23 -  -  -  	inc hl
 1556 D1:DEBF 18 17 -  -  	jr ++_
 1557 D1:DEC1 CD 4C 1D 02 _:	call _ChkDEIs0
 1558 D1:DEC5 11 00 00 00 	ld de, 0
 1559 D1:DEC9 28 01 -  -  	jr z, $+3
 1560 D1:DECB 13 -  -  -  	inc de
 1561 D1:DECC CD 48 1D 02 	call _ChkBCIs0
 1562 D1:DED0 3E 00 -  -  	ld a, 0
 1563 D1:DED2 28 01 -  -  	jr z, $+3
 1564 D1:DED4 3C -  -  -  	inc a
 1565 D1:DED5 AB -  -  -  	xor e
 1566 D1:DED6 5F -  -  -  	ld e, a
 1567 D1:DED7 EB -  -  -  	ex de, hl
 1568 D1:DED8 DD 2F F9 -  _:	ld (ix-7), hl
 1569 D1:DEDB C9 -  -  -  	ret
 1570 D1:DEDC -  -  -  -  XORANDNumberVariable:
 1571 D1:DEDC C5 -  -  -  	push bc
 1572 D1:DEDD E1 -  -  -  	pop hl
 1573 D1:DEDE EB -  -  -  	ex de, hl
 1574 D1:DEDF E5 -  -  -  	push hl
 1575 D1:DEE0 C1 -  -  -  	pop bc
 1576 D1:DEE1 18 2B -  -  	jr XORANDVariableNumber
 1577 D1:DEE3 -  -  -  -  XORANDNumberChainPush:
 1578 D1:DEE3 C3 74 AF D1 	jp UnknownError
 1579 D1:DEE7 -  -  -  -  XORANDNumberChainAns:
 1580 D1:DEE7 C5 -  -  -  	push bc
 1581 D1:DEE8 D1 -  -  -  	pop de
 1582 D1:DEE9 C3 D6 DF D1 	jp XORANDChainAnsNumber
 1583 D1:DEED -  -  -  -  XORANDNumberFunction:
 1584 D1:DEED C5 -  -  -  	push bc
 1585 D1:DEEE E1 -  -  -  	pop hl
 1586 D1:DEEF EB -  -  -  	ex de, hl
 1587 D1:DEF0 E5 -  -  -  	push hl
 1588 D1:DEF1 C1 -  -  -  	pop bc
 1589 D1:DEF2 C3 3F E0 D1 	jp XORANDFunctionNumber
 1590 D1:DEF6 -  -  -  -  XORANDVariableXXX:
 1591 D1:DEF6 DD 7E FC -  	ld a, (ix-4)
 1592 D1:DEF9 B7 -  -  -  	or a
 1593 D1:DEFA 28 12 -  -  	jr z, XORANDVariableNumber
 1594 D1:DEFC 3D -  -  -  	dec a
 1595 D1:DEFD 28 17 -  -  	jr z, XORANDVariableVariable
 1596 D1:DEFF 3D -  -  -  	dec a
 1597 D1:DF00 28 39 -  -  	jr z, XORANDVariableChainPush
 1598 D1:DF02 3D -  -  -  	dec a
 1599 D1:DF03 28 3A -  -  	jr z, XORANDVariableChainAns
 1600 D1:DF05 3D -  -  -  	dec a
 1601 D1:DF06 CA 44 DF D1 	jp z, XORANDVariableFunction
 1602 D1:DF0A C3 07 AF D1 	jp XORANDError
 1603 D1:DF0E -  -  -  -  XORANDVariableNumber:
 1604 D1:DF0E CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1605 D1:DF12 C3 D6 DF D1 	jp XORANDChainAnsNumber
 1606 D1:DF16 -  -  -  -  XORANDVariableVariable:
 1607 D1:DF16 79 -  -  -  	ld a, c
 1608 D1:DF17 BB -  -  -  	cp e
 1609 D1:DF18 20 19 -  -  	jr nz, ++_
 1610 D1:DF1A FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1611 D1:DF1E 3A 1F EA D0 	ld a, (tempToken)
 1612 D1:DF22 D6 6F -  -  	sub tNE
 1613 D1:DF24 28 02 -  -  	jr z, +_
 1614 D1:DF26 3E 01 -  -  	ld a, 1
 1615 D1:DF28 11 00 00 00 _:	ld de, 0
 1616 D1:DF2C 5F -  -  -  	ld e, a
 1617 D1:DF2D 36 00 -  -  	ld (hl), typeNumber
 1618 D1:DF2F 23 -  -  -  	inc hl
 1619 D1:DF30 ED 1F -  -  	ld (hl), de
 1620 D1:DF32 C9 -  -  -  	ret
 1621 D1:DF33 CD 65 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1622 D1:DF37 C3 E8 DF D1 	jp XORANDChainAnsVariable
 1623 D1:DF3B -  -  -  -  XORANDVariableChainPush:
 1624 D1:DF3B C3 74 AF D1 	jp UnknownError
 1625 D1:DF3F -  -  -  -  XORANDVariableChainAns:
 1626 D1:DF3F 59 -  -  -  	ld e, c
 1627 D1:DF40 C3 E8 DF D1 	jp XORANDChainAnsVariable
 1628 D1:DF44 -  -  -  -  XORANDVariableFunction:
 1629 D1:DF44 7B -  -  -  	ld a, e
 1630 D1:DF45 06 01 -  -  	ld b, OutputInDE
 1631 D1:DF47 CD 3A AD D1 	call GetFunction
 1632 D1:DF4B CD 65 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1633 D1:DF4F -  -  -  -  XORANDInsert:
 1634 D1:DF4F ED 5B 49 EA 
              D1 -  -  -  	ld de, (programPtr)
 1635 D1:DF54 21 03 EF D1 	ld hl, XORANDData
 1636 D1:DF58 06 A2 -  -  	ld b, 0A2h
 1637 D1:DF5A 3A 1F EA D0 	ld a, (tempToken)
 1638 D1:DF5E FE 3D -  -  	cp tXor
 1639 D1:DF60 20 02 -  -  	jr nz, +_
 1640 D1:DF62 06 AA -  -  	ld b, 0AAh
 1641 D1:DF64 FE 3C -  -  _:	cp tOr
 1642 D1:DF66 20 02 -  -  	jr nz, +_
 1643 D1:DF68 06 B2 -  -  	ld b, 0B2h
 1644 D1:DF6A 78 -  -  -  _:	ld a, b
 1645 D1:DF6B 32 0D EF D1 	ld (XORANDSMC), a
 1646 D1:DF6F 01 10 00 00 	ld bc, 16
 1647 D1:DF73 ED B0 -  -  	ldir
 1648 D1:DF75 ED 53 49 EA 
              D1 -  -  -  	ld (programPtr), de
 1649 D1:DF7A C9 -  -  -  	ret
 1650 D1:DF7B -  -  -  -  XORANDChainPushXXX:
 1651 D1:DF7B DD 7E FC -  	ld a, (ix-4)
 1652 D1:DF7E B7 -  -  -  	or a
 1653 D1:DF7F 28 12 -  -  	jr z, XORANDChainPushNumber
 1654 D1:DF81 3D -  -  -  	dec a
 1655 D1:DF82 28 17 -  -  	jr z, XORANDChainPushVariable
 1656 D1:DF84 3D -  -  -  	dec a
 1657 D1:DF85 28 1C -  -  	jr z, XORANDChainPushChainPush
 1658 D1:DF87 3D -  -  -  	dec a
 1659 D1:DF88 28 1D -  -  	jr z, XORANDChainPushChainAns
 1660 D1:DF8A 3D -  -  -  	dec a
 1661 D1:DF8B CA AF DF D1 	jp z, XORANDChainPushFunction
 1662 D1:DF8F C3 07 AF D1 	jp XORANDError
 1663 D1:DF93 -  -  -  -  XORANDChainPushNumber:
 1664 D1:DF93 3E E1 -  -  	ld a, 0E1h
 1665 D1:DF95 CD 0E AD D1 	call InsertA															; pop hl
 1666 D1:DF99 18 3B -  -  	jr XORANDChainAnsNumber
 1667 D1:DF9B -  -  -  -  XORANDChainPushVariable:
 1668 D1:DF9B 3E E1 -  -  	ld a, 0E1h
 1669 D1:DF9D CD 0E AD D1 	call InsertA															; pop hl
 1670 D1:DFA1 18 45 -  -  	jr XORANDChainAnsVariable
 1671 D1:DFA3 -  -  -  -  XORANDChainPushChainPush:
 1672 D1:DFA3 C3 74 AF D1 	jp UnknownError
 1673 D1:DFA7 -  -  -  -  XORANDChainPushChainAns:
 1674 D1:DFA7 3E D1 -  -  	ld a, 0D1h
 1675 D1:DFA9 CD 0E AD D1 	call InsertA															; pop de
 1676 D1:DFAD 18 A0 -  -  	jr XORANDInsert
 1677 D1:DFAF -  -  -  -  XORANDChainPushFunction:
 1678 D1:DFAF 7B -  -  -  	ld a, e
 1679 D1:DFB0 06 02 -  -  	ld b, OutputInHL
 1680 D1:DFB2 CD 3A AD D1 	call GetFunction
 1681 D1:DFB6 3E D1 -  -  	ld a, 0D1h
 1682 D1:DFB8 CD 0E AD D1 	call InsertA															; pop de
 1683 D1:DFBC 18 91 -  -  _:	jr XORANDInsert
 1684 D1:DFBE -  -  -  -  XORANDChainAnsXXX:
 1685 D1:DFBE DD 7E FC -  	ld a, (ix-4)
 1686 D1:DFC1 B7 -  -  -  	or a
 1687 D1:DFC2 28 12 -  -  	jr z, XORANDChainAnsNumber
 1688 D1:DFC4 3D -  -  -  	dec a
 1689 D1:DFC5 28 21 -  -  	jr z, XORANDChainAnsVariable
 1690 D1:DFC7 3D -  -  -  	dec a
 1691 D1:DFC8 28 3A -  -  	jr z, XORANDChainAnsChainPush
 1692 D1:DFCA 3D -  -  -  	dec a
 1693 D1:DFCB 28 3B -  -  	jr z, XORANDChainAnsChainAns
 1694 D1:DFCD 3D -  -  -  	dec a
 1695 D1:DFCE CA 0C E0 D1 	jp z, XORANDChainAnsFunction
 1696 D1:DFD2 C3 07 AF D1 	jp XORANDError
 1697 D1:DFD6 -  -  -  -  XORANDChainAnsNumber:
 1698 D1:DFD6 3A 6A EA D1 	ld a, (ExprOutput)
 1699 D1:DFDA B7 -  -  -  	or a
 1700 D1:DFDB 3E 11 -  -  	ld a, 011h
 1701 D1:DFDD 20 02 -  -  	jr nz, +_
 1702 D1:DFDF 3E 21 -  -  	ld a, 021h
 1703 D1:DFE1 EB -  -  -  _:	ex de, hl
 1704 D1:DFE2 CD 4C AC D1 	call InsertAHL															; ld hl/de, *
 1705 D1:DFE6 18 D4 -  -  	jr --_
 1706 D1:DFE8 -  -  -  -  XORANDChainAnsVariable:
 1707 D1:DFE8 26 17 -  -  	ld h, 017h
 1708 D1:DFEA 16 03 -  -  	ld d, 3
 1709 D1:DFEC ED 5C -  -  	mlt de
 1710 D1:DFEE 7B -  -  -  	ld a, e
 1711 D1:DFEF 2E DD -  -  	ld l, 0DDh
 1712 D1:DFF1 CD 70 1D 02 	call _SetHLUToA
 1713 D1:DFF5 3A 6A EA D1 	ld a, (ExprOutput)
 1714 D1:DFF9 B7 -  -  -  	or a
 1715 D1:DFFA 20 02 -  -  	jr nz, $+4
 1716 D1:DFFC 26 27 -  -  	ld h, 027h
 1717 D1:DFFE CD 50 AC D1 	call InsertHL															; ld hl/de, (ix+*)
 1718 D1:E002 18 B8 -  -  	jr --_
 1719 D1:E004 -  -  -  -  XORANDChainAnsChainPush:
 1720 D1:E004 C3 74 AF D1 	jp UnknownError
 1721 D1:E008 -  -  -  -  XORANDChainAnsChainAns:
 1722 D1:E008 C3 74 AF D1 	jp UnknownError
 1723 D1:E00C -  -  -  -  XORANDChainAnsFunction:
 1724 D1:E00C 3A 6A EA D1 	ld a, (ExprOutput)
 1725 D1:E010 87 -  -  -  	add a, a
 1726 D1:E011 87 -  -  -  	add a, a
 1727 D1:E012 87 -  -  -  	add a, a
 1728 D1:E013 87 -  -  -  	add a, a
 1729 D1:E014 C6 D5 -  -  	add a, 0D5h
 1730 D1:E016 CD 0E AD D1 	call InsertA															; push hl/de
 1731 D1:E01A 7B -  -  -  	ld a, e
 1732 D1:E01B 06 02 -  -  	ld b, OutputInHL
 1733 D1:E01D CD 3A AD D1 	call GetFunction
 1734 D1:E021 3E D1 -  -  	ld a, 0D1h
 1735 D1:E023 CD 0E AD D1 	call InsertA															; pop de
 1736 D1:E027 18 93 -  -  _:	jr ---_
 1737 D1:E029 -  -  -  -  XORANDFunctionXXX:
 1738 D1:E029 DD 7E FC -  	ld a, (ix-4)
 1739 D1:E02C B7 -  -  -  	or a
 1740 D1:E02D 28 10 -  -  	jr z, XORANDFunctionNumber
 1741 D1:E02F 3D -  -  -  	dec a
 1742 D1:E030 28 18 -  -  	jr z, XORANDFunctionVariable
 1743 D1:E032 3D -  -  -  	dec a
 1744 D1:E033 28 1C -  -  	jr z, XORANDFunctionChainPush
 1745 D1:E035 3D -  -  -  	dec a
 1746 D1:E036 28 1D -  -  	jr z, XORANDFunctionChainAns
 1747 D1:E038 3D -  -  -  	dec a
 1748 D1:E039 28 1D -  -  	jr z, XORANDFunctionFunction
 1749 D1:E03B C3 07 AF D1 	jp XORANDError
 1750 D1:E03F -  -  -  -  XORANDFunctionNumber:
 1751 D1:E03F 79 -  -  -  	ld a, c
 1752 D1:E040 06 02 -  -  	ld b, OutputInHL
 1753 D1:E042 CD 3A AD D1 	call GetFunction
 1754 D1:E046 C3 D6 DF D1 	jp XORANDChainAnsNumber
 1755 D1:E04A -  -  -  -  XORANDFunctionVariable:
 1756 D1:E04A 79 -  -  -  	ld a, c
 1757 D1:E04B 4B -  -  -  	ld c, e
 1758 D1:E04C 5F -  -  -  	ld e, a
 1759 D1:E04D C3 44 DF D1 	jp XORANDVariableFunction
 1760 D1:E051 -  -  -  -  XORANDFunctionChainPush:
 1761 D1:E051 C3 74 AF D1 	jp UnknownError
 1762 D1:E055 -  -  -  -  XORANDFunctionChainAns:
 1763 D1:E055 59 -  -  -  	ld e, c
 1764 D1:E056 18 B4 -  -  	jr XORANDChainAnsFunction
 1765 D1:E058 -  -  -  -  XORANDFunctionFunction:
 1766 D1:E058 7B -  -  -  	ld a, e
 1767 D1:E059 06 01 -  -  	ld b, OutputInDE
 1768 D1:E05B CD 3A AD D1 	call GetFunction
 1769 D1:E05F 79 -  -  -  	ld a, c
 1770 D1:E060 06 02 -  -  	ld b, OutputInHL
 1771 D1:E062 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1772 D1:E066 CD 3A AD D1 	call GetFunction
 1773 D1:E06A 18 BB -  -  	jr -_
 1774 D1:E06C -  -  -  -  	
 1775 D1:E06C -  -  -  -  StoNumberXXX:
 1776 D1:E06C DD 7E FC -  	ld a, (ix-4)
 1777 D1:E06F FE 03 -  -  	cp typeChainAns
 1778 D1:E071 28 0A -  -  	jr z, +_
 1779 D1:E073 FE 01 -  -  	cp typeVariable
 1780 D1:E075 CA A0 E0 D1 	jp z, ++_
 1781 D1:E079 C3 74 AF D1 	jp UnknownError
 1782 D1:E07D CD F3 E1 D1 _:	call StoTestStoToListElement
 1783 D1:E081 C2 74 AF D1 	jp nz, UnknownError
 1784 D1:E085 3E 11 -  -  	ld a, 011h
 1785 D1:E087 C5 -  -  -  	push bc
 1786 D1:E088 E1 -  -  -  	pop hl
 1787 D1:E089 CD 4C AC D1 	call InsertAHL															; ld de, *
 1788 D1:E08D 3E ED -  -  	ld a, 0EDh
 1789 D1:E08F CD 0E AD D1 	call InsertA															; ld (hl), de (1)
 1790 D1:E093 3E 1F -  -  	ld a, 01Fh
 1791 D1:E095 CD 0E AD D1 	call InsertA															; ld (hl), de (2)
 1792 D1:E099 3E 00 -  -  	ld a, OutputIsInDE
 1793 D1:E09B 32 6B EA D1 	ld (ExprOutput2), a
 1794 D1:E09F C9 -  -  -  	ret
 1795 D1:E0A0 21 DD 2F 00 _:	ld hl, 0002FDDh
 1796 D1:E0A4 16 03 -  -  	ld d, 3
 1797 D1:E0A6 ED 5C -  -  	mlt de
 1798 D1:E0A8 7B -  -  -  	ld a, e
 1799 D1:E0A9 CD 70 1D 02 	call _SetHLUToA
 1800 D1:E0AD C5 -  -  -  	push bc
 1801 D1:E0AE D1 -  -  -  	pop de
 1802 D1:E0AF CD 48 1D 02 	call _ChkBCIs0
 1803 D1:E0B3 3E 21 -  -  	ld a, 021h
 1804 D1:E0B5 20 08 -  -  	jr nz, +_
 1805 D1:E0B7 11 B7 ED 62 	ld de, 062EDB7h
 1806 D1:E0BB C3 8F AC D1 	jp InsertDEHL															; or a \ sbc hl, hl \ ld (ix+*), hl
 1807 D1:E0BF C3 8B AC D1 _:	jp InsertADEHL															; ld hl, * \ ld (ix+*), hl
 1808 D1:E0C3 -  -  -  -  StoVariableXXX:
 1809 D1:E0C3 DD 7E FC -  	ld a, (ix-4)
 1810 D1:E0C6 FE 03 -  -  	cp typeChainAns
 1811 D1:E0C8 28 0A -  -  	jr z, +_
 1812 D1:E0CA FE 01 -  -  	cp typeVariable
 1813 D1:E0CC CA F4 E0 D1 	jp z, ++_
 1814 D1:E0D0 C3 74 AF D1 	jp UnknownError
 1815 D1:E0D4 CD F3 E1 D1 _:	call StoTestStoToListElement
 1816 D1:E0D8 C2 74 AF D1 	jp nz, UnknownError
 1817 D1:E0DC 59 -  -  -  	ld e, c
 1818 D1:E0DD CD 6E AC D1 	call InsertIXE															; ld de, (ix+*)
 1819 D1:E0E1 3E ED -  -  	ld a, 0EDh
 1820 D1:E0E3 CD 0E AD D1 	call InsertA															; ld (hl), de (1)
 1821 D1:E0E7 3E 1F -  -  	ld a, 01Fh
 1822 D1:E0E9 CD 0E AD D1 	call InsertA															; ld (hl), de (2)
 1823 D1:E0ED 3E 00 -  -  	ld a, OutputIsInDE
 1824 D1:E0EF 32 6B EA D1 	ld (ExprOutput2), a
 1825 D1:E0F3 C9 -  -  -  	ret
 1826 D1:E0F4 CD 65 AC D1 _:	call InsertHIXC
 1827 D1:E0F8 21 DD 2F 00 	ld hl, 0002FDDh
 1828 D1:E0FC 16 03 -  -  	ld d, 3
 1829 D1:E0FE ED 5C -  -  	mlt de
 1830 D1:E100 7B -  -  -  	ld a, e
 1831 D1:E101 CD 70 1D 02 	call _SetHLUToA
 1832 D1:E105 C3 50 AC D1 	jp InsertHL																; ld ld (ix+*), hl
 1833 D1:E109 -  -  -  -  StoChainPushXXX:
 1834 D1:E109 DD 7E FC -  	ld a, (ix-4)
 1835 D1:E10C FE 03 -  -  	cp typeChainAns
 1836 D1:E10E C2 74 AF D1 _:	jp nz, UnknownError
 1837 D1:E112 CD F3 E1 D1 	call StoTestStoToListElement
 1838 D1:E116 20 F6 -  -  	jr nz, -_
 1839 D1:E118 21 D1 ED 1F 	ld hl, 01FEDD1h
 1840 D1:E11C CD 50 AC D1 	call InsertHL															; pop de \ ld (hl), de
 1841 D1:E120 3E 00 -  -  	ld a, OutputIsInDE
 1842 D1:E122 32 6B EA D1 	ld (ExprOutput2), a
 1843 D1:E126 C9 -  -  -  	ret
 1844 D1:E127 -  -  -  -  StoChainAnsXXX:
 1845 D1:E127 DD 7E FC -  	ld a, (ix-4)
 1846 D1:E12A FE 01 -  -  	cp typeVariable
 1847 D1:E12C C2 1B AF D1 	jp nz, StoError
 1848 D1:E130 21 DD 2F 00 _:	ld hl, 0002FDDh
 1849 D1:E134 16 03 -  -  	ld d, 3
 1850 D1:E136 ED 5C -  -  	mlt de
 1851 D1:E138 7B -  -  -  	ld a, e
 1852 D1:E139 CD 70 1D 02 	call _SetHLUToA
 1853 D1:E13D 3A 6A EA D1 	ld a, (ExprOutput)
 1854 D1:E141 B7 -  -  -  	or a
 1855 D1:E142 20 02 -  -  	jr nz, $+4
 1856 D1:E144 26 1F -  -  	ld h, 01Fh
 1857 D1:E146 32 6B EA D1 	ld (ExprOutput2), a
 1858 D1:E14A C3 50 AC D1 	jp InsertHL																; ld (ix+*), hl/de
 1859 D1:E14E -  -  -  -  StoFunctionXXX:
 1860 D1:E14E DD 7E FC -  	ld a, (ix-4)
 1861 D1:E151 FE 03 -  -  	cp typeChainAns
 1862 D1:E153 28 0A -  -  	jr z, +_
 1863 D1:E155 FE 01 -  -  	cp typeVariable
 1864 D1:E157 CA 85 E1 D1 	jp z, ++_
 1865 D1:E15B C3 74 AF D1 	jp UnknownError
 1866 D1:E15F CD F3 E1 D1 _:	call StoTestStoToListElement
 1867 D1:E163 C2 74 AF D1 	jp nz, UnknownError
 1868 D1:E167 79 -  -  -  	ld a, c
 1869 D1:E168 06 01 -  -  	ld b, OutputInDE
 1870 D1:E16A FD CB C0 F6 	set need_push, (iy+fExpression1)
 1871 D1:E16E CD 3A AD D1 	call GetFunction
 1872 D1:E172 3E ED -  -  	ld a, 0EDh
 1873 D1:E174 CD 0E AD D1 	call InsertA															; ld (hl), de (1)
 1874 D1:E178 3E 1F -  -  	ld a, 01Fh
 1875 D1:E17A CD 0E AD D1 	call InsertA															; ld (hl), de (2)
 1876 D1:E17E 3E 00 -  -  	ld a, OutputIsInDE
 1877 D1:E180 32 6B EA D1 	ld (ExprOutput2), a
 1878 D1:E184 C9 -  -  -  	ret
 1879 D1:E185 79 -  -  -  _:	ld a, c
 1880 D1:E186 06 02 -  -  	ld b, OutputInHL
 1881 D1:E188 CD 3A AD D1 	call GetFunction
 1882 D1:E18C 21 DD 2F 00 	ld hl, 0002FDDh
 1883 D1:E190 16 03 -  -  	ld d, 3
 1884 D1:E192 ED 5C -  -  	mlt de
 1885 D1:E194 7B -  -  -  	ld a, e
 1886 D1:E195 CD 70 1D 02 	call _SetHLUToA
 1887 D1:E199 C3 50 AC D1 	jp InsertHL																; ld (ix+*), hl
 1888 D1:E19D -  -  -  -  StoListXXX:
 1889 D1:E19D DD 7E FC -  	ld a, (ix-4)
 1890 D1:E1A0 FE 06 -  -  	cp typeOSList
 1891 D1:E1A2 C2 1B AF D1 	jp nz, StoError
 1892 D1:E1A6 3E 21 -  -  	ld a, 021h
 1893 D1:E1A8 CD 0E AD D1 	call InsertA															; ld hl, *
 1894 D1:E1AC CD 25 AD D1 	call InsertProgramPtrToDataOffset
 1895 D1:E1B0 2A 5E EA D1 	ld hl, (programDataDataPtr)
 1896 D1:E1B4 CD 50 AC D1 	call InsertHL															; ld hl, RANDOM
 1897 D1:E1B8 3E 11 -  -  	ld a, 011h
 1898 D1:E1BA D5 -  -  -  	push de
 1899 D1:E1BB E1 -  -  -  	pop hl
 1900 D1:E1BC CD 4C AC D1 	call InsertAHL															; ld de, OSList
 1901 D1:E1C0 3E 01 -  -  	ld a, 01h
 1902 D1:E1C2 CD 0E AD D1 	call InsertA															; ld bc, *
 1903 D1:E1C6 C5 -  -  -  	push bc
 1904 D1:E1C7 E1 -  -  -  	pop hl
 1905 D1:E1C8 22 DA E1 D1 	ld (StartData), hl
 1906 D1:E1CC ED 27 -  -  	ld hl, (hl)
 1907 D1:E1CE E5 -  -  -  	push hl
 1908 D1:E1CF C1 -  -  -  	pop bc
 1909 D1:E1D0 CD 50 AC D1 	call InsertHL															; ld bc, LENGTH
 1910 D1:E1D4 ED 5B 5E EA 
              D1 -  -  -  	ld de, (programDataDataPtr)
 1911 D1:E1D9 -  -  -  -  StartData = $+1
 1912 D1:E1D9 21 00 00 00 	ld hl, 0
 1913 D1:E1DD 23 -  -  -  	inc hl
 1914 D1:E1DE 23 -  -  -  	inc hl
 1915 D1:E1DF 23 -  -  -  	inc hl
 1916 D1:E1E0 ED B0 -  -  	ldir
 1917 D1:E1E2 ED 53 5E EA 
              D1 -  -  -  	ld (programDataDataPtr), de
 1918 D1:E1E7 3E ED -  -  	ld a, 0EDh
 1919 D1:E1E9 CD 0E AD D1 	call InsertA															; ldir (1)
 1920 D1:E1ED 3E B0 -  -  	ld a, 0B0h
 1921 D1:E1EF C3 0E AD D1 	jp InsertA																; ldir (2)
 1922 D1:E1F3 -  -  -  -  	
 1923 D1:E1F3 -  -  -  -  StoTestStoToListElement:
 1924 D1:E1F3 2A 49 EA D1 	ld hl, (programPtr)
 1925 D1:E1F7 2B -  -  -  	dec hl
 1926 D1:E1F8 7E -  -  -  	ld a, (hl)
 1927 D1:E1F9 FE 27 -  -  	cp 027h
 1928 D1:E1FB 20 0B -  -  	jr nz, StoLastOpcodeNotHLHL
 1929 D1:E1FD 2B -  -  -  	dec hl
 1930 D1:E1FE 7E -  -  -  	ld a, (hl)
 1931 D1:E1FF FE ED -  -  	cp 0EDh
 1932 D1:E201 20 05 -  -  	jr nz, StoLastOpcodeNotHLHL
 1933 D1:E203 22 49 EA D1 	ld (programPtr), hl
 1934 D1:E207 C9 -  -  -  	ret
 1935 D1:E208 -  -  -  -  StoLastOpcodeNotHLHL:
 1936 D1:E208 2A 49 EA D1 	ld hl, (programPtr)
 1937 D1:E20C 2B -  -  -  	dec hl
 1938 D1:E20D 2B -  -  -  	dec hl
 1939 D1:E20E 2B -  -  -  	dec hl
 1940 D1:E20F 2B -  -  -  	dec hl
 1941 D1:E210 7E -  -  -  	ld a, (hl)
 1942 D1:E211 FE 2A -  -  	cp 02Ah
 1943 D1:E213 C0 -  -  -  	ret nz
 1944 D1:E214 36 21 -  -  	ld (hl), 021h
 1945 D1:E216 C9 -  -  -  	ret
 1946 D1:E217 00 -  -  -  	nop
 1947 D1:E218 00 -  -  -  	nop
 1948 D1:E219 00 -  -  -  	nop
Listing for file "ice.asm"
  448 D1:E21A -  -  -  -  #include "operators functions/function_for.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_for.asm"
    1 D1:E21A -  -  -  -  functionFor:
    2 D1:E21A 21 66 EA D1 	ld hl, amountOfEnds
    3 D1:E21E 34 -  -  -  	inc (hl)
    4 D1:E21F 3E 01 -  -  	ld a, 1
    5 D1:E221 32 63 EA D1 	ld (openedParensF), a
    6 D1:E225 FD 36 AF 00 	ld (iy+fFunction2), 0
    7 D1:E229 CD 28 10 02 	call _IncFetch
    8 D1:E22D D6 41 -  -  	sub tA
    9 D1:E22F DA 9F E4 D1 	jp c, functionForSmall
   10 D1:E233 FE 1B -  -  	cp ttheta+1-tA
   11 D1:E235 D2 9F E4 D1 	jp nc, functionForSmall
   12 D1:E239 -  -  -  -  	; loop variable
   13 D1:E239 47 -  -  -  	ld b, a
   14 D1:E23A 87 -  -  -  	add a, a
   15 D1:E23B 80 -  -  -  	add a, b
   16 D1:E23C 32 74 E2 D1 	ld (ForVariable1), a
   17 D1:E240 6F -  -  -  	ld l, a
   18 D1:E241 E5 -  -  -  	push hl
   19 D1:E242 CD 28 10 02 		call _IncFetch
   20 D1:E246 DA 3A AF D1 _:		jp c, ErrorSyntax
   21 D1:E24A FE 2B -  -  		cp tComma
   22 D1:E24C C2 3A AF D1 		jp nz, ErrorSyntax
   23 D1:E250 CD 28 10 02 		call _IncFetch
   24 D1:E254 -  -  -  -  		; loop start point
   25 D1:E254 2A 49 EA D1 		ld hl, (programPtr)
   26 D1:E258 E5 -  -  -  		push hl
   27 D1:E259 21 C6 52 D0 			ld hl, tempArg1
   28 D1:E25D 22 49 EA D1 			ld (programPtr), hl
   29 D1:E261 CD C6 B2 D1 			call ParseExpression
   30 D1:E265 FD CB BE 46 			bit triggered_a_comma, (iy+fExpression3)
   31 D1:E269 FD CB BE 86 			res triggered_a_comma, (iy+fExpression3)
   32 D1:E26D CA 3A AF D1 			jp z, ErrorSyntax
   33 D1:E271 -  -  -  -  ForVariable1 = $+3
   34 D1:E271 21 DD 2F 00 			ld hl, 0002FDDh
   35 D1:E275 CD 50 AC D1 			call InsertHL										; ld (ix+*), hl
   36 D1:E279 CD 28 10 02 			call _IncFetch
   37 D1:E27D 38 C7 -  -  			jr c, -_
   38 D1:E27F 2A 49 EA D1 			ld hl, (programPtr)
   39 D1:E283 11 C6 52 D0 			ld de, tempArg1
   40 D1:E287 B7 -  -  -  			or a
   41 D1:E288 ED 52 -  -  			sbc hl, de
   42 D1:E28A EB -  -  -  			ex de, hl
   43 D1:E28B E1 -  -  -  		pop hl
   44 D1:E28C 22 49 EA D1 		ld (programPtr), hl
   45 D1:E290 D5 -  -  -  		push de
   46 D1:E291 -  -  -  -  			; loop end point
   47 D1:E291 CD C6 B2 D1 			call ParseExpression
   48 D1:E295 FD CB C0 66 			bit output_is_number, (iy+fExpression1)
   49 D1:E299 20 14 -  -  			jr nz, ForEndPointIsNumber
   50 D1:E29B -  -  -  -  ForEndPointIsExpression:
   51 D1:E29B 3E 22 -  -  			ld a, 022h
   52 D1:E29D CD 0E AD D1 			call InsertA										; ld (******), hl
   53 D1:E2A1 2A 49 EA D1 			ld hl, (programPtr)
   54 D1:E2A5 22 97 E3 D1 			ld (ForEndPointExpression), hl
   55 D1:E2A9 CD 50 AC D1 			call InsertHL										; ld (RANDOM), hl
   56 D1:E2AD 18 17 -  -  			jr ForGetStep
   57 D1:E2AF -  -  -  -  ForEndPointIsNumber:
   58 D1:E2AF FD CB AF D6 			set end_point_is_number, (iy+fFunction2)
   59 D1:E2B3 2A 49 EA D1 			ld hl, (programPtr)
   60 D1:E2B7 2B -  -  -  			dec hl
   61 D1:E2B8 2B -  -  -  			dec hl
   62 D1:E2B9 2B -  -  -  			dec hl
   63 D1:E2BA ED 17 -  -  			ld de, (hl)
   64 D1:E2BC 2B -  -  -  			dec hl
   65 D1:E2BD 22 49 EA D1 			ld (programPtr), hl
   66 D1:E2C1 ED 53 A5 E3 
              D1 -  -  -  			ld (ForFixedEndPoint), de
   67 D1:E2C6 -  -  -  -  ForGetStep:
   68 D1:E2C6 FD CB BE 46 			bit triggered_a_comma, (iy+fExpression3)
   69 D1:E2CA FD CB BE 86 			res triggered_a_comma, (iy+fExpression3)
   70 D1:E2CE 20 0B -  -  			jr nz, +_
   71 D1:E2D0 -  -  -  -  			; loop step
   72 D1:E2D0 FD CB AF CE 			set for_step_is_number, (iy+fFunction2)
   73 D1:E2D4 21 01 00 00 			ld hl, 1
   74 D1:E2D8 E5 -  -  -  			push hl
   75 D1:E2D9 18 76 -  -  				jr ForStart
   76 D1:E2DB CD 28 10 02 _:			call _IncFetch
   77 D1:E2DF DA 3A AF D1 			jp c, ErrorSyntax
   78 D1:E2E3 FE B0 -  -  			cp tChs
   79 D1:E2E5 20 0C -  -  			jr nz, +_
   80 D1:E2E7 FD CB AF C6 			set negative_for_step, (iy+fFunction2)
   81 D1:E2EB CD 28 10 02 			call _IncFetch
   82 D1:E2EF DA 3A AF D1 			jp c, ErrorSyntax
   83 D1:E2F3 FE 41 -  -  _:			cp tA
   84 D1:E2F5 38 34 -  -  			jr c, ForGetStepNumber
   85 D1:E2F7 FE 5C -  -  			cp ttheta+1
   86 D1:E2F9 D2 2B E3 D1 			jp nc, ForGetStepNumber
   87 D1:E2FD -  -  -  -  ForGetStepVariable:
   88 D1:E2FD FD CB AF 8E 			res for_step_is_number, (iy+fFunction2)
   89 D1:E301 CD 2C 10 02 			call _CurFetch
   90 D1:E305 D6 41 -  -  			sub tA
   91 D1:E307 4F -  -  -  			ld c, a
   92 D1:E308 CD 65 AC D1 			call InsertHIXC										; ld hl, (ix+*)
   93 D1:E30C CD C0 0F 02 			call _NxtFetch
   94 D1:E310 DA 3A AF D1 			jp c, ErrorSyntax
   95 D1:E314 FE 3F -  -  			cp tEnter
   96 D1:E316 C2 3A AF D1 			jp nz, ErrorSyntax
   97 D1:E31A 3E 22 -  -  			ld a, 022h
   98 D1:E31C CD 0E AD D1 			call InsertA										; ld (*), hl
   99 D1:E320 2A 49 EA D1 			ld hl, (programPtr)
  100 D1:E324 E5 -  -  -  			push hl
  101 D1:E325 CD 50 AC D1 				call InsertHL									; ld (RANDOM), hl
  102 D1:E329 18 26 -  -  				jr ForStart
  103 D1:E32B -  -  -  -  ForGetStepNumber:
  104 D1:E32B FD CB AF CE 			set for_step_is_number, (iy+fFunction2)
  105 D1:E32F CD C6 B2 D1 			call ParseExpression
  106 D1:E333 FD CB BE 46 			bit triggered_a_comma, (iy+fExpression3)
  107 D1:E337 20 BA -  -  			jr nz, -_
  108 D1:E339 FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  109 D1:E33D CA 3A AF D1 			jp z, ErrorSyntax
  110 D1:E341 2A 49 EA D1 			ld hl, (programPtr)
  111 D1:E345 2B -  -  -  			dec hl
  112 D1:E346 2B -  -  -  			dec hl
  113 D1:E347 2B -  -  -  			dec hl
  114 D1:E348 2B -  -  -  			dec hl
  115 D1:E349 22 49 EA D1 			ld (programPtr), hl
  116 D1:E34D 23 -  -  -  			inc hl
  117 D1:E34E ED 27 -  -  			ld hl, (hl)
  118 D1:E350 E5 -  -  -  			push hl
  119 D1:E351 -  -  -  -  ForStart:
  120 D1:E351 E1 -  -  -  			pop hl
  121 D1:E352 D1 -  -  -  		pop de
  122 D1:E353 E5 -  -  -  		push hl
  123 D1:E354 2A 49 EA D1 			ld hl, (programPtr)
  124 D1:E358 19 -  -  -  			add hl, de
  125 D1:E359 E5 -  -  -  			push hl
  126 D1:E35A D5 -  -  -  				push de
  127 D1:E35B C1 -  -  -  				pop bc
  128 D1:E35C ED 5B 49 EA 
              D1 -  -  -  				ld de, (programPtr)
  129 D1:E361 21 C6 52 D0 				ld hl, tempArg1
  130 D1:E365 ED B0 -  -  				ldir
  131 D1:E367 ED 53 49 EA 
              D1 -  -  -  				ld (programPtr), de
  132 D1:E36C FD CB AF 56 				bit end_point_is_number, (iy+fFunction2)
  133 D1:E370 20 30 -  -  				jr nz, ForInsertEndPointNumber
  134 D1:E372 -  -  -  -  ForInsertEndPointExpression:
  135 D1:E372 3E B7 -  -  				ld a, 0B7h
  136 D1:E374 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  137 D1:E378 20 08 -  -  				jr nz, +_
  138 D1:E37A FD CB AF 56 				bit end_point_is_number, (iy+fFunction2)
  139 D1:E37E 20 02 -  -  				jr nz, +_
  140 D1:E380 3E 37 -  -  				ld a, 037h
  141 D1:E382 32 B4 E3 D1 _:				ld (ForSetCarryFlag), a
  142 D1:E386 3E 11 -  -  				ld a, 011h
  143 D1:E388 CD 0E AD D1 				call InsertA										; ld de, *
  144 D1:E38C 2A 49 EA D1 				ld hl, (programPtr)
  145 D1:E390 11 81 7C FC 				ld de, UserMem-program
  146 D1:E394 19 -  -  -  				add hl, de
  147 D1:E395 EB -  -  -  				ex de, hl
  148 D1:E396 -  -  -  -  ForEndPointExpression = $+1
  149 D1:E396 21 00 00 00 				ld hl, 0
  150 D1:E39A ED 1F -  -  				ld (hl), de
  151 D1:E39C CD 50 AC D1 				call InsertHL										; ld de, RANDOM
  152 D1:E3A0 18 11 -  -  				jr ForSkip
  153 D1:E3A2 -  -  -  -  ForInsertEndPointNumber:
  154 D1:E3A2 3E 11 -  -  				ld a, 011h
  155 D1:E3A4 -  -  -  -  ForFixedEndPoint = $+1
  156 D1:E3A4 21 00 00 00 				ld hl, 0
  157 D1:E3A8 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  158 D1:E3AC 20 01 -  -  				jr nz, +_
  159 D1:E3AE 23 -  -  -  				inc hl
  160 D1:E3AF CD 4C AC D1 _:				call InsertAHL										; ld de, *
  161 D1:E3B3 -  -  -  -  ForSkip:
  162 D1:E3B3 -  -  -  -  ForSetCarryFlag = $+1
  163 D1:E3B3 21 B7 ED 52 				ld hl, 052EDB7h
  164 D1:E3B7 CD 50 AC D1 				call InsertHL										; or a \ sbc hl, de
  165 D1:E3BB 3E D2 -  -  				ld a, 0D2h
  166 D1:E3BD FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  167 D1:E3C1 28 02 -  -  				jr z, +_
  168 D1:E3C3 C6 08 -  -  				add a, 8
  169 D1:E3C5 CD 0E AD D1 _:				call InsertA										; jp [n]c, *
  170 D1:E3C9 2A 49 EA D1 				ld hl, (programPtr)
  171 D1:E3CD E5 -  -  -  				push hl
  172 D1:E3CE CD 50 AC D1 					call InsertHL									; jp [n]c, RANDOM
  173 D1:E3D2 FD 46 AF -  					ld b, (iy+fFunction2)
  174 D1:E3D5 C5 -  -  -  					push bc
  175 D1:E3D6 CD 99 AA D1 						call ParseProgramUntilEnd
  176 D1:E3DA C1 -  -  -  					pop bc
  177 D1:E3DB FD 70 AF -  					ld (iy+fFunction2), b
  178 D1:E3DE FE D0 -  -  					cp tElse
  179 D1:E3E0 CA 3A AF D1 					jp z, ErrorSyntax
  180 D1:E3E4 DD 21 00 00 
              00 -  -  -  					ld ix, 0
  181 D1:E3E9 DD 39 -  -  					add ix, sp
  182 D1:E3EB DD 7E 09 -  					ld a, (ix+9)
  183 D1:E3EE 21 DD 27 00 					ld hl, 00027DDh
  184 D1:E3F2 CD 70 1D 02 					call _SetHLUToA
  185 D1:E3F6 CD 50 AC D1 					call InsertHL									; ld hl, (ix+*)
  186 D1:E3FA C1 -  -  -  				pop bc
  187 D1:E3FB D1 -  -  -  			pop de
  188 D1:E3FC E1 -  -  -  		pop hl
  189 D1:E3FD D5 -  -  -  		push de
  190 D1:E3FE C5 -  -  -  			push bc
  191 D1:E3FF FD CB AF 4E 				bit for_step_is_number, (iy+fFunction2)
  192 D1:E403 28 19 -  -  				jr z, InsertVariableChange
  193 D1:E405 -  -  -  -  InsertNumberChange:
  194 D1:E405 EB -  -  -  				ex de, hl
  195 D1:E406 3E 01 -  -  				ld a, 1
  196 D1:E408 32 6A EA D1 				ld (ExprOutput), a
  197 D1:E40C FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  198 D1:E410 28 06 -  -  				jr z, $+8
  199 D1:E412 CD 24 D4 D1 				call SubChainAnsNumber
  200 D1:E416 18 04 -  -  				jr $+6
  201 D1:E418 CD EC D5 D1 				call AddChainAnsNumber
  202 D1:E41C 18 29 -  -  				jr InsertStop
  203 D1:E41E -  -  -  -  InsertVariableChange:
  204 D1:E41E EB -  -  -  				ex de, hl
  205 D1:E41F 3E 11 -  -  				ld a, 011h
  206 D1:E421 CD 0E AD D1 				call InsertA										; ld de, *
  207 D1:E425 2A 49 EA D1 				ld hl, (programPtr)
  208 D1:E429 01 81 7C FC 				ld bc, UserMem-program
  209 D1:E42D 09 -  -  -  				add hl, bc
  210 D1:E42E EB -  -  -  				ex de, hl
  211 D1:E42F ED 1F -  -  				ld (hl), de
  212 D1:E431 CD 50 AC D1 				call InsertHL										; ld de, RANDOM
  213 D1:E435 3E 19 -  -  				ld a, 019h
  214 D1:E437 21 B7 ED 52 				ld hl, 052EDB7h
  215 D1:E43B FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  216 D1:E43F C4 50 AC D1 				call nz, InsertHL									; or a \ sbc hl, de
  217 D1:E443 CC 0E AD D1 				call z, InsertA										; add hl, de
  218 D1:E447 -  -  -  -  InsertStop:
  219 D1:E447 C1 -  -  -  			pop bc
  220 D1:E448 D1 -  -  -  		pop de
  221 D1:E449 E1 -  -  -  	pop hl
  222 D1:E44A 7D -  -  -  	ld a, l
  223 D1:E44B 21 DD 2F 00 	ld hl, 0002FDDh
  224 D1:E44F CD 70 1D 02 	call _SetHLUToA
  225 D1:E453 CD 50 AC D1 	call InsertHL													; ld (ix+*), hl
  226 D1:E457 B7 -  -  -  	or a
  227 D1:E458 ED 52 -  -  	sbc hl, de
  228 D1:E45A 7C -  -  -  	ld a, h
  229 D1:E45B B7 -  -  -  	or a
  230 D1:E45C 20 07 -  -  	jr nz, ForBigLoop
  231 D1:E45E 7D -  -  -  	ld a, l
  232 D1:E45F 2F -  -  -  	cpl
  233 D1:E460 3D -  -  -  	dec a
  234 D1:E461 FE 80 -  -  	cp %10000000
  235 D1:E463 30 15 -  -  	jr nc, ForSmallLoop
  236 D1:E465 -  -  -  -  ForBigLoop:
  237 D1:E465 3E C3 -  -  	ld a, 0C3h
  238 D1:E467 FD CB AF 46 	bit negative_for_step, (iy+fFunction2)
  239 D1:E46B 28 02 -  -  	jr z, $+4
  240 D1:E46D 3E D2 -  -  	ld a, 0D2h
  241 D1:E46F 21 81 7C FC 	ld hl, UserMem-program
  242 D1:E473 19 -  -  -  	add hl, de
  243 D1:E474 CD 4C AC D1 	call InsertAHL													; jp [nc], ******
  244 D1:E478 18 1A -  -  	jr ForLoopInsert
  245 D1:E47A -  -  -  -  ForSmallLoop:
  246 D1:E47A DD 6F -  -  	ld ixl, a
  247 D1:E47C 3E 18 -  -  	ld a, 018h
  248 D1:E47E FD CB AF 46 	bit negative_for_step, (iy+fFunction2)
  249 D1:E482 28 02 -  -  	jr z, $+4
  250 D1:E484 3E 30 -  -  	ld a, 030h
  251 D1:E486 CD 0E AD D1 	call InsertA													; jr [nc], **
  252 D1:E48A DD 7D -  -  	ld a, ixl
  253 D1:E48C CD 0E AD D1 	call InsertA													; jr [nc], **
  254 D1:E490 2A 49 EA D1 	ld hl, (programPtr)
  255 D1:E494 -  -  -  -  ForLoopInsert:
  256 D1:E494 11 81 7C FC 	ld de, UserMem-program
  257 D1:E498 19 -  -  -  	add hl, de
  258 D1:E499 EB -  -  -  	ex de, hl
  259 D1:E49A C5 -  -  -  	push bc
  260 D1:E49B E1 -  -  -  	pop hl
  261 D1:E49C ED 1F -  -  	ld (hl), de
  262 D1:E49E C9 -  -  -  	ret
  263 D1:E49F -  -  -  -  	
  264 D1:E49F -  -  -  -  functionForSmall:
  265 D1:E49F CD C6 B2 D1 	call ParseExpression
  266 D1:E4A3 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  267 D1:E4A7 28 10 -  -  	jr z, +_
  268 D1:E4A9 2A 49 EA D1 	ld hl, (programPtr)
  269 D1:E4AD 2B -  -  -  	dec hl
  270 D1:E4AE 2B -  -  -  	dec hl
  271 D1:E4AF 22 49 EA D1 	ld (programPtr), hl
  272 D1:E4B3 2B -  -  -  	dec hl
  273 D1:E4B4 2B -  -  -  	dec hl
  274 D1:E4B5 36 06 -  -  	ld (hl), 06h													; ld b, *
  275 D1:E4B7 18 06 -  -  	jr ++_
  276 D1:E4B9 3E 45 -  -  _:	ld a, 045h
  277 D1:E4BB CD 0E AD D1 	call InsertA													; ld b, l
  278 D1:E4BF 2A 49 EA D1 _:	ld hl, (programPtr)
  279 D1:E4C3 E5 -  -  -  	push hl
  280 D1:E4C4 3E C5 -  -  		ld a, 0C5h
  281 D1:E4C6 CD 0E AD D1 		call InsertA												; push bc
  282 D1:E4CA CD 99 AA D1 		call ParseProgramUntilEnd
  283 D1:E4CE 3E C1 -  -  		ld a, 0C1h
  284 D1:E4D0 CD 0E AD D1 		call InsertA												; pop bc
  285 D1:E4D4 D1 -  -  -  	pop de
  286 D1:E4D5 2A 49 EA D1 	ld hl, (programPtr)
  287 D1:E4D9 B7 -  -  -  	or a
  288 D1:E4DA ED 52 -  -  	sbc hl, de
  289 D1:E4DC 7C -  -  -  	ld a, h
  290 D1:E4DD B7 -  -  -  	or a
  291 D1:E4DE C2 8C AF D1 _:	jp nz, ErrorTooLargeLoop
  292 D1:E4E2 7D -  -  -  	ld a, l
  293 D1:E4E3 2F -  -  -  	cpl
  294 D1:E4E4 3D -  -  -  	dec a
  295 D1:E4E5 FE 80 -  -  	cp %10000000
  296 D1:E4E7 DA DE E4 D1 	jp c, -_
  297 D1:E4EB 47 -  -  -  	ld b, a
  298 D1:E4EC 3E 10 -  -  	ld a, 010h
  299 D1:E4EE CD 0E AD D1 	call InsertA													; djnz *
  300 D1:E4F2 78 -  -  -  	ld a, b
  301 D1:E4F3 C3 0E AD D1 	jp InsertA														; djnz *
Listing for file "ice.asm"
  449 D1:E4F7 -  -  -  -  #include "operators functions/function_C.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_C.asm"
    1 D1:E4F7 -  -  -  -  CFunction0Args:
    2 D1:E4F7 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
    3 D1:E4FB C2 3A AF D1 	jp nz, ErrorSyntax
    4 D1:E4FF 06 00 -  -  	ld b, 0
    5 D1:E501 -  -  -  -  CInsertCallPops:
    6 D1:E501 FD CB B0 CE 	set modified_iy, (iy+fAlways1)
    7 D1:E505 21 77 EA D1 	ld hl, usedCroutines
    8 D1:E509 -  -  -  -  CFunctionArgsSMC = $+1
    9 D1:E509 11 00 00 00 	ld de, 0
   10 D1:E50D 7B -  -  -  	ld a, e
   11 D1:E50E B7 -  -  -  	or a
   12 D1:E50F 20 0B -  -  	jr nz, +_
   13 D1:E511 E5 -  -  -  	push hl
   14 D1:E512 21 2E 27 E5 		ld hl, 0E5272Eh
   15 D1:E516 CD 50 AC D1 		call InsertHL														; ld l, lcdBpp8 \ push hl
   16 D1:E51A 04 -  -  -  		inc b
   17 D1:E51B E1 -  -  -  	pop hl
   18 D1:E51C 19 -  -  -  _:	add hl, de
   19 D1:E51D 5E -  -  -  	ld e, (hl)
   20 D1:E51E 16 04 -  -  	ld d, 4
   21 D1:E520 ED 5C -  -  	mlt de
   22 D1:E522 21 F6 A8 D1 	ld hl, CData2-CData+UserMem-4
   23 D1:E526 19 -  -  -  	add hl, de
   24 D1:E527 CD 61 AC D1 	call InsertCallHL														; call *
   25 D1:E52B 78 -  -  -  	ld a, b
   26 D1:E52C B7 -  -  -  	or a
   27 D1:E52D C8 -  -  -  	ret z
   28 D1:E52E 3E E1 -  -  	ld a, 0E1h
   29 D1:E530 CD 0E AD D1 _:	call InsertA
   30 D1:E534 10 FA -  -  	djnz -_
   31 D1:E536 C9 -  -  -  	ret																		; pop hl
   32 D1:E537 -  -  -  -  	
   33 D1:E537 -  -  -  -  CFunction1Arg:
   34 D1:E537 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   35 D1:E53B CA 3A AF D1 	jp z, ErrorSyntax
   36 D1:E53F 2A 49 EA D1 	ld hl, (programPtr)
   37 D1:E543 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
   38 D1:E547 CD C2 AC D1 	call CGetArgumentLast
   39 D1:E54B 06 01 -  -  	ld b, 1
   40 D1:E54D 18 B2 -  -  	jr CInsertCallPops
   41 D1:E54F -  -  -  -  		
   42 D1:E54F -  -  -  -  CFunction2Args:
   43 D1:E54F FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   44 D1:E553 CA 3A AF D1 	jp z, ErrorSyntax
   45 D1:E557 2A 49 EA D1 	ld hl, (programPtr)
   46 D1:E55B 22 6D E5 D1 	ld (CFunction2ArgsSMC2), hl
   47 D1:E55F 21 C6 52 D0 	ld hl, tempArg1
   48 D1:E563 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
   49 D1:E567 CD C6 AC D1 	call CGetArgument
   50 D1:E56B E5 -  -  -  	push hl
   51 D1:E56C -  -  -  -  CFunction2ArgsSMC2 = $+1
   52 D1:E56C 21 00 00 00 		ld hl, 0
   53 D1:E570 FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
   54 D1:E574 CD C2 AC D1 		call CGetArgumentLast
   55 D1:E578 ED 5B 49 EA 
              D1 -  -  -  		ld de, (programPtr)
   56 D1:E57D E1 -  -  -  	pop hl
   57 D1:E57E 01 C6 52 D0 	ld bc, tempArg1
   58 D1:E582 CD 70 E8 D1 	call CCheckIfPrevArgIsSame
   59 D1:E586 CD 1B AD D1 	call CAddArgument
   60 D1:E58A ED 53 49 EA 
              D1 -  -  -  	ld (programPtr), de
   61 D1:E58F 06 02 -  -  	ld b, 2
   62 D1:E591 C3 01 E5 D1 	jp CInsertCallPops
   63 D1:E595 -  -  -  -  	
   64 D1:E595 -  -  -  -  CFunction3Args:
   65 D1:E595 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   66 D1:E599 CA 3A AF D1 	jp z, ErrorSyntax
   67 D1:E59D 2A 49 EA D1 	ld hl, (programPtr)
   68 D1:E5A1 22 CA E5 D1 	ld (CFunction3ArgsSMC2), hl
   69 D1:E5A5 21 C6 52 D0 	ld hl, tempArg1
   70 D1:E5A9 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
   71 D1:E5AD CD C6 AC D1 	call CGetArgument
   72 D1:E5B1 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   73 D1:E5B5 F5 -  -  -  	push af
   74 D1:E5B6 FD CB C0 7E 		bit output_is_string, (iy+fExpression1)
   75 D1:E5BA F5 -  -  -  		push af
   76 D1:E5BB E5 -  -  -  			push hl
   77 D1:E5BC 21 AE 56 D0 				ld hl, tempArg2
   78 D1:E5C0 FD CB B0 5E 				bit arg2_is_small, (iy+fFunction1)
   79 D1:E5C4 CD C6 AC D1 				call CGetArgument
   80 D1:E5C8 E5 -  -  -  				push hl
   81 D1:E5C9 -  -  -  -  CFunction3ArgsSMC2 = $+1
   82 D1:E5C9 21 00 00 00 					ld hl, 0
   83 D1:E5CD FD CB B0 56 					bit arg3_is_small, (iy+fFunction1)
   84 D1:E5D1 CD C2 AC D1 					call CGetArgumentLast
   85 D1:E5D5 ED 5B 49 EA 
              D1 -  -  -  					ld de, (programPtr)
   86 D1:E5DA E1 -  -  -  				pop hl
   87 D1:E5DB 01 AE 56 D0 				ld bc, tempArg2
   88 D1:E5DF CD 70 E8 D1 				call CCheckIfPrevArgIsSame
   89 D1:E5E3 CD 1B AD D1 				call CAddArgument
   90 D1:E5E7 E1 -  -  -  			pop hl
   91 D1:E5E8 01 C6 52 D0 			ld bc, tempArg1
   92 D1:E5EC CD 70 E8 D1 			call CCheckIfPrevArgIsSame
   93 D1:E5F0 B7 -  -  -  			or a
   94 D1:E5F1 ED 42 -  -  			sbc hl, bc
   95 D1:E5F3 E5 -  -  -  			push hl
   96 D1:E5F4 C1 -  -  -  			pop bc
   97 D1:E5F5 21 C6 52 D0 			ld hl, tempArg1
   98 D1:E5F9 ED A0 -  -  			ldi
   99 D1:E5FB F1 -  -  -  		pop af
  100 D1:E5FC 28 0B -  -  		jr z, +_
  101 D1:E5FE E5 -  -  -  		push hl
  102 D1:E5FF 2A 55 EA D1 			ld hl, (programDataOffsetPtr)
  103 D1:E603 2B -  -  -  			dec hl
  104 D1:E604 2B -  -  -  			dec hl
  105 D1:E605 2B -  -  -  			dec hl
  106 D1:E606 ED 1F -  -  			ld (hl), de
  107 D1:E608 E1 -  -  -  		pop hl
  108 D1:E609 ED B0 -  -  _:		ldir
  109 D1:E60B ED 53 49 EA 
              D1 -  -  -  		ld (programPtr), de
  110 D1:E610 06 03 -  -  		ld b, 3
  111 D1:E612 CD 01 E5 D1 		call CInsertCallPops
  112 D1:E616 3A 0A E5 D1 		ld a, (CFunctionArgsSMC)
  113 D1:E61A FE 3B -  -  		cp 59
  114 D1:E61C 28 0C -  -  		jr z, CInsertSprite
  115 D1:E61E FE 3C -  -  		cp 60
  116 D1:E620 28 08 -  -  		jr z, CInsertSprite
  117 D1:E622 F1 -  -  -  	pop af
  118 D1:E623 C9 -  -  -  	ret
  119 D1:E624 -  -  -  -  	
  120 D1:E624 -  -  -  -  CInsertSpriteScaled:
  121 D1:E624 01 F3 FF FF 		ld bc, -13
  122 D1:E628 18 04 -  -  		jr +_
  123 D1:E62A -  -  -  -  CInsertSprite:
  124 D1:E62A 01 F5 FF FF 		ld bc, -11
  125 D1:E62E F1 -  -  -  _:	pop af
  126 D1:E62F 2A 49 EA D1 	ld hl, (programPtr)
  127 D1:E633 28 1B -  -  	jr z, +_
  128 D1:E635 09 -  -  -  	add hl, bc
  129 D1:E636 E5 -  -  -  	push hl
  130 D1:E637 ED 27 -  -  		ld hl, (hl)
  131 D1:E639 E5 -  -  -  		push hl
  132 D1:E63A D1 -  -  -  		pop de
  133 D1:E63B 29 -  -  -  		add hl, hl
  134 D1:E63C 19 -  -  -  		add hl, de
  135 D1:E63D ED 5B 33 EA 
              D0 -  -  -  		ld de, (PrevProgramPtr)
  136 D1:E642 19 -  -  -  		add hl, de
  137 D1:E643 11 81 7C FC 		ld de, UserMem - program
  138 D1:E647 19 -  -  -  		add hl, de
  139 D1:E648 EB -  -  -  		ex de, hl
  140 D1:E649 E1 -  -  -  	pop hl
  141 D1:E64A ED 1F -  -  	ld (hl), de
  142 D1:E64C 2B -  -  -  	dec hl
  143 D1:E64D 36 2A -  -  	ld (hl), 02Ah															; ld hl, (XXXXXX)
  144 D1:E64F C9 -  -  -  	ret
  145 D1:E650 03 -  -  -  _:	inc bc
  146 D1:E651 03 -  -  -  	inc bc
  147 D1:E652 03 -  -  -  	inc bc
  148 D1:E653 09 -  -  -  	add hl, bc
  149 D1:E654 22 49 EA D1 	ld (programPtr), hl
  150 D1:E658 23 -  -  -  	inc hl
  151 D1:E659 23 -  -  -  	inc hl
  152 D1:E65A ED 27 -  -  	ld hl, (hl)
  153 D1:E65C E5 -  -  -  	push hl
  154 D1:E65D 3E E5 -  -  		ld a, 0E5h
  155 D1:E65F CD 0E AD D1 		call InsertA														; push hl
  156 D1:E663 3E D1 -  -  		ld a, 0D1h
  157 D1:E665 21 29 19 11 		ld hl, 0111929h
  158 D1:E669 CD 4C AC D1 		call InsertAHL														; pop de \ add hl, hl \ add hl, de \ ld de, ******
  159 D1:E66D 2A 33 EA D0 		ld hl, (PrevProgramPtr)
  160 D1:E671 11 81 7C FC 		ld de, UserMem - program
  161 D1:E675 19 -  -  -  		add hl, de
  162 D1:E676 CD 50 AC D1 		call InsertHL														; ld de, XXXXXX
  163 D1:E67A 3E 19 -  -  		ld a, 019h
  164 D1:E67C 21 ED 27 E5 		ld hl, 0E527EDh
  165 D1:E680 CD 4C AC D1 		call InsertAHL														; add hl, de \ ld hl, (hl) \ push hl
  166 D1:E684 E1 -  -  -  	pop hl
  167 D1:E685 CD 61 AC D1 	call InsertCallHL														; call ******
  168 D1:E689 21 E1 E1 E1 	ld hl, 0E1E1E1h
  169 D1:E68D CD 50 AC D1 	call InsertHL															; pop hl \ pop hl \ pop hl
  170 D1:E691 3A 0A E5 D1 	ld a, (CFunctionArgsSMC)
  171 D1:E695 FE 3E -  -  	cp 62
  172 D1:E697 D8 -  -  -  	ret c
  173 D1:E698 3E E1 -  -  	ld a, 0E1h
  174 D1:E69A CD 0E AD D1 	call InsertA															; pop hl
  175 D1:E69E C3 0E AD D1 	jp InsertA																; pop hl
  176 D1:E6A2 -  -  -  -  	
  177 D1:E6A2 -  -  -  -  CFunction4Args:
  178 D1:E6A2 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
  179 D1:E6A6 CA 3A AF D1 	jp z, ErrorSyntax
  180 D1:E6AA 2A 49 EA D1 	ld hl, (programPtr)
  181 D1:E6AE 22 DA E6 D1 	ld (CFunction4ArgsSMC2), hl
  182 D1:E6B2 21 C6 52 D0 	ld hl, tempArg1
  183 D1:E6B6 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  184 D1:E6BA CD C6 AC D1 	call CGetArgument
  185 D1:E6BE E5 -  -  -  	push hl
  186 D1:E6BF 21 AE 56 D0 		ld hl, tempArg2
  187 D1:E6C3 FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
  188 D1:E6C7 CD C6 AC D1 		call CGetArgument
  189 D1:E6CB E5 -  -  -  		push hl
  190 D1:E6CC 21 96 5A D0 			ld hl, tempArg3
  191 D1:E6D0 FD CB B0 56 			bit arg3_is_small, (iy+fFunction1)
  192 D1:E6D4 CD C6 AC D1 			call CGetArgument
  193 D1:E6D8 E5 -  -  -  			push hl
  194 D1:E6D9 -  -  -  -  CFunction4ArgsSMC2 = $+1
  195 D1:E6D9 21 00 00 00 				ld hl, 0
  196 D1:E6DD FD CB B0 4E 				bit arg4_is_small, (iy+fFunction1)
  197 D1:E6E1 CD C2 AC D1 				call CGetArgumentLast
  198 D1:E6E5 ED 5B 49 EA 
              D1 -  -  -  				ld de, (programPtr)
  199 D1:E6EA E1 -  -  -  			pop hl
  200 D1:E6EB 01 96 5A D0 			ld bc, tempArg3
  201 D1:E6EF CD 70 E8 D1 			call CCheckIfPrevArgIsSame
  202 D1:E6F3 CD 1B AD D1 			call CAddArgument
  203 D1:E6F7 E1 -  -  -  		pop hl
  204 D1:E6F8 01 AE 56 D0 		ld bc, tempArg2
  205 D1:E6FC CD 70 E8 D1 		call CCheckIfPrevArgIsSame
  206 D1:E700 CD 1B AD D1 		call CAddArgument
  207 D1:E704 E1 -  -  -  	pop hl
  208 D1:E705 01 C6 52 D0 	ld bc, tempArg1
  209 D1:E709 CD 70 E8 D1 	call CCheckIfPrevArgIsSame
  210 D1:E70D CD 1B AD D1 	call CAddArgument
  211 D1:E711 ED 53 49 EA 
              D1 -  -  -  	ld (programPtr), de
  212 D1:E716 06 04 -  -  	ld b, 4
  213 D1:E718 C3 01 E5 D1 	jp CInsertCallPops
  214 D1:E71C -  -  -  -  	
  215 D1:E71C -  -  -  -  CFunction5Args:
  216 D1:E71C FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
  217 D1:E720 CA 3A AF D1 	jp z, ErrorSyntax
  218 D1:E724 2A 49 EA D1 	ld hl, (programPtr)
  219 D1:E728 22 66 E7 D1 	ld (CFunction5ArgsSMC2), hl
  220 D1:E72C 21 C6 52 D0 	ld hl, tempArg1
  221 D1:E730 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  222 D1:E734 CD C6 AC D1 	call CGetArgument
  223 D1:E738 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  224 D1:E73C F5 -  -  -  	push af
  225 D1:E73D E5 -  -  -  		push hl
  226 D1:E73E 21 AE 56 D0 			ld hl, tempArg2
  227 D1:E742 FD CB B0 5E 			bit arg2_is_small, (iy+fFunction1)
  228 D1:E746 CD C6 AC D1 			call CGetArgument
  229 D1:E74A E5 -  -  -  			push hl
  230 D1:E74B 21 96 5A D0 				ld hl, tempArg3
  231 D1:E74F FD CB B0 56 				bit arg3_is_small, (iy+fFunction1)
  232 D1:E753 CD C6 AC D1 				call CGetArgument
  233 D1:E757 E5 -  -  -  				push hl
  234 D1:E758 21 7E 5E D0 					ld hl, tempArg4
  235 D1:E75C FD CB B0 4E 					bit arg4_is_small, (iy+fFunction1)
  236 D1:E760 CD C6 AC D1 					call CGetArgument
  237 D1:E764 E5 -  -  -  					push hl
  238 D1:E765 -  -  -  -  CFunction5ArgsSMC2 = $+1
  239 D1:E765 21 00 00 00 						ld hl, 0
  240 D1:E769 FD CB B0 46 						bit arg5_is_small, (iy+fFunction1)
  241 D1:E76D CD C2 AC D1 						call CGetArgumentLast
  242 D1:E771 ED 5B 49 EA 
              D1 -  -  -  						ld de, (programPtr)
  243 D1:E776 E1 -  -  -  					pop hl
  244 D1:E777 01 7E 5E D0 					ld bc, tempArg4
  245 D1:E77B CD 70 E8 D1 					call CCheckIfPrevArgIsSame
  246 D1:E77F CD 1B AD D1 					call CAddArgument
  247 D1:E783 E1 -  -  -  				pop hl
  248 D1:E784 01 96 5A D0 				ld bc, tempArg3
  249 D1:E788 CD 70 E8 D1 				call CCheckIfPrevArgIsSame
  250 D1:E78C CD 1B AD D1 				call CAddArgument
  251 D1:E790 E1 -  -  -  			pop hl
  252 D1:E791 01 AE 56 D0 			ld bc, tempArg2
  253 D1:E795 CD 70 E8 D1 			call CCheckIfPrevArgIsSame
  254 D1:E799 CD 1B AD D1 			call CAddArgument
  255 D1:E79D E1 -  -  -  		pop hl
  256 D1:E79E 01 C6 52 D0 		ld bc, tempArg1
  257 D1:E7A2 CD 70 E8 D1 		call CCheckIfPrevArgIsSame
  258 D1:E7A6 CD 1B AD D1 		call CAddArgument
  259 D1:E7AA ED 53 49 EA 
              D1 -  -  -  		ld (programPtr), de
  260 D1:E7AF 06 05 -  -  		ld b, 5
  261 D1:E7B1 CD 01 E5 D1 		call CInsertCallPops
  262 D1:E7B5 3A 0A E5 D1 		ld a, (CFunctionArgsSMC)
  263 D1:E7B9 FE 3E -  -  		cp 62
  264 D1:E7BB CA 24 E6 D1 _:		jp z, CInsertSpriteScaled
  265 D1:E7BF FE 3F -  -  		cp 63
  266 D1:E7C1 28 F8 -  -  		jr z, -_
  267 D1:E7C3 F1 -  -  -  	pop af
  268 D1:E7C4 C9 -  -  -  	ret
  269 D1:E7C5 -  -  -  -  	
  270 D1:E7C5 -  -  -  -  CFunction6Args:
  271 D1:E7C5 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
  272 D1:E7C9 CA 3A AF D1 	jp z, ErrorSyntax
  273 D1:E7CD 2A 49 EA D1 	ld hl, (programPtr)
  274 D1:E7D1 22 17 E8 D1 	ld (CFunction6ArgsSMC2), hl
  275 D1:E7D5 21 C6 52 D0 	ld hl, tempArg1
  276 D1:E7D9 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  277 D1:E7DD CD C6 AC D1 	call CGetArgument
  278 D1:E7E1 E5 -  -  -  	push hl
  279 D1:E7E2 21 AE 56 D0 		ld hl, tempArg2
  280 D1:E7E6 FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
  281 D1:E7EA CD C6 AC D1 		call CGetArgument
  282 D1:E7EE E5 -  -  -  		push hl
  283 D1:E7EF 21 96 5A D0 			ld hl, tempArg3
  284 D1:E7F3 FD CB B0 56 			bit arg3_is_small, (iy+fFunction1)
  285 D1:E7F7 CD C6 AC D1 			call CGetArgument
  286 D1:E7FB E5 -  -  -  			push hl
  287 D1:E7FC 21 7E 5E D0 				ld hl, tempArg4
  288 D1:E800 FD CB B0 4E 				bit arg4_is_small, (iy+fFunction1)
  289 D1:E804 CD C6 AC D1 				call CGetArgument
  290 D1:E808 E5 -  -  -  				push hl
  291 D1:E809 21 66 62 D0 					ld hl, tempArg5
  292 D1:E80D FD CB B0 46 					bit arg5_is_small, (iy+fFunction1)
  293 D1:E811 CD C6 AC D1 					call CGetArgument
  294 D1:E815 E5 -  -  -  					push hl
  295 D1:E816 -  -  -  -  CFunction6ArgsSMC2 = $+1
  296 D1:E816 21 00 00 00 						ld hl, 0
  297 D1:E81A BF -  -  -  						cp a												; reset zero flag
  298 D1:E81B CD C2 AC D1 						call CGetArgumentLast
  299 D1:E81F ED 5B 49 EA 
              D1 -  -  -  						ld de, (programPtr)
  300 D1:E824 E1 -  -  -  					pop hl
  301 D1:E825 01 66 62 D0 					ld bc, tempArg5
  302 D1:E829 CD 70 E8 D1 					call CCheckIfPrevArgIsSame
  303 D1:E82D CD 1B AD D1 					call CAddArgument
  304 D1:E831 E1 -  -  -  				pop hl
  305 D1:E832 01 7E 5E D0 				ld bc, tempArg4
  306 D1:E836 CD 70 E8 D1 				call CCheckIfPrevArgIsSame
  307 D1:E83A CD 1B AD D1 				call CAddArgument
  308 D1:E83E E1 -  -  -  			pop hl
  309 D1:E83F 01 96 5A D0 			ld bc, tempArg3
  310 D1:E843 CD 70 E8 D1 			call CCheckIfPrevArgIsSame
  311 D1:E847 CD 1B AD D1 			call CAddArgument
  312 D1:E84B E1 -  -  -  		pop hl
  313 D1:E84C 01 AE 56 D0 		ld bc, tempArg2
  314 D1:E850 CD 70 E8 D1 		call CCheckIfPrevArgIsSame
  315 D1:E854 CD 1B AD D1 		call CAddArgument
  316 D1:E858 E1 -  -  -  	pop hl
  317 D1:E859 01 C6 52 D0 	ld bc, tempArg1
  318 D1:E85D CD 70 E8 D1 	call CCheckIfPrevArgIsSame
  319 D1:E861 CD 1B AD D1 	call CAddArgument
  320 D1:E865 ED 53 49 EA 
              D1 -  -  -  	ld (programPtr), de
  321 D1:E86A 06 06 -  -  	ld b, 6
  322 D1:E86C C3 01 E5 D1 	jp CInsertCallPops
  323 D1:E870 -  -  -  -  	
  324 D1:E870 -  -  -  -  CCheckIfPrevArgIsSame:
  325 D1:E870 E5 -  -  -  	push hl
  326 D1:E871 D5 -  -  -  		push de
  327 D1:E872 C5 -  -  -  			push bc
  328 D1:E873 B7 -  -  -  				or a
  329 D1:E874 ED 42 -  -  				sbc hl, bc
  330 D1:E876 EB -  -  -  				ex de, hl
  331 D1:E877 ED 52 -  -  				sbc hl, de
  332 D1:E879 D1 -  -  -  			pop de
  333 D1:E87A 1A -  -  -  _:			ld a, (de)
  334 D1:E87B BE -  -  -  			cp a, (hl)
  335 D1:E87C 23 -  -  -  			inc hl
  336 D1:E87D 13 -  -  -  			inc de
  337 D1:E87E 28 FA -  -  			jr z, -_
  338 D1:E880 D1 -  -  -  		pop de
  339 D1:E881 E1 -  -  -  	pop hl
  340 D1:E882 C0 -  -  -  	ret nz
  341 D1:E883 E5 -  -  -  	push hl
  342 D1:E884 C1 -  -  -  	pop bc
  343 D1:E885 0B -  -  -  	dec bc
  344 D1:E886 C9 -  -  -  	ret
Listing for file "ice.asm"
  450 D1:E887 -  -  -  -  #include "clibs/graphics.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\clibs\graphics.asm"
    1 D1:E887 -  -  -  -  ; Byte: . . . . . . . .
    2 D1:E887 -  -  -  -  ;       <---> <------->
    3 D1:E887 -  -  -  -  ;       Args  1 = that argument is small (0-255)
    4 D1:E887 -  -  -  -  ;       1 1 1:
    5 D1:E887 -  -  -  -  ;    	bit   1 reset = not implemented
    6 D1:E887 -  -  -  -  ;		bit   0 set   = special function (none yet)
    7 D1:E887 -  -  -  -  
    8 D1:E887 -  -  -  -  CFunctionsArguments:
    9 D1:E887 00 -  -  -  Begin:									.db 000000000b
   10 D1:E888 00 -  -  -  End_:									.db 000000000b
   11 D1:E889 30 -  -  -  SetColor:								.db 000110000b
   12 D1:E88A 00 -  -  -  SetDefaultPalette:						.db 000000000b
   13 D1:E88B E0 -  -  -  SetPalette:								.db 011100000b
   14 D1:E88C 30 -  -  -  FillScreen:								.db 000110000b
   15 D1:E88D 48 -  -  -  SetPixel:								.db 001001000b
   16 D1:E88E E0 -  -  -  GetPixel:								.db 011100000b
   17 D1:E88F E0 -  -  -  GetDraw:								.db 011100000b
   18 D1:E890 30 -  -  -  SetDraw:								.db 000110000b
   19 D1:E891 00 -  -  -  SwapDraw:								.db 000000000b
   20 D1:E892 30 -  -  -  Blit:									.db 000110000b
   21 D1:E893 7C -  -  -  BlitLines:								.db 001111100b
   22 D1:E894 B5 -  -  -  BlitArea:								.db 010110101b
   23 D1:E895 30 -  -  -  PrintChar:								.db 000110000b
   24 D1:E896 48 -  -  -  PrintInt:								.db 001001000b
   25 D1:E897 48 -  -  -  PrintUInt:								.db 001001000b
   26 D1:E898 20 -  -  -  PrintString_:							.db 000100000b
   27 D1:E899 60 -  -  -  PrintStringXY:							.db 001100000b
   28 D1:E89A 48 -  -  -  SetTextXY:								.db 001001000b
   29 D1:E89B 30 -  -  -  SetTextBGColor:							.db 000110000b
   30 D1:E89C 30 -  -  -  SetTextFGColor:							.db 000110000b
   31 D1:E89D 30 -  -  -  SetTextTransparentColor:				.db 000110000b
   32 D1:E89E E0 -  -  -  SetCustomFontData:						.db 011100000b
   33 D1:E89F E0 -  -  -  SetCustomFontSpacing:					.db 011100000b
   34 D1:E8A0 30 -  -  -  SetMonospaceFont:						.db 000110000b
   35 D1:E8A1 E0 -  -  -  GetStringWidth:							.db 011100000b
   36 D1:E8A2 E0 -  -  -  GetCharWidth:							.db 011100000b
   37 D1:E8A3 E0 -  -  -  GetTextX:								.db 011100000b
   38 D1:E8A4 E0 -  -  -  GetTextY:								.db 011100000b
   39 D1:E8A5 80 -  -  -  Line:									.db 010000000b
   40 D1:E8A6 60 -  -  -  HorizLine:								.db 001100000b
   41 D1:E8A7 60 -  -  -  VertLine:								.db 001100000b
   42 D1:E8A8 60 -  -  -  Circle:									.db 001100000b
   43 D1:E8A9 60 -  -  -  FillCircle:								.db 001100000b
   44 D1:E8AA 80 -  -  -  Rectangle:								.db 010000000b
   45 D1:E8AB 80 -  -  -  FillRectangle:							.db 010000000b
   46 D1:E8AC 80 -  -  -  LineNoClip:								.db 010000000b
   47 D1:E8AD 60 -  -  -  HorizLineNoClip:						.db 001100000b
   48 D1:E8AE 60 -  -  -  VertLineNoClip:							.db 001100000b
   49 D1:E8AF 60 -  -  -  FillCircleNoClip:						.db 001100000b
   50 D1:E8B0 80 -  -  -  RectangleNoClip:						.db 010000000b
   51 D1:E8B1 80 -  -  -  FillRectangleNoClip:					.db 010000000b
   52 D1:E8B2 82 -  -  -  SetClipRegion:							.db 010000010b
   53 D1:E8B3 E0 -  -  -  GetClipRegion:							.db 011100000b
   54 D1:E8B4 20 -  -  -  ShiftDown:								.db 000100000b
   55 D1:E8B5 20 -  -  -  ShiftUp:								.db 000100000b
   56 D1:E8B6 20 -  -  -  ShiftLeft:								.db 000100000b
   57 D1:E8B7 20 -  -  -  ShiftRight:								.db 000100000b
   58 D1:E8B8 E0 -  -  -  Tilemap:								.db 011100000b
   59 D1:E8B9 E0 -  -  -  TilemapNoClip:							.db 011100000b
   60 D1:E8BA E0 -  -  -  TransparentTilemap:						.db 011100000b
   61 D1:E8BB E0 -  -  -  TransparentTilemapNoClip:				.db 011100000b
   62 D1:E8BC E0 -  -  -  TilePtr:								.db 011100000b
   63 D1:E8BD E0 -  -  -  TilePtrMapped:							.db 011100000b
   64 D1:E8BE E0 -  -  -  LZDecompress:							.db 011100000b
   65 D1:E8BF E0 -  -  -  AllocSprite:							.db 011100000b
   66 D1:E8C0 E0 -  -  -  Sprite:									.db 011100000b
   67 D1:E8C1 E0 -  -  -  TransparentSprite:						.db 011100000b
   68 D1:E8C2 64 -  -  -  SpriteNoClip:							.db 001100100b
   69 D1:E8C3 64 -  -  -  TransparentSpriteNoClip:				.db 001100100b
   70 D1:E8C4 E0 -  -  -  GetSpriteNoClip:						.db 011100000b
   71 D1:E8C5 A7 -  -  -  ScaledSpriteNoClip:						.db 010100111b
   72 D1:E8C6 A7 -  -  -  ScaledTransparentSpriteNoClip:			.db 010100111b
   73 D1:E8C7 E0 -  -  -  FlipSpriteY:							.db 011100000b
   74 D1:E8C8 E0 -  -  -  FlipSpriteX:							.db 011100000b
   75 D1:E8C9 E0 -  -  -  RotateSpriteC:							.db 011100000b
   76 D1:E8CA E0 -  -  -  RotateSpriteCC:							.db 011100000b
   77 D1:E8CB E0 -  -  -  RotateSpriteHalf:						.db 011100000b
   78 D1:E8CC E0 -  -  -  Polygon:								.db 011100000b
   79 D1:E8CD E0 -  -  -  PolygonNoClip:							.db 011100000b
   80 D1:E8CE C0 -  -  -  FillTriangle:							.db 011000000b
   81 D1:E8CF C0 -  -  -  FillTriangleNoClip:						.db 011000000b
   82 D1:E8D0 E0 -  -  -  LZDecompressSprite:						.db 011100000b
   83 D1:E8D1 58 -  -  -  SetTextScale:							.db 001011000b
   84 D1:E8D2 30 -  -  -  SetTransparentColor:					.db 000110000b
   85 D1:E8D3 00 -  -  -  ZeroScreen:								.db 000000000b
   86 D1:E8D4 30 -  -  -  SetTextConfig:							.db 000110000b
   87 D1:E8D5 E0 -  -  -  GetSpriteChar:							.db 011100000b
Listing for file "ice.asm"
  451 D1:E8D6 -  -  -  -  #include "data.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\data.asm"
    1 D1:E8D6 -  -  -  -  operators_booleans:
    2 D1:E8D6 04 40 3D 3C 
              6A 6B 6C 6D 
              6E 6F 82 83 
              70 71 00 -  	.db tStore, tAnd, tXor, tOr, tEQ, tLT, tGT, tLE, tGE, tNE, tMul, tDiv, tAdd, tSub, 0			; 0 = temp +
    3 D1:E8E5 -  -  -  -  	;		7	6		6	6		4	5	5	5		5	4	3		2	1	0
    4 D1:E8E5 -  -  -  -  operators_special:
    5 D1:E8E5 00 01 02 03 
              04 05 05 05 
              05 04 06 06 
              06 07 -  -  	.db 0, 1, 2, 3, 4, 5, 5, 5, 5, 4, 6, 6, 6, 7
    6 D1:E8F3 -  -  -  -  	
    7 D1:E8F3 -  -  -  -  FunctionsWithReturnValue:
    8 D1:E8F3 AD AB 10 -  	.db tGetKey, trand, tLParen
    9 D1:E8F6 -  -  -  -  FunctionsWithReturnValueArguments:
   10 D1:E8F6 21 1A 19 B8 
              EF 0D BC -  	.db tMean, tMin, tMax, tNot, tExtTok, tSqr, tSqrt
   11 D1:E8FD -  -  -  -  FunctionsWithReturnValueEnd:
   12 D1:E8FD -  -  -  -  
   13 D1:E8FD -  -  -  -  FunctionsWithReturnValueStart:
   14 D1:E8FD CD D0 D1 B0 
              CF D1 1B CC 
              D1 A9 CB D1 
              A8 CD D1 AC 
              CD D1 A4 CD 
              D1 -  -  -  	.dl functionRoot, functionSqrt, functionCE, functionNot, functionMax, functionMin, functionMean
   15 D1:E912 -  -  -  -  
   16 D1:E912 -  -  -  -  FunctionsSingle:
   17 D1:E912 E0 DC E1 D8 
              CE D1 D2 DE 
              D3 D5 62 D6 
              D7 2C B3 5F 	.db tOutput, tInput, tClLCD, tPause, tIf, tWhile, tRepeat, tDisp, tFor, tReturn, tVarOut, tLbl, tGoto, tii, tDet, tProg
   18 D1:E922 -  -  -  -  FunctionsSingleEnd:
   19 D1:E922 -  -  -  -  
   20 D1:E922 -  -  -  -  FunctionsSingleStart:
   21 D1:E922 84 C5 D1 19 
              D0 D1 C6 C6 
              D1 E5 C6 D1 
              AB C6 D1 76 
              D0 D1 0C C7 
              D1 1A E2 D1 	.dl functionPrgm, functionC, functionSkipLine, functionGoto, functionLbl, functionCustom, functionReturn, functionFor
   22 D1:E93A 58 C6 D1 3C 
              C7 D1 37 C9 
              D1 43 C8 D1 
              1A CA D1 FE 
              C9 D1 E0 CA 
              D1 CF C5 D1 	.dl functionDisp, functionRepeat, functionWhile, functionIf, functionPause, functionClrHome, functionInput, functionOutput
   23 D1:E952 -  -  -  -  	
   24 D1:E952 -  -  -  -  operator_start:
   25 D1:E952 13 D3 D1 69 
              D3 D1 CA D3 
              D1 0C D4 D1 
              9E D4 D1 CF 
              AE D1 -  -  	.dl SubNumberXXX, SubVariableXXX, SubChainPushXXX, SubChainAnsXXX, SubFunctionXXX, SubError
   26 D1:E964 07 D5 D1 41 
              D5 D1 8B D5 
              D1 D4 D5 D1 
              74 D6 D1 D3 
              AE D1 -  -  	.dl AddNumberXXX, AddVariableXXX, AddChainPushXXX, AddChainAnsXXX, AddFunctionXXX, AddError
   27 D1:E976 DD D6 D1 39 
              D7 D1 AC D7 
              D1 F5 D7 D1 
              6A D8 D1 D7 
              AE D1 -  -  	.dl DivNumberXXX, DivVariableXXX, DivChainPushXXX, DivChainAnsXXX, DivFunctionXXX, DivError
   28 D1:E988 C7 D8 D1 04 
              D9 D1 4F D9 
              D1 9B D9 D1 
              60 DA D1 DB 
              AE D1 -  -  	.dl MulNumberXXX, MulVariableXXX, MulChainPushXXX, MulChainAnsXXX, MulFunctionXXX, MulError
   29 D1:E99A 9D DC D1 F3 
              DC D1 6C DD 
              D1 B8 DD D1 
              37 DE D1 F9 
              AE D1 -  -  	.dl NEQNumberXXX, NEQVariableXXX, NEQChainPushXXX, NEQChainAnsXXX, NEQFunctionXXX, NEQError
   30 D1:E9AC C3 DA D1 20 
              DB D1 94 DB 
              D1 DB DB D1 
              3C DC D1 DF 
              AE D1 -  -  	.dl GLETNumberXXX, GLETVariableXXX, GLETChainPushXXX, GLETChainAnsXXX, GLETFunctionXXX, GLETError
   31 D1:E9BE 7A DE D1 F6 
              DE D1 7B DF 
              D1 BE DF D1 
              29 E0 D1 07 
              AF D1 -  -  	.dl XORANDNumberXXX, XORANDVariableXXX, XORANDChainPushXXX, XORANDChainAnsXXX, XORANDFunctionXXX, XORANDError
   32 D1:E9D0 6C E0 D1 C3 
              E0 D1 09 E1 
              D1 27 E1 D1 
              4E E1 D1 9D 
              E1 D1 -  -  	.dl StoNumberXXX, StoVariableXXX, StoChainPushXXX, StoChainAnsXXX, StoFunctionXXX, StoListXXX
   33 D1:E9E2 -  -  -  -  	
   34 D1:E9E2 -  -  -  -  CArguments:
   35 D1:E9E2 F7 E4 D1 37 
              E5 D1 4F E5 
              D1 95 E5 D1 
              A2 E6 D1 1C 
              E7 D1 C5 E7 
              D1 -  -  -  	.dl CFunction0Args, CFunction1Arg, CFunction2Args, CFunction3Args, CFunction4Args, CFunction5Args, CFunction6Args
   36 D1:E9F7 -  -  -  -  	
   37 D1:E9F7 -  -  -  -  functionCustomStart:
   38 D1:E9F7 93 D0 D1 5D 
              D1 D1 E1 C6 
              D1 DD D1 D1 	.dl functionExecHex, functionDefineSprite, functionCall, functionCompilePrgm
   39 D1:EA03 -  -  -  -  	
   40 D1:EA03 07 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 00 -  precedence:	 .db 7, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  0
   41 D1:EA12 -  -  -  -  	         ;   t+ - + / * ≠ ≥ ≤ > < = or xor and →
   42 D1:EA12 00 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 06 -  precedence2: .db 0, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  6
   43 D1:EA21 -  -  -  -  
   44 D1:EA21 -  -  -  -  lists:
   45 D1:EA21 1F EA D0 96 
              73 D0 C6 52 
              D0 66 94 D0 
              F6 31 D0 2F 
              11 D1 -  -  	.dl L1, L2, L3, L4, L5, L6
   46 D1:EA33 -  -  -  -  	
   47 D1:EA33 -  -  -  -  hexadecimals:
   48 D1:EA33 46 45 44 43 
              42 41 39 38 
              37 36 35 34 
              33 32 31 30 	.db tF, tE, tD, tC, tB, tA, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0
   49 D1:EA43 -  -  -  -  	
   50 D1:EA43 83 EA D0 -  stackPtr:				.dl stack
   51 D1:EA46 6B EE D0 -  outputPtr:				.dl output
   52 D1:EA49 00 2C D5 -  programPtr:				.dl program
   53 D1:EA4C D7 F5 D0 -  programNamesPtr:		.dl programNamesStack
   54 D1:EA4F D7 F5 D0 -  labelPtr:				.dl labelStack
   55 D1:EA52 BF F9 D0 -  gotoPtr:				.dl gotoStack
   56 D1:EA55 A7 FD D0 -  programDataOffsetPtr:	.dl programDataOffsetStack
   57 D1:EA58 83 03 D1 -  tempStringsPtr:			.dl tempStringsStack
   58 D1:EA5B 5F 09 D1 -  tempListsPtr:			.dl tempListsStack
   59 D1:EA5E 17 15 D1 -  programDataDataPtr:		.dl programDataData
   60 D1:EA61 00 -  -  -  amountOfPrograms		.db 0
   61 D1:EA62 00 -  -  -  openedParensE			.db 0
   62 D1:EA63 00 -  -  -  openedParensF			.db 0
   63 D1:EA64 00 -  -  -  amountOfArguments		.db 0
   64 D1:EA65 00 -  -  -  amountOfCRoutines		.db 0
   65 D1:EA66 00 -  -  -  amountOfEnds			.db 0
   66 D1:EA67 00 -  -  -  amountOfInput			.db 0
   67 D1:EA68 00 -  -  -  amountOfPause			.db 0
   68 D1:EA69 00 -  -  -  amountOfRoot			.db 0
   69 D1:EA6A 00 -  -  -  ExprOutput				.db 0
   70 D1:EA6B 00 -  -  -  ExprOutput2				.db 0
   71 D1:EA6C 00 -  -  -  AmountOfSubPrograms		.db 0
   72 D1:EA6D -  -  -  -  
   73 D1:EA6D -  -  -  -  varname:
   74 D1:EA6D 06 00 00 00 
              00 00 00 00 
              00 00 -  -  	.db ProtProgObj, 0,0,0,0,0,0,0,0,0
   75 D1:EA77 -  -  -  -  	
   76 D1:EA77 -  -  -  -  usedCroutines:
   77 D1:EA77 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  .fill AMOUNT_OF_C_FUNCTIONS, 0
   78 D1:EAC6 -  -  -  -  
   79 D1:EAC6 -  -  -  -  ICEAppvar:
   80 D1:EAC6 15 49 43 45 
              41 50 50 56 
              00 -  -  -  	.db AppVarObj, "ICEAPPV", 0
   81 D1:EACF -  -  -  -  ICEProgram:
   82 D1:EACF 06 49 43 45 
              00 -  -  -  	.db ProtProgObj, "ICE", 0
   83 D1:EAD4 -  -  -  -  	
   84 D1:EAD4 -  -  -  -  ErrorMessageStandard:
   85 D1:EAD4 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 66 6F 
              72 20 27 00 	.db "Invalid arguments for '", 0
   86 D1:EAEC -  -  -  -  EndErrorMessage:
   87 D1:EAEC 54 6F 6F 20 
              6D 61 6E 79 
              20 45 6E 64 
              73 21 00 -  	.db "Too many Ends!", 0
   88 D1:EAFB -  -  -  -  GoodCompileMessage:
   89 D1:EAFB 53 75 63 63 
              65 73 66 75 
              6C 6C 79 20 
              63 6F 6D 70 
              69 6C 65 64 
              21 00 -  -  	.db "Succesfully compiled!", 0
   90 D1:EB11 -  -  -  -  NoProgramsMessage:
   91 D1:EB11 4E 6F 20 70 
              72 6F 67 72 
              61 6D 73 20 
              66 6F 75 6E 
              64 21 00 -  	.db "No programs found!", 0
   92 D1:EB24 -  -  -  -  InvalidTokenMessage:
   93 D1:EB24 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              74 6F 6B 65 
              6E 21 00 -  	.db "Unsupported token!", 0
   94 D1:EB37 -  -  -  -  InvalidListArgumentMessage:
   95 D1:EB37 4F 6E 6C 79 
              20 69 6E 74 
              65 67 65 72 
              73 20 69 6E 
              20 6C 69 73 
              74 73 20 73 
              75 70 70 6F 
              72 74 65 64 
              21 00 -  -  	.db "Only integers in lists supported!", 0
   96 D1:EB59 -  -  -  -  InvalidNameLengthMessage:
   97 D1:EB59 50 72 6F 67 
              72 61 6D 20 
              6E 61 6D 65 
              20 74 6F 6F 
              20 6C 6F 6E 
              67 21 00 -  	.db "Program name too long!", 0
   98 D1:EB70 -  -  -  -  SameNameMessage:
   99 D1:EB70 4F 75 74 70 
              75 74 20 6E 
              61 6D 65 20 
              69 73 20 74 
              68 65 20 73 
              61 6D 65 20 
              61 73 20 69 
              6E 70 75 74 
              20 6E 61 6D 
              65 21 00 -  	.db "Output name is the same as input name!", 0
  100 D1:EB97 -  -  -  -  WrongSpriteDataMessgae:
  101 D1:EB97 49 6E 76 61 
              6C 69 64 20 
              73 70 72 69 
              74 65 20 64 
              61 74 61 21 
              00 -  -  -  	.db "Invalid sprite data!", 0
  102 D1:EBAC -  -  -  -  FunctionFunctionMessage:
  103 D1:EBAC 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 61 20 
              66 75 6E 63 
              74 69 6F 6E 
              20 69 6E 20 
              61 20 66 75 
              6E 63 74 69 
              6F 6E 21 00 	.db "You can't use a function in a function!", 0
  104 D1:EBD4 -  -  -  -  NotFoundMessage:
  105 D1:EBD4 50 72 6F 67 
              72 61 6D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 21 00 -  	.db "Program not found!", 0
  106 D1:EBE7 -  -  -  -  ImplementMessage:
  107 D1:EBE7 54 68 69 73 
              20 66 75 6E 
              63 74 69 6F 
              6E 20 68 61 
              73 20 6E 6F 
              74 20 62 65 
              65 6E 20 69 
              6D 70 6C 65 
              6D 65 6E 74 
              65 64 20 79 
              65 74 21 00 	.db "This function has not been implemented yet!", 0
  108 D1:EC13 -  -  -  -  SyntaxErrorMessage:
  109 D1:EC13 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 65 6E 
              74 65 72 65 
              64 21 00 -  	.db "Invalid arguments entered!", 0
  110 D1:EC2E -  -  -  -  TooLargeLoopMessage:
  111 D1:EC2E 54 6F 6F 20 
              6C 61 72 67 
              65 20 61 6E 
              6F 6E 79 6D 
              6F 75 73 20 
              6C 6F 6F 70 
              21 00 -  -  	.db "Too large anonymous loop!", 0
  112 D1:EC48 -  -  -  -  UsedCodeMessage:
  113 D1:EC48 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 63 6F 
              64 65 20 62 
              65 66 6F 72 
              65 20 44 65 
              66 69 6E 65 
              53 70 72 69 
              74 65 28 29 
              21 00 -  -  	.db "You can't use code before DefineSprite()!", 0
  114 D1:EC72 -  -  -  -  LineNumber:
  115 D1:EC72 45 72 72 6F 
              72 20 6F 6E 
              20 6C 69 6E 
              65 20 00 -  	.db "Error on line ", 0
  116 D1:EC81 -  -  -  -  MismatchErrorMessage:
  117 D1:EC81 4D 69 73 6D 
              61 74 63 68 
              65 64 20 70 
              61 72 65 6E 
              74 68 65 73 
              69 73 21 00 	.db "Mismatched parenthesis!", 0
  118 D1:EC99 -  -  -  -  UnknownMessage:
  119 D1:EC99 53 6F 6D 65 
              74 68 69 6E 
              67 20 77 65 
              6E 74 20 77 
              72 6F 6E 67 
              21 20 50 6C 
              65 61 73 65 
              20 72 65 70 
              6F 72 74 20 
              69 74 21 00 	.db "Something went wrong! Please report it!", 0
  120 D1:ECC1 -  -  -  -  NotEnoughMem:
  121 D1:ECC1 4E 6F 74 20 
              65 6E 6F 75 
              67 68 20 66 
              72 65 65 20 
              52 41 4D 21 
              00 -  -  -  	.db "Not enough free RAM!", 0
  122 D1:ECD6 -  -  -  -  LabelErrorMessage:
  123 D1:ECD6 43 61 6E 27 
              74 20 66 69 
              6E 64 20 73 
              70 65 63 69 
              66 69 63 20 
              6C 61 62 65 
              6C 21 00 -  	.db "Can't find specific label!", 0
  124 D1:ECF1 -  -  -  -  StartParseMessage:
  125 D1:ECF1 43 6F 6D 70 
              69 6C 69 6E 
              67 20 70 72 
              6F 67 72 61 
              6D 20 00 -  	.db "Compiling program ", 0
  126 D1:ED04 -  -  -  -  ICEName:
  127 D1:ED04 49 43 45 20 
              43 6F 6D 70 
              69 6C 65 72 
              20 76 31 2E 
              35 20 2D 20 
              42 79 20 50 
              65 74 65 72 
              20 22 50 54 
              5F 22 20 54 
              69 6C 6C 65 
              6D 61 00 -  	.db "ICE Compiler v1.5 - By Peter \"PT_\" Tillema", 0
  128 D1:ED2F -  -  -  -  PressKey:
  129 D1:ED2F 5B 50 72 65 
              73 73 20 61 
              6E 79 20 6B 
              65 79 20 74 
              6F 20 65 78 
              69 74 5D 00 	.db "[Press any key to exit]", 0
  130 D1:ED47 -  -  -  -  	
  131 D1:ED47 -  -  -  -  MulTable:
  132 D1:ED47 01 29 00 00 
              00 00 00 00 
              00 00 -  -  	.db 1 \ add hl, hl \ .db 0,0,0,0,0,0,0,0
  133 D1:ED51 04 E5 D1 29 
              19 00 00 00 
              00 00 -  -  	.db 4 \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0,0
  134 D1:ED5B 02 29 29 00 
              00 00 00 00 
              00 00 -  -  	.db 2 \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0,0
  135 D1:ED65 05 E5 D1 29 
              29 19 00 00 
              00 00 -  -  	.db 5 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0,0
  136 D1:ED6F 05 29 E5 D1 
              29 19 00 00 
              00 00 -  -  	.db 5 \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0
  137 D1:ED79 06 E5 D1 29 
              19 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0,0
  138 D1:ED83 03 29 29 29 
              00 00 00 00 
              00 00 -  -  	.db 3 \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0
  139 D1:ED8D 06 E5 D1 29 
              29 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0
  140 D1:ED97 06 E5 D1 29 
              29 19 29 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0,0
  141 D1:EDA1 07 E5 D1 29 
              29 19 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0
  142 D1:EDAB 06 29 29 E5 
              D1 29 19 00 
              00 00 -  -  	.db 6 \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0
  143 D1:EDB5 09 E5 C1 29 
              29 E5 D1 29 
              19 09 -  -  	.db 9 \ push hl \ pop bc \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, bc
  144 D1:EDBF 07 E5 D1 29 
              19 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0
  145 D1:EDC9 09 E5 D1 29 
              29 29 29 B7 
              ED 52 -  -  	.db 9 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ or a \ sbc hl, de
  146 D1:EDD3 04 29 29 29 
              29 00 00 00 
              00 00 -  -  	.db 4 \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0
  147 D1:EDDD 07 E5 D1 29 
              29 29 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0
  148 D1:EDE7 07 E5 D1 29 
              29 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0
  149 D1:EDF1 08 01 13 00 
              00 CD 54 01 
              00 00 -  -  	.db 8 \ ld bc, 19 \ call __imulu \ .db 0
  150 D1:EDFB 07 E5 D1 29 
              29 19 29 29 
              00 -  -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ .db 0
  151 D1:EE04 -  -  -  -  	
  152 D1:EE04 -  -  -  -  InputRoutine:
  153 D1:EE04 CD 14 08 02 	call _ClrScrn
  154 D1:EE08 CD 28 08 02 	call _HomeUp
  155 D1:EE0C AF -  -  -  	xor	a, a
  156 D1:EE0D 32 79 08 D0 	ld (ioPrompt), a
  157 D1:EE11 32 99 05 D0 	ld	(curUnder), a
  158 D1:EE15 CD 20 13 02 	call _GetStringInput
  159 D1:EE19 2A 4E 24 D0 	ld	hl, (editSym)
  160 D1:EE1D CD E8 0A 02 	call _VarNameToOP1HL
  161 D1:EE21 CD 0C 05 02 	call _ChkFindSym
  162 D1:EE25 1A -  -  -  	ld a, (de)
  163 D1:EE26 13 -  -  -  	inc de
  164 D1:EE27 13 -  -  -  	inc de
  165 D1:EE28 47 -  -  -  	ld b, a
  166 D1:EE29 ED 62 -  -  	sbc hl, hl
  167 D1:EE2B C5 -  -  -  _:	push bc
  168 D1:EE2C 29 -  -  -  		add hl, hl
  169 D1:EE2D E5 -  -  -  		push hl
  170 D1:EE2E C1 -  -  -  		pop bc
  171 D1:EE2F 29 -  -  -  		add hl, hl
  172 D1:EE30 29 -  -  -  		add hl, hl
  173 D1:EE31 09 -  -  -  		add hl, bc
  174 D1:EE32 1A -  -  -  		ld a, (de)
  175 D1:EE33 D6 30 -  -  		sub t0
  176 D1:EE35 01 00 00 00 		ld bc, 0
  177 D1:EE39 4F -  -  -  		ld c, a
  178 D1:EE3A 09 -  -  -  		add hl, bc
  179 D1:EE3B 13 -  -  -  		inc de
  180 D1:EE3C C1 -  -  -  	pop bc
  181 D1:EE3D 10 EC -  -  	djnz -_
  182 D1:EE3F -  -  -  -  InputOffset = $+2
  183 D1:EE3F DD 2F 00 -  	ld (ix+0), hl
  184 D1:EE42 C3 78 15 02 	jp _DeleteTempEditEqu
  185 D1:EE46 -  -  -  -  InputRoutineEnd:
  186 D1:EE46 -  -  -  -  
  187 D1:EE46 -  -  -  -  RandRoutine:
  188 D1:EE46 DD 27 51 -  	ld hl, (ix+rand1)
  189 D1:EE49 DD 17 54 -  	ld de, (ix+rand1+3)
  190 D1:EE4C 44 -  -  -  	ld b, h
  191 D1:EE4D 4D -  -  -  	ld c, l
  192 D1:EE4E 29 -  -  -  	add hl, hl
  193 D1:EE4F CB 13 -  -  	rl e
  194 D1:EE51 CB 12 -  -  	rl d
  195 D1:EE53 29 -  -  -  	add hl, hl
  196 D1:EE54 CB 13 -  -  	rl e
  197 D1:EE56 CB 12 -  -  	rl d
  198 D1:EE58 2C -  -  -  	inc l
  199 D1:EE59 09 -  -  -  	add hl, bc
  200 D1:EE5A DD 2F 51 -  	ld (ix+rand1), hl
  201 D1:EE5D ED 5A -  -  	adc hl, de
  202 D1:EE5F DD 2F 54 -  	ld (ix+rand1+3), hl
  203 D1:EE62 EB -  -  -  	ex de, hl
  204 D1:EE63 DD 27 57 -  	ld hl, (ix+rand1+6)
  205 D1:EE66 DD 07 5A -  	ld bc, (ix+rand1+9)
  206 D1:EE69 29 -  -  -  	add hl, hl
  207 D1:EE6A CB 11 -  -  	rl c
  208 D1:EE6C CB 10 -  -  	rl b
  209 D1:EE6E DD 0F 5A -  	ld (ix+rand1+9), bc
  210 D1:EE71 9F -  -  -  	sbc a, a
  211 D1:EE72 E6 C5 -  -  	and %11000101
  212 D1:EE74 AD -  -  -  	xor l
  213 D1:EE75 6F -  -  -  	ld l, a
  214 D1:EE76 DD 2F 57 -  	ld (ix+rand1+6), hl
  215 D1:EE79 EB -  -  -  	ex de, hl
  216 D1:EE7A 09 -  -  -  	add hl, bc
  217 D1:EE7B C9 -  -  -  	ret
  218 D1:EE7C -  -  -  -  RandRoutineEnd:
  219 D1:EE7C -  -  -  -  
  220 D1:EE7C -  -  -  -  DispNumberRoutine:
  221 D1:EE7C 3E 12 -  -  	ld a, 18
  222 D1:EE7E 32 96 05 D0 	ld (curCol), a
  223 D1:EE82 CD E0 1E 02 	call _DispHL
  224 D1:EE86 CD F0 07 02 	call _NewLine
  225 D1:EE8A -  -  -  -  	
  226 D1:EE8A -  -  -  -  DispStringRoutine:
  227 D1:EE8A AF -  -  -  	xor a
  228 D1:EE8B 32 96 05 D0 	ld (curCol), a
  229 D1:EE8F CD C0 07 02 	call _PutS
  230 D1:EE93 CD F0 07 02 	call _NewLine
  231 D1:EE97 -  -  -  -  
  232 D1:EE97 -  -  -  -  PauseRoutine:
  233 D1:EE97 2B -  -  -  	dec hl
  234 D1:EE98 -  -  -  -  PauseRoutine2:
  235 D1:EE98 0E 6E -  -  	ld c, 110
  236 D1:EE9A 06 20 -  -  _:	ld b, 32
  237 D1:EE9C 10 FE -  -  	djnz $
  238 D1:EE9E 0D -  -  -  	dec c
  239 D1:EE9F 20 F9 -  -  	jr nz, -_
  240 D1:EEA1 B7 -  -  -  	or a
  241 D1:EEA2 11 FF FF FF 	ld de, -1
  242 D1:EEA6 19 -  -  -  	add hl, de
  243 D1:EEA7 38 EF -  -  	jr c, PauseRoutine2
  244 D1:EEA9 C9 -  -  -  	ret
  245 D1:EEAA -  -  -  -  PauseRoutineEnd:
  246 D1:EEAA -  -  -  -  
  247 D1:EEAA -  -  -  -  MeanRoutine:
  248 D1:EEAA DD 21 00 00 
              00 -  -  -  	ld ix, 0
  249 D1:EEAF DD 39 -  -  	add ix, sp
  250 D1:EEB1 19 -  -  -  	add hl, de
  251 D1:EEB2 E5 -  -  -  	push hl
  252 D1:EEB3 DD CB FF 1E 		rr (ix-1)
  253 D1:EEB7 E1 -  -  -  	pop hl
  254 D1:EEB8 CB 1C -  -  	rr h
  255 D1:EEBA CB 1D -  -  	rr l
  256 D1:EEBC DD 21 3F 38 
              D1 -  -  -  	ld ix, L1+20000
  257 D1:EEC1 C9 -  -  -  	ret
  258 D1:EEC2 -  -  -  -  MeanRoutineEnd:
  259 D1:EEC2 -  -  -  -  
  260 D1:EEC2 -  -  -  -  KeypadRoutine:
  261 D1:EEC2 F3 -  -  -  	di
  262 D1:EEC3 21 00 00 F5 	ld hl, 0F50000h
  263 D1:EEC7 36 02 -  -  	ld (hl), 2
  264 D1:EEC9 AF -  -  -  	xor a
  265 D1:EECA BE -  -  -  _:	cp a, (hl)
  266 D1:EECB 20 FD -  -  	jr nz, -_
  267 D1:EECD FB -  -  -  	ei
  268 D1:EECE 68 -  -  -  	ld l, b
  269 D1:EECF 7E -  -  -  	ld a, (hl)
  270 D1:EED0 ED 62 -  -  	sbc hl, hl
  271 D1:EED2 A1 -  -  -  	and c
  272 D1:EED3 C8 -  -  -  	ret z
  273 D1:EED4 2C -  -  -  	inc l
  274 D1:EED5 C9 -  -  -  	ret
  275 D1:EED6 -  -  -  -  KeypadRoutineEnd:
  276 D1:EED6 -  -  -  -  
  277 D1:EED6 -  -  -  -  RootRoutine:
  278 D1:EED6 F3 -  -  -  	di
  279 D1:EED7 3B -  -  -      dec sp      ; (sp) = ?
  280 D1:EED8 E5 -  -  -      push hl      ; (sp) = ?uhl
  281 D1:EED9 3B -  -  -      dec sp      ; (sp) = ?uhl?
  282 D1:EEDA FD E1 -  -      pop iy      ; (sp) = ?u, uix = hl?
  283 D1:EEDC 3B -  -  -      dec sp      ; (sp) = ?u?
  284 D1:EEDD F1 -  -  -      pop af      ; af = u?
  285 D1:EEDE B7 -  -  -      or  a,a
  286 D1:EEDF ED 62 -  -      sbc hl,hl
  287 D1:EEE1 EB -  -  -      ex  de,hl   ; de = 0
  288 D1:EEE2 ED 62 -  -      sbc hl,hl   ; hl = 0
  289 D1:EEE4 01 40 0C 00     ld  bc,$C40 ; b = 12, c = 0x40
  290 D1:EEE8 -  -  -  -  Sqrt24Loop:
  291 D1:EEE8 91 -  -  -      sub     a,c
  292 D1:EEE9 ED 52 -  -      sbc     hl,de
  293 D1:EEEB 30 03 -  -      jr      nc,Sqrt24Skip
  294 D1:EEED 81 -  -  -      add     a,c
  295 D1:EEEE ED 5A -  -      adc     hl,de
  296 D1:EEF0 -  -  -  -  Sqrt24Skip:
  297 D1:EEF0 3F -  -  -      ccf
  298 D1:EEF1 CB 13 -  -      rl   e
  299 D1:EEF3 CB 12 -  -      rl   d
  300 D1:EEF5 FD 29 -  -      add  iy,iy
  301 D1:EEF7 17 -  -  -      rla
  302 D1:EEF8 ED 6A -  -      adc  hl,hl
  303 D1:EEFA FD 29 -  -      add  iy,iy
  304 D1:EEFC 17 -  -  -      rla
  305 D1:EEFD ED 6A -  -      adc  hl,hl
  306 D1:EEFF 10 E7 -  -      djnz Sqrt24Loop
  307 D1:EF01 EB -  -  -      ex   de,hl
  308 D1:EF02 C9 -  -  -      ret
  309 D1:EF03 -  -  -  -  RootRoutineEnd:
  310 D1:EF03 -  -  -  -  
  311 D1:EF03 -  -  -  -  XORANDData:
  312 D1:EF03 01 FF FF FF 	ld bc, -1
  313 D1:EF07 09 -  -  -  	add hl, bc
  314 D1:EF08 9F -  -  -  	sbc a, a
  315 D1:EF09 EB -  -  -  	ex de, hl
  316 D1:EF0A 57 -  -  -  	ld d, a
  317 D1:EF0B 09 -  -  -  	add hl, bc
  318 D1:EF0C 9F -  -  -  	sbc a, a
  319 D1:EF0D -  -  -  -  XORANDSMC:
  320 D1:EF0D A2 -  -  -  	and a, d
  321 D1:EF0E ED 62 -  -  	sbc hl, hl
  322 D1:EF10 E6 01 -  -  	and 1
  323 D1:EF12 6F -  -  -  	ld l, a
  324 D1:EF13 -  -  -  -  
  325 D1:EF13 -  -  -  -  CData:
  326 D1:EF13 DD 21 3F 38 
              D1 -  -  -  	ld ix, L1+20000
  327 D1:EF18 21 DA A8 D1 	ld hl, LibLoadAppVar - CData + UserMem
  328 D1:EF1C CD 20 03 02 	call _Mov9ToOP1
  329 D1:EF20 3E 15 -  -  	ld a, AppVarObj
  330 D1:EF22 32 F8 05 D0 	ld (OP1), a
  331 D1:EF26 CD 0C 05 02 _:	call _ChkFindSym
  332 D1:EF2A 38 24 -  -  	jr c, NotFound
  333 D1:EF2C CD 98 1F 02 	call _ChkInRAM
  334 D1:EF30 20 0E -  -  	jr nz, InArc
  335 D1:EF32 CD 28 06 02 	call _PushOP1
  336 D1:EF36 CD 48 14 02 	call _Arc_UnArc
  337 D1:EF3A CD C4 05 02 	call _PopOP1
  338 D1:EF3E 18 E6 -  -  	jr -_
  339 D1:EF40 -  -  -  -  InArc:
  340 D1:EF40 EB -  -  -  	ex de, hl
  341 D1:EF41 11 09 00 00 	ld de, 9
  342 D1:EF45 19 -  -  -  	add hl, de
  343 D1:EF46 5E -  -  -  	ld e, (hl)
  344 D1:EF47 19 -  -  -  	add hl, de
  345 D1:EF48 23 -  -  -  	inc hl
  346 D1:EF49 23 -  -  -  	inc hl
  347 D1:EF4A 23 -  -  -  	inc hl
  348 D1:EF4B 11 F1 A8 D1 	ld de, RelocationStart - CData + UserMem
  349 D1:EF4F E9 -  -  -  	jp (hl)
  350 D1:EF50 -  -  -  -  NotFound:
  351 D1:EF50 CD 14 08 02 	call _ClrScrn
  352 D1:EF54 CD 28 08 02 	call _HomeUp
  353 D1:EF58 21 D6 A8 D1 	ld hl, MissingAppVar - CData + UserMem
  354 D1:EF5C CD C0 07 02 	call _PutS
  355 D1:EF60 CD F0 07 02 	call _NewLine
  356 D1:EF64 C3 C0 07 02 	jp _PutS
  357 D1:EF68 -  -  -  -  MissingAppVar:
  358 D1:EF68 4E 65 65 64 	.db "Need"
  359 D1:EF6C -  -  -  -  LibLoadAppVar:
  360 D1:EF6C 20 4C 69 62 
              4C 6F 61 64 
              00 -  -  -  	.db " LibLoad", 0
  361 D1:EF75 74 69 6E 79 
              2E 63 63 2F 
              63 6C 69 62 
              73 00 -  -  	.db "tiny.cc/clibs", 0
  362 D1:EF83 -  -  -  -  RelocationStart:
  363 D1:EF83 C0 47 52 41 
              50 48 58 00 
              04 -  -  -  	.db 0C0h, "GRAPHX", 0, 4
  364 D1:EF8C -  -  -  -  CData2:
Listing for file "ice.asm"
  452 D1:EF8C -  -  -  -  
  453 D1:EF8C -  -  -  -  stop:
  454 D1:EF8C -  -  -  -  
  455 D1:EF8C -  -  -  -  .echo stop-start+14
