    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\ti84pce.inc"
Listing for file "ICE.asm"
    2 00:0000 -  -  -  -  #include "defines.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\defines.asm"
    1 00:0000 -  -  -  -  tempToken				.equ saveSScreen+00
    2 00:0000 -  -  -  -  tempToken2				.equ saveSScreen+01
    3 00:0000 -  -  -  -  InputStartData			.equ saveSScreen+02
    4 00:0000 -  -  -  -  RandStartData			.equ saveSScreen+05
    5 00:0000 -  -  -  -  PauseStartData			.equ saveSScreen+08
    6 00:0000 -  -  -  -  MeanStartData			.equ saveSScreen+11
    7 00:0000 -  -  -  -  KeypadStartData			.equ saveSScreen+14
    8 00:0000 -  -  -  -  
    9 00:0000 -  -  -  -  stack					.equ saveSScreen+00100
   10 00:0000 -  -  -  -  output					.equ saveSScreen+01100
   11 00:0000 -  -  -  -  programNamesStack		.equ saveSScreen+03000
   12 00:0000 -  -  -  -  labelStack				.equ saveSScreen+03000
   13 00:0000 -  -  -  -  gotoStack				.equ saveSScreen+04000
   14 00:0000 -  -  -  -  programDataOffsetStack	.equ saveSScreen+05000
   15 00:0000 -  -  -  -  tempStringsStack		.equ saveSScreen+06500
   16 00:0000 -  -  -  -  tempListsStack			.equ saveSScreen+08000
   17 00:0000 -  -  -  -  spriteStack				.equ saveSScreen+10000
   18 00:0000 -  -  -  -  programDataData			.equ saveSScreen+12000
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  tempArg1				.equ pixelShadow2+0000
   21 00:0000 -  -  -  -  tempArg2				.equ pixelShadow2+1000
   22 00:0000 -  -  -  -  tempArg3				.equ pixelShadow2+2000
   23 00:0000 -  -  -  -  tempArg4				.equ pixelShadow2+3000
   24 00:0000 -  -  -  -  tempArg5				.equ pixelShadow2+4000
   25 00:0000 -  -  -  -  tempArg6				.equ pixelShadow2+5000
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  startTab				.equ saveSScreen
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  program					.equ vRAM+(320*240)
   30 00:0000 -  -  -  -  
   31 00:0000 -  -  -  -  fProgram1				.equ -30h
   32 00:0000 -  -  -  -  comp_with_libs			.equ 0										; used if compile with C libs
   33 00:0000 -  -  -  -  good_compilation		.equ 1										; used if compilation is succesfull
   34 00:0000 -  -  -  -  has_already_input		.equ 2										; only once time "Input" routine
   35 00:0000 -  -  -  -  has_already_rand		.equ 3										; only once time "rand" routine
   36 00:0000 -  -  -  -  has_already_pause		.equ 4										; only once time "Pause" routine
   37 00:0000 -  -  -  -  has_already_mean		.equ 5										; only once time "mean()" routine
   38 00:0000 -  -  -  -  has_already_keypad		.equ 6										; only once time scanning the keypad
   39 00:0000 -  -  -  -  used_code				.equ 7										; DefineSprite( must be in front of all the code
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  fExpression1			.equ -40h
   42 00:0000 -  -  -  -  prev_is_number			.equ 0										; used if a number consists of more digits
   43 00:0000 -  -  -  -  chain_operators			.equ 1										; used if the calculation is needed for another calculation
   44 00:0000 -  -  -  -  last_token_is_ret		.equ 2										; used if last token is "Return"
   45 00:0000 -  -  -  -  op_is_last_one			.equ 3										; used if the operator is the last of that line
   46 00:0000 -  -  -  -  output_is_number		.equ 4										; used if the calculation is only a single number, loop-statements can be 
   47 00:0000 -  -  -  -  ans_set_z_flag			.equ 5										; used if the previous calculation sets the zero flag, useful for loop/conditions
   48 00:0000 -  -  -  -  need_push				.equ 6										; used if Ans may not be overwritten
   49 00:0000 -  -  -  -  output_is_string		.equ 7										; used for strings
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  fExpression2			.equ -41h
   52 00:0000 -  -  -  -  use_mean_routine		.equ 0										; used if the function is mean()
   53 00:0000 -  -  -  -  triggered_a_comma		.equ 1										; used if a comma is entered outside parens, used by functions
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  fFunction1				.equ -50h
   56 00:0000 -  -  -  -  arg1_is_small			.equ 4										; used in C functions
   57 00:0000 -  -  -  -  function_implemented	.equ 4										; used if C function is implemented
   58 00:0000 -  -  -  -  arg2_is_small			.equ 3										; used in C functions
   59 00:0000 -  -  -  -  arg3_is_small			.equ 2										; used in C functions
   60 00:0000 -  -  -  -  arg4_is_small			.equ 1										; used in C functions
   61 00:0000 -  -  -  -  arg5_is_small			.equ 0										; used in C functions
   62 00:0000 -  -  -  -  
   63 00:0000 -  -  -  -  fFunction2				.equ -51h
   64 00:0000 -  -  -  -  negative_for_step		.equ 0										; used for the step in a For loop
   65 00:0000 -  -  -  -  for_step_is_number		.equ 1										; used for the step in a For loop
   66 00:0000 -  -  -  -  end_point_is_number		.equ 2										; used for the end point in a For loop
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  fAlways1				.equ -50h
   69 00:0000 -  -  -  -  displayed_det			.equ 0										; used if the text of a det( function is displayed in the statusbar
   70 00:0000 -  -  -  -  
   71 00:0000 -  -  -  -  typeNumber				.equ 0
   72 00:0000 -  -  -  -  typeVariable			.equ 1
   73 00:0000 -  -  -  -  typeChainPush			.equ 2
   74 00:0000 -  -  -  -  typeChainAns			.equ 3
   75 00:0000 -  -  -  -  typeReturnValue			.equ 4										; getKey, rand
   76 00:0000 -  -  -  -  typeList				.equ 5
   77 00:0000 -  -  -  -  typeOSList				.equ 6
   78 00:0000 -  -  -  -  typeString				.equ 7
   79 00:0000 -  -  -  -  typeFunction			.equ 00111111b
   80 00:0000 -  -  -  -  typeOperator			.equ 00011111b
   81 00:0000 -  -  -  -  
   82 00:0000 -  -  -  -  ChainPush				.equ 0
   83 00:0000 -  -  -  -  ChainAns				.equ 1
   84 00:0000 -  -  -  -  ChainListPush			.equ 2
   85 00:0000 -  -  -  -  ChainListAns			.equ 3
   86 00:0000 -  -  -  -  
   87 00:0000 -  -  -  -  OutputInBC				.equ 0
   88 00:0000 -  -  -  -  OutputInDE				.equ 1
   89 00:0000 -  -  -  -  OutputInHL				.equ 2
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  OutputIsInDE			.equ 0
   92 00:0000 -  -  -  -  OutputIsInHL			.equ 1
   93 00:0000 -  -  -  -  
   94 00:0000 -  -  -  -  ;---------------------------;
   95 00:0000 -  -  -  -  ;----- User Variables ------;
   96 00:0000 -  -  -  -  ;---------------------------;
   97 00:0000 -  -  -  -  Str0					.equ saveSScreen+15500
   98 00:0000 -  -  -  -  Str1					.equ saveSScreen+16000
   99 00:0000 -  -  -  -  Str2					.equ saveSScreen+16500
  100 00:0000 -  -  -  -  Str3					.equ saveSScreen+17000
  101 00:0000 -  -  -  -  Str4					.equ saveSScreen+17500
  102 00:0000 -  -  -  -  Str5					.equ saveSScreen+18000
  103 00:0000 -  -  -  -  Str6					.equ saveSScreen+18500
  104 00:0000 -  -  -  -  Str7					.equ saveSScreen+19000
  105 00:0000 -  -  -  -  Str8					.equ saveSScreen+19500
  106 00:0000 -  -  -  -  Str9					.equ saveSScreen+20000
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  L1						.equ saveSScreen
  109 00:0000 -  -  -  -  L2						.equ cmdPixelShadow
  110 00:0000 -  -  -  -  L3						.equ pixelShadow2
  111 00:0000 -  -  -  -  L4						.equ plotSScreen
  112 00:0000 -  -  -  -  L5						.equ pixelShadow
  113 00:0000 -  -  -  -  L6						.equ cursorImage
  114 00:0000 -  -  -  -  
  115 00:0000 -  -  -  -  ; IX offsets
  116 00:0000 -  -  -  -  vA						.equ 0
  117 00:0000 -  -  -  -  vB						.equ 3
  118 00:0000 -  -  -  -  vC						.equ 6
  119 00:0000 -  -  -  -  vD						.equ 9
  120 00:0000 -  -  -  -  vE						.equ 12
  121 00:0000 -  -  -  -  vF						.equ 15
  122 00:0000 -  -  -  -  vG						.equ 18
  123 00:0000 -  -  -  -  vH						.equ 21
  124 00:0000 -  -  -  -  vI						.equ 24
  125 00:0000 -  -  -  -  vJ						.equ 27
  126 00:0000 -  -  -  -  vK						.equ 30
  127 00:0000 -  -  -  -  vL						.equ 33
  128 00:0000 -  -  -  -  vM						.equ 36
  129 00:0000 -  -  -  -  vN						.equ 39
  130 00:0000 -  -  -  -  vO						.equ 42
  131 00:0000 -  -  -  -  vP						.equ 45
  132 00:0000 -  -  -  -  vQ						.equ 48
  133 00:0000 -  -  -  -  vR						.equ 51
  134 00:0000 -  -  -  -  vS						.equ 54
  135 00:0000 -  -  -  -  vT						.equ 57
  136 00:0000 -  -  -  -  vU						.equ 60
  137 00:0000 -  -  -  -  vV						.equ 63
  138 00:0000 -  -  -  -  vW						.equ 66
  139 00:0000 -  -  -  -  vX						.equ 69
  140 00:0000 -  -  -  -  vY						.equ 72
  141 00:0000 -  -  -  -  vZ						.equ 75
  142 00:0000 -  -  -  -  vtheta					.equ 78
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  rand1					.equ 81
  145 00:0000 -  -  -  -  rand2					.equ 84
Listing for file "ICE.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 EF 7B -  -  .db tExtTok, tAsm84CeCmp
    5 00:0002 -  -  -  -  .org UserMem
    6 D1:A881 -  -  -  -  
    7 D1:A881 -  -  -  -  start:
    8 D1:A881 C3 50 07 02 	jp _ErrSyntax
    9 D1:A885 ED 73 E6 AF 
              D1 -  -  -  	ld (backupSP), sp
   10 D1:A88A 2A 17 23 D0 	ld hl, (begPC)
   11 D1:A88E 22 EA AF D1 	ld (backupBegPC), hl
   12 D1:A892 2A 1A 23 D0 	ld hl, (curPC)
   13 D1:A896 22 F2 AF D1 	ld (backupCurPC), hl
   14 D1:A89A 2A 1D 23 D0 	ld hl, (endPC)
   15 D1:A89E 22 FA AF D1 	ld (backupEndPC), hl
   16 D1:A8A2 CD 48 08 02 	call _RunIndicOff
   17 D1:A8A6 CD ED BB D1 	call InstallHooks
   18 D1:A8AA -  -  -  -  GUI:
   19 D1:A8AA 3E 27 -  -  	ld a, lcdBpp8
   20 D1:A8AC 32 18 00 E3 	ld (mpLcdCtrl), a
   21 D1:A8B0 -  -  -  -  SetPalette:
   22 D1:A8B0 21 00 02 E3 	ld hl, mpLcdPalette
   23 D1:A8B4 06 00 -  -  	ld b, 0
   24 D1:A8B6 50 -  -  -  _:	ld d, b
   25 D1:A8B7 78 -  -  -  	ld a, b
   26 D1:A8B8 E6 C0 -  -  	and 011000000b
   27 D1:A8BA CB 3A -  -  	srl d
   28 D1:A8BC 1F -  -  -  	rra
   29 D1:A8BD 5F -  -  -  	ld e, a
   30 D1:A8BE 3E 1F -  -  	ld a, 000011111b
   31 D1:A8C0 A0 -  -  -  	and b
   32 D1:A8C1 B3 -  -  -  	or e
   33 D1:A8C2 77 -  -  -  	ld (hl), a
   34 D1:A8C3 23 -  -  -  	inc hl
   35 D1:A8C4 72 -  -  -  	ld (hl), d
   36 D1:A8C5 23 -  -  -  	inc hl
   37 D1:A8C6 04 -  -  -  	inc b
   38 D1:A8C7 20 ED -  -  	jr nz, -_
   39 D1:A8C9 21 00 00 D4 	ld hl, vRAM
   40 D1:A8CD 36 BD -  -  	ld (hl), 189
   41 D1:A8CF E5 -  -  -  	push hl
   42 D1:A8D0 D1 -  -  -  	pop de
   43 D1:A8D1 13 -  -  -  	inc de
   44 D1:A8D2 01 80 0C 00 	ld bc, 320*10
   45 D1:A8D6 ED B0 -  -  	ldir
   46 D1:A8D8 36 00 -  -  	ld (hl), 0
   47 D1:A8DA 01 40 01 00 	ld bc, 320
   48 D1:A8DE ED B0 -  -  	ldir
   49 D1:A8E0 36 FF -  -  	ld (hl), 255
   50 D1:A8E2 01 3F 1E 01 	ld bc, 320*229-1
   51 D1:A8E6 ED B0 -  -  	ldir
   52 D1:A8E8 21 82 EE D1 	ld hl, ICEName
   53 D1:A8EC 3E 01 -  -  	ld a, 1
   54 D1:A8EE 32 89 B7 D1 	ld (TextYPos_ASM), a
   55 D1:A8F2 C6 14 -  -  	add a, 20
   56 D1:A8F4 32 58 B7 D1 	ld (TextXPos_ASM), a
   57 D1:A8F8 CD 4B B0 D1 	call PrintString
   58 D1:A8FC 21 89 B7 D1 	ld hl, TextYPos_ASM
   59 D1:A900 34 -  -  -  	inc (hl)
   60 D1:A901 34 -  -  -  	inc (hl)
   61 D1:A902 2A 9D 25 D0 	ld hl, (progPtr)
   62 D1:A906 -  -  -  -  FindPrograms:
   63 D1:A906 CD 87 BB D1 	call FindNextGoodVar
   64 D1:A90A 20 34 -  -  	jr nz, StopFindingPrograms
   65 D1:A90C E5 -  -  -  	push hl
   66 D1:A90D 3A 89 B7 D1 		ld a, (TextYPos_ASM)
   67 D1:A911 C6 0A -  -  		add a, 10
   68 D1:A913 38 28 -  -  		jr c, +_
   69 D1:A915 32 89 B7 D1 		ld (TextYPos_ASM), a
   70 D1:A919 21 0A 00 00 		ld hl, 10
   71 D1:A91D 22 58 B7 D1 		ld (TextXPos_ASM), hl
   72 D1:A921 21 E1 EB D1 		ld hl, AmountOfPrograms
   73 D1:A925 34 -  -  -  		inc (hl)
   74 D1:A926 CD 98 1F 02 		call _ChkInRAM
   75 D1:A92A 3E 23 -  -  		ld a, '#'
   76 D1:A92C DC 56 B7 D1 		call c, _PrintChar_ASM
   77 D1:A930 2A CC EB D1 		ld hl, (ProgramNamesPtr)
   78 D1:A934 11 F8 FF FF 		ld de, -8
   79 D1:A938 19 -  -  -  		add hl, de
   80 D1:A939 CD 4B B0 D1 		call PrintString
   81 D1:A93D E1 -  -  -  _:	pop hl
   82 D1:A93E 18 C6 -  -  	jr FindPrograms
   83 D1:A940 -  -  -  -  StopFindingPrograms:
   84 D1:A940 3E 0D -  -  	ld a, 13
   85 D1:A942 32 89 B7 D1 	ld (TextYPos_ASM), a
   86 D1:A946 21 01 00 00 	ld hl, 1
   87 D1:A94A 22 58 B7 D1 	ld (TextXPos_ASM), hl
   88 D1:A94E 3A E1 EB D1 	ld a, (AmountOfPrograms)
   89 D1:A952 B7 -  -  -  	or a
   90 D1:A953 CA 11 AF D1 	jp z, NoProgramsError
   91 D1:A957 32 C0 A9 D1 	ld (AmountPrograms), a
   92 D1:A95B 2E 01 -  -  	ld l, 1
   93 D1:A95D -  -  -  -  PrintCursor:
   94 D1:A95D 5D -  -  -  	ld e, l
   95 D1:A95E 16 0A -  -  	ld d, 10
   96 D1:A960 ED 5C -  -  	mlt de
   97 D1:A962 1C -  -  -  	inc e
   98 D1:A963 1C -  -  -  	inc e
   99 D1:A964 1C -  -  -  	inc e
  100 D1:A965 7B -  -  -  	ld a, e
  101 D1:A966 32 89 B7 D1 	ld (TextYPos_ASM), a
  102 D1:A96A AF -  -  -  	xor a
  103 D1:A96B 32 AE B7 D1 	ld (color), a
  104 D1:A96F 3C -  -  -  	inc a
  105 D1:A970 32 58 B7 D1 	ld (TextXPos_ASM), a
  106 D1:A974 3E 3E -  -  	ld a, '>'
  107 D1:A976 CD 56 B7 D1 	call _PrintChar_ASM
  108 D1:A97A 3E FF -  -  	ld a, 255
  109 D1:A97C 32 AE B7 D1 	ld (color), a
  110 D1:A980 3E 01 -  -  	ld a, 1
  111 D1:A982 32 58 B7 D1 	ld (TextXPos_ASM), a
  112 D1:A986 E5 -  -  -  _:	push hl
  113 D1:A987 CD 4C 01 02 		call _GetCSC
  114 D1:A98B E1 -  -  -  	pop hl
  115 D1:A98C B7 -  -  -  	or a
  116 D1:A98D 28 F7 -  -  	jr z, -_
  117 D1:A98F FE 04 -  -  	cp skUp
  118 D1:A991 28 1E -  -  	jr z, PressedUp
  119 D1:A993 FE 01 -  -  	cp skDown
  120 D1:A995 28 27 -  -  	jr z, PressedDown
  121 D1:A997 FE 0F -  -  	cp skClear
  122 D1:A999 CA E5 AF D1 	jp z, StopProgram
  123 D1:A99D FE 09 -  -  	cp skEnter
  124 D1:A99F 20 E5 -  -  	jr nz, -_
  125 D1:A9A1 -  -  -  -  PressedEnter:
  126 D1:A9A1 2D -  -  -  	dec l
  127 D1:A9A2 26 08 -  -  	ld h, 8
  128 D1:A9A4 ED 6C -  -  	mlt hl
  129 D1:A9A6 11 D6 F5 D0 	ld de, ProgramNamesStack-1
  130 D1:A9AA 19 -  -  -  	add hl, de
  131 D1:A9AB CD 20 03 02 	call _Mov9ToOP1
  132 D1:A9AF 18 1B -  -  	jr StartParsing
  133 D1:A9B1 -  -  -  -  PressedUp:
  134 D1:A9B1 7D -  -  -  	ld a, l
  135 D1:A9B2 3D -  -  -  	dec a
  136 D1:A9B3 28 D1 -  -  	jr z, -_
  137 D1:A9B5 2D -  -  -  	dec l
  138 D1:A9B6 3E 17 -  -  	ld a, 23
  139 D1:A9B8 CD 56 B7 D1 	call _PrintChar_ASM
  140 D1:A9BC 18 9F -  -  	jr PrintCursor
  141 D1:A9BE -  -  -  -  PressedDown:
  142 D1:A9BE 7D -  -  -  	ld a, l
  143 D1:A9BF -  -  -  -  AmountPrograms = $+1
  144 D1:A9BF FE 00 -  -  	cp a, 0
  145 D1:A9C1 28 C3 -  -  	jr z, -_
  146 D1:A9C3 2C -  -  -  	inc l
  147 D1:A9C4 3E 17 -  -  	ld a, 23
  148 D1:A9C6 CD 56 B7 D1 	call _PrintChar_ASM
  149 D1:A9CA 18 91 -  -  	jr PrintCursor
  150 D1:A9CC -  -  -  -  StartParsing:
  151 D1:A9CC 3E 05 -  -  	ld a, ProgObj
  152 D1:A9CE 32 F8 05 D0 	ld (OP1), a
  153 D1:A9D2 CD 0C 05 02 _:	call _ChkFindSym
  154 D1:A9D6 30 07 -  -  	jr nc, +_
  155 D1:A9D8 21 F8 05 D0 	ld hl, OP1
  156 D1:A9DC 34 -  -  -  	inc (hl)
  157 D1:A9DD 18 F3 -  -  	jr -_
  158 D1:A9DF CD 98 1F 02 _:	call _ChkInRAM
  159 D1:A9E3 30 0A -  -  	jr nc, +_
  160 D1:A9E5 EB -  -  -  	ex de, hl
  161 D1:A9E6 11 09 00 00 	ld de, 9
  162 D1:A9EA 19 -  -  -  	add hl, de
  163 D1:A9EB 5E -  -  -  	ld e, (hl)
  164 D1:A9EC 19 -  -  -  	add hl, de
  165 D1:A9ED 23 -  -  -  	inc hl
  166 D1:A9EE EB -  -  -  	ex de, hl
  167 D1:A9EF 01 00 00 00 _:	ld bc, 0
  168 D1:A9F3 EB -  -  -  	ex de, hl
  169 D1:A9F4 4E -  -  -  	ld c, (hl)																; BC = program length
  170 D1:A9F5 23 -  -  -  	inc hl
  171 D1:A9F6 46 -  -  -  	ld b, (hl)
  172 D1:A9F7 23 -  -  -  	inc hl
  173 D1:A9F8 22 1A 23 D0 	ld (curPC), hl
  174 D1:A9FC 22 17 23 D0 	ld (begPC), hl
  175 D1:AA00 09 -  -  -  	add hl, bc
  176 D1:AA01 2B -  -  -  	dec hl
  177 D1:AA02 22 1D 23 D0 	ld (endPC), hl
  178 D1:AA06 CD 36 B0 D1 	call PrintCompilingProgram
  179 D1:AA0A FD 36 D0 01 	ld (iy+fProgram1), 1
  180 D1:AA0E 21 73 F0 D1 	ld hl, CData
  181 D1:AA12 ED 5B C9 EB 
              D1 -  -  -  	ld de, (programPtr)
  182 D1:AA17 01 84 00 00 	ld bc, CData2 - CData
  183 D1:AA1B ED B0 -  -  	ldir
  184 D1:AA1D ED 53 C9 EB 
              D1 -  -  -  	ld (programPtr), de
  185 D1:AA22 CD 55 B0 D1 	call PreScanPrograms
  186 D1:AA26 3E CD -  -  	ld a, 0CDh
  187 D1:AA28 21 48 08 02 	ld hl, _RunIndicOff
  188 D1:AA2C CD 62 AC D1 	call InsertAHL															; call _RunIndicOff
  189 D1:AA30 2A C9 EB D1 	ld hl, (programPtr)
  190 D1:AA34 11 8E 7C FC 	ld de, 4+4+5+UserMem-program
  191 D1:AA38 19 -  -  -  	add hl, de
  192 D1:AA39 CD 62 AC D1 	call InsertAHL															; call *
  193 D1:AA3D 01 FD 21 80 	ld bc, 08021FDh
  194 D1:AA41 11 00 D0 C3 	ld de, 0C3D000h
  195 D1:AA45 21 3C 1A 02 	ld hl, _DrawStatusBar
  196 D1:AA49 CD 97 AC D1 	call InsertBCDEHL														; ld iy, flags \ jp _DrawStatusBar
  197 D1:AA4D 3A E5 EB D1 	ld a, (amountOfCRoutines)
  198 D1:AA51 B7 -  -  -  	or a
  199 D1:AA52 20 0C -  -  	jr nz, CompileProgramFull
  200 D1:AA54 FD CB D0 86 	res comp_with_libs, (iy+fProgram1)
  201 D1:AA58 21 05 2C D5 	ld hl, program+5
  202 D1:AA5C 22 C9 EB D1 	ld (programPtr), hl
  203 D1:AA60 -  -  -  -  CompileProgramFull:
  204 D1:AA60 3A EB EB D1 	ld a, (AmountOfSubPrograms)
  205 D1:AA64 B7 -  -  -  	or a
  206 D1:AA65 20 43 -  -  	jr nz, SkipGetProgramName
  207 D1:AA67 21 EC EB D1 	ld hl, varname
  208 D1:AA6B 1E 09 -  -  	ld e, 9
  209 D1:AA6D -  -  -  -  GetProgramName:
  210 D1:AA6D E5 -  -  -  	push hl
  211 D1:AA6E CD 28 10 02 		call _IncFetch
  212 D1:AA72 E1 -  -  -  	pop hl
  213 D1:AA73 DA 90 AA D1 	jp c, +_
  214 D1:AA77 23 -  -  -  	inc hl
  215 D1:AA78 FE 3F -  -  	cp tEnter
  216 D1:AA7A 28 14 -  -  	jr z, +_
  217 D1:AA7C FE 41 -  -  	cp tA
  218 D1:AA7E DA 1B AF D1 	jp c, InvalidTokenError
  219 D1:AA82 FE 5C -  -  	cp ttheta+1
  220 D1:AA84 D2 1B AF D1 	jp nc, InvalidTokenError
  221 D1:AA88 77 -  -  -  	ld (hl), a
  222 D1:AA89 1D -  -  -  	dec e
  223 D1:AA8A 20 E1 -  -  	jr nz, GetProgramName
  224 D1:AA8C C3 21 AF D1 	jp InvalidNameLength
  225 D1:AA90 21 F9 05 D0 _:	ld hl, OP1+1
  226 D1:AA94 11 ED EB D1 	ld de, varname+1
  227 D1:AA98 06 08 -  -  	ld b, 8
  228 D1:AA9A -  -  -  -  CheckNames:
  229 D1:AA9A 1A -  -  -  	ld a, (de)
  230 D1:AA9B B7 -  -  -  	or a
  231 D1:AA9C 28 07 -  -  	jr z, CheckNamesSameLength
  232 D1:AA9E BE -  -  -  	cp (hl)
  233 D1:AA9F 20 09 -  -  	jr nz, GoodProgramName
  234 D1:AAA1 23 -  -  -  	inc hl
  235 D1:AAA2 13 -  -  -  	inc de
  236 D1:AAA3 10 F5 -  -  	djnz CheckNames
  237 D1:AAA5 -  -  -  -  CheckNamesSameLength:
  238 D1:AAA5 BE -  -  -  	cp (hl)
  239 D1:AAA6 CA 33 AF D1 	jp z, SameNameError
  240 D1:AAAA -  -  -  -  GoodProgramName:
  241 D1:AAAA -  -  -  -  SkipGetProgramName:
  242 D1:AAAA -  -  -  -  
  243 D1:AAAA -  -  -  -  ParseProgramUntilEnd:
  244 D1:AAAA CD 28 10 02 	call _IncFetch
  245 D1:AAAE -  -  -  -  CompileLoop:
  246 D1:AAAE 32 1F EA D0 	ld (tempToken), a
  247 D1:AAB2 47 -  -  -  	ld b, a
  248 D1:AAB3 AF -  -  -  	xor a
  249 D1:AAB4 FD 77 C0 -  	ld (iy+fExpression1), a
  250 D1:AAB7 FD 77 BF -  	ld (iy+fExpression2), a
  251 D1:AABA FD 77 B0 -  	ld (iy+fFunction1), a
  252 D1:AABD FD 77 AF -  	ld (iy+fFunction2), a
  253 D1:AAC0 32 E2 EB D1 	ld (openedParensE), a
  254 D1:AAC4 32 E3 EB D1 	ld (openedParensF), a
  255 D1:AAC8 78 -  -  -  	ld a, b
  256 D1:AAC9 FE D4 -  -  	cp tEnd
  257 D1:AACB 20 10 -  -  	jr nz, ++_
  258 D1:AACD 21 E6 EB D1 _:	ld hl, amountOfEnds
  259 D1:AAD1 7E -  -  -  	ld a, (hl)
  260 D1:AAD2 35 -  -  -  	dec (hl)
  261 D1:AAD3 B7 -  -  -  	or a
  262 D1:AAD4 CA 51 AF D1 	jp z, EndError
  263 D1:AAD8 3A 1F EA D0 	ld a, (tempToken)
  264 D1:AADC C9 -  -  -  	ret
  265 D1:AADD FE D0 -  -  _:	cp tElse
  266 D1:AADF 28 EC -  -  	jr z, --_
  267 D1:AAE1 CD BF B1 D1 	call ParseLine
  268 D1:AAE5 2A 1A 23 D0 	ld hl, (curPC)
  269 D1:AAE9 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  270 D1:AAEE B7 -  -  -  	or a
  271 D1:AAEF ED 52 -  -  	sbc hl, de
  272 D1:AAF1 01 40 01 00 	ld bc, 320
  273 D1:AAF5 CD 54 01 00 	call __imulu
  274 D1:AAF9 E5 -  -  -  	push hl
  275 D1:AAFA 2A 1D 23 D0 		ld hl, (endPC)
  276 D1:AAFE B7 -  -  -  		or a
  277 D1:AAFF ED 52 -  -  		sbc hl, de
  278 D1:AB01 23 -  -  -  		inc hl
  279 D1:AB02 E5 -  -  -  		push hl
  280 D1:AB03 C1 -  -  -  		pop bc
  281 D1:AB04 E1 -  -  -  	pop hl
  282 D1:AB05 CD 40 01 00 	call __idivu
  283 D1:AB09 E5 -  -  -  	push hl
  284 D1:AB0A C1 -  -  -  	pop bc
  285 D1:AB0B 19 -  -  -  	add hl, de
  286 D1:AB0C B7 -  -  -  	or a
  287 D1:AB0D ED 52 -  -  	sbc hl, de
  288 D1:AB0F 28 12 -  -  	jr z, +_
  289 D1:AB11 21 40 1F D4 	ld hl, vRAM+(320*25)
  290 D1:AB15 36 00 -  -  	ld (hl), 0
  291 D1:AB17 E5 -  -  -  	push hl
  292 D1:AB18 D1 -  -  -  	pop de
  293 D1:AB19 13 -  -  -  	inc de
  294 D1:AB1A 0B -  -  -  	dec bc
  295 D1:AB1B CD 48 1D 02 	call _ChkBCIs0
  296 D1:AB1F 28 02 -  -  	jr z, +_
  297 D1:AB21 ED B0 -  -  	ldir
  298 D1:AB23 CD 28 10 02 _:	call _IncFetch
  299 D1:AB27 30 85 -  -  	jr nc, CompileLoop
  300 D1:AB29 -  -  -  -  FindGotos:
  301 D1:AB29 21 E6 EB D1 	ld hl, amountOfEnds
  302 D1:AB2D 7E -  -  -  	ld a, (hl)
  303 D1:AB2E B7 -  -  -  	or a
  304 D1:AB2F 28 02 -  -  	jr z, +_
  305 D1:AB31 35 -  -  -  	dec (hl)
  306 D1:AB32 C9 -  -  -  	ret
  307 D1:AB33 21 EB EB D1 _:	ld hl, AmountOfSubPrograms
  308 D1:AB37 7E -  -  -  	ld a, (hl)
  309 D1:AB38 35 -  -  -  	dec (hl)
  310 D1:AB39 B7 -  -  -  	or a
  311 D1:AB3A C0 -  -  -  	ret nz	
  312 D1:AB3B -  -  -  -  FindGotosLoop:
  313 D1:AB3B 2A D2 EB D1 	ld hl, (gotoPtr)
  314 D1:AB3F 11 BF F9 D0 	ld de, gotoStack
  315 D1:AB43 B7 -  -  -  	or a
  316 D1:AB44 ED 52 -  -  	sbc hl, de
  317 D1:AB46 28 4F -  -  	jr z, AddDataToProgramData												; have we finished all the Goto's?
  318 D1:AB48 19 -  -  -  	add hl, de
  319 D1:AB49 2B -  -  -  	dec hl
  320 D1:AB4A 2B -  -  -  	dec hl
  321 D1:AB4B 2B -  -  -  	dec hl
  322 D1:AB4C E5 -  -  -  	push hl
  323 D1:AB4D ED 27 -  -  		ld hl, (hl)
  324 D1:AB4F EB -  -  -  		ex de, hl															; de = pointer to goto data
  325 D1:AB50 2A CF EB D1 		ld hl, (labelPtr)
  326 D1:AB54 -  -  -  -  FindLabels:
  327 D1:AB54 01 D7 F5 D0 		ld bc, labelStack
  328 D1:AB58 B7 -  -  -  		or a
  329 D1:AB59 ED 42 -  -  		sbc hl, bc
  330 D1:AB5B CA 5D AF D1 		jp z, LabelError													; have we finished all the Lbl's?
  331 D1:AB5F 09 -  -  -  		add hl, bc
  332 D1:AB60 2B -  -  -  		dec hl
  333 D1:AB61 2B -  -  -  		dec hl
  334 D1:AB62 2B -  -  -  		dec hl																; hl = pointer to label
  335 D1:AB63 -  -  -  -  FindLabel:
  336 D1:AB63 E5 -  -  -  		push hl
  337 D1:AB64 D5 -  -  -  			push de
  338 D1:AB65 ED 27 -  -  				ld hl, (hl)													; hl = pointer to label data
  339 D1:AB67 CD 8C AE D1 				call CompareStrings											; is it the right label?
  340 D1:AB6B D1 -  -  -  			pop de
  341 D1:AB6C E1 -  -  -  		pop hl
  342 D1:AB6D 20 22 -  -  		jr nz, LabelNotRightOne
  343 D1:AB6F -  -  -  -  RightLabel:
  344 D1:AB6F 2B -  -  -  		dec hl
  345 D1:AB70 2B -  -  -  		dec hl
  346 D1:AB71 2B -  -  -  		dec hl
  347 D1:AB72 ED 27 -  -  		ld hl, (hl)
  348 D1:AB74 11 81 7C FC 		ld de, UserMem-program
  349 D1:AB78 19 -  -  -  		add hl, de
  350 D1:AB79 EB -  -  -  		ex de, hl															; de points to label memory
  351 D1:AB7A E1 -  -  -  	pop hl																	; hl = pointer to goto
  352 D1:AB7B 2B -  -  -  	dec hl
  353 D1:AB7C 2B -  -  -  	dec hl
  354 D1:AB7D 2B -  -  -  	dec hl
  355 D1:AB7E ED 27 -  -  	ld hl, (hl)																; hl = pointer to jump to
  356 D1:AB80 ED 1F -  -  	ld (hl), de
  357 D1:AB82 2A D2 EB D1 	ld hl, (gotoPtr)
  358 D1:AB86 11 FA FF FF 	ld de, -6
  359 D1:AB8A 19 -  -  -  	add hl, de																; get next Goto
  360 D1:AB8B 22 D2 EB D1 	ld (gotoPtr), hl
  361 D1:AB8F 18 AA -  -  	jr FindGotosLoop
  362 D1:AB91 -  -  -  -  LabelNotRightOne:
  363 D1:AB91 2B -  -  -  		dec hl
  364 D1:AB92 2B -  -  -  		dec hl
  365 D1:AB93 2B -  -  -  		dec hl
  366 D1:AB94 18 BE -  -  		jr FindLabels
  367 D1:AB96 -  -  -  -  StopFindLabels:
  368 D1:AB96 E1 -  -  -  	pop hl
  369 D1:AB97 -  -  -  -  AddDataToProgramData:
  370 D1:AB97 FD CB C0 56 	bit last_token_is_ret, (iy+fExpression1)
  371 D1:AB9B 20 06 -  -  	jr nz, +_
  372 D1:AB9D 3E C9 -  -  	ld a, 0C9h
  373 D1:AB9F CD AE AC D1 	call InsertA															; ret
  374 D1:ABA3 2A DE EB D1 _:	ld hl, (programDataDataPtr)
  375 D1:ABA7 01 FF 18 D1 	ld bc, programDataData
  376 D1:ABAB B7 -  -  -  	or a
  377 D1:ABAC ED 42 -  -  	sbc hl, bc
  378 D1:ABAE E5 -  -  -  	push hl
  379 D1:ABAF C1 -  -  -  	pop bc																	; bc = data length
  380 D1:ABB0 28 3D -  -  	jr z, CreateProgram														; check IF there is data
  381 D1:ABB2 ED 5B C9 EB 
              D1 -  -  -  	ld de, (programPtr)
  382 D1:ABB7 21 FF 18 D1 	ld hl, programDataData
  383 D1:ABBB B7 -  -  -  	or a
  384 D1:ABBC ED 52 -  -  	sbc hl, de
  385 D1:ABBE E5 -  -  -  	push hl
  386 D1:ABBF 19 -  -  -  		add hl, de
  387 D1:ABC0 ED B0 -  -  		ldir																; move the data to the end of the program
  388 D1:ABC2 ED 53 C9 EB 
              D1 -  -  -  		ld (programPtr), de
  389 D1:ABC7 D1 -  -  -  	pop de
  390 D1:ABC8 2A D5 EB D1 	ld hl, (programDataOffsetPtr)
  391 D1:ABCC -  -  -  -  AddDataLoop:																; update all the pointers pointing to data
  392 D1:ABCC 01 A7 FD D0 	ld bc, programDataOffsetStack
  393 D1:ABD0 B7 -  -  -  	or a
  394 D1:ABD1 ED 42 -  -  	sbc hl, bc
  395 D1:ABD3 28 1A -  -  	jr z, CreateProgram														; no more pointers left
  396 D1:ABD5 09 -  -  -  	add hl, bc
  397 D1:ABD6 2B -  -  -  	dec hl
  398 D1:ABD7 2B -  -  -  	dec hl
  399 D1:ABD8 2B -  -  -  	dec hl
  400 D1:ABD9 E5 -  -  -  	push hl
  401 D1:ABDA ED 27 -  -  		ld hl, (hl)															; complicated stuff XD
  402 D1:ABDC E5 -  -  -  		push hl
  403 D1:ABDD ED 27 -  -  			ld hl, (hl)
  404 D1:ABDF B7 -  -  -  			or a
  405 D1:ABE0 ED 52 -  -  			sbc hl, de
  406 D1:ABE2 01 81 7C FC 			ld bc, UserMem-program
  407 D1:ABE6 09 -  -  -  			add hl, bc
  408 D1:ABE7 E5 -  -  -  			push hl
  409 D1:ABE8 C1 -  -  -  			pop bc
  410 D1:ABE9 E1 -  -  -  		pop hl
  411 D1:ABEA ED 0F -  -  		ld (hl), bc															; ld (XXXXXX), hl
  412 D1:ABEC E1 -  -  -  	pop hl
  413 D1:ABED 18 DD -  -  	jr AddDataLoop
  414 D1:ABEF -  -  -  -  CreateProgram:
  415 D1:ABEF 21 EC EB D1 	ld hl, varname
  416 D1:ABF3 CD 20 03 02 	call _Mov9ToOP1
  417 D1:ABF7 CD 0C 05 02 	call _ChkFindSym
  418 D1:ABFB 38 13 -  -  	jr c, ++_
  419 D1:ABFD CD 98 1F 02 	call _ChkInRAM
  420 D1:AC01 30 09 -  -  	jr nc, +_
  421 D1:AC03 CD 48 14 02 	call _Arc_Unarc
  422 D1:AC07 01 05 00 00 	ld bc, 5
  423 D1:AC0B 09 -  -  -  	add hl, bc
  424 D1:AC0C CD 88 05 02 _:	call _DelVar
  425 D1:AC10 2A C9 EB D1 _:	ld hl, (programPtr)
  426 D1:AC14 01 00 2C D5 	ld bc, program
  427 D1:AC18 B7 -  -  -  	or a
  428 D1:AC19 ED 42 -  -  	sbc hl, bc
  429 D1:AC1B E5 -  -  -  	push hl
  430 D1:AC1C 01 11 00 00 		ld bc, 17
  431 D1:AC20 09 -  -  -  		add hl, bc
  432 D1:AC21 E5 -  -  -  		push hl
  433 D1:AC22 CD 1C 05 02 			call _EnoughMem
  434 D1:AC26 21 3F EE D1 			ld hl, NotEnoughMem
  435 D1:AC2A DA 61 AF D1 			jp c, DispFinalString
  436 D1:AC2E E1 -  -  -  		pop hl
  437 D1:AC2F 01 F1 FF FF 		ld bc, -15
  438 D1:AC33 09 -  -  -  		add hl, bc
  439 D1:AC34 CD 34 13 02 		call _CreateProtProg
  440 D1:AC38 C1 -  -  -  	pop bc
  441 D1:AC39 13 -  -  -  	inc de
  442 D1:AC3A 13 -  -  -  	inc de
  443 D1:AC3B 21 00 2C D5 	ld hl, program
  444 D1:AC3F EB -  -  -  	ex de, hl
  445 D1:AC40 36 EF -  -  	ld (hl), tExtTok														; insert header
  446 D1:AC42 23 -  -  -  	inc hl
  447 D1:AC43 36 7B -  -  	ld (hl), tAsm84CeCmp
  448 D1:AC45 23 -  -  -  	inc hl
  449 D1:AC46 EB -  -  -  	ex de, hl
  450 D1:AC47 ED B0 -  -  	ldir																	; insert the program data
  451 D1:AC49 21 79 EC D1 	ld hl, GoodCompileMessage
  452 D1:AC4D FD CB D0 CE 	set good_compilation, (iy+fProgram1)
  453 D1:AC51 C3 61 AF D1 	jp DispFinalString														; DONE :D :D :D
  454 D1:AC55 -  -  -  -  	
  455 D1:AC55 -  -  -  -  #include "routines.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\routines.asm"
    1 D1:AC55 -  -  -  -  InsertBCDEAHL:
    2 D1:AC55 E5 -  -  -  	push hl
    3 D1:AC56 C5 -  -  -  		push bc
    4 D1:AC57 E1 -  -  -  		pop hl
    5 D1:AC58 CD 66 AC D1 		call InsertHL
    6 D1:AC5C EB -  -  -  		ex de, hl
    7 D1:AC5D CD 66 AC D1 		call InsertHL
    8 D1:AC61 E1 -  -  -  	pop hl
    9 D1:AC62 -  -  -  -  InsertAHL:
   10 D1:AC62 CD AE AC D1 	call InsertA
   11 D1:AC66 -  -  -  -  InsertHL:
   12 D1:AC66 D5 -  -  -  	push de
   13 D1:AC67 EB -  -  -  		ex de, hl
   14 D1:AC68 2A C9 EB D1 		ld hl, (programPtr)
   15 D1:AC6C ED 1F -  -  		ld (hl), de
   16 D1:AC6E 23 -  -  -  		inc hl
   17 D1:AC6F 23 -  -  -  		inc hl
   18 D1:AC70 23 -  -  -  		inc hl
   19 D1:AC71 22 C9 EB D1 		ld (programPtr), hl
   20 D1:AC75 D1 -  -  -  	pop de
   21 D1:AC76 C9 -  -  -  	ret
   22 D1:AC77 -  -  -  -  	
   23 D1:AC77 -  -  -  -  InsertCallHL:
   24 D1:AC77 3E CD -  -  	ld a, 0CDh
   25 D1:AC79 18 E7 -  -  	jr InsertAHL
   26 D1:AC7B -  -  -  -  	
   27 D1:AC7B -  -  -  -  InsertHIXC:
   28 D1:AC7B 26 27 -  -  	ld h, 027h
   29 D1:AC7D 06 03 -  -  	ld b, 3
   30 D1:AC7F ED 4C -  -  	mlt bc
   31 D1:AC81 79 -  -  -  	ld a, c
   32 D1:AC82 18 07 -  -  	jr ++_
   33 D1:AC84 -  -  -  -  InsertIXE:
   34 D1:AC84 26 17 -  -  	ld h, 017h
   35 D1:AC86 16 03 -  -  _:	ld d, 3
   36 D1:AC88 ED 5C -  -  	mlt de
   37 D1:AC8A 7B -  -  -  	ld a, e
   38 D1:AC8B 2E DD -  -  _:	ld l, 0DDh
   39 D1:AC8D CD 70 1D 02 	call _SetHLUToA
   40 D1:AC91 18 D3 -  -  	jr InsertHL																; ld hl/de/bc, (ix+*)
   41 D1:AC93 -  -  -  -  InsertIXC:
   42 D1:AC93 26 07 -  -  	ld h, 007h
   43 D1:AC95 18 EF -  -  	jr --_
   44 D1:AC97 -  -  -  -  
   45 D1:AC97 -  -  -  -  InsertBCDEHL:
   46 D1:AC97 E5 -  -  -  	push hl
   47 D1:AC98 C5 -  -  -  		push bc
   48 D1:AC99 E1 -  -  -  		pop hl
   49 D1:AC9A CD 66 AC D1 		call InsertHL
   50 D1:AC9E E1 -  -  -  	pop hl
   51 D1:AC9F 18 04 -  -  	jr InsertDEHL
   52 D1:ACA1 -  -  -  -  InsertADEHL:
   53 D1:ACA1 CD AE AC D1 	call InsertA
   54 D1:ACA5 -  -  -  -  InsertDEHL:
   55 D1:ACA5 EB -  -  -  	ex de, hl
   56 D1:ACA6 CD 66 AC D1 	call InsertHL
   57 D1:ACAA EB -  -  -  	ex de, hl
   58 D1:ACAB 18 B9 -  -  	jr InsertHL
   59 D1:ACAD -  -  -  -  
   60 D1:ACAD -  -  -  -  InsertE:
   61 D1:ACAD 7B -  -  -  	ld a, e
   62 D1:ACAE -  -  -  -  InsertA:
   63 D1:ACAE E5 -  -  -  	push hl
   64 D1:ACAF 2A C9 EB D1 		ld hl, (programPtr)
   65 D1:ACB3 77 -  -  -  		ld (hl), a
   66 D1:ACB4 23 -  -  -  		inc hl
   67 D1:ACB5 22 C9 EB D1 		ld (programPtr), hl
   68 D1:ACB9 E1 -  -  -  	pop hl
   69 D1:ACBA C9 -  -  -  	ret
   70 D1:ACBB -  -  -  -  	
   71 D1:ACBB -  -  -  -  MaybeChangeHLToDE:
   72 D1:ACBB 3A E9 EB D1 	ld a, (ExprOutput)
   73 D1:ACBF B7 -  -  -  	or a
   74 D1:ACC0 C8 -  -  -  	ret z
   75 D1:ACC1 3E EB -  -  _:	ld a, 0EBh
   76 D1:ACC3 C3 AE AC D1 	jp InsertA																; ex de, hl
   77 D1:ACC7 -  -  -  -  	
   78 D1:ACC7 -  -  -  -  MaybeChangeDEToHL:
   79 D1:ACC7 3A E9 EB D1 	ld a, (ExprOutput)
   80 D1:ACCB B7 -  -  -  	or a
   81 D1:ACCC C0 -  -  -  	ret nz
   82 D1:ACCD 18 F2 -  -  	jr -_
   83 D1:ACCF -  -  -  -  	
   84 D1:ACCF -  -  -  -  MaybeChangeDEToHL2:
   85 D1:ACCF 3A EA EB D1 	ld a, (ExprOutput2)
   86 D1:ACD3 B7 -  -  -  	or a
   87 D1:ACD4 C0 -  -  -  	ret nz
   88 D1:ACD5 18 EA -  -  	jr -_
   89 D1:ACD7 -  -  -  -  	
   90 D1:ACD7 -  -  -  -  InsertPushHLDE:
   91 D1:ACD7 3A EA EB D1 	ld a, (ExprOutput2)
   92 D1:ACDB 87 -  -  -  	add a, a
   93 D1:ACDC 87 -  -  -  	add a, a
   94 D1:ACDD 87 -  -  -  	add a, a
   95 D1:ACDE 87 -  -  -  	add a, a
   96 D1:ACDF C6 D5 -  -  	add a, 0D5h
   97 D1:ACE1 CD AE AC D1 	call InsertA															; push hl/de
   98 D1:ACE5 2A C9 EB D1 	ld hl, (programPtr)
   99 D1:ACE9 C9 -  -  -  	ret
  100 D1:ACEA -  -  -  -  	
  101 D1:ACEA -  -  -  -  InsertProgramPtrToDataOffset:
  102 D1:ACEA D5 -  -  -  	push de
  103 D1:ACEB 2A D5 EB D1 		ld hl, (programDataOffsetPtr)
  104 D1:ACEF ED 5B C9 EB 
              D1 -  -  -  		ld de, (programPtr)
  105 D1:ACF4 ED 1F -  -  		ld (hl), de
  106 D1:ACF6 23 -  -  -  		inc hl
  107 D1:ACF7 23 -  -  -  		inc hl
  108 D1:ACF8 23 -  -  -  		inc hl
  109 D1:ACF9 22 D5 EB D1 		ld (programDataOffsetPtr), hl
  110 D1:ACFD D1 -  -  -  	pop de
  111 D1:ACFE C9 -  -  -  	ret
  112 D1:ACFF -  -  -  -  	
  113 D1:ACFF -  -  -  -  GetFunction:
  114 D1:ACFF C5 -  -  -  	push bc
  115 D1:AD00 D5 -  -  -  		push de
  116 D1:AD01 CD 08 AD D1 			call GetRightFunction
  117 D1:AD05 D1 -  -  -  		pop de
  118 D1:AD06 C1 -  -  -  	pop bc
  119 D1:AD07 C9 -  -  -  	ret
  120 D1:AD08 -  -  -  -  	
  121 D1:AD08 -  -  -  -  GetRightFunction:
  122 D1:AD08 05 -  -  -  	dec b
  123 D1:AD09 CA 4F AD D1 	jp z, GetFunctionDE
  124 D1:AD0D 05 -  -  -  	dec b
  125 D1:AD0E 28 04 -  -  	jr z, GetFunctionHL
  126 D1:AD10 C3 B7 AD D1 	jp GetFunctionBC
  127 D1:AD14 -  -  -  -  GetFunctionHL:
  128 D1:AD14 FE AD -  -  	cp tGetKey
  129 D1:AD16 20 12 -  -  	jr nz, +_
  130 D1:AD18 21 4C 01 02 	ld hl, _GetCSC
  131 D1:AD1C CD 77 AC D1 	call InsertCallHL														; call _GetCSC
  132 D1:AD20 3E B7 -  -  	ld a, 0B7h
  133 D1:AD22 21 ED 62 6F 	ld hl, 06F62EDh
  134 D1:AD26 C3 62 AC D1 	jp InsertAHL															; or a \ sbc hl, hl \ ld l, a
  135 D1:AD2A FE AB -  -  _:	cp trand
  136 D1:AD2C 20 19 -  -  	jr nz, +_
  137 D1:AD2E 3E D5 -  -  	ld a, 0D5h
  138 D1:AD30 FD CB C0 76 	bit need_push, (iy+fExpression1)
  139 D1:AD34 C4 AE AC D1 	call nz, InsertA														; push de
  140 D1:AD38 CD 54 AE D1 	call InsertRandRoutine
  141 D1:AD3C FD CB C0 76 	bit need_push, (iy+fExpression1)
  142 D1:AD40 C8 -  -  -  	ret z
  143 D1:AD41 3E D1 -  -  	ld a, 0D1h
  144 D1:AD43 C3 AE AC D1 	jp InsertA																; pop de
  145 D1:AD47 CD F0 AD D1 _:	call InsertKeypadRoutine1
  146 D1:AD4B C3 18 AE D1 	jp InsertKeypadRoutine2
  147 D1:AD4F -  -  -  -  GetFunctionDE:
  148 D1:AD4F FE AD -  -  	cp tGetKey
  149 D1:AD51 20 2D -  -  	jr nz, +_
  150 D1:AD53 3E E5 -  -  	ld a, 0E5h
  151 D1:AD55 FD CB C0 76 	bit need_push, (iy+fExpression1)
  152 D1:AD59 C4 AE AC D1 	call nz, InsertA														; push hl
  153 D1:AD5D 21 4C 01 02 	ld hl, _GetCSC
  154 D1:AD61 CD 77 AC D1 	call InsertCallHL														; call _GetCSC
  155 D1:AD65 FD CB C0 76 	bit need_push, (iy+fExpression1)
  156 D1:AD69 28 06 -  -  	jr z, $+8
  157 D1:AD6B 3E E1 -  -  	ld a, 0E1h
  158 D1:AD6D CD AE AC D1 	call InsertA															; pop hl
  159 D1:AD71 3E 11 -  -  	ld a, 011h
  160 D1:AD73 CD AE AC D1 	call InsertA															; ld de, *
  161 D1:AD77 AF -  -  -  	xor a
  162 D1:AD78 21 00 00 5F 	ld hl, 05F0000h
  163 D1:AD7C C3 62 AC D1 	jp InsertAHL															; ld de, 0 \ ld e, a
  164 D1:AD80 FE AB -  -  _:	cp trand
  165 D1:AD82 20 1F -  -  	jr nz, ++_
  166 D1:AD84 3E E5 -  -  	ld a, 0E5h
  167 D1:AD86 FD CB C0 76 	bit need_push, (iy+fExpression1)
  168 D1:AD8A C4 AE AC D1 	call nz, InsertA														; push hl
  169 D1:AD8E CD 54 AE D1 	call InsertRandRoutine
  170 D1:AD92 3E EB -  -  _:	ld a, 0EBh
  171 D1:AD94 CD AE AC D1 	call InsertA															; ex de, hl
  172 D1:AD98 FD CB C0 76 	bit need_push, (iy+fExpression1)
  173 D1:AD9C C8 -  -  -  	ret z
  174 D1:AD9D 3E E1 -  -  	ld a, 0E1h
  175 D1:AD9F C3 AE AC D1 	jp InsertA																; pop hl
  176 D1:ADA3 CD F0 AD D1 _:	call InsertKeypadRoutine1
  177 D1:ADA7 3E E5 -  -  	ld a, 0E5h
  178 D1:ADA9 FD CB C0 76 	bit need_push, (iy+fExpression1)
  179 D1:ADAD C4 AE AC D1 	call nz, InsertA														; push hl
  180 D1:ADB1 CD 18 AE D1 	call InsertKeypadRoutine2
  181 D1:ADB5 18 DB -  -  	jr --_
  182 D1:ADB7 -  -  -  -  GetFunctionBC:
  183 D1:ADB7 FE AD -  -  	cp tGetKey
  184 D1:ADB9 20 17 -  -  	jr nz, +_
  185 D1:ADBB 21 4C 01 02 	ld hl, _GetCSC
  186 D1:ADBF CD 77 AC D1 	call InsertCallHL														; call _GetCSC
  187 D1:ADC3 3E 01 -  -  	ld a, 001h
  188 D1:ADC5 CD AE AC D1 	call InsertA															; ld bc, *
  189 D1:ADC9 AF -  -  -  	xor a
  190 D1:ADCA 21 00 00 5F 	ld hl, 05F0000h
  191 D1:ADCE C3 62 AC D1 	jp InsertAHL															; ld bc, 0 \ ld e, a
  192 D1:ADD2 FE AB -  -  _:	cp trand
  193 D1:ADD4 20 10 -  -  	jr nz, ++_
  194 D1:ADD6 CD 54 AE D1 	call InsertRandRoutine
  195 D1:ADDA 3E E5 -  -  _:	ld a, 0E5h
  196 D1:ADDC CD AE AC D1 	call InsertA															; push hl
  197 D1:ADE0 3E C1 -  -  	ld a, 0C1h
  198 D1:ADE2 C3 AE AC D1 	jp InsertA																; pop bc
  199 D1:ADE6 CD F0 AD D1 _:	call InsertKeypadRoutine1
  200 D1:ADEA CD 18 AE D1 	call InsertKeypadRoutine2
  201 D1:ADEE 18 EA -  -  	jr --_
  202 D1:ADF0 -  -  -  -  InsertKeypadRoutine1:
  203 D1:ADF0 47 -  -  -  	ld b, a
  204 D1:ADF1 3E 06 -  -  	ld a, 006h
  205 D1:ADF3 CD AE AC D1 	call InsertA															; ld b, *
  206 D1:ADF7 78 -  -  -  	ld a, b
  207 D1:ADF8 3D -  -  -  	dec a
  208 D1:ADF9 0F -  -  -  	rrca
  209 D1:ADFA 0F -  -  -  	rrca
  210 D1:ADFB E6 0E -  -  	and %0001110
  211 D1:ADFD 4F -  -  -  	ld c, a
  212 D1:ADFE 3E 1E -  -  	ld a, 01Eh
  213 D1:AE00 91 -  -  -  	sub c
  214 D1:AE01 CD AE AC D1 	call InsertA															; ld b, X
  215 D1:AE05 3E 0E -  -  	ld a, 00Eh
  216 D1:AE07 CD AE AC D1 	call InsertA															; ld c, *
  217 D1:AE0B 78 -  -  -  	ld a, b
  218 D1:AE0C E6 07 -  -  	and %00000111
  219 D1:AE0E 47 -  -  -  	ld b, a
  220 D1:AE0F AF -  -  -  	xor a
  221 D1:AE10 37 -  -  -  	scf
  222 D1:AE11 17 -  -  -  _:	rla
  223 D1:AE12 10 FD -  -  	djnz -_
  224 D1:AE14 C3 AE AC D1 	jp InsertA																; ld c, X
  225 D1:AE18 -  -  -  -  	
  226 D1:AE18 -  -  -  -  InsertKeypadRoutine2:
  227 D1:AE18 3E CD -  -  	ld a, 0CDh
  228 D1:AE1A CD AE AC D1 	call InsertA															; call *
  229 D1:AE1E CD EA AC D1 	call InsertProgramPtrToDataOffset
  230 D1:AE22 2A 2D EA D0 	ld hl, (KeypadStartData)
  231 D1:AE26 FD CB D0 76 	bit has_already_keypad, (iy+fProgram1)
  232 D1:AE2A C2 66 AC D1 	jp nz, InsertHL															; call XXXXXX
  233 D1:AE2E 2A DE EB D1 	ld hl, (programDataDataPtr)
  234 D1:AE32 22 2D EA D0 	ld (KeypadStartData), hl
  235 D1:AE36 E5 -  -  -  	push hl
  236 D1:AE37 D1 -  -  -  	pop de
  237 D1:AE38 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  238 D1:AE3C CD 66 AC D1 	call InsertHL															; call *
  239 D1:AE40 21 40 F0 D1 	ld hl, KeypadRoutine
  240 D1:AE44 01 14 00 00 	ld bc, KeypadRoutineEnd - KeypadRoutine
  241 D1:AE48 ED B0 -  -  	ldir
  242 D1:AE4A ED 53 DE EB 
              D1 -  -  -  	ld (programDataDataPtr), de
  243 D1:AE4F FD CB D0 F6 	set has_already_keypad, (iy+fProgram1)
  244 D1:AE53 C9 -  -  -  	ret
  245 D1:AE54 -  -  -  -  	
  246 D1:AE54 -  -  -  -  InsertRandRoutine:
  247 D1:AE54 3E CD -  -  	ld a, 0CDh
  248 D1:AE56 CD AE AC D1 	call InsertA															; call *
  249 D1:AE5A CD EA AC D1 	call InsertProgramPtrToDataOffset
  250 D1:AE5E 2A 24 EA D0 	ld hl, (RandStartData)
  251 D1:AE62 FD CB D0 5E 	bit has_already_rand, (iy+fProgram1)
  252 D1:AE66 C2 66 AC D1 	jp nz, InsertHL															; call XXXXXX
  253 D1:AE6A 2A DE EB D1 	ld hl, (programDataDataPtr)
  254 D1:AE6E 22 24 EA D0 	ld (RandStartData), hl
  255 D1:AE72 E5 -  -  -  	push hl
  256 D1:AE73 D1 -  -  -  	pop de
  257 D1:AE74 CD 66 AC D1 	call InsertHL															; call XXXXXX
  258 D1:AE78 21 C4 EF D1 	ld hl, RandRoutine
  259 D1:AE7C 01 36 00 00 	ld bc, RandRoutineEnd - RandRoutine
  260 D1:AE80 ED B0 -  -  	ldir
  261 D1:AE82 ED 53 DE EB 
              D1 -  -  -  	ld (programDataDataPtr), de
  262 D1:AE87 FD CB D0 DE 	set has_already_rand, (iy+fProgram1)
  263 D1:AE8B C9 -  -  -  	ret
  264 D1:AE8C -  -  -  -  	
  265 D1:AE8C -  -  -  -  CompareStrings:
  266 D1:AE8C 1A -  -  -  	ld a, (de)
  267 D1:AE8D BE -  -  -  	cp a, (hl)
  268 D1:AE8E 23 -  -  -  	inc hl
  269 D1:AE8F 13 -  -  -  	inc de
  270 D1:AE90 C0 -  -  -  	ret nz
  271 D1:AE91 FE 3F -  -  	cp tEnter
  272 D1:AE93 20 F7 -  -  	jr nz, CompareStrings
  273 D1:AE95 C9 -  -  -  	ret
  274 D1:AE96 -  -  -  -  	
  275 D1:AE96 -  -  -  -  SubError:
  276 D1:AE96 3E 2D -  -  	ld a, '-'
  277 D1:AE98 18 51 -  -  	jr DispOperatorErrorString
  278 D1:AE9A -  -  -  -  AddError:
  279 D1:AE9A 3E 2B -  -  	ld a, '+'
  280 D1:AE9C 18 4D -  -  	jr DispOperatorErrorString
  281 D1:AE9E -  -  -  -  DivError:
  282 D1:AE9E 3E 2F -  -  	ld a, '/'
  283 D1:AEA0 18 49 -  -  	jr DispOperatorErrorString
  284 D1:AEA2 -  -  -  -  MulError:
  285 D1:AEA2 3E 2A -  -  	ld a, '*'
  286 D1:AEA4 18 45 -  -  	jr DispOperatorErrorString
  287 D1:AEA6 -  -  -  -  	
  288 D1:AEA6 -  -  -  -  GLETError:
  289 D1:AEA6 3A 20 EA D0 	ld a, (tempToken2)
  290 D1:AEAA 4F -  -  -  	ld c, a
  291 D1:AEAB FE 6E -  -  	cp tGE
  292 D1:AEAD 3E 19 -  -  	ld a, 019h
  293 D1:AEAF 28 3A -  -  	jr z, DispOperatorErrorString
  294 D1:AEB1 79 -  -  -  	ld a, c
  295 D1:AEB2 FE 6D -  -  	cp tLE
  296 D1:AEB4 3E 17 -  -  	ld a, 017h
  297 D1:AEB6 28 33 -  -  	jr z, DispOperatorErrorString
  298 D1:AEB8 79 -  -  -  	ld a, c
  299 D1:AEB9 FE 6C -  -  	cp tGT
  300 D1:AEBB 3E 3E -  -  	ld a, '>'
  301 D1:AEBD 28 2C -  -  	jr z, DispOperatorErrorString
  302 D1:AEBF 3E 3C -  -  	ld a, '<'
  303 D1:AEC1 18 28 -  -  	jr DispOperatorErrorString
  304 D1:AEC3 -  -  -  -  
  305 D1:AEC3 -  -  -  -  NEQError:
  306 D1:AEC3 3A 20 EA D0 	ld a, (tempToken2)
  307 D1:AEC7 FE 6A -  -  	cp tEq
  308 D1:AEC9 3E 3D -  -  	ld a, '='
  309 D1:AECB 28 1E -  -  	jr z, DispOperatorErrorString
  310 D1:AECD 3E 18 -  -  	ld a, 018h
  311 D1:AECF 18 1A -  -  	jr DispOperatorErrorString
  312 D1:AED1 -  -  -  -  XORANDError:
  313 D1:AED1 3A 20 EA D0 	ld a, (tempToken2)
  314 D1:AED5 4F -  -  -  	ld c, a
  315 D1:AED6 FE 3C -  -  	cp tOr
  316 D1:AED8 3E 7C -  -  	ld a, '|'
  317 D1:AEDA 28 0F -  -  	jr z, DispOperatorErrorString
  318 D1:AEDC 79 -  -  -  	ld a, c
  319 D1:AEDD FE 3D -  -  	cp tXor
  320 D1:AEDF 3E 5E -  -  	ld a, '^'
  321 D1:AEE1 28 08 -  -  	jr z, DispOperatorErrorString
  322 D1:AEE3 3E 26 -  -  	ld a, '&'
  323 D1:AEE5 18 04 -  -  	jr DispOperatorErrorString
  324 D1:AEE7 -  -  -  -  StoError:
  325 D1:AEE7 3E 1C -  -  	ld a, 01Ch
  326 D1:AEE9 18 00 -  -  	jr DispOperatorErrorString
  327 D1:AEEB -  -  -  -  	
  328 D1:AEEB -  -  -  -  DispOperatorErrorString:
  329 D1:AEEB F5 -  -  -  	push af
  330 D1:AEEC CD 13 B0 D1 		call ClearScreen
  331 D1:AEF0 21 52 EC D1 		ld hl, ErrorMessageStandard
  332 D1:AEF4 CD 4B B0 D1 		call PrintString
  333 D1:AEF8 F1 -  -  -  	pop af
  334 D1:AEF9 CD 56 B7 D1 	call _PrintChar_ASM
  335 D1:AEFD 3E 27 -  -  	ld a, '\''
  336 D1:AEFF CD 56 B7 D1 	call _PrintChar_ASM
  337 D1:AF03 18 66 -  -  	jr ReturnToOS
  338 D1:AF05 -  -  -  -  	
  339 D1:AF05 -  -  -  -  ErrorSyntax:
  340 D1:AF05 21 91 ED D1 	ld hl, SyntaxErrorMessage
  341 D1:AF09 18 56 -  -  	jr DispFinalString
  342 D1:AF0B -  -  -  -  MismatchError:
  343 D1:AF0B 21 FF ED D1 	ld hl, MismatchErrorMessage
  344 D1:AF0F 18 50 -  -  	jr DispFinalString
  345 D1:AF11 -  -  -  -  NoProgramsError:
  346 D1:AF11 21 8F EC D1 	ld hl, NoProgramsMessage
  347 D1:AF15 FD CB D0 CE 	set good_compilation, (iy+fProgram1)
  348 D1:AF19 18 46 -  -  	jr DispFinalString
  349 D1:AF1B -  -  -  -  InvalidTokenError:
  350 D1:AF1B 21 A2 EC D1 	ld hl, InvalidTokenMessage
  351 D1:AF1F 18 40 -  -  	jr DispFinalString
  352 D1:AF21 -  -  -  -  InvalidNameLength:
  353 D1:AF21 21 D7 EC D1 	ld hl, InvalidNameLengthMessage
  354 D1:AF25 18 3A -  -  	jr DispFinalString
  355 D1:AF27 -  -  -  -  ErrorNotFound:
  356 D1:AF27 21 52 ED D1 	ld hl, NotFoundMessage
  357 D1:AF2B 18 34 -  -  	jr DispFinalString
  358 D1:AF2D -  -  -  -  ErrorUsedCode:
  359 D1:AF2D 21 C6 ED D1 	ld hl, UsedCodeMessage
  360 D1:AF31 18 2E -  -  	jr DispFinalString
  361 D1:AF33 -  -  -  -  SameNameError:
  362 D1:AF33 21 EE EC D1 	ld hl, SameNameMessage
  363 D1:AF37 18 28 -  -  	jr DispFinalString
  364 D1:AF39 -  -  -  -  FunctionError:
  365 D1:AF39 21 2A ED D1 	ld hl, FunctionFunctionMessage
  366 D1:AF3D 18 22 -  -  	jr DispFinalString
  367 D1:AF3F -  -  -  -  UnknownError:
  368 D1:AF3F 21 17 EE D1 	ld hl, UnknownMessage
  369 D1:AF43 18 1C -  -  	jr DispFinalString
  370 D1:AF45 -  -  -  -  WrongSpriteDataError:
  371 D1:AF45 21 15 ED D1 	ld hl, WrongSpriteDataMessgae
  372 D1:AF49 18 16 -  -  	jr DispFinalString
  373 D1:AF4B -  -  -  -  ImplementError:
  374 D1:AF4B 21 65 ED D1 	ld hl, ImplementMessage
  375 D1:AF4F 18 10 -  -  	jr DispFinalString
  376 D1:AF51 -  -  -  -  EndError:
  377 D1:AF51 21 6A EC D1 	ld hl, EndErrorMessage
  378 D1:AF55 18 0A -  -  	jr DispFinalString
  379 D1:AF57 -  -  -  -  ErrorTooLargeLoop:
  380 D1:AF57 21 AC ED D1 	ld hl, TooLargeLoopMessage
  381 D1:AF5B 18 04 -  -  	jr DispFinalString
  382 D1:AF5D -  -  -  -  LabelError:
  383 D1:AF5D 21 54 EE D1 	ld hl, LabelErrorMessage
  384 D1:AF61 -  -  -  -  	
  385 D1:AF61 -  -  -  -  DispFinalString:
  386 D1:AF61 E5 -  -  -  	push hl
  387 D1:AF62 CD 13 B0 D1 		call ClearScreen
  388 D1:AF66 E1 -  -  -  	pop hl
  389 D1:AF67 CD 4B B0 D1 	call PrintString
  390 D1:AF6B -  -  -  -  ReturnToOS:
  391 D1:AF6B FD CB D0 4E 	bit good_compilation, (iy+fProgram1)
  392 D1:AF6F 20 57 -  -  	jr nz, SkipDisplayLineNumber
  393 D1:AF71 3E 15 -  -  	ld a, 21
  394 D1:AF73 32 89 B7 D1 	ld (TextYPos_ASM), a
  395 D1:AF77 21 01 00 00 	ld hl, 1
  396 D1:AF7B 22 58 B7 D1 	ld (TextXPos_ASM), hl
  397 D1:AF7F 21 F0 ED D1 	ld hl, LineNumber
  398 D1:AF83 CD 4B B0 D1 	call PrintString
  399 D1:AF87 2A 1A 23 D0 	ld hl, (curPC)
  400 D1:AF8B ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  401 D1:AF90 B7 -  -  -  	or a
  402 D1:AF91 ED 52 -  -  	sbc hl, de
  403 D1:AF93 E5 -  -  -  	push hl
  404 D1:AF94 C1 -  -  -  	pop bc
  405 D1:AF95 ED 62 -  -  	sbc hl, hl
  406 D1:AF97 23 -  -  -  	inc hl
  407 D1:AF98 EB -  -  -  	ex de, hl
  408 D1:AF99 -  -  -  -  GetAmountOfLines:
  409 D1:AF99 78 -  -  -  	ld a, b
  410 D1:AF9A B1 -  -  -  	or c
  411 D1:AF9B 28 09 -  -  	jr z, +_
  412 D1:AF9D 3E 3F -  -  	ld a, tEnter
  413 D1:AF9F ED B1 -  -  	cpir
  414 D1:AFA1 20 03 -  -  	jr nz, +_
  415 D1:AFA3 13 -  -  -  	inc de
  416 D1:AFA4 18 F3 -  -  	jr GetAmountOfLines
  417 D1:AFA6 EB -  -  -  _:	ex de, hl
  418 D1:AFA7 AF -  -  -  	xor a
  419 D1:AFA8 11 18 06 D0 	ld de, OP3+10
  420 D1:AFAC 12 -  -  -  	ld (de), a
  421 D1:AFAD 1B -  -  -  	dec de
  422 D1:AFAE 06 08 -  -  	ld b, 8
  423 D1:AFB0 3E 0A -  -  	ld a, 10
  424 D1:AFB2 CD 90 1D 02 _:	call _DivHLByA
  425 D1:AFB6 C6 30 -  -  	add a, t0
  426 D1:AFB8 12 -  -  -  	ld (de), a
  427 D1:AFB9 1B -  -  -  	dec de
  428 D1:AFBA 19 -  -  -  	add hl, de
  429 D1:AFBB B7 -  -  -  	or a
  430 D1:AFBC ED 52 -  -  	sbc hl, de
  431 D1:AFBE 28 02 -  -  	jr z, +_
  432 D1:AFC0 10 F0 -  -  	djnz -_
  433 D1:AFC2 EB -  -  -  _:	ex de, hl
  434 D1:AFC3 23 -  -  -  	inc hl
  435 D1:AFC4 CD 4B B0 D1 	call PrintString
  436 D1:AFC8 -  -  -  -  SkipDisplayLineNumber:
  437 D1:AFC8 3E E6 -  -  	ld a, 230
  438 D1:AFCA 32 89 B7 D1 	ld (TextYPos_ASM), a
  439 D1:AFCE 21 55 00 00 	ld hl, 85
  440 D1:AFD2 22 58 B7 D1 	ld (TextXPos_ASM), hl
  441 D1:AFD6 21 AD EE D1 	ld hl, PressKey
  442 D1:AFDA CD 4B B0 D1 	call PrintString
  443 D1:AFDE CD 4C 01 02 _:	call _GetCSC
  444 D1:AFE2 B7 -  -  -  	or a
  445 D1:AFE3 28 F9 -  -  	jr z, -_
  446 D1:AFE5 -  -  -  -  StopProgram:
  447 D1:AFE5 -  -  -  -  backupSP = $+1
  448 D1:AFE5 31 00 00 00 	ld sp, 0
  449 D1:AFE9 -  -  -  -  backupBegPC = $+1
  450 D1:AFE9 21 00 00 00 	ld hl, 0
  451 D1:AFED 22 17 23 D0 	ld (begPC), hl
  452 D1:AFF1 -  -  -  -  backupCurPC = $+1
  453 D1:AFF1 21 00 00 00 	ld hl, 0
  454 D1:AFF5 22 1A 23 D0 	ld (curPC), hl
  455 D1:AFF9 -  -  -  -  backupEndPC = $+1
  456 D1:AFF9 21 00 00 00 	ld hl, 0
  457 D1:AFFD 22 1D 23 D0 	ld (endPC), hl
  458 D1:B001 3E 2D -  -  	ld a, lcdBpp16
  459 D1:B003 32 18 00 E3 	ld (mpLcdCtrl), a
  460 D1:B007 CD 08 08 02 	call _ClrLCDFull
  461 D1:B00B CD 28 08 02 	call _HomeUp
  462 D1:B00F C3 3C 1A 02 	jp _DrawStatusBar
  463 D1:B013 -  -  -  -  	
  464 D1:B013 -  -  -  -  ClearScreen:
  465 D1:B013 21 00 0F D4 	ld hl, vRAM+(320*12)
  466 D1:B017 36 FF -  -  	ld (hl), 255
  467 D1:B019 E5 -  -  -  	push hl
  468 D1:B01A D1 -  -  -  	pop de
  469 D1:B01B 13 -  -  -  	inc de
  470 D1:B01C 01 FF 1C 01 	ld bc, 320*228-1
  471 D1:B020 ED B0 -  -  	ldir
  472 D1:B022 21 01 00 00 	ld hl, 1
  473 D1:B026 22 58 B7 D1 	ld (TextXPos_ASM), hl
  474 D1:B02A 3E 0C -  -  	ld a, 12
  475 D1:B02C 32 89 B7 D1 	ld (TextYPos_ASM), a
  476 D1:B030 AF -  -  -  	xor a
  477 D1:B031 32 AE B7 D1 	ld (color), a
  478 D1:B035 C9 -  -  -  	ret
  479 D1:B036 -  -  -  -  	
  480 D1:B036 -  -  -  -  PrintCompilingProgram:
  481 D1:B036 AF -  -  -  	xor a
  482 D1:B037 32 01 06 D0 	ld (OP1+9), a
  483 D1:B03B CD 13 B0 D1 	call ClearScreen
  484 D1:B03F 21 6F EE D1 	ld hl, StartParseMessage
  485 D1:B043 CD 4B B0 D1 	call PrintString
  486 D1:B047 21 F9 05 D0 	ld hl, OP1+1
  487 D1:B04B -  -  -  -  	
  488 D1:B04B -  -  -  -  PrintString:
  489 D1:B04B 7E -  -  -  	ld a, (hl)
  490 D1:B04C 23 -  -  -  	inc hl
  491 D1:B04D B7 -  -  -  	or a
  492 D1:B04E C4 56 B7 D1 	call nz, _PrintChar_ASM
  493 D1:B052 20 F7 -  -  	jr nz, PrintString
  494 D1:B054 C9 -  -  -  	ret
  495 D1:B055 -  -  -  -  	
  496 D1:B055 -  -  -  -  PreScanPrograms:
  497 D1:B055 2A 1D 23 D0 	ld hl, (endPC)
  498 D1:B059 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  499 D1:B05E B7 -  -  -  	or a
  500 D1:B05F ED 52 -  -  	sbc hl, de
  501 D1:B061 23 -  -  -  	inc hl
  502 D1:B062 E5 -  -  -  	push hl
  503 D1:B063 C1 -  -  -  	pop bc
  504 D1:B064 2A 1A 23 D0 	ld hl, (curPC)
  505 D1:B068 -  -  -  -  ScanLoop:
  506 D1:B068 78 -  -  -  	ld a, b
  507 D1:B069 B1 -  -  -  	or c
  508 D1:B06A C8 -  -  -  	ret z
  509 D1:B06B 3E 3F -  -  	ld a, tEnter
  510 D1:B06D ED B1 -  -  	cpir
  511 D1:B06F C0 -  -  -  	ret nz
  512 D1:B070 7E -  -  -  	ld a, (hl)
  513 D1:B071 FE B3 -  -  	cp tDet
  514 D1:B073 28 20 -  -  	jr z, ScanFoundDet
  515 D1:B075 FE D8 -  -  	cp tPause
  516 D1:B077 28 11 -  -  	jr z, ScanFoundPause
  517 D1:B079 FE DC -  -  	cp tInput
  518 D1:B07B 28 02 -  -  	jr z, ScanFoundInput
  519 D1:B07D 18 E9 -  -  	jr ScanLoop
  520 D1:B07F -  -  -  -  ScanFoundInput:
  521 D1:B07F 3A E7 EB D1 	ld a, (amountOfInput)
  522 D1:B083 3C -  -  -  	inc a
  523 D1:B084 32 E7 EB D1 	ld (amountOfInput), a
  524 D1:B088 18 DE -  -  	jr ScanLoop
  525 D1:B08A -  -  -  -  ScanFoundPause:
  526 D1:B08A 3A E8 EB D1 	ld a, (amountOfPause)
  527 D1:B08E 3C -  -  -  	inc a
  528 D1:B08F 32 E8 EB D1 	ld (amountOfPause), a
  529 D1:B093 18 D3 -  -  	jr ScanLoop
  530 D1:B095 -  -  -  -  ScanFoundDet:
  531 D1:B095 23 -  -  -  	inc hl
  532 D1:B096 7E -  -  -  	ld a, (hl)
  533 D1:B097 D6 30 -  -  	sub t0
  534 D1:B099 38 CD -  -  	jr c, ScanLoop
  535 D1:B09B FE 0A -  -  	cp t9-t0+1
  536 D1:B09D 30 C9 -  -  	jr nc, ScanLoop
  537 D1:B09F 11 00 00 00 	ld de, 0
  538 D1:B0A3 5F -  -  -  	ld e, a
  539 D1:B0A4 23 -  -  -  	inc hl
  540 D1:B0A5 0B -  -  -  	dec bc
  541 D1:B0A6 78 -  -  -  	ld a, b
  542 D1:B0A7 B1 -  -  -  	or c
  543 D1:B0A8 28 21 -  -  	jr z, FoundRightCFunction
  544 D1:B0AA 7E -  -  -  	ld a, (hl)
  545 D1:B0AB FE 2B -  -  	cp tComma
  546 D1:B0AD 28 1C -  -  	jr z, FoundRightCFunction
  547 D1:B0AF FE 3F -  -  	cp tEnter
  548 D1:B0B1 28 18 -  -  	jr z, FoundRightCFunction
  549 D1:B0B3 D6 30 -  -  	sub t0
  550 D1:B0B5 38 14 -  -  	jr c, FoundRightCFunction
  551 D1:B0B7 FE 0A -  -  	cp t9-t0+1
  552 D1:B0B9 30 10 -  -  	jr nc, FoundRightCFunction
  553 D1:B0BB E5 -  -  -  	push hl
  554 D1:B0BC EB -  -  -  		ex de, hl
  555 D1:B0BD 29 -  -  -  		add hl, hl
  556 D1:B0BE E5 -  -  -  		push hl
  557 D1:B0BF D1 -  -  -  		pop de
  558 D1:B0C0 29 -  -  -  		add hl, hl
  559 D1:B0C1 29 -  -  -  		add hl, hl
  560 D1:B0C2 19 -  -  -  		add hl, de
  561 D1:B0C3 11 00 00 00 		ld de, 0
  562 D1:B0C7 5F -  -  -  		ld e, a
  563 D1:B0C8 19 -  -  -  		add hl, de
  564 D1:B0C9 EB -  -  -  		ex de, hl
  565 D1:B0CA E1 -  -  -  	pop hl
  566 D1:B0CB -  -  -  -  FoundRightCFunction:
  567 D1:B0CB E5 -  -  -  	push hl
  568 D1:B0CC EB -  -  -  		ex de, hl
  569 D1:B0CD 11 4F 00 00 		ld de, AMOUNT_OF_C_FUNCTIONS
  570 D1:B0D1 B7 -  -  -  		or a
  571 D1:B0D2 ED 52 -  -  		sbc hl, de
  572 D1:B0D4 30 1F -  -  		jr nc,  WrongCFunction
  573 D1:B0D6 19 -  -  -  		add hl, de
  574 D1:B0D7 EB -  -  -  		ex de, hl
  575 D1:B0D8 21 F5 EB D1 		ld hl, usedCroutines
  576 D1:B0DC 19 -  -  -  		add hl, de
  577 D1:B0DD 7E -  -  -  		ld a, (hl)
  578 D1:B0DE B7 -  -  -  		or a
  579 D1:B0DF 20 14 -  -  		jr nz, FunctionAlreadyInProgram
  580 D1:B0E1 -  -  -  -  AddCFunctionToProgram:
  581 D1:B0E1 3A E5 EB D1 		ld a, (amountOfCRoutines)
  582 D1:B0E5 3C -  -  -  		inc a
  583 D1:B0E6 77 -  -  -  		ld (hl), a
  584 D1:B0E7 32 E5 EB D1 		ld (amountOfCRoutines), a
  585 D1:B0EB 3E C3 -  -  		ld a, 0C3h
  586 D1:B0ED D5 -  -  -  		push de
  587 D1:B0EE E1 -  -  -  		pop hl
  588 D1:B0EF 29 -  -  -  		add hl, hl
  589 D1:B0F0 19 -  -  -  		add hl, de
  590 D1:B0F1 CD 62 AC D1 		call InsertAHL																; jp *
  591 D1:B0F5 -  -  -  -  FunctionAlreadyInProgram:
  592 D1:B0F5 -  -  -  -  WrongCFunction:
  593 D1:B0F5 E1 -  -  -  	pop hl
  594 D1:B0F6 C3 68 B0 D1 	jp ScanLoop
  595 D1:B0FA -  -  -  -  
  596 D1:B0FA -  -  -  -  GetSpriteData:
  597 D1:B0FA B7 -  -  -  	or a
  598 D1:B0FB ED 52 -  -  	sbc hl, de
  599 D1:B0FD C8 -  -  -  	ret z
  600 D1:B0FE 19 -  -  -  	add hl, de
  601 D1:B0FF 1A -  -  -  	ld a, (de)
  602 D1:B100 D6 30 -  -  	sub t0
  603 D1:B102 DA 45 AF D1 	jp c, WrongSpriteDataError
  604 D1:B106 FE 11 -  -  	cp tA-t0
  605 D1:B108 38 0A -  -  	jr c, +_
  606 D1:B10A D6 11 -  -  	sub tA-t0
  607 D1:B10C FE 06 -  -  	cp tG-tA
  608 D1:B10E D2 45 AF D1 	jp nc, WrongSpriteDataError
  609 D1:B112 C6 0A -  -  	add a, 10
  610 D1:B114 87 -  -  -  _:	add a, a
  611 D1:B115 87 -  -  -  	add a, a
  612 D1:B116 87 -  -  -  	add a, a
  613 D1:B117 87 -  -  -  	add a, a
  614 D1:B118 DD 67 -  -  	ld ixh, a
  615 D1:B11A 13 -  -  -  	inc de
  616 D1:B11B B7 -  -  -  	or a
  617 D1:B11C ED 52 -  -  	sbc hl, de
  618 D1:B11E CA 05 AF D1 	jp z, ErrorSyntax
  619 D1:B122 19 -  -  -  	add hl, de
  620 D1:B123 1A -  -  -  	ld a, (de)
  621 D1:B124 D6 30 -  -  	sub t0
  622 D1:B126 DA 45 AF D1 	jp c, WrongSpriteDataError
  623 D1:B12A FE 11 -  -  	cp tA-t0
  624 D1:B12C 38 0A -  -  	jr c, +_
  625 D1:B12E D6 11 -  -  	sub tA-t0
  626 D1:B130 FE 06 -  -  	cp tG-tA
  627 D1:B132 D2 45 AF D1 	jp nc, WrongSpriteDataError
  628 D1:B136 C6 0A -  -  	add a, 10
  629 D1:B138 DD B4 -  -  _:	or a, ixh
  630 D1:B13A 02 -  -  -  	ld (bc), a
  631 D1:B13B 03 -  -  -  	inc bc
  632 D1:B13C 13 -  -  -  	inc de
  633 D1:B13D 18 BB -  -  	jr GetSpriteData
  634 D1:B13F -  -  -  -  	
  635 D1:B13F -  -  -  -  UpdateSpritePointers:
  636 D1:B13F 2A DB EB D1 	ld hl, (tempListsPtr)
  637 D1:B143 11 5F 09 D1 	ld de, tempListsStack
  638 D1:B147 B7 -  -  -  	or a
  639 D1:B148 ED 52 -  -  	sbc hl, de
  640 D1:B14A 22 59 B1 D1 	ld (UpdateOffset), hl
  641 D1:B14E EB -  -  -  	ex de, hl
  642 D1:B14F D5 -  -  -  	push de
  643 D1:B150 C1 -  -  -  	pop bc
  644 D1:B151 78 -  -  -  _:	ld a, b
  645 D1:B152 B1 -  -  -  	or c
  646 D1:B153 28 14 -  -  	jr z, +_
  647 D1:B155 E5 -  -  -  	push hl
  648 D1:B156 ED 27 -  -  		ld hl, (hl)
  649 D1:B158 -  -  -  -  UpdateOffset = $+1
  650 D1:B158 11 00 00 00 		ld de, 0
  651 D1:B15C 19 -  -  -  		add hl, de
  652 D1:B15D EB -  -  -  		ex de, hl
  653 D1:B15E E1 -  -  -  	pop hl
  654 D1:B15F ED 1F -  -  	ld (hl), de
  655 D1:B161 23 -  -  -  	inc hl
  656 D1:B162 23 -  -  -  	inc hl
  657 D1:B163 23 -  -  -  	inc hl
  658 D1:B164 0B -  -  -  	dec bc
  659 D1:B165 0B -  -  -  	dec bc
  660 D1:B166 0B -  -  -  	dec bc
  661 D1:B167 18 E8 -  -  	jr -_
  662 D1:B169 21 2F 11 D1 _:	ld hl, spriteStack
  663 D1:B16D ED 4B 59 B1 
              D1 -  -  -  	ld bc, (UpdateOffset)
  664 D1:B172 78 -  -  -  _:	ld a, b
  665 D1:B173 B1 -  -  -  	or c
  666 D1:B174 28 15 -  -  	jr z, +_
  667 D1:B176 E5 -  -  -  	push hl
  668 D1:B177 ED 27 -  -  		ld hl, (hl)
  669 D1:B179 ED 5B 59 B1 
              D1 -  -  -  		ld de, (UpdateOffset)
  670 D1:B17E 19 -  -  -  		add hl, de
  671 D1:B17F EB -  -  -  		ex de, hl
  672 D1:B180 E1 -  -  -  	pop hl
  673 D1:B181 ED 1F -  -  	ld (hl), de
  674 D1:B183 23 -  -  -  	inc hl
  675 D1:B184 23 -  -  -  	inc hl
  676 D1:B185 23 -  -  -  	inc hl
  677 D1:B186 0B -  -  -  	dec bc
  678 D1:B187 0B -  -  -  	dec bc
  679 D1:B188 0B -  -  -  	dec bc
  680 D1:B189 18 E7 -  -  	jr -_
  681 D1:B18B 2A DE EB D1 _:	ld hl, (programDataDataPtr)
  682 D1:B18F E5 -  -  -  	push hl
  683 D1:B190 11 FF 18 D1 		ld de, programDataData
  684 D1:B194 ED 52 -  -  		sbc hl, de
  685 D1:B196 E5 -  -  -  		push hl
  686 D1:B197 C1 -  -  -  		pop bc
  687 D1:B198 E1 -  -  -  	pop hl
  688 D1:B199 E5 -  -  -  	push hl
  689 D1:B19A ED 5B 59 B1 
              D1 -  -  -  		ld de, (UpdateOffset)
  690 D1:B19F 19 -  -  -  		add hl, de
  691 D1:B1A0 22 DE EB D1 		ld (programDataDataPtr), hl
  692 D1:B1A4 D1 -  -  -  	pop de
  693 D1:B1A5 2B -  -  -  	dec hl
  694 D1:B1A6 EB -  -  -  	ex de, hl
  695 D1:B1A7 2B -  -  -  	dec hl
  696 D1:B1A8 ED B8 -  -  	lddr
  697 D1:B1AA ED 4B 59 B1 
              D1 -  -  -  	ld bc, (UpdateOffset)
  698 D1:B1AF 2A DB EB D1 	ld hl, (tempListsPtr)
  699 D1:B1B3 2B -  -  -  	dec hl
  700 D1:B1B4 ED B8 -  -  	lddr
  701 D1:B1B6 21 5F 09 D1 	ld hl, tempListsStack
  702 D1:B1BA 22 DB EB D1 	ld (tempListsPtr), hl
  703 D1:B1BE C9 -  -  -  	ret
Listing for file "ICE.asm"
  456 D1:B1BF -  -  -  -  #include "parse.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
    1 D1:B1BF -  -  -  -  ParseLine:
    2 D1:B1BF CD 2C 10 02 	call _CurFetch
    3 D1:B1C3 FE 3F -  -  	cp tEnter
    4 D1:B1C5 C8 -  -  -  	ret z
    5 D1:B1C6 21 4B EA D1 	ld hl, FunctionsSingle
    6 D1:B1CA 01 0E 00 00 	ld bc, FunctionsSingleEnd - FunctionsSingle
    7 D1:B1CE ED B1 -  -  	cpir
    8 D1:B1D0 20 2F -  -  	jr nz, ParseExpression2
    9 D1:B1D2 FE 62 -  -  	cp tVarOut
   10 D1:B1D4 28 10 -  -  	jr z, +_
   11 D1:B1D6 FE 2C -  -  	cp tii
   12 D1:B1D8 28 0C -  -  	jr z, +_
   13 D1:B1DA FD CB D0 7E 	bit used_code, (iy+fProgram1)
   14 D1:B1DE FD CB D0 FE 	set used_code, (iy+fProgram1)
   15 D1:B1E2 CC 3F B1 D1 	call z, UpdateSpritePointers
   16 D1:B1E6 3A E3 EB D1 _:	ld a, (openedParensF)
   17 D1:B1EA B7 -  -  -  	or a
   18 D1:B1EB C2 39 AF D1 	jp nz, FunctionError
   19 D1:B1EF FD 77 B0 -  	ld (iy+fFunction1), a
   20 D1:B1F2 FD 77 AF -  	ld (iy+fFunction2), a
   21 D1:B1F5 06 03 -  -  	ld b, 3
   22 D1:B1F7 ED 4C -  -  	mlt bc
   23 D1:B1F9 21 59 EA D1 	ld hl, FunctionsSingleStart
   24 D1:B1FD 09 -  -  -  	add hl, bc
   25 D1:B1FE ED 27 -  -  	ld hl, (hl)
   26 D1:B200 E9 -  -  -  	jp (hl)
   27 D1:B201 -  -  -  -  	
   28 D1:B201 -  -  -  -  ParseExpression2:
   29 D1:B201 FD CB D0 7E 	bit used_code, (iy+fProgram1)
   30 D1:B205 FD CB D0 FE 	set used_code, (iy+fProgram1)
   31 D1:B209 F5 -  -  -  	push af
   32 D1:B20A CC 3F B1 D1 		call z, UpdateSpritePointers
   33 D1:B20E F1 -  -  -  	pop af
   34 D1:B20F -  -  -  -  ParseExpression:
   35 D1:B20F 21 83 EA D0 	ld hl, stack
   36 D1:B213 22 C3 EB D1 	ld (stackPtr), hl
   37 D1:B217 21 6B EE D0 	ld hl, output
   38 D1:B21B 22 C6 EB D1 	ld (outputPtr), hl
   39 D1:B21F 21 E2 EB D1 	ld hl, openedParensE
   40 D1:B223 36 00 -  -  	ld (hl), 0
   41 D1:B225 FD 36 C0 00 	ld (iy+fExpression1), 0
   42 D1:B229 FD 36 BF 00 	ld (iy+fExpression2), 0
   43 D1:B22D -  -  -  -  MainLoopResCarryFlag:
   44 D1:B22D B7 -  -  -  	or a	
   45 D1:B22E -  -  -  -  MainLoop:
   46 D1:B22E 32 1F EA D0 	ld (tempToken), a
   47 D1:B232 DA AC B5 D1 	jp c, StopParsing
   48 D1:B236 FE 30 -  -  	cp t0
   49 D1:B238 38 45 -  -  	jr c, NotANumber
   50 D1:B23A FE 3A -  -  	cp t9+1
   51 D1:B23C 30 41 -  -  	jr nc, NotANumber
   52 D1:B23E -  -  -  -  ANumber:
   53 D1:B23E -  -  -  -  #include "number.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\number.asm"
    1 D1:B23E 2A C6 EB D1 	ld hl, (outputPtr)
    2 D1:B242 FD CB C0 46 	bit prev_is_number, (iy+fExpression1)
    3 D1:B246 FD CB C0 C6 	set prev_is_number, (iy+fExpression1)
    4 D1:B24A 28 1A -  -  	jr z, AddNumberToStack
    5 D1:B24C -  -  -  -  ChangeLastNumberFromStack:
    6 D1:B24C 2B -  -  -  	dec hl
    7 D1:B24D 2B -  -  -  	dec hl
    8 D1:B24E 2B -  -  -  	dec hl
    9 D1:B24F E5 -  -  -  	push hl
   10 D1:B250 ED 27 -  -  		ld hl, (hl)
   11 D1:B252 29 -  -  -  		add hl, hl											; HL * 10
   12 D1:B253 E5 -  -  -  		push hl
   13 D1:B254 D1 -  -  -  		pop de
   14 D1:B255 29 -  -  -  		add hl, hl
   15 D1:B256 29 -  -  -  		add hl, hl
   16 D1:B257 19 -  -  -  		add hl, de
   17 D1:B258 D6 30 -  -  		sub a, t0											; HL + <number>
   18 D1:B25A 11 00 00 00 		ld de, 0
   19 D1:B25E 5F -  -  -  		ld e, a
   20 D1:B25F 19 -  -  -  		add hl, de
   21 D1:B260 D1 -  -  -  	pop de
   22 D1:B261 EB -  -  -  	ex de, hl
   23 D1:B262 ED 1F -  -  	ld (hl), de
   24 D1:B264 18 13 -  -  	jr NumberStop
   25 D1:B266 -  -  -  -  AddNumberToStack:
   26 D1:B266 36 00 -  -  	ld (hl), typeNumber
   27 D1:B268 23 -  -  -  	inc hl
   28 D1:B269 D6 30 -  -  	sub a, t0												; new number
   29 D1:B26B -  -  -  -  InsertAndUpdatePointer
   30 D1:B26B 11 00 00 00 	ld de, 0
   31 D1:B26F 5F -  -  -  	ld e, a
   32 D1:B270 ED 1F -  -  	ld (hl), de
   33 D1:B272 -  -  -  -  UpdatePointer:
   34 D1:B272 23 -  -  -  	inc hl
   35 D1:B273 23 -  -  -  	inc hl
   36 D1:B274 23 -  -  -  	inc hl
   37 D1:B275 22 C6 EB D1 	ld (outputPtr), hl
   38 D1:B279 -  -  -  -  NumberStop:
   39 D1:B279 CD 28 10 02 	call _IncFetch
   40 D1:B27D 18 AF -  -  	jr MainLoop
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
   54 D1:B27F -  -  -  -  
   55 D1:B27F -  -  -  -  NotANumber:
   56 D1:B27F FD CB C0 86 	res prev_is_number, (iy+fExpression1)
   57 D1:B283 FE 41 -  -  	cp tA
   58 D1:B285 38 0F -  -  	jr c, NotAVariable
   59 D1:B287 FE 5C -  -  	cp ttheta+1
   60 D1:B289 30 0B -  -  	jr nc, NotAVariable
   61 D1:B28B -  -  -  -  AVariable:
   62 D1:B28B 2A C6 EB D1 	ld hl, (outputPtr)
   63 D1:B28F 36 01 -  -  	ld (hl), typeVariable
   64 D1:B291 23 -  -  -  	inc hl
   65 D1:B292 D6 41 -  -  	sub a, tA
   66 D1:B294 18 D5 -  -  	jr InsertAndUpdatePointer
   67 D1:B296 -  -  -  -  NotAVariable:
   68 D1:B296 21 17 EA D1 	ld hl, operators_booleans
   69 D1:B29A 01 0F 00 00 	ld bc, 15
   70 D1:B29E ED B1 -  -  	cpir
   71 D1:B2A0 20 75 -  -  	jr nz, NotABoolean
   72 D1:B2A2 -  -  -  -  ABoolean:
   73 D1:B2A2 -  -  -  -  #include "operator.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operator.asm"
    1 D1:B2A2 21 5D EB D1 	ld hl, precedence
    2 D1:B2A6 09 -  -  -  	add hl, bc
    3 D1:B2A7 5E -  -  -  	ld e, (hl)										; e = precedence of current token
    4 D1:B2A8 FE 04 -  -  	cp tStore
    5 D1:B2AA CC 21 B7 D1 	call z, MoveStackEntryToOutput
    6 D1:B2AE -  -  -  -  CheckOperator:
    7 D1:B2AE 2A C3 EB D1 	ld hl, (stackPtr)
    8 D1:B2B2 01 83 EA D0 	ld bc, stack
    9 D1:B2B6 B7 -  -  -  	or a
   10 D1:B2B7 ED 42 -  -  	sbc hl, bc
   11 D1:B2B9 28 41 -  -  	jr z, InsertBoolean
   12 D1:B2BB 09 -  -  -  	add hl, bc
   13 D1:B2BC 2B -  -  -  	dec hl
   14 D1:B2BD 2B -  -  -  	dec hl
   15 D1:B2BE 2B -  -  -  	dec hl
   16 D1:B2BF 2B -  -  -  	dec hl
   17 D1:B2C0 7E -  -  -  	ld a, (hl)
   18 D1:B2C1 FE 1F -  -  	cp typeOperator
   19 D1:B2C3 20 37 -  -  	jr nz, InsertBoolean
   20 D1:B2C5 23 -  -  -  	inc hl
   21 D1:B2C6 7E -  -  -  	ld a, (hl)
   22 D1:B2C7 21 17 EA D1 	ld hl, operators_booleans
   23 D1:B2CB 01 0F 00 00 	ld bc, 15
   24 D1:B2CF ED B1 -  -  	cpir
   25 D1:B2D1 21 6C EB D1 	ld hl, precedence2
   26 D1:B2D5 09 -  -  -  	add hl, bc
   27 D1:B2D6 7E -  -  -  	ld a, (hl)										; a = precedence of last token on stack
   28 D1:B2D7 BB -  -  -  	cp a, e											; if a <= e then move
   29 D1:B2D8 38 22 -  -  	jr c, InsertBoolean
   30 D1:B2DA -  -  -  -  MoveBooleanFromStackToOutput:
   31 D1:B2DA 7B -  -  -  	ld a, e											; save for the precedence of current token
   32 D1:B2DB ED 5B C6 EB 
              D1 -  -  -  	ld de, (outputPtr)
   33 D1:B2E0 2A C3 EB D1 	ld hl, (stackPtr)
   34 D1:B2E4 2B -  -  -  	dec hl
   35 D1:B2E5 2B -  -  -  	dec hl
   36 D1:B2E6 2B -  -  -  	dec hl
   37 D1:B2E7 2B -  -  -  	dec hl
   38 D1:B2E8 22 C3 EB D1 	ld (stackPtr), hl
   39 D1:B2EC ED A0 -  -  	ldi
   40 D1:B2EE ED A0 -  -  	ldi
   41 D1:B2F0 ED A0 -  -  	ldi
   42 D1:B2F2 ED A0 -  -  	ldi
   43 D1:B2F4 ED 53 C6 EB 
              D1 -  -  -  	ld (outputPtr), de
   44 D1:B2F9 5F -  -  -  	ld e, a
   45 D1:B2FA 18 B2 -  -  	jr CheckOperator
   46 D1:B2FC -  -  -  -  InsertBoolean:
   47 D1:B2FC 2A C3 EB D1 	ld hl, (stackPtr)
   48 D1:B300 36 1F -  -  	ld (hl), typeOperator
   49 D1:B302 23 -  -  -  	inc hl
   50 D1:B303 3A 1F EA D0 	ld a, (tempToken)
   51 D1:B307 77 -  -  -  	ld (hl), a
   52 D1:B308 23 -  -  -  	inc hl
   53 D1:B309 23 -  -  -  	inc hl
   54 D1:B30A 23 -  -  -  	inc hl
   55 D1:B30B 22 C3 EB D1 	ld (stackPtr), hl
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
   74 D1:B30F -  -  -  -  
   75 D1:B30F -  -  -  -  ReturnToLoop:
   76 D1:B30F CD 28 10 02 	call _IncFetch
   77 D1:B313 C3 2E B2 D1 	jp MainLoop
   78 D1:B317 -  -  -  -  NotABoolean:
   79 D1:B317 FE 2B -  -  	cp tComma
   80 D1:B319 28 06 -  -  	jr z, CloseArgument
   81 D1:B31B FE 11 -  -  	cp tRParen
   82 D1:B31D C2 B0 B3 D1 	jp nz, NotACommaOrRParen
   83 D1:B321 -  -  -  -  CloseArgument:
   84 D1:B321 -  -  -  -  #include "closing.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\closing.asm"
    1 D1:B321 21 E2 EB D1 	ld hl, openedParensE
    2 D1:B325 47 -  -  -  	ld b, a
    3 D1:B326 7E -  -  -  	ld a, (hl)
    4 D1:B327 B7 -  -  -  	or a
    5 D1:B328 28 6D -  -  	jr z, MismatchedParens
    6 D1:B32A 78 -  -  -  	ld a, b
    7 D1:B32B FE 2B -  -  	cp tComma
    8 D1:B32D 28 01 -  -  	jr z, +_
    9 D1:B32F 35 -  -  -  	dec (hl)
   10 D1:B330 2A C3 EB D1 _:	ld hl, (stackPtr)
   11 D1:B334 01 83 EA D0 	ld bc, stack
   12 D1:B338 B7 -  -  -  	or a
   13 D1:B339 ED 42 -  -  	sbc hl, bc
   14 D1:B33B 28 52 -  -  	jr z, StopMovingForArgument2
   15 D1:B33D 09 -  -  -  	add hl, bc
   16 D1:B33E 2B -  -  -  	dec hl
   17 D1:B33F 2B -  -  -  	dec hl
   18 D1:B340 2B -  -  -  	dec hl
   19 D1:B341 2B -  -  -  	dec hl
   20 D1:B342 7E -  -  -  	ld a, (hl)
   21 D1:B343 FE 3F -  -  	cp typeFunction
   22 D1:B345 28 23 -  -  	jr z, StopMovingForArgument
   23 D1:B347 FE 1F -  -  	cp typeOperator
   24 D1:B349 20 06 -  -  	jr nz, +_
   25 D1:B34B 23 -  -  -  	inc hl
   26 D1:B34C 7E -  -  -  	ld a, (hl)
   27 D1:B34D 2B -  -  -  	dec hl
   28 D1:B34E B7 -  -  -  	or a
   29 D1:B34F 28 19 -  -  	jr z, StopMovingForArgument
   30 D1:B351 22 C3 EB D1 _:	ld (stackPtr), hl
   31 D1:B355 ED 5B C6 EB 
              D1 -  -  -  	ld de, (outputPtr)
   32 D1:B35A ED A0 -  -  	ldi
   33 D1:B35C ED A0 -  -  	ldi
   34 D1:B35E ED A0 -  -  	ldi
   35 D1:B360 ED A0 -  -  	ldi
   36 D1:B362 ED 53 C6 EB 
              D1 -  -  -  	ld (outputPtr), de
   37 D1:B367 18 C7 -  -  	jr --_
   38 D1:B369 09 -  -  -  _:	add hl, bc
   39 D1:B36A -  -  -  -  StopMovingForArgument:
   40 D1:B36A 3A 1F EA D0 	ld a, (tempToken)
   41 D1:B36E FE 2B -  -  	cp tComma
   42 D1:B370 28 1D -  -  	jr z, StopMovingForArgument2
   43 D1:B372 22 C3 EB D1 	ld (stackPtr), hl
   44 D1:B376 23 -  -  -  	inc hl
   45 D1:B377 7E -  -  -  	ld a, (hl)
   46 D1:B378 FE 10 -  -  	cp tLParen
   47 D1:B37A 28 13 -  -  	jr z, StopMovingForArgument2
   48 D1:B37C 2B -  -  -  	dec hl
   49 D1:B37D ED 5B C6 EB 
              D1 -  -  -  	ld de, (outputPtr)
   50 D1:B382 ED A0 -  -  	ldi
   51 D1:B384 ED A0 -  -  	ldi
   52 D1:B386 ED A0 -  -  	ldi
   53 D1:B388 ED A0 -  -  	ldi
   54 D1:B38A ED 53 C6 EB 
              D1 -  -  -  	ld (outputPtr), de
   55 D1:B38F -  -  -  -  StopMovingForArgument2:
   56 D1:B38F CD 28 10 02 	call _IncFetch
   57 D1:B393 C3 2E B2 D1 	jp MainLoop
   58 D1:B397 -  -  -  -  MismatchedParens:
   59 D1:B397 3A E3 EB D1 	ld a, (openedParensF)
   60 D1:B39B B7 -  -  -  	or a
   61 D1:B39C CA 0B AF D1 	jp z, MismatchError
   62 D1:B3A0 3A 1F EA D0 	ld a, (tempToken)
   63 D1:B3A4 FE 2B -  -  	cp tComma
   64 D1:B3A6 20 04 -  -  	jr nz, +_
   65 D1:B3A8 FD CB BF CE 	set triggered_a_comma, (iy+fExpression2)
   66 D1:B3AC C3 AC B5 D1 _:	jp StopParsing
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
   85 D1:B3B0 -  -  -  -  
   86 D1:B3B0 -  -  -  -  NotACommaOrRParen:
   87 D1:B3B0 FE 08 -  -  	cp tLBrace
   88 D1:B3B2 C2 42 B4 D1 	jp nz, NotAList
   89 D1:B3B6 -  -  -  -  AList:
   90 D1:B3B6 -  -  -  -  #include "list.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\list.asm"
    1 D1:B3B6 2A C6 EB D1 	ld hl, (outputPtr)
    2 D1:B3BA 36 05 -  -  	ld (hl), typeList
    3 D1:B3BC 23 -  -  -  	inc hl
    4 D1:B3BD ED 5B DB EB 
              D1 -  -  -  	ld de, (tempListsPtr)
    5 D1:B3C2 ED 1F -  -  	ld (hl), de
    6 D1:B3C4 ED 53 24 B4 
              D1 -  -  -  	ld (ListLengthSMC), de
    7 D1:B3C9 23 -  -  -  	inc hl
    8 D1:B3CA 23 -  -  -  	inc hl
    9 D1:B3CB 23 -  -  -  	inc hl
   10 D1:B3CC 22 C6 EB D1 	ld (outputPtr), hl
   11 D1:B3D0 EB -  -  -  	ex de, hl
   12 D1:B3D1 23 -  -  -  	inc hl
   13 D1:B3D2 23 -  -  -  	inc hl
   14 D1:B3D3 23 -  -  -  	inc hl
   15 D1:B3D4 22 DB EB D1 	ld (tempListsPtr), hl
   16 D1:B3D8 -  -  -  -  ListStart:
   17 D1:B3D8 B7 -  -  -  	or a
   18 D1:B3D9 ED 62 -  -  	sbc hl, hl
   19 D1:B3DB -  -  -  -  ListLoop:
   20 D1:B3DB E5 -  -  -  	push hl
   21 D1:B3DC CD 28 10 02 		call _IncFetch
   22 D1:B3E0 E1 -  -  -  	pop hl
   23 D1:B3E1 FE 30 -  -  	cp t0
   24 D1:B3E3 38 14 -  -  	jr c, ListNotNumber
   25 D1:B3E5 FE 3A -  -  	cp t9+1
   26 D1:B3E7 30 10 -  -  	jr nc, ListNotNumber
   27 D1:B3E9 D6 30 -  -  	sub t0
   28 D1:B3EB 29 -  -  -  	add hl, hl
   29 D1:B3EC E5 -  -  -  	push hl
   30 D1:B3ED D1 -  -  -  	pop de
   31 D1:B3EE 29 -  -  -  	add hl, hl
   32 D1:B3EF 29 -  -  -  	add hl, hl
   33 D1:B3F0 19 -  -  -  	add hl, de
   34 D1:B3F1 11 00 00 00 	ld de, 0
   35 D1:B3F5 5F -  -  -  	ld e, a
   36 D1:B3F6 19 -  -  -  	add hl, de
   37 D1:B3F7 18 E2 -  -  	jr ListLoop
   38 D1:B3F9 -  -  -  -  ListNotNumber:
   39 D1:B3F9 FE 2B -  -  	cp tComma
   40 D1:B3FB 20 10 -  -  	jr nz, ListNotNumberOrComma
   41 D1:B3FD EB -  -  -  	ex de, hl
   42 D1:B3FE 2A DB EB D1 	ld hl, (tempListsPtr)
   43 D1:B402 ED 1F -  -  	ld (hl), de
   44 D1:B404 23 -  -  -  	inc hl
   45 D1:B405 23 -  -  -  	inc hl
   46 D1:B406 23 -  -  -  	inc hl
   47 D1:B407 22 DB EB D1 	ld (tempListsPtr), hl
   48 D1:B40B 18 CB -  -  	jr ListStart
   49 D1:B40D -  -  -  -  ListNotNumberOrComma:
   50 D1:B40D FE 09 -  -  	cp tRBrace
   51 D1:B40F 28 04 -  -  	jr z, ListStop
   52 D1:B411 FE 04 -  -  	cp tStore
   53 D1:B413 20 25 -  -  	jr nz, ListError
   54 D1:B415 -  -  -  -  ListStop:
   55 D1:B415 EB -  -  -  	ex de, hl
   56 D1:B416 2A DB EB D1 	ld hl, (tempListsPtr)
   57 D1:B41A ED 1F -  -  	ld (hl), de
   58 D1:B41C 23 -  -  -  	inc hl
   59 D1:B41D 23 -  -  -  	inc hl
   60 D1:B41E 23 -  -  -  	inc hl
   61 D1:B41F 22 DB EB D1 	ld (tempListsPtr),  hl
   62 D1:B423 -  -  -  -  ListLengthSMC = $+1
   63 D1:B423 11 00 00 00 	ld de, 0
   64 D1:B427 2B -  -  -  	dec hl
   65 D1:B428 2B -  -  -  	dec hl
   66 D1:B429 2B -  -  -  	dec hl
   67 D1:B42A B7 -  -  -  	or a
   68 D1:B42B ED 52 -  -  	sbc hl, de
   69 D1:B42D EB -  -  -  	ex de, hl
   70 D1:B42E ED 1F -  -  	ld (hl), de
   71 D1:B430 FE 04 -  -  	cp tStore
   72 D1:B432 C4 28 10 02 	call nz, _IncFetch
   73 D1:B436 C3 2E B2 D1 	jp MainLoop
   74 D1:B43A -  -  -  -  ListError:
   75 D1:B43A 21 B5 EC D1 	ld hl, InvalidListArgumentMessage
   76 D1:B43E C3 61 AF D1 	jp DispFinalString
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
   91 D1:B442 -  -  -  -  
   92 D1:B442 -  -  -  -  NotAList:
   93 D1:B442 FE 5D -  -  	cp tVarLst
   94 D1:B444 20 4E -  -  	jr nz, NotAnOSList
   95 D1:B446 -  -  -  -  AnOSList:
   96 D1:B446 CD 28 10 02 	call _IncFetch
   97 D1:B44A FE 06 -  -  	cp 6
   98 D1:B44C D2 1B AF D1 	jp nc, InvalidTokenError
   99 D1:B450 4F -  -  -  	ld c, a
  100 D1:B451 06 03 -  -  	ld b, 3
  101 D1:B453 ED 4C -  -  	mlt bc
  102 D1:B455 21 A1 EB D1 	ld hl, lists
  103 D1:B459 09 -  -  -  	add hl, bc
  104 D1:B45A ED 27 -  -  	ld hl, (hl)
  105 D1:B45C EB -  -  -  	ex de, hl
  106 D1:B45D 2A C6 EB D1 	ld hl, (outputPtr)
  107 D1:B461 36 06 -  -  	ld (hl), typeOSList
  108 D1:B463 23 -  -  -  	inc hl
  109 D1:B464 ED 1F -  -  	ld (hl), de
  110 D1:B466 23 -  -  -  	inc hl
  111 D1:B467 23 -  -  -  	inc hl
  112 D1:B468 23 -  -  -  	inc hl
  113 D1:B469 22 C6 EB D1 	ld (outputPtr), hl
  114 D1:B46D CD 28 10 02 	call _IncFetch
  115 D1:B471 FE 10 -  -  	cp tLParen
  116 D1:B473 C2 2D B2 D1 	jp nz, MainLoopResCarryFlag
  117 D1:B477 21 E2 EB D1 	ld hl, openedParensE
  118 D1:B47B 34 -  -  -  	inc (hl)
  119 D1:B47C 2A C3 EB D1 	ld hl, (stackPtr)
  120 D1:B480 36 1F -  -  	ld (hl), typeOperator
  121 D1:B482 23 -  -  -  	inc hl
  122 D1:B483 36 00 -  -  	ld (hl), 0
  123 D1:B485 23 -  -  -  	inc hl
  124 D1:B486 23 -  -  -  	inc hl
  125 D1:B487 23 -  -  -  	inc hl
  126 D1:B488 22 C3 EB D1 	ld (stackPtr), hl
  127 D1:B48C CD 28 10 02 	call _IncFetch
  128 D1:B490 C3 2E B2 D1 	jp MainLoop
  129 D1:B494 -  -  -  -  NotAnOSList:
  130 D1:B494 FE 2A -  -  	cp tString
  131 D1:B496 20 53 -  -  	jr nz, NotAString
  132 D1:B498 -  -  -  -  AString:
  133 D1:B498 2A C6 EB D1 	ld hl, (outputPtr)
  134 D1:B49C 36 07 -  -  	ld (hl), typeString
  135 D1:B49E 23 -  -  -  	inc hl
  136 D1:B49F ED 5B D8 EB 
              D1 -  -  -  	ld de, (tempStringsPtr)
  137 D1:B4A4 ED 1F -  -  	ld (hl), de
  138 D1:B4A6 23 -  -  -  	inc hl
  139 D1:B4A7 23 -  -  -  	inc hl
  140 D1:B4A8 23 -  -  -  	inc hl
  141 D1:B4A9 22 C6 EB D1 	ld (outputPtr), hl
  142 D1:B4AD -  -  -  -  StringLoop:
  143 D1:B4AD CD 28 10 02 	call _IncFetch
  144 D1:B4B1 38 2C -  -  	jr c, StringStop2
  145 D1:B4B3 FE 3F -  -  	cp tEnter
  146 D1:B4B5 28 28 -  -  	jr z, StringStop2
  147 D1:B4B7 FE 2A -  -  	cp tString
  148 D1:B4B9 28 1E -  -  	jr z, StringStop
  149 D1:B4BB FE 04 -  -  	cp tStore
  150 D1:B4BD 28 1A -  -  	jr z, StringStop
  151 D1:B4BF CD AC 04 02 	call _IsA2ByteTok
  152 D1:B4C3 20 06 -  -  	jr nz, +_
  153 D1:B4C5 23 -  -  -  	inc hl
  154 D1:B4C6 22 1A 23 D0 	ld (curPC), hl
  155 D1:B4CA 2B -  -  -  	dec hl
  156 D1:B4CB D5 -  -  -  _:	push de
  157 D1:B4CC CD 70 08 02 		call _Get_Tok_Strng
  158 D1:B4D0 D1 -  -  -  	pop de
  159 D1:B4D1 21 0E 06 D0 	ld hl, OP3
  160 D1:B4D5 ED B0 -  -  	ldir
  161 D1:B4D7 18 D4 -  -  	jr StringLoop
  162 D1:B4D9 -  -  -  -  StringStop:
  163 D1:B4D9 FE 3F -  -  	cp tEnter
  164 D1:B4DB C4 28 10 02 	call nz, _IncFetch
  165 D1:B4DF -  -  -  -  StringStop2:
  166 D1:B4DF EB -  -  -  	ex de, hl
  167 D1:B4E0 36 00 -  -  	ld (hl), 0
  168 D1:B4E2 23 -  -  -  	inc hl
  169 D1:B4E3 22 D8 EB D1 	ld (tempStringsPtr), hl
  170 D1:B4E7 C3 2E B2 D1 	jp MainLoop
  171 D1:B4EB -  -  -  -  NotAString:
  172 D1:B4EB FE 3F -  -  	cp tEnter
  173 D1:B4ED CA AC B5 D1 	jp z, StopParsing
  174 D1:B4F1 21 34 EA D1 	ld hl, FunctionsWithReturnValue
  175 D1:B4F5 01 08 00 00 	ld bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValue
  176 D1:B4F9 ED B1 -  -  	cpir
  177 D1:B4FB C2 1B AF D1 	jp nz, InvalidTokenError
  178 D1:B4FF FE AD -  -  	cp tGetKey
  179 D1:B501 28 04 -  -  	jr z, AddFunctionToOutput
  180 D1:B503 FE AB -  -  	cp trand
  181 D1:B505 20 7F -  -  	jr nz, AddFunctionToStack
  182 D1:B507 -  -  -  -  AddFunctionToOutput:
  183 D1:B507 2A C6 EB D1 	ld hl, (outputPtr)
  184 D1:B50B 36 04 -  -  	ld (hl), typeReturnValue
  185 D1:B50D 23 -  -  -  	inc hl
  186 D1:B50E 77 -  -  -  	ld (hl), a
  187 D1:B50F 23 -  -  -  	inc hl
  188 D1:B510 23 -  -  -  	inc hl
  189 D1:B511 23 -  -  -  	inc hl
  190 D1:B512 22 C6 EB D1 	ld (outputPtr), hl
  191 D1:B516 FE AD -  -  	cp tGetKey
  192 D1:B518 C2 0F B3 D1 	jp nz, ReturnToLoop
  193 D1:B51C CD 28 10 02 	call _IncFetch
  194 D1:B520 DA 2E B2 D1 	jp c, MainLoop
  195 D1:B524 FE 10 -  -  	cp tLParen
  196 D1:B526 C2 2D B2 D1 	jp nz, MainLoopResCarryFlag
  197 D1:B52A CD 28 10 02 	call _IncFetch
  198 D1:B52E DA 05 AF D1 _:	jp c, ErrorSyntax
  199 D1:B532 FE 3F -  -  	cp tEnter
  200 D1:B534 CA 05 AF D1 	jp z, ErrorSyntax
  201 D1:B538 D6 30 -  -  	sub t0
  202 D1:B53A 38 F2 -  -  	jr c, -_
  203 D1:B53C FE 0A -  -  	cp t9-t0+1
  204 D1:B53E D2 05 AF D1 _:	jp nc, ErrorSyntax
  205 D1:B542 11 00 00 00 	ld de, 0
  206 D1:B546 5F -  -  -  	ld e, a
  207 D1:B547 CD 28 10 02 	call _IncFetch
  208 D1:B54B 38 2D -  -  	jr c, ++_
  209 D1:B54D FE 3F -  -  	cp tEnter
  210 D1:B54F 28 29 -  -  	jr z, ++_
  211 D1:B551 FE 11 -  -  	cp tRParen
  212 D1:B553 28 21 -  -  	jr z, +_
  213 D1:B555 D6 30 -  -  	sub t0
  214 D1:B557 38 D5 -  -  	jr c, --_
  215 D1:B559 FE 0A -  -  	cp t9-t0+1
  216 D1:B55B 30 E1 -  -  	jr nc, -_
  217 D1:B55D D5 -  -  -  	push de
  218 D1:B55E E1 -  -  -  	pop hl
  219 D1:B55F 29 -  -  -  	add hl, hl
  220 D1:B560 29 -  -  -  	add hl, hl
  221 D1:B561 19 -  -  -  	add hl, de
  222 D1:B562 29 -  -  -  	add hl, hl
  223 D1:B563 5F -  -  -  	ld e, a
  224 D1:B564 19 -  -  -  	add hl, de
  225 D1:B565 EB -  -  -  	ex de, hl
  226 D1:B566 CD 28 10 02 	call _IncFetch
  227 D1:B56A 38 0E -  -  	jr c, ++_
  228 D1:B56C FE 3F -  -  	cp tEnter
  229 D1:B56E 28 0A -  -  	jr z, ++_
  230 D1:B570 FE 11 -  -  	cp tRParen
  231 D1:B572 C2 05 AF D1 	jp nz, ErrorSyntax
  232 D1:B576 CD 28 10 02 _:	call _IncFetch
  233 D1:B57A 2A C6 EB D1 _:	ld hl, (outputPtr)
  234 D1:B57E 2B -  -  -  	dec hl
  235 D1:B57F 2B -  -  -  	dec hl
  236 D1:B580 2B -  -  -  	dec hl
  237 D1:B581 73 -  -  -  	ld (hl), e
  238 D1:B582 C3 2E B2 D1 	jp MainLoop
  239 D1:B586 -  -  -  -  AddFunctionToStack:
  240 D1:B586 21 E2 EB D1 	ld hl, openedParensE
  241 D1:B58A 34 -  -  -  	inc (hl)
  242 D1:B58B CD AC 04 02 	call _IsA2ByteTok
  243 D1:B58F CC 28 10 02 	call z, _IncFetch
  244 D1:B593 47 -  -  -  	ld b, a
  245 D1:B594 2A C3 EB D1 	ld hl, (stackPtr)
  246 D1:B598 3A 1F EA D0 	ld a, (tempToken)
  247 D1:B59C 36 3F -  -  	ld (hl), typeFunction
  248 D1:B59E 23 -  -  -  	inc hl
  249 D1:B59F 77 -  -  -  	ld (hl), a
  250 D1:B5A0 23 -  -  -  	inc hl
  251 D1:B5A1 70 -  -  -  	ld (hl), b
  252 D1:B5A2 23 -  -  -  	inc hl
  253 D1:B5A3 23 -  -  -  	inc hl
  254 D1:B5A4 22 C3 EB D1 	ld (stackPtr), hl
  255 D1:B5A8 C3 0F B3 D1 	jp ReturnToLoop
  256 D1:B5AC -  -  -  -  StopParsing:																; move stack to output
  257 D1:B5AC CD 21 B7 D1 	call MoveStackEntryToOutput
  258 D1:B5B0 2A C6 EB D1 	ld hl, (outputPtr)
  259 D1:B5B4 11 6B EE D0 	ld de, output
  260 D1:B5B8 B7 -  -  -  	or a
  261 D1:B5B9 ED 52 -  -  	sbc hl, de
  262 D1:B5BB E5 -  -  -  	push hl
  263 D1:B5BC C1 -  -  -  	pop bc																	; BC / 4 is amount of elements in the stack
  264 D1:B5BD D5 -  -  -  	push de
  265 D1:B5BE E1 -  -  -  	pop hl
  266 D1:B5BF 3E 01 -  -  	ld a, OutputIsInHL
  267 D1:B5C1 32 E9 EB D1 	ld (ExprOutput), a
  268 D1:B5C5 32 EA EB D1 	ld (ExprOutput2), a
  269 D1:B5C9 78 -  -  -  	ld a, b
  270 D1:B5CA B1 -  -  -  	or a, c
  271 D1:B5CB FE 04 -  -  	cp 4
  272 D1:B5CD D8 -  -  -  	ret c
  273 D1:B5CE CA B9 B6 D1 	jp z, ParseSingleArgument
  274 D1:B5D2 -  -  -  -  Loop:
  275 D1:B5D2 AF -  -  -  	xor a
  276 D1:B5D3 FD 77 C0 -  	ld (iy+fExpression1), a
  277 D1:B5D6 FD CB BF 86 	res use_mean_routine, (iy+fExpression2)
  278 D1:B5DA ED 42 -  -  	sbc hl, bc
  279 D1:B5DC 11 6B EE D0 	ld de, output
  280 D1:B5E0 ED 52 -  -  	sbc hl, de
  281 D1:B5E2 CA 05 AF D1 	jp z, ErrorSyntax
  282 D1:B5E6 19 -  -  -  	add hl, de
  283 D1:B5E7 09 -  -  -  	add hl, bc
  284 D1:B5E8 E5 -  -  -  	push hl
  285 D1:B5E9 21 0C 00 00 		ld hl, 12
  286 D1:B5ED B7 -  -  -  		or a
  287 D1:B5EE ED 42 -  -  		sbc hl, bc
  288 D1:B5F0 20 04 -  -  		jr nz, +_
  289 D1:B5F2 FD CB C0 DE 		set op_is_last_one, (iy+fExpression1)
  290 D1:B5F6 E1 -  -  -  _:	pop hl
  291 D1:B5F7 78 -  -  -  	ld a, b
  292 D1:B5F8 B1 -  -  -  	or a, c
  293 D1:B5F9 FE 04 -  -  	cp 4
  294 D1:B5FB CA C7 AC D1 	jp z, MaybeChangeDEToHL
  295 D1:B5FF 7E -  -  -  	ld a, (hl)
  296 D1:B600 FE 1F -  -  	cp typeOperator
  297 D1:B602 28 4B -  -  	jr z, ExpressOperator
  298 D1:B604 FE 3F -  -  	cp typeFunction
  299 D1:B606 28 06 -  -  	jr z, ExpressFunction
  300 D1:B608 23 -  -  -  	inc hl
  301 D1:B609 23 -  -  -  	inc hl
  302 D1:B60A 23 -  -  -  	inc hl
  303 D1:B60B 23 -  -  -  	inc hl
  304 D1:B60C 18 C4 -  -  	jr Loop
  305 D1:B60E -  -  -  -  ExpressFunction:
  306 D1:B60E 23 -  -  -  	inc hl																	; function = a
  307 D1:B60F 7E -  -  -  	ld a, (hl)
  308 D1:B610 2B -  -  -  	dec hl
  309 D1:B611 C5 -  -  -  	push bc
  310 D1:B612 E5 -  -  -  		push hl
  311 D1:B613 CD 6B C4 D1 			call ExecuteFunction
  312 D1:B617 D1 -  -  -  		pop de
  313 D1:B618 D5 -  -  -  		push de
  314 D1:B619 DD E1 -  -  		pop ix
  315 D1:B61B ED 22 04 -  		lea hl, ix+4
  316 D1:B61E 3A E4 EB D1 		ld a, (amountOfArguments)
  317 D1:B622 3D -  -  -  		dec a
  318 D1:B623 28 07 -  -  		jr z, ++_
  319 D1:B625 47 -  -  -  		ld b, a
  320 D1:B626 1B -  -  -  _:		dec de
  321 D1:B627 1B -  -  -  		dec de
  322 D1:B628 1B -  -  -  		dec de
  323 D1:B629 1B -  -  -  		dec de
  324 D1:B62A 10 FA -  -  		djnz -_
  325 D1:B62C C1 -  -  -  _:	pop bc
  326 D1:B62D D5 -  -  -  	push de
  327 D1:B62E C5 -  -  -  		push bc
  328 D1:B62F E5 -  -  -  			push hl
  329 D1:B630 ED B0 -  -  				ldir
  330 D1:B632 E1 -  -  -  			pop hl
  331 D1:B633 C1 -  -  -  		pop bc
  332 D1:B634 D1 -  -  -  	pop de
  333 D1:B635 EB -  -  -  	ex de, hl
  334 D1:B636 09 -  -  -  	add hl, bc
  335 D1:B637 B7 -  -  -  	or a
  336 D1:B638 ED 52 -  -  	sbc hl, de
  337 D1:B63A E5 -  -  -  	push hl
  338 D1:B63B C1 -  -  -  	pop bc																	; BC = BC+DE-HL
  339 D1:B63C 78 -  -  -  	ld a, b
  340 D1:B63D B1 -  -  -  	or c
  341 D1:B63E FE 04 -  -  	cp 4
  342 D1:B640 C8 -  -  -  	ret z
  343 D1:B641 EB -  -  -  	ex de, hl
  344 D1:B642 3A E4 EB D1 	ld a, (amountOfArguments)
  345 D1:B646 47 -  -  -  	ld b, a
  346 D1:B647 2B -  -  -  _:	dec hl
  347 D1:B648 2B -  -  -  	dec hl
  348 D1:B649 2B -  -  -  	dec hl
  349 D1:B64A 2B -  -  -  	dec hl
  350 D1:B64B 10 FA -  -  	djnz -_
  351 D1:B64D 18 43 -  -  	jr AddChain
  352 D1:B64F -  -  -  -  ExpressOperator:
  353 D1:B64F 23 -  -  -  	inc hl
  354 D1:B650 7E -  -  -  	ld a, (hl)
  355 D1:B651 2B -  -  -  	dec hl
  356 D1:B652 C5 -  -  -  	push bc
  357 D1:B653 E5 -  -  -  		push hl
  358 D1:B654 DD E1 -  -  		pop ix
  359 D1:B656 DD 17 FD -  		ld de, (ix-3)
  360 D1:B659 DD 07 F9 -  		ld bc, (ix-7)
  361 D1:B65C CD 24 CF D1 		call ExecuteOperator
  362 D1:B660 ED 12 FC -  		lea de, ix-4
  363 D1:B663 C1 -  -  -  	pop bc
  364 D1:B664 21 08 00 00 	ld hl, 8
  365 D1:B668 19 -  -  -  	add hl, de
  366 D1:B669 D5 -  -  -  	push de
  367 D1:B66A C5 -  -  -  		push bc
  368 D1:B66B ED B0 -  -  			ldir
  369 D1:B66D C1 -  -  -  		pop bc
  370 D1:B66E 21 F4 FF FF 		ld hl, -12
  371 D1:B672 09 -  -  -  		add hl, bc
  372 D1:B673 19 -  -  -  		add hl, de
  373 D1:B674 B7 -  -  -  		or a
  374 D1:B675 ED 52 -  -  		sbc hl, de
  375 D1:B677 E5 -  -  -  		push hl
  376 D1:B678 C1 -  -  -  		pop bc
  377 D1:B679 E1 -  -  -  	pop hl
  378 D1:B67A 20 0A -  -  	jr nz, +_
  379 D1:B67C FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  380 D1:B680 C8 -  -  -  	ret z
  381 D1:B681 2B -  -  -  	dec hl
  382 D1:B682 2B -  -  -  	dec hl
  383 D1:B683 2B -  -  -  	dec hl
  384 D1:B684 18 3C -  -  	jr ParseSingleArgument2
  385 D1:B686 03 -  -  -  _:	inc bc
  386 D1:B687 03 -  -  -  	inc bc
  387 D1:B688 03 -  -  -  	inc bc
  388 D1:B689 03 -  -  -  	inc bc
  389 D1:B68A FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  390 D1:B68E C2 D2 B5 D1 	jp nz, Loop
  391 D1:B692 -  -  -  -  AddChain:
  392 D1:B692 1E 03 -  -  	ld e, typeChainAns
  393 D1:B694 7E -  -  -  	ld a, (hl)
  394 D1:B695 FE 1F -  -  	cp typeOperator
  395 D1:B697 30 15 -  -  	jr nc, ChainAns2
  396 D1:B699 23 -  -  -  	inc hl
  397 D1:B69A 23 -  -  -  	inc hl
  398 D1:B69B 23 -  -  -  	inc hl
  399 D1:B69C 23 -  -  -  	inc hl
  400 D1:B69D B6 -  -  -  	or a, (hl)
  401 D1:B69E 2B -  -  -  	dec hl
  402 D1:B69F 2B -  -  -  	dec hl
  403 D1:B6A0 2B -  -  -  	dec hl
  404 D1:B6A1 2B -  -  -  	dec hl
  405 D1:B6A2 FE 1F -  -  	cp typeOperator
  406 D1:B6A4 30 08 -  -  	jr nc, ChainAns2
  407 D1:B6A6 -  -  -  -  ChainPush2:
  408 D1:B6A6 E5 -  -  -  	push hl
  409 D1:B6A7 CD D7 AC D1 		call InsertPushHLDE
  410 D1:B6AB E1 -  -  -  	pop hl
  411 D1:B6AC 1E 02 -  -  	ld e, typeChainPush
  412 D1:B6AE -  -  -  -  ChainAns2:
  413 D1:B6AE E5 -  -  -  	push hl
  414 D1:B6AF 2B -  -  -  		dec hl
  415 D1:B6B0 2B -  -  -  		dec hl
  416 D1:B6B1 2B -  -  -  		dec hl
  417 D1:B6B2 2B -  -  -  		dec hl
  418 D1:B6B3 73 -  -  -  		ld (hl), e
  419 D1:B6B4 E1 -  -  -  	pop hl
  420 D1:B6B5 C3 D2 B5 D1 	jp Loop
  421 D1:B6B9 -  -  -  -  	
  422 D1:B6B9 -  -  -  -  ParseSingleArgument:
  423 D1:B6B9 7E -  -  -  	ld a, (hl)
  424 D1:B6BA B7 -  -  -  	or a
  425 D1:B6BB 20 0D -  -  	jr nz, ParseSingleNotNumber
  426 D1:B6BD FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  427 D1:B6C1 23 -  -  -  	inc hl
  428 D1:B6C2 -  -  -  -  ParseSingleArgument2:
  429 D1:B6C2 ED 27 -  -  	ld hl, (hl)
  430 D1:B6C4 3E 21 -  -  	ld a, 021h
  431 D1:B6C6 C3 62 AC D1 	jp InsertAHL															; ld hl, *
  432 D1:B6CA -  -  -  -  ParseSingleNotNumber:
  433 D1:B6CA 3D -  -  -  	dec a
  434 D1:B6CB 20 06 -  -  	jr nz, ParseSingleNotVariable
  435 D1:B6CD 23 -  -  -  	inc hl
  436 D1:B6CE 4E -  -  -  	ld c, (hl)
  437 D1:B6CF C3 7B AC D1 	jp InsertHIXC
  438 D1:B6D3 -  -  -  -  ParseSingleNotVariable:
  439 D1:B6D3 D6 03 -  -  	sub a, 3
  440 D1:B6D5 20 0C -  -  	jr nz, ParseSingleNotFunction
  441 D1:B6D7 23 -  -  -  	inc hl
  442 D1:B6D8 7E -  -  -  	ld a, (hl)
  443 D1:B6D9 06 02 -  -  	ld b, OutputInHL
  444 D1:B6DB FD CB C0 B6 	res need_push, (iy+fExpression1)
  445 D1:B6DF C3 FF AC D1 	jp GetFunction
  446 D1:B6E3 -  -  -  -  ParseSingleNotFunction:
  447 D1:B6E3 D6 03 -  -  	sub a, 3
  448 D1:B6E5 C2 05 AF D1 	jp nz, ErrorSyntax
  449 D1:B6E9 FD CB C0 FE 	set output_is_string, (iy+fExpression1)
  450 D1:B6ED E5 -  -  -  	push hl
  451 D1:B6EE 3E 21 -  -  		ld a, 021h
  452 D1:B6F0 CD AE AC D1 		call InsertA														; ld hl, *
  453 D1:B6F4 CD EA AC D1 		call InsertProgramPtrToDataOffset
  454 D1:B6F8 2A DE EB D1 		ld hl, (programDataDataPtr)
  455 D1:B6FC CD 66 AC D1 		call InsertHL														; ld hl, XXXXXXX
  456 D1:B700 E1 -  -  -  	pop hl
  457 D1:B701 23 -  -  -  	inc hl
  458 D1:B702 ED 17 -  -  	ld de, (hl)																; hl points to string in string stack
  459 D1:B704 ED 27 -  -  	ld hl, (hl)
  460 D1:B706 01 FF FF FF 	ld bc, -1
  461 D1:B70A AF -  -  -  	xor a
  462 D1:B70B ED B1 -  -  	cpir
  463 D1:B70D ED 52 -  -  	sbc hl, de
  464 D1:B70F E5 -  -  -  	push hl
  465 D1:B710 C1 -  -  -  	pop bc																	; bc = length of string
  466 D1:B711 EB -  -  -  	ex de, hl
  467 D1:B712 ED 5B DE EB 
              D1 -  -  -  	ld de, (programDataDataPtr)
  468 D1:B717 D5 -  -  -  	push de
  469 D1:B718 ED B0 -  -  		ldir
  470 D1:B71A ED 53 DE EB 
              D1 -  -  -  		ld (programDataDataPtr), de
  471 D1:B71F E1 -  -  -  	pop hl
  472 D1:B720 C9 -  -  -  	ret
  473 D1:B721 -  -  -  -  	
  474 D1:B721 -  -  -  -  MoveStackEntryToOutput:
  475 D1:B721 2A C3 EB D1 	ld hl, (stackPtr)
  476 D1:B725 11 83 EA D0 	ld de, stack
  477 D1:B729 B7 -  -  -  	or a
  478 D1:B72A ED 52 -  -  	sbc hl, de
  479 D1:B72C C8 -  -  -  	ret z
  480 D1:B72D 19 -  -  -  	add hl, de
  481 D1:B72E 2B -  -  -  	dec hl
  482 D1:B72F 2B -  -  -  	dec hl
  483 D1:B730 2B -  -  -  	dec hl
  484 D1:B731 2B -  -  -  	dec hl
  485 D1:B732 22 C3 EB D1 	ld (stackPtr), hl
  486 D1:B736 ED 5B C6 EB 
              D1 -  -  -  	ld de, (outputPtr)
  487 D1:B73B 7E -  -  -  	ld a, (hl)
  488 D1:B73C FE 3F -  -  	cp typeFunction
  489 D1:B73E 20 07 -  -  	jr nz, +_
  490 D1:B740 23 -  -  -  	inc hl
  491 D1:B741 7E -  -  -  	ld a, (hl)
  492 D1:B742 2B -  -  -  	dec hl
  493 D1:B743 FE 10 -  -  	cp tLParen
  494 D1:B745 28 DA -  -  	jr z, MoveStackEntryToOutput
  495 D1:B747 ED A0 -  -  _:	ldi
  496 D1:B749 ED A0 -  -  	ldi
  497 D1:B74B ED A0 -  -  	ldi
  498 D1:B74D ED A0 -  -  	ldi
  499 D1:B74F ED 53 C6 EB 
              D1 -  -  -  	ld (outputPtr), de
  500 D1:B754 18 CB -  -  	jr MoveStackEntryToOutput
Listing for file "ICE.asm"
  457 D1:B756 -  -  -  -  #include "putchar.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\putchar.asm"
    1 D1:B756 -  -  -  -  _PrintChar_ASM:
    2 D1:B756 E5 -  -  -  	push hl
    3 D1:B757 -  -  -  -  TextXPos_ASM = $+1
    4 D1:B757 01 00 00 00 		ld	bc, 0
    5 D1:B75B F5 -  -  -  		push af
    6 D1:B75C F5 -  -  -  			push af
    7 D1:B75D C5 -  -  -  				push bc
    8 D1:B75E B7 -  -  -  					or	a,a
    9 D1:B75F ED 62 -  -  					sbc	hl,hl
   10 D1:B761 6F -  -  -  					ld	l,a
   11 D1:B762 11 C4 B7 D1 					ld	de, DefaultCharSpacing_ASM
   12 D1:B766 19 -  -  -  					add	hl,de
   13 D1:B767 7E -  -  -  					ld	a,(hl)
   14 D1:B768 32 AB B7 D1 					ld	(charwidth),a
   15 D1:B76C B7 -  -  -  					or	a,a
   16 D1:B76D ED 62 -  -  					sbc	hl,hl
   17 D1:B76F 6F -  -  -  					ld	l,a
   18 D1:B770 ED 44 -  -  					neg
   19 D1:B772 32 7C B7 D1 					ld	(CharWidthDelta_ASM),a
   20 D1:B776 09 -  -  -  					add	hl,bc
   21 D1:B777 22 58 B7 D1 					ld	(TextXPos_ASM),hl
   22 D1:B77B -  -  -  -  CharWidthDelta_ASM =$+1
   23 D1:B77B 11 FF FF FF 					ld	de,$FFFFFF
   24 D1:B77F 21 40 01 00 					ld	hl,lcdWidth
   25 D1:B783 19 -  -  -  					add	hl,de
   26 D1:B784 22 B8 B7 D1 					ld	(line_change),hl
   27 D1:B788 -  -  -  -  TextYPos_ASM = $+1
   28 D1:B788 2E 00 -  -  					ld	l,0
   29 D1:B78A 26 A0 -  -  					ld	h,160
   30 D1:B78C ED 6C -  -  					mlt	hl
   31 D1:B78E 29 -  -  -  					add	hl,hl
   32 D1:B78F 11 00 00 D4 					ld	de,vRAM
   33 D1:B793 19 -  -  -  					add	hl,de
   34 D1:B794 D1 -  -  -  				pop	de
   35 D1:B795 19 -  -  -  				add	hl,de
   36 D1:B796 F1 -  -  -  			pop	af
   37 D1:B797 EB -  -  -  			ex	de,hl
   38 D1:B798 B7 -  -  -  			or	a,a
   39 D1:B799 ED 62 -  -  			sbc	hl,hl
   40 D1:B79B D6 17 -  -  			sub a, 23
   41 D1:B79D 6F -  -  -  			ld	l,a
   42 D1:B79E 29 -  -  -  			add	hl,hl
   43 D1:B79F 29 -  -  -  			add	hl,hl
   44 D1:B7A0 29 -  -  -  			add	hl,hl
   45 D1:B7A1 01 3F B8 D1 			ld	bc, DefaultTextData_ASM
   46 D1:B7A5 09 -  -  -  			add	hl,bc
   47 D1:B7A6 06 08 -  -  			ld	b,8
   48 D1:B7A8 C5 -  -  -  iloop:		push bc
   49 D1:B7A9 4E -  -  -  				ld c,(hl)
   50 D1:B7AA -  -  -  -  charwidth =$+1
   51 D1:B7AA 06 00 -  -  				ld b,0
   52 D1:B7AC EB -  -  -  				ex de,hl
   53 D1:B7AD -  -  -  -  color = $+1
   54 D1:B7AD 3E 00 -  -  				ld a, 0
   55 D1:B7AF CB 21 -  -  cloop:			sla	c
   56 D1:B7B1 30 01 -  -  				jr nc,+_
   57 D1:B7B3 77 -  -  -  				ld (hl), a
   58 D1:B7B4 23 -  -  -  _:				inc	hl
   59 D1:B7B5 10 F8 -  -  				djnz cloop
   60 D1:B7B7 -  -  -  -  line_change =$+1
   61 D1:B7B7 01 00 00 00 				ld bc,0
   62 D1:B7BB 09 -  -  -  				add	hl,bc
   63 D1:B7BC EB -  -  -  				ex de,hl
   64 D1:B7BD 23 -  -  -  				inc	hl
   65 D1:B7BE C1 -  -  -  			pop	bc
   66 D1:B7BF 10 E7 -  -  			djnz iloop
   67 D1:B7C1 F1 -  -  -  		pop	af
   68 D1:B7C2 E1 -  -  -  	pop	hl
   69 D1:B7C3 C9 -  -  -  	ret
   70 D1:B7C4 -  -  -  -  
   71 D1:B7C4 -  -  -  -  DefaultCharSpacing_ASM:
   72 D1:B7C4 -  -  -  -  	;   0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
   73 D1:B7C4 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 02 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8	; 0
   74 D1:B7D4 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	; 1
   75 D1:B7E4 03 04 06 08 
              08 08 08 05 
              05 05 08 07 
              04 07 03 08 	.db 3,4,6,8,8,8,8,5,5,5,8,7,4,7,3,8	; 2
   76 D1:B7F4 08 07 08 08 
              08 08 08 08 
              08 08 03 04 
              06 07 06 07 	.db 8,7,8,8,8,8,8,8,8,8,3,4,6,7,6,7	; 3
   77 D1:B804 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	; 4
   78 D1:B814 08 08 08 08 
              08 08 08 08 
              08 08 08 05 
              08 05 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,5,8,5,8,8	; 5
   79 D1:B824 04 08 08 08 
              08 08 08 08 
              08 05 08 08 
              05 08 08 08 	.db 4,8,8,8,8,8,8,8,8,5,8,8,5,8,8,8	; 6
   80 D1:B834 08 08 08 08 
              07 08 08 08 
              08 08 08 -  	.db 8,8,8,8,7,8,8,8,8,8,8			; 7
   81 D1:B83F -  -  -  -   
   82 D1:B83F -  -  -  -  ;-------------------------------------------------------------------------------
   83 D1:B83F -  -  -  -  DefaultTextData_ASM:
   84 D1:B83F FF FF FF FF 
              FF FF FF FF Char000: .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF	; _
   85 D1:B847 18 3C 7E 18 
              18 18 18 00 Char024: .db $18,$3C,$7E,$18,$18,$18,$18,$00	; .
   86 D1:B84F 18 18 18 18 
              7E 3C 18 00 Char025: .db $18,$18,$18,$18,$7E,$3C,$18,$00	; .
   87 D1:B857 00 18 0C FE 
              0C 18 00 00 Char026: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	; .
   88 D1:B85F 00 30 60 FE 
              60 30 00 00 Char027: .db $00,$30,$60,$FE,$60,$30,$00,$00	; .
   89 D1:B867 00 18 0C FE 
              0C 18 00 00 Char028: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	; ->
   90 D1:B86F 00 24 66 FF 
              66 24 00 00 Char029: .db $00,$24,$66,$FF,$66,$24,$00,$00	; .
   91 D1:B877 00 18 3C 7E 
              FF FF 00 00 Char030: .db $00,$18,$3C,$7E,$FF,$FF,$00,$00	; .
   92 D1:B87F 00 FF FF 7E 
              3C 18 00 00 Char031: .db $00,$FF,$FF,$7E,$3C,$18,$00,$00	; .
   93 D1:B887 00 00 00 00 
              00 00 00 00 Char032: .db $00,$00,$00,$00,$00,$00,$00,$00	;  
   94 D1:B88F C0 C0 C0 C0 
              C0 00 C0 00 Char033: .db $C0,$C0,$C0,$C0,$C0,$00,$C0,$00	; !
   95 D1:B897 D8 D8 D8 00 
              00 00 00 00 Char034: .db $D8,$D8,$D8,$00,$00,$00,$00,$00	; "
   96 D1:B89F 6C 6C FE 6C 
              FE 6C 6C 00 Char035: .db $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
   97 D1:B8A7 18 7E C0 7C 
              06 FC 18 00 Char036: .db $18,$7E,$C0,$7C,$06,$FC,$18,$00	; $
   98 D1:B8AF 00 C6 CC 18 
              30 66 C6 00 Char037: .db $00,$C6,$CC,$18,$30,$66,$C6,$00	; %
   99 D1:B8B7 38 6C 38 76 
              DC CC 76 00 Char038: .db $38,$6C,$38,$76,$DC,$CC,$76,$00	; &
  100 D1:B8BF 30 30 60 00 
              00 00 00 00 Char039: .db $30,$30,$60,$00,$00,$00,$00,$00	; '
  101 D1:B8C7 30 60 C0 C0 
              C0 60 30 00 Char040: .db $30,$60,$C0,$C0,$C0,$60,$30,$00	; (
  102 D1:B8CF C0 60 30 30 
              30 60 C0 00 Char041: .db $C0,$60,$30,$30,$30,$60,$C0,$00	; )
  103 D1:B8D7 00 66 3C FF 
              3C 66 00 00 Char042: .db $00,$66,$3C,$FF,$3C,$66,$00,$00	; *
  104 D1:B8DF 00 30 30 FC 
              FC 30 30 00 Char043: .db $00,$30,$30,$FC,$FC,$30,$30,$00	; +
  105 D1:B8E7 00 00 00 00 
              00 60 60 C0 Char044: .db $00,$00,$00,$00,$00,$60,$60,$C0	; ,
  106 D1:B8EF 00 00 00 FC 
              00 00 00 00 Char045: .db $00,$00,$00,$FC,$00,$00,$00,$00	; -
  107 D1:B8F7 00 00 00 00 
              00 C0 C0 00 Char046: .db $00,$00,$00,$00,$00,$C0,$C0,$00	; .
  108 D1:B8FF 06 0C 18 30 
              60 C0 80 00 Char047: .db $06,$0C,$18,$30,$60,$C0,$80,$00	; /
  109 D1:B907 7C CE DE F6 
              E6 C6 7C 00 Char048: .db $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00	; 0
  110 D1:B90F 30 70 30 30 
              30 30 FC 00 Char049: .db $30,$70,$30,$30,$30,$30,$FC,$00	; 1
  111 D1:B917 7C C6 06 7C 
              C0 C0 FE 00 Char050: .db $7C,$C6,$06,$7C,$C0,$C0,$FE,$00	; 2
  112 D1:B91F FC 06 06 3C 
              06 06 FC 00 Char051: .db $FC,$06,$06,$3C,$06,$06,$FC,$00	; 3
  113 D1:B927 0C CC CC CC 
              FE 0C 0C 00 Char052: .db $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00	; 4
  114 D1:B92F FE C0 FC 06 
              06 C6 7C 00 Char053: .db $FE,$C0,$FC,$06,$06,$C6,$7C,$00	; 5
  115 D1:B937 7C C0 C0 FC 
              C6 C6 7C 00 Char054: .db $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00	; 6
  116 D1:B93F FE 06 06 0C 
              18 30 30 00 Char055: .db $FE,$06,$06,$0C,$18,$30,$30,$00	; 7
  117 D1:B947 7C C6 C6 7C 
              C6 C6 7C 00 Char056: .db $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00	; 8
  118 D1:B94F 7C C6 C6 7E 
              06 06 7C 00 Char057: .db $7C,$C6,$C6,$7E,$06,$06,$7C,$00	; 9
  119 D1:B957 00 C0 C0 00 
              00 C0 C0 00 Char058: .db $00,$C0,$C0,$00,$00,$C0,$C0,$00	; :
  120 D1:B95F 00 60 60 00 
              00 60 60 C0 Char059: .db $00,$60,$60,$00,$00,$60,$60,$C0	; ;
  121 D1:B967 18 30 60 C0 
              60 30 18 00 Char060: .db $18,$30,$60,$C0,$60,$30,$18,$00	; <
  122 D1:B96F 00 00 FC 00 
              FC 00 00 00 Char061: .db $00,$00,$FC,$00,$FC,$00,$00,$00	; =
  123 D1:B977 C0 60 30 18 
              30 60 C0 00 Char062: .db $C0,$60,$30,$18,$30,$60,$C0,$00	; >
  124 D1:B97F 78 CC 18 30 
              30 00 30 00 Char063: .db $78,$CC,$18,$30,$30,$00,$30,$00	; ?
  125 D1:B987 7C C6 DE DE 
              DE C0 7E 00 Char064: .db $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00	; @
  126 D1:B98F 38 6C C6 C6 
              FE C6 C6 00 Char065: .db $38,$6C,$C6,$C6,$FE,$C6,$C6,$00	; A
  127 D1:B997 FC C6 C6 FC 
              C6 C6 FC 00 Char066: .db $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00	; B
  128 D1:B99F 7C C6 C0 C0 
              C0 C6 7C 00 Char067: .db $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00	; C
  129 D1:B9A7 F8 CC C6 C6 
              C6 CC F8 00 Char068: .db $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00	; D
  130 D1:B9AF FE C0 C0 F8 
              C0 C0 FE 00 Char069: .db $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00	; E
  131 D1:B9B7 FE C0 C0 F8 
              C0 C0 C0 00 Char070: .db $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00	; F
  132 D1:B9BF 7C C6 C0 C0 
              CE C6 7C 00 Char071: .db $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00	; G
  133 D1:B9C7 C6 C6 C6 FE 
              C6 C6 C6 00 Char072: .db $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00	; H
  134 D1:B9CF 7E 18 18 18 
              18 18 7E 00 Char073: .db $7E,$18,$18,$18,$18,$18,$7E,$00	; I
  135 D1:B9D7 06 06 06 06 
              06 C6 7C 00 Char074: .db $06,$06,$06,$06,$06,$C6,$7C,$00	; J
  136 D1:B9DF C6 CC D8 F0 
              D8 CC C6 00 Char075: .db $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
  137 D1:B9E7 C0 C0 C0 C0 
              C0 C0 FE 00 Char076: .db $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00	; L
  138 D1:B9EF C6 EE FE FE 
              D6 C6 C6 00 Char077: .db $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00	; M
  139 D1:B9F7 C6 E6 F6 DE 
              CE C6 C6 00 Char078: .db $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
  140 D1:B9FF 7C C6 C6 C6 
              C6 C6 7C 00 Char079: .db $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00	; O
  141 D1:BA07 FC C6 C6 FC 
              C0 C0 C0 00 Char080: .db $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00	; P
  142 D1:BA0F 7C C6 C6 C6 
              D6 DE 7C 06 Char081: .db $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06	; Q
  143 D1:BA17 FC C6 C6 FC 
              D8 CC C6 00 Char082: .db $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00	; R
  144 D1:BA1F 7C C6 C0 7C 
              06 C6 7C 00 Char083: .db $7C,$C6,$C0,$7C,$06,$C6,$7C,$00	; S
  145 D1:BA27 FF 18 18 18 
              18 18 18 00 Char084: .db $FF,$18,$18,$18,$18,$18,$18,$00	; T
  146 D1:BA2F C6 C6 C6 C6 
              C6 C6 FE 00 Char085: .db $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00	; U
  147 D1:BA37 C6 C6 C6 C6 
              C6 7C 38 00 Char086: .db $C6,$C6,$C6,$C6,$C6,$7C,$38,$00	; V
  148 D1:BA3F C6 C6 C6 C6 
              D6 FE 6C 00 Char087: .db $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00	; W
  149 D1:BA47 C6 C6 6C 38 
              6C C6 C6 00 Char088: .db $C6,$C6,$6C,$38,$6C,$C6,$C6,$00	; X
  150 D1:BA4F C6 C6 C6 7C 
              18 30 E0 00 Char089: .db $C6,$C6,$C6,$7C,$18,$30,$E0,$00	; Y
  151 D1:BA57 FE 06 0C 18 
              30 60 FE 00 Char090: .db $FE,$06,$0C,$18,$30,$60,$FE,$00	; Z
  152 D1:BA5F F0 C0 C0 C0 
              C0 C0 F0 00 Char091: .db $F0,$C0,$C0,$C0,$C0,$C0,$F0,$00	; [
  153 D1:BA67 C0 60 30 18 
              0C 06 02 00 Char092: .db $C0,$60,$30,$18,$0C,$06,$02,$00	; \
  154 D1:BA6F F0 30 30 30 
              30 30 F0 00 Char093: .db $F0,$30,$30,$30,$30,$30,$F0,$00	; ]
  155 D1:BA77 10 38 6C C6 
              00 00 00 00 Char094: .db $10,$38,$6C,$C6,$00,$00,$00,$00	; ^
  156 D1:BA7F 00 00 00 00 
              00 00 00 FF Char095: .db $00,$00,$00,$00,$00,$00,$00,$FF	; _
  157 D1:BA87 C0 C0 60 00 
              00 00 00 00 Char096: .db $C0,$C0,$60,$00,$00,$00,$00,$00	; `
  158 D1:BA8F 00 00 7C 06 
              7E C6 7E 00 Char097: .db $00,$00,$7C,$06,$7E,$C6,$7E,$00	; a
  159 D1:BA97 C0 C0 C0 FC 
              C6 C6 FC 00 Char098: .db $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00	; b
  160 D1:BA9F 00 00 7C C6 
              C0 C6 7C 00 Char099: .db $00,$00,$7C,$C6,$C0,$C6,$7C,$00	; c
  161 D1:BAA7 06 06 06 7E 
              C6 C6 7E 00 Char100: .db $06,$06,$06,$7E,$C6,$C6,$7E,$00	; d
  162 D1:BAAF 00 00 7C C6 
              FE C0 7C 00 Char101: .db $00,$00,$7C,$C6,$FE,$C0,$7C,$00	; e
  163 D1:BAB7 1C 36 30 78 
              30 30 78 00 Char102: .db $1C,$36,$30,$78,$30,$30,$78,$00	; f
  164 D1:BABF 00 00 7E C6 
              C6 7E 06 FC Char103: .db $00,$00,$7E,$C6,$C6,$7E,$06,$FC	; g
  165 D1:BAC7 C0 C0 FC C6 
              C6 C6 C6 00 Char104: .db $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00	; h
  166 D1:BACF 60 00 E0 60 
              60 60 F0 00 Char105: .db $60,$00,$E0,$60,$60,$60,$F0,$00	; i
  167 D1:BAD7 06 00 06 06 
              06 06 C6 7C Char106: .db $06,$00,$06,$06,$06,$06,$C6,$7C	; j
  168 D1:BADF C0 C0 CC D8 
              F8 CC C6 00 Char107: .db $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00	; k
  169 D1:BAE7 E0 60 60 60 
              60 60 F0 00 Char108: .db $E0,$60,$60,$60,$60,$60,$F0,$00	; l
  170 D1:BAEF 00 00 CC FE 
              FE D6 D6 00 Char109: .db $00,$00,$CC,$FE,$FE,$D6,$D6,$00	; m
  171 D1:BAF7 00 00 FC C6 
              C6 C6 C6 00 Char110: .db $00,$00,$FC,$C6,$C6,$C6,$C6,$00	; n
  172 D1:BAFF 00 00 7C C6 
              C6 C6 7C 00 Char111: .db $00,$00,$7C,$C6,$C6,$C6,$7C,$00	; o
  173 D1:BB07 00 00 FC C6 
              C6 FC C0 C0 Char112: .db $00,$00,$FC,$C6,$C6,$FC,$C0,$C0	; p
  174 D1:BB0F 00 00 7E C6 
              C6 7E 06 06 Char113: .db $00,$00,$7E,$C6,$C6,$7E,$06,$06	; q
  175 D1:BB17 00 00 FC C6 
              C0 C0 C0 00 Char114: .db $00,$00,$FC,$C6,$C0,$C0,$C0,$00	; r
  176 D1:BB1F 00 00 7E C0 
              7C 06 FC 00 Char115: .db $00,$00,$7E,$C0,$7C,$06,$FC,$00	; s
  177 D1:BB27 30 30 FC 30 
              30 30 1C 00 Char116: .db $30,$30,$FC,$30,$30,$30,$1C,$00	; t
  178 D1:BB2F 00 00 C6 C6 
              C6 C6 7E 00 Char117: .db $00,$00,$C6,$C6,$C6,$C6,$7E,$00	; u
  179 D1:BB37 00 00 C6 C6 
              C6 7C 38 00 Char118: .db $00,$00,$C6,$C6,$C6,$7C,$38,$00	; v
  180 D1:BB3F 00 00 C6 C6 
              D6 FE 6C 00 Char119: .db $00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
  181 D1:BB47 00 00 C6 6C 
              38 6C C6 00 Char120: .db $00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
  182 D1:BB4F 00 00 C6 C6 
              C6 7E 06 FC Char121: .db $00,$00,$C6,$C6,$C6,$7E,$06,$FC	; y
  183 D1:BB57 00 00 FE 0C 
              38 60 FE 00 Char122: .db $00,$00,$FE,$0C,$38,$60,$FE,$00	; z
  184 D1:BB5F 1C 30 30 E0 
              30 30 1C 00 Char123: .db $1C,$30,$30,$E0,$30,$30,$1C,$00	; {
  185 D1:BB67 C0 C0 C0 00 
              C0 C0 C0 00 Char124: .db $C0,$C0,$C0,$00,$C0,$C0,$C0,$00	; |
  186 D1:BB6F E0 30 30 1C 
              30 30 E0 00 Char125: .db $E0,$30,$30,$1C,$30,$30,$E0,$00	; }
  187 D1:BB77 76 DC 00 00 
              00 00 00 00 Char126: .db $76,$DC,$00,$00,$00,$00,$00,$00	; ~
  188 D1:BB7F 00 10 38 6C 
              C6 C6 FE 00 Char127: .db $00,$10,$38,$6C,$C6,$C6,$FE,$00	; .
Listing for file "ICE.asm"
  458 D1:BB87 -  -  -  -  #include "programs.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\programs.asm"
    1 D1:BB87 -  -  -  -  FindNextGoodVar:
    2 D1:BB87 ED 5B 9A 25 
              D0 -  -  -  	ld de, (pTemp)
    3 D1:BB8C CD 3C 01 02 	call _CpHLDE
    4 D1:BB90 20 02 -  -  	jr nz, FindContinue
    5 D1:BB92 3C -  -  -  	inc a									; return nz
    6 D1:BB93 C9 -  -  -  	ret
    7 D1:BB94 -  -  -  -  FindContinue:
    8 D1:BB94 7E -  -  -  	ld a, (hl)
    9 D1:BB95 2B -  -  -  	dec hl
   10 D1:BB96 2B -  -  -  	dec hl
   11 D1:BB97 2B -  -  -  	dec hl
   12 D1:BB98 FE 05 -  -  	cp ProgObj
   13 D1:BB9A 28 04 -  -  	jr z, FindGoodProgram
   14 D1:BB9C FE 06 -  -  	cp ProtProgObj
   15 D1:BB9E 20 43 -  -  	jr nz, FindWrongProgram
   16 D1:BBA0 -  -  -  -  FindGoodProgram:
   17 D1:BBA0 5E -  -  -  	ld e, (hl)
   18 D1:BBA1 2B -  -  -  	dec hl
   19 D1:BBA2 56 -  -  -  	ld d, (hl)
   20 D1:BBA3 2B -  -  -  	dec hl
   21 D1:BBA4 7E -  -  -  	ld a, (hl)
   22 D1:BBA5 CD 68 1D 02 	call _SetDEUToA
   23 D1:BBA9 FE D0 -  -  	cp 0D0h
   24 D1:BBAB 30 0C -  -  	jr nc, +_
   25 D1:BBAD E5 -  -  -  	push hl
   26 D1:BBAE EB -  -  -  		ex de, hl
   27 D1:BBAF 11 09 00 00 		ld de, 9
   28 D1:BBB3 19 -  -  -  		add hl, de
   29 D1:BBB4 5E -  -  -  		ld e, (hl)
   30 D1:BBB5 1C -  -  -  		inc e
   31 D1:BBB6 19 -  -  -  		add hl, de
   32 D1:BBB7 EB -  -  -  		ex de, hl
   33 D1:BBB8 E1 -  -  -  	pop hl
   34 D1:BBB9 13 -  -  -  _:	inc de
   35 D1:BBBA 13 -  -  -  	inc de
   36 D1:BBBB 1A -  -  -  	ld a, (de)
   37 D1:BBBC FE 2C -  -  	cp tii
   38 D1:BBBE 20 25 -  -  	jr nz, FindWrongProgram2
   39 D1:BBC0 2B -  -  -  	dec hl
   40 D1:BBC1 D5 -  -  -  	push de
   41 D1:BBC2 E5 -  -  -  		push hl
   42 D1:BBC3 2A CC EB D1 			ld hl, (ProgramNamesPtr)
   43 D1:BBC7 11 08 00 00 			ld de, 8
   44 D1:BBCB 19 -  -  -  			add hl, de
   45 D1:BBCC 22 CC EB D1 			ld (ProgramNamesPtr), hl
   46 D1:BBD0 B7 -  -  -  			or a
   47 D1:BBD1 ED 52 -  -  			sbc hl, de
   48 D1:BBD3 EB -  -  -  			ex de, hl
   49 D1:BBD4 E1 -  -  -  		pop hl
   50 D1:BBD5 46 -  -  -  		ld b, (hl)
   51 D1:BBD6 48 -  -  -  		ld c, b
   52 D1:BBD7 2B -  -  -  		dec hl
   53 D1:BBD8 -  -  -  -  FindCopyProgName:
   54 D1:BBD8 7E -  -  -  		ld a, (hl)
   55 D1:BBD9 12 -  -  -  		ld (de), a
   56 D1:BBDA 2B -  -  -  		dec hl
   57 D1:BBDB 13 -  -  -  		inc de
   58 D1:BBDC 10 FA -  -  		djnz FindCopyProgName
   59 D1:BBDE AF -  -  -  		xor a
   60 D1:BBDF 12 -  -  -  		ld (de), a
   61 D1:BBE0 D1 -  -  -  	pop de
   62 D1:BBE1 BF -  -  -  	cp a
   63 D1:BBE2 C9 -  -  -  	ret
   64 D1:BBE3 -  -  -  -  FindWrongProgram:
   65 D1:BBE3 2B -  -  -  	dec hl
   66 D1:BBE4 2B -  -  -  	dec hl
   67 D1:BBE5 -  -  -  -  FindWrongProgram2:
   68 D1:BBE5 2B -  -  -  	dec hl
   69 D1:BBE6 46 -  -  -  	ld b, (hl)
   70 D1:BBE7 2B -  -  -  	dec hl
   71 D1:BBE8 -  -  -  -  FindSkipProgramName:
   72 D1:BBE8 2B -  -  -  	dec hl
   73 D1:BBE9 10 FD -  -  	djnz FindSkipProgramName
   74 D1:BBEB 18 9A -  -  	jr FindNextGoodVar
Listing for file "ICE.asm"
  459 D1:BBED -  -  -  -  #include "hooks.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\hooks.asm"
    1 D1:BBED -  -  -  -  InstallHooks:
    2 D1:BBED 21 44 EC D1 	ld hl, ICEAppvar
    3 D1:BBF1 CD 20 03 02 	call _Mov9ToOP1
    4 D1:BBF5 CD 0C 05 02 	call _ChkFindSym
    5 D1:BBF9 38 0D -  -  	jr c, +_
    6 D1:BBFB CD 48 14 02 	call _Arc_Unarc
    7 D1:BBFF 01 05 00 00 	ld bc, 5
    8 D1:BC03 09 -  -  -  	add hl, bc
    9 D1:BC04 CD 88 05 02 	call _DelVar
   10 D1:BC08 21 28 08 00 _:	ld hl, Hooks_end - KeyHook_start
   11 D1:BC0C CD 30 13 02 	call _CreateAppVar
   12 D1:BC10 13 -  -  -  	inc de
   13 D1:BC11 13 -  -  -  	inc de
   14 D1:BC12 21 43 BC D1 	ld hl, KeyHook_start
   15 D1:BC16 01 28 08 00 	ld bc, Hooks_end - KeyHook_start
   16 D1:BC1A ED B0 -  -  	ldir
   17 D1:BC1C CD C8 02 02 	call _OP4ToOP1
   18 D1:BC20 CD 48 14 02 	call _Arc_Unarc
   19 D1:BC24 CD 0C 05 02 	call _ChkFindSym
   20 D1:BC28 21 13 00 00 	ld hl, 19														; archived program header+VAT entry
   21 D1:BC2C 19 -  -  -  	add hl, de
   22 D1:BC2D CD CC 13 02 	call _SetGetKeyHook
   23 D1:BC31 -  -  -  -  	
   24 D1:BC31 11 4F 07 00 	ld de, KeyHook_end - KeyHook_start
   25 D1:BC35 19 -  -  -  	add hl, de
   26 D1:BC36 CD F8 13 02 	call _SetTokenHook
   27 D1:BC3A -  -  -  -  	
   28 D1:BC3A 11 2B 00 00 	ld de, TokenHook_end - TokenHook_start
   29 D1:BC3E 19 -  -  -  	add hl, de
   30 D1:BC3F C3 C4 13 02 	jp _SetCursorhook
   31 D1:BC43 -  -  -  -  	
   32 D1:BC43 -  -  -  -  KeyHook_start:
   33 D1:BC43 83 -  -  -  	.db 83h
   34 D1:BC44 B7 -  -  -  	or a
   35 D1:BC45 C8 -  -  -  	ret z
   36 D1:BC46 47 -  -  -  	ld b, a
   37 D1:BC47 3A E0 07 D0 	ld a, (cxCurApp)
   38 D1:BC4B FE 46 -  -  	cp cxPrgmEdit
   39 D1:BC4D 78 -  -  -  	ld a, b
   40 D1:BC4E C0 -  -  -  	ret nz
   41 D1:BC4F F5 -  -  -  	push af
   42 D1:BC50 CD A0 20 02 		call _os_ClearStatusBarLow
   43 D1:BC54 FD CB B0 86 		res displayed_det, (iy+fAlways1)
   44 D1:BC58 F1 -  -  -  	pop af
   45 D1:BC59 FE 5A -  -  	cp kTrace
   46 D1:BC5B C0 -  -  -  	ret nz
   47 D1:BC5C -  -  -  -  DisplayCustomTokensAndCFunctions:
   48 D1:BC5C CD A8 08 02 	call _CursorOff
   49 D1:BC60 16 00 -  -  	ld d, 0
   50 D1:BC62 -  -  -  -  DisplayTabWithTokens:
   51 D1:BC62 D5 -  -  -  	push de
   52 D1:BC63 CD 08 08 02 		call _ClrLCDFull
   53 D1:BC67 D1 -  -  -  	pop de
   54 D1:BC68 21 1E 00 00 	ld hl, 30
   55 D1:BC6C 22 D5 08 D0 	ld (penRow), hl
   56 D1:BC70 21 0C 00 00 	ld hl, 12
   57 D1:BC74 22 D2 08 D0 	ld (penCol), hl
   58 D1:BC78 06 00 -  -  	ld b, 0
   59 D1:BC7A 7A -  -  -  	ld a, d
   60 D1:BC7B 1E 03 -  -  	ld e, 3
   61 D1:BC7D ED 5C -  -  	mlt de
   62 D1:BC7F 21 19 06 00 	ld hl, TabData - KeyHook_start
   63 D1:BC83 19 -  -  -  	add hl, de
   64 D1:BC84 ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
   65 D1:BC89 19 -  -  -  	add hl, de
   66 D1:BC8A ED 27 -  -  	ld hl, (hl)
   67 D1:BC8C 19 -  -  -  	add hl, de
   68 D1:BC8D 57 -  -  -  	ld d, a
   69 D1:BC8E 1E 00 -  -  	ld e, 0
   70 D1:BC90 18 0F -  -  	jr DisplayTokensLoop
   71 D1:BC92 -  -  -  -  KeyIsLeft:
   72 D1:BC92 7A -  -  -  	ld a, d
   73 D1:BC93 B7 -  -  -  	or a
   74 D1:BC94 28 61 -  -  	jr z, KeyLoop
   75 D1:BC96 15 -  -  -  	dec d
   76 D1:BC97 18 C9 -  -  	jr DisplayTabWithTokens
   77 D1:BC99 -  -  -  -  KeyIsRight:
   78 D1:BC99 7A -  -  -  	ld a, d
   79 D1:BC9A FE 05 -  -  	cp 5
   80 D1:BC9C 28 59 -  -  	jr z, KeyLoop
   81 D1:BC9E 14 -  -  -  	inc d
   82 D1:BC9F 18 C1 -  -  	jr DisplayTabWithTokens
   83 D1:BCA1 -  -  -  -  DisplayTokensLoop:
   84 D1:BCA1 78 -  -  -  	ld a, b
   85 D1:BCA2 FE 10 -  -  	cp 16
   86 D1:BCA4 28 22 -  -  	jr z, StopDisplayingTokens
   87 D1:BCA6 04 -  -  -  	inc b
   88 D1:BCA7 CD 34 08 02 	call _VPutS
   89 D1:BCAB E5 -  -  -  	push hl
   90 D1:BCAC D5 -  -  -  		push de
   91 D1:BCAD 2A D5 08 D0 			ld hl, (penRow)
   92 D1:BCB1 11 0D 00 00 			ld de, 13
   93 D1:BCB5 19 -  -  -  			add hl, de
   94 D1:BCB6 22 D5 08 D0 			ld (penRow), hl
   95 D1:BCBA 21 0C 00 00 			ld hl, 12
   96 D1:BCBE 22 D2 08 D0 			ld (penCol), hl
   97 D1:BCC2 D1 -  -  -  		pop de
   98 D1:BCC3 E1 -  -  -  	pop hl
   99 D1:BCC4 7E -  -  -  	ld a, (hl)
  100 D1:BCC5 B7 -  -  -  	or a
  101 D1:BCC6 20 D9 -  -  	jr nz, DisplayTokensLoop
  102 D1:BCC8 -  -  -  -  StopDisplayingTokens:
  103 D1:BCC8 21 01 00 00 	ld hl, 1
  104 D1:BCCC 22 D2 08 D0 	ld (penCol), hl
  105 D1:BCD0 -  -  -  -  GetRightCustomToken:
  106 D1:BCD0 7B -  -  -  	ld a, e
  107 D1:BCD1 42 -  -  -  	ld b, d
  108 D1:BCD2 16 0D -  -  	ld d, 13
  109 D1:BCD4 ED 5C -  -  	mlt de
  110 D1:BCD6 21 1E 00 00 	ld hl, 30
  111 D1:BCDA 19 -  -  -  	add hl, de
  112 D1:BCDB 50 -  -  -  	ld d, b
  113 D1:BCDC 5F -  -  -  	ld e, a
  114 D1:BCDD 22 D5 08 D0 	ld (penRow), hl
  115 D1:BCE1 21 01 00 00 	ld hl, 1
  116 D1:BCE5 22 D2 08 D0 	ld (penCol), hl
  117 D1:BCE9 E5 -  -  -  	push hl
  118 D1:BCEA D5 -  -  -  		push de
  119 D1:BCEB 3E 3E -  -  			ld a, '>'
  120 D1:BCED CD 30 08 02 			call _VPutMap
  121 D1:BCF1 D1 -  -  -  		pop de
  122 D1:BCF2 E1 -  -  -  	pop hl
  123 D1:BCF3 22 D2 08 D0 	ld (penCol), hl
  124 D1:BCF7 -  -  -  -  KeyLoop:
  125 D1:BCF7 CD 4C 01 02 	call _GetCSC
  126 D1:BCFB B7 -  -  -  	or a
  127 D1:BCFC 28 F9 -  -  	jr z, KeyLoop
  128 D1:BCFE FE 02 -  -  	cp skLeft
  129 D1:BD00 28 90 -  -  	jr z, KeyIsLeft
  130 D1:BD02 FE 03 -  -  	cp skRight
  131 D1:BD04 28 93 -  -  	jr z, KeyIsRight
  132 D1:BD06 FE 04 -  -  	cp skUp
  133 D1:BD08 20 1B -  -  	jr nz, KeyNotUp
  134 D1:BD0A 7B -  -  -  	ld a, e
  135 D1:BD0B B7 -  -  -  	or a
  136 D1:BD0C 28 E9 -  -  	jr z, KeyLoop
  137 D1:BD0E 1D -  -  -  	dec e
  138 D1:BD0F -  -  -  -  EraseCursor:
  139 D1:BD0F D5 -  -  -  	push de
  140 D1:BD10 3E 20 -  -  		ld a, ' '
  141 D1:BD12 CD 30 08 02 		call _VPutMap
  142 D1:BD16 3E 20 -  -  		ld a, ' '
  143 D1:BD18 CD 30 08 02 		call _VPutMap
  144 D1:BD1C 3E 20 -  -  		ld a, ' '
  145 D1:BD1E CD 30 08 02 		call _VPutMap
  146 D1:BD22 D1 -  -  -  	pop de
  147 D1:BD23 18 AB -  -  	jr GetRightCustomToken
  148 D1:BD25 -  -  -  -  KeyNotUp:
  149 D1:BD25 FE 01 -  -  	cp skDown
  150 D1:BD27 20 12 -  -  	jr nz, KeyNotDown
  151 D1:BD29 7A -  -  -  	ld a, d
  152 D1:BD2A FE 05 -  -  	cp 5
  153 D1:BD2C 7B -  -  -  	ld a, e
  154 D1:BD2D 20 04 -  -  	jr nz, +_
  155 D1:BD2F FE 02 -  -  	cp (AMOUNT_OF_C_FUNCTIONS + AMOUNT_OF_CUSTOM_TOKENS)%16 - 1
  156 D1:BD31 28 C4 -  -  	jr z, KeyLoop
  157 D1:BD33 7B -  -  -  _:	ld a, e
  158 D1:BD34 FE 0F -  -  	cp 16-1
  159 D1:BD36 28 BF -  -  	jr z, KeyLoop
  160 D1:BD38 1C -  -  -  	inc e
  161 D1:BD39 18 D4 -  -  	jr EraseCursor
  162 D1:BD3B -  -  -  -  KeyNotDown:
  163 D1:BD3B FE 0F -  -  	cp skClear
  164 D1:BD3D 28 75 -  -  	jr z, KeyIsClear
  165 D1:BD3F FE 09 -  -  	cp skEnter
  166 D1:BD41 20 B4 -  -  	jr nz, KeyLoop
  167 D1:BD43 7B -  -  -  	ld a, e
  168 D1:BD44 1E 10 -  -  	ld e, 16
  169 D1:BD46 ED 5C -  -  	mlt de
  170 D1:BD48 83 -  -  -  	add a, e
  171 D1:BD49 D6 04 -  -  	sub AMOUNT_OF_CUSTOM_TOKENS
  172 D1:BD4B 38 4F -  -  	jr c, InsertCustomToken
  173 D1:BD4D 21 1F EA D0 	ld hl, saveSScreen
  174 D1:BD51 36 B3 -  -  	ld (hl), tDet
  175 D1:BD53 23 -  -  -  	inc hl
  176 D1:BD54 FE 0A -  -  	cp 10
  177 D1:BD56 38 17 -  -  	jr c, +_
  178 D1:BD58 57 -  -  -  	ld d, a
  179 D1:BD59 1E 0A -  -  	ld e, 10
  180 D1:BD5B AF -  -  -  	xor a
  181 D1:BD5C 06 08 -  -  	ld b, 8
  182 D1:BD5E -  -  -  -  _loop:
  183 D1:BD5E CB 22 -  -  	sla d
  184 D1:BD60 17 -  -  -  	rla
  185 D1:BD61 BB -  -  -  	cp e
  186 D1:BD62 38 02 -  -  	jr c, $+4
  187 D1:BD64 93 -  -  -  	sub e
  188 D1:BD65 14 -  -  -  	inc d
  189 D1:BD66 10 F6 -  -  	djnz _loop
  190 D1:BD68 5F -  -  -  	ld e, a
  191 D1:BD69 7A -  -  -  	ld a, d
  192 D1:BD6A C6 30 -  -  	add a, t0
  193 D1:BD6C 77 -  -  -  	ld (hl), a
  194 D1:BD6D 23 -  -  -  	inc hl
  195 D1:BD6E 7B -  -  -  	ld a, e
  196 D1:BD6F C6 30 -  -  _:	add a, t0
  197 D1:BD71 77 -  -  -  	ld (hl), a
  198 D1:BD72 23 -  -  -  	inc hl
  199 D1:BD73 36 00 -  -  	ld (hl), 0
  200 D1:BD75 21 1F EA D0 	ld hl, saveSScreen
  201 D1:BD79 -  -  -  -  InsertCFunctionLoop:
  202 D1:BD79 7E -  -  -  	ld a, (hl)
  203 D1:BD7A B7 -  -  -  	or a
  204 D1:BD7B 28 37 -  -  	jr z, BufferSearch
  205 D1:BD7D ED 5B 3D 24 
              D0 -  -  -  	ld de, (editTail)
  206 D1:BD82 1A -  -  -  	ld a, (de)
  207 D1:BD83 FE 3F -  -  	cp tEnter
  208 D1:BD85 16 00 -  -  	ld d, 0
  209 D1:BD87 5E -  -  -  	ld e, (hl)
  210 D1:BD88 28 09 -  -  	jr z, +_
  211 D1:BD8A E5 -  -  -  	push hl
  212 D1:BD8B CD 08 0D 02 		call _BufReplace
  213 D1:BD8F E1 -  -  -  	pop hl
  214 D1:BD90 23 -  -  -  	inc hl
  215 D1:BD91 18 E6 -  -  	jr InsertCFunctionLoop
  216 D1:BD93 E5 -  -  -  _:	push hl
  217 D1:BD94 CD 00 0D 02 		call _BufInsert
  218 D1:BD98 E1 -  -  -  	pop hl
  219 D1:BD99 23 -  -  -  	inc hl
  220 D1:BD9A 18 DD -  -  	jr InsertCFunctionLoop
  221 D1:BD9C -  -  -  -  InsertCustomToken:
  222 D1:BD9C C6 0E -  -  	add a, 10+AMOUNT_OF_CUSTOM_TOKENS
  223 D1:BD9E 5F -  -  -  	ld e, a
  224 D1:BD9F 16 62 -  -  	ld d, tVarOut
  225 D1:BDA1 2A 3A 24 D0 	ld hl, (editCursor)
  226 D1:BDA5 7E -  -  -  	ld a, (hl)
  227 D1:BDA6 FE 3F -  -  	cp tEnter
  228 D1:BDA8 28 06 -  -  	jr z, +_
  229 D1:BDAA CD 08 0D 02 	call _BufReplace
  230 D1:BDAE 18 04 -  -  	jr BufferSearch
  231 D1:BDB0 CD 00 0D 02 _:	call _BufInsert
  232 D1:BDB4 -  -  -  -  KeyIsClear:
  233 D1:BDB4 -  -  -  -  BufferSearch:
  234 D1:BDB4 01 00 00 00 	ld bc, 0
  235 D1:BDB8 CD F8 0C 02 _:	call _BufLeft
  236 D1:BDBC 28 0C -  -  	jr z, BufferFound
  237 D1:BDBE 7B -  -  -  	ld a, e
  238 D1:BDBF FE 3F -  -  	cp tEnter
  239 D1:BDC1 28 03 -  -  	jr z, +_
  240 D1:BDC3 03 -  -  -  	inc bc
  241 D1:BDC4 18 F2 -  -  	jr -_
  242 D1:BDC6 CD FC 0C 02 _:	call _BufRight
  243 D1:BDCA -  -  -  -  BufferFound:
  244 D1:BDCA C5 -  -  -  	push bc
  245 D1:BDCB CD 08 08 02 		call _ClrLCDFull
  246 D1:BDCF CD 18 08 02 		call _ClrTxtShd
  247 D1:BDD3 11 46 07 00 		ld de, CustomTokensProgramText - KeyHook_start
  248 D1:BDD7 2A DB 25 D0 		ld hl, (rawKeyHookPtr)
  249 D1:BDDB 19 -  -  -  		add hl, de
  250 D1:BDDC AF -  -  -  		xor a
  251 D1:BDDD 32 96 05 D0 		ld (curCol), a
  252 D1:BDE1 32 95 05 D0 		ld (curRow), a
  253 D1:BDE5 CD C0 07 02 		call _PutS
  254 D1:BDE9 21 5B 06 D0 		ld hl, progToEdit
  255 D1:BDED 06 08 -  -  		ld b, 8
  256 D1:BDEF 7E -  -  -  _:		ld a, (hl)
  257 D1:BDF0 B7 -  -  -  		or a
  258 D1:BDF1 28 07 -  -  		jr z, +_
  259 D1:BDF3 CD B8 07 02 		call _PutC
  260 D1:BDF7 23 -  -  -  		inc hl
  261 D1:BDF8 10 F5 -  -  		djnz -_
  262 D1:BDFA CD F0 07 02 _:		call _NewLine
  263 D1:BDFE 3E 3A -  -  		ld a, ':'
  264 D1:BE00 CD B8 07 02 		call _PutC
  265 D1:BE04 CD 68 0D 02 		call _DispEOW
  266 D1:BE08 C1 -  -  -  	pop bc
  267 D1:BE09 -  -  -  -  MoveCursorOnce:
  268 D1:BE09 78 -  -  -  	ld a, b
  269 D1:BE0A B1 -  -  -  	or c
  270 D1:BE0B 28 07 -  -  	jr z, ReturnToEditor
  271 D1:BE0D CD 4C 0D 02 	call _CursorRight
  272 D1:BE11 0B -  -  -  	dec bc
  273 D1:BE12 18 F5 -  -  	jr MoveCursorOnce
  274 D1:BE14 -  -  -  -  ReturnToEditor:
  275 D1:BE14 CD B0 08 02 	call _CursorOn
  276 D1:BE18 3C -  -  -  	inc a																	; reset zero flag
  277 D1:BE19 3E 00 -  -  	ld a, 0
  278 D1:BE1B C9 -  -  -  	ret
  279 D1:BE1C -  -  -  -  CustomTokensData:
  280 D1:BE1C -  -  -  -  Tab1:
  281 D1:BE1C 45 78 65 63 
              48 65 78 28 
              00 -  -  -  C1:		.db "ExecHex(", 0
  282 D1:BE25 44 65 66 69 
              6E 65 53 70 
              72 69 74 65 
              28 00 -  -  C2:		.db "DefineSprite(", 0
  283 D1:BE33 43 61 6C 6C 
              20 00 -  -  C3:		.db "Call ", 0
  284 D1:BE39 43 6F 6D 70 
              69 6C 65 50 
              72 67 6D 28 
              00 -  -  -  C4:		.db "CompilePrgm(", 0
  285 D1:BE46 -  -  -  -  
  286 D1:BE46 -  -  -  -  #define AMOUNT_OF_C_FUNCTIONS 79
  287 D1:BE46 -  -  -  -  
  288 D1:BE46 42 65 67 69 
              6E 00 -  -  C6:		.db "Begin", 0
  289 D1:BE4C 45 6E 64 00 C7:		.db "End", 0
  290 D1:BE50 53 65 74 43 
              6F 6C 6F 72 
              00 -  -  -  C8:		.db "SetColor", 0
  291 D1:BE59 53 65 74 44 
              65 66 61 75 
              6C 74 50 61 
              6C 65 74 74 
              65 00 -  -  C9:		.db "SetDefaultPalette", 0
  292 D1:BE6B 53 65 74 50 
              61 6C 65 74 
              74 65 00 -  C10:	.db "SetPalette", 0
  293 D1:BE76 46 69 6C 6C 
              53 63 72 65 
              65 6E 00 -  C11:	.db "FillScreen", 0
  294 D1:BE81 53 65 74 50 
              69 78 65 6C 
              00 -  -  -  C12:	.db "SetPixel", 0
  295 D1:BE8A 47 65 74 50 
              69 78 65 6C 
              00 -  -  -  C13:	.db "GetPixel", 0
  296 D1:BE93 47 65 74 44 
              72 61 77 00 C14:	.db "GetDraw", 0
  297 D1:BE9B 53 65 74 44 
              72 61 77 00 C15:	.db "SetDraw", 0
  298 D1:BEA3 53 77 61 70 
              44 72 61 77 
              00 -  -  -  C16:	.db "SwapDraw", 0
  299 D1:BEAC 42 6C 69 74 
              00 -  -  -  C17:	.db "Blit", 0
  300 D1:BEB1 -  -  -  -  Tab2:
  301 D1:BEB1 42 6C 69 74 
              4C 69 6E 65 
              73 00 -  -  C18:	.db "BlitLines", 0
  302 D1:BEBB 42 6C 69 74 
              41 72 65 61 
              00 -  -  -  C19:	.db "BlitArea", 0
  303 D1:BEC4 50 72 69 6E 
              74 43 68 61 
              72 00 -  -  C20:	.db "PrintChar", 0
  304 D1:BECE 50 72 69 6E 
              74 49 6E 74 
              00 -  -  -  C21:	.db "PrintInt", 0
  305 D1:BED7 50 72 69 6E 
              74 55 49 6E 
              74 00 -  -  C22:	.db "PrintUInt", 0
  306 D1:BEE1 50 72 69 6E 
              74 53 74 72 
              69 6E 67 00 C23:	.db "PrintString", 0
  307 D1:BEED 50 72 69 6E 
              74 53 74 72 
              69 6E 67 58 
              59 00 -  -  C24:	.db "PrintStringXY", 0
  308 D1:BEFB 53 65 74 54 
              65 78 74 58 
              59 00 -  -  C25:	.db "SetTextXY", 0
  309 D1:BF05 53 65 74 54 
              65 78 74 42 
              47 43 6F 6C 
              6F 72 00 -  C26:	.db "SetTextBGColor", 0
  310 D1:BF14 53 65 74 54 
              65 78 74 46 
              47 43 6F 6C 
              6F 72 00 -  C27:	.db "SetTextFGColor", 0
  311 D1:BF23 53 65 74 54 
              65 78 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C28:	.db "SetTextTransparentColor", 0
  312 D1:BF3B 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 44 61 74 
              61 00 -  -  C29:	.db "SetCustomFontData", 0
  313 D1:BF4D 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 53 70 61 
              63 69 6E 67 
              00 -  -  -  C30:	.db "SetCustomFontSpacing", 0
  314 D1:BF62 53 65 74 4D 
              6F 6E 6F 73 
              70 61 63 65 
              46 6F 6E 74 
              00 -  -  -  C31:	.db "SetMonospaceFont", 0
  315 D1:BF73 47 65 74 53 
              74 72 69 6E 
              67 57 69 64 
              74 68 00 -  C32:	.db "GetStringWidth", 0
  316 D1:BF82 47 65 74 43 
              68 61 72 57 
              69 64 74 68 
              00 -  -  -  C33:	.db "GetCharWidth", 0
  317 D1:BF8F -  -  -  -  Tab3:
  318 D1:BF8F 47 65 74 54 
              65 78 74 58 
              00 -  -  -  C34:	.db "GetTextX", 0
  319 D1:BF98 47 65 74 54 
              65 78 74 59 
              00 -  -  -  C35:	.db "GetTextY", 0
  320 D1:BFA1 4C 69 6E 65 
              00 -  -  -  C36:	.db "Line", 0
  321 D1:BFA6 48 6F 72 69 
              7A 4C 69 6E 
              65 00 -  -  C37:	.db "HorizLine", 0
  322 D1:BFB0 56 65 72 74 
              4C 69 6E 65 
              00 -  -  -  C38:	.db "VertLine", 0
  323 D1:BFB9 43 69 72 63 
              6C 65 00 -  C39:	.db "Circle", 0
  324 D1:BFC0 46 69 6C 6C 
              43 69 72 63 
              6C 65 00 -  C40:	.db "FillCircle", 0
  325 D1:BFCB 52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C41:	.db "Rectangle", 0
  326 D1:BFD5 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C42:	.db "FillRectangle", 0
  327 D1:BFE3 4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C43:	.db "Line_NoClip", 0
  328 D1:BFEF 48 6F 72 69 
              7A 4C 69 6E 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C44:	.db "HorizLine_NoClip", 0
  329 D1:C000 56 65 72 74 
              4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C45:	.db "VertLine_NoClip", 0
  330 D1:C010 46 69 6C 6C 
              43 69 72 63 
              6C 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C46:	.db "FillCircle_NoClip", 0
  331 D1:C022 52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C47:	.db "Rectangle_NoClip", 0
  332 D1:C033 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C48:	.db "FillRectangle_NoClip", 0
  333 D1:C048 53 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C49:	.db "SetClipRegion", 0
  334 D1:C056 -  -  -  -  Tab4:
  335 D1:C056 47 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C50:	.db "GetClipRegion", 0
  336 D1:C064 53 68 69 66 
              74 44 6F 77 
              6E 00 -  -  C51:	.db "ShiftDown", 0
  337 D1:C06E 53 68 69 66 
              74 55 70 00 C52:	.db "ShiftUp", 0
  338 D1:C076 53 68 69 66 
              74 4C 65 66 
              74 00 -  -  C53:	.db "ShiftLeft", 0
  339 D1:C080 53 68 69 66 
              74 52 69 67 
              68 74 00 -  C54:	.db "ShiftRight", 0
  340 D1:C08B 54 69 6C 65 
              6D 61 70 00 C55:	.db "Tilemap", 0
  341 D1:C093 54 69 6C 65 
              6D 61 70 5F 
              4E 6F 43 6C 
              69 70 00 -  C56:	.db "Tilemap_NoClip", 0
  342 D1:C0A2 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 00 -  C57:	.db "TransparentTilemap", 0
  343 D1:C0B5 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C58:	.db "TransparentTilemap_NoClip", 0
  344 D1:C0CF 54 69 6C 65 
              50 74 72 00 C59:	.db "TilePtr", 0
  345 D1:C0D7 54 69 6C 65 
              50 74 72 4D 
              61 70 70 65 
              64 00 -  -  C60:	.db "TilePtrMapped", 0
  346 D1:C0E5 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              00 -  -  -  C61:	.db "LZDecompress", 0
  347 D1:C0F2 41 6C 6C 6F 
              63 53 70 72 
              69 74 65 00 C62:	.db "AllocSprite", 0
  348 D1:C0FE 53 70 72 69 
              74 65 00 -  C63:	.db "Sprite", 0
  349 D1:C105 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 00 -  -  C64:	.db "TransparentSprite", 0
  350 D1:C117 53 70 72 69 
              74 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C65:	.db "Sprite_NoClip", 0
  351 D1:C125 -  -  -  -  Tab5:
  352 D1:C125 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C66:	.db "TransparentSprite_NoClip", 0
  353 D1:C13E 47 65 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C67:	.db "GetSprite_NoClip", 0
  354 D1:C14F 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              5F 4E 6F 43 
              6C 69 70 00 C68:	.db "ScaledSprite_NoClip", 0
  355 D1:C163 53 63 61 6C 
              65 64 54 72 
              61 6E 73 70 
              61 72 65 6E 
              74 53 70 72 
              69 74 65 5F 
              4E 6F 43 6C 
              69 70 00 -  C69:	.db "ScaledTransparentSprite_NoClip", 0
  356 D1:C182 46 6C 69 70 
              53 70 72 69 
              74 65 59 00 C70:	.db "FlipSpriteY", 0
  357 D1:C18E 46 6C 69 70 
              53 70 72 69 
              74 65 58 00 C71:	.db "FlipSpriteX", 0
  358 D1:C19A 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 00 -  -  C72:	.db "RotateSpriteC", 0
  359 D1:C1A8 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 43 00 -  C73:	.db "RotateSpriteCC", 0
  360 D1:C1B7 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              48 61 6C 66 
              00 -  -  -  C74:	.db "RotateSpriteHalf", 0
  361 D1:C1C8 50 6F 6C 79 
              67 6F 6E 00 C75:	.db "Polygon", 0
  362 D1:C1D0 50 6F 6C 79 
              67 6F 6E 5F 
              4E 6F 43 6C 
              69 70 00 -  C76:	.db "Polygon_NoClip", 0
  363 D1:C1DF 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              00 -  -  -  C77:	.db "FillTriangle", 0
  364 D1:C1EC 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              5F 4E 6F 43 
              6C 69 70 00 C78:	.db "FillTriangle_NoClip", 0
  365 D1:C200 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              53 70 72 69 
              74 65 00 -  C79:	.db "LZDecompressSprite", 0
  366 D1:C213 53 65 74 54 
              65 78 74 53 
              63 61 6C 65 
              00 -  -  -  C80:	.db "SetTextScale", 0
  367 D1:C220 53 65 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C81:	.db "SetTransparentColor", 0
  368 D1:C234 -  -  -  -  Tab6:
  369 D1:C234 5A 65 72 6F 
              53 63 72 65 
              65 6E 00 -  C82:	.db "ZeroScreen", 0
  370 D1:C23F 53 65 74 54 
              65 78 74 43 
              6F 6E 66 69 
              67 00 -  -  C83:	.db "SetTextConfig", 0
  371 D1:C24D 47 65 74 53 
              70 72 69 74 
              65 43 68 61 
              72 00 -  -  C84:	.db "GetSpriteChar", 0
  372 D1:C25B 00 -  -  -  		.db 0
  373 D1:C25C -  -  -  -  TabData:
  374 D1:C25C D9 01 00 -  	.dl Tab1 - KeyHook_start
  375 D1:C25F 6E 02 00 -  	.dl Tab2 - KeyHook_start
  376 D1:C262 4C 03 00 -  	.dl Tab3 - KeyHook_start
  377 D1:C265 13 04 00 -  	.dl Tab4 - KeyHook_start
  378 D1:C268 E2 04 00 -  	.dl Tab5 - KeyHook_start
  379 D1:C26B F1 05 00 -  	.dl Tab6 - KeyHook_start
  380 D1:C26E -  -  -  -  	
  381 D1:C26E -  -  -  -  CData5:
  382 D1:C26E 03 02 00 -  	.dl C6 - KeyHook_start
  383 D1:C271 09 02 00 -  	.dl C7 - KeyHook_start
  384 D1:C274 0D 02 00 -  	.dl C8 - KeyHook_start
  385 D1:C277 16 02 00 -  	.dl C9 - KeyHook_start
  386 D1:C27A 28 02 00 -  	.dl C10 - KeyHook_start
  387 D1:C27D 33 02 00 -  	.dl C11 - KeyHook_start
  388 D1:C280 3E 02 00 -  	.dl C12 - KeyHook_start
  389 D1:C283 47 02 00 -  	.dl C13 - KeyHook_start
  390 D1:C286 50 02 00 -  	.dl C14 - KeyHook_start
  391 D1:C289 58 02 00 -  	.dl C15 - KeyHook_start
  392 D1:C28C 60 02 00 -  	.dl C16 - KeyHook_start
  393 D1:C28F 69 02 00 -  	.dl C17 - KeyHook_start
  394 D1:C292 6E 02 00 -  	.dl C18 - KeyHook_start
  395 D1:C295 78 02 00 -  	.dl C19 - KeyHook_start
  396 D1:C298 81 02 00 -  	.dl C20 - KeyHook_start
  397 D1:C29B 8B 02 00 -  	.dl C21 - KeyHook_start
  398 D1:C29E 94 02 00 -  	.dl C22 - KeyHook_start
  399 D1:C2A1 9E 02 00 -  	.dl C23 - KeyHook_start
  400 D1:C2A4 AA 02 00 -  	.dl C24 - KeyHook_start
  401 D1:C2A7 B8 02 00 -  	.dl C25 - KeyHook_start
  402 D1:C2AA C2 02 00 -  	.dl C26 - KeyHook_start
  403 D1:C2AD D1 02 00 -  	.dl C27 - KeyHook_start
  404 D1:C2B0 E0 02 00 -  	.dl C28 - KeyHook_start
  405 D1:C2B3 F8 02 00 -  	.dl C29 - KeyHook_start
  406 D1:C2B6 0A 03 00 -  	.dl C30 - KeyHook_start
  407 D1:C2B9 1F 03 00 -  	.dl C31 - KeyHook_start
  408 D1:C2BC 30 03 00 -  	.dl C32 - KeyHook_start
  409 D1:C2BF 3F 03 00 -  	.dl C33 - KeyHook_start
  410 D1:C2C2 4C 03 00 -  	.dl C34 - KeyHook_start
  411 D1:C2C5 55 03 00 -  	.dl C35 - KeyHook_start
  412 D1:C2C8 5E 03 00 -  	.dl C36 - KeyHook_start
  413 D1:C2CB 63 03 00 -  	.dl C37 - KeyHook_start
  414 D1:C2CE 6D 03 00 -  	.dl C38 - KeyHook_start
  415 D1:C2D1 76 03 00 -  	.dl C39 - KeyHook_start
  416 D1:C2D4 7D 03 00 -  	.dl C40 - KeyHook_start
  417 D1:C2D7 88 03 00 -  	.dl C41 - KeyHook_start
  418 D1:C2DA 92 03 00 -  	.dl C42 - KeyHook_start
  419 D1:C2DD A0 03 00 -  	.dl C43 - KeyHook_start
  420 D1:C2E0 AC 03 00 -  	.dl C44 - KeyHook_start
  421 D1:C2E3 BD 03 00 -  	.dl C45 - KeyHook_start
  422 D1:C2E6 CD 03 00 -  	.dl C46 - KeyHook_start
  423 D1:C2E9 DF 03 00 -  	.dl C47 - KeyHook_start
  424 D1:C2EC F0 03 00 -  	.dl C48 - KeyHook_start
  425 D1:C2EF 05 04 00 -  	.dl C49 - KeyHook_start
  426 D1:C2F2 13 04 00 -  	.dl C50 - KeyHook_start
  427 D1:C2F5 21 04 00 -  	.dl C51 - KeyHook_start
  428 D1:C2F8 2B 04 00 -  	.dl C52 - KeyHook_start
  429 D1:C2FB 33 04 00 -  	.dl C53 - KeyHook_start
  430 D1:C2FE 3D 04 00 -  	.dl C54 - KeyHook_start
  431 D1:C301 48 04 00 -  	.dl C55 - KeyHook_start
  432 D1:C304 50 04 00 -  	.dl C56 - KeyHook_start
  433 D1:C307 5F 04 00 -  	.dl C57 - KeyHook_start
  434 D1:C30A 72 04 00 -  	.dl C58 - KeyHook_start
  435 D1:C30D 8C 04 00 -  	.dl C59 - KeyHook_start
  436 D1:C310 94 04 00 -  	.dl C60 - KeyHook_start
  437 D1:C313 A2 04 00 -  	.dl C61 - KeyHook_start
  438 D1:C316 AF 04 00 -  	.dl C62 - KeyHook_start
  439 D1:C319 BB 04 00 -  	.dl C63 - KeyHook_start
  440 D1:C31C C2 04 00 -  	.dl C64 - KeyHook_start
  441 D1:C31F D4 04 00 -  	.dl C65 - KeyHook_start
  442 D1:C322 E2 04 00 -  	.dl C66 - KeyHook_start
  443 D1:C325 FB 04 00 -  	.dl C67 - KeyHook_start
  444 D1:C328 0C 05 00 -  	.dl C68 - KeyHook_start
  445 D1:C32B 20 05 00 -  	.dl C69 - KeyHook_start
  446 D1:C32E 3F 05 00 -  	.dl C70 - KeyHook_start
  447 D1:C331 4B 05 00 -  	.dl C71 - KeyHook_start
  448 D1:C334 57 05 00 -  	.dl C72 - KeyHook_start
  449 D1:C337 65 05 00 -  	.dl C73 - KeyHook_start
  450 D1:C33A 74 05 00 -  	.dl C74 - KeyHook_start
  451 D1:C33D 85 05 00 -  	.dl C75 - KeyHook_start
  452 D1:C340 8D 05 00 -  	.dl C76 - KeyHook_start
  453 D1:C343 9C 05 00 -  	.dl C77 - KeyHook_start
  454 D1:C346 A9 05 00 -  	.dl C78 - KeyHook_start
  455 D1:C349 BD 05 00 -  	.dl C79 - KeyHook_start
  456 D1:C34C D0 05 00 -  	.dl C80 - KeyHook_start
  457 D1:C34F DD 05 00 -  	.dl C81 - KeyHook_start
  458 D1:C352 F1 05 00 -  	.dl C82 - KeyHook_start
  459 D1:C355 FC 05 00 -  	.dl C83 - KeyHook_start
  460 D1:C358 0A 06 00 -  	.dl C84 - KeyHook_start
  461 D1:C35B -  -  -  -  	
  462 D1:C35B -  -  -  -  #define AMOUNT_OF_CUSTOM_TOKENS 4
  463 D1:C35B 08 45 78 65 
              63 48 65 78 
              28 00 -  -  Token1: .db 8,  "ExecHex(", 0
  464 D1:C365 0D 44 65 66 
              69 6E 65 53 
              70 72 69 74 
              65 28 00 -  Token2: .db 13, "DefineSprite(", 0
  465 D1:C374 05 43 61 6C 
              6C 20 00 -  Token3: .db 5,  "Call ", 0
  466 D1:C37B 0C 43 6F 6D 
              70 69 6C 65 
              50 72 67 6D 
              28 00 -  -  Token4: .db 12, "CompilePrgm(", 0
  467 D1:C389 -  -  -  -  CustomTokensProgramText:
  468 D1:C389 50 52 4F 47 
              52 41 4D 3A 
              00 -  -  -  	.db "PROGRAM:", 0
  469 D1:C392 -  -  -  -  KeyHook_end:
  470 D1:C392 -  -  -  -  
  471 D1:C392 -  -  -  -  TokenHook_start:
  472 D1:C392 83 -  -  -  	.db 83h
  473 D1:C393 7A -  -  -  	ld a, d
  474 D1:C394 FE 04 -  -  	cp 4
  475 D1:C396 C0 -  -  -  	ret nz
  476 D1:C397 7B -  -  -  	ld a, e
  477 D1:C398 FE 14 -  -  	cp 5+3+(AMOUNT_OF_CUSTOM_TOKENS*3)
  478 D1:C39A D0 -  -  -  	ret nc
  479 D1:C39B D6 05 -  -  	sub 5
  480 D1:C39D ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
  481 D1:C3A2 21 6E 07 00 	ld hl, TokenHook_data - KeyHook_start
  482 D1:C3A6 19 -  -  -  	add hl, de
  483 D1:C3A7 01 00 00 00 	ld bc, 0
  484 D1:C3AB 4F -  -  -  	ld c, a
  485 D1:C3AC 09 -  -  -  	add hl, bc
  486 D1:C3AD ED 27 -  -  	ld hl, (hl)
  487 D1:C3AF 19 -  -  -  	add hl, de
  488 D1:C3B0 C9 -  -  -  	ret
  489 D1:C3B1 -  -  -  -  TokenHook_data:
  490 D1:C3B1 17 07 00 -  	.dl Token1 - KeyHook_start - 1
  491 D1:C3B4 21 07 00 -  	.dl Token2 - KeyHook_start - 1
  492 D1:C3B7 30 07 00 -  	.dl Token3 - KeyHook_start - 1
  493 D1:C3BA 37 07 00 -  	.dl Token4 - KeyHook_start - 1
  494 D1:C3BD -  -  -  -  TokenHook_end:
  495 D1:C3BD -  -  -  -  
  496 D1:C3BD -  -  -  -  CursorHook_start:
  497 D1:C3BD 83 -  -  -  	.db 83h
  498 D1:C3BE FE 24 -  -  	cp 24h
  499 D1:C3C0 20 06 -  -  	jr nz, +_
  500 D1:C3C2 3C -  -  -  	inc a
  501 D1:C3C3 3A 99 05 D0 	ld a, (curUnder)
  502 D1:C3C7 C9 -  -  -  	ret
  503 D1:C3C8 FE 22 -  -  _:	cp 22h
  504 D1:C3CA C0 -  -  -  	ret nz
  505 D1:C3CB 3A E0 07 D0 	ld a, (cxCurApp)
  506 D1:C3CF FE 46 -  -  	cp cxPrgmEdit
  507 D1:C3D1 C0 -  -  -  	ret nz
  508 D1:C3D2 2A 3A 24 D0 	ld hl, (editCursor)
  509 D1:C3D6 7E -  -  -  	ld a, (hl)
  510 D1:C3D7 FE B3 -  -  	cp tDet
  511 D1:C3D9 C0 -  -  -  	ret nz
  512 D1:C3DA -  -  -  -  DrawDetText:
  513 D1:C3DA FD CB B0 46 	bit displayed_det, (iy+fAlways1)
  514 D1:C3DE C0 -  -  -  	ret nz
  515 D1:C3DF 2A 3D 24 D0 	ld hl, (editTail)
  516 D1:C3E3 23 -  -  -  	inc hl
  517 D1:C3E4 7E -  -  -  	ld a, (hl)
  518 D1:C3E5 D6 30 -  -  	sub t0
  519 D1:C3E7 D8 -  -  -  	ret c
  520 D1:C3E8 FE 0A -  -  	cp t9-t0+1
  521 D1:C3EA ED 4B 40 24 
              D0 -  -  -  	ld bc, (editBtm)
  522 D1:C3EF 11 00 00 00 	ld de, 0
  523 D1:C3F3 5F -  -  -  	ld e, a
  524 D1:C3F4 38 02 -  -  	jr c, GetDetValueLoop
  525 D1:C3F6 -  -  -  -  WrongDetValue:
  526 D1:C3F6 3C -  -  -  	inc a
  527 D1:C3F7 C9 -  -  -  	ret
  528 D1:C3F8 -  -  -  -  GetDetValueLoop:
  529 D1:C3F8 23 -  -  -  	inc hl
  530 D1:C3F9 B7 -  -  -  	or a
  531 D1:C3FA ED 42 -  -  	sbc hl, bc
  532 D1:C3FC 28 1C -  -  	jr z, GetDetValueStop
  533 D1:C3FE 09 -  -  -  	add hl, bc
  534 D1:C3FF 7E -  -  -  	ld a, (hl)
  535 D1:C400 D6 30 -  -  	sub t0
  536 D1:C402 38 16 -  -  	jr c, GetDetValueStop
  537 D1:C404 FE 0A -  -  	cp t9-t0+1
  538 D1:C406 30 12 -  -  	jr nc, GetDetValueStop
  539 D1:C408 E5 -  -  -  	push hl
  540 D1:C409 EB -  -  -  		ex de, hl
  541 D1:C40A 29 -  -  -  		add hl, hl
  542 D1:C40B E5 -  -  -  		push hl
  543 D1:C40C D1 -  -  -  		pop de
  544 D1:C40D 29 -  -  -  		add hl, hl
  545 D1:C40E 29 -  -  -  		add hl, hl
  546 D1:C40F 19 -  -  -  		add hl, de
  547 D1:C410 11 00 00 00 		ld de, 0
  548 D1:C414 5F -  -  -  		ld e, a
  549 D1:C415 19 -  -  -  		add hl, de
  550 D1:C416 EB -  -  -  		ex de, hl
  551 D1:C417 E1 -  -  -  	pop hl
  552 D1:C418 18 DE -  -  	jr GetDetValueLoop
  553 D1:C41A -  -  -  -  GetDetValueStop:
  554 D1:C41A EB -  -  -  	ex de, hl
  555 D1:C41B 11 4F 00 00 	ld de, AMOUNT_OF_C_FUNCTIONS
  556 D1:C41F B7 -  -  -  	or a
  557 D1:C420 ED 52 -  -  	sbc hl, de
  558 D1:C422 30 D2 -  -  	jr nc, WrongDetValue
  559 D1:C424 19 -  -  -  	add hl, de
  560 D1:C425 26 03 -  -  	ld h, 3
  561 D1:C427 ED 6C -  -  	mlt hl
  562 D1:C429 11 2B 06 00 	ld de, CData5 - KeyHook_start
  563 D1:C42D 19 -  -  -  	add hl, de
  564 D1:C42E ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
  565 D1:C433 19 -  -  -  	add hl, de
  566 D1:C434 ED 27 -  -  	ld hl, (hl)
  567 D1:C436 19 -  -  -  	add hl, de
  568 D1:C437 11 1C E7 00 	ld de, 000E71Ch
  569 D1:C43B 40 ED 53 AC 
              26 -  -  -  	ld.sis (drawFGColor - 0D00000h), de
  570 D1:C440 40 ED 5B CC 
              2A -  -  -  	ld.sis de, (statusBarBGColor - 0D00000h)
  571 D1:C445 40 ED 53 AA 
              26 -  -  -  	ld.sis (drawBGColor - 0D00000h), de
  572 D1:C44A 3E 0E -  -  	ld a, 14
  573 D1:C44C 32 D5 08 D0 	ld (penRow),a
  574 D1:C450 11 02 00 00 	ld de, 2
  575 D1:C454 40 ED 53 D2 
              08 -  -  -  	ld.sis (penCol - 0D00000h), de
  576 D1:C459 CD 34 08 02 	call _VPutS
  577 D1:C45D 11 FF FF 00 	ld de, $FFFF
  578 D1:C461 40 ED 53 AA 
              26 -  -  -  	ld.sis (drawBGColor - 0D00000h), de
  579 D1:C466 FD CB B0 C6 	set displayed_det, (iy+fAlways1)
  580 D1:C46A C9 -  -  -  	ret
  581 D1:C46B -  -  -  -  CursorHook_end:
  582 D1:C46B -  -  -  -  
  583 D1:C46B -  -  -  -  Hooks_end:
Listing for file "ICE.asm"
  460 D1:C46B -  -  -  -  #include "operators functions/functions.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operators functions\functions.asm"
    1 D1:C46B -  -  -  -  ExecuteFunction:
    2 D1:C46B E5 -  -  -  	push hl
    3 D1:C46C 21 37 EA D1 		ld hl, FunctionsWithReturnValueArguments
    4 D1:C470 01 05 00 00 		ld bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValueArguments
    5 D1:C474 ED B1 -  -  		cpir
    6 D1:C476 06 03 -  -  		ld b, 3
    7 D1:C478 ED 4C -  -  		mlt bc
    8 D1:C47A 21 3C EA D1 		ld hl, FunctionsWithReturnValueStart
    9 D1:C47E 09 -  -  -  		add hl, bc
   10 D1:C47F ED 27 -  -  		ld hl, (hl)
   11 D1:C481 22 87 C4 D1 		ld (JumpFunction), hl
   12 D1:C485 E1 -  -  -  	pop hl
   13 D1:C486 -  -  -  -  JumpFunction = $+1
   14 D1:C486 C3 00 00 00 	jp 0
   15 D1:C48A -  -  -  -  	
   16 D1:C48A -  -  -  -  functionLbl:
   17 D1:C48A DD 2A CF EB 
              D1 -  -  -  	ld ix, (labelPtr)
   18 D1:C48F 2A C9 EB D1 	ld hl, (programPtr)
   19 D1:C493 DD 2F 00 -  	ld (ix), hl
   20 D1:C496 2A 1A 23 D0 	ld hl, (curPC)
   21 D1:C49A 23 -  -  -  	inc hl
   22 D1:C49B DD 2F 03 -  	ld (ix+3), hl
   23 D1:C49E ED 22 06 -  	lea hl, ix+6
   24 D1:C4A1 22 CF EB D1 	ld (labelPtr), hl
   25 D1:C4A5 -  -  -  -  functionSkipLine:
   26 D1:C4A5 2A 1D 23 D0 	ld hl, (endPC)
   27 D1:C4A9 ED 5B 1A 23 
              D0 -  -  -  	ld de, (curPC)
   28 D1:C4AE B7 -  -  -  	or a
   29 D1:C4AF ED 52 -  -  	sbc hl, de
   30 D1:C4B1 D8 -  -  -  	ret c
   31 D1:C4B2 23 -  -  -  	inc hl
   32 D1:C4B3 E5 -  -  -  	push hl
   33 D1:C4B4 C1 -  -  -  	pop bc
   34 D1:C4B5 EB -  -  -  	ex de, hl
   35 D1:C4B6 3E 3F -  -  	ld a, tEnter
   36 D1:C4B8 ED B1 -  -  	cpir
   37 D1:C4BA 2B -  -  -  	dec hl
   38 D1:C4BB 22 1A 23 D0 	ld (curPC), hl
   39 D1:C4BF C9 -  -  -  	ret
   40 D1:C4C0 -  -  -  -  	
   41 D1:C4C0 -  -  -  -  functionCall:
   42 D1:C4C0 3E CD -  -  	ld a, 0CDh
   43 D1:C4C2 18 02 -  -  	jr $+4
   44 D1:C4C4 -  -  -  -  functionGoto:
   45 D1:C4C4 3E C3 -  -  	ld a, 0C3h
   46 D1:C4C6 CD AE AC D1 	call InsertA															; jp/call ******
   47 D1:C4CA DD 2A D2 EB 
              D1 -  -  -  	ld ix, (gotoPtr)
   48 D1:C4CF 2A C9 EB D1 	ld hl, (programPtr)
   49 D1:C4D3 DD 2F 00 -  	ld (ix), hl
   50 D1:C4D6 2A 1A 23 D0 	ld hl, (curPC)
   51 D1:C4DA 23 -  -  -  	inc hl
   52 D1:C4DB DD 2F 03 -  	ld (ix+3), hl
   53 D1:C4DE ED 22 06 -  	lea hl, ix+6
   54 D1:C4E1 22 D2 EB D1 	ld (gotoPtr), hl
   55 D1:C4E5 CD 66 AC D1 	call InsertHL															; jp/call RANDOM
   56 D1:C4E9 18 BA -  -  	jr functionSkipLine
   57 D1:C4EB -  -  -  -  	
   58 D1:C4EB -  -  -  -  functionReturn:
   59 D1:C4EB CD C0 0F 02 	call _NxtFetch
   60 D1:C4EF 30 04 -  -  	jr nc, +_
   61 D1:C4F1 FD CB C0 D6 	set last_token_is_ret, (iy+fExpression1)
   62 D1:C4F5 3E C9 -  -  _:	ld a, 0C9h
   63 D1:C4F7 C3 AE AC D1 	jp InsertA																; ret
   64 D1:C4FB -  -  -  -  	
   65 D1:C4FB -  -  -  -  functionDisp:
   66 D1:C4FB 3E 01 -  -  	ld a, 1
   67 D1:C4FD 32 E3 EB D1 	ld (openedParensF), a
   68 D1:C501 CD 28 10 02 	call _IncFetch
   69 D1:C505 CD 0F B2 D1 	call ParseExpression
   70 D1:C509 ED 5B C9 EB 
              D1 -  -  -  	ld de, (programPtr)
   71 D1:C50E 01 0E 00 00 	ld bc, 14
   72 D1:C512 FD CB C0 7E 	bit output_is_string, (iy+fExpression1)
   73 D1:C516 20 06 -  -  	jr nz, DispString
   74 D1:C518 21 FA EF D1 	ld hl, DispNumberRoutine
   75 D1:C51C 18 05 -  -  	jr +_
   76 D1:C51E -  -  -  -  DispString:
   77 D1:C51E 21 08 F0 D1 	ld hl, DispStringRoutine
   78 D1:C522 0B -  -  -  	dec bc
   79 D1:C523 ED B0 -  -  _:	ldir
   80 D1:C525 ED 53 C9 EB 
              D1 -  -  -  	ld (programPtr), de
   81 D1:C52A FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
   82 D1:C52E C8 -  -  -  	ret z
   83 D1:C52F 18 CA -  -  	jr functionDisp
   84 D1:C531 -  -  -  -  		
   85 D1:C531 -  -  -  -  functionRepeat:
   86 D1:C531 21 E6 EB D1 	ld hl, amountOfEnds
   87 D1:C535 34 -  -  -  	inc (hl)
   88 D1:C536 2A C9 EB D1 	ld hl, (programPtr)
   89 D1:C53A 11 81 7C FC 	ld de, UserMem - program
   90 D1:C53E 19 -  -  -  	add hl, de
   91 D1:C53F E5 -  -  -  	push hl
   92 D1:C540 2A 1A 23 D0 		ld hl, (curPC)
   93 D1:C544 23 -  -  -  		inc hl
   94 D1:C545 E5 -  -  -  		push hl
   95 D1:C546 CD 28 10 02 _:			call _IncFetch
   96 D1:C54A DA 05 AF D1 			jp c, ErrorSyntax
   97 D1:C54E FE 3F -  -  			cp tEnter
   98 D1:C550 20 F4 -  -  			jr nz, -_
   99 D1:C552 CD AA AA D1 			call ParseProgramUntilEnd
  100 D1:C556 FE D0 -  -  			cp tElse
  101 D1:C558 CA 05 AF D1 			jp z, ErrorSyntax
  102 D1:C55C ED 5B 1A 23 
              D0 -  -  -  			ld de, (curPC)
  103 D1:C561 E1 -  -  -  		pop hl
  104 D1:C562 22 1A 23 D0 		ld (curPC), hl
  105 D1:C566 D5 -  -  -  		push de
  106 D1:C567 CD 0F B2 D1 			call ParseExpression
  107 D1:C56B D1 -  -  -  		pop de
  108 D1:C56C ED 53 1A 23 
              D0 -  -  -  		ld (curPC), de
  109 D1:C571 FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  110 D1:C575 20 5F -  -  		jr nz, functionRepeatInfinite
  111 D1:C577 FD CB C0 6E 		bit ans_set_z_flag, (iy+fExpression1)
  112 D1:C57B 28 14 -  -  		jr z, +_
  113 D1:C57D 2A C9 EB D1 		ld hl, (programPtr)
  114 D1:C581 2B -  -  -  		dec hl
  115 D1:C582 2B -  -  -  		dec hl
  116 D1:C583 2B -  -  -  		dec hl
  117 D1:C584 7E -  -  -  		ld a, (hl)
  118 D1:C585 DD 67 -  -  		ld ixh, a
  119 D1:C587 2B -  -  -  		dec hl
  120 D1:C588 2B -  -  -  		dec hl
  121 D1:C589 2B -  -  -  		dec hl
  122 D1:C58A 2B -  -  -  		dec hl
  123 D1:C58B 22 C9 EB D1 		ld (programPtr), hl
  124 D1:C58F 18 0A -  -  		jr ++_
  125 D1:C591 3E 19 -  -  _:		ld a, 019h
  126 D1:C593 21 B7 ED 52 		ld hl, 052EDB7h
  127 D1:C597 CD 62 AC D1 		call InsertAHL														; add hl, de \ or a \ sbc hl, de
  128 D1:C59B 01 81 7C FC _:		ld bc, UserMem - program
  129 D1:C59F 09 -  -  -  		add hl, bc
  130 D1:C5A0 D1 -  -  -  	pop de
  131 D1:C5A1 B7 -  -  -  	or a
  132 D1:C5A2 ED 52 -  -  	sbc hl, de
  133 D1:C5A4 7C -  -  -  	ld a, h
  134 D1:C5A5 B7 -  -  -  	or a
  135 D1:C5A6 20 1B -  -  	jr nz, functionRepeatLarge
  136 D1:C5A8 7D -  -  -  	ld a, l
  137 D1:C5A9 2F -  -  -  	cpl
  138 D1:C5AA 3D -  -  -  	dec a
  139 D1:C5AB FE 80 -  -  	cp %10000000
  140 D1:C5AD 38 14 -  -  	jr c, functionRepeatLarge
  141 D1:C5AF -  -  -  -  functionRepeatSmall:
  142 D1:C5AF 47 -  -  -  	ld b, a
  143 D1:C5B0 3E 28 -  -  	ld a, 028h
  144 D1:C5B2 FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  145 D1:C5B6 28 02 -  -  	jr z, +_
  146 D1:C5B8 DD 7C -  -  	ld a, ixh
  147 D1:C5BA CD AE AC D1 _:	call InsertA															; jr [n]z, *
  148 D1:C5BE 78 -  -  -  	ld a, b
  149 D1:C5BF C3 AE AC D1 	jp InsertA																; jr [n]z, *
  150 D1:C5C3 -  -  -  -  functionRepeatLarge:
  151 D1:C5C3 EB -  -  -  	ex de, hl
  152 D1:C5C4 FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  153 D1:C5C8 28 06 -  -  	jr z, +_
  154 D1:C5CA DD 7C -  -  	ld a, ixh
  155 D1:C5CC C6 A2 -  -  	add a, 0A2h
  156 D1:C5CE 18 02 -  -  	jr ++_
  157 D1:C5D0 3E CA -  -  _:	ld a, 0CAh
  158 D1:C5D2 C3 62 AC D1 _:	jp InsertAHL															; jp [n]z, XXXXXX
  159 D1:C5D6 -  -  -  -  functionRepeatInfinite:
  160 D1:C5D6 2A C9 EB D1 		ld hl, (programPtr)
  161 D1:C5DA 2B -  -  -  		dec hl
  162 D1:C5DB 2B -  -  -  		dec hl
  163 D1:C5DC 2B -  -  -  		dec hl
  164 D1:C5DD 2B -  -  -  		dec hl
  165 D1:C5DE 22 C9 EB D1 		ld (programPtr), hl
  166 D1:C5E2 E5 -  -  -  		push hl
  167 D1:C5E3 23 -  -  -  			inc hl
  168 D1:C5E4 ED 27 -  -  			ld hl, (hl)
  169 D1:C5E6 19 -  -  -  			add hl, de
  170 D1:C5E7 B7 -  -  -  			or a
  171 D1:C5E8 ED 52 -  -  			sbc hl, de
  172 D1:C5EA E1 -  -  -  		pop hl
  173 D1:C5EB C0 -  -  -  		ret nz
  174 D1:C5EC 11 81 7C FC 		ld de, UserMem - program
  175 D1:C5F0 19 -  -  -  		add hl, de
  176 D1:C5F1 D1 -  -  -  	pop de
  177 D1:C5F2 B7 -  -  -  	or a
  178 D1:C5F3 ED 52 -  -  	sbc hl, de
  179 D1:C5F5 7C -  -  -  	ld a, h
  180 D1:C5F6 B7 -  -  -  	or a
  181 D1:C5F7 20 13 -  -  	jr nz, functionRepeatInfiniteLarge
  182 D1:C5F9 7D -  -  -  	ld a, l
  183 D1:C5FA 2F -  -  -  	cpl
  184 D1:C5FB 3D -  -  -  	dec a
  185 D1:C5FC FE 80 -  -  	cp %10000000
  186 D1:C5FE 38 0C -  -  	jr c, functionRepeatInfiniteLarge
  187 D1:C600 -  -  -  -  functionRepeatInfiniteSmall:
  188 D1:C600 47 -  -  -  	ld b, a
  189 D1:C601 3E 18 -  -  	ld a, 018h
  190 D1:C603 CD AE AC D1 	call InsertA															; jr *
  191 D1:C607 78 -  -  -  	ld a, b
  192 D1:C608 C3 AE AC D1 	jp InsertA																; jr *
  193 D1:C60C -  -  -  -  functionRepeatInfiniteLarge:
  194 D1:C60C EB -  -  -  	ex de, hl
  195 D1:C60D 3E C3 -  -  	ld a, 0C3h
  196 D1:C60F C3 62 AC D1 	jp InsertAHL															; jp XXXXXX
  197 D1:C613 -  -  -  -  
  198 D1:C613 -  -  -  -  functionIf:
  199 D1:C613 21 E6 EB D1 	ld hl, amountOfEnds
  200 D1:C617 34 -  -  -  	inc (hl)
  201 D1:C618 CD 28 10 02 	call _IncFetch
  202 D1:C61C CD 0F B2 D1 	call ParseExpression
  203 D1:C620 FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  204 D1:C624 28 14 -  -  	jr z, +_
  205 D1:C626 2A C9 EB D1 	ld hl, (programPtr)
  206 D1:C62A 2B -  -  -  	dec hl
  207 D1:C62B 2B -  -  -  	dec hl
  208 D1:C62C 2B -  -  -  	dec hl
  209 D1:C62D 7E -  -  -  	ld a, (hl)
  210 D1:C62E C6 A2 -  -  	add a, 0A2h
  211 D1:C630 2B -  -  -  	dec hl
  212 D1:C631 2B -  -  -  	dec hl
  213 D1:C632 2B -  -  -  	dec hl
  214 D1:C633 2B -  -  -  	dec hl
  215 D1:C634 22 C9 EB D1 	ld (programPtr), hl
  216 D1:C638 18 0C -  -  	jr ++_
  217 D1:C63A 3E 19 -  -  _:	ld a, 019h
  218 D1:C63C 21 B7 ED 52 	ld hl, 052EDB7h
  219 D1:C640 CD 62 AC D1 	call InsertAHL															; add hl, de \ or a \ sbc hl, de
  220 D1:C644 3E CA -  -  	ld a, 0CAh
  221 D1:C646 CD AE AC D1 _:	call InsertA															; jp z, ******
  222 D1:C64A 2A C9 EB D1 	ld hl, (programPtr)
  223 D1:C64E E5 -  -  -  	push hl
  224 D1:C64F CD 66 AC D1 		call InsertHL														; jp z, XXXXXX
  225 D1:C653 CD AA AA D1 		call ParseProgramUntilEnd
  226 D1:C657 FE D0 -  -  		cp tElse
  227 D1:C659 20 29 -  -  		jr nz, +_
  228 D1:C65B 21 E6 EB D1 		ld hl, amountOfEnds
  229 D1:C65F 34 -  -  -  		inc (hl)
  230 D1:C660 3E C3 -  -  		ld a, 0C3h
  231 D1:C662 CD AE AC D1 		call InsertA														; jp ******
  232 D1:C666 ED 5B C9 EB 
              D1 -  -  -  		ld de, (programPtr)
  233 D1:C66B CD 66 AC D1 		call InsertHL														; jp XXXXXX
  234 D1:C66F 01 81 7C FC 		ld bc, UserMem - program
  235 D1:C673 09 -  -  -  		add hl, bc
  236 D1:C674 E5 -  -  -  		push hl
  237 D1:C675 C1 -  -  -  		pop bc
  238 D1:C676 E1 -  -  -  	pop hl
  239 D1:C677 ED 0F -  -  	ld (hl), bc
  240 D1:C679 D5 -  -  -  	push de
  241 D1:C67A CD AA AA D1 		call ParseProgramUntilEnd
  242 D1:C67E FE D0 -  -  		cp tElse
  243 D1:C680 CA 05 AF D1 		jp z, ErrorSyntax
  244 D1:C684 2A C9 EB D1 _:		ld hl, (programPtr)
  245 D1:C688 11 81 7C FC 		ld de, UserMem - program
  246 D1:C68C 19 -  -  -  		add hl, de
  247 D1:C68D EB -  -  -  		ex de, hl
  248 D1:C68E E1 -  -  -  	pop hl
  249 D1:C68F ED 1F -  -  	ld (hl), de
  250 D1:C691 C9 -  -  -  	ret
  251 D1:C692 -  -  -  -  	
  252 D1:C692 -  -  -  -  functionWhile:
  253 D1:C692 21 E6 EB D1 	ld hl, amountOfEnds
  254 D1:C696 34 -  -  -  	inc (hl)
  255 D1:C697 CD 28 10 02 	call _IncFetch
  256 D1:C69B DA 05 AF D1 	jp c, ErrorSyntax
  257 D1:C69F FE 3F -  -  	cp tEnter
  258 D1:C6A1 CA 05 AF D1 	jp z, ErrorSyntax
  259 D1:C6A5 2A C9 EB D1 	ld hl, (programPtr)
  260 D1:C6A9 E5 -  -  -  	push hl
  261 D1:C6AA CD 0F B2 D1 		call ParseExpression
  262 D1:C6AE FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  263 D1:C6B2 20 4F -  -  		jr nz, functionWhileInfinite
  264 D1:C6B4 FD CB C0 6E 		bit ans_set_z_flag, (iy+fExpression1)
  265 D1:C6B8 28 14 -  -  		jr z, +_
  266 D1:C6BA 2A C9 EB D1 		ld hl, (programPtr)
  267 D1:C6BE 2B -  -  -  		dec hl
  268 D1:C6BF 2B -  -  -  		dec hl
  269 D1:C6C0 2B -  -  -  		dec hl
  270 D1:C6C1 7E -  -  -  		ld a, (hl)
  271 D1:C6C2 C6 A2 -  -  		add a, 0A2h
  272 D1:C6C4 2B -  -  -  		dec hl
  273 D1:C6C5 2B -  -  -  		dec hl
  274 D1:C6C6 2B -  -  -  		dec hl
  275 D1:C6C7 2B -  -  -  		dec hl
  276 D1:C6C8 22 C9 EB D1 		ld (programPtr), hl
  277 D1:C6CC 18 0C -  -  		jr ++_
  278 D1:C6CE 3E 19 -  -  _:		ld a, 019h
  279 D1:C6D0 21 B7 ED 52 		ld hl, 052EDB7h
  280 D1:C6D4 CD 62 AC D1 		call InsertAHL														; add hl, de \ or a \ sbc hl, de
  281 D1:C6D8 3E CA -  -  		ld a, 0CAh
  282 D1:C6DA CD AE AC D1 _:		call InsertA														; jp z, ******
  283 D1:C6DE 2A C9 EB D1 		ld hl, (programPtr)
  284 D1:C6E2 E5 -  -  -  		push hl
  285 D1:C6E3 CD 66 AC D1 			call InsertHL													; jp z, ******
  286 D1:C6E7 CD AA AA D1 			call ParseProgramUntilEnd
  287 D1:C6EB FE D0 -  -  			cp tElse
  288 D1:C6ED CA 05 AF D1 			jp z, ErrorSyntax
  289 D1:C6F1 3E C3 -  -  			ld a, 0C3h
  290 D1:C6F3 D1 -  -  -  		pop de
  291 D1:C6F4 E1 -  -  -  	pop hl
  292 D1:C6F5 01 81 7C FC 	ld bc, UserMem - program
  293 D1:C6F9 09 -  -  -  	add hl, bc
  294 D1:C6FA CD 62 AC D1 	call InsertAHL															; jp XXXXXX
  295 D1:C6FE 09 -  -  -  	add hl, bc
  296 D1:C6FF EB -  -  -  	ex de, hl
  297 D1:C700 ED 1F -  -  	ld (hl), de
  298 D1:C702 C9 -  -  -  	ret
  299 D1:C703 -  -  -  -  functionWhileInfinite:
  300 D1:C703 2A C9 EB D1 		ld hl, (programPtr)
  301 D1:C707 2B -  -  -  		dec hl
  302 D1:C708 2B -  -  -  		dec hl
  303 D1:C709 2B -  -  -  		dec hl
  304 D1:C70A 2B -  -  -  		dec hl
  305 D1:C70B 22 C9 EB D1 		ld (programPtr), hl
  306 D1:C70F 23 -  -  -  		inc hl
  307 D1:C710 ED 27 -  -  		ld hl, (hl)
  308 D1:C712 19 -  -  -  		add hl, de
  309 D1:C713 B7 -  -  -  		or a
  310 D1:C714 ED 52 -  -  		sbc hl, de
  311 D1:C716 28 16 -  -  		jr z, +_
  312 D1:C718 CD AA AA D1 		call ParseProgramUntilEnd
  313 D1:C71C FE D0 -  -  		cp tElse
  314 D1:C71E CA 05 AF D1 		jp z, ErrorSyntax
  315 D1:C722 3E C3 -  -  		ld a, 0C3h
  316 D1:C724 E1 -  -  -  	pop hl
  317 D1:C725 01 81 7C FC 	ld bc, UserMem - program
  318 D1:C729 09 -  -  -  	add hl, bc
  319 D1:C72A C3 62 AC D1 	jp InsertAHL															; jp XXXXXX
  320 D1:C72E CD AA AA D1 _:		call ParseProgramUntilEnd
  321 D1:C732 FE D0 -  -  		cp tElse
  322 D1:C734 CA 05 AF D1 		jp z, ErrorSyntax
  323 D1:C738 E1 -  -  -  	pop hl
  324 D1:C739 22 C9 EB D1 	ld (programPtr), hl
  325 D1:C73D C9 -  -  -  	ret
  326 D1:C73E -  -  -  -  	
  327 D1:C73E -  -  -  -  functionClrHome:
  328 D1:C73E CD C0 0F 02 	call _NxtFetch
  329 D1:C742 38 06 -  -  	jr c, +_
  330 D1:C744 FE 3F -  -  	cp tEnter
  331 D1:C746 C2 05 AF D1 	jp nz, ErrorSyntax
  332 D1:C74A 21 28 08 02 _:	ld hl, _HomeUp
  333 D1:C74E CD 77 AC D1 	call InsertCallHL														; call _HomeUp
  334 D1:C752 21 08 08 02 	ld hl, _ClrLCDFull
  335 D1:C756 C3 62 AC D1 	jp InsertAHL															; call _ClrLCDFull
  336 D1:C75A -  -  -  -  	
  337 D1:C75A -  -  -  -  functionPause:
  338 D1:C75A CD 28 10 02 	call _IncFetch
  339 D1:C75E 38 59 -  -  	jr c, ++_
  340 D1:C760 FE 3F -  -  	cp tEnter
  341 D1:C762 28 55 -  -  	jr z, ++_
  342 D1:C764 CD 0F B2 D1 	call ParseExpression
  343 D1:C768 3A E8 EB D1 	ld a, (amountOfPause)
  344 D1:C76C 3D -  -  -  	dec a
  345 D1:C76D CA F3 C7 D1 	jp z, functionPauseOnce
  346 D1:C771 FD CB D0 66 	bit has_already_pause, (iy+fProgram1)
  347 D1:C775 20 54 -  -  	jr nz, AddPause
  348 D1:C777 3E CD -  -  	ld a, 0CDh
  349 D1:C779 CD AE AC D1 	call InsertA															; call *
  350 D1:C77D CD EA AC D1 	call InsertProgramPtrToDataOffset
  351 D1:C781 2A DE EB D1 	ld hl, (programDataDataPtr)
  352 D1:C785 22 27 EA D0 	ld (PauseStartData), hl
  353 D1:C789 E5 -  -  -  	push hl
  354 D1:C78A D1 -  -  -  	pop de
  355 D1:C78B FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  356 D1:C78F 28 10 -  -  	jr z, +_
  357 D1:C791 E5 -  -  -  	push hl
  358 D1:C792 2A C9 EB D1 	ld hl, (programPtr)
  359 D1:C796 2B -  -  -  		dec hl
  360 D1:C797 2B -  -  -  		dec hl
  361 D1:C798 2B -  -  -  		dec hl
  362 D1:C799 2B -  -  -  		dec hl
  363 D1:C79A ED 07 -  -  		ld bc, (hl)
  364 D1:C79C 0B -  -  -  		dec bc
  365 D1:C79D ED 0F -  -  		ld (hl), bc
  366 D1:C79F E1 -  -  -  	pop hl
  367 D1:C7A0 23 -  -  -  	inc hl
  368 D1:C7A1 CD 66 AC D1 _:	call InsertHL															; call *
  369 D1:C7A5 21 15 F0 D1 	ld hl, PauseRoutine
  370 D1:C7A9 01 13 00 00 	ld bc, PauseRoutineEnd - PauseRoutine
  371 D1:C7AD ED B0 -  -  	ldir
  372 D1:C7AF ED 53 DE EB 
              D1 -  -  -  	ld (programDataDataPtr), de
  373 D1:C7B4 FD CB D0 E6 	set has_already_pause, (iy+fProgram1)
  374 D1:C7B8 C9 -  -  -  	ret
  375 D1:C7B9 21 4C 01 02 _:	ld hl, _GetCSC
  376 D1:C7BD CD 77 AC D1 	call InsertCallHL														; call _GetCSC
  377 D1:C7C1 3E FE -  -  	ld a, 0FEh
  378 D1:C7C3 21 09 20 F8 	ld hl, 0F82009h
  379 D1:C7C7 C3 62 AC D1 	jp InsertAHL															; cp tEnter \ jr nz, $-9
  380 D1:C7CB -  -  -  -  AddPause:
  381 D1:C7CB 3E CD -  -  	ld a, 0CDh
  382 D1:C7CD CD AE AC D1 	call InsertA															; call ******
  383 D1:C7D1 CD EA AC D1 	call InsertProgramPtrToDataOffset
  384 D1:C7D5 2A 27 EA D0 	ld hl, (PauseStartData)
  385 D1:C7D9 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  386 D1:C7DD 28 10 -  -  	jr z, +_
  387 D1:C7DF E5 -  -  -  	push hl
  388 D1:C7E0 2A C9 EB D1 		ld hl, (programPtr)
  389 D1:C7E4 2B -  -  -  		dec hl
  390 D1:C7E5 2B -  -  -  		dec hl
  391 D1:C7E6 2B -  -  -  		dec hl
  392 D1:C7E7 2B -  -  -  		dec hl
  393 D1:C7E8 ED 17 -  -  		ld de, (hl)
  394 D1:C7EA 1B -  -  -  		dec de
  395 D1:C7EB ED 1F -  -  		ld (hl), de
  396 D1:C7ED E1 -  -  -  	pop hl
  397 D1:C7EE 23 -  -  -  	inc hl
  398 D1:C7EF C3 66 AC D1 _:	jp InsertHL																; call XXXXXX
  399 D1:C7F3 -  -  -  -  functionPauseOnce:
  400 D1:C7F3 ED 5B C9 EB 
              D1 -  -  -  	ld de, (programPtr)
  401 D1:C7F8 21 15 F0 D1 	ld hl, PauseRoutine
  402 D1:C7FC 01 13 00 00 	ld bc, PauseRoutineEnd - PauseRoutine
  403 D1:C800 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  404 D1:C804 28 11 -  -  	jr z, +_
  405 D1:C806 DD 2A C9 EB 
              D1 -  -  -  	ld ix, (programPtr)
  406 D1:C80B DD 17 FD -  	ld de, (ix-3)
  407 D1:C80E 1B -  -  -  	dec de
  408 D1:C80F DD 1F FD -  	ld (ix-3), de
  409 D1:C812 ED 12 00 -  	lea de, ix
  410 D1:C815 23 -  -  -  	inc hl
  411 D1:C816 0B -  -  -  	dec bc
  412 D1:C817 ED B0 -  -  _:	ldir
  413 D1:C819 1B -  -  -  	dec de
  414 D1:C81A ED 53 C9 EB 
              D1 -  -  -  	ld (programPtr), de
  415 D1:C81F C9 -  -  -  	ret
  416 D1:C820 -  -  -  -  	
  417 D1:C820 -  -  -  -  functionInput:
  418 D1:C820 CD 28 10 02 	call _IncFetch
  419 D1:C824 FE 41 -  -  	cp tA
  420 D1:C826 DA 05 AF D1 	jp c, ErrorSyntax
  421 D1:C82A FE 5C -  -  	cp ttheta+1
  422 D1:C82C D2 05 AF D1 	jp nc, ErrorSyntax
  423 D1:C830 CD C0 0F 02 	call _NxtFetch
  424 D1:C834 38 06 -  -  	jr c, +_
  425 D1:C836 FE 3F -  -  	cp tEnter
  426 D1:C838 C2 05 AF D1 	jp nz, ErrorSyntax
  427 D1:C83C 3A E7 EB D1 _:	ld a, (amountOfInput)
  428 D1:C840 3D -  -  -  	dec a
  429 D1:C841 28 79 -  -  	jr z, functionInputOnce
  430 D1:C843 3E 3E -  -  	ld a, 03Eh
  431 D1:C845 CD AE AC D1 	call InsertA															; ld a, **
  432 D1:C849 CD 2C 10 02 	call _CurFetch
  433 D1:C84D D6 41 -  -  	sub tA
  434 D1:C84F 47 -  -  -  	ld b, a
  435 D1:C850 87 -  -  -  	add a, a
  436 D1:C851 80 -  -  -  	add a, b
  437 D1:C852 CD AE AC D1 	call InsertA															; ld a, XX
  438 D1:C856 3E 32 -  -  	ld a, 032h
  439 D1:C858 CD AE AC D1 	call InsertA															; ld (******), a
  440 D1:C85C CD EA AC D1 	call InsertProgramPtrToDataOffset
  441 D1:C860 FD CB D0 56 	bit has_already_input, (iy+fProgram1)
  442 D1:C864 20 39 -  -  	jr nz, AddPointerToInput
  443 D1:C866 2A DE EB D1 	ld hl, (programDataDataPtr)
  444 D1:C86A 22 21 EA D0 	ld (InputStartData), hl
  445 D1:C86E 01 3D 00 00 	ld bc, InputOffset-InputRoutine
  446 D1:C872 09 -  -  -  	add hl, bc
  447 D1:C873 CD 66 AC D1 	call InsertHL															; ld (XXXXXX), a
  448 D1:C877 3E CD -  -  	ld a, 0CDh
  449 D1:C879 CD AE AC D1 	call InsertA															; call ******
  450 D1:C87D CD EA AC D1 	call InsertProgramPtrToDataOffset
  451 D1:C881 2A DE EB D1 	ld hl, (programDataDataPtr)
  452 D1:C885 E5 -  -  -  	push hl
  453 D1:C886 D1 -  -  -  	pop de
  454 D1:C887 CD 66 AC D1 	call InsertHL															; call XXXXXX
  455 D1:C88B 21 82 EF D1 _:	ld hl, InputRoutine
  456 D1:C88F 01 42 00 00 	ld bc, InputRoutineEnd-InputRoutine
  457 D1:C893 ED B0 -  -  	ldir
  458 D1:C895 ED 53 DE EB 
              D1 -  -  -  	ld (programDataDataPtr), de
  459 D1:C89A FD CB D0 D6 	set has_already_input, (iy+fProgram1)
  460 D1:C89E C9 -  -  -  	ret
  461 D1:C89F -  -  -  -  AddPointerToInput:
  462 D1:C89F 2A 21 EA D0 	ld hl, (InputStartData)
  463 D1:C8A3 E5 -  -  -  	push hl
  464 D1:C8A4 01 3D 00 00 		ld bc, InputOffset-InputRoutine
  465 D1:C8A8 09 -  -  -  		add hl, bc
  466 D1:C8A9 CD 66 AC D1 		call InsertHL														; ld (XXXXXX), a
  467 D1:C8AD 3E CD -  -  		ld a, 0CDh
  468 D1:C8AF CD AE AC D1 		call InsertA														; call ******
  469 D1:C8B3 CD EA AC D1 		call InsertProgramPtrToDataOffset
  470 D1:C8B7 E1 -  -  -  	pop hl
  471 D1:C8B8 C3 66 AC D1 	jp InsertHL																; call XXXXXX
  472 D1:C8BC -  -  -  -  functionInputOnce:
  473 D1:C8BC CD 2C 10 02 	call _CurFetch
  474 D1:C8C0 D6 41 -  -  	sub tA
  475 D1:C8C2 47 -  -  -  	ld b, a
  476 D1:C8C3 87 -  -  -  	add a, a
  477 D1:C8C4 80 -  -  -  	add a, b
  478 D1:C8C5 32 BF EF D1 	ld (InputOffset), a
  479 D1:C8C9 ED 5B C9 EB 
              D1 -  -  -  	ld de, (programPtr)
  480 D1:C8CE 21 82 EF D1 	ld hl, InputRoutine
  481 D1:C8D2 01 42 00 00 	ld bc, InputRoutineEnd - InputRoutine
  482 D1:C8D6 ED B0 -  -  	ldir
  483 D1:C8D8 D5 -  -  -  	push de
  484 D1:C8D9 DD E1 -  -  	pop ix
  485 D1:C8DB DD 36 FC CD 	ld (ix-4), 0CDh
  486 D1:C8DF ED 53 C9 EB 
              D1 -  -  -  	ld (programPtr), de
  487 D1:C8E4 C9 -  -  -  	ret
  488 D1:C8E5 -  -  -  -  	
  489 D1:C8E5 -  -  -  -  functionNot:
  490 D1:C8E5 3E 01 -  -  	ld a, 1
  491 D1:C8E7 32 E4 EB D1 	ld (amountOfArguments), a
  492 D1:C8EB E5 -  -  -  	push hl
  493 D1:C8EC DD E1 -  -  	pop ix
  494 D1:C8EE DD 7E FC -  	ld a, (ix-4)
  495 D1:C8F1 B7 -  -  -  	or a
  496 D1:C8F2 28 10 -  -  	jr z, NotNumber
  497 D1:C8F4 3D -  -  -  	dec a
  498 D1:C8F5 28 23 -  -  	jr z, NotVariable
  499 D1:C8F7 3D -  -  -  	dec a
  500 D1:C8F8 28 36 -  -  	jr z, NotChainPush
  501 D1:C8FA 3D -  -  -  	dec a
  502 D1:C8FB 28 37 -  -  	jr z, NotChainAns
  503 D1:C8FD 3D -  -  -  	dec a
  504 D1:C8FE 28 48 -  -  	jr z, NotFunction
  505 D1:C900 C3 05 AF D1 	jp ErrorSyntax
  506 D1:C904 -  -  -  -  NotNumber:
  507 D1:C904 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  508 D1:C908 DD 27 FD -  	ld hl, (ix-3)
  509 D1:C90B 19 -  -  -  	add hl, de
  510 D1:C90C B7 -  -  -  	or a
  511 D1:C90D ED 52 -  -  	sbc hl, de
  512 D1:C90F 21 00 00 00 	ld hl, 0
  513 D1:C913 20 01 -  -  	jr nz, +_
  514 D1:C915 23 -  -  -  	inc hl
  515 D1:C916 DD 2F FD -  _:	ld (ix-3), hl
  516 D1:C919 C9 -  -  -  	ret
  517 D1:C91A -  -  -  -  NotVariable:
  518 D1:C91A DD 4E FD -  	ld c, (ix-3)
  519 D1:C91D 06 03 -  -  	ld b, 3
  520 D1:C91F ED 4C -  -  	mlt bc
  521 D1:C921 79 -  -  -  	ld a, c
  522 D1:C922 21 DD 27 00 	ld hl, 00027DDh
  523 D1:C926 CD 70 1D 02 	call _SetHLUToA
  524 D1:C92A CD 66 AC D1 	call InsertHL															; ld hl, (ix+*)
  525 D1:C92E 18 04 -  -  	jr NotChainAns
  526 D1:C930 -  -  -  -  NotChainPush:
  527 D1:C930 C3 3F AF D1 	jp UnknownError
  528 D1:C934 -  -  -  -  NotChainAns:
  529 D1:C934 3E 11 -  -  	ld a, 011h
  530 D1:C936 CD AE AC D1 	call InsertA															; ld de, *
  531 D1:C93A 3E FF -  -  	ld a, 0FFh
  532 D1:C93C 11 FF FF 19 	ld de, 019FFFFh
  533 D1:C940 21 ED 62 23 	ld hl, 02362EDh
  534 D1:C944 C3 A1 AC D1 	jp InsertADEHL															; ld de, -1 \ add hl, de \ sbc hl, hl \ inc hl
  535 D1:C948 -  -  -  -  NotFunction:
  536 D1:C948 DD 7E FD -  	ld a, (ix-3)
  537 D1:C94B 06 02 -  -  	ld b, OutputInHL
  538 D1:C94D CD FF AC D1 	call GetFunction
  539 D1:C951 18 E1 -  -  	jr NotChainAns
  540 D1:C953 -  -  -  -  	
  541 D1:C953 -  -  -  -  functionCE:
  542 D1:C953 23 -  -  -  	inc hl
  543 D1:C954 23 -  -  -  	inc hl
  544 D1:C955 7E -  -  -  	ld a, (hl)
  545 D1:C956 FE 32 -  -  	cp tRemainder
  546 D1:C958 C2 05 AF D1 	jp nz, ErrorSyntax
  547 D1:C95C 11 F6 FF FF 	ld de, -10
  548 D1:C960 19 -  -  -  	add hl, de
  549 D1:C961 -  -  -  -  		
  550 D1:C961 -  -  -  -  functionRemainder:
  551 D1:C961 3E 02 -  -  	ld a, 2
  552 D1:C963 32 E4 EB D1 	ld (amountOfArguments), a
  553 D1:C967 7E -  -  -  	ld a, (hl)
  554 D1:C968 DD 67 -  -  	ld ixh, a
  555 D1:C96A 23 -  -  -  	inc hl
  556 D1:C96B E5 -  -  -  	push hl
  557 D1:C96C ED 07 -  -  		ld bc, (hl)
  558 D1:C96E 23 -  -  -  		inc hl
  559 D1:C96F 23 -  -  -  		inc hl
  560 D1:C970 23 -  -  -  		inc hl
  561 D1:C971 7E -  -  -  		ld a, (hl)
  562 D1:C972 DD 6F -  -  		ld ixl, a
  563 D1:C974 23 -  -  -  		inc hl
  564 D1:C975 ED 17 -  -  		ld de, (hl)
  565 D1:C977 E1 -  -  -  	pop hl
  566 D1:C978 DD 7C -  -  	ld a, ixh
  567 D1:C97A B7 -  -  -  	or a
  568 D1:C97B 28 18 -  -  	jr z, RemainderNumberXXX
  569 D1:C97D 3D -  -  -  	dec a
  570 D1:C97E CA F5 C9 D1 	jp z, RemainderVariableXXX
  571 D1:C982 3D -  -  -  	dec a
  572 D1:C983 CA 3B CA D1 	jp z, RemainderChainPushXXX
  573 D1:C987 3D -  -  -  	dec a
  574 D1:C988 CA 4D CA D1 	jp z, RemainderChainAnsXXX
  575 D1:C98C 3D -  -  -  	dec a
  576 D1:C98D CA 8C CA D1 	jp z, RemainderFunctionXXX
  577 D1:C991 C3 05 AF D1 	jp ErrorSyntax
  578 D1:C995 -  -  -  -  RemainderNumberXXX:
  579 D1:C995 DD 7D -  -  	ld a, ixl
  580 D1:C997 B7 -  -  -  	or a
  581 D1:C998 28 10 -  -  	jr z, RemainderNumberNumber
  582 D1:C99A 3D -  -  -  	dec a
  583 D1:C99B 28 1F -  -  	jr z, RemainderNumberVariable
  584 D1:C99D 3D -  -  -  	dec a
  585 D1:C99E 28 28 -  -  	jr z, RemainderNumberChainPush
  586 D1:C9A0 3D -  -  -  	dec a
  587 D1:C9A1 28 29 -  -  	jr z, RemainderNumberChainAns
  588 D1:C9A3 3D -  -  -  	dec a
  589 D1:C9A4 28 38 -  -  	jr z, RemainderNumberFunction
  590 D1:C9A6 C3 05 AF D1 	jp ErrorSyntax
  591 D1:C9AA -  -  -  -  RemainderNumberNumber:
  592 D1:C9AA FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  593 D1:C9AE E5 -  -  -  	push hl
  594 D1:C9AF C5 -  -  -  		push bc
  595 D1:C9B0 E1 -  -  -  		pop hl
  596 D1:C9B1 D5 -  -  -  		push de
  597 D1:C9B2 C1 -  -  -  		pop bc
  598 D1:C9B3 CD 44 01 00 		call __idvrmu
  599 D1:C9B7 EB -  -  -  		ex de, hl
  600 D1:C9B8 E1 -  -  -  	pop hl
  601 D1:C9B9 ED 1F -  -  	ld (hl), de
  602 D1:C9BB C9 -  -  -  	ret
  603 D1:C9BC -  -  -  -  RemainderNumberVariable:
  604 D1:C9BC 3E 21 -  -  	ld a, 021h
  605 D1:C9BE C5 -  -  -  	push bc
  606 D1:C9BF E1 -  -  -  	pop hl
  607 D1:C9C0 CD 62 AC D1 	call InsertAHL															; ld hl, *
  608 D1:C9C4 C3 71 CA D1 	jp RemainderChainAnsVariable
  609 D1:C9C8 -  -  -  -  RemainderNumberChainPush:
  610 D1:C9C8 C3 3F AF D1 	jp UnknownError
  611 D1:C9CC -  -  -  -  RemainderNumberChainAns:
  612 D1:C9CC 11 E5 C1 21 	ld de, 021C1E5h
  613 D1:C9D0 C5 -  -  -  	push bc
  614 D1:C9D1 E1 -  -  -  	pop hl
  615 D1:C9D2 CD A5 AC D1 	call InsertDEHL															; push hl \ pop bc \ ld hl, *
  616 D1:C9D6 21 44 01 00 	ld hl, __idvrmu
  617 D1:C9DA C3 77 AC D1 	jp InsertCallHL															; call __idvrmu
  618 D1:C9DE -  -  -  -  RemainderNumberFunction:
  619 D1:C9DE 7B -  -  -  	ld a, e
  620 D1:C9DF C5 -  -  -  	push bc
  621 D1:C9E0 06 00 -  -  		ld b, OutputInBC
  622 D1:C9E2 CD FF AC D1 		call GetFunction
  623 D1:C9E6 E1 -  -  -  	pop hl
  624 D1:C9E7 3E 21 -  -  	ld a, 021h
  625 D1:C9E9 CD 62 AC D1 	call InsertAHL															; ld hl, *
  626 D1:C9ED 21 44 01 00 	ld hl, __idvrmu
  627 D1:C9F1 C3 77 AC D1 	jp InsertCallHL															; call __idvrmu
  628 D1:C9F5 -  -  -  -  RemainderVariableXXX:
  629 D1:C9F5 DD 7D -  -  	ld a, ixl
  630 D1:C9F7 B7 -  -  -  	or a
  631 D1:C9F8 28 10 -  -  	jr z, RemainderVariableNumber
  632 D1:C9FA 3D -  -  -  	dec a
  633 D1:C9FB 28 13 -  -  	jr z, RemainderVariableVariable
  634 D1:C9FD 3D -  -  -  	dec a
  635 D1:C9FE 28 16 -  -  	jr z, RemainderVariableChainPush
  636 D1:CA00 3D -  -  -  	dec a
  637 D1:CA01 28 17 -  -  	jr z, RemainderVariableChainAns
  638 D1:CA03 3D -  -  -  	dec a
  639 D1:CA04 28 2C -  -  	jr z, RemainderVariableFunction
  640 D1:CA06 C3 05 AF D1 	jp ErrorSyntax
  641 D1:CA0A -  -  -  -  RemainderVariableNumber:
  642 D1:CA0A CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  643 D1:CA0E 18 52 -  -  	jr RemainderChainAnsNumber
  644 D1:CA10 -  -  -  -  RemainderVariableVariable
  645 D1:CA10 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  646 D1:CA14 18 5B -  -  	jr RemainderChainAnsVariable
  647 D1:CA16 -  -  -  -  RemainderVariableChainPush:
  648 D1:CA16 C3 3F AF D1 	jp UnknownError
  649 D1:CA1A -  -  -  -  RemainderVariableChainAns:
  650 D1:CA1A 3E E5 -  -  	ld a, 0E5h
  651 D1:CA1C CD AE AC D1 	call InsertA															; push hl
  652 D1:CA20 3E C1 -  -  	ld a, 0C1h
  653 D1:CA22 CD AE AC D1 	call InsertA															; pop bc
  654 D1:CA26 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  655 D1:CA2A 21 44 01 00 	ld hl, __idvrmu
  656 D1:CA2E C3 77 AC D1 	jp InsertCallHL															; call __idvrmu
  657 D1:CA32 -  -  -  -  RemainderVariableFunction:
  658 D1:CA32 7B -  -  -  	ld a, e
  659 D1:CA33 06 00 -  -  	ld b, OutputInBC
  660 D1:CA35 CD FF AC D1 	call GetFunction
  661 D1:CA39 18 EB -  -  	jr -_
  662 D1:CA3B -  -  -  -  RemainderChainPushXXX:
  663 D1:CA3B DD 7D -  -  	ld a, ixl
  664 D1:CA3D FE 03 -  -  	cp typeChainAns
  665 D1:CA3F C2 3F AF D1 	jp nz, UnknownError
  666 D1:CA43 21 E5 C1 E1 	ld hl, 0E1C1E5h
  667 D1:CA47 CD 62 AC D1 	call InsertAHL															; push hl \ pop bc \ pop hl
  668 D1:CA4B 18 1C -  -  	jr +_
  669 D1:CA4D -  -  -  -  RemainderChainAnsXXX:
  670 D1:CA4D DD 7D -  -  	ld a, ixl
  671 D1:CA4F B7 -  -  -  	or a
  672 D1:CA50 28 10 -  -  	jr z, RemainderChainAnsNumber
  673 D1:CA52 3D -  -  -  	dec a
  674 D1:CA53 28 1C -  -  	jr z, RemainderChainAnsVariable
  675 D1:CA55 3D -  -  -  	dec a
  676 D1:CA56 28 1F -  -  	jr z, RemainderChainAnsChainPush
  677 D1:CA58 3D -  -  -  	dec a
  678 D1:CA59 28 20 -  -  	jr z, RemainderChainAnsChainAns
  679 D1:CA5B 3D -  -  -  	dec a
  680 D1:CA5C 28 21 -  -  	jr z, RemainderChainAnsFunction
  681 D1:CA5E C3 05 AF D1 	jp ErrorSyntax
  682 D1:CA62 -  -  -  -  RemainderChainAnsNumber:
  683 D1:CA62 EB -  -  -  	ex de, hl
  684 D1:CA63 3E 01 -  -  	ld a, 001h
  685 D1:CA65 CD 62 AC D1 	call InsertAHL															; ld bc, *
  686 D1:CA69 21 44 01 00 _:	ld hl, __idvrmu
  687 D1:CA6D C3 77 AC D1 	jp InsertCallHL															; call __idvrmu
  688 D1:CA71 -  -  -  -  RemainderChainAnsVariable:
  689 D1:CA71 CD 93 AC D1 	call InsertIXC															; ld bc, (ix+*)
  690 D1:CA75 18 F2 -  -  	jr -_
  691 D1:CA77 -  -  -  -  RemainderChainAnsChainPush:
  692 D1:CA77 C3 3F AF D1 	jp UnknownError
  693 D1:CA7B -  -  -  -  RemainderChainAnsChainAns:
  694 D1:CA7B C3 3F AF D1 	jp UnknownError
  695 D1:CA7F -  -  -  -  RemainderChainAnsFunction:
  696 D1:CA7F 7B -  -  -  	ld a, e
  697 D1:CA80 06 00 -  -  	ld b, OutputInBC
  698 D1:CA82 FD CB C0 F6 	set need_push, (iy+fExpression1)
  699 D1:CA86 CD FF AC D1 	call GetFunction
  700 D1:CA8A 18 DD -  -  	jr -_
  701 D1:CA8C -  -  -  -  RemainderFunctionXXX:
  702 D1:CA8C DD 7D -  -  	ld a, ixl
  703 D1:CA8E B7 -  -  -  	or a
  704 D1:CA8F 28 10 -  -  	jr z, RemainderFunctionNumber
  705 D1:CA91 3D -  -  -  	dec a
  706 D1:CA92 28 16 -  -  	jr z, RemainderFunctionVariable
  707 D1:CA94 3D -  -  -  	dec a
  708 D1:CA95 28 1C -  -  	jr z, RemainderFunctionChainPush
  709 D1:CA97 3D -  -  -  	dec a
  710 D1:CA98 28 1D -  -  	jr z, RemainderFunctionChainAns
  711 D1:CA9A 3D -  -  -  	dec a
  712 D1:CA9B 28 2F -  -  	jr z, RemainderFunctionFunction
  713 D1:CA9D C3 05 AF D1 	jp ErrorSyntax
  714 D1:CAA1 -  -  -  -  RemainderFunctionNumber:
  715 D1:CAA1 79 -  -  -  	ld a, c
  716 D1:CAA2 06 02 -  -  	ld b, OutputInHL
  717 D1:CAA4 CD FF AC D1 	call GetFunction
  718 D1:CAA8 18 B8 -  -  	jr RemainderChainAnsNumber
  719 D1:CAAA -  -  -  -  RemainderFunctionVariable:
  720 D1:CAAA 79 -  -  -  	ld a, c
  721 D1:CAAB 06 02 -  -  	ld b, OutputInHL
  722 D1:CAAD CD FF AC D1 	call GetFunction
  723 D1:CAB1 18 BE -  -  	jr RemainderChainAnsVariable
  724 D1:CAB3 -  -  -  -  RemainderFunctionChainPush:
  725 D1:CAB3 C3 3F AF D1 	jp UnknownError
  726 D1:CAB7 -  -  -  -  RemainderFunctionChainAns:
  727 D1:CAB7 3E E5 -  -  	ld a, 0E5h
  728 D1:CAB9 CD AE AC D1 	call InsertA														; push hl
  729 D1:CABD 3E C1 -  -  	ld a, 0C1h
  730 D1:CABF CD AE AC D1 	call InsertA														; pop bc
  731 D1:CAC3 79 -  -  -  	ld a, c
  732 D1:CAC4 06 02 -  -  	ld b, OutputInHL
  733 D1:CAC6 CD FF AC D1 	call GetFunction
  734 D1:CACA 18 9D -  -  	jr -_
  735 D1:CACC -  -  -  -  RemainderFunctionFunction:
  736 D1:CACC 7B -  -  -  	ld a, e
  737 D1:CACD 06 00 -  -  	ld b, OutputInBC
  738 D1:CACF CD FF AC D1 	call GetFunction
  739 D1:CAD3 79 -  -  -  	ld a, c
  740 D1:CAD4 06 02 -  -  	ld b, OutputInHL
  741 D1:CAD6 CD FF AC D1 	call GetFunction
  742 D1:CADA 18 8D -  -  	jr -_
  743 D1:CADC -  -  -  -  	
  744 D1:CADC -  -  -  -  functionMean:
  745 D1:CADC FD CB BF C6 	set use_mean_routine, (iy+fExpression2)
  746 D1:CAE0 -  -  -  -  functionMax:
  747 D1:CAE0 3E 30 -  -  	ld a, 030h
  748 D1:CAE2 18 02 -  -  	jr +_
  749 D1:CAE4 -  -  -  -  functionMin:
  750 D1:CAE4 3E 38 -  -  	ld a, 038h
  751 D1:CAE6 32 23 CC D1 _:	ld (MaxMinMeanInsertSMC), a
  752 D1:CAEA 3E 02 -  -  	ld a, 2
  753 D1:CAEC 32 E4 EB D1 	ld (amountOfArguments), a
  754 D1:CAF0 2B -  -  -  	dec hl
  755 D1:CAF1 2B -  -  -  	dec hl
  756 D1:CAF2 2B -  -  -  	dec hl
  757 D1:CAF3 ED 17 -  -  	ld de, (hl)
  758 D1:CAF5 2B -  -  -  	dec hl
  759 D1:CAF6 7E -  -  -  	ld a, (hl)
  760 D1:CAF7 DD 6F -  -  	ld ixl, a
  761 D1:CAF9 2B -  -  -  	dec hl
  762 D1:CAFA 2B -  -  -  	dec hl
  763 D1:CAFB 2B -  -  -  	dec hl
  764 D1:CAFC ED 07 -  -  	ld bc, (hl)
  765 D1:CAFE 2B -  -  -  	dec hl
  766 D1:CAFF 7E -  -  -  	ld a, (hl)
  767 D1:CB00 23 -  -  -  	inc hl
  768 D1:CB01 B7 -  -  -  	or a
  769 D1:CB02 28 18 -  -  	jr z, MaxMinMeanNumberXXX
  770 D1:CB04 3D -  -  -  	dec a
  771 D1:CB05 CA 8B CB D1 	jp z, MaxMinMeanVariableXXX
  772 D1:CB09 3D -  -  -  	dec a
  773 D1:CB0A CA D4 CB D1 	jp z, MaxMinMeanChainPushXXX
  774 D1:CB0E 3D -  -  -  	dec a
  775 D1:CB0F CA F8 CB D1 	jp z, MaxMinMeanChainAnsXXX
  776 D1:CB13 3D -  -  -  	dec a
  777 D1:CB14 CA 45 CC D1 	jp z, MaxMinMeanFunctionXXX
  778 D1:CB18 C3 05 AF D1 	jp ErrorSyntax
  779 D1:CB1C -  -  -  -  MaxMinMeanNumberXXX:
  780 D1:CB1C DD 7D -  -  	ld a, ixl
  781 D1:CB1E B7 -  -  -  	or a
  782 D1:CB1F 28 10 -  -  	jr z, MaxMinMeanNumberNumber
  783 D1:CB21 3D -  -  -  	dec a
  784 D1:CB22 28 4B -  -  	jr z, MaxMinMeanNumberVariable
  785 D1:CB24 3D -  -  -  	dec a
  786 D1:CB25 28 4F -  -  	jr z, MaxMinMeanNumberChainPush
  787 D1:CB27 3D -  -  -  	dec a
  788 D1:CB28 28 50 -  -  	jr z, MaxMinMeanNumberChainAns
  789 D1:CB2A 3D -  -  -  	dec a
  790 D1:CB2B 28 51 -  -  	jr z, MaxMinMeanNumberFunction
  791 D1:CB2D C3 05 AF D1 	jp ErrorSyntax
  792 D1:CB31 -  -  -  -  MaxMinMeanNumberNumber:
  793 D1:CB31 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  794 D1:CB35 E5 -  -  -  	push hl
  795 D1:CB36 FD CB BF 46 		bit use_mean_routine, (iy+fExpression2)
  796 D1:CB3A 20 1C -  -  		jr nz, ++_
  797 D1:CB3C 3A 23 CC D1 		ld a, (MaxMinMeanInsertSMC)
  798 D1:CB40 C5 -  -  -  		push bc
  799 D1:CB41 E1 -  -  -  		pop hl
  800 D1:CB42 FE 30 -  -  		cp 030h
  801 D1:CB44 28 09 -  -  		jr z, +_
  802 D1:CB46 B7 -  -  -  		or a
  803 D1:CB47 ED 52 -  -  		sbc hl, de
  804 D1:CB49 19 -  -  -  		add hl, de
  805 D1:CB4A 30 01 -  -  		jr nc, $+3
  806 D1:CB4C EB -  -  -  		ex de, hl
  807 D1:CB4D 18 1C -  -  		jr +++_
  808 D1:CB4F B7 -  -  -  _:		or a
  809 D1:CB50 ED 52 -  -  		sbc hl, de
  810 D1:CB52 19 -  -  -  		add hl, de
  811 D1:CB53 38 01 -  -  		jr c, $+3
  812 D1:CB55 EB -  -  -  		ex de, hl
  813 D1:CB56 18 13 -  -  		jr ++_
  814 D1:CB58 EB -  -  -  _:		ex de, hl
  815 D1:CB59 DD 21 00 00 
              00 -  -  -  		ld ix, 0
  816 D1:CB5E DD 39 -  -  		add ix, sp
  817 D1:CB60 09 -  -  -  		add hl, bc
  818 D1:CB61 E5 -  -  -  		push hl
  819 D1:CB62 DD CB FF 1E 			rr (ix-1)
  820 D1:CB66 D1 -  -  -  		pop de
  821 D1:CB67 CB 1A -  -  		rr d
  822 D1:CB69 CB 1B -  -  		rr e
  823 D1:CB6B E1 -  -  -  _:	pop hl
  824 D1:CB6C ED 1F -  -  	ld (hl), de
  825 D1:CB6E C9 -  -  -  	ret
  826 D1:CB6F -  -  -  -  MaxMinMeanNumberVariable:
  827 D1:CB6F C5 -  -  -  	push bc
  828 D1:CB70 E1 -  -  -  	pop hl
  829 D1:CB71 EB -  -  -  	ex de, hl
  830 D1:CB72 E5 -  -  -  	push hl
  831 D1:CB73 C1 -  -  -  	pop bc
  832 D1:CB74 18 2A -  -  	jr MaxMinMeanVariableNumber
  833 D1:CB76 -  -  -  -  MaxMinMeanNumberChainPush:
  834 D1:CB76 C3 3F AF D1 	jp UnknownError
  835 D1:CB7A -  -  -  -  MaxMinMeanNumberChainAns:
  836 D1:CB7A C5 -  -  -  	push bc
  837 D1:CB7B D1 -  -  -  	pop de
  838 D1:CB7C 18 09 -  -  	jr +_
  839 D1:CB7E -  -  -  -  MaxMinMeanNumberFunction:
  840 D1:CB7E 7B -  -  -  	ld a, e
  841 D1:CB7F C5 -  -  -  	push bc
  842 D1:CB80 06 02 -  -  		ld b, OutputInHL
  843 D1:CB82 CD FF AC D1 		call GetFunction
  844 D1:CB86 D1 -  -  -  	pop de
  845 D1:CB87 C3 0D CC D1 _:	jp MaxMinMeanChainAnsNumber
  846 D1:CB8B -  -  -  -  MaxMinMeanVariableXXX:
  847 D1:CB8B DD 7D -  -  	ld a, ixl
  848 D1:CB8D B7 -  -  -  	or a
  849 D1:CB8E 28 10 -  -  	jr z, MaxMinMeanVariableNumber
  850 D1:CB90 3D -  -  -  	dec a
  851 D1:CB91 28 13 -  -  	jr z, MaxMinMeanVariableVariable
  852 D1:CB93 3D -  -  -  	dec a
  853 D1:CB94 28 18 -  -  	jr z, MaxMinMeanVariableChainPush
  854 D1:CB96 3D -  -  -  	dec a
  855 D1:CB97 28 2B -  -  	jr z, MaxMinMeanVariableChainAns
  856 D1:CB99 3D -  -  -  	dec a
  857 D1:CB9A 28 2F -  -  	jr z, MaxMinMeanVariableFunction
  858 D1:CB9C C3 05 AF D1 	jp ErrorSyntax
  859 D1:CBA0 -  -  -  -  MaxMinMeanVariableNumber:
  860 D1:CBA0 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  861 D1:CBA4 18 67 -  -  	jr MaxMinMeanChainAnsNumber
  862 D1:CBA6 -  -  -  -  MaxMinMeanVariableVariable
  863 D1:CBA6 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  864 D1:CBAA C3 2A CC D1 	jp MaxMinMeanChainAnsVariable
  865 D1:CBAE -  -  -  -  MaxMinMeanVariableChainPush:
  866 D1:CBAE 2A C9 EB D1 	ld hl, (programPtr)
  867 D1:CBB2 2B -  -  -  	dec hl
  868 D1:CBB3 7E -  -  -  	ld a, (hl)
  869 D1:CBB4 FE E5 -  -  	cp 0E5h
  870 D1:CBB6 28 03 -  -  	jr z, +_
  871 D1:CBB8 36 E1 -  -  	ld (hl), 0E1h
  872 D1:CBBA 23 -  -  -  	inc hl
  873 D1:CBBB 22 C9 EB D1 _:	ld (programPtr), hl
  874 D1:CBBF 59 -  -  -  	ld e, c
  875 D1:CBC0 C3 2A CC D1 	jp MaxMinMeanChainAnsVariable
  876 D1:CBC4 -  -  -  -  MaxMinMeanVariableChainAns:
  877 D1:CBC4 59 -  -  -  _:	ld e, c
  878 D1:CBC5 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
  879 D1:CBC9 18 49 -  -  	jr MaxMinMeanInsert
  880 D1:CBCB -  -  -  -  MaxMinMeanVariableFunction:
  881 D1:CBCB 7B -  -  -  	ld a, e
  882 D1:CBCC 06 02 -  -  	ld b, OutputInHL
  883 D1:CBCE CD FF AC D1 	call GetFunction
  884 D1:CBD2 18 F0 -  -  	jr -_
  885 D1:CBD4 -  -  -  -  MaxMinMeanChainPushXXX:
  886 D1:CBD4 DD 7D -  -  	ld a, ixl
  887 D1:CBD6 FE 03 -  -  	cp typeChainAns
  888 D1:CBD8 C2 3F AF D1 	jp nz, UnknownError
  889 D1:CBDC FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
  890 D1:CBE0 20 0E -  -  	jr nz, +_
  891 D1:CBE2 3E ED -  -  	ld a, 0EDh
  892 D1:CBE4 CD AE AC D1 	call InsertA															; ex de, hl
  893 D1:CBE8 3E E1 -  -  	ld a, 0E1h
  894 D1:CBEA CD AE AC D1 	call InsertA															; pop hl
  895 D1:CBEE 18 24 -  -  	jr MaxMinMeanInsert
  896 D1:CBF0 3E D1 -  -  _:	ld a, 0D1h
  897 D1:CBF2 CD AE AC D1 	call InsertA															; pop de
  898 D1:CBF6 18 1C -  -  	jr MaxMinMeanInsert
  899 D1:CBF8 -  -  -  -  MaxMinMeanChainAnsXXX:
  900 D1:CBF8 DD 7D -  -  	ld a, ixl
  901 D1:CBFA B7 -  -  -  	or a
  902 D1:CBFB 28 10 -  -  	jr z, MaxMinMeanChainAnsNumber
  903 D1:CBFD 3D -  -  -  	dec a
  904 D1:CBFE 28 2A -  -  	jr z, MaxMinMeanChainAnsVariable
  905 D1:CC00 3D -  -  -  	dec a
  906 D1:CC01 28 2D -  -  	jr z, MaxMinMeanChainAnsChainPush
  907 D1:CC03 3D -  -  -  	dec a
  908 D1:CC04 28 2E -  -  	jr z, MaxMinMeanChainAnsChainAns
  909 D1:CC06 3D -  -  -  	dec a
  910 D1:CC07 28 2F -  -  	jr z, MaxMinMeanChainAnsFunction
  911 D1:CC09 C3 05 AF D1 	jp ErrorSyntax
  912 D1:CC0D -  -  -  -  MaxMinMeanChainAnsNumber:
  913 D1:CC0D EB -  -  -  	ex de, hl
  914 D1:CC0E 3E 11 -  -  	ld a, 011h
  915 D1:CC10 CD 62 AC D1 	call InsertAHL															; ld de, *
  916 D1:CC14 -  -  -  -  MaxMinMeanInsert:
  917 D1:CC14 FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
  918 D1:CC18 C2 A4 CC D1 	jp nz, MeanInsert
  919 D1:CC1C 3E B7 -  -  	ld a, 0B7h
  920 D1:CC1E 11 ED 52 19 	ld de, 01952EDh
  921 D1:CC22 -  -  -  -  MaxMinMeanInsertSMC = $+1
  922 D1:CC22 21 30 01 EB 	ld hl, 0EB0130h
  923 D1:CC26 C3 A1 AC D1 	jp InsertADEHL															; or a \ sbc hl, de \ add hl, de \ jr [n]c, $+3 \ add hl, de
  924 D1:CC2A -  -  -  -  MaxMinMeanChainAnsVariable:
  925 D1:CC2A CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
  926 D1:CC2E 18 E4 -  -  	jr MaxMinMeanInsert
  927 D1:CC30 -  -  -  -  MaxMinMeanChainAnsChainPush:
  928 D1:CC30 C3 3F AF D1 	jp UnknownError
  929 D1:CC34 -  -  -  -  MaxMinMeanChainAnsChainAns:
  930 D1:CC34 C3 3F AF D1 	jp UnknownError
  931 D1:CC38 -  -  -  -  MaxMinMeanChainAnsFunction:
  932 D1:CC38 7B -  -  -  	ld a, e
  933 D1:CC39 06 01 -  -  	ld b, OutputInDE
  934 D1:CC3B FD CB C0 F6 	set need_push, (iy+fExpression1)
  935 D1:CC3F CD FF AC D1 	call GetFunction
  936 D1:CC43 18 CF -  -  _:	jr MaxMinMeanInsert
  937 D1:CC45 -  -  -  -  MaxMinMeanFunctionXXX:
  938 D1:CC45 DD 7D -  -  	ld a, ixl
  939 D1:CC47 B7 -  -  -  	or a
  940 D1:CC48 28 10 -  -  	jr z, MaxMinMeanFunctionNumber
  941 D1:CC4A 3D -  -  -  	dec a
  942 D1:CC4B 28 16 -  -  	jr z, MaxMinMeanFunctionVariable
  943 D1:CC4D 3D -  -  -  	dec a
  944 D1:CC4E 28 1C -  -  	jr z, MaxMinMeanFunctionChainPush
  945 D1:CC50 3D -  -  -  	dec a
  946 D1:CC51 28 1D -  -  	jr z, MaxMinMeanFunctionChainAns
  947 D1:CC53 3D -  -  -  	dec a
  948 D1:CC54 28 38 -  -  	jr z, MaxMinMeanFunctionFunction
  949 D1:CC56 C3 05 AF D1 	jp ErrorSyntax
  950 D1:CC5A -  -  -  -  MaxMinMeanFunctionNumber:
  951 D1:CC5A 79 -  -  -  	ld a, c
  952 D1:CC5B 06 02 -  -  	ld b, OutputInHL
  953 D1:CC5D CD FF AC D1 	call GetFunction
  954 D1:CC61 18 AA -  -  	jr MaxMinMeanChainAnsNumber
  955 D1:CC63 -  -  -  -  MaxMinMeanFunctionVariable:
  956 D1:CC63 79 -  -  -  	ld a, c
  957 D1:CC64 06 02 -  -  	ld b, OutputInHL
  958 D1:CC66 CD FF AC D1 	call GetFunction
  959 D1:CC6A 18 BE -  -  	jr MaxMinMeanChainAnsVariable
  960 D1:CC6C -  -  -  -  MaxMinMeanFunctionChainPush:
  961 D1:CC6C C3 3F AF D1 	jp UnknownError
  962 D1:CC70 -  -  -  -  MaxMinMeanFunctionChainAns:
  963 D1:CC70 FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
  964 D1:CC74 20 13 -  -  	jr nz, ++_
  965 D1:CC76 3E EB -  -  	ld a, 0EBh
  966 D1:CC78 CD AE AC D1 	call InsertA															; ex de, hl
  967 D1:CC7C 79 -  -  -  	ld a, c
  968 D1:CC7D 06 02 -  -  	ld b, OutputInHL
  969 D1:CC7F FD CB C0 F6 _:	set need_push, (iy+fExpression1)
  970 D1:CC83 CD FF AC D1 	call GetFunction
  971 D1:CC87 18 8B -  -  	jr MaxMinMeanInsert
  972 D1:CC89 79 -  -  -  _:	ld a, c
  973 D1:CC8A 06 01 -  -  	ld b, OutputInDE
  974 D1:CC8C 18 F1 -  -  	jr --_
  975 D1:CC8E -  -  -  -  MaxMinMeanFunctionFunction:
  976 D1:CC8E 7B -  -  -  	ld a, e
  977 D1:CC8F 06 01 -  -  	ld b, OutputInDE
  978 D1:CC91 CD FF AC D1 	call GetFunction
  979 D1:CC95 79 -  -  -  	ld a, c
  980 D1:CC96 06 02 -  -  	ld b, OutputInHL
  981 D1:CC98 FD CB C0 F6 	set need_push, (iy+fExpression1)
  982 D1:CC9C CD FF AC D1 	call GetFunction
  983 D1:CCA0 C3 14 CC D1 	jp MaxMinMeanInsert
  984 D1:CCA4 -  -  -  -  MeanInsert:
  985 D1:CCA4 FD CB D0 6E 	bit has_already_mean, (iy+fProgram1)
  986 D1:CCA8 20 2C -  -  	jr nz, +_
  987 D1:CCAA 3E CD -  -  	ld a, 0CDh
  988 D1:CCAC CD AE AC D1 	call InsertA															; call *
  989 D1:CCB0 CD EA AC D1 	call InsertProgramPtrToDataOffset
  990 D1:CCB4 2A DE EB D1 	ld hl, (programDataDataPtr)
  991 D1:CCB8 22 2A EA D0 	ld (MeanStartData), hl
  992 D1:CCBC E5 -  -  -  	push hl
  993 D1:CCBD D1 -  -  -  	pop de
  994 D1:CCBE CD 66 AC D1 	call InsertHL															; call *
  995 D1:CCC2 21 28 F0 D1 	ld hl, MeanRoutine
  996 D1:CCC6 01 18 00 00 	ld bc, MeanRoutineEnd - MeanRoutine
  997 D1:CCCA ED B0 -  -  	ldir
  998 D1:CCCC ED 53 DE EB 
              D1 -  -  -  	ld (programDataDataPtr), de
  999 D1:CCD1 FD CB D0 EE 	set has_already_mean, (iy+fProgram1)
 1000 D1:CCD5 C9 -  -  -  	ret
 1001 D1:CCD6 3E CD -  -  _:	ld a, 0CDh
 1002 D1:CCD8 CD AE AC D1 	call InsertA															; call ******
 1003 D1:CCDC CD EA AC D1 	call InsertProgramPtrToDataOffset
 1004 D1:CCE0 2A 2A EA D0 	ld hl, (MeanStartData)
 1005 D1:CCE4 C3 66 AC D1 	jp InsertHL																; call XXXXXX
 1006 D1:CCE8 -  -  -  -  	
 1007 D1:CCE8 -  -  -  -  functionC:
 1008 D1:CCE8 3E 01 -  -  	ld a, 1
 1009 D1:CCEA 32 E3 EB D1 	ld (openedParensF), a
 1010 D1:CCEE CD 28 10 02 	call _IncFetch
 1011 D1:CCF2 CD 0F B2 D1 	call ParseExpression
 1012 D1:CCF6 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
 1013 D1:CCFA CA 05 AF D1 	jp z, ErrorSyntax
 1014 D1:CCFE 2A C9 EB D1 	ld hl, (programPtr)
 1015 D1:CD02 2B -  -  -  	dec hl
 1016 D1:CD03 2B -  -  -  	dec hl
 1017 D1:CD04 2B -  -  -  	dec hl
 1018 D1:CD05 2B -  -  -  	dec hl
 1019 D1:CD06 22 C9 EB D1 	ld (programPtr), hl
 1020 D1:CD0A 23 -  -  -  	inc hl
 1021 D1:CD0B ED 27 -  -  	ld hl, (hl)
 1022 D1:CD0D 11 4F 00 00 	ld de, AMOUNT_OF_C_FUNCTIONS
 1023 D1:CD11 B7 -  -  -  	or a
 1024 D1:CD12 ED 52 -  -  	sbc hl, de
 1025 D1:CD14 D2 05 AF D1 	jp nc, ErrorSyntax
 1026 D1:CD18 19 -  -  -  	add hl, de
 1027 D1:CD19 7D -  -  -  	ld a, l
 1028 D1:CD1A B7 -  -  -  	or a
 1029 D1:CD1B ED 62 -  -  	sbc hl, hl
 1030 D1:CD1D 6F -  -  -  	ld l, a
 1031 D1:CD1E 11 C8 E9 D1 	ld de, CFunctionsArguments
 1032 D1:CD22 19 -  -  -  	add hl, de
 1033 D1:CD23 47 -  -  -  	ld b, a
 1034 D1:CD24 7E -  -  -  	ld a, (hl)
 1035 D1:CD25 FE E0 -  -  	cp %11100000
 1036 D1:CD27 CA 4B AF D1 	jp z, ImplementError
 1037 D1:CD2B FD 77 B0 -  	ld (iy+fFunction1), a
 1038 D1:CD2E 07 -  -  -  	rlca
 1039 D1:CD2F 07 -  -  -  	rlca
 1040 D1:CD30 07 -  -  -  	rlca
 1041 D1:CD31 E6 07 -  -  	and 000000111b
 1042 D1:CD33 57 -  -  -  	ld d, a
 1043 D1:CD34 78 -  -  -  	ld a, b
 1044 D1:CD35 21 13 EB D1 	ld hl, CSpecialFunctions
 1045 D1:CD39 01 05 00 00 	ld bc, CSpecialFunctionsEnd - CSpecialFunctions
 1046 D1:CD3D ED B1 -  -  	cpir
 1047 D1:CD3F 20 0C -  -  	jr nz, +_
 1048 D1:CD41 06 03 -  -  	ld b, 3
 1049 D1:CD43 ED 4C -  -  	mlt bc
 1050 D1:CD45 21 18 EB D1 	ld hl, CSpecialFunctionsStart
 1051 D1:CD49 09 -  -  -  	add hl, bc
 1052 D1:CD4A ED 27 -  -  	ld hl, (hl)
 1053 D1:CD4C E9 -  -  -  	jp (hl)
 1054 D1:CD4D 4A -  -  -  _:	ld c, d
 1055 D1:CD4E 06 03 -  -  	ld b, 3
 1056 D1:CD50 ED 4C -  -  	mlt bc
 1057 D1:CD52 DD 21 27 EB 
              D1 -  -  -  	ld ix, CArguments
 1058 D1:CD57 DD 09 -  -  	add ix, bc
 1059 D1:CD59 DD 27 15 -  	ld hl, (ix+21)
 1060 D1:CD5C 77 -  -  -  	ld (hl), a
 1061 D1:CD5D DD 27 00 -  	ld hl, (ix)
 1062 D1:CD60 E9 -  -  -  	jp (hl)
 1063 D1:CD61 -  -  -  -  
 1064 D1:CD61 -  -  -  -  functionCustom:
 1065 D1:CD61 CD 28 10 02 	call _IncFetch
 1066 D1:CD65 D6 0A -  -  	sub 10
 1067 D1:CD67 DA 05 AF D1 	jp c, ErrorSyntax
 1068 D1:CD6B FE 05 -  -  	cp AMOUNT_OF_CUSTOM_TOKENS + 1
 1069 D1:CD6D D2 05 AF D1 	jp nc, ErrorSyntax
 1070 D1:CD71 4F -  -  -  	ld c, a
 1071 D1:CD72 06 03 -  -  	ld b, 3
 1072 D1:CD74 ED 4C -  -  	mlt bc
 1073 D1:CD76 21 51 EB D1 	ld hl, functionCustomStart
 1074 D1:CD7A 09 -  -  -  	add hl, bc
 1075 D1:CD7B ED 27 -  -  	ld hl, (hl)
 1076 D1:CD7D E9 -  -  -  	jp (hl)
 1077 D1:CD7E -  -  -  -  	
 1078 D1:CD7E -  -  -  -  functionExecHex:
 1079 D1:CD7E CD 28 10 02 	call _IncFetch
 1080 D1:CD82 D8 -  -  -  	ret c
 1081 D1:CD83 FE 3F -  -  	cp tEnter
 1082 D1:CD85 C8 -  -  -  	ret z
 1083 D1:CD86 FE 2A -  -  	cp tString
 1084 D1:CD88 C8 -  -  -  	ret z
 1085 D1:CD89 21 B3 EB D1 	ld hl, hexadecimals
 1086 D1:CD8D 01 10 00 00 	ld bc, 16
 1087 D1:CD91 ED B1 -  -  	cpir
 1088 D1:CD93 C2 05 AF D1 _:	jp nz, ErrorSyntax
 1089 D1:CD97 51 -  -  -  	ld d, c
 1090 D1:CD98 CD 28 10 02 	call _IncFetch
 1091 D1:CD9C DA 05 AF D1 	jp c, ErrorSyntax
 1092 D1:CDA0 21 B3 EB D1 	ld hl, hexadecimals
 1093 D1:CDA4 01 10 00 00 	ld bc, 16
 1094 D1:CDA8 ED B1 -  -  	cpir
 1095 D1:CDAA 20 E7 -  -  	jr nz, -_
 1096 D1:CDAC 7A -  -  -  	ld a, d
 1097 D1:CDAD 87 -  -  -  	add a, a
 1098 D1:CDAE 87 -  -  -  	add a, a
 1099 D1:CDAF 87 -  -  -  	add a, a
 1100 D1:CDB0 87 -  -  -  	add a, a
 1101 D1:CDB1 81 -  -  -  	add a, c
 1102 D1:CDB2 CD AE AC D1 	call InsertA
 1103 D1:CDB6 18 C6 -  -  	jr functionExecHex
 1104 D1:CDB8 -  -  -  -  	
 1105 D1:CDB8 -  -  -  -  functionDefineSprite:
 1106 D1:CDB8 FD CB D0 7E 	bit used_code, (iy+fProgram1)
 1107 D1:CDBC C2 2D AF D1 	jp nz, ErrorUsedCode
 1108 D1:CDC0 3E 01 -  -  	ld a, 1
 1109 D1:CDC2 32 E3 EB D1 	ld (openedParensF), a
 1110 D1:CDC6 CD 28 10 02 	call _IncFetch
 1111 D1:CDCA CD 0F B2 D1 	call ParseExpression
 1112 D1:CDCE FD CB C0 66 	bit output_is_number, (iy+fExpression1)
 1113 D1:CDD2 CA 05 AF D1 	jp z, ErrorSyntax
 1114 D1:CDD6 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
 1115 D1:CDDA CA 05 AF D1 	jp z, ErrorSyntax
 1116 D1:CDDE 2A C9 EB D1 	ld hl, (programPtr)
 1117 D1:CDE2 2B -  -  -  	dec hl
 1118 D1:CDE3 2B -  -  -  	dec hl
 1119 D1:CDE4 2B -  -  -  	dec hl
 1120 D1:CDE5 2B -  -  -  	dec hl
 1121 D1:CDE6 22 C9 EB D1 	ld (programPtr), hl
 1122 D1:CDEA 23 -  -  -  	inc hl
 1123 D1:CDEB ED 27 -  -  	ld hl, (hl)
 1124 D1:CDED E5 -  -  -  	push hl
 1125 D1:CDEE C1 -  -  -  	pop bc
 1126 D1:CDEF 29 -  -  -  	add hl, hl
 1127 D1:CDF0 09 -  -  -  	add hl, bc
 1128 D1:CDF1 ED 5B DE EB 
              D1 -  -  -  	ld de, (programDataDataPtr)
 1129 D1:CDF6 01 2F 11 D1 	ld bc, spriteStack
 1130 D1:CDFA 09 -  -  -  	add hl, bc
 1131 D1:CDFB ED 1F -  -  	ld (hl), de
 1132 D1:CDFD 2A DB EB D1 	ld hl, (tempListsPtr)
 1133 D1:CE01 ED 1F -  -  	ld (hl), de
 1134 D1:CE03 23 -  -  -  	inc hl
 1135 D1:CE04 23 -  -  -  	inc hl
 1136 D1:CE05 23 -  -  -  	inc hl
 1137 D1:CE06 22 DB EB D1 	ld (tempListsPtr), hl
 1138 D1:CE0A 06 02 -  -  	ld b, 2
 1139 D1:CE0C D5 -  -  -  _:	push de
 1140 D1:CE0D C5 -  -  -  		push bc
 1141 D1:CE0E CD 28 10 02 			call _IncFetch
 1142 D1:CE12 CD 0F B2 D1 			call ParseExpression
 1143 D1:CE16 FD CB C0 66 			bit output_is_number, (iy+fExpression1)
 1144 D1:CE1A CA 05 AF D1 			jp z, ErrorSyntax
 1145 D1:CE1E FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
 1146 D1:CE22 CA 05 AF D1 			jp z, ErrorSyntax
 1147 D1:CE26 2A C9 EB D1 			ld hl, (programPtr)
 1148 D1:CE2A 2B -  -  -  			dec hl
 1149 D1:CE2B 2B -  -  -  			dec hl
 1150 D1:CE2C 2B -  -  -  			dec hl
 1151 D1:CE2D 2B -  -  -  			dec hl
 1152 D1:CE2E 22 C9 EB D1 			ld (programPtr), hl
 1153 D1:CE32 23 -  -  -  			inc hl
 1154 D1:CE33 7E -  -  -  			ld a, (hl)
 1155 D1:CE34 C1 -  -  -  		pop bc
 1156 D1:CE35 D1 -  -  -  	pop de
 1157 D1:CE36 12 -  -  -  	ld (de), a
 1158 D1:CE37 13 -  -  -  	inc de
 1159 D1:CE38 10 D2 -  -  	djnz -_
 1160 D1:CE3A 2A C9 EB D1 	ld hl, (programPtr)
 1161 D1:CE3E E5 -  -  -  	push hl
 1162 D1:CE3F ED 53 C9 EB 
              D1 -  -  -  		ld (programPtr), de
 1163 D1:CE44 CD 28 10 02 		call _IncFetch
 1164 D1:CE48 FE 2A -  -  		cp tString
 1165 D1:CE4A C2 05 AF D1 		jp nz, ErrorSyntax
 1166 D1:CE4E CD C0 0F 02 		call _NxtFetch
 1167 D1:CE52 DA 05 AF D1 		jp c, ErrorSyntax
 1168 D1:CE56 FE 3F -  -  		cp tEnter
 1169 D1:CE58 CA 05 AF D1 		jp z, ErrorSyntax
 1170 D1:CE5C CD 7E CD D1 		call functionExecHex
 1171 D1:CE60 2A C9 EB D1 		ld hl, (programPtr)
 1172 D1:CE64 22 DE EB D1 		ld (programDataDataPtr), hl
 1173 D1:CE68 E1 -  -  -  	pop hl
 1174 D1:CE69 22 C9 EB D1 	ld (programPtr), hl
 1175 D1:CE6D C9 -  -  -  	ret
 1176 D1:CE6E -  -  -  -  	
 1177 D1:CE6E -  -  -  -  functionCompilePrgm:
 1178 D1:CE6E 21 F8 05 D0 	ld hl, OP1
 1179 D1:CE72 1E 09 -  -  	ld e, 9
 1180 D1:CE74 -  -  -  -  GetSubProgramName:
 1181 D1:CE74 E5 -  -  -  	push hl
 1182 D1:CE75 CD 28 10 02 		call _IncFetch
 1183 D1:CE79 E1 -  -  -  	pop hl
 1184 D1:CE7A 23 -  -  -  	inc hl
 1185 D1:CE7B 38 18 -  -  	jr c, +_
 1186 D1:CE7D FE 3F -  -  	cp tEnter
 1187 D1:CE7F 28 14 -  -  	jr z, +_
 1188 D1:CE81 FE 41 -  -  	cp tA
 1189 D1:CE83 DA 1B AF D1 	jp c, InvalidTokenError
 1190 D1:CE87 FE 5C -  -  	cp ttheta+1
 1191 D1:CE89 D2 1B AF D1 	jp nc, InvalidTokenError
 1192 D1:CE8D 77 -  -  -  	ld (hl), a
 1193 D1:CE8E 1D -  -  -  	dec e
 1194 D1:CE8F 20 E3 -  -  	jr nz, GetSubProgramName
 1195 D1:CE91 C3 21 AF D1 	jp InvalidNameLength
 1196 D1:CE95 3E 05 -  -  _:	ld a, ProgObj
 1197 D1:CE97 32 F8 05 D0 	ld (OP1), a
 1198 D1:CE9B 36 00 -  -  	ld (hl), 0
 1199 D1:CE9D CD 0C 05 02 	call _ChkFindSym
 1200 D1:CEA1 30 0D -  -  	jr nc, +_
 1201 D1:CEA3 21 F8 05 D0 	ld hl, OP1
 1202 D1:CEA7 34 -  -  -  	inc (hl)
 1203 D1:CEA8 CD 0C 05 02 	call _ChkFindSym
 1204 D1:CEAC DA 27 AF D1 	jp c, ErrorNotFound
 1205 D1:CEB0 CD 98 1F 02 _:	call _ChkInRAM
 1206 D1:CEB4 30 0A -  -  	jr nc, +_
 1207 D1:CEB6 EB -  -  -  	ex de, hl
 1208 D1:CEB7 11 09 00 00 	ld de, 9
 1209 D1:CEBB 19 -  -  -  	add hl, de
 1210 D1:CEBC 5E -  -  -  	ld e, (hl)
 1211 D1:CEBD 19 -  -  -  	add hl, de
 1212 D1:CEBE 23 -  -  -  	inc hl
 1213 D1:CEBF EB -  -  -  	ex de, hl
 1214 D1:CEC0 2A F8 05 D0 _:	ld hl, (OP1)
 1215 D1:CEC4 E5 -  -  -  	push hl
 1216 D1:CEC5 2A FB 05 D0 		ld hl, (OP1+3)
 1217 D1:CEC9 E5 -  -  -  		push hl
 1218 D1:CECA 2A FE 05 D0 			ld hl, (OP1+6)
 1219 D1:CECE E5 -  -  -  			push hl
 1220 D1:CECF 2A 17 23 D0 				ld hl, (begPC)
 1221 D1:CED3 E5 -  -  -  				push hl
 1222 D1:CED4 2A 1A 23 D0 					ld hl, (curPC)
 1223 D1:CED8 E5 -  -  -  					push hl
 1224 D1:CED9 2A 1D 23 D0 						ld hl, (endPC)
 1225 D1:CEDD E5 -  -  -  						push hl
 1226 D1:CEDE EB -  -  -  							ex de, hl
 1227 D1:CEDF 01 00 00 00 							ld bc, 0
 1228 D1:CEE3 4E -  -  -  							ld c, (hl)
 1229 D1:CEE4 23 -  -  -  							inc hl
 1230 D1:CEE5 22 1A 23 D0 							ld (curPC), hl
 1231 D1:CEE9 46 -  -  -  							ld b, (hl)
 1232 D1:CEEA 23 -  -  -  							inc hl
 1233 D1:CEEB 22 17 23 D0 							ld (begPC), hl
 1234 D1:CEEF 09 -  -  -  							add hl, bc
 1235 D1:CEF0 2B -  -  -  							dec hl
 1236 D1:CEF1 22 1D 23 D0 							ld (endPC), hl
 1237 D1:CEF5 CD 36 B0 D1 							call PrintCompilingProgram
 1238 D1:CEF9 21 EB EB D1 							ld hl, AmountOfSubPrograms
 1239 D1:CEFD 34 -  -  -  							inc (hl)
 1240 D1:CEFE CD 60 AA D1 							call CompileProgramFull
 1241 D1:CF02 E1 -  -  -  						pop hl
 1242 D1:CF03 22 1D 23 D0 						ld (endPC), hl
 1243 D1:CF07 E1 -  -  -  					pop hl
 1244 D1:CF08 22 1A 23 D0 					ld (curPC), hl
 1245 D1:CF0C E1 -  -  -  				pop hl
 1246 D1:CF0D 22 17 23 D0 				ld (begPC), hl
 1247 D1:CF11 E1 -  -  -  			pop hl
 1248 D1:CF12 22 FE 05 D0 			ld (OP1+6), hl
 1249 D1:CF16 E1 -  -  -  		pop hl
 1250 D1:CF17 22 FB 05 D0 		ld (OP1+3), hl
 1251 D1:CF1B E1 -  -  -  	pop hl
 1252 D1:CF1C 22 F8 05 D0 	ld (OP1), hl
 1253 D1:CF20 C3 36 B0 D1 	jp PrintCompilingProgram
Listing for file "ICE.asm"
  461 D1:CF24 -  -  -  -  #include "operators functions/operators.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operators functions\operators.asm"
    1 D1:CF24 -  -  -  -  ExecuteOperator:
    2 D1:CF24 32 20 EA D0 	ld (tempToken2), a
    3 D1:CF28 B7 -  -  -  	or a
    4 D1:CF29 CA 7E CF D1 	jp z, ListElementXXX
    5 D1:CF2D FE 6D -  -  	cp tLE
    6 D1:CF2F CC 64 D7 D1 	call z, SwapLEToGE
    7 D1:CF33 FE 6B -  -  	cp tLT
    8 D1:CF35 CC 78 D7 D1 	call z, SwapLTToGT
    9 D1:CF39 32 1F EA D0 	ld (tempToken), a
   10 D1:CF3D C5 -  -  -  	push bc
   11 D1:CF3E 21 17 EA D1 		ld hl, operators_booleans
   12 D1:CF42 01 0E 00 00 		ld bc, 14
   13 D1:CF46 ED B1 -  -  		cpir
   14 D1:CF48 21 26 EA D1 		ld hl, operators_special
   15 D1:CF4C 09 -  -  -  		add hl, bc
   16 D1:CF4D 4E -  -  -  		ld c, (hl)
   17 D1:CF4E 79 -  -  -  		ld a, c
   18 D1:CF4F FE 04 -  -  		cp 4
   19 D1:CF51 20 04 -  -  		jr nz, +_
   20 D1:CF53 FD CB C0 EE 		set ans_set_z_flag, (iy+fExpression1)
   21 D1:CF57 06 12 -  -  _:		ld b, 18
   22 D1:CF59 ED 4C -  -  		mlt bc
   23 D1:CF5B 21 83 EA D1 		ld hl, operator_start											; start of bunch jumps
   24 D1:CF5F 09 -  -  -  		add hl, bc														; start of right operator
   25 D1:CF60 DD 7E F8 -  		ld a, (ix-8)
   26 D1:CF63 4F -  -  -  		ld c, a
   27 D1:CF64 FE 06 -  -  		cp 6
   28 D1:CF66 D2 05 AF D1 		jp nc, ErrorSyntax
   29 D1:CF6A E5 -  -  -  		push hl
   30 D1:CF6B 21 EA EB D1 			ld hl, ExprOutput2
   31 D1:CF6F 7E -  -  -  			ld a, (hl)
   32 D1:CF70 36 01 -  -  			ld (hl), OutputIsInHL
   33 D1:CF72 2B -  -  -  			dec hl
   34 D1:CF73 77 -  -  -  			ld (hl), a
   35 D1:CF74 E1 -  -  -  		pop hl
   36 D1:CF75 06 03 -  -  		ld b, 3
   37 D1:CF77 ED 4C -  -  		mlt bc
   38 D1:CF79 09 -  -  -  		add hl, bc														; start of right subelement
   39 D1:CF7A ED 27 -  -  		ld hl, (hl)
   40 D1:CF7C C1 -  -  -  	pop bc
   41 D1:CF7D E9 -  -  -  	jp (hl)
   42 D1:CF7E -  -  -  -  	
   43 D1:CF7E -  -  -  -  ListElementXXX:
   44 D1:CF7E DD 7E FC -  	ld a, (ix-4)
   45 D1:CF81 B7 -  -  -  	or a
   46 D1:CF82 28 0C -  -  	jr z, ListElementNumber
   47 D1:CF84 3D -  -  -  	dec a
   48 D1:CF85 28 14 -  -  	jr z, ListElementVariable
   49 D1:CF87 3D -  -  -  	dec a
   50 D1:CF88 28 17 -  -  	jr z, ListElementChainPush
   51 D1:CF8A 3D -  -  -  	dec a
   52 D1:CF8B 28 18 -  -  	jr z, ListElementChainAns
   53 D1:CF8D 3D -  -  -  	dec a
   54 D1:CF8E 28 31 -  -  	jr z, ListElementFunction
   55 D1:CF90 -  -  -  -  ListElementNumber:
   56 D1:CF90 3E 2A -  -  	ld a, 02Ah
   57 D1:CF92 C5 -  -  -  	push bc
   58 D1:CF93 E1 -  -  -  	pop hl
   59 D1:CF94 19 -  -  -  	add hl, de
   60 D1:CF95 19 -  -  -  	add hl, de
   61 D1:CF96 19 -  -  -  	add hl, de
   62 D1:CF97 C3 62 AC D1 	jp InsertAHL															; ld hl, (*)
   63 D1:CF9B -  -  -  -  ListElementVariable:
   64 D1:CF9B CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
   65 D1:CF9F 18 08 -  -  	jr +_
   66 D1:CFA1 -  -  -  -  ListElementChainPush:
   67 D1:CFA1 C3 3F AF D1 	jp UnknownError
   68 D1:CFA5 -  -  -  -  ListElementChainAns:
   69 D1:CFA5 CD BB AC D1 	call MaybeChangeHLToDE
   70 D1:CFA9 3E 21 -  -  _:	ld a, 021h
   71 D1:CFAB C5 -  -  -  	push bc
   72 D1:CFAC D1 -  -  -  	pop de
   73 D1:CFAD 21 19 19 19 	ld hl, 0191919h
   74 D1:CFB1 CD A1 AC D1 	call InsertADEHL														; ld hl, * \ add hl, de \ add hl, de \ add hl, de
   75 D1:CFB5 3E ED -  -  	ld a, 0EDh
   76 D1:CFB7 CD AE AC D1 	call InsertA															; ld hl, (hl) (1)
   77 D1:CFBB 3E 27 -  -  	ld a, 027h
   78 D1:CFBD C3 AE AC D1 	jp InsertA																; ld hl, (hl) (2)
   79 D1:CFC1 -  -  -  -  ListElementFunction:
   80 D1:CFC1 7B -  -  -  	ld a, e
   81 D1:CFC2 06 01 -  -  	ld b, OutputInDE
   82 D1:CFC4 CD FF AC D1 	call GetFunction
   83 D1:CFC8 18 DF -  -  	jr -_
   84 D1:CFCA -  -  -  -  	
   85 D1:CFCA -  -  -  -  SubNumberXXX:
   86 D1:CFCA DD 7E FC -  	ld a, (ix-4)
   87 D1:CFCD B7 -  -  -  	or a
   88 D1:CFCE 28 10 -  -  	jr z, SubNumberNumber
   89 D1:CFD0 3D -  -  -  	dec a
   90 D1:CFD1 28 1A -  -  	jr z, SubNumberVariable
   91 D1:CFD3 3D -  -  -  	dec a
   92 D1:CFD4 28 23 -  -  	jr z, SubNumberChainPush
   93 D1:CFD6 3D -  -  -  	dec a
   94 D1:CFD7 28 24 -  -  	jr z, SubNumberChainAns
   95 D1:CFD9 3D -  -  -  	dec a
   96 D1:CFDA 28 31 -  -  	jr z, SubNumberFunction
   97 D1:CFDC C3 96 AE D1 	jp SubError
   98 D1:CFE0 -  -  -  -  SubNumberNumber:
   99 D1:CFE0 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  100 D1:CFE4 C5 -  -  -  	push bc
  101 D1:CFE5 E1 -  -  -  	pop hl
  102 D1:CFE6 B7 -  -  -  	or a
  103 D1:CFE7 ED 52 -  -  	sbc hl, de
  104 D1:CFE9 DD 2F F9 -  	ld (ix-7), hl
  105 D1:CFEC C9 -  -  -  	ret
  106 D1:CFED -  -  -  -  SubNumberVariable:
  107 D1:CFED 3E 21 -  -  	ld a, 021h
  108 D1:CFEF C5 -  -  -  	push bc
  109 D1:CFF0 E1 -  -  -  	pop hl
  110 D1:CFF1 CD 62 AC D1 	call InsertAHL															; ld hl, *
  111 D1:CFF5 C3 1E D1 D1 	jp SubChainAnsVariable
  112 D1:CFF9 -  -  -  -  SubNumberChainPush:
  113 D1:CFF9 C3 3F AF D1 	jp UnknownError
  114 D1:CFFD -  -  -  -  SubNumberChainAns:
  115 D1:CFFD CD BB AC D1 	call MaybeChangeHLToDE
  116 D1:D001 3E 21 -  -  	ld a, 021h
  117 D1:D003 C5 -  -  -  	push bc
  118 D1:D004 D1 -  -  -  	pop de
  119 D1:D005 21 B7 ED 52 	ld hl, 052EDB7h
  120 D1:D009 C3 A1 AC D1 	jp InsertADEHL															; ld hl, * \ or a \ sbc hl, de
  121 D1:D00D -  -  -  -  SubNumberFunction:
  122 D1:D00D 7B -  -  -  	ld a, e
  123 D1:D00E C5 -  -  -  	push bc
  124 D1:D00F 06 01 -  -  		ld b, OutputInDE
  125 D1:D011 CD FF AC D1 		call GetFunction
  126 D1:D015 3E 21 -  -  		ld a, 021h
  127 D1:D017 D1 -  -  -  	pop de
  128 D1:D018 21 B7 ED 52 	ld hl, 052EDB7h
  129 D1:D01C C3 A1 AC D1 	jp InsertADEHL															; ld hl, * \ or a \ sbc hl, de
  130 D1:D020 -  -  -  -  SubVariableXXX:
  131 D1:D020 DD 7E FC -  	ld a, (ix-4)
  132 D1:D023 B7 -  -  -  	or a
  133 D1:D024 28 12 -  -  	jr z, SubVariableNumber
  134 D1:D026 3D -  -  -  	dec a
  135 D1:D027 28 17 -  -  	jr z, SubVariableVariable
  136 D1:D029 3D -  -  -  	dec a
  137 D1:D02A 28 2E -  -  	jr z, SubVariableChainPush
  138 D1:D02C 3D -  -  -  	dec a
  139 D1:D02D 28 2F -  -  	jr z, SubVariableChainAns
  140 D1:D02F 3D -  -  -  	dec a
  141 D1:D030 CA 6E D0 D1 	jp z, SubVariableFunction
  142 D1:D034 C3 96 AE D1 	jp SubError
  143 D1:D038 -  -  -  -  SubVariableNumber:
  144 D1:D038 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  145 D1:D03C C3 DB D0 D1 	jp SubChainAnsNumber
  146 D1:D040 -  -  -  -  SubVariableVariable:
  147 D1:D040 79 -  -  -  	ld a, c
  148 D1:D041 BB -  -  -  	cp e
  149 D1:D042 20 0E -  -  	jr nz, +_
  150 D1:D044 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  151 D1:D048 36 00 -  -  	ld (hl), typeNumber
  152 D1:D04A 11 00 00 00 	ld de, 0
  153 D1:D04E 23 -  -  -  	inc hl
  154 D1:D04F ED 1F -  -  	ld (hl), de
  155 D1:D051 C9 -  -  -  	ret
  156 D1:D052 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  157 D1:D056 C3 1E D1 D1 	jp SubChainAnsVariable
  158 D1:D05A -  -  -  -  SubVariableChainPush:
  159 D1:D05A C3 3F AF D1 	jp UnknownError
  160 D1:D05E -  -  -  -  SubVariableChainAns:
  161 D1:D05E CD BB AC D1 	call MaybeChangeHLToDE
  162 D1:D062 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  163 D1:D066 21 B7 ED 52 	ld hl, 052EDB7h
  164 D1:D06A C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, de
  165 D1:D06E -  -  -  -  SubVariableFunction:
  166 D1:D06E 7B -  -  -  	ld a, e
  167 D1:D06F 06 01 -  -  	ld b, OutputInDE
  168 D1:D071 CD FF AC D1 	call GetFunction
  169 D1:D075 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  170 D1:D079 21 B7 ED 52 	ld hl, 052EDB7h
  171 D1:D07D C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, de
  172 D1:D081 -  -  -  -  SubChainPushXXX:
  173 D1:D081 DD 7E FC -  	ld a, (ix-4)
  174 D1:D084 B7 -  -  -  	or a
  175 D1:D085 28 12 -  -  	jr z, SubChainPushNumber
  176 D1:D087 3D -  -  -  	dec a
  177 D1:D088 28 17 -  -  	jr z, SubChainPushVariable
  178 D1:D08A 3D -  -  -  	dec a
  179 D1:D08B 28 1C -  -  	jr z, SubChainPushChainPush
  180 D1:D08D 3D -  -  -  	dec a
  181 D1:D08E 28 1D -  -  	jr z, SubChainPushChainAns
  182 D1:D090 3D -  -  -  	dec a
  183 D1:D091 CA BB D0 D1 	jp z, SubChainPushFunction
  184 D1:D095 C3 96 AE D1 	jp SubError
  185 D1:D099 -  -  -  -  SubChainPushNumber:
  186 D1:D099 3E E1 -  -  	ld a, 0E1h
  187 D1:D09B CD AE AC D1 	call InsertA															; pop hl
  188 D1:D09F 18 3A -  -  	jr SubChainAnsNumber
  189 D1:D0A1 -  -  -  -  SubChainPushVariable:
  190 D1:D0A1 3E E1 -  -  	ld a, 0E1h
  191 D1:D0A3 CD AE AC D1 	call InsertA															; pop hl
  192 D1:D0A7 18 75 -  -  	jr SubChainAnsVariable
  193 D1:D0A9 -  -  -  -  SubChainPushChainPush:
  194 D1:D0A9 C3 3F AF D1 	jp UnknownError
  195 D1:D0AD -  -  -  -  SubChainPushChainAns:
  196 D1:D0AD CD BB AC D1 	call MaybeChangeHLToDE
  197 D1:D0B1 3E E1 -  -  	ld a, 0E1h
  198 D1:D0B3 21 B7 ED 52 	ld hl, 052EDB7h
  199 D1:D0B7 C3 62 AC D1 	jp InsertAHL															; pop hl \ or a \ sbc hl, de
  200 D1:D0BB -  -  -  -  SubChainPushFunction:
  201 D1:D0BB 3E E1 -  -  	ld a, 0E1h
  202 D1:D0BD CD AE AC D1 	call InsertA															; pop hl
  203 D1:D0C1 18 73 -  -  	jr SubChainAnsFunction
  204 D1:D0C3 -  -  -  -  SubChainAnsXXX:
  205 D1:D0C3 DD 7E FC -  	ld a, (ix-4)
  206 D1:D0C6 B7 -  -  -  	or a
  207 D1:D0C7 28 12 -  -  	jr z, SubChainAnsNumber
  208 D1:D0C9 3D -  -  -  	dec a
  209 D1:D0CA 28 52 -  -  	jr z, SubChainAnsVariable
  210 D1:D0CC 3D -  -  -  	dec a
  211 D1:D0CD 28 5F -  -  	jr z, SubChainAnsChainPush
  212 D1:D0CF 3D -  -  -  	dec a
  213 D1:D0D0 28 60 -  -  	jr z, SubChainAnsChainAns
  214 D1:D0D2 3D -  -  -  	dec a
  215 D1:D0D3 CA 36 D1 D1 	jp z, SubChainAnsFunction
  216 D1:D0D7 C3 96 AE D1 	jp SubError
  217 D1:D0DB -  -  -  -  SubChainAnsNumber:
  218 D1:D0DB B7 -  -  -  	or a
  219 D1:D0DC ED 62 -  -  	sbc hl, hl
  220 D1:D0DE EB -  -  -  	ex de, hl
  221 D1:D0DF ED 52 -  -  	sbc hl, de
  222 D1:D0E1 C8 -  -  -  	ret z
  223 D1:D0E2 1E 07 -  -  	ld e, 7
  224 D1:D0E4 ED 52 -  -  	sbc hl, de
  225 D1:D0E6 30 1C -  -  	jr nc, SubHLDE
  226 D1:D0E8 19 -  -  -  	add hl, de
  227 D1:D0E9 45 -  -  -  	ld b, l
  228 D1:D0EA 3A E9 EB D1 	ld a, (ExprOutput)
  229 D1:D0EE B7 -  -  -  	or a
  230 D1:D0EF 28 09 -  -  	jr z, ++_
  231 D1:D0F1 3E 2B -  -  	ld a, 02Bh
  232 D1:D0F3 CD AE AC D1 _:	call InsertA															; dec hl/de
  233 D1:D0F7 10 FA -  -  	djnz -_
  234 D1:D0F9 C9 -  -  -  	ret
  235 D1:D0FA 3E 00 -  -  _:	ld a, OutputIsInDE
  236 D1:D0FC 32 EA EB D1 	ld (ExprOutput2), a
  237 D1:D100 3E 1B -  -  	ld a, 01Bh
  238 D1:D102 18 EF -  -  	jr --_
  239 D1:D104 -  -  -  -  SubHLDE:
  240 D1:D104 19 -  -  -  	add hl, de
  241 D1:D105 CD 60 01 00 	call __ineg
  242 D1:D109 3A E9 EB D1 	ld a, (ExprOutput)
  243 D1:D10D B7 -  -  -  	or a
  244 D1:D10E 3E 11 -  -  	ld a, 011h
  245 D1:D110 20 02 -  -  	jr nz, +_
  246 D1:D112 3E 21 -  -  	ld a, 021h
  247 D1:D114 CD 62 AC D1 _:	call InsertAHL															; ld hl/de, 16777215-*
  248 D1:D118 3E 19 -  -  	ld a, 019h
  249 D1:D11A C3 AE AC D1 	jp InsertA																; add hl, de
  250 D1:D11E -  -  -  -  SubChainAnsVariable:
  251 D1:D11E CD C7 AC D1 	call MaybeChangeDEToHL
  252 D1:D122 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
  253 D1:D126 21 B7 ED 52 	ld hl, 052EDB7h
  254 D1:D12A C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, de
  255 D1:D12E -  -  -  -  SubChainAnsChainPush:
  256 D1:D12E C3 3F AF D1 	jp UnknownError
  257 D1:D132 -  -  -  -  SubChainAnsChainAns:
  258 D1:D132 C3 3F AF D1 	jp UnknownError
  259 D1:D136 -  -  -  -  SubChainAnsFunction:
  260 D1:D136 3A E9 EB D1 	ld a, (ExprOutput)
  261 D1:D13A 87 -  -  -  	add a, a
  262 D1:D13B 87 -  -  -  	add a, a
  263 D1:D13C 87 -  -  -  	add a, a
  264 D1:D13D 87 -  -  -  	add a, a
  265 D1:D13E C6 D5 -  -  	add a, 0D5h
  266 D1:D140 CD AE AC D1 	call InsertA															; push hl/de
  267 D1:D144 7B -  -  -  	ld a, e
  268 D1:D145 06 01 -  -  	ld b, OutputInDE
  269 D1:D147 CD FF AC D1 	call GetFunction
  270 D1:D14B 3E E1 -  -  	ld a, 0E1h
  271 D1:D14D 21 B7 ED 52 	ld hl, 052EDB7h
  272 D1:D151 C3 62 AC D1 	jp InsertAHL															; pop hl \ or a \ sbc hl, de
  273 D1:D155 -  -  -  -  SubFunctionXXX:
  274 D1:D155 DD 7E FC -  	ld a, (ix-4)
  275 D1:D158 B7 -  -  -  	or a
  276 D1:D159 28 10 -  -  	jr z, SubFunctionNumber
  277 D1:D15B 3D -  -  -  	dec a
  278 D1:D15C 28 18 -  -  	jr z, SubFunctionVariable
  279 D1:D15E 3D -  -  -  	dec a
  280 D1:D15F 28 20 -  -  	jr z, SubFunctionChainPush
  281 D1:D161 3D -  -  -  	dec a
  282 D1:D162 28 21 -  -  	jr z, SubFunctionChainAns
  283 D1:D164 3D -  -  -  	dec a
  284 D1:D165 28 3D -  -  	jr z, SubFunctionFunction
  285 D1:D167 C3 96 AE D1 	jp SubError
  286 D1:D16B -  -  -  -  SubFunctionNumber:
  287 D1:D16B 79 -  -  -  	ld a, c
  288 D1:D16C 06 02 -  -  	ld b, OutputInHL
  289 D1:D16E CD FF AC D1 	call GetFunction
  290 D1:D172 C3 DB D0 D1 	jp SubChainAnsNumber
  291 D1:D176 -  -  -  -  SubFunctionVariable:
  292 D1:D176 79 -  -  -  	ld a, c
  293 D1:D177 06 02 -  -  	ld b, OutputInHL
  294 D1:D179 CD FF AC D1 	call GetFunction
  295 D1:D17D C3 1E D1 D1 	jp SubChainAnsVariable
  296 D1:D181 -  -  -  -  SubFunctionChainPush:
  297 D1:D181 C3 3F AF D1 	jp UnknownError
  298 D1:D185 -  -  -  -  SubFunctionChainAns:
  299 D1:D185 3A E9 EB D1 	ld a, (ExprOutput)
  300 D1:D189 87 -  -  -  	add a, a
  301 D1:D18A 87 -  -  -  	add a, a
  302 D1:D18B 87 -  -  -  	add a, a
  303 D1:D18C 87 -  -  -  	add a, a
  304 D1:D18D C6 D5 -  -  	add a, 0D5h
  305 D1:D18F CD AE AC D1 	call InsertA															; push hl/de
  306 D1:D193 79 -  -  -  	ld a, c
  307 D1:D194 06 02 -  -  	ld b, OutputInHL
  308 D1:D196 CD FF AC D1 	call GetFunction
  309 D1:D19A 3E E1 -  -  	ld a, 0E1h
  310 D1:D19C 21 B7 ED 52 	ld hl, 052EDB7h
  311 D1:D1A0 C3 62 AC D1 	jp InsertAHL															; pop de \ or a \ sbc hl, de
  312 D1:D1A4 -  -  -  -  SubFunctionFunction:
  313 D1:D1A4 7B -  -  -  	ld a, e
  314 D1:D1A5 06 02 -  -  	ld b, OutputInHL
  315 D1:D1A7 CD FF AC D1 	call GetFunction
  316 D1:D1AB 79 -  -  -  	ld a, c
  317 D1:D1AC 06 01 -  -  	ld b, OutputInDE
  318 D1:D1AE FD CB C0 F6 	set need_push, (iy+fExpression1)
  319 D1:D1B2 CD FF AC D1 	call GetFunction
  320 D1:D1B6 21 B7 ED 52 	ld hl, 052EDB7h
  321 D1:D1BA C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, de
  322 D1:D1BE -  -  -  -  
  323 D1:D1BE -  -  -  -  AddNumberXXX:
  324 D1:D1BE DD 7E FC -  	ld a, (ix-4)
  325 D1:D1C1 B7 -  -  -  	or a
  326 D1:D1C2 28 10 -  -  	jr z, AddNumberNumber
  327 D1:D1C4 3D -  -  -  	dec a
  328 D1:D1C5 28 17 -  -  	jr z, AddNumberVariable
  329 D1:D1C7 3D -  -  -  	dec a
  330 D1:D1C8 28 1B -  -  	jr z, AddNumberChainPush
  331 D1:D1CA 3D -  -  -  	dec a
  332 D1:D1CB 28 1C -  -  	jr z, AddNumberChainAns
  333 D1:D1CD 3D -  -  -  	dec a
  334 D1:D1CE 28 1F -  -  	jr z, AddNumberFunction
  335 D1:D1D0 C3 9A AE D1 	jp AddError
  336 D1:D1D4 -  -  -  -  AddNumberNumber:
  337 D1:D1D4 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  338 D1:D1D8 EB -  -  -  	ex de, hl
  339 D1:D1D9 09 -  -  -  	add hl, bc
  340 D1:D1DA DD 2F F9 -  	ld (ix-7), hl
  341 D1:D1DD C9 -  -  -  	ret
  342 D1:D1DE -  -  -  -  AddNumberVariable:
  343 D1:D1DE C5 -  -  -  	push bc
  344 D1:D1DF E1 -  -  -  	pop hl
  345 D1:D1E0 EB -  -  -  	ex de, hl
  346 D1:D1E1 E5 -  -  -  	push hl
  347 D1:D1E2 C1 -  -  -  	pop bc
  348 D1:D1E3 18 2B -  -  	jr AddVariableNumber
  349 D1:D1E5 -  -  -  -  AddNumberChainPush:
  350 D1:D1E5 C3 3F AF D1 	jp UnknownError
  351 D1:D1E9 -  -  -  -  AddNumberChainAns:
  352 D1:D1E9 C5 -  -  -  	push bc
  353 D1:D1EA D1 -  -  -  	pop de
  354 D1:D1EB C3 A3 D2 D1 	jp AddChainAnsNumber
  355 D1:D1EF -  -  -  -  AddNumberFunction:
  356 D1:D1EF C5 -  -  -  	push bc
  357 D1:D1F0 E1 -  -  -  	pop hl
  358 D1:D1F1 EB -  -  -  	ex de, hl
  359 D1:D1F2 E5 -  -  -  	push hl
  360 D1:D1F3 C1 -  -  -  	pop bc
  361 D1:D1F4 C3 41 D3 D1 	jp AddFunctionNumber
  362 D1:D1F8 -  -  -  -  AddVariableXXX:
  363 D1:D1F8 DD 7E FC -  	ld a, (ix-4)
  364 D1:D1FB B7 -  -  -  	or a
  365 D1:D1FC 28 12 -  -  	jr z, AddVariableNumber
  366 D1:D1FE 3D -  -  -  	dec a
  367 D1:D1FF 28 17 -  -  	jr z, AddVariableVariable
  368 D1:D201 3D -  -  -  	dec a
  369 D1:D202 28 1C -  -  	jr z, AddVariableChainPush
  370 D1:D204 3D -  -  -  	dec a
  371 D1:D205 28 24 -  -  	jr z, AddVariableChainAns
  372 D1:D207 3D -  -  -  	dec a
  373 D1:D208 CA 30 D2 D1 	jp z, AddVariableFunction
  374 D1:D20C C3 9A AE D1 	jp AddError
  375 D1:D210 -  -  -  -  AddVariableNumber:
  376 D1:D210 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  377 D1:D214 C3 A3 D2 D1 	jp AddChainAnsNumber
  378 D1:D218 -  -  -  -  AddVariableVariable:
  379 D1:D218 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  380 D1:D21C C3 E2 D2 D1 	jp AddChainAnsVariable
  381 D1:D220 -  -  -  -  AddVariableChainPush:
  382 D1:D220 3E E1 -  -  	ld a, 0E1h
  383 D1:D222 CD AE AC D1 	call InsertA															; pop hl
  384 D1:D226 59 -  -  -  	ld e, c
  385 D1:D227 C3 E2 D2 D1 	jp AddChainAnsVariable
  386 D1:D22B -  -  -  -  AddVariableChainAns:
  387 D1:D22B 59 -  -  -  	ld e, c
  388 D1:D22C C3 E2 D2 D1 	jp AddChainAnsVariable
  389 D1:D230 -  -  -  -  AddVariableFunction:
  390 D1:D230 7B -  -  -  	ld a, e
  391 D1:D231 06 02 -  -  	ld b, OutputInHL
  392 D1:D233 CD FF AC D1 	call GetFunction
  393 D1:D237 59 -  -  -  	ld e, c
  394 D1:D238 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
  395 D1:D23C 3E 19 -  -  	ld a, 019h
  396 D1:D23E C3 AE AC D1 	jp InsertA																; add hl, de
  397 D1:D242 -  -  -  -  AddChainPushXXX:
  398 D1:D242 DD 7E FC -  	ld a, (ix-4)
  399 D1:D245 B7 -  -  -  	or a
  400 D1:D246 28 12 -  -  	jr z, AddChainPushNumber
  401 D1:D248 3D -  -  -  	dec a
  402 D1:D249 28 17 -  -  	jr z, AddChainPushVariable
  403 D1:D24B 3D -  -  -  	dec a
  404 D1:D24C 28 1C -  -  	jr z, AddChainPushChainPush
  405 D1:D24E 3D -  -  -  	dec a
  406 D1:D24F 28 1D -  -  	jr z, AddChainPushChainAns
  407 D1:D251 3D -  -  -  	dec a
  408 D1:D252 CA 83 D2 D1 	jp z, AddChainPushFunction
  409 D1:D256 C3 9A AE D1 	jp AddError
  410 D1:D25A -  -  -  -  AddChainPushNumber:
  411 D1:D25A 3E E1 -  -  	ld a, 0E1h
  412 D1:D25C CD AE AC D1 	call InsertA															; pop hl
  413 D1:D260 18 41 -  -  	jr AddChainAnsNumber
  414 D1:D262 -  -  -  -  AddChainPushVariable:
  415 D1:D262 3E E1 -  -  	ld a, 0E1h
  416 D1:D264 CD AE AC D1 	call InsertA															; pop hl
  417 D1:D268 18 78 -  -  	jr AddChainAnsVariable
  418 D1:D26A -  -  -  -  AddChainPushChainPush:
  419 D1:D26A C3 3F AF D1 	jp UnknownError
  420 D1:D26E -  -  -  -  AddChainPushChainAns:
  421 D1:D26E 3A E9 EB D1 	ld a, (ExprOutput)
  422 D1:D272 B7 -  -  -  	or a
  423 D1:D273 3E D1 -  -  	ld a, 0D1h
  424 D1:D275 20 02 -  -  	jr nz, +_
  425 D1:D277 3E E1 -  -  	ld a, 0E1h
  426 D1:D279 CD AE AC D1 _:	call InsertA															; pop hl/de
  427 D1:D27D 3E 19 -  -  	ld a, 019h
  428 D1:D27F C3 AE AC D1 	jp InsertA																; add hl, de
  429 D1:D283 -  -  -  -  AddChainPushFunction:
  430 D1:D283 3E E1 -  -  	ld a, 0E1h
  431 D1:D285 CD AE AC D1 	call InsertA															; pop hl
  432 D1:D289 18 7F -  -  	jr AddChainAnsFunction
  433 D1:D28B -  -  -  -  AddChainAnsXXX:
  434 D1:D28B DD 7E FC -  	ld a, (ix-4)
  435 D1:D28E B7 -  -  -  	or a
  436 D1:D28F 28 12 -  -  	jr z, AddChainAnsNumber
  437 D1:D291 3D -  -  -  	dec a
  438 D1:D292 28 4E -  -  	jr z, AddChainAnsVariable
  439 D1:D294 3D -  -  -  	dec a
  440 D1:D295 28 6B -  -  	jr z, AddChainAnsChainPush
  441 D1:D297 3D -  -  -  	dec a
  442 D1:D298 28 6C -  -  	jr z, AddChainAnsChainAns
  443 D1:D29A 3D -  -  -  	dec a
  444 D1:D29B CA 0A D3 D1 	jp z, AddChainAnsFunction
  445 D1:D29F C3 9A AE D1 	jp AddError
  446 D1:D2A3 -  -  -  -  AddChainAnsNumber:
  447 D1:D2A3 B7 -  -  -  	or a
  448 D1:D2A4 ED 62 -  -  	sbc hl, hl
  449 D1:D2A6 EB -  -  -  	ex de, hl
  450 D1:D2A7 ED 52 -  -  	sbc hl, de
  451 D1:D2A9 C8 -  -  -  	ret z
  452 D1:D2AA 1E 06 -  -  	ld e, 6
  453 D1:D2AC ED 52 -  -  	sbc hl, de
  454 D1:D2AE 30 1C -  -  	jr nc, AddHLDE
  455 D1:D2B0 19 -  -  -  	add hl, de
  456 D1:D2B1 45 -  -  -  	ld b, l
  457 D1:D2B2 3A E9 EB D1 	ld a, (ExprOutput)
  458 D1:D2B6 B7 -  -  -  	or a
  459 D1:D2B7 28 09 -  -  	jr z, ++_
  460 D1:D2B9 3E 23 -  -  	ld a, 023h
  461 D1:D2BB CD AE AC D1 _:	call InsertA															; inc hl/de
  462 D1:D2BF 10 FA -  -  	djnz -_
  463 D1:D2C1 C9 -  -  -  	ret
  464 D1:D2C2 3E 00 -  -  _:	ld a, OutputIsInDE
  465 D1:D2C4 32 EA EB D1 	ld (ExprOutput2), a
  466 D1:D2C8 3E 13 -  -  	ld a, 013h
  467 D1:D2CA 18 EF -  -  	jr --_
  468 D1:D2CC -  -  -  -  AddHLDE:
  469 D1:D2CC 19 -  -  -  	add hl, de
  470 D1:D2CD 3A E9 EB D1 	ld a, (ExprOutput)
  471 D1:D2D1 B7 -  -  -  	or a
  472 D1:D2D2 3E 11 -  -  	ld a, 011h
  473 D1:D2D4 20 02 -  -  	jr nz, +_
  474 D1:D2D6 3E 21 -  -  	ld a, 021h
  475 D1:D2D8 CD 62 AC D1 _:	call InsertAHL															; ld hl/de, *
  476 D1:D2DC 3E 19 -  -  	ld a, 019h
  477 D1:D2DE C3 AE AC D1 	jp InsertA																; add hl, de
  478 D1:D2E2 -  -  -  -  AddChainAnsVariable:
  479 D1:D2E2 26 17 -  -  	ld h, 017h
  480 D1:D2E4 16 03 -  -  	ld d, 3
  481 D1:D2E6 ED 5C -  -  	mlt de
  482 D1:D2E8 7B -  -  -  	ld a, e
  483 D1:D2E9 2E DD -  -  	ld l, 0DDh
  484 D1:D2EB CD 70 1D 02 	call _SetHLUToA
  485 D1:D2EF 3A E9 EB D1 	ld a, (ExprOutput)
  486 D1:D2F3 B7 -  -  -  	or a
  487 D1:D2F4 20 02 -  -  	jr nz, +_
  488 D1:D2F6 26 27 -  -  	ld h, 027h
  489 D1:D2F8 CD 66 AC D1 _:	call InsertHL															; ld hl/de, (ix+*)
  490 D1:D2FC 3E 19 -  -  	ld a, 019h
  491 D1:D2FE C3 AE AC D1 	jp InsertA																; add hl, de
  492 D1:D302 -  -  -  -  AddChainAnsChainPush:
  493 D1:D302 C3 3F AF D1 	jp UnknownError
  494 D1:D306 -  -  -  -  AddChainAnsChainAns:
  495 D1:D306 C3 3F AF D1 	jp UnknownError
  496 D1:D30A -  -  -  -  AddChainAnsFunction:
  497 D1:D30A 3A E9 EB D1 	ld a, (ExprOutput)
  498 D1:D30E 87 -  -  -  	add a, a
  499 D1:D30F 87 -  -  -  	add a, a
  500 D1:D310 87 -  -  -  	add a, a
  501 D1:D311 87 -  -  -  	add a, a
  502 D1:D312 C6 D5 -  -  	add a, 0D5h
  503 D1:D314 CD AE AC D1 	call InsertA															; push hl/de
  504 D1:D318 7B -  -  -  	ld a, e
  505 D1:D319 06 02 -  -  	ld b, OutputInHL
  506 D1:D31B CD FF AC D1 	call GetFunction
  507 D1:D31F 3E D1 -  -  	ld a, 0D1h
  508 D1:D321 CD AE AC D1 	call InsertA															; pop de
  509 D1:D325 3E 19 -  -  	ld a, 019h
  510 D1:D327 C3 AE AC D1 	jp InsertA																; add hl, de
  511 D1:D32B -  -  -  -  AddFunctionXXX:
  512 D1:D32B DD 7E FC -  	ld a, (ix-4)
  513 D1:D32E B7 -  -  -  	or a
  514 D1:D32F 28 10 -  -  	jr z, AddFunctionNumber
  515 D1:D331 3D -  -  -  	dec a
  516 D1:D332 28 18 -  -  	jr z, AddFunctionVariable
  517 D1:D334 3D -  -  -  	dec a
  518 D1:D335 28 20 -  -  	jr z, AddFunctionChainPush
  519 D1:D337 3D -  -  -  	dec a
  520 D1:D338 28 21 -  -  	jr z, AddFunctionChainAns
  521 D1:D33A 3D -  -  -  	dec a
  522 D1:D33B 28 3F -  -  	jr z, AddFunctionFunction
  523 D1:D33D C3 9A AE D1 	jp AddError
  524 D1:D341 -  -  -  -  AddFunctionNumber:
  525 D1:D341 79 -  -  -  	ld a, c
  526 D1:D342 06 02 -  -  	ld b, OutputInHL
  527 D1:D344 CD FF AC D1 	call GetFunction
  528 D1:D348 C3 A3 D2 D1 	jp AddChainAnsNumber
  529 D1:D34C -  -  -  -  AddFunctionVariable:
  530 D1:D34C 79 -  -  -  	ld a, c
  531 D1:D34D 06 02 -  -  	ld b, OutputInHL
  532 D1:D34F CD FF AC D1 	call GetFunction
  533 D1:D353 C3 E2 D2 D1 	jp AddChainAnsVariable
  534 D1:D357 -  -  -  -  AddFunctionChainPush:
  535 D1:D357 C3 3F AF D1 	jp UnknownError
  536 D1:D35B -  -  -  -  AddFunctionChainAns:
  537 D1:D35B 3A E9 EB D1 	ld a, (ExprOutput)
  538 D1:D35F 87 -  -  -  	add a, a
  539 D1:D360 87 -  -  -  	add a, a
  540 D1:D361 87 -  -  -  	add a, a
  541 D1:D362 87 -  -  -  	add a, a
  542 D1:D363 C6 D5 -  -  	add a, 0D5h
  543 D1:D365 CD AE AC D1 	call InsertA															; push hl/de
  544 D1:D369 79 -  -  -  	ld a, c
  545 D1:D36A 06 02 -  -  	ld b, OutputInHL
  546 D1:D36C CD FF AC D1 	call GetFunction
  547 D1:D370 3E D1 -  -  	ld a, 0D1h
  548 D1:D372 CD AE AC D1 	call InsertA															; pop de
  549 D1:D376 3E 19 -  -  	ld a, 019h
  550 D1:D378 C3 AE AC D1 	jp InsertA																; add hl, de
  551 D1:D37C -  -  -  -  AddFunctionFunction:
  552 D1:D37C 7B -  -  -  	ld a, e
  553 D1:D37D 06 02 -  -  	ld b, OutputInHL
  554 D1:D37F CD FF AC D1 	call GetFunction
  555 D1:D383 79 -  -  -  	ld a, c
  556 D1:D384 06 01 -  -  	ld b, OutputInDE
  557 D1:D386 FD CB C0 F6 	set need_push, (iy+fExpression1)
  558 D1:D38A CD FF AC D1 	call GetFunction
  559 D1:D38E 3E 19 -  -  	ld a, 019h
  560 D1:D390 C3 AE AC D1 	jp InsertA																; add hl, de
  561 D1:D394 -  -  -  -  	
  562 D1:D394 -  -  -  -  DivNumberXXX:
  563 D1:D394 DD 7E FC -  	ld a, (ix-4)
  564 D1:D397 B7 -  -  -  	or a
  565 D1:D398 28 10 -  -  	jr z, DivNumberNumber
  566 D1:D39A 3D -  -  -  	dec a
  567 D1:D39B 28 1D -  -  	jr z, DivNumberVariable
  568 D1:D39D 3D -  -  -  	dec a
  569 D1:D39E 28 26 -  -  	jr z, DivNumberChainPush
  570 D1:D3A0 3D -  -  -  	dec a
  571 D1:D3A1 28 27 -  -  	jr z, DivNumberChainAns
  572 D1:D3A3 3D -  -  -  	dec a
  573 D1:D3A4 28 39 -  -  	jr z, DivNumberFunction
  574 D1:D3A6 C3 9E AE D1 	jp DivError
  575 D1:D3AA -  -  -  -  DivNumberNumber:
  576 D1:D3AA FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  577 D1:D3AE C5 -  -  -  	push bc
  578 D1:D3AF E1 -  -  -  	pop hl
  579 D1:D3B0 D5 -  -  -  	push de
  580 D1:D3B1 C1 -  -  -  	pop bc
  581 D1:D3B2 CD 44 01 00 	call __idvrmu
  582 D1:D3B6 DD 1F F9 -  	ld (ix-7), de
  583 D1:D3B9 C9 -  -  -  	ret
  584 D1:D3BA -  -  -  -  DivNumberVariable:
  585 D1:D3BA 3E 21 -  -  	ld a, 021h
  586 D1:D3BC C5 -  -  -  	push bc
  587 D1:D3BD E1 -  -  -  	pop hl
  588 D1:D3BE CD 62 AC D1 	call InsertAHL															; ld hl, *
  589 D1:D3C2 C3 F2 D4 D1 	jp DivChainAnsVariable
  590 D1:D3C6 -  -  -  -  DivNumberChainPush:
  591 D1:D3C6 C3 3F AF D1 	jp UnknownError
  592 D1:D3CA -  -  -  -  DivNumberChainAns:
  593 D1:D3CA 11 E5 C1 21 	ld de, 021C1E5h
  594 D1:D3CE C5 -  -  -  	push bc
  595 D1:D3CF E1 -  -  -  	pop hl
  596 D1:D3D0 3A E9 EB D1 	ld a, (ExprOutput)
  597 D1:D3D4 B7 -  -  -  	or a
  598 D1:D3D5 20 02 -  -  	jr nz, +_
  599 D1:D3D7 1E D5 -  -  	ld e, 0D5h
  600 D1:D3D9 CD A5 AC D1 _:	call InsertDEHL															; push hl/de \ pop bc \ ld hl, *
  601 D1:D3DD 18 74 -  -  	jr DivInsert
  602 D1:D3DF -  -  -  -  DivNumberFunction:
  603 D1:D3DF 7B -  -  -  	ld a, e
  604 D1:D3E0 C5 -  -  -  	push bc
  605 D1:D3E1 06 00 -  -  		ld b, OutputInBC
  606 D1:D3E3 CD FF AC D1 		call GetFunction
  607 D1:D3E7 3E 21 -  -  		ld a, 021h
  608 D1:D3E9 E1 -  -  -  	pop hl
  609 D1:D3EA CD 62 AC D1 	call InsertAHL															; ld hl, *
  610 D1:D3EE 18 63 -  -  	jr DivInsert
  611 D1:D3F0 -  -  -  -  DivVariableXXX:
  612 D1:D3F0 DD 7E FC -  	ld a, (ix-4)
  613 D1:D3F3 B7 -  -  -  	or a
  614 D1:D3F4 28 12 -  -  	jr z, DivVariableNumber
  615 D1:D3F6 3D -  -  -  	dec a
  616 D1:D3F7 28 17 -  -  	jr z, DivVariableVariable
  617 D1:D3F9 3D -  -  -  	dec a
  618 D1:D3FA 28 2E -  -  	jr z, DivVariableChainPush
  619 D1:D3FC 3D -  -  -  	dec a
  620 D1:D3FD 28 2F -  -  	jr z, DivVariableChainAns
  621 D1:D3FF 3D -  -  -  	dec a
  622 D1:D400 CA 48 D4 D1 	jp z, DivVariableFunction
  623 D1:D404 C3 9E AE D1 	jp DivError
  624 D1:D408 -  -  -  -  DivVariableNumber:
  625 D1:D408 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  626 D1:D40C C3 C4 D4 D1 	jp DivChainAnsNumber
  627 D1:D410 -  -  -  -  DivVariableVariable:
  628 D1:D410 79 -  -  -  	ld a, c
  629 D1:D411 BB -  -  -  	cp e
  630 D1:D412 20 0E -  -  	jr nz, +_
  631 D1:D414 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  632 D1:D418 36 00 -  -  	ld (hl), typeNumber
  633 D1:D41A 11 01 00 00 	ld de, 1
  634 D1:D41E 23 -  -  -  	inc hl
  635 D1:D41F ED 1F -  -  	ld (hl), de
  636 D1:D421 C9 -  -  -  	ret
  637 D1:D422 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  638 D1:D426 C3 F2 D4 D1 	jp DivChainAnsVariable
  639 D1:D42A -  -  -  -  DivVariableChainPush:
  640 D1:D42A C3 3F AF D1 	jp UnknownError
  641 D1:D42E -  -  -  -  DivVariableChainAns:
  642 D1:D42E 3A E9 EB D1 	ld a, (ExprOutput)
  643 D1:D432 87 -  -  -  	add a, a
  644 D1:D433 87 -  -  -  	add a, a
  645 D1:D434 87 -  -  -  	add a, a
  646 D1:D435 87 -  -  -  	add a, a
  647 D1:D436 C6 D5 -  -  	add a, 0D5h
  648 D1:D438 CD AE AC D1 	call InsertA															; push hl/de
  649 D1:D43C 3E C1 -  -  	ld a, 0C1h
  650 D1:D43E CD AE AC D1 	call InsertA															; pop bc
  651 D1:D442 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  652 D1:D446 18 0B -  -  	jr DivInsert
  653 D1:D448 -  -  -  -  DivVariableFunction:
  654 D1:D448 7B -  -  -  	ld a, e
  655 D1:D449 06 00 -  -  	ld b, OutputInBC
  656 D1:D44B CD FF AC D1 	call GetFunction
  657 D1:D44F CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  658 D1:D453 -  -  -  -  DivInsert:
  659 D1:D453 3E 00 -  -  	ld a, OutputIsInDE
  660 D1:D455 32 EA EB D1 	ld (ExprOutput2), a
  661 D1:D459 3E CD -  -  	ld a, 0CDh
  662 D1:D45B 21 44 01 00 	ld hl, __idvrmu
  663 D1:D45F C3 62 AC D1 	jp InsertAHL															; call __idvrmu
  664 D1:D463 -  -  -  -  DivChainPushXXX:
  665 D1:D463 DD 7E FC -  	ld a, (ix-4)
  666 D1:D466 B7 -  -  -  	or a
  667 D1:D467 28 12 -  -  	jr z, DivChainPushNumber
  668 D1:D469 3D -  -  -  	dec a
  669 D1:D46A 28 17 -  -  	jr z, DivChainPushVariable
  670 D1:D46C 3D -  -  -  	dec a
  671 D1:D46D 28 1C -  -  	jr z, DivChainPushChainPush
  672 D1:D46F 3D -  -  -  	dec a
  673 D1:D470 28 1D -  -  	jr z, DivChainPushChainAns
  674 D1:D472 3D -  -  -  	dec a
  675 D1:D473 CA A4 D4 D1 	jp z, DivChainPushFunction
  676 D1:D477 C3 9E AE D1 	jp DivError
  677 D1:D47B -  -  -  -  DivChainPushNumber:
  678 D1:D47B 3E E1 -  -  	ld a, 0E1h
  679 D1:D47D CD AE AC D1 	call InsertA															; pop hl
  680 D1:D481 18 41 -  -  	jr DivChainAnsNumber
  681 D1:D483 -  -  -  -  DivChainPushVariable:
  682 D1:D483 3E E1 -  -  	ld a, 0E1h
  683 D1:D485 CD AE AC D1 	call InsertA															; pop hl
  684 D1:D489 18 67 -  -  	jr DivChainAnsVariable
  685 D1:D48B -  -  -  -  DivChainPushChainPush:
  686 D1:D48B C3 3F AF D1 	jp UnknownError
  687 D1:D48F -  -  -  -  DivChainPushChainAns:
  688 D1:D48F 21 E5 C1 E1 	ld hl, 0E1C1E5h
  689 D1:D493 3A E9 EB D1 	ld a, (ExprOutput)
  690 D1:D497 87 -  -  -  	add a, a
  691 D1:D498 87 -  -  -  	add a, a
  692 D1:D499 87 -  -  -  	add a, a
  693 D1:D49A 87 -  -  -  	add a, a
  694 D1:D49B C6 D5 -  -  	add a, 0D5h
  695 D1:D49D 6F -  -  -  	ld l, a
  696 D1:D49E CD 66 AC D1 	call InsertHL															; push hl/de \ pop bc \ pop hl
  697 D1:D4A2 18 AF -  -  _:	jr DivInsert
  698 D1:D4A4 -  -  -  -  DivChainPushFunction:
  699 D1:D4A4 3E E1 -  -  	ld a, 0E1h
  700 D1:D4A6 CD AE AC D1 	call InsertA															; pop hl
  701 D1:D4AA 18 58 -  -  	jr DivChainAnsFunction
  702 D1:D4AC -  -  -  -  DivChainAnsXXX:
  703 D1:D4AC DD 7E FC -  	ld a, (ix-4)
  704 D1:D4AF B7 -  -  -  	or a
  705 D1:D4B0 28 12 -  -  	jr z, DivChainAnsNumber
  706 D1:D4B2 3D -  -  -  	dec a
  707 D1:D4B3 28 3D -  -  	jr z, DivChainAnsVariable
  708 D1:D4B5 3D -  -  -  	dec a
  709 D1:D4B6 28 44 -  -  	jr z, DivChainAnsChainPush
  710 D1:D4B8 3D -  -  -  	dec a
  711 D1:D4B9 28 45 -  -  	jr z, DivChainAnsChainAns
  712 D1:D4BB 3D -  -  -  	dec a
  713 D1:D4BC CA 04 D5 D1 	jp z, DivChainAnsFunction
  714 D1:D4C0 C3 9E AE D1 	jp DivError
  715 D1:D4C4 -  -  -  -  DivChainAnsNumber:
  716 D1:D4C4 CD C7 AC D1 	call MaybeChangeDEToHL
  717 D1:D4C8 3E 01 -  -  	ld a, 001h
  718 D1:D4CA EB -  -  -  	ex de, hl
  719 D1:D4CB 11 00 01 00 	ld de, 256
  720 D1:D4CF B7 -  -  -  	or a
  721 D1:D4D0 ED 52 -  -  	sbc hl, de
  722 D1:D4D2 30 17 -  -  	jr nc, +_
  723 D1:D4D4 19 -  -  -  	add hl, de
  724 D1:D4D5 4D -  -  -  	ld c, l
  725 D1:D4D6 3E 3E -  -  	ld a, 03Eh
  726 D1:D4D8 CD AE AC D1 	call InsertA															; ld a, *
  727 D1:D4DC 79 -  -  -  	ld a, c
  728 D1:D4DD CD AE AC D1 	call InsertA															; ld a, *
  729 D1:D4E1 3E CD -  -  	ld a, 0CDh
  730 D1:D4E3 21 90 1D 02 	ld hl, _DivHLByA
  731 D1:D4E7 C3 62 AC D1 	jp InsertAHL															; call _DivHLByA
  732 D1:D4EB 19 -  -  -  _:	add hl, de
  733 D1:D4EC CD 62 AC D1 	call InsertAHL															; ld bc, *
  734 D1:D4F0 18 B0 -  -  _:	jr ---_
  735 D1:D4F2 -  -  -  -  DivChainAnsVariable:
  736 D1:D4F2 CD C7 AC D1 	call MaybeChangeDEToHL
  737 D1:D4F6 CD 93 AC D1 	call InsertIXC
  738 D1:D4FA 18 F4 -  -  	jr -_
  739 D1:D4FC -  -  -  -  DivChainAnsChainPush:
  740 D1:D4FC C3 3F AF D1 	jp UnknownError
  741 D1:D500 -  -  -  -  DivChainAnsChainAns:
  742 D1:D500 C3 3F AF D1 	jp UnknownError
  743 D1:D504 -  -  -  -  DivChainAnsFunction:
  744 D1:D504 3A E9 EB D1 	ld a, (ExprOutput)
  745 D1:D508 87 -  -  -  	add a, a
  746 D1:D509 87 -  -  -  	add a, a
  747 D1:D50A 87 -  -  -  	add a, a
  748 D1:D50B 87 -  -  -  	add a, a
  749 D1:D50C C6 D5 -  -  	add a, 0D5h
  750 D1:D50E CD AE AC D1 	call InsertA															; push hl/de
  751 D1:D512 7B -  -  -  	ld a, e
  752 D1:D513 06 00 -  -  	ld b, OutputInBC
  753 D1:D515 CD FF AC D1 	call GetFunction
  754 D1:D519 3E E1 -  -  	ld a, 0E1h
  755 D1:D51B CD AE AC D1 	call InsertA															; pop hl
  756 D1:D51F 18 CF -  -  _:	jr --_
  757 D1:D521 -  -  -  -  DivFunctionXXX:
  758 D1:D521 DD 7E FC -  	ld a, (ix-4)
  759 D1:D524 B7 -  -  -  	or a
  760 D1:D525 28 10 -  -  	jr z, DivFunctionNumber
  761 D1:D527 3D -  -  -  	dec a
  762 D1:D528 28 18 -  -  	jr z, DivFunctionVariable
  763 D1:D52A 3D -  -  -  	dec a
  764 D1:D52B 28 20 -  -  	jr z, DivFunctionChainPush
  765 D1:D52D 3D -  -  -  	dec a
  766 D1:D52E 28 21 -  -  	jr z, DivFunctionChainAns
  767 D1:D530 3D -  -  -  	dec a
  768 D1:D531 28 3B -  -  	jr z, DivFunctionFunction
  769 D1:D533 C3 9E AE D1 	jp DivError
  770 D1:D537 -  -  -  -  DivFunctionNumber:
  771 D1:D537 79 -  -  -  	ld a, c
  772 D1:D538 06 02 -  -  	ld b, OutputInHL
  773 D1:D53A CD FF AC D1 	call GetFunction
  774 D1:D53E C3 C4 D4 D1 	jp DivChainAnsNumber
  775 D1:D542 -  -  -  -  DivFunctionVariable:
  776 D1:D542 79 -  -  -  	ld a, c
  777 D1:D543 06 02 -  -  	ld b, OutputInHL
  778 D1:D545 CD FF AC D1 	call GetFunction
  779 D1:D549 C3 F2 D4 D1 	jp DivChainAnsVariable
  780 D1:D54D -  -  -  -  DivFunctionChainPush:
  781 D1:D54D C3 3F AF D1 	jp UnknownError
  782 D1:D551 -  -  -  -  DivFunctionChainAns:
  783 D1:D551 3A E9 EB D1 	ld a, (ExprOutput)
  784 D1:D555 87 -  -  -  	add a, a
  785 D1:D556 87 -  -  -  	add a, a
  786 D1:D557 87 -  -  -  	add a, a
  787 D1:D558 87 -  -  -  	add a, a
  788 D1:D559 C6 D5 -  -  	add a, 0D5h
  789 D1:D55B CD AE AC D1 	call InsertA															; push hl/de
  790 D1:D55F 3E C1 -  -  	ld a, 0C1h
  791 D1:D561 CD AE AC D1 	call InsertA															; pop bc
  792 D1:D565 79 -  -  -  	ld a, c
  793 D1:D566 06 02 -  -  	ld b, OutputInHL
  794 D1:D568 CD FF AC D1 	call GetFunction
  795 D1:D56C 18 B1 -  -  	jr -_
  796 D1:D56E -  -  -  -  DivFunctionFunction:
  797 D1:D56E 7B -  -  -  	ld a, e
  798 D1:D56F 06 00 -  -  	ld b, OutputInBC
  799 D1:D571 CD FF AC D1 	call GetFunction
  800 D1:D575 79 -  -  -  	ld a, c
  801 D1:D576 06 02 -  -  	ld b, OutputInHL
  802 D1:D578 CD FF AC D1 	call GetFunction
  803 D1:D57C 18 A1 -  -  	jr -_
  804 D1:D57E -  -  -  -  	
  805 D1:D57E -  -  -  -  MulNumberXXX:
  806 D1:D57E DD 7E FC -  	ld a, (ix-4)
  807 D1:D581 B7 -  -  -  	or a
  808 D1:D582 28 10 -  -  	jr z, MulNumberNumber
  809 D1:D584 3D -  -  -  	dec a
  810 D1:D585 28 1A -  -  	jr z, MulNumberVariable
  811 D1:D587 3D -  -  -  	dec a
  812 D1:D588 28 1E -  -  	jr z, MulNumberChainPush
  813 D1:D58A 3D -  -  -  	dec a
  814 D1:D58B 28 1F -  -  	jr z, MulNumberChainAns
  815 D1:D58D 3D -  -  -  	dec a
  816 D1:D58E 28 22 -  -  	jr z, MulNumberFunction
  817 D1:D590 C3 A2 AE D1 	jp MulError
  818 D1:D594 -  -  -  -  MulNumberNumber:
  819 D1:D594 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  820 D1:D598 EB -  -  -  	ex de, hl
  821 D1:D599 CD 54 01 00 	call __imulu
  822 D1:D59D DD 2F F9 -  	ld (ix-7), hl
  823 D1:D5A0 C9 -  -  -  	ret
  824 D1:D5A1 -  -  -  -  MulNumberVariable:
  825 D1:D5A1 C5 -  -  -  	push bc
  826 D1:D5A2 E1 -  -  -  	pop hl
  827 D1:D5A3 EB -  -  -  	ex de, hl
  828 D1:D5A4 E5 -  -  -  	push hl
  829 D1:D5A5 C1 -  -  -  	pop bc
  830 D1:D5A6 18 2B -  -  	jr MulVariableNumber
  831 D1:D5A8 -  -  -  -  MulNumberChainPush:
  832 D1:D5A8 C3 3F AF D1 	jp UnknownError
  833 D1:D5AC -  -  -  -  MulNumberChainAns:
  834 D1:D5AC C5 -  -  -  	push bc
  835 D1:D5AD D1 -  -  -  	pop de
  836 D1:D5AE C3 70 D6 D1 	jp MulChainAnsNumber
  837 D1:D5B2 -  -  -  -  MulNumberFunction:
  838 D1:D5B2 C5 -  -  -  	push bc
  839 D1:D5B3 E1 -  -  -  	pop hl
  840 D1:D5B4 EB -  -  -  	ex de, hl
  841 D1:D5B5 E5 -  -  -  	push hl
  842 D1:D5B6 C1 -  -  -  	pop bc
  843 D1:D5B7 C3 2F D7 D1 	jp MulFunctionNumber
  844 D1:D5BB -  -  -  -  MulVariableXXX:
  845 D1:D5BB DD 7E FC -  	ld a, (ix-4)
  846 D1:D5BE B7 -  -  -  	or a
  847 D1:D5BF 28 12 -  -  	jr z, MulVariableNumber
  848 D1:D5C1 3D -  -  -  	dec a
  849 D1:D5C2 28 17 -  -  	jr z, MulVariableVariable
  850 D1:D5C4 3D -  -  -  	dec a
  851 D1:D5C5 28 1C -  -  	jr z, MulVariableChainPush
  852 D1:D5C7 3D -  -  -  	dec a
  853 D1:D5C8 28 24 -  -  	jr z, MulVariableChainAns
  854 D1:D5CA 3D -  -  -  	dec a
  855 D1:D5CB CA F3 D5 D1 	jp z, MulVariableFunction
  856 D1:D5CF C3 A2 AE D1 	jp MulError
  857 D1:D5D3 -  -  -  -  MulVariableNumber:
  858 D1:D5D3 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  859 D1:D5D7 C3 70 D6 D1 	jp MulChainAnsNumber
  860 D1:D5DB -  -  -  -  MulVariableVariable:
  861 D1:D5DB CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  862 D1:D5DF C3 DA D6 D1 	jp MulChainAnsVariable
  863 D1:D5E3 -  -  -  -  MulVariableChainPush:
  864 D1:D5E3 3E E1 -  -  	ld a, 0E1h
  865 D1:D5E5 CD AE AC D1 	call InsertA															; pop hl
  866 D1:D5E9 59 -  -  -  	ld e, c
  867 D1:D5EA C3 DA D6 D1 	jp MulChainAnsVariable
  868 D1:D5EE -  -  -  -  MulVariableChainAns:
  869 D1:D5EE 59 -  -  -  	ld e, c
  870 D1:D5EF C3 DA D6 D1 	jp MulChainAnsVariable
  871 D1:D5F3 -  -  -  -  MulVariableFunction:
  872 D1:D5F3 7B -  -  -  	ld a, e
  873 D1:D5F4 06 02 -  -  	ld b, OutputInHL
  874 D1:D5F6 CD FF AC D1 	call GetFunction
  875 D1:D5FA CD 93 AC D1 	call InsertIXC
  876 D1:D5FE 3E CD -  -  	ld a, 0CDh
  877 D1:D600 21 54 01 00 	ld hl, __imulu
  878 D1:D604 C3 62 AC D1 	jp InsertAHL															; call __imulu
  879 D1:D608 -  -  -  -  MulChainPushXXX:
  880 D1:D608 DD 7E FC -  	ld a, (ix-4)
  881 D1:D60B B7 -  -  -  	or a
  882 D1:D60C 28 12 -  -  	jr z, MulChainPushNumber
  883 D1:D60E 3D -  -  -  	dec a
  884 D1:D60F 28 17 -  -  	jr z, MulChainPushVariable
  885 D1:D611 3D -  -  -  	dec a
  886 D1:D612 28 1E -  -  	jr z, MulChainPushChainPush
  887 D1:D614 3D -  -  -  	dec a
  888 D1:D615 28 1F -  -  	jr z, MulChainPushChainAns
  889 D1:D617 3D -  -  -  	dec a
  890 D1:D618 CA 4A D6 D1 	jp z, MulChainPushFunction
  891 D1:D61C C3 A2 AE D1 	jp MulError
  892 D1:D620 -  -  -  -  MulChainPushNumber:
  893 D1:D620 3E E1 -  -  	ld a, 0E1h
  894 D1:D622 CD AE AC D1 	call InsertA															; pop hl
  895 D1:D626 18 48 -  -  	jr MulChainAnsNumber
  896 D1:D628 -  -  -  -  MulChainPushVariable:
  897 D1:D628 3E E1 -  -  	ld a, 0E1h
  898 D1:D62A CD AE AC D1 	call InsertA															; pop hl
  899 D1:D62E C3 DA D6 D1 	jp MulChainAnsVariable
  900 D1:D632 -  -  -  -  MulChainPushChainPush:
  901 D1:D632 C3 3F AF D1 	jp UnknownError
  902 D1:D636 -  -  -  -  MulChainPushChainAns:
  903 D1:D636 CD C7 AC D1 	call MaybeChangeDEToHL
  904 D1:D63A 3E C1 -  -  	ld a, 0C1h
  905 D1:D63C CD AE AC D1 	call InsertA															; pop bc
  906 D1:D640 3E CD -  -  	ld a, 0CDh
  907 D1:D642 21 54 01 00 	ld hl, __imulu
  908 D1:D646 C3 62 AC D1 	jp InsertAHL															; call __imulu
  909 D1:D64A -  -  -  -  MulChainPushFunction:
  910 D1:D64A 3E E1 -  -  	ld a, 0E1h
  911 D1:D64C CD AE AC D1 	call InsertA															; pop hl
  912 D1:D650 C3 F4 D6 D1 	jp MulChainAnsFunction
  913 D1:D654 -  -  -  -  MulChainAnsXXX:
  914 D1:D654 DD 7E FC -  	ld a, (ix-4)
  915 D1:D657 B7 -  -  -  	or a
  916 D1:D658 28 16 -  -  	jr z, MulChainAnsNumber
  917 D1:D65A 3D -  -  -  	dec a
  918 D1:D65B 28 7D -  -  	jr z, MulChainAnsVariable
  919 D1:D65D 3D -  -  -  	dec a
  920 D1:D65E CA EC D6 D1 	jp z, MulChainAnsChainPush
  921 D1:D662 3D -  -  -  	dec a
  922 D1:D663 CA F0 D6 D1 	jp z, MulChainAnsChainAns
  923 D1:D667 3D -  -  -  	dec a
  924 D1:D668 CA F4 D6 D1 	jp z, MulChainAnsFunction
  925 D1:D66C C3 A2 AE D1 	jp MulError
  926 D1:D670 -  -  -  -  MulChainAnsNumber:
  927 D1:D670 CD 4C 1D 02 	call _ChkDEIs0
  928 D1:D674 20 08 -  -  	jr nz, +_
  929 D1:D676 21 B7 ED 62 	ld hl, 062EDB7h
  930 D1:D67A C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, hl
  931 D1:D67E CD C7 AC D1 _:	call MaybeChangeDEToHL
  932 D1:D682 1B -  -  -  	dec de
  933 D1:D683 CD 4C 1D 02 	call _ChkDEIs0
  934 D1:D687 C8 -  -  -  	ret z
  935 D1:D688 13 -  -  -  	inc de
  936 D1:D689 EB -  -  -  	ex de, hl
  937 D1:D68A 11 15 00 00 	ld de, 21
  938 D1:D68E B7 -  -  -  	or a
  939 D1:D68F ED 52 -  -  	sbc hl, de
  940 D1:D691 30 16 -  -  	jr nc, ++_
  941 D1:D693 19 -  -  -  	add hl, de
  942 D1:D694 2D -  -  -  	dec l
  943 D1:D695 2D -  -  -  	dec l
  944 D1:D696 26 0A -  -  	ld h, 10
  945 D1:D698 ED 6C -  -  	mlt hl
  946 D1:D69A 11 C5 EE D1 	ld de, MulTable
  947 D1:D69E 19 -  -  -  	add hl, de
  948 D1:D69F 46 -  -  -  	ld b, (hl)
  949 D1:D6A0 23 -  -  -  _:	inc hl
  950 D1:D6A1 7E -  -  -  	ld a, (hl)
  951 D1:D6A2 CD AE AC D1 	call InsertA
  952 D1:D6A6 10 F8 -  -  	djnz -_
  953 D1:D6A8 C9 -  -  -  	ret
  954 D1:D6A9 19 -  -  -  _:	add hl, de
  955 D1:D6AA 11 00 01 00 	ld de, 256
  956 D1:D6AE B7 -  -  -  	or a
  957 D1:D6AF ED 52 -  -  	sbc hl, de
  958 D1:D6B1 38 10 -  -  	jr c, +_
  959 D1:D6B3 3E 01 -  -  	ld a, 001h
  960 D1:D6B5 CD 62 AC D1 	call InsertAHL															; ld bc, *
  961 D1:D6B9 3E CD -  -  	ld a, 0CDh
  962 D1:D6BB 21 54 01 00 	ld hl, __imulu
  963 D1:D6BF C3 62 AC D1 	jp InsertAHL															; call __imulu
  964 D1:D6C3 19 -  -  -  _:	add hl, de
  965 D1:D6C4 4D -  -  -  	ld c, l
  966 D1:D6C5 3E 3E -  -  	ld a, 03Eh
  967 D1:D6C7 CD AE AC D1 	call InsertA															; ld a, *
  968 D1:D6CB 79 -  -  -  	ld a, c
  969 D1:D6CC CD AE AC D1 	call InsertA															; ld a, *
  970 D1:D6D0 3E CD -  -  	ld a, 0CDh
  971 D1:D6D2 21 50 01 00 	ld hl, __imul_b
  972 D1:D6D6 C3 62 AC D1 	jp InsertAHL															; call __imul_b
  973 D1:D6DA -  -  -  -  MulChainAnsVariable:
  974 D1:D6DA CD C7 AC D1 	call MaybeChangeDEToHL
  975 D1:D6DE CD 93 AC D1 	call InsertIXC															; ld bc, (ix+*)
  976 D1:D6E2 3E CD -  -  	ld a, 0CDh
  977 D1:D6E4 21 54 01 00 	ld hl, __imulu
  978 D1:D6E8 C3 62 AC D1 	jp InsertAHL															; call __imulu
  979 D1:D6EC -  -  -  -  MulChainAnsChainPush:
  980 D1:D6EC C3 3F AF D1 	jp UnknownError
  981 D1:D6F0 -  -  -  -  MulChainAnsChainAns:
  982 D1:D6F0 C3 3F AF D1 	jp UnknownError
  983 D1:D6F4 -  -  -  -  MulChainAnsFunction:
  984 D1:D6F4 3A E9 EB D1 	ld a, (ExprOutput)
  985 D1:D6F8 87 -  -  -  	add a, a
  986 D1:D6F9 87 -  -  -  	add a, a
  987 D1:D6FA 87 -  -  -  	add a, a
  988 D1:D6FB 87 -  -  -  	add a, a
  989 D1:D6FC C6 D5 -  -  	add a, 0D5h
  990 D1:D6FE CD AE AC D1 	call InsertA															; push hl/de
  991 D1:D702 7B -  -  -  	ld a, e
  992 D1:D703 06 00 -  -  	ld b, OutputInBC
  993 D1:D705 CD FF AC D1 	call GetFunction
  994 D1:D709 3E E1 -  -  	ld a, 0E1h
  995 D1:D70B CD AE AC D1 	call InsertA															; pop hl
  996 D1:D70F 3E CD -  -  	ld a, 0CDh
  997 D1:D711 21 54 01 00 	ld hl, __imulu
  998 D1:D715 C3 62 AC D1 	jp InsertAHL															; call __imulu
  999 D1:D719 -  -  -  -  MulFunctionXXX:
 1000 D1:D719 DD 7E FC -  	ld a, (ix-4)
 1001 D1:D71C B7 -  -  -  	or a
 1002 D1:D71D 28 10 -  -  	jr z, MulFunctionNumber
 1003 D1:D71F 3D -  -  -  	dec a
 1004 D1:D720 28 18 -  -  	jr z, MulFunctionVariable
 1005 D1:D722 3D -  -  -  	dec a
 1006 D1:D723 28 20 -  -  	jr z, MulFunctionChainPush
 1007 D1:D725 3D -  -  -  	dec a
 1008 D1:D726 28 21 -  -  	jr z, MulFunctionChainAns
 1009 D1:D728 3D -  -  -  	dec a
 1010 D1:D729 28 21 -  -  	jr z, MulFunctionFunction
 1011 D1:D72B C3 A2 AE D1 	jp MulError
 1012 D1:D72F -  -  -  -  MulFunctionNumber:
 1013 D1:D72F 79 -  -  -  	ld a, c
 1014 D1:D730 06 02 -  -  	ld b, OutputInHL
 1015 D1:D732 CD FF AC D1 	call GetFunction
 1016 D1:D736 C3 70 D6 D1 	jp MulChainAnsNumber
 1017 D1:D73A -  -  -  -  MulFunctionVariable:
 1018 D1:D73A 79 -  -  -  	ld a, c
 1019 D1:D73B 06 02 -  -  	ld b, OutputInHL
 1020 D1:D73D CD FF AC D1 	call GetFunction
 1021 D1:D741 C3 DA D6 D1 	jp MulChainAnsVariable
 1022 D1:D745 -  -  -  -  MulFunctionChainPush:
 1023 D1:D745 C3 3F AF D1 	jp UnknownError
 1024 D1:D749 -  -  -  -  MulFunctionChainAns:
 1025 D1:D749 59 -  -  -  	ld e, c
 1026 D1:D74A 18 A8 -  -  	jr MulChainAnsFunction
 1027 D1:D74C -  -  -  -  MulFunctionFunction:
 1028 D1:D74C 7B -  -  -  	ld a, e
 1029 D1:D74D 06 00 -  -  	ld b, OutputInBC
 1030 D1:D74F CD FF AC D1 	call GetFunction
 1031 D1:D753 79 -  -  -  	ld a, c
 1032 D1:D754 06 02 -  -  	ld b, OutputInHL
 1033 D1:D756 CD FF AC D1 	call GetFunction
 1034 D1:D75A 3E CD -  -  	ld a, 0CDh
 1035 D1:D75C 21 54 01 00 	ld hl, __imulu
 1036 D1:D760 C3 62 AC D1 	jp InsertAHL															; call __imulu
 1037 D1:D764 -  -  -  -  	
 1038 D1:D764 -  -  -  -  SwapLEToGE:
 1039 D1:D764 C5 -  -  -  	push bc
 1040 D1:D765 E1 -  -  -  	pop hl
 1041 D1:D766 DD 7E FC -  	ld a, (ix-4)
 1042 D1:D769 DD 46 F8 -  	ld b, (ix-8)
 1043 D1:D76C DD 70 FC -  	ld (ix-4), b
 1044 D1:D76F DD 77 F8 -  	ld (ix-8), a
 1045 D1:D772 EB -  -  -  	ex de, hl
 1046 D1:D773 E5 -  -  -  	push hl
 1047 D1:D774 C1 -  -  -  	pop bc
 1048 D1:D775 3E 6E -  -  	ld a, tGE
 1049 D1:D777 C9 -  -  -  	ret
 1050 D1:D778 -  -  -  -  	
 1051 D1:D778 -  -  -  -  SwapLTToGT:
 1052 D1:D778 C5 -  -  -  	push bc
 1053 D1:D779 E1 -  -  -  	pop hl
 1054 D1:D77A DD 7E FC -  	ld a, (ix-4)
 1055 D1:D77D DD 46 F8 -  	ld b, (ix-8)
 1056 D1:D780 DD 70 FC -  	ld (ix-4), b
 1057 D1:D783 DD 77 F8 -  	ld (ix-8), a
 1058 D1:D786 EB -  -  -  	ex de, hl
 1059 D1:D787 E5 -  -  -  	push hl
 1060 D1:D788 C1 -  -  -  	pop bc
 1061 D1:D789 3E 6C -  -  	ld a, tGT
 1062 D1:D78B C9 -  -  -  	ret
 1063 D1:D78C -  -  -  -  
 1064 D1:D78C -  -  -  -  GLETNumberXXX:
 1065 D1:D78C DD 7E FC -  	ld a, (ix-4)
 1066 D1:D78F B7 -  -  -  	or a
 1067 D1:D790 28 10 -  -  	jr z, GLETNumberNumber
 1068 D1:D792 3D -  -  -  	dec a
 1069 D1:D793 28 25 -  -  	jr z, GLETNumberVariable
 1070 D1:D795 3D -  -  -  	dec a
 1071 D1:D796 28 2E -  -  	jr z, GLETNumberChainPush
 1072 D1:D798 3D -  -  -  	dec a
 1073 D1:D799 28 2F -  -  	jr z, GLETNumberChainAns
 1074 D1:D79B 3D -  -  -  	dec a
 1075 D1:D79C 28 3A -  -  	jr z, GLETNumberFunction
 1076 D1:D79E C3 A6 AE D1 	jp GLETError
 1077 D1:D7A2 -  -  -  -  GLETNumberNumber:
 1078 D1:D7A2 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1079 D1:D7A6 C5 -  -  -  	push bc
 1080 D1:D7A7 E1 -  -  -  	pop hl
 1081 D1:D7A8 3A 1F EA D0 	ld a, (tempToken)
 1082 D1:D7AC FE 6E -  -  	cp tGE
 1083 D1:D7AE 28 01 -  -  	jr z, +_
 1084 D1:D7B0 37 -  -  -  	scf
 1085 D1:D7B1 ED 52 -  -  _:	sbc hl, de
 1086 D1:D7B3 ED 62 -  -  	sbc hl, hl
 1087 D1:D7B5 23 -  -  -  	inc hl
 1088 D1:D7B6 DD 2F F9 -  	ld (ix-7), hl
 1089 D1:D7B9 C9 -  -  -  	ret
 1090 D1:D7BA -  -  -  -  GLETNumberVariable:
 1091 D1:D7BA 3E 21 -  -  	ld a, 021h
 1092 D1:D7BC C5 -  -  -  	push bc
 1093 D1:D7BD E1 -  -  -  	pop hl
 1094 D1:D7BE CD 62 AC D1 	call InsertAHL															; ld hl, *
 1095 D1:D7C2 C3 D6 D8 D1 	jp GLETChainAnsVariable
 1096 D1:D7C6 -  -  -  -  GLETNumberChainPush:
 1097 D1:D7C6 C3 3F AF D1 	jp UnknownError
 1098 D1:D7CA -  -  -  -  GLETNumberChainAns:
 1099 D1:D7CA CD BB AC D1 	call MaybeChangeHLToDE
 1100 D1:D7CE 3E 21 -  -  	ld a, 021h
 1101 D1:D7D0 C5 -  -  -  	push bc
 1102 D1:D7D1 E1 -  -  -  	pop hl
 1103 D1:D7D2 CD 62 AC D1 	call InsertAHL															; ld hl, *
 1104 D1:D7D6 18 6F -  -  	jr GLETInsert
 1105 D1:D7D8 -  -  -  -  GLETNumberFunction:
 1106 D1:D7D8 7B -  -  -  	ld a, e
 1107 D1:D7D9 C5 -  -  -  	push bc
 1108 D1:D7DA 06 01 -  -  		ld b, OutputInDE
 1109 D1:D7DC CD FF AC D1 		call GetFunction
 1110 D1:D7E0 3E 21 -  -  		ld a, 021h
 1111 D1:D7E2 E1 -  -  -  	pop hl
 1112 D1:D7E3 CD 62 AC D1 	call InsertAHL															; ld hl, *
 1113 D1:D7E7 18 5E -  -  	jr GLETInsert
 1114 D1:D7E9 -  -  -  -  GLETVariableXXX:
 1115 D1:D7E9 DD 7E FC -  	ld a, (ix-4)
 1116 D1:D7EC B7 -  -  -  	or a
 1117 D1:D7ED 28 12 -  -  	jr z, GLETVariableNumber
 1118 D1:D7EF 3D -  -  -  	dec a
 1119 D1:D7F0 28 17 -  -  	jr z, GLETVariableVariable
 1120 D1:D7F2 3D -  -  -  	dec a
 1121 D1:D7F3 28 39 -  -  	jr z, GLETVariableChainPush
 1122 D1:D7F5 3D -  -  -  	dec a
 1123 D1:D7F6 28 3A -  -  	jr z, GLETVariableChainAns
 1124 D1:D7F8 3D -  -  -  	dec a
 1125 D1:D7F9 CA 3C D8 D1 	jp z, GLETVariableFunction
 1126 D1:D7FD C3 A6 AE D1 	jp GLETError
 1127 D1:D801 -  -  -  -  GLETVariableNumber:
 1128 D1:D801 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1129 D1:D805 C3 BC D8 D1 	jp GLETChainAnsNumber
 1130 D1:D809 -  -  -  -  GLETVariableVariable:
 1131 D1:D809 79 -  -  -  	ld a, c
 1132 D1:D80A BB -  -  -  	cp e
 1133 D1:D80B 20 19 -  -  	jr nz, ++_
 1134 D1:D80D FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1135 D1:D811 3A 1F EA D0 	ld a, (tempToken)
 1136 D1:D815 D6 6C -  -  	sub tGT
 1137 D1:D817 28 02 -  -  	jr z, +_
 1138 D1:D819 3E 01 -  -  	ld a, 1
 1139 D1:D81B 11 00 00 00 _:	ld de, 0
 1140 D1:D81F 5F -  -  -  	ld e, a
 1141 D1:D820 36 00 -  -  	ld (hl), typeNumber
 1142 D1:D822 23 -  -  -  	inc hl
 1143 D1:D823 ED 1F -  -  	ld (hl), de
 1144 D1:D825 C9 -  -  -  	ret
 1145 D1:D826 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1146 D1:D82A C3 D6 D8 D1 	jp GLETChainAnsVariable
 1147 D1:D82E -  -  -  -  GLETVariableChainPush:
 1148 D1:D82E C3 3F AF D1 	jp UnknownError
 1149 D1:D832 -  -  -  -  GLETVariableChainAns:
 1150 D1:D832 CD BB AC D1 	call MaybeChangeHLToDE
 1151 D1:D836 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1152 D1:D83A 18 0B -  -  	jr GLETInsert
 1153 D1:D83C -  -  -  -  GLETVariableFunction:
 1154 D1:D83C 7B -  -  -  	ld a, e
 1155 D1:D83D 06 01 -  -  	ld b, OutputInDE
 1156 D1:D83F CD FF AC D1 	call GetFunction
 1157 D1:D843 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1158 D1:D847 -  -  -  -  GLETInsert:
 1159 D1:D847 11 37 ED 52 	ld de, 052ED37h
 1160 D1:D84B 21 ED 62 23 	ld hl, 02362EDh
 1161 D1:D84F 3A 1F EA D0 	ld a, (tempToken)
 1162 D1:D853 FE 6C -  -  	cp tGT
 1163 D1:D855 28 02 -  -  	jr z, +_
 1164 D1:D857 1E B7 -  -  	ld e, 0B7h
 1165 D1:D859 C3 A5 AC D1 _:	jp InsertDEHL															; scf/or a \ sbc hl, de \ sbc hl, hl \ inc hl
 1166 D1:D85D -  -  -  -  GLETChainPushXXX:
 1167 D1:D85D DD 7E FC -  	ld a, (ix-4)
 1168 D1:D860 B7 -  -  -  	or a
 1169 D1:D861 28 12 -  -  	jr z, GLETChainPushNumber
 1170 D1:D863 3D -  -  -  	dec a
 1171 D1:D864 28 17 -  -  	jr z, GLETChainPushVariable
 1172 D1:D866 3D -  -  -  	dec a
 1173 D1:D867 28 1C -  -  	jr z, GLETChainPushChainPush
 1174 D1:D869 3D -  -  -  	dec a
 1175 D1:D86A 28 1D -  -  	jr z, GLETChainPushChainAns
 1176 D1:D86C 3D -  -  -  	dec a
 1177 D1:D86D CA 95 D8 D1 	jp z, GLETChainPushFunction
 1178 D1:D871 C3 A6 AE D1 	jp GLETError
 1179 D1:D875 -  -  -  -  GLETChainPushNumber:
 1180 D1:D875 3E E1 -  -  	ld a, 0E1h
 1181 D1:D877 CD AE AC D1 	call InsertA															; pop hl
 1182 D1:D87B 18 3F -  -  	jr GLETChainAnsNumber
 1183 D1:D87D -  -  -  -  GLETChainPushVariable:
 1184 D1:D87D 3E E1 -  -  	ld a, 0E1h
 1185 D1:D87F CD AE AC D1 	call InsertA															; pop hl
 1186 D1:D883 18 51 -  -  	jr GLETChainAnsVariable
 1187 D1:D885 -  -  -  -  GLETChainPushChainPush:
 1188 D1:D885 C3 3F AF D1 	jp UnknownError
 1189 D1:D889 -  -  -  -  GLETChainPushChainAns:
 1190 D1:D889 CD BB AC D1 	call MaybeChangeHLToDE
 1191 D1:D88D 3E E1 -  -  	ld a, 0E1h
 1192 D1:D88F CD AE AC D1 	call InsertA															; pop hl
 1193 D1:D893 18 B2 -  -  	jr GLETInsert
 1194 D1:D895 -  -  -  -  GLETChainPushFunction:
 1195 D1:D895 7B -  -  -  	ld a, e
 1196 D1:D896 06 01 -  -  	ld b, OutputInDE
 1197 D1:D898 CD FF AC D1 	call GetFunction
 1198 D1:D89C 3E E1 -  -  	ld a, 0E1h
 1199 D1:D89E CD AE AC D1 	call InsertA															; pop hl
 1200 D1:D8A2 18 A3 -  -  _:	jr GLETInsert
 1201 D1:D8A4 -  -  -  -  GLETChainAnsXXX:
 1202 D1:D8A4 DD 7E FC -  	ld a, (ix-4)
 1203 D1:D8A7 B7 -  -  -  	or a
 1204 D1:D8A8 28 12 -  -  	jr z, GLETChainAnsNumber
 1205 D1:D8AA 3D -  -  -  	dec a
 1206 D1:D8AB 28 29 -  -  	jr z, GLETChainAnsVariable
 1207 D1:D8AD 3D -  -  -  	dec a
 1208 D1:D8AE 28 30 -  -  	jr z, GLETChainAnsChainPush
 1209 D1:D8B0 3D -  -  -  	dec a
 1210 D1:D8B1 28 31 -  -  	jr z, GLETChainAnsChainAns
 1211 D1:D8B3 3D -  -  -  	dec a
 1212 D1:D8B4 CA E8 D8 D1 	jp z, GLETChainAnsFunction
 1213 D1:D8B8 C3 A6 AE D1 	jp GLETError
 1214 D1:D8BC -  -  -  -  GLETChainAnsNumber:
 1215 D1:D8BC CD C7 AC D1 	call MaybeChangeDEToHL
 1216 D1:D8C0 21 1F EA D0 	ld hl, tempToken
 1217 D1:D8C4 7E -  -  -  	ld a, (hl)
 1218 D1:D8C5 FE 6C -  -  	cp tGT
 1219 D1:D8C7 20 04 -  -  	jr nz, +_
 1220 D1:D8C9 13 -  -  -  	inc de
 1221 D1:D8CA 3E 6E -  -  	ld a, tGE
 1222 D1:D8CC 77 -  -  -  	ld (hl), a
 1223 D1:D8CD 3E 11 -  -  _:	ld a, 011h
 1224 D1:D8CF EB -  -  -  	ex de, hl
 1225 D1:D8D0 CD 62 AC D1 	call InsertAHL															; ld de, *
 1226 D1:D8D4 18 CC -  -  	jr --_
 1227 D1:D8D6 -  -  -  -  GLETChainAnsVariable:
 1228 D1:D8D6 CD C7 AC D1 	call MaybeChangeDEToHL
 1229 D1:D8DA CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
 1230 D1:D8DE 18 C2 -  -  	jr --_
 1231 D1:D8E0 -  -  -  -  GLETChainAnsChainPush:
 1232 D1:D8E0 C3 3F AF D1 	jp UnknownError
 1233 D1:D8E4 -  -  -  -  GLETChainAnsChainAns:
 1234 D1:D8E4 C3 3F AF D1 	jp UnknownError
 1235 D1:D8E8 -  -  -  -  GLETChainAnsFunction:
 1236 D1:D8E8 3A E9 EB D1 	ld a, (ExprOutput)
 1237 D1:D8EC 87 -  -  -  	add a, a
 1238 D1:D8ED 87 -  -  -  	add a, a
 1239 D1:D8EE 87 -  -  -  	add a, a
 1240 D1:D8EF 87 -  -  -  	add a, a
 1241 D1:D8F0 C6 D5 -  -  	add a, 0D5h
 1242 D1:D8F2 CD AE AC D1 	call InsertA															; push hl/de
 1243 D1:D8F6 7B -  -  -  	ld a, e
 1244 D1:D8F7 06 01 -  -  	ld b, OutputInDE
 1245 D1:D8F9 CD FF AC D1 	call GetFunction
 1246 D1:D8FD 3E E1 -  -  	ld a, 0E1h
 1247 D1:D8FF CD AE AC D1 	call InsertA															; pop hl
 1248 D1:D903 18 C8 -  -  _:	jr --_
 1249 D1:D905 -  -  -  -  GLETFunctionXXX:
 1250 D1:D905 DD 7E FC -  	ld a, (ix-4)
 1251 D1:D908 B7 -  -  -  	or a
 1252 D1:D909 28 10 -  -  	jr z, GLETFunctionNumber
 1253 D1:D90B 3D -  -  -  	dec a
 1254 D1:D90C 28 18 -  -  	jr z, GLETFunctionVariable
 1255 D1:D90E 3D -  -  -  	dec a
 1256 D1:D90F 28 20 -  -  	jr z, GLETFunctionChainPush
 1257 D1:D911 3D -  -  -  	dec a
 1258 D1:D912 28 21 -  -  	jr z, GLETFunctionChainAns
 1259 D1:D914 3D -  -  -  	dec a
 1260 D1:D915 28 3B -  -  	jr z, GLETFunctionFunction
 1261 D1:D917 C3 A6 AE D1 	jp GLETError
 1262 D1:D91B -  -  -  -  GLETFunctionNumber:
 1263 D1:D91B 79 -  -  -  	ld a, c
 1264 D1:D91C 06 02 -  -  	ld b, OutputInHL
 1265 D1:D91E CD FF AC D1 	call GetFunction
 1266 D1:D922 C3 BC D8 D1 	jp GLETChainAnsNumber
 1267 D1:D926 -  -  -  -  GLETFunctionVariable:
 1268 D1:D926 79 -  -  -  	ld a, c
 1269 D1:D927 06 02 -  -  	ld b, OutputInHL
 1270 D1:D929 CD FF AC D1 	call GetFunction
 1271 D1:D92D C3 D6 D8 D1 	jp GLETChainAnsVariable
 1272 D1:D931 -  -  -  -  GLETFunctionChainPush:
 1273 D1:D931 C3 3F AF D1 	jp UnknownError
 1274 D1:D935 -  -  -  -  GLETFunctionChainAns:
 1275 D1:D935 3A E9 EB D1 	ld a, (ExprOutput)
 1276 D1:D939 87 -  -  -  	add a, a
 1277 D1:D93A 87 -  -  -  	add a, a
 1278 D1:D93B 87 -  -  -  	add a, a
 1279 D1:D93C 87 -  -  -  	add a, a
 1280 D1:D93D C6 D5 -  -  	add a, 0D5h
 1281 D1:D93F CD AE AC D1 	call InsertA															; push hl/de
 1282 D1:D943 79 -  -  -  	ld a, c
 1283 D1:D944 06 02 -  -  	ld b, OutputInHL
 1284 D1:D946 CD FF AC D1 	call GetFunction
 1285 D1:D94A 3E D1 -  -  	ld a, 0D1h
 1286 D1:D94C CD AE AC D1 	call InsertA															; pop de
 1287 D1:D950 18 B1 -  -  	jr -_
 1288 D1:D952 -  -  -  -  GLETFunctionFunction:
 1289 D1:D952 7B -  -  -  	ld a, e
 1290 D1:D953 06 01 -  -  	ld b, OutputInDE
 1291 D1:D955 CD FF AC D1 	call GetFunction
 1292 D1:D959 79 -  -  -  	ld a, c
 1293 D1:D95A 06 02 -  -  	ld b, OutputInHL
 1294 D1:D95C FD CB C0 F6 	set need_push, (iy+fExpression1)
 1295 D1:D960 CD FF AC D1 	call GetFunction
 1296 D1:D964 18 9D -  -  	jr -_
 1297 D1:D966 -  -  -  -  	
 1298 D1:D966 -  -  -  -  NEQNumberXXX:
 1299 D1:D966 DD 7E FC -  	ld a, (ix-4)
 1300 D1:D969 B7 -  -  -  	or a
 1301 D1:D96A 28 10 -  -  	jr z, NEQNumberNumber
 1302 D1:D96C 3D -  -  -  	dec a
 1303 D1:D96D 28 33 -  -  	jr z, NEQNumberVariable
 1304 D1:D96F 3D -  -  -  	dec a
 1305 D1:D970 28 37 -  -  	jr z, NEQNumberChainPush
 1306 D1:D972 3D -  -  -  	dec a
 1307 D1:D973 28 38 -  -  	jr z, NEQNumberChainAns
 1308 D1:D975 3D -  -  -  	dec a
 1309 D1:D976 28 3B -  -  	jr z, NEQNumberFunction
 1310 D1:D978 C3 C3 AE D1 	jp NEQError
 1311 D1:D97C -  -  -  -  NEQNumberNumber:
 1312 D1:D97C FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1313 D1:D980 EB -  -  -  	ex de, hl
 1314 D1:D981 3A 1F EA D0 	ld a, (tempToken)
 1315 D1:D985 FE 6A -  -  	cp tEq
 1316 D1:D987 28 0C -  -  	jr z, +_
 1317 D1:D989 B7 -  -  -  	or a
 1318 D1:D98A ED 42 -  -  	sbc hl, bc
 1319 D1:D98C 21 00 00 00 	ld hl, 0
 1320 D1:D990 28 01 -  -  	jr z, $+3
 1321 D1:D992 23 -  -  -  	inc hl
 1322 D1:D993 18 09 -  -  	jr ++_
 1323 D1:D995 ED 42 -  -  _:	sbc hl, bc
 1324 D1:D997 21 00 00 00 	ld hl, 0
 1325 D1:D99B 20 01 -  -  	jr nz, $+3
 1326 D1:D99D 23 -  -  -  	inc hl
 1327 D1:D99E DD 2F F9 -  _:	ld (ix-7), hl
 1328 D1:D9A1 C9 -  -  -  	ret
 1329 D1:D9A2 -  -  -  -  NEQNumberVariable:
 1330 D1:D9A2 C5 -  -  -  	push bc
 1331 D1:D9A3 E1 -  -  -  	pop hl
 1332 D1:D9A4 EB -  -  -  	ex de, hl
 1333 D1:D9A5 E5 -  -  -  	push hl
 1334 D1:D9A6 C1 -  -  -  	pop bc
 1335 D1:D9A7 18 2B -  -  	jr NEQVariableNumber
 1336 D1:D9A9 -  -  -  -  NEQNumberChainPush:
 1337 D1:D9A9 C3 3F AF D1 	jp UnknownError
 1338 D1:D9AD -  -  -  -  NEQNumberChainAns:
 1339 D1:D9AD C5 -  -  -  	push bc
 1340 D1:D9AE D1 -  -  -  	pop de
 1341 D1:D9AF C3 99 DA D1 	jp NEQChainAnsNumber
 1342 D1:D9B3 -  -  -  -  NEQNumberFunction:
 1343 D1:D9B3 C5 -  -  -  	push bc
 1344 D1:D9B4 E1 -  -  -  	pop hl
 1345 D1:D9B5 EB -  -  -  	ex de, hl
 1346 D1:D9B6 E5 -  -  -  	push hl
 1347 D1:D9B7 C1 -  -  -  	pop bc
 1348 D1:D9B8 C3 16 DB D1 	jp NEQFunctionNumber
 1349 D1:D9BC -  -  -  -  NEQVariableXXX:
 1350 D1:D9BC DD 7E FC -  	ld a, (ix-4)
 1351 D1:D9BF B7 -  -  -  	or a
 1352 D1:D9C0 28 12 -  -  	jr z, NEQVariableNumber
 1353 D1:D9C2 3D -  -  -  	dec a
 1354 D1:D9C3 28 17 -  -  	jr z, NEQVariableVariable
 1355 D1:D9C5 3D -  -  -  	dec a
 1356 D1:D9C6 28 39 -  -  	jr z, NEQVariableChainPush
 1357 D1:D9C8 3D -  -  -  	dec a
 1358 D1:D9C9 28 3A -  -  	jr z, NEQVariableChainAns
 1359 D1:D9CB 3D -  -  -  	dec a
 1360 D1:D9CC CA 0A DA D1 	jp z, NEQVariableFunction
 1361 D1:D9D0 C3 C3 AE D1 	jp NEQError
 1362 D1:D9D4 -  -  -  -  NEQVariableNumber:
 1363 D1:D9D4 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1364 D1:D9D8 C3 99 DA D1 	jp NEQChainAnsNumber
 1365 D1:D9DC -  -  -  -  NEQVariableVariable:
 1366 D1:D9DC 79 -  -  -  	ld a, c
 1367 D1:D9DD BB -  -  -  	cp e
 1368 D1:D9DE 20 19 -  -  	jr nz, ++_
 1369 D1:D9E0 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1370 D1:D9E4 3A 1F EA D0 	ld a, (tempToken)
 1371 D1:D9E8 D6 6F -  -  	sub tNE
 1372 D1:D9EA 28 02 -  -  	jr z, +_
 1373 D1:D9EC 3E 01 -  -  	ld a, 1
 1374 D1:D9EE 11 00 00 00 _:	ld de, 0
 1375 D1:D9F2 5F -  -  -  	ld e, a
 1376 D1:D9F3 36 00 -  -  	ld (hl), typeNumber
 1377 D1:D9F5 23 -  -  -  	inc hl
 1378 D1:D9F6 ED 1F -  -  	ld (hl), de
 1379 D1:D9F8 C9 -  -  -  	ret
 1380 D1:D9F9 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1381 D1:D9FD C3 BD DA D1 	jp NEQChainAnsVariable
 1382 D1:DA01 -  -  -  -  NEQVariableChainPush:
 1383 D1:DA01 C3 3F AF D1 	jp UnknownError
 1384 D1:DA05 -  -  -  -  NEQVariableChainAns:
 1385 D1:DA05 59 -  -  -  	ld e, c
 1386 D1:DA06 C3 BD DA D1 	jp NEQChainAnsVariable
 1387 D1:DA0A -  -  -  -  NEQVariableFunction:
 1388 D1:DA0A 7B -  -  -  	ld a, e
 1389 D1:DA0B 06 01 -  -  	ld b, OutputInDE
 1390 D1:DA0D CD FF AC D1 	call GetFunction
 1391 D1:DA11 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1392 D1:DA15 -  -  -  -  NEQInsert:
 1393 D1:DA15 21 B7 ED 52 	ld hl, 052EDB7h
 1394 D1:DA19 CD 66 AC D1 	call InsertHL															; or a \ sbc hl, de
 1395 D1:DA1D 11 00 00 00 	ld de, 0
 1396 D1:DA21 21 20 01 23 	ld hl, 0230120h
 1397 D1:DA25 3A 1F EA D0 	ld a, (tempToken)
 1398 D1:DA29 FE 6A -  -  	cp tEq
 1399 D1:DA2B 28 02 -  -  	jr z, +_
 1400 D1:DA2D 2E 28 -  -  	ld l, 028h
 1401 D1:DA2F 3E 21 -  -  _:	ld a, 021h
 1402 D1:DA31 C3 A1 AC D1 	jp InsertADEHL															; ld hl, 0 \ jr [n]z, $+3 \ inc hl
 1403 D1:DA35 -  -  -  -  NEQChainPushXXX:
 1404 D1:DA35 DD 7E FC -  	ld a, (ix-4)
 1405 D1:DA38 B7 -  -  -  	or a
 1406 D1:DA39 28 12 -  -  	jr z, NEQChainPushNumber
 1407 D1:DA3B 3D -  -  -  	dec a
 1408 D1:DA3C 28 17 -  -  	jr z, NEQChainPushVariable
 1409 D1:DA3E 3D -  -  -  	dec a
 1410 D1:DA3F 28 1C -  -  	jr z, NEQChainPushChainPush
 1411 D1:DA41 3D -  -  -  	dec a
 1412 D1:DA42 28 1D -  -  	jr z, NEQChainPushChainAns
 1413 D1:DA44 3D -  -  -  	dec a
 1414 D1:DA45 CA 72 DA D1 	jp z, NEQChainPushFunction
 1415 D1:DA49 C3 C3 AE D1 	jp NEQError
 1416 D1:DA4D -  -  -  -  NEQChainPushNumber:
 1417 D1:DA4D 3E E1 -  -  	ld a, 0E1h
 1418 D1:DA4F CD AE AC D1 	call InsertA															; pop hl
 1419 D1:DA53 18 44 -  -  	jr NEQChainAnsNumber
 1420 D1:DA55 -  -  -  -  NEQChainPushVariable:
 1421 D1:DA55 3E E1 -  -  	ld a, 0E1h
 1422 D1:DA57 CD AE AC D1 	call InsertA															; pop hl
 1423 D1:DA5B 18 60 -  -  	jr NEQChainAnsVariable
 1424 D1:DA5D -  -  -  -  NEQChainPushChainPush:
 1425 D1:DA5D C3 3F AF D1 	jp UnknownError
 1426 D1:DA61 -  -  -  -  NEQChainPushChainAns:
 1427 D1:DA61 3A E9 EB D1 	ld a, (ExprOutput)
 1428 D1:DA65 B7 -  -  -  	or a
 1429 D1:DA66 3E D1 -  -  	ld a, 0D1h
 1430 D1:DA68 20 02 -  -  	jr nz, +_
 1431 D1:DA6A 3E E1 -  -  	ld a, 0E1h
 1432 D1:DA6C CD AE AC D1 _:	call InsertA															; pop hl/de
 1433 D1:DA70 18 A3 -  -  	jr NEQInsert
 1434 D1:DA72 -  -  -  -  NEQChainPushFunction:
 1435 D1:DA72 7B -  -  -  	ld a, e
 1436 D1:DA73 06 02 -  -  	ld b, OutputInHL
 1437 D1:DA75 CD FF AC D1 	call GetFunction
 1438 D1:DA79 3E D1 -  -  	ld a, 0D1h
 1439 D1:DA7B CD AE AC D1 	call InsertA															; pop de
 1440 D1:DA7F 18 94 -  -  _:	jr NEQInsert
 1441 D1:DA81 -  -  -  -  NEQChainAnsXXX:
 1442 D1:DA81 DD 7E FC -  	ld a, (ix-4)
 1443 D1:DA84 B7 -  -  -  	or a
 1444 D1:DA85 28 12 -  -  	jr z, NEQChainAnsNumber
 1445 D1:DA87 3D -  -  -  	dec a
 1446 D1:DA88 28 33 -  -  	jr z, NEQChainAnsVariable
 1447 D1:DA8A 3D -  -  -  	dec a
 1448 D1:DA8B 28 4C -  -  	jr z, NEQChainAnsChainPush
 1449 D1:DA8D 3D -  -  -  	dec a
 1450 D1:DA8E 28 4D -  -  	jr z, NEQChainAnsChainAns
 1451 D1:DA90 3D -  -  -  	dec a
 1452 D1:DA91 CA E1 DA D1 	jp z, NEQChainAnsFunction
 1453 D1:DA95 C3 C3 AE D1 	jp NEQError
 1454 D1:DA99 -  -  -  -  NEQChainAnsNumber:
 1455 D1:DA99 FD CB C0 5E 	bit op_is_last_one, (iy+fExpression1)
 1456 D1:DA9D 28 0C -  -  	jr z, +_
 1457 D1:DA9F 3A 1F EA D0 	ld a, (tempToken)
 1458 D1:DAA3 FE 6F -  -  	cp tNE
 1459 D1:DAA5 20 04 -  -  	jr nz, +_
 1460 D1:DAA7 FD CB C0 AE 	res ans_set_z_flag, (iy+fExpression1)
 1461 D1:DAAB 3A E9 EB D1 _:	ld a, (ExprOutput)
 1462 D1:DAAF B7 -  -  -  	or a
 1463 D1:DAB0 3E 11 -  -  	ld a, 011h
 1464 D1:DAB2 20 02 -  -  	jr nz, $+4
 1465 D1:DAB4 3E 21 -  -  	ld a, 021h
 1466 D1:DAB6 EB -  -  -  	ex de, hl
 1467 D1:DAB7 CD 62 AC D1 	call InsertAHL															; ld hl/de, *
 1468 D1:DABB 18 C2 -  -  	jr --_
 1469 D1:DABD -  -  -  -  NEQChainAnsVariable:
 1470 D1:DABD 26 17 -  -  	ld h, 017h
 1471 D1:DABF 16 03 -  -  	ld d, 3
 1472 D1:DAC1 ED 5C -  -  	mlt de
 1473 D1:DAC3 7B -  -  -  	ld a, e
 1474 D1:DAC4 2E DD -  -  	ld l, 0DDh
 1475 D1:DAC6 CD 70 1D 02 	call _SetHLUToA
 1476 D1:DACA 3A E9 EB D1 	ld a, (ExprOutput)
 1477 D1:DACE B7 -  -  -  	or a
 1478 D1:DACF 20 02 -  -  	jr nz, $+4
 1479 D1:DAD1 26 27 -  -  	ld h, 027h
 1480 D1:DAD3 CD 66 AC D1 	call InsertHL															; ld hl/de, (ix+*)
 1481 D1:DAD7 18 A6 -  -  	jr --_
 1482 D1:DAD9 -  -  -  -  NEQChainAnsChainPush:
 1483 D1:DAD9 C3 3F AF D1 	jp UnknownError
 1484 D1:DADD -  -  -  -  NEQChainAnsChainAns:
 1485 D1:DADD C3 3F AF D1 	jp UnknownError
 1486 D1:DAE1 -  -  -  -  NEQChainAnsFunction:
 1487 D1:DAE1 3A E9 EB D1 	ld a, (ExprOutput)
 1488 D1:DAE5 87 -  -  -  	add a, a
 1489 D1:DAE6 87 -  -  -  	add a, a
 1490 D1:DAE7 87 -  -  -  	add a, a
 1491 D1:DAE8 87 -  -  -  	add a, a
 1492 D1:DAE9 C6 D5 -  -  	add a, 0D5h
 1493 D1:DAEB CD AE AC D1 	call InsertA															; push hl/de
 1494 D1:DAEF 7B -  -  -  	ld a, e
 1495 D1:DAF0 06 02 -  -  	ld b, OutputInHL
 1496 D1:DAF2 CD FF AC D1 	call GetFunction
 1497 D1:DAF6 3E D1 -  -  	ld a, 0D1h
 1498 D1:DAF8 CD AE AC D1 	call InsertA															; pop de
 1499 D1:DAFC C3 15 DA D1 _:	jp NEQInsert
 1500 D1:DB00 -  -  -  -  NEQFunctionXXX:
 1501 D1:DB00 DD 7E FC -  	ld a, (ix-4)
 1502 D1:DB03 B7 -  -  -  	or a
 1503 D1:DB04 28 10 -  -  	jr z, NEQFunctionNumber
 1504 D1:DB06 3D -  -  -  	dec a
 1505 D1:DB07 28 18 -  -  	jr z, NEQFunctionVariable
 1506 D1:DB09 3D -  -  -  	dec a
 1507 D1:DB0A 28 1C -  -  	jr z, NEQFunctionChainPush
 1508 D1:DB0C 3D -  -  -  	dec a
 1509 D1:DB0D 28 1D -  -  	jr z, NEQFunctionChainAns
 1510 D1:DB0F 3D -  -  -  	dec a
 1511 D1:DB10 28 1D -  -  	jr z, NEQFunctionFunction
 1512 D1:DB12 C3 C3 AE D1 	jp NEQError
 1513 D1:DB16 -  -  -  -  NEQFunctionNumber:
 1514 D1:DB16 79 -  -  -  	ld a, c
 1515 D1:DB17 06 02 -  -  	ld b, OutputInHL
 1516 D1:DB19 CD FF AC D1 	call GetFunction
 1517 D1:DB1D C3 99 DA D1 	jp NEQChainAnsNumber
 1518 D1:DB21 -  -  -  -  NEQFunctionVariable:
 1519 D1:DB21 79 -  -  -  	ld a, c
 1520 D1:DB22 4B -  -  -  	ld c, e
 1521 D1:DB23 5F -  -  -  	ld e, a
 1522 D1:DB24 C3 0A DA D1 	jp NEQVariableFunction
 1523 D1:DB28 -  -  -  -  NEQFunctionChainPush:
 1524 D1:DB28 C3 3F AF D1 	jp UnknownError
 1525 D1:DB2C -  -  -  -  NEQFunctionChainAns:
 1526 D1:DB2C 59 -  -  -  	ld e, c
 1527 D1:DB2D 18 B2 -  -  	jr NEQChainAnsFunction
 1528 D1:DB2F -  -  -  -  NEQFunctionFunction:
 1529 D1:DB2F 7B -  -  -  	ld a, e
 1530 D1:DB30 06 01 -  -  	ld b, OutputInDE
 1531 D1:DB32 CD FF AC D1 	call GetFunction
 1532 D1:DB36 79 -  -  -  	ld a, c
 1533 D1:DB37 06 02 -  -  	ld b, OutputInHL
 1534 D1:DB39 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1535 D1:DB3D CD FF AC D1 	call GetFunction
 1536 D1:DB41 18 B9 -  -  	jr -_
 1537 D1:DB43 -  -  -  -  
 1538 D1:DB43 -  -  -  -  XORANDNumberXXX:
 1539 D1:DB43 DD 7E FC -  	ld a, (ix-4)
 1540 D1:DB46 B7 -  -  -  	or a
 1541 D1:DB47 28 10 -  -  	jr z, XORANDNumberNumber
 1542 D1:DB49 3D -  -  -  	dec a
 1543 D1:DB4A 28 59 -  -  	jr z, XORANDNumberVariable
 1544 D1:DB4C 3D -  -  -  	dec a
 1545 D1:DB4D 28 5D -  -  	jr z, XORANDNumberChainPush
 1546 D1:DB4F 3D -  -  -  	dec a
 1547 D1:DB50 28 5E -  -  	jr z, XORANDNumberChainAns
 1548 D1:DB52 3D -  -  -  	dec a
 1549 D1:DB53 28 61 -  -  	jr z, XORANDNumberFunction
 1550 D1:DB55 C3 D1 AE D1 	jp XORANDError
 1551 D1:DB59 -  -  -  -  XORANDNumberNumber:
 1552 D1:DB59 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1553 D1:DB5D B7 -  -  -  	or a
 1554 D1:DB5E ED 62 -  -  	sbc hl, hl
 1555 D1:DB60 3A 1F EA D0 	ld a, (tempToken)
 1556 D1:DB64 FE 3D -  -  	cp tXor
 1557 D1:DB66 28 22 -  -  	jr z, ++_
 1558 D1:DB68 FE 3C -  -  	cp tOr
 1559 D1:DB6A 28 0F -  -  	jr z, +_
 1560 D1:DB6C CD 48 1D 02 	call _ChkBCIs0
 1561 D1:DB70 28 2F -  -  	jr z, +++_
 1562 D1:DB72 CD 4C 1D 02 	call _ChkDEIs0
 1563 D1:DB76 28 29 -  -  	jr z, +++_
 1564 D1:DB78 23 -  -  -  	inc hl
 1565 D1:DB79 18 26 -  -  	jr +++_
 1566 D1:DB7B CD 48 1D 02 _:	call _ChkBCIs0
 1567 D1:DB7F 47 -  -  -  	ld b, a
 1568 D1:DB80 CD 4C 1D 02 	call _ChkDEIs0
 1569 D1:DB84 B0 -  -  -  	or a, b
 1570 D1:DB85 28 1A -  -  	jr z, ++_
 1571 D1:DB87 23 -  -  -  	inc hl
 1572 D1:DB88 18 17 -  -  	jr ++_
 1573 D1:DB8A CD 4C 1D 02 _:	call _ChkDEIs0
 1574 D1:DB8E 11 00 00 00 	ld de, 0
 1575 D1:DB92 28 01 -  -  	jr z, $+3
 1576 D1:DB94 13 -  -  -  	inc de
 1577 D1:DB95 CD 48 1D 02 	call _ChkBCIs0
 1578 D1:DB99 3E 00 -  -  	ld a, 0
 1579 D1:DB9B 28 01 -  -  	jr z, $+3
 1580 D1:DB9D 3C -  -  -  	inc a
 1581 D1:DB9E AB -  -  -  	xor e
 1582 D1:DB9F 5F -  -  -  	ld e, a
 1583 D1:DBA0 EB -  -  -  	ex de, hl
 1584 D1:DBA1 DD 2F F9 -  _:	ld (ix-7), hl
 1585 D1:DBA4 C9 -  -  -  	ret
 1586 D1:DBA5 -  -  -  -  XORANDNumberVariable:
 1587 D1:DBA5 C5 -  -  -  	push bc
 1588 D1:DBA6 E1 -  -  -  	pop hl
 1589 D1:DBA7 EB -  -  -  	ex de, hl
 1590 D1:DBA8 E5 -  -  -  	push hl
 1591 D1:DBA9 C1 -  -  -  	pop bc
 1592 D1:DBAA 18 2B -  -  	jr XORANDVariableNumber
 1593 D1:DBAC -  -  -  -  XORANDNumberChainPush:
 1594 D1:DBAC C3 3F AF D1 	jp UnknownError
 1595 D1:DBB0 -  -  -  -  XORANDNumberChainAns:
 1596 D1:DBB0 C5 -  -  -  	push bc
 1597 D1:DBB1 D1 -  -  -  	pop de
 1598 D1:DBB2 C3 9F DC D1 	jp XORANDChainAnsNumber
 1599 D1:DBB6 -  -  -  -  XORANDNumberFunction:
 1600 D1:DBB6 C5 -  -  -  	push bc
 1601 D1:DBB7 E1 -  -  -  	pop hl
 1602 D1:DBB8 EB -  -  -  	ex de, hl
 1603 D1:DBB9 E5 -  -  -  	push hl
 1604 D1:DBBA C1 -  -  -  	pop bc
 1605 D1:DBBB C3 08 DD D1 	jp XORANDFunctionNumber
 1606 D1:DBBF -  -  -  -  XORANDVariableXXX:
 1607 D1:DBBF DD 7E FC -  	ld a, (ix-4)
 1608 D1:DBC2 B7 -  -  -  	or a
 1609 D1:DBC3 28 12 -  -  	jr z, XORANDVariableNumber
 1610 D1:DBC5 3D -  -  -  	dec a
 1611 D1:DBC6 28 17 -  -  	jr z, XORANDVariableVariable
 1612 D1:DBC8 3D -  -  -  	dec a
 1613 D1:DBC9 28 39 -  -  	jr z, XORANDVariableChainPush
 1614 D1:DBCB 3D -  -  -  	dec a
 1615 D1:DBCC 28 3A -  -  	jr z, XORANDVariableChainAns
 1616 D1:DBCE 3D -  -  -  	dec a
 1617 D1:DBCF CA 0D DC D1 	jp z, XORANDVariableFunction
 1618 D1:DBD3 C3 D1 AE D1 	jp XORANDError
 1619 D1:DBD7 -  -  -  -  XORANDVariableNumber:
 1620 D1:DBD7 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1621 D1:DBDB C3 9F DC D1 	jp XORANDChainAnsNumber
 1622 D1:DBDF -  -  -  -  XORANDVariableVariable:
 1623 D1:DBDF 79 -  -  -  	ld a, c
 1624 D1:DBE0 BB -  -  -  	cp e
 1625 D1:DBE1 20 19 -  -  	jr nz, ++_
 1626 D1:DBE3 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1627 D1:DBE7 3A 1F EA D0 	ld a, (tempToken)
 1628 D1:DBEB D6 6F -  -  	sub tNE
 1629 D1:DBED 28 02 -  -  	jr z, +_
 1630 D1:DBEF 3E 01 -  -  	ld a, 1
 1631 D1:DBF1 11 00 00 00 _:	ld de, 0
 1632 D1:DBF5 5F -  -  -  	ld e, a
 1633 D1:DBF6 36 00 -  -  	ld (hl), typeNumber
 1634 D1:DBF8 23 -  -  -  	inc hl
 1635 D1:DBF9 ED 1F -  -  	ld (hl), de
 1636 D1:DBFB C9 -  -  -  	ret
 1637 D1:DBFC CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1638 D1:DC00 C3 B1 DC D1 	jp XORANDChainAnsVariable
 1639 D1:DC04 -  -  -  -  XORANDVariableChainPush:
 1640 D1:DC04 C3 3F AF D1 	jp UnknownError
 1641 D1:DC08 -  -  -  -  XORANDVariableChainAns:
 1642 D1:DC08 59 -  -  -  	ld e, c
 1643 D1:DC09 C3 B1 DC D1 	jp XORANDChainAnsVariable
 1644 D1:DC0D -  -  -  -  XORANDVariableFunction:
 1645 D1:DC0D 7B -  -  -  	ld a, e
 1646 D1:DC0E 06 01 -  -  	ld b, OutputInDE
 1647 D1:DC10 CD FF AC D1 	call GetFunction
 1648 D1:DC14 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1649 D1:DC18 -  -  -  -  XORANDInsert:
 1650 D1:DC18 ED 5B C9 EB 
              D1 -  -  -  	ld de, (programPtr)
 1651 D1:DC1D 21 54 F0 D1 	ld hl, XORANDData
 1652 D1:DC21 06 A2 -  -  	ld b, 0A2h
 1653 D1:DC23 3A 1F EA D0 	ld a, (tempToken)
 1654 D1:DC27 FE 3D -  -  	cp tXor
 1655 D1:DC29 20 02 -  -  	jr nz, +_
 1656 D1:DC2B 06 AA -  -  	ld b, 0AAh
 1657 D1:DC2D FE 3C -  -  _:	cp tOr
 1658 D1:DC2F 20 02 -  -  	jr nz, +_
 1659 D1:DC31 06 B2 -  -  	ld b, 0B2h
 1660 D1:DC33 78 -  -  -  _:	ld a, b
 1661 D1:DC34 32 5E F0 D1 	ld (XORANDSMC), a
 1662 D1:DC38 01 10 00 00 	ld bc, 16
 1663 D1:DC3C ED B0 -  -  	ldir
 1664 D1:DC3E ED 53 C9 EB 
              D1 -  -  -  	ld (programPtr), de
 1665 D1:DC43 C9 -  -  -  	ret
 1666 D1:DC44 -  -  -  -  XORANDChainPushXXX:
 1667 D1:DC44 DD 7E FC -  	ld a, (ix-4)
 1668 D1:DC47 B7 -  -  -  	or a
 1669 D1:DC48 28 12 -  -  	jr z, XORANDChainPushNumber
 1670 D1:DC4A 3D -  -  -  	dec a
 1671 D1:DC4B 28 17 -  -  	jr z, XORANDChainPushVariable
 1672 D1:DC4D 3D -  -  -  	dec a
 1673 D1:DC4E 28 1C -  -  	jr z, XORANDChainPushChainPush
 1674 D1:DC50 3D -  -  -  	dec a
 1675 D1:DC51 28 1D -  -  	jr z, XORANDChainPushChainAns
 1676 D1:DC53 3D -  -  -  	dec a
 1677 D1:DC54 CA 78 DC D1 	jp z, XORANDChainPushFunction
 1678 D1:DC58 C3 D1 AE D1 	jp XORANDError
 1679 D1:DC5C -  -  -  -  XORANDChainPushNumber:
 1680 D1:DC5C 3E E1 -  -  	ld a, 0E1h
 1681 D1:DC5E CD AE AC D1 	call InsertA															; pop hl
 1682 D1:DC62 18 3B -  -  	jr XORANDChainAnsNumber
 1683 D1:DC64 -  -  -  -  XORANDChainPushVariable:
 1684 D1:DC64 3E E1 -  -  	ld a, 0E1h
 1685 D1:DC66 CD AE AC D1 	call InsertA															; pop hl
 1686 D1:DC6A 18 45 -  -  	jr XORANDChainAnsVariable
 1687 D1:DC6C -  -  -  -  XORANDChainPushChainPush:
 1688 D1:DC6C C3 3F AF D1 	jp UnknownError
 1689 D1:DC70 -  -  -  -  XORANDChainPushChainAns:
 1690 D1:DC70 3E D1 -  -  	ld a, 0D1h
 1691 D1:DC72 CD AE AC D1 	call InsertA															; pop de
 1692 D1:DC76 18 A0 -  -  	jr XORANDInsert
 1693 D1:DC78 -  -  -  -  XORANDChainPushFunction:
 1694 D1:DC78 7B -  -  -  	ld a, e
 1695 D1:DC79 06 02 -  -  	ld b, OutputInHL
 1696 D1:DC7B CD FF AC D1 	call GetFunction
 1697 D1:DC7F 3E D1 -  -  	ld a, 0D1h
 1698 D1:DC81 CD AE AC D1 	call InsertA															; pop de
 1699 D1:DC85 18 91 -  -  _:	jr XORANDInsert
 1700 D1:DC87 -  -  -  -  XORANDChainAnsXXX:
 1701 D1:DC87 DD 7E FC -  	ld a, (ix-4)
 1702 D1:DC8A B7 -  -  -  	or a
 1703 D1:DC8B 28 12 -  -  	jr z, XORANDChainAnsNumber
 1704 D1:DC8D 3D -  -  -  	dec a
 1705 D1:DC8E 28 21 -  -  	jr z, XORANDChainAnsVariable
 1706 D1:DC90 3D -  -  -  	dec a
 1707 D1:DC91 28 3A -  -  	jr z, XORANDChainAnsChainPush
 1708 D1:DC93 3D -  -  -  	dec a
 1709 D1:DC94 28 3B -  -  	jr z, XORANDChainAnsChainAns
 1710 D1:DC96 3D -  -  -  	dec a
 1711 D1:DC97 CA D5 DC D1 	jp z, XORANDChainAnsFunction
 1712 D1:DC9B C3 D1 AE D1 	jp XORANDError
 1713 D1:DC9F -  -  -  -  XORANDChainAnsNumber:
 1714 D1:DC9F 3A E9 EB D1 	ld a, (ExprOutput)
 1715 D1:DCA3 B7 -  -  -  	or a
 1716 D1:DCA4 3E 11 -  -  	ld a, 011h
 1717 D1:DCA6 20 02 -  -  	jr nz, +_
 1718 D1:DCA8 3E 21 -  -  	ld a, 021h
 1719 D1:DCAA EB -  -  -  _:	ex de, hl
 1720 D1:DCAB CD 62 AC D1 	call InsertAHL															; ld hl/de, *
 1721 D1:DCAF 18 D4 -  -  	jr --_
 1722 D1:DCB1 -  -  -  -  XORANDChainAnsVariable:
 1723 D1:DCB1 26 17 -  -  	ld h, 017h
 1724 D1:DCB3 16 03 -  -  	ld d, 3
 1725 D1:DCB5 ED 5C -  -  	mlt de
 1726 D1:DCB7 7B -  -  -  	ld a, e
 1727 D1:DCB8 2E DD -  -  	ld l, 0DDh
 1728 D1:DCBA CD 70 1D 02 	call _SetHLUToA
 1729 D1:DCBE 3A E9 EB D1 	ld a, (ExprOutput)
 1730 D1:DCC2 B7 -  -  -  	or a
 1731 D1:DCC3 20 02 -  -  	jr nz, $+4
 1732 D1:DCC5 26 27 -  -  	ld h, 027h
 1733 D1:DCC7 CD 66 AC D1 	call InsertHL															; ld hl/de, (ix+*)
 1734 D1:DCCB 18 B8 -  -  	jr --_
 1735 D1:DCCD -  -  -  -  XORANDChainAnsChainPush:
 1736 D1:DCCD C3 3F AF D1 	jp UnknownError
 1737 D1:DCD1 -  -  -  -  XORANDChainAnsChainAns:
 1738 D1:DCD1 C3 3F AF D1 	jp UnknownError
 1739 D1:DCD5 -  -  -  -  XORANDChainAnsFunction:
 1740 D1:DCD5 3A E9 EB D1 	ld a, (ExprOutput)
 1741 D1:DCD9 87 -  -  -  	add a, a
 1742 D1:DCDA 87 -  -  -  	add a, a
 1743 D1:DCDB 87 -  -  -  	add a, a
 1744 D1:DCDC 87 -  -  -  	add a, a
 1745 D1:DCDD C6 D5 -  -  	add a, 0D5h
 1746 D1:DCDF CD AE AC D1 	call InsertA															; push hl/de
 1747 D1:DCE3 7B -  -  -  	ld a, e
 1748 D1:DCE4 06 02 -  -  	ld b, OutputInHL
 1749 D1:DCE6 CD FF AC D1 	call GetFunction
 1750 D1:DCEA 3E D1 -  -  	ld a, 0D1h
 1751 D1:DCEC CD AE AC D1 	call InsertA															; pop de
 1752 D1:DCF0 18 93 -  -  _:	jr ---_
 1753 D1:DCF2 -  -  -  -  XORANDFunctionXXX:
 1754 D1:DCF2 DD 7E FC -  	ld a, (ix-4)
 1755 D1:DCF5 B7 -  -  -  	or a
 1756 D1:DCF6 28 10 -  -  	jr z, XORANDFunctionNumber
 1757 D1:DCF8 3D -  -  -  	dec a
 1758 D1:DCF9 28 18 -  -  	jr z, XORANDFunctionVariable
 1759 D1:DCFB 3D -  -  -  	dec a
 1760 D1:DCFC 28 1C -  -  	jr z, XORANDFunctionChainPush
 1761 D1:DCFE 3D -  -  -  	dec a
 1762 D1:DCFF 28 1D -  -  	jr z, XORANDFunctionChainAns
 1763 D1:DD01 3D -  -  -  	dec a
 1764 D1:DD02 28 1D -  -  	jr z, XORANDFunctionFunction
 1765 D1:DD04 C3 D1 AE D1 	jp XORANDError
 1766 D1:DD08 -  -  -  -  XORANDFunctionNumber:
 1767 D1:DD08 79 -  -  -  	ld a, c
 1768 D1:DD09 06 02 -  -  	ld b, OutputInHL
 1769 D1:DD0B CD FF AC D1 	call GetFunction
 1770 D1:DD0F C3 9F DC D1 	jp XORANDChainAnsNumber
 1771 D1:DD13 -  -  -  -  XORANDFunctionVariable:
 1772 D1:DD13 79 -  -  -  	ld a, c
 1773 D1:DD14 4B -  -  -  	ld c, e
 1774 D1:DD15 5F -  -  -  	ld e, a
 1775 D1:DD16 C3 0D DC D1 	jp XORANDVariableFunction
 1776 D1:DD1A -  -  -  -  XORANDFunctionChainPush:
 1777 D1:DD1A C3 3F AF D1 	jp UnknownError
 1778 D1:DD1E -  -  -  -  XORANDFunctionChainAns:
 1779 D1:DD1E 59 -  -  -  	ld e, c
 1780 D1:DD1F 18 B4 -  -  	jr XORANDChainAnsFunction
 1781 D1:DD21 -  -  -  -  XORANDFunctionFunction:
 1782 D1:DD21 7B -  -  -  	ld a, e
 1783 D1:DD22 06 01 -  -  	ld b, OutputInDE
 1784 D1:DD24 CD FF AC D1 	call GetFunction
 1785 D1:DD28 79 -  -  -  	ld a, c
 1786 D1:DD29 06 02 -  -  	ld b, OutputInHL
 1787 D1:DD2B FD CB C0 F6 	set need_push, (iy+fExpression1)
 1788 D1:DD2F CD FF AC D1 	call GetFunction
 1789 D1:DD33 18 BB -  -  	jr -_
 1790 D1:DD35 -  -  -  -  	
 1791 D1:DD35 -  -  -  -  StoNumberXXX:
 1792 D1:DD35 DD 7E FC -  	ld a, (ix-4)
 1793 D1:DD38 FE 03 -  -  	cp typeChainAns
 1794 D1:DD3A 28 0A -  -  	jr z, +_
 1795 D1:DD3C FE 01 -  -  	cp typeVariable
 1796 D1:DD3E CA 69 DD D1 	jp z, ++_
 1797 D1:DD42 C3 3F AF D1 	jp UnknownError
 1798 D1:DD46 CD BC DE D1 _:	call StoTestStoToListElement
 1799 D1:DD4A C2 3F AF D1 	jp nz, UnknownError
 1800 D1:DD4E 3E 11 -  -  	ld a, 011h
 1801 D1:DD50 C5 -  -  -  	push bc
 1802 D1:DD51 E1 -  -  -  	pop hl
 1803 D1:DD52 CD 62 AC D1 	call InsertAHL															; ld de, *
 1804 D1:DD56 3E ED -  -  	ld a, 0EDh
 1805 D1:DD58 CD AE AC D1 	call InsertA															; ld (hl), de (1)
 1806 D1:DD5C 3E 1F -  -  	ld a, 01Fh
 1807 D1:DD5E CD AE AC D1 	call InsertA															; ld (hl), de (2)
 1808 D1:DD62 3E 00 -  -  	ld a, OutputIsInDE
 1809 D1:DD64 32 EA EB D1 	ld (ExprOutput2), a
 1810 D1:DD68 C9 -  -  -  	ret
 1811 D1:DD69 21 DD 2F 00 _:	ld hl, 0002FDDh
 1812 D1:DD6D 16 03 -  -  	ld d, 3
 1813 D1:DD6F ED 5C -  -  	mlt de
 1814 D1:DD71 7B -  -  -  	ld a, e
 1815 D1:DD72 CD 70 1D 02 	call _SetHLUToA
 1816 D1:DD76 C5 -  -  -  	push bc
 1817 D1:DD77 D1 -  -  -  	pop de
 1818 D1:DD78 CD 48 1D 02 	call _ChkBCIs0
 1819 D1:DD7C 3E 21 -  -  	ld a, 021h
 1820 D1:DD7E 20 08 -  -  	jr nz, +_
 1821 D1:DD80 11 B7 ED 62 	ld de, 062EDB7h
 1822 D1:DD84 C3 A5 AC D1 	jp InsertDEHL															; or a \ sbc hl, hl \ ld (ix+*), hl
 1823 D1:DD88 C3 A1 AC D1 _:	jp InsertADEHL															; ld hl, * \ ld (ix+*), hl
 1824 D1:DD8C -  -  -  -  StoVariableXXX:
 1825 D1:DD8C DD 7E FC -  	ld a, (ix-4)
 1826 D1:DD8F FE 03 -  -  	cp typeChainAns
 1827 D1:DD91 28 0A -  -  	jr z, +_
 1828 D1:DD93 FE 01 -  -  	cp typeVariable
 1829 D1:DD95 CA BD DD D1 	jp z, ++_
 1830 D1:DD99 C3 3F AF D1 	jp UnknownError
 1831 D1:DD9D CD BC DE D1 _:	call StoTestStoToListElement
 1832 D1:DDA1 C2 3F AF D1 	jp nz, UnknownError
 1833 D1:DDA5 59 -  -  -  	ld e, c
 1834 D1:DDA6 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
 1835 D1:DDAA 3E ED -  -  	ld a, 0EDh
 1836 D1:DDAC CD AE AC D1 	call InsertA															; ld (hl), de (1)
 1837 D1:DDB0 3E 1F -  -  	ld a, 01Fh
 1838 D1:DDB2 CD AE AC D1 	call InsertA															; ld (hl), de (2)
 1839 D1:DDB6 3E 00 -  -  	ld a, OutputIsInDE
 1840 D1:DDB8 32 EA EB D1 	ld (ExprOutput2), a
 1841 D1:DDBC C9 -  -  -  	ret
 1842 D1:DDBD CD 7B AC D1 _:	call InsertHIXC
 1843 D1:DDC1 21 DD 2F 00 	ld hl, 0002FDDh
 1844 D1:DDC5 16 03 -  -  	ld d, 3
 1845 D1:DDC7 ED 5C -  -  	mlt de
 1846 D1:DDC9 7B -  -  -  	ld a, e
 1847 D1:DDCA CD 70 1D 02 	call _SetHLUToA
 1848 D1:DDCE C3 66 AC D1 	jp InsertHL																; ld ld (ix+*), hl
 1849 D1:DDD2 -  -  -  -  StoChainPushXXX:
 1850 D1:DDD2 DD 7E FC -  	ld a, (ix-4)
 1851 D1:DDD5 FE 03 -  -  	cp typeChainAns
 1852 D1:DDD7 C2 3F AF D1 _:	jp nz, UnknownError
 1853 D1:DDDB CD BC DE D1 	call StoTestStoToListElement
 1854 D1:DDDF 20 F6 -  -  	jr nz, -_
 1855 D1:DDE1 21 D1 ED 1F 	ld hl, 01FEDD1h
 1856 D1:DDE5 CD 66 AC D1 	call InsertHL															; pop de \ ld (hl), de
 1857 D1:DDE9 3E 00 -  -  	ld a, OutputIsInDE
 1858 D1:DDEB 32 EA EB D1 	ld (ExprOutput2), a
 1859 D1:DDEF C9 -  -  -  	ret
 1860 D1:DDF0 -  -  -  -  StoChainAnsXXX:
 1861 D1:DDF0 DD 7E FC -  	ld a, (ix-4)
 1862 D1:DDF3 FE 01 -  -  	cp typeVariable
 1863 D1:DDF5 C2 E7 AE D1 	jp nz, StoError
 1864 D1:DDF9 21 DD 2F 00 _:	ld hl, 0002FDDh
 1865 D1:DDFD 16 03 -  -  	ld d, 3
 1866 D1:DDFF ED 5C -  -  	mlt de
 1867 D1:DE01 7B -  -  -  	ld a, e
 1868 D1:DE02 CD 70 1D 02 	call _SetHLUToA
 1869 D1:DE06 3A E9 EB D1 	ld a, (ExprOutput)
 1870 D1:DE0A B7 -  -  -  	or a
 1871 D1:DE0B 20 02 -  -  	jr nz, $+4
 1872 D1:DE0D 26 1F -  -  	ld h, 01Fh
 1873 D1:DE0F 32 EA EB D1 	ld (ExprOutput2), a
 1874 D1:DE13 C3 66 AC D1 	jp InsertHL																; ld (ix+*), hl/de
 1875 D1:DE17 -  -  -  -  StoFunctionXXX:
 1876 D1:DE17 DD 7E FC -  	ld a, (ix-4)
 1877 D1:DE1A FE 03 -  -  	cp typeChainAns
 1878 D1:DE1C 28 0A -  -  	jr z, +_
 1879 D1:DE1E FE 01 -  -  	cp typeVariable
 1880 D1:DE20 CA 4E DE D1 	jp z, ++_
 1881 D1:DE24 C3 3F AF D1 	jp UnknownError
 1882 D1:DE28 CD BC DE D1 _:	call StoTestStoToListElement
 1883 D1:DE2C C2 3F AF D1 	jp nz, UnknownError
 1884 D1:DE30 79 -  -  -  	ld a, c
 1885 D1:DE31 06 01 -  -  	ld b, OutputInDE
 1886 D1:DE33 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1887 D1:DE37 CD FF AC D1 	call GetFunction
 1888 D1:DE3B 3E ED -  -  	ld a, 0EDh
 1889 D1:DE3D CD AE AC D1 	call InsertA															; ld (hl), de (1)
 1890 D1:DE41 3E 1F -  -  	ld a, 01Fh
 1891 D1:DE43 CD AE AC D1 	call InsertA															; ld (hl), de (2)
 1892 D1:DE47 3E 00 -  -  	ld a, OutputIsInDE
 1893 D1:DE49 32 EA EB D1 	ld (ExprOutput2), a
 1894 D1:DE4D C9 -  -  -  	ret
 1895 D1:DE4E 79 -  -  -  _:	ld a, c
 1896 D1:DE4F 06 02 -  -  	ld b, OutputInHL
 1897 D1:DE51 CD FF AC D1 	call GetFunction
 1898 D1:DE55 21 DD 2F 00 	ld hl, 0002FDDh
 1899 D1:DE59 16 03 -  -  	ld d, 3
 1900 D1:DE5B ED 5C -  -  	mlt de
 1901 D1:DE5D 7B -  -  -  	ld a, e
 1902 D1:DE5E CD 70 1D 02 	call _SetHLUToA
 1903 D1:DE62 C3 66 AC D1 	jp InsertHL																; ld (ix+*), hl
 1904 D1:DE66 -  -  -  -  StoListXXX:
 1905 D1:DE66 DD 7E FC -  	ld a, (ix-4)
 1906 D1:DE69 FE 06 -  -  	cp typeOSList
 1907 D1:DE6B C2 E7 AE D1 	jp nz, StoError
 1908 D1:DE6F 3E 21 -  -  	ld a, 021h
 1909 D1:DE71 CD AE AC D1 	call InsertA															; ld hl, *
 1910 D1:DE75 CD EA AC D1 	call InsertProgramPtrToDataOffset
 1911 D1:DE79 2A DE EB D1 	ld hl, (programDataDataPtr)
 1912 D1:DE7D CD 66 AC D1 	call InsertHL															; ld hl, RANDOM
 1913 D1:DE81 3E 11 -  -  	ld a, 011h
 1914 D1:DE83 D5 -  -  -  	push de
 1915 D1:DE84 E1 -  -  -  	pop hl
 1916 D1:DE85 CD 62 AC D1 	call InsertAHL															; ld de, OSList
 1917 D1:DE89 3E 01 -  -  	ld a, 01h
 1918 D1:DE8B CD AE AC D1 	call InsertA															; ld bc, *
 1919 D1:DE8F C5 -  -  -  	push bc
 1920 D1:DE90 E1 -  -  -  	pop hl
 1921 D1:DE91 22 A3 DE D1 	ld (StartData), hl
 1922 D1:DE95 ED 27 -  -  	ld hl, (hl)
 1923 D1:DE97 E5 -  -  -  	push hl
 1924 D1:DE98 C1 -  -  -  	pop bc
 1925 D1:DE99 CD 66 AC D1 	call InsertHL															; ld bc, LENGTH
 1926 D1:DE9D ED 5B DE EB 
              D1 -  -  -  	ld de, (programDataDataPtr)
 1927 D1:DEA2 -  -  -  -  StartData = $+1
 1928 D1:DEA2 21 00 00 00 	ld hl, 0
 1929 D1:DEA6 23 -  -  -  	inc hl
 1930 D1:DEA7 23 -  -  -  	inc hl
 1931 D1:DEA8 23 -  -  -  	inc hl
 1932 D1:DEA9 ED B0 -  -  	ldir
 1933 D1:DEAB ED 53 DE EB 
              D1 -  -  -  	ld (programDataDataPtr), de
 1934 D1:DEB0 3E ED -  -  	ld a, 0EDh
 1935 D1:DEB2 CD AE AC D1 	call InsertA															; ldir (1)
 1936 D1:DEB6 3E B0 -  -  	ld a, 0B0h
 1937 D1:DEB8 C3 AE AC D1 	jp InsertA																; ldir (2)
 1938 D1:DEBC -  -  -  -  	
 1939 D1:DEBC -  -  -  -  StoTestStoToListElement:
 1940 D1:DEBC 2A C9 EB D1 	ld hl, (programPtr)
 1941 D1:DEC0 2B -  -  -  	dec hl
 1942 D1:DEC1 7E -  -  -  	ld a, (hl)
 1943 D1:DEC2 FE 27 -  -  	cp 027h
 1944 D1:DEC4 20 0B -  -  	jr nz, StoLastOpcodeNotHLHL
 1945 D1:DEC6 2B -  -  -  	dec hl
 1946 D1:DEC7 7E -  -  -  	ld a, (hl)
 1947 D1:DEC8 FE ED -  -  	cp 0EDh
 1948 D1:DECA 20 05 -  -  	jr nz, StoLastOpcodeNotHLHL
 1949 D1:DECC 22 C9 EB D1 	ld (programPtr), hl
 1950 D1:DED0 C9 -  -  -  	ret
 1951 D1:DED1 -  -  -  -  StoLastOpcodeNotHLHL:
 1952 D1:DED1 2A C9 EB D1 	ld hl, (programPtr)
 1953 D1:DED5 2B -  -  -  	dec hl
 1954 D1:DED6 2B -  -  -  	dec hl
 1955 D1:DED7 2B -  -  -  	dec hl
 1956 D1:DED8 2B -  -  -  	dec hl
 1957 D1:DED9 7E -  -  -  	ld a, (hl)
 1958 D1:DEDA FE 2A -  -  	cp 02Ah
 1959 D1:DEDC C0 -  -  -  	ret nz
 1960 D1:DEDD 36 21 -  -  	ld (hl), 021h
 1961 D1:DEDF C9 -  -  -  	ret
Listing for file "ICE.asm"
  462 D1:DEE0 -  -  -  -  #include "operators functions/function_for.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operators functions\function_for.asm"
    1 D1:DEE0 -  -  -  -  functionFor:
    2 D1:DEE0 21 E6 EB D1 	ld hl, amountOfEnds
    3 D1:DEE4 34 -  -  -  	inc (hl)
    4 D1:DEE5 3E 01 -  -  	ld a, 1
    5 D1:DEE7 32 E3 EB D1 	ld (openedParensF), a
    6 D1:DEEB FD 36 AF 00 	ld (iy+fFunction2), 0
    7 D1:DEEF CD 28 10 02 	call _IncFetch
    8 D1:DEF3 D6 41 -  -  	sub tA
    9 D1:DEF5 DA 65 E1 D1 	jp c, functionForSmall
   10 D1:DEF9 FE 1B -  -  	cp ttheta+1-tA
   11 D1:DEFB D2 65 E1 D1 	jp nc, functionForSmall
   12 D1:DEFF -  -  -  -  	; loop variable
   13 D1:DEFF 47 -  -  -  	ld b, a
   14 D1:DF00 87 -  -  -  	add a, a
   15 D1:DF01 80 -  -  -  	add a, b
   16 D1:DF02 32 3A DF D1 	ld (ForVariable1), a
   17 D1:DF06 6F -  -  -  	ld l, a
   18 D1:DF07 E5 -  -  -  	push hl
   19 D1:DF08 CD 28 10 02 		call _IncFetch
   20 D1:DF0C DA 05 AF D1 _:		jp c, ErrorSyntax
   21 D1:DF10 FE 2B -  -  		cp tComma
   22 D1:DF12 C2 05 AF D1 		jp nz, ErrorSyntax
   23 D1:DF16 CD 28 10 02 		call _IncFetch
   24 D1:DF1A -  -  -  -  		; loop start point
   25 D1:DF1A 2A C9 EB D1 		ld hl, (programPtr)
   26 D1:DF1E E5 -  -  -  		push hl
   27 D1:DF1F 21 C6 52 D0 			ld hl, tempArg1
   28 D1:DF23 22 C9 EB D1 			ld (programPtr), hl
   29 D1:DF27 CD 0F B2 D1 			call ParseExpression
   30 D1:DF2B FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
   31 D1:DF2F FD CB BF 8E 			res triggered_a_comma, (iy+fExpression2)
   32 D1:DF33 CA 05 AF D1 			jp z, ErrorSyntax
   33 D1:DF37 -  -  -  -  ForVariable1 = $+3
   34 D1:DF37 21 DD 2F 00 			ld hl, 0002FDDh
   35 D1:DF3B CD 66 AC D1 			call InsertHL										; ld (ix+*), hl
   36 D1:DF3F CD 28 10 02 			call _IncFetch
   37 D1:DF43 38 C7 -  -  			jr c, -_
   38 D1:DF45 2A C9 EB D1 			ld hl, (programPtr)
   39 D1:DF49 11 C6 52 D0 			ld de, tempArg1
   40 D1:DF4D B7 -  -  -  			or a
   41 D1:DF4E ED 52 -  -  			sbc hl, de
   42 D1:DF50 EB -  -  -  			ex de, hl
   43 D1:DF51 E1 -  -  -  		pop hl
   44 D1:DF52 22 C9 EB D1 		ld (programPtr), hl
   45 D1:DF56 D5 -  -  -  		push de
   46 D1:DF57 -  -  -  -  			; loop end point
   47 D1:DF57 CD 0F B2 D1 			call ParseExpression
   48 D1:DF5B FD CB C0 66 			bit output_is_number, (iy+fExpression1)
   49 D1:DF5F 20 14 -  -  			jr nz, ForEndPointIsNumber
   50 D1:DF61 -  -  -  -  ForEndPointIsExpression:
   51 D1:DF61 3E 22 -  -  			ld a, 022h
   52 D1:DF63 CD AE AC D1 			call InsertA										; ld (******), hl
   53 D1:DF67 2A C9 EB D1 			ld hl, (programPtr)
   54 D1:DF6B 22 5D E0 D1 			ld (ForEndPointExpression), hl
   55 D1:DF6F CD 66 AC D1 			call InsertHL										; ld (RANDOM), hl
   56 D1:DF73 18 17 -  -  			jr ForGetStep
   57 D1:DF75 -  -  -  -  ForEndPointIsNumber:
   58 D1:DF75 FD CB AF D6 			set end_point_is_number, (iy+fFunction2)
   59 D1:DF79 2A C9 EB D1 			ld hl, (programPtr)
   60 D1:DF7D 2B -  -  -  			dec hl
   61 D1:DF7E 2B -  -  -  			dec hl
   62 D1:DF7F 2B -  -  -  			dec hl
   63 D1:DF80 ED 17 -  -  			ld de, (hl)
   64 D1:DF82 2B -  -  -  			dec hl
   65 D1:DF83 22 C9 EB D1 			ld (programPtr), hl
   66 D1:DF87 ED 53 6B E0 
              D1 -  -  -  			ld (ForFixedEndPoint), de
   67 D1:DF8C -  -  -  -  ForGetStep:
   68 D1:DF8C FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
   69 D1:DF90 FD CB BF 8E 			res triggered_a_comma, (iy+fExpression2)
   70 D1:DF94 20 0B -  -  			jr nz, +_
   71 D1:DF96 -  -  -  -  			; loop step
   72 D1:DF96 FD CB AF CE 			set for_step_is_number, (iy+fFunction2)
   73 D1:DF9A 21 01 00 00 			ld hl, 1
   74 D1:DF9E E5 -  -  -  			push hl
   75 D1:DF9F 18 76 -  -  				jr ForStart
   76 D1:DFA1 CD 28 10 02 _:			call _IncFetch
   77 D1:DFA5 DA 05 AF D1 			jp c, ErrorSyntax
   78 D1:DFA9 FE B0 -  -  			cp tChs
   79 D1:DFAB 20 0C -  -  			jr nz, +_
   80 D1:DFAD FD CB AF C6 			set negative_for_step, (iy+fFunction2)
   81 D1:DFB1 CD 28 10 02 			call _IncFetch
   82 D1:DFB5 DA 05 AF D1 			jp c, ErrorSyntax
   83 D1:DFB9 FE 41 -  -  _:			cp tA
   84 D1:DFBB 38 34 -  -  			jr c, ForGetStepNumber
   85 D1:DFBD FE 5C -  -  			cp ttheta+1
   86 D1:DFBF D2 F1 DF D1 			jp nc, ForGetStepNumber
   87 D1:DFC3 -  -  -  -  ForGetStepVariable:
   88 D1:DFC3 FD CB AF 8E 			res for_step_is_number, (iy+fFunction2)
   89 D1:DFC7 CD 2C 10 02 			call _CurFetch
   90 D1:DFCB D6 41 -  -  			sub tA
   91 D1:DFCD 4F -  -  -  			ld c, a
   92 D1:DFCE CD 7B AC D1 			call InsertHIXC										; ld hl, (ix+*)
   93 D1:DFD2 CD C0 0F 02 			call _NxtFetch
   94 D1:DFD6 DA 05 AF D1 			jp c, ErrorSyntax
   95 D1:DFDA FE 3F -  -  			cp tEnter
   96 D1:DFDC C2 05 AF D1 			jp nz, ErrorSyntax
   97 D1:DFE0 3E 22 -  -  			ld a, 022h
   98 D1:DFE2 CD AE AC D1 			call InsertA										; ld (*), hl
   99 D1:DFE6 2A C9 EB D1 			ld hl, (programPtr)
  100 D1:DFEA E5 -  -  -  			push hl
  101 D1:DFEB CD 66 AC D1 				call InsertHL									; ld (RANDOM), hl
  102 D1:DFEF 18 26 -  -  				jr ForStart
  103 D1:DFF1 -  -  -  -  ForGetStepNumber:
  104 D1:DFF1 FD CB AF CE 			set for_step_is_number, (iy+fFunction2)
  105 D1:DFF5 CD 0F B2 D1 			call ParseExpression
  106 D1:DFF9 FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
  107 D1:DFFD 20 BA -  -  			jr nz, -_
  108 D1:DFFF FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  109 D1:E003 CA 05 AF D1 			jp z, ErrorSyntax
  110 D1:E007 2A C9 EB D1 			ld hl, (programPtr)
  111 D1:E00B 2B -  -  -  			dec hl
  112 D1:E00C 2B -  -  -  			dec hl
  113 D1:E00D 2B -  -  -  			dec hl
  114 D1:E00E 2B -  -  -  			dec hl
  115 D1:E00F 22 C9 EB D1 			ld (programPtr), hl
  116 D1:E013 23 -  -  -  			inc hl
  117 D1:E014 ED 27 -  -  			ld hl, (hl)
  118 D1:E016 E5 -  -  -  			push hl
  119 D1:E017 -  -  -  -  ForStart:
  120 D1:E017 E1 -  -  -  			pop hl
  121 D1:E018 D1 -  -  -  		pop de
  122 D1:E019 E5 -  -  -  		push hl
  123 D1:E01A 2A C9 EB D1 			ld hl, (programPtr)
  124 D1:E01E 19 -  -  -  			add hl, de
  125 D1:E01F E5 -  -  -  			push hl
  126 D1:E020 D5 -  -  -  				push de
  127 D1:E021 C1 -  -  -  				pop bc
  128 D1:E022 ED 5B C9 EB 
              D1 -  -  -  				ld de, (programPtr)
  129 D1:E027 21 C6 52 D0 				ld hl, tempArg1
  130 D1:E02B ED B0 -  -  				ldir
  131 D1:E02D ED 53 C9 EB 
              D1 -  -  -  				ld (programPtr), de
  132 D1:E032 FD CB AF 56 				bit end_point_is_number, (iy+fFunction2)
  133 D1:E036 20 30 -  -  				jr nz, ForInsertEndPointNumber
  134 D1:E038 -  -  -  -  ForInsertEndPointExpression:
  135 D1:E038 3E B7 -  -  				ld a, 0B7h
  136 D1:E03A FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  137 D1:E03E 20 08 -  -  				jr nz, +_
  138 D1:E040 FD CB AF 56 				bit end_point_is_number, (iy+fFunction2)
  139 D1:E044 20 02 -  -  				jr nz, +_
  140 D1:E046 3E 37 -  -  				ld a, 037h
  141 D1:E048 32 7A E0 D1 _:				ld (ForSetCarryFlag), a
  142 D1:E04C 3E 11 -  -  				ld a, 011h
  143 D1:E04E CD AE AC D1 				call InsertA										; ld de, *
  144 D1:E052 2A C9 EB D1 				ld hl, (programPtr)
  145 D1:E056 11 81 7C FC 				ld de, UserMem-program
  146 D1:E05A 19 -  -  -  				add hl, de
  147 D1:E05B EB -  -  -  				ex de, hl
  148 D1:E05C -  -  -  -  ForEndPointExpression = $+1
  149 D1:E05C 21 00 00 00 				ld hl, 0
  150 D1:E060 ED 1F -  -  				ld (hl), de
  151 D1:E062 CD 66 AC D1 				call InsertHL										; ld de, RANDOM
  152 D1:E066 18 11 -  -  				jr ForSkip
  153 D1:E068 -  -  -  -  ForInsertEndPointNumber:
  154 D1:E068 3E 11 -  -  				ld a, 011h
  155 D1:E06A -  -  -  -  ForFixedEndPoint = $+1
  156 D1:E06A 21 00 00 00 				ld hl, 0
  157 D1:E06E FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  158 D1:E072 20 01 -  -  				jr nz, +_
  159 D1:E074 23 -  -  -  				inc hl
  160 D1:E075 CD 62 AC D1 _:				call InsertAHL										; ld de, *
  161 D1:E079 -  -  -  -  ForSkip:
  162 D1:E079 -  -  -  -  ForSetCarryFlag = $+1
  163 D1:E079 21 B7 ED 52 				ld hl, 052EDB7h
  164 D1:E07D CD 66 AC D1 				call InsertHL										; or a \ sbc hl, de
  165 D1:E081 3E D2 -  -  				ld a, 0D2h
  166 D1:E083 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  167 D1:E087 28 02 -  -  				jr z, +_
  168 D1:E089 C6 08 -  -  				add a, 8
  169 D1:E08B CD AE AC D1 _:				call InsertA										; jp [n]c, *
  170 D1:E08F 2A C9 EB D1 				ld hl, (programPtr)
  171 D1:E093 E5 -  -  -  				push hl
  172 D1:E094 CD 66 AC D1 					call InsertHL									; jp [n]c, RANDOM
  173 D1:E098 FD 46 AF -  					ld b, (iy+fFunction2)
  174 D1:E09B C5 -  -  -  					push bc
  175 D1:E09C CD AA AA D1 						call ParseProgramUntilEnd
  176 D1:E0A0 C1 -  -  -  					pop bc
  177 D1:E0A1 FD 70 AF -  					ld (iy+fFunction2), b
  178 D1:E0A4 FE D0 -  -  					cp tElse
  179 D1:E0A6 CA 05 AF D1 					jp z, ErrorSyntax
  180 D1:E0AA DD 21 00 00 
              00 -  -  -  					ld ix, 0
  181 D1:E0AF DD 39 -  -  					add ix, sp
  182 D1:E0B1 DD 7E 09 -  					ld a, (ix+9)
  183 D1:E0B4 21 DD 27 00 					ld hl, 00027DDh
  184 D1:E0B8 CD 70 1D 02 					call _SetHLUToA
  185 D1:E0BC CD 66 AC D1 					call InsertHL									; ld hl, (ix+*)
  186 D1:E0C0 C1 -  -  -  				pop bc
  187 D1:E0C1 D1 -  -  -  			pop de
  188 D1:E0C2 E1 -  -  -  		pop hl
  189 D1:E0C3 D5 -  -  -  		push de
  190 D1:E0C4 C5 -  -  -  			push bc
  191 D1:E0C5 FD CB AF 4E 				bit for_step_is_number, (iy+fFunction2)
  192 D1:E0C9 28 19 -  -  				jr z, InsertVariableChange
  193 D1:E0CB -  -  -  -  InsertNumberChange:
  194 D1:E0CB EB -  -  -  				ex de, hl
  195 D1:E0CC 3E 01 -  -  				ld a, 1
  196 D1:E0CE 32 E9 EB D1 				ld (ExprOutput), a
  197 D1:E0D2 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  198 D1:E0D6 28 06 -  -  				jr z, $+8
  199 D1:E0D8 CD DB D0 D1 				call SubChainAnsNumber
  200 D1:E0DC 18 04 -  -  				jr $+6
  201 D1:E0DE CD A3 D2 D1 				call AddChainAnsNumber
  202 D1:E0E2 18 29 -  -  				jr InsertStop
  203 D1:E0E4 -  -  -  -  InsertVariableChange:
  204 D1:E0E4 EB -  -  -  				ex de, hl
  205 D1:E0E5 3E 11 -  -  				ld a, 011h
  206 D1:E0E7 CD AE AC D1 				call InsertA										; ld de, *
  207 D1:E0EB 2A C9 EB D1 				ld hl, (programPtr)
  208 D1:E0EF 01 81 7C FC 				ld bc, UserMem-program
  209 D1:E0F3 09 -  -  -  				add hl, bc
  210 D1:E0F4 EB -  -  -  				ex de, hl
  211 D1:E0F5 ED 1F -  -  				ld (hl), de
  212 D1:E0F7 CD 66 AC D1 				call InsertHL										; ld de, RANDOM
  213 D1:E0FB 3E 19 -  -  				ld a, 019h
  214 D1:E0FD 21 B7 ED 52 				ld hl, 052EDB7h
  215 D1:E101 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  216 D1:E105 C4 66 AC D1 				call nz, InsertHL									; or a \ sbc hl, de
  217 D1:E109 CC AE AC D1 				call z, InsertA										; add hl, de
  218 D1:E10D -  -  -  -  InsertStop:
  219 D1:E10D C1 -  -  -  			pop bc
  220 D1:E10E D1 -  -  -  		pop de
  221 D1:E10F E1 -  -  -  	pop hl
  222 D1:E110 7D -  -  -  	ld a, l
  223 D1:E111 21 DD 2F 00 	ld hl, 0002FDDh
  224 D1:E115 CD 70 1D 02 	call _SetHLUToA
  225 D1:E119 CD 66 AC D1 	call InsertHL													; ld (ix+*), hl
  226 D1:E11D 2A C9 EB D1 	ld hl, (programPtr)
  227 D1:E121 B7 -  -  -  	or a
  228 D1:E122 ED 52 -  -  	sbc hl, de
  229 D1:E124 7D -  -  -  	ld a, l
  230 D1:E125 2F -  -  -  	cpl
  231 D1:E126 3D -  -  -  	dec a
  232 D1:E127 FE 80 -  -  	cp %10000000
  233 D1:E129 30 15 -  -  	jr nc, ForSmallLoop
  234 D1:E12B -  -  -  -  ForBigLoop:
  235 D1:E12B 3E C3 -  -  	ld a, 0C3h
  236 D1:E12D FD CB AF 46 	bit negative_for_step, (iy+fFunction2)
  237 D1:E131 28 02 -  -  	jr z, $+4
  238 D1:E133 3E D2 -  -  	ld a, 0D2h
  239 D1:E135 21 81 7C FC 	ld hl, UserMem-program
  240 D1:E139 19 -  -  -  	add hl, de
  241 D1:E13A CD 62 AC D1 	call InsertAHL													; jp [nc], ******
  242 D1:E13E 18 1A -  -  	jr ForLoopInsert
  243 D1:E140 -  -  -  -  ForSmallLoop:
  244 D1:E140 DD 6F -  -  	ld ixl, a
  245 D1:E142 3E 18 -  -  	ld a, 018h
  246 D1:E144 FD CB AF 46 	bit negative_for_step, (iy+fFunction2)
  247 D1:E148 28 02 -  -  	jr z, $+4
  248 D1:E14A 3E 30 -  -  	ld a, 030h
  249 D1:E14C CD AE AC D1 	call InsertA													; jr [nc], **
  250 D1:E150 DD 7D -  -  	ld a, ixl
  251 D1:E152 CD AE AC D1 	call InsertA													; jr [nc], **
  252 D1:E156 2A C9 EB D1 	ld hl, (programPtr)
  253 D1:E15A -  -  -  -  ForLoopInsert:
  254 D1:E15A 11 81 7C FC 	ld de, UserMem-program
  255 D1:E15E 19 -  -  -  	add hl, de
  256 D1:E15F EB -  -  -  	ex de, hl
  257 D1:E160 C5 -  -  -  	push bc
  258 D1:E161 E1 -  -  -  	pop hl
  259 D1:E162 ED 1F -  -  	ld (hl), de
  260 D1:E164 C9 -  -  -  	ret
  261 D1:E165 -  -  -  -  	
  262 D1:E165 -  -  -  -  functionForSmall:
  263 D1:E165 CD 0F B2 D1 	call ParseExpression
  264 D1:E169 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  265 D1:E16D 28 10 -  -  	jr z, +_
  266 D1:E16F 2A C9 EB D1 	ld hl, (programPtr)
  267 D1:E173 2B -  -  -  	dec hl
  268 D1:E174 2B -  -  -  	dec hl
  269 D1:E175 22 C9 EB D1 	ld (programPtr), hl
  270 D1:E179 2B -  -  -  	dec hl
  271 D1:E17A 2B -  -  -  	dec hl
  272 D1:E17B 36 06 -  -  	ld (hl), 06h													; ld b, *
  273 D1:E17D 18 06 -  -  	jr ++_
  274 D1:E17F 3E 45 -  -  _:	ld a, 045h
  275 D1:E181 CD AE AC D1 	call InsertA													; ld b, l
  276 D1:E185 2A C9 EB D1 _:	ld hl, (programPtr)
  277 D1:E189 E5 -  -  -  	push hl
  278 D1:E18A 3E C5 -  -  		ld a, 0C5h
  279 D1:E18C CD AE AC D1 		call InsertA												; push bc
  280 D1:E190 CD AA AA D1 		call ParseProgramUntilEnd
  281 D1:E194 3E C1 -  -  		ld a, 0C1h
  282 D1:E196 CD AE AC D1 		call InsertA												; pop bc
  283 D1:E19A D1 -  -  -  	pop de
  284 D1:E19B 2A C9 EB D1 	ld hl, (programPtr)
  285 D1:E19F B7 -  -  -  	or a
  286 D1:E1A0 ED 52 -  -  	sbc hl, de
  287 D1:E1A2 7C -  -  -  	ld a, h
  288 D1:E1A3 B7 -  -  -  	or a
  289 D1:E1A4 C2 57 AF D1 _:	jp nz, ErrorTooLargeLoop
  290 D1:E1A8 7D -  -  -  	ld a, l
  291 D1:E1A9 2F -  -  -  	cpl
  292 D1:E1AA 3D -  -  -  	dec a
  293 D1:E1AB FE 80 -  -  	cp %10000000
  294 D1:E1AD DA A4 E1 D1 	jp c, -_
  295 D1:E1B1 47 -  -  -  	ld b, a
  296 D1:E1B2 3E 10 -  -  	ld a, 010h
  297 D1:E1B4 CD AE AC D1 	call InsertA													; djnz *
  298 D1:E1B8 78 -  -  -  	ld a, b
  299 D1:E1B9 C3 AE AC D1 	jp InsertA														; djnz *
Listing for file "ICE.asm"
  463 D1:E1BD -  -  -  -  #include "operators functions/function_C.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operators functions\function_C.asm"
    1 D1:E1BD -  -  -  -  CFunction0Args:
    2 D1:E1BD FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
    3 D1:E1C1 C2 05 AF D1 	jp nz, ErrorSyntax
    4 D1:E1C5 21 F5 EB D1 	ld hl, usedCroutines
    5 D1:E1C9 -  -  -  -  CFunction0ArgsSMC = $+1
    6 D1:E1C9 11 00 00 00 	ld de, 0
    7 D1:E1CD 19 -  -  -  	add hl, de
    8 D1:E1CE 4E -  -  -  	ld c, (hl)
    9 D1:E1CF 06 04 -  -  	ld b, 4
   10 D1:E1D1 ED 4C -  -  	mlt bc
   11 D1:E1D3 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
   12 D1:E1D7 09 -  -  -  	add hl, bc
   13 D1:E1D8 C3 77 AC D1 	jp InsertCallHL															; call *
   14 D1:E1DC -  -  -  -  	
   15 D1:E1DC -  -  -  -  CFunction1Arg:
   16 D1:E1DC FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
   17 D1:E1E0 CA 05 AF D1 	jp z, ErrorSyntax
   18 D1:E1E4 CD 28 10 02 	call _IncFetch
   19 D1:E1E8 CD 0F B2 D1 	call ParseExpression
   20 D1:E1EC FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
   21 D1:E1F0 28 14 -  -  	jr z, +_
   22 D1:E1F2 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   23 D1:E1F6 28 0E -  -  	jr z, +_
   24 D1:E1F8 2A C9 EB D1 	ld hl, (programPtr)
   25 D1:E1FC 2B -  -  -  	dec hl
   26 D1:E1FD 2B -  -  -  	dec hl
   27 D1:E1FE 22 C9 EB D1 	ld (programPtr), hl
   28 D1:E202 2B -  -  -  	dec hl
   29 D1:E203 2B -  -  -  	dec hl
   30 D1:E204 36 2E -  -  	ld (hl), 02Eh															; ld l, *
   31 D1:E206 CD D7 AC D1 _:	call InsertPushHLDE
   32 D1:E20A 21 F5 EB D1 	ld hl, usedCroutines
   33 D1:E20E -  -  -  -  CFunction1ArgSMC = $+1
   34 D1:E20E 11 00 00 00 	ld de, 0
   35 D1:E212 19 -  -  -  	add hl, de
   36 D1:E213 4E -  -  -  	ld c, (hl)
   37 D1:E214 06 04 -  -  	ld b, 4
   38 D1:E216 ED 4C -  -  	mlt bc
   39 D1:E218 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
   40 D1:E21C 09 -  -  -  	add hl, bc
   41 D1:E21D CD 77 AC D1 	call InsertCallHL														; call *
   42 D1:E221 3E E1 -  -  	ld a, 0E1h
   43 D1:E223 C3 AE AC D1 	jp InsertA																; pop hl
   44 D1:E227 -  -  -  -  		
   45 D1:E227 -  -  -  -  CFunction2Args:
   46 D1:E227 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
   47 D1:E22B CA 05 AF D1 	jp z, ErrorSyntax
   48 D1:E22F CD 28 10 02 	call _IncFetch
   49 D1:E233 2A C9 EB D1 	ld hl, (programPtr)
   50 D1:E237 E5 -  -  -  	push hl
   51 D1:E238 21 C6 52 D0 		ld hl, tempArg1
   52 D1:E23C 22 C9 EB D1 		ld (programPtr), hl
   53 D1:E240 CD 0F B2 D1 		call ParseExpression
   54 D1:E244 FD CB BF 4E 		bit triggered_a_comma, (iy+fExpression2)
   55 D1:E248 CA 05 AF D1 		jp z, ErrorSyntax
   56 D1:E24C FD CB B0 66 		bit arg1_is_small, (iy+fFunction1)
   57 D1:E250 28 18 -  -  		jr z, +_
   58 D1:E252 FD CB C0 66 		bit output_is_number, (iy+fExpression1)
   59 D1:E256 28 12 -  -  		jr z, +_
   60 D1:E258 2A C9 EB D1 		ld hl, (programPtr)
   61 D1:E25C 2B -  -  -  		dec hl
   62 D1:E25D 2B -  -  -  		dec hl
   63 D1:E25E 22 C9 EB D1 		ld (programPtr), hl
   64 D1:E262 2B -  -  -  		dec hl
   65 D1:E263 2B -  -  -  		dec hl
   66 D1:E264 36 2E -  -  		ld (hl), 02Eh														; ld l, *
   67 D1:E266 23 -  -  -  		inc hl
   68 D1:E267 ED 17 -  -  		ld de, (hl)
   69 D1:E269 73 -  -  -  		ld (hl), e
   70 D1:E26A CD D7 AC D1 _:		call InsertPushHLDE
   71 D1:E26E E1 -  -  -  	pop hl
   72 D1:E26F ED 5B C9 EB 
              D1 -  -  -  	ld de, (programPtr)
   73 D1:E274 22 C9 EB D1 	ld (programPtr), hl
   74 D1:E278 D5 -  -  -  	push de
   75 D1:E279 CD 28 10 02 		call _IncFetch
   76 D1:E27D CD 0F B2 D1 		call ParseExpression
   77 D1:E281 FD CB BF 4E 		bit triggered_a_comma, (iy+fExpression2)
   78 D1:E285 C2 05 AF D1 		jp nz, ErrorSyntax
   79 D1:E289 FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
   80 D1:E28D 28 18 -  -  		jr z, +_
   81 D1:E28F FD CB C0 66 		bit output_is_number, (iy+fExpression1)
   82 D1:E293 28 12 -  -  		jr z, +_
   83 D1:E295 2A C9 EB D1 		ld hl, (programPtr)
   84 D1:E299 2B -  -  -  		dec hl
   85 D1:E29A 2B -  -  -  		dec hl
   86 D1:E29B 22 C9 EB D1 		ld (programPtr), hl
   87 D1:E29F 2B -  -  -  		dec hl
   88 D1:E2A0 2B -  -  -  		dec hl
   89 D1:E2A1 36 2E -  -  		ld (hl), 02Eh														; ld l, *
   90 D1:E2A3 23 -  -  -  		inc hl
   91 D1:E2A4 ED 17 -  -  		ld de, (hl)
   92 D1:E2A6 73 -  -  -  		ld (hl), e
   93 D1:E2A7 CD D7 AC D1 _:		call InsertPushHLDE
   94 D1:E2AB E1 -  -  -  	pop hl
   95 D1:E2AC 11 C6 52 D0 	ld de, tempArg1
   96 D1:E2B0 B7 -  -  -  	or a
   97 D1:E2B1 ED 52 -  -  	sbc hl, de
   98 D1:E2B3 E5 -  -  -  	push hl
   99 D1:E2B4 C1 -  -  -  	pop bc
  100 D1:E2B5 2A C9 EB D1 	ld hl, (programPtr)
  101 D1:E2B9 EB -  -  -  	ex de, hl
  102 D1:E2BA ED B0 -  -  	ldir
  103 D1:E2BC 21 F5 EB D1 	ld hl, usedCroutines
  104 D1:E2C0 -  -  -  -  CFunction2ArgsSMC = $+1
  105 D1:E2C0 11 00 00 00 	ld de, 0
  106 D1:E2C4 19 -  -  -  	add hl, de
  107 D1:E2C5 4E -  -  -  	ld c, (hl)
  108 D1:E2C6 06 04 -  -  	ld b, 4
  109 D1:E2C8 ED 4C -  -  	mlt bc
  110 D1:E2CA 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
  111 D1:E2CE 09 -  -  -  	add hl, bc
  112 D1:E2CF CD 77 AC D1 	call InsertCallHL														; call *
  113 D1:E2D3 3E E1 -  -  	ld a, 0E1h
  114 D1:E2D5 CD AE AC D1 	call InsertA															; pop hl
  115 D1:E2D9 C3 AE AC D1 	jp InsertA																; pop hl
  116 D1:E2DD -  -  -  -  	
  117 D1:E2DD -  -  -  -  CFunction3Args:
  118 D1:E2DD FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  119 D1:E2E1 CA 05 AF D1 	jp z, ErrorSyntax
  120 D1:E2E5 2A C9 EB D1 	ld hl, (programPtr)
  121 D1:E2E9 22 70 E3 D1 	ld (CFunction3ArgsSMC2), hl
  122 D1:E2ED 21 C6 52 D0 	ld hl, tempArg1
  123 D1:E2F1 22 C9 EB D1 	ld (programPtr), hl
  124 D1:E2F5 CD 28 10 02 	call _IncFetch
  125 D1:E2F9 CD 0F B2 D1 	call ParseExpression
  126 D1:E2FD FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  127 D1:E301 CA 05 AF D1 	jp z, ErrorSyntax
  128 D1:E305 2A C9 EB D1 	ld hl, (programPtr)
  129 D1:E309 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  130 D1:E30D 28 15 -  -  	jr z, +_
  131 D1:E30F FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  132 D1:E313 28 0F -  -  	jr z, +_
  133 D1:E315 2B -  -  -  	dec hl
  134 D1:E316 2B -  -  -  	dec hl
  135 D1:E317 22 C9 EB D1 	ld (programPtr), hl
  136 D1:E31B 2B -  -  -  	dec hl
  137 D1:E31C 2B -  -  -  	dec hl
  138 D1:E31D 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  139 D1:E31F 23 -  -  -  	inc hl
  140 D1:E320 ED 17 -  -  	ld de, (hl)
  141 D1:E322 73 -  -  -  	ld (hl), e
  142 D1:E323 23 -  -  -  	inc hl
  143 D1:E324 CD D7 AC D1 _:	call InsertPushHLDE
  144 D1:E328 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  145 D1:E32C F5 -  -  -  	push af
  146 D1:E32D FD CB C0 7E 		bit output_is_string, (iy+fExpression1)
  147 D1:E331 F5 -  -  -  		push af
  148 D1:E332 E5 -  -  -  			push hl
  149 D1:E333 21 AE 56 D0 				ld hl, tempArg2
  150 D1:E337 22 C9 EB D1 				ld (programPtr), hl
  151 D1:E33B CD 28 10 02 				call _IncFetch
  152 D1:E33F CD 0F B2 D1 				call ParseExpression
  153 D1:E343 FD CB BF 4E 				bit triggered_a_comma, (iy+fExpression2)
  154 D1:E347 CA 05 AF D1 				jp z, ErrorSyntax
  155 D1:E34B 2A C9 EB D1 				ld hl, (programPtr)
  156 D1:E34F FD CB B0 5E 				bit arg2_is_small, (iy+fFunction1)
  157 D1:E353 28 15 -  -  				jr z, +_
  158 D1:E355 FD CB C0 66 				bit output_is_number, (iy+fExpression1)
  159 D1:E359 28 0F -  -  				jr z, +_
  160 D1:E35B 2B -  -  -  				dec hl
  161 D1:E35C 2B -  -  -  				dec hl
  162 D1:E35D 22 C9 EB D1 				ld (programPtr), hl
  163 D1:E361 2B -  -  -  				dec hl
  164 D1:E362 2B -  -  -  				dec hl
  165 D1:E363 36 2E -  -  				ld (hl), 02Eh												; ld l, *
  166 D1:E365 23 -  -  -  				inc hl
  167 D1:E366 ED 17 -  -  				ld de, (hl)
  168 D1:E368 73 -  -  -  				ld (hl), e
  169 D1:E369 23 -  -  -  				inc hl
  170 D1:E36A CD D7 AC D1 _:				call InsertPushHLDE
  171 D1:E36E E5 -  -  -  				push hl
  172 D1:E36F -  -  -  -  CFunction3ArgsSMC2 = $+1
  173 D1:E36F 21 00 00 00 					ld hl, 0
  174 D1:E373 22 C9 EB D1 					ld (programPtr), hl
  175 D1:E377 CD 28 10 02 					call _IncFetch
  176 D1:E37B CD 0F B2 D1 					call ParseExpression
  177 D1:E37F FD CB BF 4E 					bit triggered_a_comma, (iy+fExpression2)
  178 D1:E383 C2 05 AF D1 					jp nz, ErrorSyntax
  179 D1:E387 FD CB B0 56 					bit arg3_is_small, (iy+fFunction1)
  180 D1:E38B 28 18 -  -  					jr z, +_
  181 D1:E38D FD CB C0 66 					bit output_is_number, (iy+fExpression1)
  182 D1:E391 28 12 -  -  					jr z, +_
  183 D1:E393 2A C9 EB D1 					ld hl, (programPtr)
  184 D1:E397 2B -  -  -  					dec hl
  185 D1:E398 2B -  -  -  					dec hl
  186 D1:E399 22 C9 EB D1 					ld (programPtr), hl
  187 D1:E39D 2B -  -  -  					dec hl
  188 D1:E39E 2B -  -  -  					dec hl
  189 D1:E39F 36 2E -  -  					ld (hl), 02Eh											; ld l, *
  190 D1:E3A1 23 -  -  -  					inc hl
  191 D1:E3A2 ED 17 -  -  					ld de, (hl)
  192 D1:E3A4 73 -  -  -  					ld (hl), e
  193 D1:E3A5 CD D7 AC D1 _:					call InsertPushHLDE
  194 D1:E3A9 ED 5B C9 EB 
              D1 -  -  -  					ld de, (programPtr)
  195 D1:E3AE E1 -  -  -  				pop hl
  196 D1:E3AF 01 AE 56 D0 				ld bc, tempArg2
  197 D1:E3B3 B7 -  -  -  				or a
  198 D1:E3B4 ED 42 -  -  				sbc hl, bc
  199 D1:E3B6 E5 -  -  -  				push hl
  200 D1:E3B7 C1 -  -  -  				pop bc
  201 D1:E3B8 21 AE 56 D0 				ld hl, tempArg2
  202 D1:E3BC ED B0 -  -  				ldir
  203 D1:E3BE E1 -  -  -  			pop hl
  204 D1:E3BF 01 C6 52 D0 			ld bc, tempArg1
  205 D1:E3C3 B7 -  -  -  			or a
  206 D1:E3C4 ED 42 -  -  			sbc hl, bc
  207 D1:E3C6 E5 -  -  -  			push hl
  208 D1:E3C7 C1 -  -  -  			pop bc
  209 D1:E3C8 21 C6 52 D0 			ld hl, tempArg1
  210 D1:E3CC ED A0 -  -  			ldi
  211 D1:E3CE F1 -  -  -  		pop af
  212 D1:E3CF 28 0B -  -  		jr z, +_
  213 D1:E3D1 E5 -  -  -  		push hl
  214 D1:E3D2 2A D5 EB D1 			ld hl, (programDataOffsetPtr)
  215 D1:E3D6 2B -  -  -  			dec hl
  216 D1:E3D7 2B -  -  -  			dec hl
  217 D1:E3D8 2B -  -  -  			dec hl
  218 D1:E3D9 ED 1F -  -  			ld (hl), de
  219 D1:E3DB E1 -  -  -  		pop hl
  220 D1:E3DC ED B0 -  -  _:		ldir
  221 D1:E3DE ED 53 C9 EB 
              D1 -  -  -  		ld (programPtr), de
  222 D1:E3E3 21 F5 EB D1 		ld hl, usedCroutines
  223 D1:E3E7 -  -  -  -  CFunction3ArgsSMC = $+1
  224 D1:E3E7 11 00 00 00 		ld de, 0
  225 D1:E3EB 19 -  -  -  		add hl, de
  226 D1:E3EC 4E -  -  -  		ld c, (hl)
  227 D1:E3ED 06 04 -  -  		ld b, 4
  228 D1:E3EF ED 4C -  -  		mlt bc
  229 D1:E3F1 21 01 A9 D1 		ld hl, CData2-CData+UserMem-4
  230 D1:E3F5 09 -  -  -  		add hl, bc
  231 D1:E3F6 CD 77 AC D1 		call InsertCallHL													; call *
  232 D1:E3FA 21 E1 E1 E1 		ld hl, 0E1E1E1h
  233 D1:E3FE F1 -  -  -  	pop af
  234 D1:E3FF C3 66 AC D1 	jp InsertHL																; pop hl \ pop hl \ pop hl
  235 D1:E403 -  -  -  -  	
  236 D1:E403 -  -  -  -  CFunction4Args:
  237 D1:E403 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  238 D1:E407 CA 05 AF D1 	jp z, ErrorSyntax
  239 D1:E40B 2A C9 EB D1 	ld hl, (programPtr)
  240 D1:E40F 22 C8 E4 D1 	ld (CFunction4ArgsSMC2), hl
  241 D1:E413 21 C6 52 D0 	ld hl, tempArg1
  242 D1:E417 22 C9 EB D1 	ld (programPtr), hl
  243 D1:E41B CD 28 10 02 	call _IncFetch
  244 D1:E41F CD 0F B2 D1 	call ParseExpression
  245 D1:E423 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  246 D1:E427 CA 05 AF D1 	jp z, ErrorSyntax
  247 D1:E42B 2A C9 EB D1 	ld hl, (programPtr)
  248 D1:E42F FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  249 D1:E433 28 15 -  -  	jr z, +_
  250 D1:E435 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  251 D1:E439 28 0F -  -  	jr z, +_
  252 D1:E43B 2B -  -  -  	dec hl
  253 D1:E43C 2B -  -  -  	dec hl
  254 D1:E43D 22 C9 EB D1 	ld (programPtr), hl
  255 D1:E441 2B -  -  -  	dec hl
  256 D1:E442 2B -  -  -  	dec hl
  257 D1:E443 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  258 D1:E445 23 -  -  -  	inc hl
  259 D1:E446 ED 17 -  -  	ld de, (hl)
  260 D1:E448 73 -  -  -  	ld (hl), e
  261 D1:E449 23 -  -  -  	inc hl
  262 D1:E44A CD D7 AC D1 _:	call InsertPushHLDE
  263 D1:E44E E5 -  -  -  	push hl
  264 D1:E44F 21 AE 56 D0 		ld hl, tempArg2
  265 D1:E453 22 C9 EB D1 		ld (programPtr), hl
  266 D1:E457 CD 28 10 02 		call _IncFetch
  267 D1:E45B CD 0F B2 D1 		call ParseExpression
  268 D1:E45F FD CB BF 4E 		bit triggered_a_comma, (iy+fExpression2)
  269 D1:E463 CA 05 AF D1 		jp z, ErrorSyntax
  270 D1:E467 2A C9 EB D1 		ld hl, (programPtr)
  271 D1:E46B FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
  272 D1:E46F 28 15 -  -  		jr z, +_
  273 D1:E471 FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  274 D1:E475 28 0F -  -  		jr z, +_
  275 D1:E477 2B -  -  -  		dec hl
  276 D1:E478 2B -  -  -  		dec hl
  277 D1:E479 22 C9 EB D1 		ld (programPtr), hl
  278 D1:E47D 2B -  -  -  		dec hl
  279 D1:E47E 2B -  -  -  		dec hl
  280 D1:E47F 36 2E -  -  		ld (hl), 02Eh														; ld l, *
  281 D1:E481 23 -  -  -  		inc hl
  282 D1:E482 ED 17 -  -  		ld de, (hl)
  283 D1:E484 73 -  -  -  		ld (hl), e
  284 D1:E485 23 -  -  -  		inc hl
  285 D1:E486 CD D7 AC D1 _:		call InsertPushHLDE
  286 D1:E48A E5 -  -  -  		push hl
  287 D1:E48B 21 96 5A D0 			ld hl, tempArg3
  288 D1:E48F 22 C9 EB D1 			ld (programPtr), hl
  289 D1:E493 CD 28 10 02 			call _IncFetch
  290 D1:E497 CD 0F B2 D1 			call ParseExpression
  291 D1:E49B FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
  292 D1:E49F CA 05 AF D1 			jp z, ErrorSyntax
  293 D1:E4A3 2A C9 EB D1 			ld hl, (programPtr)
  294 D1:E4A7 FD CB B0 56 			bit arg3_is_small, (iy+fFunction1)
  295 D1:E4AB 28 15 -  -  			jr z, +_
  296 D1:E4AD FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  297 D1:E4B1 28 0F -  -  			jr z, +_
  298 D1:E4B3 2B -  -  -  			dec hl
  299 D1:E4B4 2B -  -  -  			dec hl
  300 D1:E4B5 22 C9 EB D1 			ld (programPtr), hl
  301 D1:E4B9 2B -  -  -  			dec hl
  302 D1:E4BA 2B -  -  -  			dec hl
  303 D1:E4BB 36 2E -  -  			ld (hl), 02Eh													; ld l, *
  304 D1:E4BD 23 -  -  -  			inc hl
  305 D1:E4BE ED 17 -  -  			ld de, (hl)
  306 D1:E4C0 73 -  -  -  			ld (hl), e
  307 D1:E4C1 23 -  -  -  			inc hl
  308 D1:E4C2 CD D7 AC D1 _:			call InsertPushHLDE
  309 D1:E4C6 E5 -  -  -  			push hl
  310 D1:E4C7 -  -  -  -  CFunction4ArgsSMC2 = $+1
  311 D1:E4C7 21 00 00 00 				ld hl, 0
  312 D1:E4CB 22 C9 EB D1 				ld (programPtr), hl
  313 D1:E4CF CD 28 10 02 				call _IncFetch
  314 D1:E4D3 CD 0F B2 D1 				call ParseExpression
  315 D1:E4D7 FD CB BF 4E 				bit triggered_a_comma, (iy+fExpression2)
  316 D1:E4DB C2 05 AF D1 				jp nz, ErrorSyntax
  317 D1:E4DF FD CB B0 4E 				bit arg4_is_small, (iy+fFunction1)
  318 D1:E4E3 28 18 -  -  				jr z, +_
  319 D1:E4E5 FD CB C0 66 				bit output_is_number, (iy+fExpression1)
  320 D1:E4E9 28 12 -  -  				jr z, +_
  321 D1:E4EB 2A C9 EB D1 				ld hl, (programPtr)
  322 D1:E4EF 2B -  -  -  				dec hl
  323 D1:E4F0 2B -  -  -  				dec hl
  324 D1:E4F1 22 C9 EB D1 				ld (programPtr), hl
  325 D1:E4F5 2B -  -  -  				dec hl
  326 D1:E4F6 2B -  -  -  				dec hl
  327 D1:E4F7 36 2E -  -  				ld (hl), 02Eh												; ld l, *
  328 D1:E4F9 23 -  -  -  				inc hl
  329 D1:E4FA ED 17 -  -  				ld de, (hl)
  330 D1:E4FC 73 -  -  -  				ld (hl), e
  331 D1:E4FD CD D7 AC D1 _:				call InsertPushHLDE
  332 D1:E501 ED 5B C9 EB 
              D1 -  -  -  				ld de, (programPtr)
  333 D1:E506 E1 -  -  -  			pop hl
  334 D1:E507 01 96 5A D0 			ld bc, tempArg3
  335 D1:E50B B7 -  -  -  			or a
  336 D1:E50C ED 42 -  -  			sbc hl, bc
  337 D1:E50E E5 -  -  -  			push hl
  338 D1:E50F C1 -  -  -  			pop bc
  339 D1:E510 21 96 5A D0 			ld hl, tempArg3
  340 D1:E514 ED B0 -  -  			ldir
  341 D1:E516 E1 -  -  -  		pop hl
  342 D1:E517 01 AE 56 D0 		ld bc, tempArg2
  343 D1:E51B B7 -  -  -  		or a
  344 D1:E51C ED 42 -  -  		sbc hl, bc
  345 D1:E51E E5 -  -  -  		push hl
  346 D1:E51F C1 -  -  -  		pop bc
  347 D1:E520 21 AE 56 D0 		ld hl, tempArg2
  348 D1:E524 ED B0 -  -  		ldir
  349 D1:E526 E1 -  -  -  	pop hl
  350 D1:E527 01 C6 52 D0 	ld bc, tempArg1
  351 D1:E52B B7 -  -  -  	or a
  352 D1:E52C ED 42 -  -  	sbc hl, bc
  353 D1:E52E E5 -  -  -  	push hl
  354 D1:E52F C1 -  -  -  	pop bc
  355 D1:E530 21 C6 52 D0 	ld hl, tempArg1
  356 D1:E534 ED B0 -  -  	ldir
  357 D1:E536 ED 53 C9 EB 
              D1 -  -  -  	ld (programPtr), de
  358 D1:E53B 21 F5 EB D1 	ld hl, usedCroutines
  359 D1:E53F -  -  -  -  CFunction4ArgsSMC = $+1
  360 D1:E53F 11 00 00 00 	ld de, 0
  361 D1:E543 19 -  -  -  	add hl, de
  362 D1:E544 4E -  -  -  	ld c, (hl)
  363 D1:E545 06 04 -  -  	ld b, 4
  364 D1:E547 ED 4C -  -  	mlt bc
  365 D1:E549 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
  366 D1:E54D 09 -  -  -  	add hl, bc
  367 D1:E54E CD 77 AC D1 	call InsertCallHL														; call *
  368 D1:E552 3E E1 -  -  	ld a, 0E1h
  369 D1:E554 21 E1 E1 E1 	ld hl, 0E1E1E1h
  370 D1:E558 C3 62 AC D1 	jp InsertAHL															; pop hl \ pop hl \ pop hl \ pop hl
  371 D1:E55C -  -  -  -  	
  372 D1:E55C -  -  -  -  CFunction5Args:
  373 D1:E55C FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  374 D1:E560 CA 05 AF D1 	jp z, ErrorSyntax
  375 D1:E564 2A C9 EB D1 	ld hl, (programPtr)
  376 D1:E568 22 62 E6 D1 	ld (CFunction5ArgsSMC2), hl
  377 D1:E56C 21 C6 52 D0 	ld hl, tempArg1
  378 D1:E570 22 C9 EB D1 	ld (programPtr), hl
  379 D1:E574 CD 28 10 02 	call _IncFetch
  380 D1:E578 CD 0F B2 D1 	call ParseExpression
  381 D1:E57C FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  382 D1:E580 CA 05 AF D1 	jp z, ErrorSyntax
  383 D1:E584 2A C9 EB D1 	ld hl, (programPtr)
  384 D1:E588 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  385 D1:E58C 28 15 -  -  	jr z, +_
  386 D1:E58E FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  387 D1:E592 28 0F -  -  	jr z, +_
  388 D1:E594 2B -  -  -  	dec hl
  389 D1:E595 2B -  -  -  	dec hl
  390 D1:E596 22 C9 EB D1 	ld (programPtr), hl
  391 D1:E59A 2B -  -  -  	dec hl
  392 D1:E59B 2B -  -  -  	dec hl
  393 D1:E59C 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  394 D1:E59E 23 -  -  -  	inc hl
  395 D1:E59F ED 17 -  -  	ld de, (hl)
  396 D1:E5A1 73 -  -  -  	ld (hl), e
  397 D1:E5A2 23 -  -  -  	inc hl
  398 D1:E5A3 CD D7 AC D1 _:	call InsertPushHLDE
  399 D1:E5A7 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  400 D1:E5AB F5 -  -  -  	push af
  401 D1:E5AC E5 -  -  -  		push hl
  402 D1:E5AD 21 AE 56 D0 			ld hl, tempArg2
  403 D1:E5B1 22 C9 EB D1 			ld (programPtr), hl
  404 D1:E5B5 CD 28 10 02 			call _IncFetch
  405 D1:E5B9 CD 0F B2 D1 			call ParseExpression
  406 D1:E5BD FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
  407 D1:E5C1 CA 05 AF D1 			jp z, ErrorSyntax
  408 D1:E5C5 2A C9 EB D1 			ld hl, (programPtr)
  409 D1:E5C9 FD CB B0 5E 			bit arg2_is_small, (iy+fFunction1)
  410 D1:E5CD 28 15 -  -  			jr z, +_
  411 D1:E5CF FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  412 D1:E5D3 28 0F -  -  			jr z, +_
  413 D1:E5D5 2B -  -  -  			dec hl
  414 D1:E5D6 2B -  -  -  			dec hl
  415 D1:E5D7 22 C9 EB D1 			ld (programPtr), hl
  416 D1:E5DB 2B -  -  -  			dec hl
  417 D1:E5DC 2B -  -  -  			dec hl
  418 D1:E5DD 36 2E -  -  			ld (hl), 02Eh													; ld l, *
  419 D1:E5DF 23 -  -  -  			inc hl
  420 D1:E5E0 ED 17 -  -  			ld de, (hl)
  421 D1:E5E2 73 -  -  -  			ld (hl), e
  422 D1:E5E3 23 -  -  -  			inc hl
  423 D1:E5E4 CD D7 AC D1 _:			call InsertPushHLDE
  424 D1:E5E8 E5 -  -  -  			push hl
  425 D1:E5E9 21 96 5A D0 				ld hl, tempArg3
  426 D1:E5ED 22 C9 EB D1 				ld (programPtr), hl
  427 D1:E5F1 CD 28 10 02 				call _IncFetch
  428 D1:E5F5 CD 0F B2 D1 				call ParseExpression
  429 D1:E5F9 FD CB BF 4E 				bit triggered_a_comma, (iy+fExpression2)
  430 D1:E5FD CA 05 AF D1 				jp z, ErrorSyntax
  431 D1:E601 2A C9 EB D1 				ld hl, (programPtr)
  432 D1:E605 FD CB B0 56 				bit arg3_is_small, (iy+fFunction1)
  433 D1:E609 28 15 -  -  				jr z, +_
  434 D1:E60B FD CB C0 66 				bit output_is_number, (iy+fExpression1)
  435 D1:E60F 28 0F -  -  				jr z, +_
  436 D1:E611 2B -  -  -  				dec hl
  437 D1:E612 2B -  -  -  				dec hl
  438 D1:E613 22 C9 EB D1 				ld (programPtr), hl
  439 D1:E617 2B -  -  -  				dec hl
  440 D1:E618 2B -  -  -  				dec hl
  441 D1:E619 36 2E -  -  				ld (hl), 02Eh												; ld l, *
  442 D1:E61B 23 -  -  -  				inc hl
  443 D1:E61C ED 17 -  -  				ld de, (hl)
  444 D1:E61E 73 -  -  -  				ld (hl), e
  445 D1:E61F 23 -  -  -  				inc hl
  446 D1:E620 CD D7 AC D1 _:				call InsertPushHLDE
  447 D1:E624 E5 -  -  -  				push hl
  448 D1:E625 21 7E 5E D0 					ld hl, tempArg4
  449 D1:E629 22 C9 EB D1 					ld (programPtr), hl
  450 D1:E62D CD 28 10 02 					call _IncFetch
  451 D1:E631 CD 0F B2 D1 					call ParseExpression
  452 D1:E635 FD CB BF 4E 					bit triggered_a_comma, (iy+fExpression2)
  453 D1:E639 CA 05 AF D1 					jp z, ErrorSyntax
  454 D1:E63D 2A C9 EB D1 					ld hl, (programPtr)
  455 D1:E641 FD CB B0 4E 					bit arg4_is_small, (iy+fFunction1)
  456 D1:E645 28 15 -  -  					jr z, +_
  457 D1:E647 FD CB C0 66 					bit output_is_number, (iy+fExpression1)
  458 D1:E64B 28 0F -  -  					jr z, +_
  459 D1:E64D 2B -  -  -  					dec hl
  460 D1:E64E 2B -  -  -  					dec hl
  461 D1:E64F 22 C9 EB D1 					ld (programPtr), hl
  462 D1:E653 2B -  -  -  					dec hl
  463 D1:E654 2B -  -  -  					dec hl
  464 D1:E655 36 2E -  -  					ld (hl), 02Eh											; ld l, *
  465 D1:E657 23 -  -  -  					inc hl
  466 D1:E658 ED 17 -  -  					ld de, (hl)
  467 D1:E65A 73 -  -  -  					ld (hl), e
  468 D1:E65B 23 -  -  -  					inc hl
  469 D1:E65C CD D7 AC D1 _:					call InsertPushHLDE
  470 D1:E660 E5 -  -  -  					push hl
  471 D1:E661 -  -  -  -  CFunction5ArgsSMC2 = $+1
  472 D1:E661 21 00 00 00 						ld hl, 0
  473 D1:E665 22 C9 EB D1 						ld (programPtr), hl
  474 D1:E669 CD 28 10 02 						call _IncFetch
  475 D1:E66D CD 0F B2 D1 						call ParseExpression
  476 D1:E671 FD CB BF 4E 						bit triggered_a_comma, (iy+fExpression2)
  477 D1:E675 C2 05 AF D1 						jp nz, ErrorSyntax
  478 D1:E679 FD CB B0 46 						bit arg5_is_small, (iy+fFunction1)
  479 D1:E67D 28 18 -  -  						jr z, +_
  480 D1:E67F FD CB C0 66 						bit output_is_number, (iy+fExpression1)
  481 D1:E683 28 12 -  -  						jr z, +_
  482 D1:E685 2A C9 EB D1 						ld hl, (programPtr)
  483 D1:E689 2B -  -  -  						dec hl
  484 D1:E68A 2B -  -  -  						dec hl
  485 D1:E68B 22 C9 EB D1 						ld (programPtr), hl
  486 D1:E68F 2B -  -  -  						dec hl
  487 D1:E690 2B -  -  -  						dec hl
  488 D1:E691 36 2E -  -  						ld (hl), 02Eh										; ld l, *
  489 D1:E693 23 -  -  -  						inc hl
  490 D1:E694 ED 17 -  -  						ld de, (hl)
  491 D1:E696 73 -  -  -  						ld (hl), e
  492 D1:E697 CD D7 AC D1 _:						call InsertPushHLDE
  493 D1:E69B ED 5B C9 EB 
              D1 -  -  -  						ld de, (programPtr)
  494 D1:E6A0 E1 -  -  -  					pop hl
  495 D1:E6A1 01 7E 5E D0 					ld bc, tempArg4
  496 D1:E6A5 B7 -  -  -  					or a
  497 D1:E6A6 ED 42 -  -  					sbc hl, bc
  498 D1:E6A8 E5 -  -  -  					push hl
  499 D1:E6A9 C1 -  -  -  					pop bc
  500 D1:E6AA 21 7E 5E D0 					ld hl, tempArg4
  501 D1:E6AE ED B0 -  -  					ldir
  502 D1:E6B0 E1 -  -  -  				pop hl
  503 D1:E6B1 01 96 5A D0 				ld bc, tempArg3
  504 D1:E6B5 B7 -  -  -  				or a
  505 D1:E6B6 ED 42 -  -  				sbc hl, bc
  506 D1:E6B8 E5 -  -  -  				push hl
  507 D1:E6B9 C1 -  -  -  				pop bc
  508 D1:E6BA 21 96 5A D0 				ld hl, tempArg3
  509 D1:E6BE ED B0 -  -  				ldir
  510 D1:E6C0 E1 -  -  -  			pop hl
  511 D1:E6C1 01 AE 56 D0 			ld bc, tempArg2
  512 D1:E6C5 B7 -  -  -  			or a
  513 D1:E6C6 ED 42 -  -  			sbc hl, bc
  514 D1:E6C8 E5 -  -  -  			push hl
  515 D1:E6C9 C1 -  -  -  			pop bc
  516 D1:E6CA 21 AE 56 D0 			ld hl, tempArg2
  517 D1:E6CE ED B0 -  -  			ldir
  518 D1:E6D0 E1 -  -  -  		pop hl
  519 D1:E6D1 01 C6 52 D0 		ld bc, tempArg1
  520 D1:E6D5 B7 -  -  -  		or a
  521 D1:E6D6 ED 42 -  -  		sbc hl, bc
  522 D1:E6D8 E5 -  -  -  		push hl
  523 D1:E6D9 C1 -  -  -  		pop bc
  524 D1:E6DA 21 C6 52 D0 		ld hl, tempArg1
  525 D1:E6DE ED B0 -  -  		ldir
  526 D1:E6E0 ED 53 C9 EB 
              D1 -  -  -  		ld (programPtr), de
  527 D1:E6E5 21 F5 EB D1 		ld hl, usedCroutines
  528 D1:E6E9 -  -  -  -  CFunction5ArgsSMC = $+1
  529 D1:E6E9 11 00 00 00 		ld de, 0
  530 D1:E6ED 19 -  -  -  		add hl, de
  531 D1:E6EE 4E -  -  -  		ld c, (hl)
  532 D1:E6EF 06 04 -  -  		ld b, 4
  533 D1:E6F1 ED 4C -  -  		mlt bc
  534 D1:E6F3 21 01 A9 D1 		ld hl, CData2-CData+UserMem-4
  535 D1:E6F7 09 -  -  -  		add hl, bc
  536 D1:E6F8 CD 77 AC D1 		call InsertCallHL													; call *
  537 D1:E6FC 3E E1 -  -  		ld a, 0E1h
  538 D1:E6FE CD AE AC D1 		call InsertA														; pop hl
  539 D1:E702 21 E1 E1 E1 		ld hl, 0E1E1E1h
  540 D1:E706 F1 -  -  -  	pop af
  541 D1:E707 3E E1 -  -  	ld a, 0E1h
  542 D1:E709 C3 62 AC D1 	jp InsertAHL															; pop hl \ pop hl \ pop hl \ pop hl
  543 D1:E70D -  -  -  -  	
  544 D1:E70D -  -  -  -  CFunction6Args:
  545 D1:E70D FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  546 D1:E711 CA 05 AF D1 	jp z, ErrorSyntax
  547 D1:E715 2A C9 EB D1 	ld hl, (programPtr)
  548 D1:E719 22 4A E8 D1 	ld (CFunction6ArgsSMC2), hl
  549 D1:E71D 21 C6 52 D0 	ld hl, tempArg1
  550 D1:E721 22 C9 EB D1 	ld (programPtr), hl
  551 D1:E725 CD 28 10 02 	call _IncFetch
  552 D1:E729 CD 0F B2 D1 	call ParseExpression
  553 D1:E72D FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  554 D1:E731 CA 05 AF D1 	jp z, ErrorSyntax
  555 D1:E735 2A C9 EB D1 	ld hl, (programPtr)
  556 D1:E739 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  557 D1:E73D 28 15 -  -  	jr z, +_
  558 D1:E73F FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  559 D1:E743 28 0F -  -  	jr z, +_
  560 D1:E745 2B -  -  -  	dec hl
  561 D1:E746 2B -  -  -  	dec hl
  562 D1:E747 22 C9 EB D1 	ld (programPtr), hl
  563 D1:E74B 2B -  -  -  	dec hl
  564 D1:E74C 2B -  -  -  	dec hl
  565 D1:E74D 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  566 D1:E74F 23 -  -  -  	inc hl
  567 D1:E750 ED 17 -  -  	ld de, (hl)
  568 D1:E752 73 -  -  -  	ld (hl), e
  569 D1:E753 23 -  -  -  	inc hl
  570 D1:E754 CD D7 AC D1 _:	call InsertPushHLDE
  571 D1:E758 E5 -  -  -  	push hl
  572 D1:E759 21 AE 56 D0 		ld hl, tempArg2
  573 D1:E75D 22 C9 EB D1 		ld (programPtr), hl
  574 D1:E761 CD 28 10 02 		call _IncFetch
  575 D1:E765 CD 0F B2 D1 		call ParseExpression
  576 D1:E769 FD CB BF 4E 		bit triggered_a_comma, (iy+fExpression2)
  577 D1:E76D CA 05 AF D1 		jp z, ErrorSyntax
  578 D1:E771 2A C9 EB D1 		ld hl, (programPtr)
  579 D1:E775 FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
  580 D1:E779 28 15 -  -  		jr z, +_
  581 D1:E77B FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  582 D1:E77F 28 0F -  -  		jr z, +_
  583 D1:E781 2B -  -  -  		dec hl
  584 D1:E782 2B -  -  -  		dec hl
  585 D1:E783 22 C9 EB D1 		ld (programPtr), hl
  586 D1:E787 2B -  -  -  		dec hl
  587 D1:E788 2B -  -  -  		dec hl
  588 D1:E789 36 2E -  -  		ld (hl), 02Eh														; ld l, *
  589 D1:E78B 23 -  -  -  		inc hl
  590 D1:E78C ED 17 -  -  		ld de, (hl)
  591 D1:E78E 73 -  -  -  		ld (hl), e
  592 D1:E78F 23 -  -  -  		inc hl
  593 D1:E790 CD D7 AC D1 _:		call InsertPushHLDE
  594 D1:E794 E5 -  -  -  		push hl
  595 D1:E795 21 96 5A D0 			ld hl, tempArg3
  596 D1:E799 22 C9 EB D1 			ld (programPtr), hl
  597 D1:E79D CD 28 10 02 			call _IncFetch
  598 D1:E7A1 CD 0F B2 D1 			call ParseExpression
  599 D1:E7A5 FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
  600 D1:E7A9 CA 05 AF D1 			jp z, ErrorSyntax
  601 D1:E7AD 2A C9 EB D1 			ld hl, (programPtr)
  602 D1:E7B1 FD CB B0 56 			bit arg3_is_small, (iy+fFunction1)
  603 D1:E7B5 28 15 -  -  			jr z, +_
  604 D1:E7B7 FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  605 D1:E7BB 28 0F -  -  			jr z, +_
  606 D1:E7BD 2B -  -  -  			dec hl
  607 D1:E7BE 2B -  -  -  			dec hl
  608 D1:E7BF 22 C9 EB D1 			ld (programPtr), hl
  609 D1:E7C3 2B -  -  -  			dec hl
  610 D1:E7C4 2B -  -  -  			dec hl
  611 D1:E7C5 36 2E -  -  			ld (hl), 02Eh													; ld l, *
  612 D1:E7C7 23 -  -  -  			inc hl
  613 D1:E7C8 ED 17 -  -  			ld de, (hl)
  614 D1:E7CA 73 -  -  -  			ld (hl), e
  615 D1:E7CB 23 -  -  -  			inc hl
  616 D1:E7CC CD D7 AC D1 _:			call InsertPushHLDE
  617 D1:E7D0 E5 -  -  -  			push hl
  618 D1:E7D1 21 7E 5E D0 				ld hl, tempArg4
  619 D1:E7D5 22 C9 EB D1 				ld (programPtr), hl
  620 D1:E7D9 CD 28 10 02 				call _IncFetch
  621 D1:E7DD CD 0F B2 D1 				call ParseExpression
  622 D1:E7E1 FD CB BF 4E 				bit triggered_a_comma, (iy+fExpression2)
  623 D1:E7E5 CA 05 AF D1 				jp z, ErrorSyntax
  624 D1:E7E9 2A C9 EB D1 				ld hl, (programPtr)
  625 D1:E7ED FD CB B0 4E 				bit arg4_is_small, (iy+fFunction1)
  626 D1:E7F1 28 15 -  -  				jr z, +_
  627 D1:E7F3 FD CB C0 66 				bit output_is_number, (iy+fExpression1)
  628 D1:E7F7 28 0F -  -  				jr z, +_
  629 D1:E7F9 2B -  -  -  				dec hl
  630 D1:E7FA 2B -  -  -  				dec hl
  631 D1:E7FB 22 C9 EB D1 				ld (programPtr), hl
  632 D1:E7FF 2B -  -  -  				dec hl
  633 D1:E800 2B -  -  -  				dec hl
  634 D1:E801 36 2E -  -  				ld (hl), 02Eh												; ld l, *
  635 D1:E803 23 -  -  -  				inc hl
  636 D1:E804 ED 17 -  -  				ld de, (hl)
  637 D1:E806 73 -  -  -  				ld (hl), e
  638 D1:E807 23 -  -  -  				inc hl
  639 D1:E808 CD D7 AC D1 _:				call InsertPushHLDE
  640 D1:E80C E5 -  -  -  				push hl
  641 D1:E80D 21 66 62 D0 					ld hl, tempArg5
  642 D1:E811 22 C9 EB D1 					ld (programPtr), hl
  643 D1:E815 CD 28 10 02 					call _IncFetch
  644 D1:E819 CD 0F B2 D1 					call ParseExpression
  645 D1:E81D FD CB BF 4E 					bit triggered_a_comma, (iy+fExpression2)
  646 D1:E821 CA 05 AF D1 					jp z, ErrorSyntax
  647 D1:E825 2A C9 EB D1 					ld hl, (programPtr)
  648 D1:E829 FD CB B0 46 					bit arg5_is_small, (iy+fFunction1)
  649 D1:E82D 28 15 -  -  					jr z, +_
  650 D1:E82F FD CB C0 66 					bit output_is_number, (iy+fExpression1)
  651 D1:E833 28 0F -  -  					jr z, +_
  652 D1:E835 2B -  -  -  					dec hl
  653 D1:E836 2B -  -  -  					dec hl
  654 D1:E837 22 C9 EB D1 					ld (programPtr), hl
  655 D1:E83B 2B -  -  -  					dec hl
  656 D1:E83C 2B -  -  -  					dec hl
  657 D1:E83D 36 2E -  -  					ld (hl), 02Eh											; ld l, *
  658 D1:E83F 23 -  -  -  					inc hl
  659 D1:E840 ED 17 -  -  					ld de, (hl)
  660 D1:E842 73 -  -  -  					ld (hl), e
  661 D1:E843 23 -  -  -  					inc hl
  662 D1:E844 CD D7 AC D1 _:					call InsertPushHLDE
  663 D1:E848 E5 -  -  -  					push hl
  664 D1:E849 -  -  -  -  CFunction6ArgsSMC2 = $+1
  665 D1:E849 21 00 00 00 						ld hl, 0
  666 D1:E84D 22 C9 EB D1 						ld (programPtr), hl
  667 D1:E851 CD 28 10 02 						call _IncFetch
  668 D1:E855 CD 0F B2 D1 						call ParseExpression
  669 D1:E859 FD CB BF 4E 						bit triggered_a_comma, (iy+fExpression2)
  670 D1:E85D C2 05 AF D1 						jp nz, ErrorSyntax
  671 D1:E861 CD D7 AC D1 						call InsertPushHLDE
  672 D1:E865 ED 5B C9 EB 
              D1 -  -  -  						ld de, (programPtr)
  673 D1:E86A E1 -  -  -  					pop hl
  674 D1:E86B 01 66 62 D0 					ld bc, tempArg5
  675 D1:E86F B7 -  -  -  					or a
  676 D1:E870 ED 42 -  -  					sbc hl, bc
  677 D1:E872 E5 -  -  -  					push hl
  678 D1:E873 C1 -  -  -  					pop bc
  679 D1:E874 21 66 62 D0 					ld hl, tempArg5
  680 D1:E878 ED B0 -  -  					ldir
  681 D1:E87A E1 -  -  -  				pop hl
  682 D1:E87B 01 7E 5E D0 				ld bc, tempArg4
  683 D1:E87F B7 -  -  -  				or a
  684 D1:E880 ED 42 -  -  				sbc hl, bc
  685 D1:E882 E5 -  -  -  				push hl
  686 D1:E883 C1 -  -  -  				pop bc
  687 D1:E884 21 7E 5E D0 				ld hl, tempArg4
  688 D1:E888 ED B0 -  -  				ldir
  689 D1:E88A E1 -  -  -  			pop hl
  690 D1:E88B 01 96 5A D0 			ld bc, tempArg3
  691 D1:E88F B7 -  -  -  			or a
  692 D1:E890 ED 42 -  -  			sbc hl, bc
  693 D1:E892 E5 -  -  -  			push hl
  694 D1:E893 C1 -  -  -  			pop bc
  695 D1:E894 21 96 5A D0 			ld hl, tempArg3
  696 D1:E898 ED B0 -  -  			ldir
  697 D1:E89A E1 -  -  -  		pop hl
  698 D1:E89B 01 AE 56 D0 		ld bc, tempArg2
  699 D1:E89F B7 -  -  -  		or a
  700 D1:E8A0 ED 42 -  -  		sbc hl, bc
  701 D1:E8A2 E5 -  -  -  		push hl
  702 D1:E8A3 C1 -  -  -  		pop bc
  703 D1:E8A4 21 AE 56 D0 		ld hl, tempArg2
  704 D1:E8A8 ED B0 -  -  		ldir
  705 D1:E8AA E1 -  -  -  	pop hl
  706 D1:E8AB 01 C6 52 D0 	ld bc, tempArg1
  707 D1:E8AF B7 -  -  -  	or a
  708 D1:E8B0 ED 42 -  -  	sbc hl, bc
  709 D1:E8B2 E5 -  -  -  	push hl
  710 D1:E8B3 C1 -  -  -  	pop bc
  711 D1:E8B4 21 C6 52 D0 	ld hl, tempArg1
  712 D1:E8B8 ED B0 -  -  	ldir
  713 D1:E8BA ED 53 C9 EB 
              D1 -  -  -  	ld (programPtr), de
  714 D1:E8BF 21 F5 EB D1 	ld hl, usedCroutines
  715 D1:E8C3 -  -  -  -  CFunction6ArgsSMC = $+1
  716 D1:E8C3 11 00 00 00 	ld de, 0
  717 D1:E8C7 19 -  -  -  	add hl, de
  718 D1:E8C8 4E -  -  -  	ld c, (hl)
  719 D1:E8C9 06 04 -  -  	ld b, 4
  720 D1:E8CB ED 4C -  -  	mlt bc
  721 D1:E8CD 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
  722 D1:E8D1 09 -  -  -  	add hl, bc
  723 D1:E8D2 CD 77 AC D1 	call InsertCallHL														; call *
  724 D1:E8D6 21 E1 E1 E1 	ld hl, 0E1E1E1h
  725 D1:E8DA E5 -  -  -  	push hl
  726 D1:E8DB D1 -  -  -  	pop de
  727 D1:E8DC C3 A5 AC D1 	jp InsertDEHL															; pop hl (x6)
  728 D1:E8E0 -  -  -  -  	
  729 D1:E8E0 -  -  -  -  CTransparentSpriteNoClip:
  730 D1:E8E0 3E 3C -  -  	ld a, 60
  731 D1:E8E2 18 02 -  -  	jr +_	
  732 D1:E8E4 -  -  -  -  CSpriteNoClip:
  733 D1:E8E4 3E 3B -  -  	ld a, 59
  734 D1:E8E6 FD 36 B0 04 _:	ld (iy+fFunction1), %00000100
  735 D1:E8EA 37 -  -  -  	scf
  736 D1:E8EB ED 62 -  -  	sbc hl, hl
  737 D1:E8ED 36 02 -  -  	ld (hl), 2
  738 D1:E8EF 32 E8 E3 D1 	ld (CFunction3ArgsSMC), a
  739 D1:E8F3 CD DD E2 D1 	call CFunction3Args
  740 D1:E8F7 28 29 -  -  	jr z, +_
  741 D1:E8F9 2A C9 EB D1 	ld hl, (programPtr)
  742 D1:E8FD 11 F5 FF FF 	ld de, -11
  743 D1:E901 19 -  -  -  	add hl, de
  744 D1:E902 E5 -  -  -  	push hl
  745 D1:E903 ED 27 -  -  		ld hl, (hl)
  746 D1:E905 E5 -  -  -  		push hl
  747 D1:E906 D1 -  -  -  		pop de
  748 D1:E907 29 -  -  -  		add hl, hl
  749 D1:E908 19 -  -  -  		add hl, de
  750 D1:E909 11 2F 11 D1 		ld de, spriteStack
  751 D1:E90D 19 -  -  -  		add hl, de
  752 D1:E90E ED 07 -  -  		ld bc, (hl)
  753 D1:E910 D1 -  -  -  	pop de
  754 D1:E911 2A D5 EB D1 	ld hl, (programDataOffsetPtr)
  755 D1:E915 ED 1F -  -  	ld (hl), de
  756 D1:E917 23 -  -  -  	inc hl
  757 D1:E918 23 -  -  -  	inc hl
  758 D1:E919 23 -  -  -  	inc hl
  759 D1:E91A 22 D5 EB D1 	ld (programDataOffsetPtr), hl
  760 D1:E91E EB -  -  -  	ex de, hl
  761 D1:E91F ED 0F -  -  	ld (hl), bc
  762 D1:E921 C9 -  -  -  	ret
  763 D1:E922 2A C9 EB D1 _:	ld hl, (programPtr)
  764 D1:E926 11 F8 FF FF 	ld de, -8
  765 D1:E92A 19 -  -  -  	add hl, de
  766 D1:E92B 22 C9 EB D1 	ld (programPtr), hl
  767 D1:E92F 23 -  -  -  	inc hl
  768 D1:E930 23 -  -  -  	inc hl
  769 D1:E931 ED 27 -  -  	ld hl, (hl)
  770 D1:E933 E5 -  -  -  	push hl
  771 D1:E934 3E 11 -  -  		ld a, 011h
  772 D1:E936 CD AE AC D1 		call InsertA															; ld de, *
  773 D1:E93A CD EA AC D1 		call InsertProgramPtrToDataOffset
  774 D1:E93E 21 FF 18 D1 		ld hl, programDataData
  775 D1:E942 CD 66 AC D1 		call InsertHL															; ld de, RANDOM
  776 D1:E946 21 19 ED 27 		ld hl, 027ED19h
  777 D1:E94A CD 66 AC D1 		call InsertHL															; add hl, de \ ld hl, (hl)
  778 D1:E94E 3E E5 -  -  		ld a, 0E5h
  779 D1:E950 CD AE AC D1 		call InsertA															; push hl
  780 D1:E954 E1 -  -  -  	pop hl
  781 D1:E955 CD 77 AC D1 	call InsertCallHL															; call ******
  782 D1:E959 21 E1 E1 E1 	ld hl, 0E1E1E1h
  783 D1:E95D C3 66 AC D1 	jp InsertHL																	; pop hl \ pop hl \ pop hl
  784 D1:E961 -  -  -  -  	
  785 D1:E961 -  -  -  -  CScaledSpriteNoClip:
  786 D1:E961 3E 3E -  -  	ld a, 62
  787 D1:E963 32 EA E6 D1 _:	ld (CFunction5ArgsSMC), a
  788 D1:E967 FD 36 B0 07 	ld (iy+fFunction1), %00000111
  789 D1:E96B CD 5C E5 D1 	call CFunction5Args
  790 D1:E96F CA 05 AF D1 	jp z, ErrorSyntax
  791 D1:E973 2A C9 EB D1 	ld hl, (programPtr)
  792 D1:E977 11 F3 FF FF 	ld de, -13
  793 D1:E97B 19 -  -  -  	add hl, de
  794 D1:E97C E5 -  -  -  	push hl
  795 D1:E97D ED 27 -  -  		ld hl, (hl)
  796 D1:E97F E5 -  -  -  		push hl
  797 D1:E980 D1 -  -  -  		pop de
  798 D1:E981 29 -  -  -  		add hl, hl
  799 D1:E982 19 -  -  -  		add hl, de
  800 D1:E983 11 2F 11 D1 		ld de, spriteStack
  801 D1:E987 19 -  -  -  		add hl, de
  802 D1:E988 ED 07 -  -  		ld bc, (hl)
  803 D1:E98A D1 -  -  -  	pop de
  804 D1:E98B 2A D5 EB D1 	ld hl, (programDataOffsetPtr)
  805 D1:E98F ED 1F -  -  	ld (hl), de
  806 D1:E991 23 -  -  -  	inc hl
  807 D1:E992 23 -  -  -  	inc hl
  808 D1:E993 23 -  -  -  	inc hl
  809 D1:E994 22 D5 EB D1 	ld (programDataOffsetPtr), hl
  810 D1:E998 EB -  -  -  	ex de, hl
  811 D1:E999 ED 0F -  -  	ld (hl), bc
  812 D1:E99B C9 -  -  -  	ret
  813 D1:E99C -  -  -  -  
  814 D1:E99C -  -  -  -  CTransparentScaledSpriteNoClip:
  815 D1:E99C 3E 3F -  -  	ld a, 63
  816 D1:E99E 18 C3 -  -  	jr -_
  817 D1:E9A0 -  -  -  -  	
  818 D1:E9A0 -  -  -  -  CBegin:
  819 D1:E9A0 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  820 D1:E9A4 C2 05 AF D1 	jp nz, ErrorSyntax
  821 D1:E9A8 21 2E 27 E5 	ld hl, 0E5272Eh
  822 D1:E9AC CD 66 AC D1 	call InsertHL															; ld l, lcdBpp8 \ push hl
  823 D1:E9B0 21 F5 EB D1 	ld hl, usedCroutines
  824 D1:E9B4 4E -  -  -  	ld c, (hl)
  825 D1:E9B5 06 04 -  -  	ld b, 4
  826 D1:E9B7 ED 4C -  -  	mlt bc
  827 D1:E9B9 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
  828 D1:E9BD 09 -  -  -  	add hl, bc
  829 D1:E9BE CD 77 AC D1 	call InsertCallHL														; call *
  830 D1:E9C2 3E E1 -  -  	ld a, 0E1h
  831 D1:E9C4 C3 AE AC D1 	jp InsertA																; pop hl
Listing for file "ICE.asm"
  464 D1:E9C8 -  -  -  -  #include "clibs/graphics.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\clibs\graphics.asm"
    1 D1:E9C8 -  -  -  -  ; Byte: . . . . . . . .
    2 D1:E9C8 -  -  -  -  ;       <---> <------->
    3 D1:E9C8 -  -  -  -  ;       Args  1 = that argument is small (0-255)
    4 D1:E9C8 -  -  -  -  ;       1 1 1:
    5 D1:E9C8 -  -  -  -  ;    	bit   1 set = special
    6 D1:E9C8 -  -  -  -  ;    	bit   1 reset = not implemented
    7 D1:E9C8 -  -  -  -  
    8 D1:E9C8 -  -  -  -  CFunctionsArguments:
    9 D1:E9C8 F0 -  -  -  Begin_:									.db %11110000
   10 D1:E9C9 00 -  -  -  End_:									.db %00000000
   11 D1:E9CA 30 -  -  -  SetColor_:								.db %00110000
   12 D1:E9CB 00 -  -  -  SetDefaultPalette_:						.db %00000000
   13 D1:E9CC E0 -  -  -  SetPalette_:							.db %11100000
   14 D1:E9CD 30 -  -  -  FillScreen_:							.db %00110000
   15 D1:E9CE 48 -  -  -  SetPixel_:								.db %01001000
   16 D1:E9CF E0 -  -  -  GetPixel_:								.db %11100000
   17 D1:E9D0 E0 -  -  -  GetDraw_:								.db %11100000
   18 D1:E9D1 30 -  -  -  SetDraw_:								.db %00110000
   19 D1:E9D2 00 -  -  -  SwapDraw_:								.db %00000000
   20 D1:E9D3 30 -  -  -  Blit_:									.db %00110000
   21 D1:E9D4 7C -  -  -  BlitLines_:								.db %01111100
   22 D1:E9D5 B5 -  -  -  BlitArea_:								.db %10110101
   23 D1:E9D6 30 -  -  -  PrintChar_:								.db %00110000
   24 D1:E9D7 E0 -  -  -  PrintInt_:								.db %11100000
   25 D1:E9D8 48 -  -  -  PrintUInt_:								.db %01001000
   26 D1:E9D9 20 -  -  -  PrintString_:							.db %00100000
   27 D1:E9DA 60 -  -  -  PrintStringXY_:							.db %01100000
   28 D1:E9DB 48 -  -  -  SetTextXY_:								.db %01001000
   29 D1:E9DC 30 -  -  -  SetTextBGColor_:						.db %00110000
   30 D1:E9DD 30 -  -  -  SetTextFGColor_:						.db %00110000
   31 D1:E9DE 30 -  -  -  SetTextTransparentColor_:				.db %00110000
   32 D1:E9DF E0 -  -  -  SetCustomFontData_:						.db %11100000
   33 D1:E9E0 E0 -  -  -  SetCustomFontSpacing_:					.db %11100000
   34 D1:E9E1 30 -  -  -  SetMonospaceFont_:						.db %00110000
   35 D1:E9E2 E0 -  -  -  GetStringWidth_:						.db %11100000
   36 D1:E9E3 E0 -  -  -  GetCharWidth_:							.db %11100000
   37 D1:E9E4 E0 -  -  -  GetTextX_:								.db %11100000
   38 D1:E9E5 E0 -  -  -  GetTextY_:								.db %11100000
   39 D1:E9E6 80 -  -  -  Line_:									.db %10000000
   40 D1:E9E7 60 -  -  -  HorizLine_:								.db %01100000
   41 D1:E9E8 60 -  -  -  VertLine_:								.db %01100000
   42 D1:E9E9 60 -  -  -  Circle_:								.db %01100000
   43 D1:E9EA 60 -  -  -  FillCircle_:							.db %01100000
   44 D1:E9EB 80 -  -  -  Rectangle_:								.db %10000000
   45 D1:E9EC 80 -  -  -  FillRectangle_:							.db %10000000
   46 D1:E9ED 80 -  -  -  LineNoClip_:							.db %10000000
   47 D1:E9EE 60 -  -  -  HorizLineNoClip_:						.db %01100000
   48 D1:E9EF 60 -  -  -  VertLineNoClip_:						.db %01100000
   49 D1:E9F0 60 -  -  -  FillCircleNoClip_:						.db %01100000
   50 D1:E9F1 80 -  -  -  RectangleNoClip_:						.db %10000000
   51 D1:E9F2 80 -  -  -  FillRectangleNoClip_:					.db %10000000
   52 D1:E9F3 82 -  -  -  SetClipRegion_:							.db %10000010
   53 D1:E9F4 E0 -  -  -  GetClipRegion_:							.db %11100000
   54 D1:E9F5 20 -  -  -  ShiftDown_:								.db %00100000
   55 D1:E9F6 20 -  -  -  ShiftUp_:								.db %00100000
   56 D1:E9F7 20 -  -  -  ShiftLeft_:								.db %00100000
   57 D1:E9F8 20 -  -  -  ShiftRight_:							.db %00100000
   58 D1:E9F9 E0 -  -  -  Tilemap_:								.db %11100000
   59 D1:E9FA E0 -  -  -  TilemapNoClip_:							.db %11100000
   60 D1:E9FB E0 -  -  -  TransparentTilemap_:					.db %11100000
   61 D1:E9FC E0 -  -  -  TransparentTilemapNoClip_:				.db %11100000
   62 D1:E9FD E0 -  -  -  TilePtr_:								.db %11100000
   63 D1:E9FE E0 -  -  -  TilePtrMapped_:							.db %11100000
   64 D1:E9FF E0 -  -  -  LZDecompress_:							.db %11100000
   65 D1:EA00 E0 -  -  -  AllocSprite_:							.db %11100000
   66 D1:EA01 E0 -  -  -  Sprite_:								.db %11100000
   67 D1:EA02 E0 -  -  -  TransparentSprite_:						.db %11100000
   68 D1:EA03 F0 -  -  -  SpriteNoClip_:							.db %11110000
   69 D1:EA04 F0 -  -  -  TransparentSpriteNoClip_:				.db %11110000
   70 D1:EA05 E0 -  -  -  GetSpriteNoClip_:						.db %11100000
   71 D1:EA06 F0 -  -  -  ScaledSpriteNoClip_:					.db %11110000
   72 D1:EA07 F0 -  -  -  ScaledTransparentSpriteNoClip_:			.db %11110000
   73 D1:EA08 E0 -  -  -  FlipSpriteY_:							.db %11100000
   74 D1:EA09 E0 -  -  -  FlipSpriteX_:							.db %11100000
   75 D1:EA0A E0 -  -  -  RotateSpriteC_:							.db %11100000
   76 D1:EA0B E0 -  -  -  RotateSpriteCC_:						.db %11100000
   77 D1:EA0C E0 -  -  -  RotateSpriteHalf_:						.db %11100000
   78 D1:EA0D E0 -  -  -  Polygon_:								.db %11100000
   79 D1:EA0E E0 -  -  -  PolygonNoClip_:							.db %11100000
   80 D1:EA0F C0 -  -  -  FillTriangle_:							.db %11000000
   81 D1:EA10 C0 -  -  -  FillTriangleNoClip_:					.db %11000000
   82 D1:EA11 E0 -  -  -  LZDecompressSprite_:					.db %11100000
   83 D1:EA12 58 -  -  -  SetTextScale_:							.db %01011000
   84 D1:EA13 30 -  -  -  SetTransparentColor:					.db %00110000
   85 D1:EA14 00 -  -  -  ZeroScreen:								.db %00000000
   86 D1:EA15 30 -  -  -  SetTextConfig:							.db %00110000
   87 D1:EA16 E0 -  -  -  GetSpriteChar:							.db %11100000
Listing for file "ICE.asm"
  465 D1:EA17 -  -  -  -  #include "data.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\data.asm"
    1 D1:EA17 -  -  -  -  operators_booleans:
    2 D1:EA17 04 40 3D 3C 
              6A 6B 6C 6D 
              6E 6F 82 83 
              70 71 00 -  	.db tStore, tAnd, tXor, tOr, tEQ, tLT, tGT, tLE, tGE, tNE, tMul, tDiv, tAdd, tSub, 0			; 0 = temp +
    3 D1:EA26 -  -  -  -  	;		7	6		6	6		4	5	5	5		5	4	3		2	1	0
    4 D1:EA26 -  -  -  -  operators_special:
    5 D1:EA26 00 01 02 03 
              04 05 05 05 
              05 04 06 06 
              06 07 -  -  	.db 0, 1, 2, 3, 4, 5, 5, 5, 5, 4, 6, 6, 6, 7
    6 D1:EA34 -  -  -  -  	
    7 D1:EA34 -  -  -  -  FunctionsWithReturnValue:
    8 D1:EA34 AD AB 10 -  	.db tGetKey, trand, tLParen
    9 D1:EA37 -  -  -  -  FunctionsWithReturnValueArguments:
   10 D1:EA37 21 1A 19 B8 
              EF -  -  -  	.db tMean, tMin, tMax, tNot, tExtTok
   11 D1:EA3C -  -  -  -  FunctionsWithReturnValueEnd:
   12 D1:EA3C -  -  -  -  
   13 D1:EA3C -  -  -  -  FunctionsWithReturnValueStart:
   14 D1:EA3C 53 C9 D1 E5 
              C8 D1 E0 CA 
              D1 E4 CA D1 
              DC CA D1 -  	.dl functionCE, functionNot, functionMax, functionMin, functionMean
   15 D1:EA4B -  -  -  -  
   16 D1:EA4B -  -  -  -  FunctionsSingle:
   17 D1:EA4B DC E1 D8 CE 
              D1 D2 DE D3 
              D5 62 D6 D7 
              2C B3 -  -  	.db tInput, tClLCD, tPause, tIf, tWhile, tRepeat, tDisp, tFor, tReturn, tVarOut, tLbl, tGoto, tii, tDet
   18 D1:EA59 -  -  -  -  FunctionsSingleEnd:
   19 D1:EA59 -  -  -  -  
   20 D1:EA59 -  -  -  -  FunctionsSingleStart:
   21 D1:EA59 E8 CC D1 A5 
              C4 D1 C4 C4 
              D1 8A C4 D1 
              61 CD D1 EB 
              C4 D1 E0 DE 
              D1 FB C4 D1 	.dl functionC, functionSkipLine, functionGoto, functionLbl, functionCustom, functionReturn, functionFor, functionDisp
   22 D1:EA71 31 C5 D1 92 
              C6 D1 13 C6 
              D1 5A C7 D1 
              3E C7 D1 20 
              C8 D1 -  -  	.dl functionRepeat, functionWhile, functionIf, functionPause, functionClrHome, functionInput
   23 D1:EA83 -  -  -  -  	
   24 D1:EA83 -  -  -  -  operator_start:
   25 D1:EA83 CA CF D1 20 
              D0 D1 81 D0 
              D1 C3 D0 D1 
              55 D1 D1 96 
              AE D1 -  -  	.dl SubNumberXXX, SubVariableXXX, SubChainPushXXX, SubChainAnsXXX, SubFunctionXXX, SubError
   26 D1:EA95 BE D1 D1 F8 
              D1 D1 42 D2 
              D1 8B D2 D1 
              2B D3 D1 9A 
              AE D1 -  -  	.dl AddNumberXXX, AddVariableXXX, AddChainPushXXX, AddChainAnsXXX, AddFunctionXXX, AddError
   27 D1:EAA7 94 D3 D1 F0 
              D3 D1 63 D4 
              D1 AC D4 D1 
              21 D5 D1 9E 
              AE D1 -  -  	.dl DivNumberXXX, DivVariableXXX, DivChainPushXXX, DivChainAnsXXX, DivFunctionXXX, DivError
   28 D1:EAB9 7E D5 D1 BB 
              D5 D1 08 D6 
              D1 54 D6 D1 
              19 D7 D1 A2 
              AE D1 -  -  	.dl MulNumberXXX, MulVariableXXX, MulChainPushXXX, MulChainAnsXXX, MulFunctionXXX, MulError
   29 D1:EACB 66 D9 D1 BC 
              D9 D1 35 DA 
              D1 81 DA D1 
              00 DB D1 C3 
              AE D1 -  -  	.dl NEQNumberXXX, NEQVariableXXX, NEQChainPushXXX, NEQChainAnsXXX, NEQFunctionXXX, NEQError
   30 D1:EADD 8C D7 D1 E9 
              D7 D1 5D D8 
              D1 A4 D8 D1 
              05 D9 D1 A6 
              AE D1 -  -  	.dl GLETNumberXXX, GLETVariableXXX, GLETChainPushXXX, GLETChainAnsXXX, GLETFunctionXXX, GLETError
   31 D1:EAEF 43 DB D1 BF 
              DB D1 44 DC 
              D1 87 DC D1 
              F2 DC D1 D1 
              AE D1 -  -  	.dl XORANDNumberXXX, XORANDVariableXXX, XORANDChainPushXXX, XORANDChainAnsXXX, XORANDFunctionXXX, XORANDError
   32 D1:EB01 35 DD D1 8C 
              DD D1 D2 DD 
              D1 F0 DD D1 
              17 DE D1 66 
              DE D1 -  -  	.dl StoNumberXXX, StoVariableXXX, StoChainPushXXX, StoChainAnsXXX, StoFunctionXXX, StoListXXX
   33 D1:EB13 -  -  -  -  	
   34 D1:EB13 -  -  -  -  CSpecialFunctions:
   35 D1:EB13 3F 3E 3C 3B 
              00 -  -  -  	.db 63, 62, 60, 59, 0
   36 D1:EB18 -  -  -  -  CSpecialFunctionsEnd:
   37 D1:EB18 -  -  -  -  
   38 D1:EB18 -  -  -  -  CSpecialFunctionsStart:
   39 D1:EB18 A0 E9 D1 E4 
              E8 D1 E0 E8 
              D1 61 E9 D1 
              9C E9 D1 -  	.dl CBegin, CSpriteNoClip, CTransparentSpriteNoClip, CScaledSpriteNoClip, CTransparentScaledSpriteNoClip
   40 D1:EB27 -  -  -  -  	
   41 D1:EB27 -  -  -  -  CArguments:
   42 D1:EB27 BD E1 D1 DC 
              E1 D1 27 E2 
              D1 DD E2 D1 
              03 E4 D1 5C 
              E5 D1 0D E7 
              D1 -  -  -  	.dl CFunction0Args, CFunction1Arg, CFunction2Args, CFunction3Args, CFunction4Args, CFunction5Args, CFunction6Args
   43 D1:EB3C CA E1 D1 0F 
              E2 D1 C1 E2 
              D1 E8 E3 D1 
              40 E5 D1 EA 
              E6 D1 EA E6 
              D1 -  -  -  	.dl CFunction0ArgsSMC, CFunction1ArgSMC, CFunction2ArgsSMC, CFunction3ArgsSMC, CFunction4ArgsSMC, CFunction5ArgsSMC, CFunction5ArgsSMC
   44 D1:EB51 -  -  -  -  	
   45 D1:EB51 -  -  -  -  functionCustomStart:
   46 D1:EB51 7E CD D1 B8 
              CD D1 C0 C4 
              D1 6E CE D1 	.dl functionExecHex, functionDefineSprite, functionCall, functionCompilePrgm
   47 D1:EB5D -  -  -  -  	
   48 D1:EB5D 07 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 00 -  precedence:	 .db 7, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  0
   49 D1:EB6C -  -  -  -  	         ;   t+ - + / * ≠ ≥ ≤ > < = or xor and →
   50 D1:EB6C 00 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 06 -  precedence2: .db 0, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  6
   51 D1:EB7B -  -  -  -  	
   52 D1:EB7B -  -  -  -  offsets:
   53 D1:EB7B 83 EA D0 6B 
              EE D0 00 2C 
              D5 D7 F5 D0 
              D7 F5 D0 BF 
              F9 D0 A7 FD 
              D0 83 03 D1 
              5F 09 D1 FF 
              18 D1 -  -  	.dl stack, output, program, programNamesStack, labelStack, gotoStack, programDataOffsetStack, tempStringsStack, tempListsStack, programDataData
   54 D1:EB99 00 00 00 00 
              00 00 00 00 	.fill 8, 0
   55 D1:EBA1 -  -  -  -  offset_end:
   56 D1:EBA1 -  -  -  -  
   57 D1:EBA1 -  -  -  -  lists:
   58 D1:EBA1 1F EA D0 96 
              73 D0 C6 52 
              D0 66 94 D0 
              F6 31 D0 00 
              08 E3 -  -  	.dl L1, L2, L3, L4, L5, L6
   59 D1:EBB3 -  -  -  -  	
   60 D1:EBB3 -  -  -  -  hexadecimals:
   61 D1:EBB3 46 45 44 43 
              42 41 39 38 
              37 36 35 34 
              33 32 31 30 	.db tF, tE, tD, tC, tB, tA, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0
   62 D1:EBC3 -  -  -  -  	
   63 D1:EBC3 83 EA D0 -  stackPtr:				.dl stack
   64 D1:EBC6 6B EE D0 -  outputPtr:				.dl output
   65 D1:EBC9 00 2C D5 -  programPtr:				.dl program
   66 D1:EBCC D7 F5 D0 -  programNamesPtr:		.dl programNamesStack
   67 D1:EBCF D7 F5 D0 -  labelPtr:				.dl labelStack
   68 D1:EBD2 BF F9 D0 -  gotoPtr:				.dl gotoStack
   69 D1:EBD5 A7 FD D0 -  programDataOffsetPtr:	.dl programDataOffsetStack
   70 D1:EBD8 83 03 D1 -  tempStringsPtr:			.dl tempStringsStack
   71 D1:EBDB 5F 09 D1 -  tempListsPtr:			.dl tempListsStack
   72 D1:EBDE FF 18 D1 -  programDataDataPtr:		.dl programDataData
   73 D1:EBE1 00 -  -  -  amountOfPrograms		.db 0
   74 D1:EBE2 00 -  -  -  openedParensE			.db 0
   75 D1:EBE3 00 -  -  -  openedParensF			.db 0
   76 D1:EBE4 00 -  -  -  amountOfArguments		.db 0
   77 D1:EBE5 00 -  -  -  amountOfCRoutines		.db 0
   78 D1:EBE6 00 -  -  -  amountOfEnds			.db 0
   79 D1:EBE7 00 -  -  -  amountOfInput			.db 0
   80 D1:EBE8 00 -  -  -  amountOfPause			.db 0
   81 D1:EBE9 00 -  -  -  ExprOutput				.db 0
   82 D1:EBEA 00 -  -  -  ExprOutput2				.db 0
   83 D1:EBEB 00 -  -  -  AmountOfSubPrograms		.db 0
   84 D1:EBEC -  -  -  -  
   85 D1:EBEC -  -  -  -  varname:
   86 D1:EBEC 06 00 00 00 
              00 00 00 00 
              00 -  -  -  	.db ProtProgObj, 0,0,0,0,0,0,0,0
   87 D1:EBF5 -  -  -  -  	
   88 D1:EBF5 -  -  -  -  usedCroutines:
   89 D1:EBF5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  .fill AMOUNT_OF_C_FUNCTIONS, 0
   90 D1:EC44 -  -  -  -  
   91 D1:EC44 -  -  -  -  ICEAppvar:
   92 D1:EC44 15 49 43 45 
              41 50 50 56 
              00 -  -  -  	.db AppVarObj, "ICEAPPV", 0
   93 D1:EC4D -  -  -  -  ICEProgram:
   94 D1:EC4D 06 49 43 45 
              00 -  -  -  	.db ProtProgObj, "ICE", 0
   95 D1:EC52 -  -  -  -  	
   96 D1:EC52 -  -  -  -  ErrorMessageStandard:
   97 D1:EC52 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 66 6F 
              72 20 27 00 	.db "Invalid arguments for '", 0
   98 D1:EC6A -  -  -  -  EndErrorMessage:
   99 D1:EC6A 54 6F 6F 20 
              6D 61 6E 79 
              20 45 6E 64 
              73 21 00 -  	.db "Too many Ends!", 0
  100 D1:EC79 -  -  -  -  GoodCompileMessage:
  101 D1:EC79 53 75 63 63 
              65 73 66 75 
              6C 6C 79 20 
              63 6F 6D 70 
              69 6C 65 64 
              21 00 -  -  	.db "Succesfully compiled!", 0
  102 D1:EC8F -  -  -  -  NoProgramsMessage:
  103 D1:EC8F 4E 6F 20 70 
              72 6F 67 72 
              61 6D 73 20 
              66 6F 75 6E 
              64 21 00 -  	.db "No programs found!", 0
  104 D1:ECA2 -  -  -  -  InvalidTokenMessage:
  105 D1:ECA2 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              74 6F 6B 65 
              6E 21 00 -  	.db "Unsupported token!", 0
  106 D1:ECB5 -  -  -  -  InvalidListArgumentMessage:
  107 D1:ECB5 4F 6E 6C 79 
              20 69 6E 74 
              65 67 65 72 
              73 20 69 6E 
              20 6C 69 73 
              74 73 20 73 
              75 70 70 6F 
              72 74 65 64 
              21 00 -  -  	.db "Only integers in lists supported!", 0
  108 D1:ECD7 -  -  -  -  InvalidNameLengthMessage:
  109 D1:ECD7 50 72 6F 67 
              72 61 6D 20 
              6E 61 6D 65 
              20 74 6F 6F 
              20 6C 6F 6E 
              67 21 00 -  	.db "Program name too long!", 0
  110 D1:ECEE -  -  -  -  SameNameMessage:
  111 D1:ECEE 4F 75 74 70 
              75 74 20 6E 
              61 6D 65 20 
              69 73 20 74 
              68 65 20 73 
              61 6D 65 20 
              61 73 20 69 
              6E 70 75 74 
              20 6E 61 6D 
              65 21 00 -  	.db "Output name is the same as input name!", 0
  112 D1:ED15 -  -  -  -  WrongSpriteDataMessgae:
  113 D1:ED15 49 6E 76 61 
              6C 69 64 20 
              73 70 72 69 
              74 65 20 64 
              61 74 61 21 
              00 -  -  -  	.db "Invalid sprite data!", 0
  114 D1:ED2A -  -  -  -  FunctionFunctionMessage:
  115 D1:ED2A 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 61 20 
              66 75 6E 63 
              74 69 6F 6E 
              20 69 6E 20 
              61 20 66 75 
              6E 63 74 69 
              6F 6E 21 00 	.db "You can't use a function in a function!", 0
  116 D1:ED52 -  -  -  -  NotFoundMessage:
  117 D1:ED52 50 72 6F 67 
              72 61 6D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 21 00 -  	.db "Program not found!", 0
  118 D1:ED65 -  -  -  -  ImplementMessage:
  119 D1:ED65 54 68 69 73 
              20 66 75 6E 
              63 74 69 6F 
              6E 20 68 61 
              73 20 6E 6F 
              74 20 62 65 
              65 6E 20 69 
              6D 70 6C 65 
              6D 65 6E 74 
              65 64 20 79 
              65 74 21 00 	.db "This function has not been implemented yet!", 0
  120 D1:ED91 -  -  -  -  SyntaxErrorMessage:
  121 D1:ED91 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 65 6E 
              74 65 72 65 
              64 21 00 -  	.db "Invalid arguments entered!", 0
  122 D1:EDAC -  -  -  -  TooLargeLoopMessage:
  123 D1:EDAC 54 6F 6F 20 
              6C 61 72 67 
              65 20 61 6E 
              6F 6E 79 6D 
              6F 75 73 20 
              6C 6F 6F 70 
              21 00 -  -  	.db "Too large anonymous loop!", 0
  124 D1:EDC6 -  -  -  -  UsedCodeMessage:
  125 D1:EDC6 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 63 6F 
              64 65 20 62 
              65 66 6F 72 
              65 20 44 65 
              66 69 6E 65 
              53 70 72 69 
              74 65 28 29 
              21 00 -  -  	.db "You can't use code before DefineSprite()!", 0
  126 D1:EDF0 -  -  -  -  LineNumber:
  127 D1:EDF0 45 72 72 6F 
              72 20 6F 6E 
              20 6C 69 6E 
              65 20 00 -  	.db "Error on line ", 0
  128 D1:EDFF -  -  -  -  MismatchErrorMessage:
  129 D1:EDFF 4D 69 73 6D 
              61 74 63 68 
              65 64 20 70 
              61 72 65 6E 
              74 68 65 73 
              69 73 21 00 	.db "Mismatched parenthesis!", 0
  130 D1:EE17 -  -  -  -  UnknownMessage:
  131 D1:EE17 53 6F 6D 65 
              74 68 69 6E 
              67 20 77 65 
              6E 74 20 77 
              72 6F 6E 67 
              21 20 50 6C 
              65 61 73 65 
              20 72 65 70 
              6F 72 74 20 
              69 74 21 00 	.db "Something went wrong! Please report it!", 0
  132 D1:EE3F -  -  -  -  NotEnoughMem:
  133 D1:EE3F 4E 6F 74 20 
              65 6E 6F 75 
              67 68 20 66 
              72 65 65 20 
              52 41 4D 21 
              00 -  -  -  	.db "Not enough free RAM!", 0
  134 D1:EE54 -  -  -  -  LabelErrorMessage:
  135 D1:EE54 43 61 6E 27 
              74 20 66 69 
              6E 64 20 73 
              70 65 63 69 
              66 69 63 20 
              6C 61 62 65 
              6C 21 00 -  	.db "Can't find specific label!", 0
  136 D1:EE6F -  -  -  -  StartParseMessage:
  137 D1:EE6F 43 6F 6D 70 
              69 6C 69 6E 
              67 20 70 72 
              6F 67 72 61 
              6D 20 00 -  	.db "Compiling program ", 0
  138 D1:EE82 -  -  -  -  ICEName:
  139 D1:EE82 49 43 45 20 
              43 6F 6D 70 
              69 6C 65 72 
              20 76 31 2E 
              32 20 2D 20 
              42 79 20 50 
              65 74 65 72 
              20 22 50 54 
              5F 22 20 54 
              69 6C 6C 65 
              6D 61 00 -  	.db "ICE Compiler v1.2 - By Peter \"PT_\" Tillema", 0
  140 D1:EEAD -  -  -  -  PressKey:
  141 D1:EEAD 5B 50 72 65 
              73 73 20 61 
              6E 79 20 6B 
              65 79 20 74 
              6F 20 65 78 
              69 74 5D 00 	.db "[Press any key to exit]", 0
  142 D1:EEC5 -  -  -  -  	
  143 D1:EEC5 -  -  -  -  MulTable:
  144 D1:EEC5 01 29 00 00 
              00 00 00 00 
              00 00 -  -  	.db 1 \ add hl, hl \ .db 0,0,0,0,0,0,0,0
  145 D1:EECF 04 E5 D1 29 
              19 00 00 00 
              00 00 -  -  	.db 4 \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0,0
  146 D1:EED9 02 29 29 00 
              00 00 00 00 
              00 00 -  -  	.db 2 \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0,0
  147 D1:EEE3 05 E5 D1 29 
              29 19 00 00 
              00 00 -  -  	.db 5 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0,0
  148 D1:EEED 05 29 E5 D1 
              29 19 00 00 
              00 00 -  -  	.db 5 \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0
  149 D1:EEF7 06 E5 D1 29 
              19 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0,0
  150 D1:EF01 03 29 29 29 
              00 00 00 00 
              00 00 -  -  	.db 3 \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0
  151 D1:EF0B 06 E5 D1 29 
              29 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0
  152 D1:EF15 06 E5 D1 29 
              29 19 29 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0,0
  153 D1:EF1F 07 E5 D1 29 
              29 19 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0
  154 D1:EF29 06 29 29 E5 
              D1 29 19 00 
              00 00 -  -  	.db 6 \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0
  155 D1:EF33 09 E5 C1 29 
              29 E5 D1 29 
              19 09 -  -  	.db 9 \ push hl \ pop bc \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, bc
  156 D1:EF3D 07 E5 D1 29 
              19 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0
  157 D1:EF47 09 E5 D1 29 
              29 29 29 B7 
              ED 52 -  -  	.db 9 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ or a \ sbc hl, de
  158 D1:EF51 04 29 29 29 
              29 00 00 00 
              00 00 -  -  	.db 4 \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0
  159 D1:EF5B 07 E5 D1 29 
              29 29 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0
  160 D1:EF65 07 E5 D1 29 
              29 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0
  161 D1:EF6F 08 01 13 00 
              00 CD 54 01 
              00 00 -  -  	.db 8 \ ld bc, 19 \ call __imulu \ .db 0
  162 D1:EF79 07 E5 D1 29 
              29 19 29 29 
              00 -  -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ .db 0
  163 D1:EF82 -  -  -  -  	
  164 D1:EF82 -  -  -  -  InputRoutine:
  165 D1:EF82 CD 14 08 02 	call _ClrScrn
  166 D1:EF86 CD 28 08 02 	call _HomeUp
  167 D1:EF8A AF -  -  -  	xor	a, a
  168 D1:EF8B 32 79 08 D0 	ld (ioPrompt), a
  169 D1:EF8F 32 99 05 D0 	ld	(curUnder), a
  170 D1:EF93 CD 20 13 02 	call _GetStringInput
  171 D1:EF97 2A 4E 24 D0 	ld	hl, (editSym)
  172 D1:EF9B CD E8 0A 02 	call _VarNameToOP1HL
  173 D1:EF9F CD 0C 05 02 	call _ChkFindSym
  174 D1:EFA3 1A -  -  -  	ld a, (de)
  175 D1:EFA4 13 -  -  -  	inc de
  176 D1:EFA5 13 -  -  -  	inc de
  177 D1:EFA6 47 -  -  -  	ld b, a
  178 D1:EFA7 ED 62 -  -  	sbc hl, hl
  179 D1:EFA9 C5 -  -  -  _:	push bc
  180 D1:EFAA 29 -  -  -  		add hl, hl
  181 D1:EFAB E5 -  -  -  		push hl
  182 D1:EFAC C1 -  -  -  		pop bc
  183 D1:EFAD 29 -  -  -  		add hl, hl
  184 D1:EFAE 29 -  -  -  		add hl, hl
  185 D1:EFAF 09 -  -  -  		add hl, bc
  186 D1:EFB0 1A -  -  -  		ld a, (de)
  187 D1:EFB1 D6 30 -  -  		sub t0
  188 D1:EFB3 01 00 00 00 		ld bc, 0
  189 D1:EFB7 4F -  -  -  		ld c, a
  190 D1:EFB8 09 -  -  -  		add hl, bc
  191 D1:EFB9 13 -  -  -  		inc de
  192 D1:EFBA C1 -  -  -  	pop bc
  193 D1:EFBB 10 EC -  -  	djnz -_
  194 D1:EFBD -  -  -  -  InputOffset = $+2
  195 D1:EFBD DD 2F 00 -  	ld (ix+0), hl
  196 D1:EFC0 C3 78 15 02 	jp _DeleteTempEditEqu
  197 D1:EFC4 -  -  -  -  InputRoutineEnd:
  198 D1:EFC4 -  -  -  -  
  199 D1:EFC4 -  -  -  -  RandRoutine:
  200 D1:EFC4 DD 27 51 -  	ld hl, (ix+rand1)
  201 D1:EFC7 DD 17 54 -  	ld de, (ix+rand1+3)
  202 D1:EFCA 44 -  -  -  	ld b, h
  203 D1:EFCB 4D -  -  -  	ld c, l
  204 D1:EFCC 29 -  -  -  	add hl, hl
  205 D1:EFCD CB 13 -  -  	rl e
  206 D1:EFCF CB 12 -  -  	rl d
  207 D1:EFD1 29 -  -  -  	add hl, hl
  208 D1:EFD2 CB 13 -  -  	rl e
  209 D1:EFD4 CB 12 -  -  	rl d
  210 D1:EFD6 2C -  -  -  	inc l
  211 D1:EFD7 09 -  -  -  	add hl, bc
  212 D1:EFD8 DD 2F 51 -  	ld (ix+rand1), hl
  213 D1:EFDB ED 5A -  -  	adc hl, de
  214 D1:EFDD DD 2F 54 -  	ld (ix+rand1+3), hl
  215 D1:EFE0 EB -  -  -  	ex de, hl
  216 D1:EFE1 DD 27 57 -  	ld hl, (ix+rand1+6)
  217 D1:EFE4 DD 07 5A -  	ld bc, (ix+rand1+9)
  218 D1:EFE7 29 -  -  -  	add hl, hl
  219 D1:EFE8 CB 11 -  -  	rl c
  220 D1:EFEA CB 10 -  -  	rl b
  221 D1:EFEC DD 0F 5A -  	ld (ix+rand1+9), bc
  222 D1:EFEF 9F -  -  -  	sbc a, a
  223 D1:EFF0 E6 C5 -  -  	and %11000101
  224 D1:EFF2 AD -  -  -  	xor l
  225 D1:EFF3 6F -  -  -  	ld l, a
  226 D1:EFF4 DD 2F 57 -  	ld (ix+rand1+6), hl
  227 D1:EFF7 EB -  -  -  	ex de, hl
  228 D1:EFF8 09 -  -  -  	add hl, bc
  229 D1:EFF9 C9 -  -  -  	ret
  230 D1:EFFA -  -  -  -  RandRoutineEnd:
  231 D1:EFFA -  -  -  -  
  232 D1:EFFA -  -  -  -  DispNumberRoutine:
  233 D1:EFFA 3E 12 -  -  	ld a, 18
  234 D1:EFFC 32 96 05 D0 	ld (curCol), a
  235 D1:F000 CD E0 1E 02 	call _DispHL
  236 D1:F004 CD F0 07 02 	call _NewLine
  237 D1:F008 -  -  -  -  	
  238 D1:F008 -  -  -  -  DispStringRoutine:
  239 D1:F008 AF -  -  -  	xor a
  240 D1:F009 32 96 05 D0 	ld (curCol), a
  241 D1:F00D CD C0 07 02 	call _PutS
  242 D1:F011 CD F0 07 02 	call _NewLine
  243 D1:F015 -  -  -  -  
  244 D1:F015 -  -  -  -  PauseRoutine:
  245 D1:F015 2B -  -  -  	dec hl
  246 D1:F016 -  -  -  -  PauseRoutine2:
  247 D1:F016 0E 6E -  -  	ld c, 110
  248 D1:F018 06 20 -  -  _:	ld b, 32
  249 D1:F01A 10 FE -  -  	djnz $
  250 D1:F01C 0D -  -  -  	dec c
  251 D1:F01D 20 F9 -  -  	jr nz, -_
  252 D1:F01F B7 -  -  -  	or a
  253 D1:F020 11 FF FF FF 	ld de, -1
  254 D1:F024 19 -  -  -  	add hl, de
  255 D1:F025 38 EF -  -  	jr c, PauseRoutine2
  256 D1:F027 C9 -  -  -  	ret
  257 D1:F028 -  -  -  -  PauseRoutineEnd:
  258 D1:F028 -  -  -  -  
  259 D1:F028 -  -  -  -  MeanRoutine:
  260 D1:F028 DD 21 00 00 
              00 -  -  -  	ld ix, 0
  261 D1:F02D DD 39 -  -  	add ix, sp
  262 D1:F02F 19 -  -  -  	add hl, de
  263 D1:F030 E5 -  -  -  	push hl
  264 D1:F031 DD CB FF 1E 		rr (ix-1)
  265 D1:F035 E1 -  -  -  	pop hl
  266 D1:F036 CB 1C -  -  	rr h
  267 D1:F038 CB 1D -  -  	rr l
  268 D1:F03A DD 21 00 08 
              E3 -  -  -  	ld ix, cursorImage
  269 D1:F03F C9 -  -  -  	ret
  270 D1:F040 -  -  -  -  MeanRoutineEnd:
  271 D1:F040 -  -  -  -  
  272 D1:F040 -  -  -  -  KeypadRoutine:
  273 D1:F040 F3 -  -  -  	di
  274 D1:F041 21 00 00 F5 	ld hl, 0F50000h
  275 D1:F045 36 02 -  -  	ld (hl), 2
  276 D1:F047 AF -  -  -  	xor a
  277 D1:F048 BE -  -  -  _:	cp a, (hl)
  278 D1:F049 20 FD -  -  	jr nz, -_
  279 D1:F04B FB -  -  -  	ei
  280 D1:F04C 68 -  -  -  	ld l, b
  281 D1:F04D 7E -  -  -  	ld a, (hl)
  282 D1:F04E ED 62 -  -  	sbc hl, hl
  283 D1:F050 A1 -  -  -  	and c
  284 D1:F051 C8 -  -  -  	ret z
  285 D1:F052 2C -  -  -  	inc l
  286 D1:F053 C9 -  -  -  	ret
  287 D1:F054 -  -  -  -  KeypadRoutineEnd:
  288 D1:F054 -  -  -  -  
  289 D1:F054 -  -  -  -  XORANDData:
  290 D1:F054 01 FF FF FF 	ld bc, -1
  291 D1:F058 09 -  -  -  	add hl, bc
  292 D1:F059 9F -  -  -  	sbc a, a
  293 D1:F05A EB -  -  -  	ex de, hl
  294 D1:F05B 57 -  -  -  	ld d, a
  295 D1:F05C 09 -  -  -  	add hl, bc
  296 D1:F05D 9F -  -  -  	sbc a, a
  297 D1:F05E -  -  -  -  XORANDSMC:
  298 D1:F05E A2 -  -  -  	and a, d
  299 D1:F05F ED 62 -  -  	sbc hl, hl
  300 D1:F061 E6 01 -  -  	and 1
  301 D1:F063 6F -  -  -  	ld l, a
  302 D1:F064 -  -  -  -  	
  303 D1:F064 -  -  -  -  BackgroundData:
  304 D1:F064 7D -  -  -  	ld a, l
  305 D1:F065 21 00 00 D4 	ld hl, vRAM
  306 D1:F069 77 -  -  -  	ld (hl), a
  307 D1:F06A E5 -  -  -  	push hl
  308 D1:F06B D1 -  -  -  	pop de
  309 D1:F06C 13 -  -  -  	inc de
  310 D1:F06D 01 FF 2B 01 	ld bc, 320*240-1
  311 D1:F071 ED B0 -  -  	ldir
  312 D1:F073 -  -  -  -  
  313 D1:F073 -  -  -  -  CData:
  314 D1:F073 DD 21 00 08 
              E3 -  -  -  	ld ix, cursorImage
  315 D1:F078 21 DE A8 D1 	ld hl, 0D1A8DEh						; LibLoadAppVar
  316 D1:F07C CD 20 03 02 	call _Mov9ToOP1
  317 D1:F080 3E 15 -  -  	ld a, AppVarObj
  318 D1:F082 32 F8 05 D0 	ld (OP1), a
  319 D1:F086 CD 0C 05 02 _:	call _ChkFindSym
  320 D1:F08A 38 24 -  -  	jr c, NotFound
  321 D1:F08C CD 98 1F 02 	call _ChkInRAM
  322 D1:F090 20 0E -  -  	jr nz, InArc
  323 D1:F092 CD 28 06 02 	call _PushOP1
  324 D1:F096 CD 48 14 02 	call _Arc_UnArc
  325 D1:F09A CD C4 05 02 	call _PopOP1
  326 D1:F09E 18 E6 -  -  	jr -_
  327 D1:F0A0 -  -  -  -  InArc:
  328 D1:F0A0 EB -  -  -  	ex de, hl
  329 D1:F0A1 11 09 00 00 	ld de, 9
  330 D1:F0A5 19 -  -  -  	add hl, de
  331 D1:F0A6 5E -  -  -  	ld e, (hl)
  332 D1:F0A7 19 -  -  -  	add hl, de
  333 D1:F0A8 23 -  -  -  	inc hl
  334 D1:F0A9 23 -  -  -  	inc hl
  335 D1:F0AA 23 -  -  -  	inc hl
  336 D1:F0AB 11 FC A8 D1 	ld de, 0D1A8FCh						; RelocationStart
  337 D1:F0AF E9 -  -  -  	jp (hl)
  338 D1:F0B0 -  -  -  -  NotFound:
  339 D1:F0B0 CD 14 08 02 	call _ClrScrn
  340 D1:F0B4 CD 28 08 02 	call _HomeUp
  341 D1:F0B8 21 DA A8 D1 	ld hl, 0D1A8DAh						; MissingAppVar
  342 D1:F0BC CD C0 07 02 	call _PutS
  343 D1:F0C0 CD F0 07 02 	call _NewLine
  344 D1:F0C4 CD C0 07 02 	call _PutS
  345 D1:F0C8 C3 8C 0D 02 	jp _GetKey
  346 D1:F0CC -  -  -  -  MissingAppVar:
  347 D1:F0CC 4E 65 65 64 	.db "Need"
  348 D1:F0D0 -  -  -  -  LibLoadAppVar:
  349 D1:F0D0 20 4C 69 62 
              4C 6F 61 64 
              00 -  -  -  	.db " LibLoad", 0
  350 D1:F0D9 68 74 74 70 
              3A 2F 2F 74 
              69 6E 79 2E 
              63 63 2F 63 
              6C 69 62 73 
              00 -  -  -  	.db "http://tiny.cc/clibs", 0
  351 D1:F0EE -  -  -  -  RelocationStart:
  352 D1:F0EE C0 47 52 41 
              50 48 58 00 
              02 -  -  -  	.db 0C0h, "GRAPHX", 0, 2
  353 D1:F0F7 -  -  -  -  CData2:
Listing for file "ICE.asm"
  466 D1:F0F7 -  -  -  -  
  467 D1:F0F7 -  -  -  -  .echo $-start+14
