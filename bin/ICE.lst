    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\ti84pce.inc"
Listing for file "ice.asm"
    2 00:0000 -  -  -  -  #include "defines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\defines.asm"
    1 00:0000 -  -  -  -  tempToken		.equ	saveSScreen+00
    2 00:0000 -  -  -  -  tempToken2		.equ	saveSScreen+01
    3 00:0000 -  -  -  -  InputStartData		.equ	saveSScreen+02
    4 00:0000 -  -  -  -  RandStartData		.equ	saveSScreen+05
    5 00:0000 -  -  -  -  PauseStartData		.equ	saveSScreen+08
    6 00:0000 -  -  -  -  MeanStartData		.equ	saveSScreen+11
    7 00:0000 -  -  -  -  KeypadStartData		.equ	saveSScreen+14
    8 00:0000 -  -  -  -  RootStartData		.equ	saveSScreen+17
    9 00:0000 -  -  -  -  PrevProgramPtr		.equ	saveSScreen+20
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  stack			.equ	saveSScreen+00100
   12 00:0000 -  -  -  -  output			.equ	saveSScreen+01100
   13 00:0000 -  -  -  -  programNamesStack	.equ	saveSScreen+03000
   14 00:0000 -  -  -  -  labelStack		.equ	saveSScreen+03000
   15 00:0000 -  -  -  -  gotoStack		.equ	saveSScreen+04000
   16 00:0000 -  -  -  -  programDataOffsetStack	.equ	saveSScreen+05000
   17 00:0000 -  -  -  -  tempStringsStack	.equ	saveSScreen+06500
   18 00:0000 -  -  -  -  tempListsStack		.equ	saveSScreen+08000
   19 00:0000 -  -  -  -  programDataData		.equ	saveSScreen+11000
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  tempArg1		.equ	pixelShadow2+0000
   22 00:0000 -  -  -  -  tempArg2		.equ	pixelShadow2+1000
   23 00:0000 -  -  -  -  tempArg3		.equ	pixelShadow2+2000
   24 00:0000 -  -  -  -  tempArg4		.equ	pixelShadow2+3000
   25 00:0000 -  -  -  -  tempArg5		.equ	pixelShadow2+4000
   26 00:0000 -  -  -  -  tempArg6		.equ	pixelShadow2+5000
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  startTab		.equ	saveSScreen
   29 00:0000 -  -  -  -  
   30 00:0000 -  -  -  -  program			.equ	vRAM+(320*240)
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  fProgram1		.equ	-30h
   33 00:0000 -  -  -  -  comp_with_libs		.equ	0						;	used if compile with C libs
   34 00:0000 -  -  -  -  good_compilation	.equ	1						;	used if compilation is succesfull
   35 00:0000 -  -  -  -  has_already_input	.equ	2						;	only once the "Input" routine
   36 00:0000 -  -  -  -  has_already_rand	.equ	3						;	only once the "rand" routine
   37 00:0000 -  -  -  -  has_already_pause	.equ	4						;	only once the "Pause" routine
   38 00:0000 -  -  -  -  has_already_mean	.equ	5						;	only once the "mean()" routine
   39 00:0000 -  -  -  -  has_already_keypad	.equ	6						;	only once the scanning the keypad
   40 00:0000 -  -  -  -  used_code		.equ	7						;	DefineSprite( must be in front of all the code
   41 00:0000 -  -  -  -  
   42 00:0000 -  -  -  -  fProgram2		.equ	-31h
   43 00:0000 -  -  -  -  has_already_root	.equ	0						;	only once the "Sqrt(" routine
   44 00:0000 -  -  -  -  
   45 00:0000 -  -  -  -  fExpression1		.equ	-40h
   46 00:0000 -  -  -  -  prev_is_number		.equ	0						;	used if a number consists of more digits
   47 00:0000 -  -  -  -  chain_operators		.equ	1						;	used if the calculation is needed for another calculation
   48 00:0000 -  -  -  -  last_token_is_ret	.equ	2						;	used if last token is "Return"
   49 00:0000 -  -  -  -  op_is_last_one		.equ	3						;	used if the operator is the last of that line
   50 00:0000 -  -  -  -  output_is_number	.equ	4						;	used if the calculation is only a single number, loop-statements can be 
   51 00:0000 -  -  -  -  ans_set_z_flag		.equ	5						;	used if the previous calculation sets the zero flag, useful for loop/conditions
   52 00:0000 -  -  -  -  need_push		.equ	6						;	used if Ans may not be overwritten
   53 00:0000 -  -  -  -  output_is_string	.equ	7						;	used for strings
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  fExpression2		.equ	-41h
   56 00:0000 -  -  -  -  use_mean_routine	.equ	0						;	used if the function is mean()
   57 00:0000 -  -  -  -  last_token_was_not	.equ	1						;	used if the last token is "not(", which can be optimized at If/Repeat/While
   58 00:0000 -  -  -  -  
   59 00:0000 -  -  -  -  fExpression3		.equ	-42h
   60 00:0000 -  -  -  -  triggered_a_comma	.equ	0						;	used if a comma is entered outside parens, used by functions
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  fFunction1		.equ	-50h
   63 00:0000 -  -  -  -  arg1_is_small		.equ	4						;	used in C functions
   64 00:0000 -  -  -  -  function_implemented	.equ	4						;	used if C function is implemented
   65 00:0000 -  -  -  -  arg2_is_small		.equ	3						;	used in C functions
   66 00:0000 -  -  -  -  arg3_is_small		.equ	2						;	used in C functions
   67 00:0000 -  -  -  -  arg4_is_small		.equ	1						;	used in C functions
   68 00:0000 -  -  -  -  arg5_is_small		.equ	0						;	used in C functions
   69 00:0000 -  -  -  -  
   70 00:0000 -  -  -  -  fFunction2		.equ	-51h
   71 00:0000 -  -  -  -  negative_for_step	.equ	0						;	used for the step in a For loop
   72 00:0000 -  -  -  -  for_step_is_number	.equ	1						;	used for the step in a For loop
   73 00:0000 -  -  -  -  end_point_is_number	.equ	2						;	used for the end point in a For loop
   74 00:0000 -  -  -  -  
   75 00:0000 -  -  -  -  fAlways1		.equ	-50h
   76 00:0000 -  -  -  -  displayed_det		.equ	0						;	used if the text of a det( function is displayed in the statusbar
   77 00:0000 -  -  -  -  modified_iy		.equ	1						;	used if iy is modified by a C routine
   78 00:0000 -  -  -  -  
   79 00:0000 -  -  -  -  typeNumber		.equ	0
   80 00:0000 -  -  -  -  typeVariable		.equ	1
   81 00:0000 -  -  -  -  typeChainPush		.equ	2
   82 00:0000 -  -  -  -  typeChainAns		.equ	3
   83 00:0000 -  -  -  -  typeReturnValue		.equ	4						;	getKey, rand
   84 00:0000 -  -  -  -  typeList		.equ	5
   85 00:0000 -  -  -  -  typeOSList		.equ	6
   86 00:0000 -  -  -  -  typeString		.equ	7
   87 00:0000 -  -  -  -  typeFunction		.equ	00111111b
   88 00:0000 -  -  -  -  typeOperator		.equ	00011111b
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  ChainPush		.equ	0
   91 00:0000 -  -  -  -  ChainAns		.equ	1
   92 00:0000 -  -  -  -  ChainListPush		.equ	2
   93 00:0000 -  -  -  -  ChainListAns		.equ	3
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  OutputInBC		.equ	0
   96 00:0000 -  -  -  -  OutputInDE		.equ	1
   97 00:0000 -  -  -  -  OutputInHL		.equ	2
   98 00:0000 -  -  -  -  
   99 00:0000 -  -  -  -  OutputIsInDE		.equ	0
  100 00:0000 -  -  -  -  OutputIsInHL		.equ	1
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ;---------------------------;
  103 00:0000 -  -  -  -  ;----- User Variables ------;
  104 00:0000 -  -  -  -  ;---------------------------;
  105 00:0000 -  -  -  -  Str0			.equ	saveSScreen+15500
  106 00:0000 -  -  -  -  Str1			.equ	saveSScreen+16000
  107 00:0000 -  -  -  -  Str2			.equ	saveSScreen+16500
  108 00:0000 -  -  -  -  Str3			.equ	saveSScreen+17000
  109 00:0000 -  -  -  -  Str4			.equ	saveSScreen+17500
  110 00:0000 -  -  -  -  Str5			.equ	saveSScreen+18000
  111 00:0000 -  -  -  -  Str6			.equ	saveSScreen+18500
  112 00:0000 -  -  -  -  Str7			.equ	saveSScreen+19000
  113 00:0000 -  -  -  -  Str8			.equ	saveSScreen+19500
  114 00:0000 -  -  -  -  Str9			.equ	saveSScreen+20000
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  L1			.equ	saveSScreen
  117 00:0000 -  -  -  -  L2			.equ	cmdPixelShadow
  118 00:0000 -  -  -  -  L3			.equ	pixelShadow2
  119 00:0000 -  -  -  -  L4			.equ	plotSScreen
  120 00:0000 -  -  -  -  L5			.equ	pixelShadow
  121 00:0000 -  -  -  -  L6			.equ	L1+10000
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ; IX offsets
  124 00:0000 -  -  -  -  vA			.equ	0
  125 00:0000 -  -  -  -  vB			.equ	3
  126 00:0000 -  -  -  -  vC			.equ	6
  127 00:0000 -  -  -  -  vD			.equ	9
  128 00:0000 -  -  -  -  vE			.equ	12
  129 00:0000 -  -  -  -  vF			.equ	15
  130 00:0000 -  -  -  -  vG			.equ	18
  131 00:0000 -  -  -  -  vH			.equ	21
  132 00:0000 -  -  -  -  vI			.equ	24
  133 00:0000 -  -  -  -  vJ			.equ	27
  134 00:0000 -  -  -  -  vK			.equ	30
  135 00:0000 -  -  -  -  vL			.equ	33
  136 00:0000 -  -  -  -  vM			.equ	36
  137 00:0000 -  -  -  -  vN			.equ	39
  138 00:0000 -  -  -  -  vO			.equ	42
  139 00:0000 -  -  -  -  vP			.equ	45
  140 00:0000 -  -  -  -  vQ			.equ	48
  141 00:0000 -  -  -  -  vR			.equ	51
  142 00:0000 -  -  -  -  vS			.equ	54
  143 00:0000 -  -  -  -  vT			.equ	57
  144 00:0000 -  -  -  -  vU			.equ	60
  145 00:0000 -  -  -  -  vV			.equ	63
  146 00:0000 -  -  -  -  vW			.equ	66
  147 00:0000 -  -  -  -  vX			.equ	69
  148 00:0000 -  -  -  -  vY			.equ	72
  149 00:0000 -  -  -  -  vZ			.equ	75
  150 00:0000 -  -  -  -  vtheta			.equ	78
  151 00:0000 -  -  -  -  
  152 00:0000 -  -  -  -  rand1			.equ	81
  153 00:0000 -  -  -  -  rand2			.equ	84
Listing for file "ice.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 EF 7B -  -  .db tExtTok, tAsm84CeCmp
    5 00:0002 -  -  -  -  .org UserMem
    6 D1:A881 -  -  -  -  
    7 D1:A881 -  -  -  -  start:
    8 D1:A881 ED 73 28 B0 
              D1 -  -  -  	ld	(backupSP), sp
    9 D1:A886 2A 17 23 D0 	ld	hl, (begPC)
   10 D1:A88A 22 2C B0 D1 	ld	(backupBegPC), hl
   11 D1:A88E 2A 1A 23 D0 	ld	hl, (curPC)
   12 D1:A892 22 34 B0 D1 	ld	(backupCurPC), hl
   13 D1:A896 2A 1D 23 D0 	ld	hl, (endPC)
   14 D1:A89A 22 3C B0 D1 	ld	(backupEndPC), hl
   15 D1:A89E CD 48 08 02 	call	_RunIndicOff
   16 D1:A8A2 CD E8 BC D1 	call	InstallHooks
   17 D1:A8A6 -  -  -  -  GUI:
   18 D1:A8A6 3E 27 -  -  	ld	a, lcdBpp8
   19 D1:A8A8 32 18 00 E3 	ld	(mpLcdCtrl), a
   20 D1:A8AC 21 00 02 E3 	ld	hl, mpLcdPalette
   21 D1:A8B0 06 00 -  -  	ld	b, 0
   22 D1:A8B2 50 -  -  -  _:	ld	d, b
   23 D1:A8B3 78 -  -  -  	ld	a, b
   24 D1:A8B4 E6 C0 -  -  	and	011000000b
   25 D1:A8B6 CB 3A -  -  	srl	d
   26 D1:A8B8 1F -  -  -  	rra
   27 D1:A8B9 5F -  -  -  	ld	e, a
   28 D1:A8BA 3E 1F -  -  	ld	a, 000011111b
   29 D1:A8BC A0 -  -  -  	and	b
   30 D1:A8BD B3 -  -  -  	or	a, e
   31 D1:A8BE 77 -  -  -  	ld	(hl), a
   32 D1:A8BF 23 -  -  -  	inc	hl
   33 D1:A8C0 72 -  -  -  	ld	(hl), d
   34 D1:A8C1 23 -  -  -  	inc	hl
   35 D1:A8C2 04 -  -  -  	inc	b
   36 D1:A8C3 20 ED -  -  	jr	nz, -_
   37 D1:A8C5 21 00 00 D4 	ld	hl, vRAM
   38 D1:A8C9 36 BD -  -  	ld	(hl), 189
   39 D1:A8CB E5 -  -  -  	push	hl
   40 D1:A8CC D1 -  -  -  	pop	de
   41 D1:A8CD 13 -  -  -  	inc	de
   42 D1:A8CE 01 80 0C 00 	ld	bc, 320*10
   43 D1:A8D2 ED B0 -  -  	ldir
   44 D1:A8D4 36 00 -  -  	ld	(hl), 0
   45 D1:A8D6 01 40 01 00 	ld	bc, 320
   46 D1:A8DA ED B0 -  -  	ldir
   47 D1:A8DC 36 FF -  -  	ld	(hl), 255
   48 D1:A8DE 01 3F 1E 01 	ld	bc, 320*229-1
   49 D1:A8E2 ED B0 -  -  	ldir
   50 D1:A8E4 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
   51 D1:A8E8 FD CB B0 8E 	res	modified_iy, (iy+fAlways1)
   52 D1:A8EC 21 1F ED D1 	ld	hl, ICEName
   53 D1:A8F0 3E 01 -  -  	ld	a, 1
   54 D1:A8F2 32 84 B8 D1 	ld	(TextYPos_ASM), a
   55 D1:A8F6 C6 14 -  -  	add	a, 20
   56 D1:A8F8 32 53 B8 D1 	ld	(TextXPos_ASM), a
   57 D1:A8FC CD 14 B1 D1 	call	PrintString
   58 D1:A900 21 84 B8 D1 	ld	hl, TextYPos_ASM
   59 D1:A904 34 -  -  -  	inc	(hl)
   60 D1:A905 34 -  -  -  	inc	(hl)
   61 D1:A906 2A 9D 25 D0 	ld	hl, (progPtr)
   62 D1:A90A -  -  -  -  FindPrograms:
   63 D1:A90A CD 82 BC D1 	call	FindNextGoodVar
   64 D1:A90E 20 34 -  -  	jr	nz, StopFindingPrograms
   65 D1:A910 E5 -  -  -  	push	hl
   66 D1:A911 3A 84 B8 D1 		ld	a, (TextYPos_ASM)
   67 D1:A915 C6 0A -  -  		add	a, 10
   68 D1:A917 38 28 -  -  		jr	c, +_
   69 D1:A919 32 84 B8 D1 		ld	(TextYPos_ASM), a
   70 D1:A91D 21 0A 00 00 		ld	hl, 10
   71 D1:A921 22 53 B8 D1 		ld	(TextXPos_ASM), hl
   72 D1:A925 21 7A EA D1 		ld	hl, AmountOfPrograms
   73 D1:A929 34 -  -  -  		inc	(hl)
   74 D1:A92A CD 98 1F 02 		call	_ChkInRAM
   75 D1:A92E 3E 23 -  -  		ld	a, '#'
   76 D1:A930 DC 51 B8 D1 		call	c, _PrintChar_ASM
   77 D1:A934 2A 65 EA D1 		ld	hl, (ProgramNamesPtr)
   78 D1:A938 11 F8 FF FF 		ld	de, -8
   79 D1:A93C 19 -  -  -  		add	hl, de
   80 D1:A93D CD 14 B1 D1 		call	PrintString
   81 D1:A941 E1 -  -  -  _:	pop	hl
   82 D1:A942 18 C6 -  -  	jr	FindPrograms
   83 D1:A944 -  -  -  -  StopFindingPrograms:
   84 D1:A944 3E 0D -  -  	ld	a, 13
   85 D1:A946 32 84 B8 D1 	ld	(TextYPos_ASM), a
   86 D1:A94A 21 01 00 00 	ld	hl, 1
   87 D1:A94E 22 53 B8 D1 	ld	(TextXPos_ASM), hl
   88 D1:A952 3A 7A EA D1 	ld	a, (AmountOfPrograms)
   89 D1:A956 B7 -  -  -  	or	a, a
   90 D1:A957 CA 4C AF D1 	jp	z, NoProgramsError
   91 D1:A95B 32 C4 A9 D1 	ld	(AmountPrograms), a
   92 D1:A95F 2E 01 -  -  	ld	l, 1
   93 D1:A961 -  -  -  -  PrintCursor:
   94 D1:A961 5D -  -  -  	ld	e, l
   95 D1:A962 16 0A -  -  	ld	d, 10
   96 D1:A964 ED 5C -  -  	mlt	de
   97 D1:A966 1C -  -  -  	inc	e
   98 D1:A967 1C -  -  -  	inc	e
   99 D1:A968 1C -  -  -  	inc	e
  100 D1:A969 7B -  -  -  	ld	a, e
  101 D1:A96A 32 84 B8 D1 	ld	(TextYPos_ASM), a
  102 D1:A96E AF -  -  -  	xor	a, a
  103 D1:A96F 32 A9 B8 D1 	ld	(color), a
  104 D1:A973 3C -  -  -  	inc	a
  105 D1:A974 32 53 B8 D1 	ld	(TextXPos_ASM), a
  106 D1:A978 3E 3E -  -  	ld	a, '>'
  107 D1:A97A CD 51 B8 D1 	call	_PrintChar_ASM
  108 D1:A97E 3E FF -  -  	ld	a, 255
  109 D1:A980 32 A9 B8 D1 	ld	(color), a
  110 D1:A984 3E 01 -  -  	ld	a, 1
  111 D1:A986 32 53 B8 D1 	ld	(TextXPos_ASM), a
  112 D1:A98A E5 -  -  -  _:	push	hl
  113 D1:A98B CD 4C 01 02 		call	_GetCSC
  114 D1:A98F E1 -  -  -  	pop	hl
  115 D1:A990 B7 -  -  -  	or	a, a
  116 D1:A991 28 F7 -  -  	jr	z, -_
  117 D1:A993 FE 04 -  -  	cp	a, skUp
  118 D1:A995 28 1E -  -  	jr	z, PressedUp
  119 D1:A997 FE 01 -  -  	cp	a, skDown
  120 D1:A999 28 27 -  -  	jr	z, PressedDown
  121 D1:A99B FE 0F -  -  	cp	a, skClear
  122 D1:A99D CA 17 B0 D1 	jp	z, StopProgram
  123 D1:A9A1 FE 09 -  -  	cp	a, skEnter
  124 D1:A9A3 20 E5 -  -  	jr	nz, -_
  125 D1:A9A5 -  -  -  -  PressedEnter:
  126 D1:A9A5 2D -  -  -  	dec	l
  127 D1:A9A6 26 08 -  -  	ld	h, 8
  128 D1:A9A8 ED 6C -  -  	mlt	hl
  129 D1:A9AA 11 D6 F5 D0 	ld	de, ProgramNamesStack-1
  130 D1:A9AE 19 -  -  -  	add	hl, de
  131 D1:A9AF CD 20 03 02 	call	_Mov9ToOP1
  132 D1:A9B3 18 1B -  -  	jr	StartParsing
  133 D1:A9B5 -  -  -  -  PressedUp:
  134 D1:A9B5 7D -  -  -  	ld	a, l
  135 D1:A9B6 3D -  -  -  	dec	a
  136 D1:A9B7 28 D1 -  -  	jr	z, -_
  137 D1:A9B9 2D -  -  -  	dec	l
  138 D1:A9BA 3E 17 -  -  	ld	a, 23
  139 D1:A9BC CD 51 B8 D1 	call	_PrintChar_ASM
  140 D1:A9C0 18 9F -  -  	jr	PrintCursor
  141 D1:A9C2 -  -  -  -  PressedDown:
  142 D1:A9C2 7D -  -  -  	ld	a, l
  143 D1:A9C3 -  -  -  -  AmountPrograms = $+1
  144 D1:A9C3 FE 00 -  -  	cp	a, 0
  145 D1:A9C5 28 C3 -  -  	jr	z, -_
  146 D1:A9C7 2C -  -  -  	inc	l
  147 D1:A9C8 3E 17 -  -  	ld	a, 23
  148 D1:A9CA CD 51 B8 D1 	call	_PrintChar_ASM
  149 D1:A9CE 18 91 -  -  	jr	PrintCursor
  150 D1:A9D0 -  -  -  -  StartParsing:
  151 D1:A9D0 3E 05 -  -  	ld	a, ProgObj
  152 D1:A9D2 32 F8 05 D0 	ld	(OP1), a
  153 D1:A9D6 CD 0C 05 02 _:	call	_ChkFindSym
  154 D1:A9DA 30 07 -  -  	jr	nc, +_
  155 D1:A9DC 21 F8 05 D0 	ld	hl, OP1
  156 D1:A9E0 34 -  -  -  	inc	(hl)
  157 D1:A9E1 18 F3 -  -  	jr	-_
  158 D1:A9E3 CD 98 1F 02 _:	call	_ChkInRAM
  159 D1:A9E7 30 0A -  -  	jr	nc, +_
  160 D1:A9E9 EB -  -  -  	ex	de, hl
  161 D1:A9EA 11 09 00 00 	ld	de, 9
  162 D1:A9EE 19 -  -  -  	add	hl, de
  163 D1:A9EF 5E -  -  -  	ld	e, (hl)
  164 D1:A9F0 19 -  -  -  	add	hl, de
  165 D1:A9F1 23 -  -  -  	inc	hl
  166 D1:A9F2 EB -  -  -  	ex	de, hl
  167 D1:A9F3 01 00 00 00 _:	ld	bc, 0
  168 D1:A9F7 EB -  -  -  	ex	de, hl
  169 D1:A9F8 4E -  -  -  	ld	c, (hl)																;	BC = program length
  170 D1:A9F9 23 -  -  -  	inc	hl
  171 D1:A9FA 46 -  -  -  	ld	b, (hl)
  172 D1:A9FB 23 -  -  -  	inc	hl
  173 D1:A9FC 22 1A 23 D0 	ld	(curPC), hl
  174 D1:AA00 22 17 23 D0 	ld	(begPC), hl
  175 D1:AA04 09 -  -  -  	add	hl, bc
  176 D1:AA05 2B -  -  -  	dec	hl
  177 D1:AA06 22 1D 23 D0 	ld	(endPC), hl
  178 D1:AA0A CD FF B0 D1 	call	PrintCompilingProgram
  179 D1:AA0E FD 36 D0 01 	ld	(iy+fProgram1), 1
  180 D1:AA12 FD 36 CF 00 	ld	(iy+fProgram2), 0
  181 D1:AA16 21 2F EF D1 	ld	hl, CData
  182 D1:AA1A ED 5B 62 EA 
              D1 -  -  -  	ld	de, (programPtr)
  183 D1:AA1F 01 79 00 00 	ld	bc, CData2 - CData
  184 D1:AA23 ED B0 -  -  	ldir
  185 D1:AA25 ED 53 62 EA 
              D1 -  -  -  	ld	(programPtr), de
  186 D1:AA2A CD 1E B1 D1 	call	PreScanPrograms
  187 D1:AA2E 3E CD -  -  	ld	a, 0CDh
  188 D1:AA30 21 48 08 02 	ld	hl, _RunIndicOff
  189 D1:AA34 CD 4C AC D1 	call	InsertAHL															;	call _RunIndicOff
  190 D1:AA38 2A 62 EA D1 	ld	hl, (programPtr)
  191 D1:AA3C 11 8E 7C FC 	ld	de, 4+4+5+UserMem-program
  192 D1:AA40 19 -  -  -  	add	hl, de
  193 D1:AA41 CD 4C AC D1 	call	InsertAHL															;	call *
  194 D1:AA45 01 FD 21 80 	ld	bc, 08021FDh
  195 D1:AA49 11 00 D0 C3 	ld	de, 0C3D000h
  196 D1:AA4D 21 3C 1A 02 	ld	hl, _DrawStatusBar
  197 D1:AA51 CD 8E AC D1 	call	InsertBCDEHL														;	ld iy, flags \ jp _DrawStatusBar
  198 D1:AA55 2A 62 EA D1 	ld	hl, (programPtr)
  199 D1:AA59 22 33 EA D0 	ld	(PrevProgramPtr), hl
  200 D1:AA5D 3A 7E EA D1 	ld	a, (amountOfCRoutines)
  201 D1:AA61 B7 -  -  -  	or	a, a
  202 D1:AA62 20 0C -  -  	jr	nz, CompileProgramFull
  203 D1:AA64 FD CB D0 86 	res	comp_with_libs, (iy+fProgram1)
  204 D1:AA68 21 05 2C D5 	ld	hl, program+5
  205 D1:AA6C 22 62 EA D1 	ld	(programPtr), hl
  206 D1:AA70 -  -  -  -  CompileProgramFull:
  207 D1:AA70 3A 85 EA D1 	ld	a, (AmountOfSubPrograms)
  208 D1:AA74 B7 -  -  -  	or	a, a
  209 D1:AA75 20 22 -  -  	jr	nz, SkipGetProgramName
  210 D1:AA77 21 86 EA D1 	ld	hl, varname
  211 D1:AA7B CD 36 B2 D1 	call	GetProgramName
  212 D1:AA7F 21 F9 05 D0 	ld	hl, OP1+1
  213 D1:AA83 11 87 EA D1 	ld	de, varname+1
  214 D1:AA87 06 08 -  -  	ld	b, 8
  215 D1:AA89 -  -  -  -  CheckNames:
  216 D1:AA89 1A -  -  -  	ld	a, (de)
  217 D1:AA8A B7 -  -  -  	or	a, a
  218 D1:AA8B 28 07 -  -  	jr	z, CheckNamesSameLength
  219 D1:AA8D BE -  -  -  	cp	a, (hl)
  220 D1:AA8E 20 09 -  -  	jr	nz, GoodProgramName
  221 D1:AA90 23 -  -  -  	inc	hl
  222 D1:AA91 13 -  -  -  	inc	de
  223 D1:AA92 10 F5 -  -  	djnz	CheckNames
  224 D1:AA94 -  -  -  -  CheckNamesSameLength:
  225 D1:AA94 BE -  -  -  	cp	a, (hl)
  226 D1:AA95 CA 6E AF D1 	jp	z, SameNameError
  227 D1:AA99 -  -  -  -  GoodProgramName:
  228 D1:AA99 -  -  -  -  SkipGetProgramName:
  229 D1:AA99 -  -  -  -  
  230 D1:AA99 -  -  -  -  ParseProgramUntilEnd:
  231 D1:AA99 -  -  -  -  CompileLoop:
  232 D1:AA99 AF -  -  -  	xor	a, a
  233 D1:AA9A FD 77 C0 -  	ld	(iy+fExpression1), a
  234 D1:AA9D FD 77 BF -  	ld	(iy+fExpression2), a
  235 D1:AAA0 FD 77 BE -  	ld	(iy+fExpression3), a
  236 D1:AAA3 FD 77 B0 -  	ld	(iy+fFunction1), a
  237 D1:AAA6 FD 77 AF -  	ld	(iy+fFunction2), a
  238 D1:AAA9 32 7B EA D1 	ld	(openedParensE), a
  239 D1:AAAD 32 7C EA D1 	ld	(openedParensF), a
  240 D1:AAB1 CD 28 10 02 	call	_IncFetch
  241 D1:AAB5 32 1F EA D0 	ld	(tempToken), a
  242 D1:AAB9 38 58 -  -  	jr	c, FindGotos
  243 D1:AABB FE D4 -  -  	cp	a, tEnd
  244 D1:AABD 20 10 -  -  	jr	nz, ++_
  245 D1:AABF 21 7F EA D1 _:	ld	hl, amountOfEnds
  246 D1:AAC3 7E -  -  -  	ld	a, (hl)
  247 D1:AAC4 35 -  -  -  	dec	(hl)
  248 D1:AAC5 B7 -  -  -  	or	a, a
  249 D1:AAC6 CA 8C AF D1 	jp	z, EndError
  250 D1:AACA 3A 1F EA D0 	ld	a, (tempToken)
  251 D1:AACE C9 -  -  -  	ret
  252 D1:AACF FE D0 -  -  _:	cp	a, tElse
  253 D1:AAD1 28 EC -  -  	jr	z, --_
  254 D1:AAD3 CD 7F B2 D1 	call	ParseLine
  255 D1:AAD7 2A 1A 23 D0 	ld	hl, (curPC)
  256 D1:AADB ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  257 D1:AAE0 B7 -  -  -  	or	a, a
  258 D1:AAE1 ED 52 -  -  	sbc	hl, de
  259 D1:AAE3 01 40 01 00 	ld	bc, 320
  260 D1:AAE7 CD 54 01 00 	call	__imulu
  261 D1:AAEB E5 -  -  -  	push	hl
  262 D1:AAEC 2A 1D 23 D0 		ld	hl, (endPC)
  263 D1:AAF0 B7 -  -  -  		or	a, a
  264 D1:AAF1 ED 52 -  -  		sbc	hl, de
  265 D1:AAF3 23 -  -  -  		inc	hl
  266 D1:AAF4 E5 -  -  -  		push	hl
  267 D1:AAF5 C1 -  -  -  		pop	bc
  268 D1:AAF6 E1 -  -  -  	pop	hl
  269 D1:AAF7 CD 40 01 00 	call	__idivu
  270 D1:AAFB E5 -  -  -  	push	hl
  271 D1:AAFC C1 -  -  -  	pop	bc
  272 D1:AAFD 78 -  -  -  	ld	a, b
  273 D1:AAFE B1 -  -  -  	or	a, c
  274 D1:AAFF 28 10 -  -  	jr	z, +_
  275 D1:AB01 21 40 1F D4 	ld	hl, vRAM+(320*25)
  276 D1:AB05 36 00 -  -  	ld	(hl), 0
  277 D1:AB07 E5 -  -  -  	push	hl
  278 D1:AB08 D1 -  -  -  	pop	de
  279 D1:AB09 13 -  -  -  	inc	de
  280 D1:AB0A 0B -  -  -  	dec	bc
  281 D1:AB0B 78 -  -  -  	ld	a, b
  282 D1:AB0C B1 -  -  -  	or	a, c
  283 D1:AB0D 28 8A -  -  	jr	z, CompileLoop
  284 D1:AB0F ED B0 -  -  	ldir
  285 D1:AB11 18 86 -  -  _:	jr	CompileLoop
  286 D1:AB13 -  -  -  -  FindGotos:
  287 D1:AB13 21 7F EA D1 	ld	hl, amountOfEnds
  288 D1:AB17 7E -  -  -  	ld	a, (hl)
  289 D1:AB18 B7 -  -  -  	or	a, a
  290 D1:AB19 28 02 -  -  	jr	z, +_
  291 D1:AB1B 35 -  -  -  	dec	(hl)
  292 D1:AB1C C9 -  -  -  	ret
  293 D1:AB1D 21 85 EA D1 _:	ld	hl, AmountOfSubPrograms
  294 D1:AB21 7E -  -  -  	ld	a, (hl)
  295 D1:AB22 35 -  -  -  	dec	(hl)
  296 D1:AB23 B7 -  -  -  	or	a, a
  297 D1:AB24 C0 -  -  -  	ret	nz
  298 D1:AB25 -  -  -  -  FindGotosLoop:
  299 D1:AB25 2A 6B EA D1 	ld	hl, (gotoPtr)
  300 D1:AB29 11 BF F9 D0 	ld	de, gotoStack
  301 D1:AB2D B7 -  -  -  	or	a, a
  302 D1:AB2E ED 52 -  -  	sbc	hl, de
  303 D1:AB30 28 4F -  -  	jr	z, AddDataToProgramData												;	have we finished all the Goto's?
  304 D1:AB32 19 -  -  -  	add	hl, de
  305 D1:AB33 2B -  -  -  	dec	hl
  306 D1:AB34 2B -  -  -  	dec	hl
  307 D1:AB35 2B -  -  -  	dec	hl
  308 D1:AB36 E5 -  -  -  	push	hl
  309 D1:AB37 ED 27 -  -  		ld	hl, (hl)
  310 D1:AB39 EB -  -  -  		ex	de, hl															;	de = pointer to goto data
  311 D1:AB3A 2A 68 EA D1 		ld	hl, (labelPtr)
  312 D1:AB3E -  -  -  -  FindLabels:
  313 D1:AB3E 01 D7 F5 D0 		ld	bc, labelStack
  314 D1:AB42 B7 -  -  -  		or	a, a
  315 D1:AB43 ED 42 -  -  		sbc	hl, bc
  316 D1:AB45 CA 98 AF D1 		jp	z, LabelError				;	have we finished all the Lbl's?
  317 D1:AB49 09 -  -  -  		add	hl, bc
  318 D1:AB4A 2B -  -  -  		dec	hl
  319 D1:AB4B 2B -  -  -  		dec	hl
  320 D1:AB4C 2B -  -  -  		dec	hl																;	hl = pointer to label
  321 D1:AB4D -  -  -  -  FindLabel:
  322 D1:AB4D E5 -  -  -  		push	hl
  323 D1:AB4E D5 -  -  -  			push	de
  324 D1:AB4F ED 27 -  -  				ld	hl, (hl)													;	hl = pointer to label data
  325 D1:AB51 CD CB AE D1 				call	CompareStrings		;	is it the right label?
  326 D1:AB55 D1 -  -  -  			pop	de
  327 D1:AB56 E1 -  -  -  		pop	hl
  328 D1:AB57 20 22 -  -  		jr	nz, LabelNotRightOne
  329 D1:AB59 -  -  -  -  RightLabel:
  330 D1:AB59 2B -  -  -  		dec	hl
  331 D1:AB5A 2B -  -  -  		dec	hl
  332 D1:AB5B 2B -  -  -  		dec	hl
  333 D1:AB5C ED 27 -  -  		ld	hl, (hl)
  334 D1:AB5E 11 81 7C FC 		ld	de, UserMem-program
  335 D1:AB62 19 -  -  -  		add	hl, de
  336 D1:AB63 EB -  -  -  		ex	de, hl															;	de points to label memory
  337 D1:AB64 E1 -  -  -  	pop	hl																	;	hl = pointer to goto
  338 D1:AB65 2B -  -  -  	dec	hl
  339 D1:AB66 2B -  -  -  	dec	hl
  340 D1:AB67 2B -  -  -  	dec	hl
  341 D1:AB68 ED 27 -  -  	ld	hl, (hl)																;	hl = pointer to jump to
  342 D1:AB6A ED 1F -  -  	ld	(hl), de
  343 D1:AB6C 2A 6B EA D1 	ld	hl, (gotoPtr)
  344 D1:AB70 11 FA FF FF 	ld	de, -6
  345 D1:AB74 19 -  -  -  	add	hl, de																;	get next Goto
  346 D1:AB75 22 6B EA D1 	ld	(gotoPtr), hl
  347 D1:AB79 18 AA -  -  	jr	FindGotosLoop
  348 D1:AB7B -  -  -  -  LabelNotRightOne:
  349 D1:AB7B 2B -  -  -  		dec	hl
  350 D1:AB7C 2B -  -  -  		dec	hl
  351 D1:AB7D 2B -  -  -  		dec	hl
  352 D1:AB7E 18 BE -  -  		jr	FindLabels
  353 D1:AB80 -  -  -  -  StopFindLabels:
  354 D1:AB80 E1 -  -  -  	pop	hl
  355 D1:AB81 -  -  -  -  AddDataToProgramData:
  356 D1:AB81 FD CB C0 56 	bit	last_token_is_ret, (iy+fExpression1)
  357 D1:AB85 20 06 -  -  	jr	nz, +_
  358 D1:AB87 3E C9 -  -  	ld	a, 0C9h
  359 D1:AB89 CD 1B AD D1 	call	InsertA															;	ret
  360 D1:AB8D 2A 77 EA D1 _:	ld	hl, (programDataDataPtr)
  361 D1:AB91 01 17 15 D1 	ld	bc, programDataData
  362 D1:AB95 B7 -  -  -  	or	a, a
  363 D1:AB96 ED 42 -  -  	sbc	hl, bc
  364 D1:AB98 E5 -  -  -  	push	hl
  365 D1:AB99 C1 -  -  -  	pop	bc																	;	bc = data length
  366 D1:AB9A 28 3D -  -  	jr	z, CreateProgram														;	check IF there is data
  367 D1:AB9C ED 5B 62 EA 
              D1 -  -  -  	ld	de, (programPtr)
  368 D1:ABA1 21 17 15 D1 	ld	hl, programDataData
  369 D1:ABA5 B7 -  -  -  	or	a, a
  370 D1:ABA6 ED 52 -  -  	sbc	hl, de
  371 D1:ABA8 E5 -  -  -  	push	hl
  372 D1:ABA9 19 -  -  -  		add	hl, de
  373 D1:ABAA ED B0 -  -  		ldir																;	move the data to the end of the program
  374 D1:ABAC ED 53 62 EA 
              D1 -  -  -  		ld	(programPtr), de
  375 D1:ABB1 D1 -  -  -  	pop	de
  376 D1:ABB2 2A 6E EA D1 	ld	hl, (programDataOffsetPtr)
  377 D1:ABB6 -  -  -  -  AddDataLoop:																;	update all the pointers pointing to data
  378 D1:ABB6 01 A7 FD D0 	ld	bc, programDataOffsetStack
  379 D1:ABBA B7 -  -  -  	or	a, a
  380 D1:ABBB ED 42 -  -  	sbc	hl, bc
  381 D1:ABBD 28 1A -  -  	jr	z, CreateProgram														;	no more pointers left
  382 D1:ABBF 09 -  -  -  	add	hl, bc
  383 D1:ABC0 2B -  -  -  	dec	hl
  384 D1:ABC1 2B -  -  -  	dec	hl
  385 D1:ABC2 2B -  -  -  	dec	hl
  386 D1:ABC3 E5 -  -  -  	push	hl
  387 D1:ABC4 ED 27 -  -  		ld	hl, (hl)															;	complicated stuff XD
  388 D1:ABC6 E5 -  -  -  		push	hl
  389 D1:ABC7 ED 27 -  -  			ld	hl, (hl)
  390 D1:ABC9 B7 -  -  -  			or	a, a
  391 D1:ABCA ED 52 -  -  			sbc	hl, de
  392 D1:ABCC 01 81 7C FC 			ld	bc, UserMem-program
  393 D1:ABD0 09 -  -  -  			add	hl, bc
  394 D1:ABD1 E5 -  -  -  			push	hl
  395 D1:ABD2 C1 -  -  -  			pop	bc
  396 D1:ABD3 E1 -  -  -  		pop	hl
  397 D1:ABD4 ED 0F -  -  		ld	(hl), bc															;	ld (XXXXXX), hl
  398 D1:ABD6 E1 -  -  -  	pop	hl
  399 D1:ABD7 18 DD -  -  	jr	AddDataLoop
  400 D1:ABD9 -  -  -  -  CreateProgram:
  401 D1:ABD9 21 86 EA D1 	ld	hl, varname
  402 D1:ABDD CD 20 03 02 	call	_Mov9ToOP1
  403 D1:ABE1 CD 0C 05 02 	call	_ChkFindSym
  404 D1:ABE5 38 13 -  -  	jr	c, ++_
  405 D1:ABE7 CD 98 1F 02 	call	_ChkInRAM
  406 D1:ABEB 30 09 -  -  	jr	nc, +_
  407 D1:ABED CD 48 14 02 	call	_Arc_Unarc
  408 D1:ABF1 01 05 00 00 	ld	bc, 5
  409 D1:ABF5 09 -  -  -  	add	hl, bc
  410 D1:ABF6 CD 88 05 02 _:	call	_DelVar
  411 D1:ABFA 2A 62 EA D1 _:	ld	hl, (programPtr)
  412 D1:ABFE 01 00 2C D5 	ld	bc, program
  413 D1:AC02 B7 -  -  -  	or	a, a
  414 D1:AC03 ED 42 -  -  	sbc	hl, bc
  415 D1:AC05 E5 -  -  -  	push	hl
  416 D1:AC06 01 11 00 00 		ld	bc, 17
  417 D1:AC0A 09 -  -  -  		add	hl, bc
  418 D1:AC0B E5 -  -  -  		push	hl
  419 D1:AC0C CD 1C 05 02 			call	_EnoughMem
  420 D1:AC10 21 DC EC D1 			ld	hl, NotEnoughMem
  421 D1:AC14 DA 9C AF D1 			jp	c, DispFinalString
  422 D1:AC18 E1 -  -  -  		pop	hl
  423 D1:AC19 01 F1 FF FF 		ld	bc, -15
  424 D1:AC1D 09 -  -  -  		add	hl, bc
  425 D1:AC1E CD 34 13 02 		call	_CreateProtProg
  426 D1:AC22 C1 -  -  -  	pop	bc
  427 D1:AC23 13 -  -  -  	inc	de
  428 D1:AC24 13 -  -  -  	inc	de
  429 D1:AC25 21 00 2C D5 	ld	hl, program
  430 D1:AC29 EB -  -  -  	ex	de, hl
  431 D1:AC2A 36 EF -  -  	ld	(hl), tExtTok														;	insert header
  432 D1:AC2C 23 -  -  -  	inc	hl
  433 D1:AC2D 36 7B -  -  	ld	(hl), tAsm84CeCmp
  434 D1:AC2F 23 -  -  -  	inc	hl
  435 D1:AC30 EB -  -  -  	ex	de, hl
  436 D1:AC31 ED B0 -  -  	ldir																	;	insert the program data
  437 D1:AC33 21 16 EB D1 	ld	hl, GoodCompileMessage
  438 D1:AC37 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
  439 D1:AC3B C3 9C AF D1 	jp	DispFinalString														;	DONE :D :D :D
  440 D1:AC3F -  -  -  -  
  441 D1:AC3F -  -  -  -  #include "routines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\routines.asm"
    1 D1:AC3F -  -  -  -  InsertBCDEAHL:
    2 D1:AC3F E5 -  -  -  	push	hl
    3 D1:AC40 C5 -  -  -  		push	bc
    4 D1:AC41 E1 -  -  -  		pop	hl
    5 D1:AC42 CD 50 AC D1 		call	InsertHL
    6 D1:AC46 EB -  -  -  		ex	de, hl
    7 D1:AC47 CD 50 AC D1 		call	InsertHL
    8 D1:AC4B E1 -  -  -  	pop	hl
    9 D1:AC4C -  -  -  -  InsertAHL:
   10 D1:AC4C CD 1B AD D1 	call	InsertA
   11 D1:AC50 -  -  -  -  InsertHL:
   12 D1:AC50 D5 -  -  -  	push	de
   13 D1:AC51 EB -  -  -  		ex	de, hl
   14 D1:AC52 2A 62 EA D1 		ld	hl, (programPtr)
   15 D1:AC56 ED 1F -  -  		ld	(hl), de
   16 D1:AC58 23 -  -  -  		inc	hl
   17 D1:AC59 23 -  -  -  		inc	hl
   18 D1:AC5A 23 -  -  -  		inc	hl
   19 D1:AC5B 22 62 EA D1 		ld	(programPtr), hl
   20 D1:AC5F D1 -  -  -  	pop	de
   21 D1:AC60 C9 -  -  -  	ret
   22 D1:AC61 -  -  -  -  	
   23 D1:AC61 -  -  -  -  InsertBC:
   24 D1:AC61 2A 62 EA D1 	ld hl, (programPtr)
   25 D1:AC65 70 -  -  -  	ld (hl), b
   26 D1:AC66 23 -  -  -  	inc hl
   27 D1:AC67 71 -  -  -  	ld (hl), c
   28 D1:AC68 23 -  -  -  	inc hl
   29 D1:AC69 22 62 EA D1 	ld (programPtr), hl
   30 D1:AC6D C9 -  -  -  	ret
   31 D1:AC6E -  -  -  -  	
   32 D1:AC6E -  -  -  -  InsertCallHL:
   33 D1:AC6E 3E CD -  -  	ld	a, 0CDh
   34 D1:AC70 18 DA -  -  	jr	InsertAHL
   35 D1:AC72 -  -  -  -  	
   36 D1:AC72 -  -  -  -  InsertHIXC:
   37 D1:AC72 26 27 -  -  	ld	h, 027h
   38 D1:AC74 06 03 -  -  	ld	b, 3
   39 D1:AC76 ED 4C -  -  	mlt	bc
   40 D1:AC78 79 -  -  -  	ld	a, c
   41 D1:AC79 18 07 -  -  	jr	++_
   42 D1:AC7B -  -  -  -  InsertIXE:
   43 D1:AC7B 26 17 -  -  	ld	h, 017h
   44 D1:AC7D 16 03 -  -  _:	ld	d, 3
   45 D1:AC7F ED 5C -  -  	mlt	de
   46 D1:AC81 7B -  -  -  	ld	a, e
   47 D1:AC82 2E DD -  -  _:	ld	l, 0DDh
   48 D1:AC84 CD 70 1D 02 	call	_SetHLUToA
   49 D1:AC88 18 C6 -  -  	jr	InsertHL								; ld hl/de/bc, (ix+*)
   50 D1:AC8A -  -  -  -  InsertIXC:
   51 D1:AC8A 26 07 -  -  	ld	h, 007h
   52 D1:AC8C 18 EF -  -  	jr	--_
   53 D1:AC8E -  -  -  -  
   54 D1:AC8E -  -  -  -  InsertBCDEHL:
   55 D1:AC8E E5 -  -  -  	push	hl
   56 D1:AC8F C5 -  -  -  		push	bc
   57 D1:AC90 E1 -  -  -  		pop	hl
   58 D1:AC91 CD 50 AC D1 		call	InsertHL
   59 D1:AC95 E1 -  -  -  	pop	hl
   60 D1:AC96 18 04 -  -  	jr	InsertDEHL
   61 D1:AC98 -  -  -  -  InsertADEHL:
   62 D1:AC98 CD 1B AD D1 	call	InsertA
   63 D1:AC9C -  -  -  -  InsertDEHL:
   64 D1:AC9C EB -  -  -  	ex	de, hl
   65 D1:AC9D CD 50 AC D1 	call	InsertHL
   66 D1:ACA1 EB -  -  -  	ex	de, hl
   67 D1:ACA2 18 AC -  -  	jr	InsertHL
   68 D1:ACA4 -  -  -  -  	
   69 D1:ACA4 -  -  -  -  MaybeInsertIYFlags:
   70 D1:ACA4 FD CB B0 4E 	bit	modified_iy, (iy+fAlways1)
   71 D1:ACA8 C8 -  -  -  	ret	z
   72 D1:ACA9 FD CB B0 8E 	res	modified_iy, (iy+fAlways1)
   73 D1:ACAD 3E FD -  -  	ld	a, 0FDh
   74 D1:ACAF CD 1B AD D1 	call	InsertA									; ld iy, flags
   75 D1:ACB3 3E 21 -  -  	ld	a, 021h
   76 D1:ACB5 21 80 00 D0 	ld	hl, flags
   77 D1:ACB9 C3 4C AC D1 	jp	InsertAHL								; ld iy, flags
   78 D1:ACBD -  -  -  -  	
   79 D1:ACBD -  -  -  -  MaybeChangeHLToDE:
   80 D1:ACBD 3A 83 EA D1 	ld	a, (ExprOutput)
   81 D1:ACC1 B7 -  -  -  _:	or	a, a
   82 D1:ACC2 C8 -  -  -  	ret	z
   83 D1:ACC3 3E EB -  -  	ld	a, 0EBh
   84 D1:ACC5 18 54 -  -  	jr	InsertA									; ex de, hl
   85 D1:ACC7 -  -  -  -  	
   86 D1:ACC7 -  -  -  -  MaybeChangeDEToHL:
   87 D1:ACC7 3A 83 EA D1 	ld	a, (ExprOutput)
   88 D1:ACCB EE 01 -  -  	xor	a, 1
   89 D1:ACCD 18 F2 -  -  	jr	-_
   90 D1:ACCF -  -  -  -  	
   91 D1:ACCF -  -  -  -  CGetArgumentLast:
   92 D1:ACCF 3E C2 -  -  	ld	a, 0C2h
   93 D1:ACD1 18 02 -  -  	jr	$+4
   94 D1:ACD3 -  -  -  -  CGetArgument:
   95 D1:ACD3 3E CA -  -  	ld	a, 0CAh
   96 D1:ACD5 32 EA AC D1 	ld	(CGetArgumentLastOrNot), a
   97 D1:ACD9 22 62 EA D1 	ld	(programPtr), hl
   98 D1:ACDD F5 -  -  -  	push	af
   99 D1:ACDE CD 28 10 02 		call	_IncFetch
  100 D1:ACE2 CD CD B2 D1 		call	ParseExpression
  101 D1:ACE6 FD CB BE 46 		bit	triggered_a_comma, (iy+fExpression3)
  102 D1:ACEA -  -  -  -  CGetArgumentLastOrNot:
  103 D1:ACEA CA 40 AF D1 		jp	z, ErrorSyntax
  104 D1:ACEE 2A 62 EA D1 		ld	hl, (programPtr)
  105 D1:ACF2 F1 -  -  -  	pop	af
  106 D1:ACF3 28 14 -  -  	jr	z, InsertPushHLDE
  107 D1:ACF5 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  108 D1:ACF9 28 0E -  -  	jr	z, InsertPushHLDE
  109 D1:ACFB 2B -  -  -  	dec	hl
  110 D1:ACFC 2B -  -  -  	dec	hl
  111 D1:ACFD 22 62 EA D1 	ld	(programPtr), hl
  112 D1:AD01 2B -  -  -  	dec	hl
  113 D1:AD02 2B -  -  -  	dec	hl
  114 D1:AD03 36 2E -  -  	ld	(hl), 02Eh								; ld l, *
  115 D1:AD05 23 -  -  -  	inc	hl
  116 D1:AD06 ED 17 -  -  	ld	de, (hl)
  117 D1:AD08 73 -  -  -  	ld	(hl), e
  118 D1:AD09 -  -  -  -  InsertPushHLDE:
  119 D1:AD09 3A 84 EA D1 	ld	a, (ExprOutput2)
  120 D1:AD0D B7 -  -  -  	or	a
  121 D1:AD0E 20 00 -  -  	jr	nz, +_
  122 D1:AD10 -  -  -  -  	;ld	hl, (programPtr)
  123 D1:AD10 -  -  -  -  	;dec	hl
  124 D1:AD10 -  -  -  -  	;ld	(programPtr), hl
  125 D1:AD10 87 -  -  -  _:	add	a, a
  126 D1:AD11 87 -  -  -  	add	a, a
  127 D1:AD12 87 -  -  -  	add	a, a
  128 D1:AD13 87 -  -  -  	add	a, a
  129 D1:AD14 C6 D5 -  -  	add	a, 0D5h
  130 D1:AD16 2A 62 EA D1 	ld	hl, (programPtr)
  131 D1:AD1A 23 -  -  -  	inc	hl
  132 D1:AD1B -  -  -  -  InsertA:
  133 D1:AD1B E5 -  -  -  	push	hl
  134 D1:AD1C 2A 62 EA D1 		ld	hl, (programPtr)
  135 D1:AD20 77 -  -  -  		ld	(hl), a
  136 D1:AD21 23 -  -  -  		inc	hl
  137 D1:AD22 22 62 EA D1 		ld	(programPtr), hl
  138 D1:AD26 E1 -  -  -  	pop	hl
  139 D1:AD27 C9 -  -  -  	ret
  140 D1:AD28 -  -  -  -  
  141 D1:AD28 -  -  -  -  CAddArgument:
  142 D1:AD28 C5 -  -  -  	push	bc
  143 D1:AD29 B7 -  -  -  		or	a, a
  144 D1:AD2A ED 42 -  -  		sbc	hl, bc
  145 D1:AD2C E5 -  -  -  		push	hl
  146 D1:AD2D C1 -  -  -  		pop	bc
  147 D1:AD2E E1 -  -  -  	pop	hl
  148 D1:AD2F ED B0 -  -  	ldir
  149 D1:AD31 C9 -  -  -  	ret
  150 D1:AD32 -  -  -  -  	
  151 D1:AD32 -  -  -  -  InsertProgramPtrToDataOffset:
  152 D1:AD32 D5 -  -  -  	push	de
  153 D1:AD33 2A 6E EA D1 		ld	hl, (programDataOffsetPtr)
  154 D1:AD37 ED 5B 62 EA 
              D1 -  -  -  		ld	de, (programPtr)
  155 D1:AD3C ED 1F -  -  		ld	(hl), de
  156 D1:AD3E 23 -  -  -  		inc	hl
  157 D1:AD3F 23 -  -  -  		inc	hl
  158 D1:AD40 23 -  -  -  		inc	hl
  159 D1:AD41 22 6E EA D1 		ld	(programDataOffsetPtr), hl
  160 D1:AD45 D1 -  -  -  	pop	de
  161 D1:AD46 C9 -  -  -  	ret
  162 D1:AD47 -  -  -  -  	
  163 D1:AD47 -  -  -  -  GetFunction:
  164 D1:AD47 C5 -  -  -  	push	bc
  165 D1:AD48 D5 -  -  -  		push	de
  166 D1:AD49 CD 50 AD D1 			call	GetRightFunction
  167 D1:AD4D D1 -  -  -  		pop	de
  168 D1:AD4E C1 -  -  -  	pop	bc
  169 D1:AD4F C9 -  -  -  	ret
  170 D1:AD50 -  -  -  -  	
  171 D1:AD50 -  -  -  -  GetRightFunction:
  172 D1:AD50 05 -  -  -  	dec	b
  173 D1:AD51 CA 95 AD D1 	jp	z, GetFunctionDE
  174 D1:AD55 05 -  -  -  	dec	b
  175 D1:AD56 C2 FD AD D1 	jp	nz, GetFunctionBC
  176 D1:AD5A -  -  -  -  ;GetFunctionHL:
  177 D1:AD5A FE AD -  -  	cp	a, tGetKey
  178 D1:AD5C 20 12 -  -  	jr	nz, +_
  179 D1:AD5E 21 4C 01 02 	ld	hl, _GetCSC
  180 D1:AD62 CD 6E AC D1 	call	InsertCallHL								; call _GetCSC
  181 D1:AD66 3E B7 -  -  	ld	a, 0B7h
  182 D1:AD68 21 ED 62 6F 	ld	hl, 06F62EDh
  183 D1:AD6C C3 4C AC D1 	jp	InsertAHL								; or a \ sbc hl, hl \ ld l, a
  184 D1:AD70 FE AB -  -  _:	cp	a, trand
  185 D1:AD72 20 19 -  -  	jr	nz, +_
  186 D1:AD74 3E D5 -  -  	ld	a, 0D5h
  187 D1:AD76 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  188 D1:AD7A C4 1B AD D1 	call	nz, InsertA								; push de
  189 D1:AD7E CD 93 AE D1 	call	InsertRandRoutine
  190 D1:AD82 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  191 D1:AD86 C8 -  -  -  	ret	z
  192 D1:AD87 3E D1 -  -  	ld	a, 0D1h
  193 D1:AD89 C3 1B AD D1 	jp	InsertA									; pop de
  194 D1:AD8D CD 32 AE D1 _:	call	InsertKeypadRoutine1
  195 D1:AD91 C3 57 AE D1 	jp	InsertKeypadRoutine2
  196 D1:AD95 -  -  -  -  GetFunctionDE:
  197 D1:AD95 FE AD -  -  	cp	a, tGetKey
  198 D1:AD97 20 2D -  -  	jr	nz, +_
  199 D1:AD99 3E E5 -  -  	ld	a, 0E5h
  200 D1:AD9B FD CB C0 76 	bit	need_push, (iy+fExpression1)
  201 D1:AD9F C4 1B AD D1 	call	nz, InsertA								; push hl
  202 D1:ADA3 21 4C 01 02 	ld	hl, _GetCSC
  203 D1:ADA7 CD 6E AC D1 	call	InsertCallHL								; call _GetCSC
  204 D1:ADAB FD CB C0 76 	bit	need_push, (iy+fExpression1)
  205 D1:ADAF 28 06 -  -  	jr	z, $+8
  206 D1:ADB1 3E E1 -  -  	ld	a, 0E1h
  207 D1:ADB3 CD 1B AD D1 	call	InsertA									; pop hl
  208 D1:ADB7 3E 11 -  -  	ld	a, 011h
  209 D1:ADB9 CD 1B AD D1 	call	InsertA									; ld de, *
  210 D1:ADBD AF -  -  -  	xor	a, a
  211 D1:ADBE 21 00 00 5F 	ld	hl, 05F0000h
  212 D1:ADC2 C3 4C AC D1 	jp	InsertAHL								; ld de, 0 \ ld e, a
  213 D1:ADC6 FE AB -  -  _:	cp	a, trand
  214 D1:ADC8 20 1F -  -  	jr	nz, ++_
  215 D1:ADCA 3E E5 -  -  	ld	a, 0E5h
  216 D1:ADCC FD CB C0 76 	bit	need_push, (iy+fExpression1)
  217 D1:ADD0 C4 1B AD D1 	call	nz, InsertA								; push hl
  218 D1:ADD4 CD 93 AE D1 	call	InsertRandRoutine
  219 D1:ADD8 3E EB -  -  _:	ld	a, 0EBh
  220 D1:ADDA CD 1B AD D1 	call	InsertA									; ex de, hl
  221 D1:ADDE FD CB C0 76 	bit	need_push, (iy+fExpression1)
  222 D1:ADE2 C8 -  -  -  	ret	z
  223 D1:ADE3 3E E1 -  -  	ld	a, 0E1h
  224 D1:ADE5 C3 1B AD D1 	jp	InsertA									; pop hl
  225 D1:ADE9 CD 32 AE D1 _:	call	InsertKeypadRoutine1
  226 D1:ADED 3E E5 -  -  	ld	a, 0E5h
  227 D1:ADEF FD CB C0 76 	bit	need_push, (iy+fExpression1)
  228 D1:ADF3 C4 1B AD D1 	call	nz, InsertA								; push hl
  229 D1:ADF7 CD 57 AE D1 	call	InsertKeypadRoutine2
  230 D1:ADFB 18 DB -  -  	jr	--_
  231 D1:ADFD -  -  -  -  GetFunctionBC:
  232 D1:ADFD FE AD -  -  	cp	a, tGetKey
  233 D1:ADFF 20 17 -  -  	jr	nz, +_
  234 D1:AE01 21 4C 01 02 	ld	hl, _GetCSC
  235 D1:AE05 CD 6E AC D1 	call	InsertCallHL								; call _GetCSC
  236 D1:AE09 3E 01 -  -  	ld	a, 001h
  237 D1:AE0B CD 1B AD D1 	call	InsertA									; ld bc, *
  238 D1:AE0F AF -  -  -  	xor	a, a
  239 D1:AE10 21 00 00 4F 	ld	hl, 04F0000h
  240 D1:AE14 C3 4C AC D1 	jp	InsertAHL								; ld bc, 0 \ ld c, a
  241 D1:AE18 FE AB -  -  _:	cp	a, trand
  242 D1:AE1A 20 0C -  -  	jr	nz, ++_
  243 D1:AE1C CD 93 AE D1 	call	InsertRandRoutine
  244 D1:AE20 06 E5 -  -  _:	ld	b, 0E5h
  245 D1:AE22 0E C1 -  -  	ld	c, 0C1h
  246 D1:AE24 C3 61 AC D1 	jp	InsertBC								; push hl \ pop bc
  247 D1:AE28 CD 32 AE D1 _:	call	InsertKeypadRoutine1
  248 D1:AE2C CD 57 AE D1 	call	InsertKeypadRoutine2
  249 D1:AE30 18 EE -  -  	jr	--_
  250 D1:AE32 -  -  -  -  InsertKeypadRoutine1:
  251 D1:AE32 47 -  -  -  	ld	b, a
  252 D1:AE33 3E 06 -  -  	ld	a, 006h
  253 D1:AE35 CD 1B AD D1 	call	InsertA									; ld b, *
  254 D1:AE39 78 -  -  -  	ld	a, b
  255 D1:AE3A 3D -  -  -  	dec	a
  256 D1:AE3B 0F -  -  -  	rrca
  257 D1:AE3C 0F -  -  -  	rrca
  258 D1:AE3D E6 0E -  -  	and	00001110b
  259 D1:AE3F 4F -  -  -  	ld	c, a
  260 D1:AE40 3E 1E -  -  	ld	a, 01Eh
  261 D1:AE42 91 -  -  -  	sub	a, c
  262 D1:AE43 47 -  -  -  	ld	b, a
  263 D1:AE44 0E 0E -  -  	ld	c, 00Eh
  264 D1:AE46 CD 61 AC D1 	call	InsertBC								; ld b, X \ ld c, *
  265 D1:AE4A 78 -  -  -  	ld	a, b
  266 D1:AE4B E6 07 -  -  	and	000000111b
  267 D1:AE4D 47 -  -  -  	ld	b, a
  268 D1:AE4E AF -  -  -  	xor	a, a
  269 D1:AE4F 37 -  -  -  	scf
  270 D1:AE50 17 -  -  -  _:	rla
  271 D1:AE51 10 FD -  -  	djnz	-_
  272 D1:AE53 C3 1B AD D1 	jp	InsertA									; ld c, X
  273 D1:AE57 -  -  -  -  	
  274 D1:AE57 -  -  -  -  InsertKeypadRoutine2:
  275 D1:AE57 3E CD -  -  	ld	a, 0CDh
  276 D1:AE59 CD 1B AD D1 	call	InsertA									; call *
  277 D1:AE5D CD 32 AD D1 	call	InsertProgramPtrToDataOffset
  278 D1:AE61 2A 2D EA D0 	ld	hl, (KeypadStartData)
  279 D1:AE65 FD CB D0 76 	bit	has_already_keypad, (iy+fProgram1)
  280 D1:AE69 C2 50 AC D1 	jp	nz, InsertHL								; call XXXXXX
  281 D1:AE6D 2A 77 EA D1 	ld	hl, (programDataDataPtr)
  282 D1:AE71 22 2D EA D0 	ld	(KeypadStartData), hl
  283 D1:AE75 E5 -  -  -  	push	hl
  284 D1:AE76 D1 -  -  -  	pop	de
  285 D1:AE77 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  286 D1:AE7B CD 50 AC D1 	call	InsertHL								; call *
  287 D1:AE7F 21 DE EE D1 	ld	hl, KeypadRoutine
  288 D1:AE83 01 14 00 00 	ld	bc, KeypadRoutineEnd - KeypadRoutine
  289 D1:AE87 ED B0 -  -  	ldir
  290 D1:AE89 ED 53 77 EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
  291 D1:AE8E FD CB D0 F6 	set	has_already_keypad, (iy+fProgram1)
  292 D1:AE92 C9 -  -  -  	ret
  293 D1:AE93 -  -  -  -  	
  294 D1:AE93 -  -  -  -  InsertRandRoutine:
  295 D1:AE93 3E CD -  -  	ld	a, 0CDh
  296 D1:AE95 CD 1B AD D1 	call	InsertA									; call *
  297 D1:AE99 CD 32 AD D1 	call	InsertProgramPtrToDataOffset
  298 D1:AE9D 2A 24 EA D0 	ld	hl, (RandStartData)
  299 D1:AEA1 FD CB D0 5E 	bit	has_already_rand, (iy+fProgram1)
  300 D1:AEA5 C2 50 AC D1 	jp	nz, InsertHL								; call XXXXXX
  301 D1:AEA9 2A 77 EA D1 	ld	hl, (programDataDataPtr)
  302 D1:AEAD 22 24 EA D0 	ld	(RandStartData), hl
  303 D1:AEB1 E5 -  -  -  	push	hl
  304 D1:AEB2 D1 -  -  -  	pop	de
  305 D1:AEB3 CD 50 AC D1 	call	InsertHL								; call XXXXXX
  306 D1:AEB7 21 62 EE D1 	ld	hl, RandRoutine
  307 D1:AEBB 01 36 00 00 	ld	bc, RandRoutineEnd - RandRoutine
  308 D1:AEBF ED B0 -  -  	ldir
  309 D1:AEC1 ED 53 77 EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
  310 D1:AEC6 FD CB D0 DE 	set	has_already_rand, (iy+fProgram1)
  311 D1:AECA C9 -  -  -  	ret
  312 D1:AECB -  -  -  -  	
  313 D1:AECB -  -  -  -  CompareStrings:
  314 D1:AECB 1A -  -  -  	ld	a, (de)
  315 D1:AECC FE 3F -  -  	cp	a, tEnter
  316 D1:AECE C8 -  -  -  	ret	z
  317 D1:AECF BE -  -  -  	cp	a, (hl)
  318 D1:AED0 23 -  -  -  	inc	hl
  319 D1:AED1 13 -  -  -  	inc	de
  320 D1:AED2 C0 -  -  -  	ret	nz
  321 D1:AED3 18 F6 -  -  	jr	CompareStrings
  322 D1:AED5 -  -  -  -  	
  323 D1:AED5 -  -  -  -  SubError:
  324 D1:AED5 3E 2D -  -  	ld	a, '-'
  325 D1:AED7 18 4D -  -  	jr	DispOperatorErrorString
  326 D1:AED9 -  -  -  -  AddError:
  327 D1:AED9 3E 2B -  -  	ld	a, '+'
  328 D1:AEDB 18 49 -  -  	jr	DispOperatorErrorString
  329 D1:AEDD -  -  -  -  DivError:
  330 D1:AEDD 3E 2F -  -  	ld	a, '/'
  331 D1:AEDF 18 45 -  -  	jr	DispOperatorErrorString
  332 D1:AEE1 -  -  -  -  MulError:
  333 D1:AEE1 3E 2A -  -  	ld	a, '*'
  334 D1:AEE3 18 41 -  -  	jr	DispOperatorErrorString
  335 D1:AEE5 -  -  -  -  	
  336 D1:AEE5 -  -  -  -  GLETError:
  337 D1:AEE5 3A 20 EA D0 	ld	a, (tempToken2)
  338 D1:AEE9 FE 6E -  -  	cp	a, tGE
  339 D1:AEEB 0E 19 -  -  	ld	c, 019h
  340 D1:AEED 28 36 -  -  	jr	z, DispOperatorErrorString2
  341 D1:AEEF FE 6D -  -  	cp	a, tLE
  342 D1:AEF1 0E 17 -  -  	ld	c, 017h
  343 D1:AEF3 28 30 -  -  	jr	z, DispOperatorErrorString2
  344 D1:AEF5 FE 6C -  -  	cp	a, tGT
  345 D1:AEF7 0E 3E -  -  	ld	c, '>'
  346 D1:AEF9 28 2A -  -  	jr	z, DispOperatorErrorString2
  347 D1:AEFB 3E 3C -  -  	ld	a, '<'
  348 D1:AEFD 18 27 -  -  	jr	DispOperatorErrorString
  349 D1:AEFF -  -  -  -  
  350 D1:AEFF -  -  -  -  NEQError:
  351 D1:AEFF 3A 20 EA D0 	ld	a, (tempToken2)
  352 D1:AF03 FE 6A -  -  	cp	a, tEq
  353 D1:AF05 3E 3D -  -  	ld	a, '='
  354 D1:AF07 28 1D -  -  	jr	z, DispOperatorErrorString
  355 D1:AF09 3E 18 -  -  	ld	a, 018h
  356 D1:AF0B 18 19 -  -  	jr	DispOperatorErrorString
  357 D1:AF0D -  -  -  -  XORANDError:
  358 D1:AF0D 3A 20 EA D0 	ld	a, (tempToken2)
  359 D1:AF11 FE 3C -  -  	cp	a, tOr
  360 D1:AF13 0E 7C -  -  	ld	c, '|'
  361 D1:AF15 28 0E -  -  	jr	z, DispOperatorErrorString2
  362 D1:AF17 FE 3D -  -  	cp	a, tXor
  363 D1:AF19 0E 5E -  -  	ld	c, '^'
  364 D1:AF1B 28 08 -  -  	jr	z, DispOperatorErrorString2
  365 D1:AF1D 3E 26 -  -  	ld	a, '&'
  366 D1:AF1F 18 05 -  -  	jr	DispOperatorErrorString
  367 D1:AF21 -  -  -  -  StoError:
  368 D1:AF21 3E 1C -  -  	ld	a, 01Ch
  369 D1:AF23 18 01 -  -  	jr	DispOperatorErrorString
  370 D1:AF25 -  -  -  -  	
  371 D1:AF25 -  -  -  -  DispOperatorErrorString2:
  372 D1:AF25 79 -  -  -  	ld	a, c
  373 D1:AF26 -  -  -  -  DispOperatorErrorString:
  374 D1:AF26 F5 -  -  -  	push	af
  375 D1:AF27 CD DE B0 D1 		call	ClearScreen
  376 D1:AF2B 21 EF EA D1 		ld	hl, ErrorMessageStandard
  377 D1:AF2F CD 14 B1 D1 		call	PrintString
  378 D1:AF33 F1 -  -  -  	pop	af
  379 D1:AF34 CD 51 B8 D1 	call	_PrintChar_ASM
  380 D1:AF38 3E 27 -  -  	ld	a, '\''
  381 D1:AF3A CD 51 B8 D1 	call	_PrintChar_ASM
  382 D1:AF3E 18 66 -  -  	jr	ReturnToOS
  383 D1:AF40 -  -  -  -  	
  384 D1:AF40 -  -  -  -  ErrorSyntax:
  385 D1:AF40 21 2E EC D1 	ld	hl, SyntaxErrorMessage
  386 D1:AF44 18 56 -  -  	jr	DispFinalString
  387 D1:AF46 -  -  -  -  MismatchError:
  388 D1:AF46 21 9C EC D1 	ld	hl, MismatchErrorMessage
  389 D1:AF4A 18 50 -  -  	jr	DispFinalString
  390 D1:AF4C -  -  -  -  NoProgramsError:
  391 D1:AF4C 21 2C EB D1 	ld	hl, NoProgramsMessage
  392 D1:AF50 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
  393 D1:AF54 18 46 -  -  	jr	DispFinalString
  394 D1:AF56 -  -  -  -  InvalidTokenError:
  395 D1:AF56 21 3F EB D1 	ld	hl, InvalidTokenMessage
  396 D1:AF5A 18 40 -  -  	jr	DispFinalString
  397 D1:AF5C -  -  -  -  InvalidNameLength:
  398 D1:AF5C 21 74 EB D1 	ld	hl, InvalidNameLengthMessage
  399 D1:AF60 18 3A -  -  	jr	DispFinalString
  400 D1:AF62 -  -  -  -  ErrorNotFound:
  401 D1:AF62 21 EF EB D1 	ld	hl, NotFoundMessage
  402 D1:AF66 18 34 -  -  	jr	DispFinalString
  403 D1:AF68 -  -  -  -  ErrorUsedCode:
  404 D1:AF68 21 63 EC D1 	ld	hl, UsedCodeMessage
  405 D1:AF6C 18 2E -  -  	jr	DispFinalString
  406 D1:AF6E -  -  -  -  SameNameError:
  407 D1:AF6E 21 8B EB D1 	ld	hl, SameNameMessage
  408 D1:AF72 18 28 -  -  	jr	DispFinalString
  409 D1:AF74 -  -  -  -  FunctionError:
  410 D1:AF74 21 C7 EB D1 	ld	hl, FunctionFunctionMessage
  411 D1:AF78 18 22 -  -  	jr	DispFinalString
  412 D1:AF7A -  -  -  -  UnknownError:
  413 D1:AF7A 21 B4 EC D1 	ld	hl, UnknownMessage
  414 D1:AF7E 18 1C -  -  	jr	DispFinalString
  415 D1:AF80 -  -  -  -  WrongSpriteDataError:
  416 D1:AF80 21 B2 EB D1 	ld	hl, WrongSpriteDataMessgae
  417 D1:AF84 18 16 -  -  	jr	DispFinalString
  418 D1:AF86 -  -  -  -  ImplementError:
  419 D1:AF86 21 02 EC D1 	ld	hl, ImplementMessage
  420 D1:AF8A 18 10 -  -  	jr	DispFinalString
  421 D1:AF8C -  -  -  -  EndError:
  422 D1:AF8C 21 07 EB D1 	ld	hl, EndErrorMessage
  423 D1:AF90 18 0A -  -  	jr	DispFinalString
  424 D1:AF92 -  -  -  -  ErrorTooLargeLoop:
  425 D1:AF92 21 49 EC D1 	ld	hl, TooLargeLoopMessage
  426 D1:AF96 18 04 -  -  	jr	DispFinalString
  427 D1:AF98 -  -  -  -  LabelError:
  428 D1:AF98 21 F1 EC D1 	ld	hl, LabelErrorMessage
  429 D1:AF9C -  -  -  -  	
  430 D1:AF9C -  -  -  -  DispFinalString:
  431 D1:AF9C E5 -  -  -  	push	hl
  432 D1:AF9D CD DE B0 D1 		call	ClearScreen
  433 D1:AFA1 E1 -  -  -  	pop	hl
  434 D1:AFA2 CD 14 B1 D1 	call	PrintString
  435 D1:AFA6 -  -  -  -  ReturnToOS:
  436 D1:AFA6 FD CB D0 4E 	bit	good_compilation, (iy+fProgram1)
  437 D1:AFAA 20 51 -  -  	jr	nz, SkipDisplayLineNumber
  438 D1:AFAC 3E 15 -  -  	ld	a, 21
  439 D1:AFAE 32 84 B8 D1 	ld	(TextYPos_ASM), a
  440 D1:AFB2 21 01 00 00 	ld	hl, 1
  441 D1:AFB6 22 53 B8 D1 	ld	(TextXPos_ASM), hl
  442 D1:AFBA 21 8D EC D1 	ld	hl, LineNumber
  443 D1:AFBE CD 14 B1 D1 	call	PrintString
  444 D1:AFC2 2A 1A 23 D0 	ld	hl, (curPC)
  445 D1:AFC6 ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  446 D1:AFCB B7 -  -  -  	or	a, a
  447 D1:AFCC ED 52 -  -  	sbc	hl, de
  448 D1:AFCE E5 -  -  -  	push	hl
  449 D1:AFCF C1 -  -  -  	pop	bc
  450 D1:AFD0 ED 62 -  -  	sbc	hl, hl
  451 D1:AFD2 23 -  -  -  	inc	hl
  452 D1:AFD3 EB -  -  -  	ex	de, hl
  453 D1:AFD4 -  -  -  -  GetAmountOfLines:
  454 D1:AFD4 78 -  -  -  	ld	a, b
  455 D1:AFD5 B1 -  -  -  	or	a, c
  456 D1:AFD6 28 09 -  -  	jr	z, GetAmountOfLinesStop
  457 D1:AFD8 3E 3F -  -  	ld	a, tEnter
  458 D1:AFDA ED B1 -  -  	cpir
  459 D1:AFDC 20 03 -  -  	jr	nz, GetAmountOfLinesStop
  460 D1:AFDE 13 -  -  -  	inc	de
  461 D1:AFDF 18 F3 -  -  	jr	GetAmountOfLines
  462 D1:AFE1 -  -  -  -  GetAmountOfLinesStop:
  463 D1:AFE1 EB -  -  -  	ex	de, hl
  464 D1:AFE2 AF -  -  -  	xor	a
  465 D1:AFE3 11 18 06 D0 	ld	de, OP3+10
  466 D1:AFE7 12 -  -  -  	ld	(de), a
  467 D1:AFE8 -  -  -  -  NumberToStringLoop:
  468 D1:AFE8 3E 0A -  -  	ld	a, 10
  469 D1:AFEA CD 90 1D 02 	call	_DivHLByA
  470 D1:AFEE C6 30 -  -  	add	a, t0
  471 D1:AFF0 1B -  -  -  	dec	de
  472 D1:AFF1 12 -  -  -  	ld	(de), a
  473 D1:AFF2 19 -  -  -  	add	hl, de
  474 D1:AFF3 B7 -  -  -  	or	a, a
  475 D1:AFF4 ED 52 -  -  	sbc	hl, de
  476 D1:AFF6 20 F0 -  -  	jr	nz, NumberToStringLoop
  477 D1:AFF8 EB -  -  -  	ex	de, hl
  478 D1:AFF9 CD 14 B1 D1 	call	PrintString
  479 D1:AFFD -  -  -  -  SkipDisplayLineNumber:
  480 D1:AFFD 3E E6 -  -  	ld	a, 230
  481 D1:AFFF 32 84 B8 D1 	ld	(TextYPos_ASM), a
  482 D1:B003 21 55 00 00 	ld	hl, 85
  483 D1:B007 22 53 B8 D1 	ld	(TextXPos_ASM), hl
  484 D1:B00B 21 4A ED D1 	ld	hl, PressKey
  485 D1:B00F CD 14 B1 D1 	call	PrintString
  486 D1:B013 CD 8C 0D 02 	call	_GetKey
  487 D1:B017 -  -  -  -  StopProgram:
  488 D1:B017 2A 1A 23 D0 	ld	hl, (curPC)
  489 D1:B01B ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  490 D1:B020 37 -  -  -  	scf
  491 D1:B021 ED 52 -  -  	sbc	hl, de
  492 D1:B023 40 22 E3 08 	ld.sis	(errOffset - 0D00000h), hl
  493 D1:B027 -  -  -  -  backupSP = $+1
  494 D1:B027 31 00 00 00 	ld	sp, 0
  495 D1:B02B -  -  -  -  backupBegPC = $+1
  496 D1:B02B 21 00 00 00 	ld	hl, 0
  497 D1:B02F 22 17 23 D0 	ld	(begPC), hl
  498 D1:B033 -  -  -  -  backupCurPC = $+1
  499 D1:B033 21 00 00 00 	ld	hl, 0
  500 D1:B037 22 1A 23 D0 	ld	(curPC), hl
  501 D1:B03B -  -  -  -  backupEndPC = $+1
  502 D1:B03B 21 00 00 00 	ld	hl, 0
  503 D1:B03F 22 1D 23 D0 	ld	(endPC), hl
  504 D1:B043 CD 08 08 02 	call	_ClrLCDFull
  505 D1:B047 CD 28 08 02 	call	_HomeUp
  506 D1:B04B 3E 2D -  -  	ld	a, lcdBpp16
  507 D1:B04D 32 18 00 E3 	ld	(mpLcdCtrl), a
  508 D1:B051 CD 3C 1A 02 	call	_DrawStatusBar
  509 D1:B055 C9 -  -  -  	ret
  510 D1:B056 FD CB D0 4E 	bit	good_compilation, (iy+fProgram1)
  511 D1:B05A C0 -  -  -  	ret	nz
  512 D1:B05B -  -  -  -  #include "editor.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\editor.asm"
    1 D1:B05B -  -  -  -  OpenEditBuffer:
    2 D1:B05B 21 F9 05 D0 	ld	hl, OP1+1
    3 D1:B05F 11 5B 06 D0 	ld	de, progToEdit
    4 D1:B063 01 08 00 00 	ld	bc, 8
    5 D1:B067 ED B0 -  -  	ldir
    6 D1:B069 11 1F EA D0 	ld	de, saveSScreen
    7 D1:B06D 21 7B B0 D1 	ld	hl, +_
    8 D1:B071 01 63 00 00 	ld	bc, StopProgramEditor - +_
    9 D1:B075 ED B0 -  -  	ldir
   10 D1:B077 C3 1F EA D0 	jp	saveSScreen
   11 D1:B07B 21 81 A8 D1 _:	ld	hl, UserMem
   12 D1:B07F ED 5B 8C 11 
              D0 -  -  -  	ld	de, (asm_prgm_size)
   13 D1:B084 CD 90 05 02 	call	_DelMem
   14 D1:B088 3E 46 -  -  	ld	a, kPrgmEd
   15 D1:B08A CD 6C 01 02 	call	_NewContext
   16 D1:B08E 40 ED 4B E3 
              08 -  -  -  	ld.sis	bc, (errOffset - 0D00000h)
   17 D1:B093 2A 3D 24 D0 	ld	hl, (editTail)
   18 D1:B097 ED 5B 3A 24 
              D0 -  -  -  	ld	de, (editCursor)
   19 D1:B09C ED B0 -  -  	ldir
   20 D1:B09E 22 3D 24 D0 	ld	(editTail), hl
   21 D1:B0A2 ED 53 3A 24 
              D0 -  -  -  	ld	(editCursor), de
   22 D1:B0A7 -  -  -  -  FindPreviousEnter:
   23 D1:B0A7 CD F8 0C 02 	call	_BufLeft
   24 D1:B0AB 28 0C -  -  	jr	z, AtTopOfProgram
   25 D1:B0AD 7B -  -  -  	ld	a, e
   26 D1:B0AE FE 3F -  -  	cp	a, tEnter
   27 D1:B0B0 28 03 -  -  	jr	z, +_
   28 D1:B0B2 03 -  -  -  	inc	bc
   29 D1:B0B3 18 F2 -  -  	jr	FindPreviousEnter
   30 D1:B0B5 CD FC 0C 02 _:	call	_BufRight
   31 D1:B0B9 -  -  -  -  AtTopOfProgram:
   32 D1:B0B9 C5 -  -  -  	push	bc
   33 D1:B0BA CD 1C 08 02 		call	_ClrWindow
   34 D1:B0BE 21 01 00 00 		ld	hl, 0000001h
   35 D1:B0C2 22 95 05 D0 		ld	(curRow), hl
   36 D1:B0C6 3E 3A -  -  		ld	a, ':'
   37 D1:B0C8 CD B8 07 02 		call	_PutC
   38 D1:B0CC CD 68 0D 02 		call	_DispEOW
   39 D1:B0D0 C1 -  -  -  	pop	bc
   40 D1:B0D1 78 -  -  -  _:	ld	a, b
   41 D1:B0D2 B1 -  -  -  	or	a, c
   42 D1:B0D3 CA 54 01 02 	jp	z, _Mon
   43 D1:B0D7 CD 4C 0D 02 	call	_CursorRight
   44 D1:B0DB 0B -  -  -  	dec	bc
   45 D1:B0DC 18 F3 -  -  	jr	-_
   46 D1:B0DE -  -  -  -  StopProgramEditor:
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\routines.asm"
  513 D1:B0DE -  -  -  -  	
  514 D1:B0DE -  -  -  -  ClearScreen:
  515 D1:B0DE 21 00 0F D4 	ld	hl, vRAM+(320*12)
  516 D1:B0E2 36 FF -  -  	ld	(hl), 255
  517 D1:B0E4 E5 -  -  -  	push	hl
  518 D1:B0E5 D1 -  -  -  	pop	de
  519 D1:B0E6 13 -  -  -  	inc	de
  520 D1:B0E7 01 FF 1C 01 	ld	bc, 320*228-1
  521 D1:B0EB ED B0 -  -  	ldir
  522 D1:B0ED 03 -  -  -  	inc	bc
  523 D1:B0EE ED 43 53 B8 
              D1 -  -  -  	ld	(TextXPos_ASM), bc
  524 D1:B0F3 3E 0C -  -  	ld	a, 12
  525 D1:B0F5 32 84 B8 D1 	ld	(TextYPos_ASM), a
  526 D1:B0F9 AF -  -  -  	xor	a
  527 D1:B0FA 32 A9 B8 D1 	ld	(color), a
  528 D1:B0FE C9 -  -  -  	ret
  529 D1:B0FF -  -  -  -  	
  530 D1:B0FF -  -  -  -  PrintCompilingProgram:
  531 D1:B0FF AF -  -  -  	xor	a
  532 D1:B100 32 01 06 D0 	ld	(OP1+9), a
  533 D1:B104 CD DE B0 D1 	call	ClearScreen
  534 D1:B108 21 0C ED D1 	ld	hl, StartParseMessage
  535 D1:B10C CD 14 B1 D1 	call	PrintString
  536 D1:B110 21 F9 05 D0 	ld	hl, OP1+1
  537 D1:B114 -  -  -  -  	
  538 D1:B114 -  -  -  -  PrintString:
  539 D1:B114 7E -  -  -  	ld	a, (hl)
  540 D1:B115 23 -  -  -  	inc	hl
  541 D1:B116 B7 -  -  -  	or	a
  542 D1:B117 C4 51 B8 D1 	call	nz, _PrintChar_ASM
  543 D1:B11B 20 F7 -  -  	jr	nz, PrintString
  544 D1:B11D C9 -  -  -  	ret
  545 D1:B11E -  -  -  -  	
  546 D1:B11E -  -  -  -  PreScanPrograms:
  547 D1:B11E 2A 1D 23 D0 	ld	hl, (endPC)
  548 D1:B122 ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  549 D1:B127 B7 -  -  -  	or	a
  550 D1:B128 ED 52 -  -  	sbc	hl, de
  551 D1:B12A 23 -  -  -  	inc	hl
  552 D1:B12B E5 -  -  -  	push	hl
  553 D1:B12C C1 -  -  -  	pop	bc
  554 D1:B12D 2A 1A 23 D0 	ld	hl, (curPC)
  555 D1:B131 -  -  -  -  ScanLoop:
  556 D1:B131 78 -  -  -  	ld	a, b
  557 D1:B132 B1 -  -  -  	or	a, c
  558 D1:B133 C8 -  -  -  	ret	z
  559 D1:B134 7E -  -  -  	ld	a, (hl)
  560 D1:B135 CD AC 04 02 	call	_IsA2ByteTok
  561 D1:B139 20 02 -  -  	jr	nz, +_
  562 D1:B13B 23 -  -  -  	inc	hl
  563 D1:B13C 0B -  -  -  	dec	bc
  564 D1:B13D 23 -  -  -  _:	inc	hl
  565 D1:B13E 0B -  -  -  	dec	bc
  566 D1:B13F FE B3 -  -  	cp	a, tDet
  567 D1:B141 28 2D -  -  	jr	z, ScanFoundDet
  568 D1:B143 FE D8 -  -  	cp	a, tPause
  569 D1:B145 28 13 -  -  	jr	z, ScanFoundPause
  570 D1:B147 FE BC -  -  	cp	a, tSqrt
  571 D1:B149 28 1A -  -  	jr	z, ScanFoundRoot
  572 D1:B14B FE DC -  -  	cp	a, tInput
  573 D1:B14D 20 E2 -  -  	jr	nz, ScanLoop
  574 D1:B14F -  -  -  -  ScanFoundInput:
  575 D1:B14F 3A 80 EA D1 	ld	a, (amountOfInput)
  576 D1:B153 3C -  -  -  	inc	a
  577 D1:B154 32 80 EA D1 	ld	(amountOfInput), a
  578 D1:B158 18 D7 -  -  	jr	ScanLoop
  579 D1:B15A -  -  -  -  ScanFoundPause:
  580 D1:B15A 3A 81 EA D1 	ld	a, (amountOfPause)
  581 D1:B15E 3C -  -  -  	inc	a
  582 D1:B15F 32 81 EA D1 	ld	(amountOfPause), a
  583 D1:B163 18 CC -  -  	jr	ScanLoop
  584 D1:B165 -  -  -  -  ScanFoundRoot:
  585 D1:B165 3A 82 EA D1 	ld	a, (amountOfRoot)
  586 D1:B169 3C -  -  -  	inc	a
  587 D1:B16A 32 82 EA D1 	ld	(amountOfRoot), a
  588 D1:B16E 18 C1 -  -  	jr	ScanLoop
  589 D1:B170 -  -  -  -  ScanFoundDet:
  590 D1:B170 7E -  -  -  	ld	a, (hl)
  591 D1:B171 D6 30 -  -  	sub	a, t0
  592 D1:B173 38 BC -  -  	jr	c, ScanLoop
  593 D1:B175 FE 0A -  -  	cp	a, t9-t0+1
  594 D1:B177 30 B8 -  -  	jr	nc, ScanLoop
  595 D1:B179 11 00 00 00 	ld	de, 0
  596 D1:B17D 5F -  -  -  	ld	e, a
  597 D1:B17E 23 -  -  -  	inc	hl
  598 D1:B17F 0B -  -  -  	dec	bc
  599 D1:B180 78 -  -  -  	ld	a, b
  600 D1:B181 B1 -  -  -  	or	c
  601 D1:B182 28 21 -  -  	jr	z, FoundRightCFunction
  602 D1:B184 7E -  -  -  	ld	a, (hl)
  603 D1:B185 FE 2B -  -  	cp	a, tComma
  604 D1:B187 28 1C -  -  	jr	z, FoundRightCFunction
  605 D1:B189 FE 3F -  -  	cp	a, tEnter
  606 D1:B18B 28 18 -  -  	jr	z, FoundRightCFunction
  607 D1:B18D D6 30 -  -  	sub	t0
  608 D1:B18F 38 14 -  -  	jr	c, FoundRightCFunction
  609 D1:B191 FE 0A -  -  	cp	a, t9-t0+1
  610 D1:B193 30 10 -  -  	jr	nc, FoundRightCFunction
  611 D1:B195 E5 -  -  -  	push	hl
  612 D1:B196 EB -  -  -  		ex	de, hl
  613 D1:B197 29 -  -  -  		add	hl, hl
  614 D1:B198 E5 -  -  -  		push	hl
  615 D1:B199 D1 -  -  -  		pop	de
  616 D1:B19A 29 -  -  -  		add	hl, hl
  617 D1:B19B 29 -  -  -  		add	hl, hl
  618 D1:B19C 19 -  -  -  		add	hl, de
  619 D1:B19D 11 00 00 00 		ld	de, 0
  620 D1:B1A1 5F -  -  -  		ld	e, a
  621 D1:B1A2 19 -  -  -  		add	hl, de
  622 D1:B1A3 EB -  -  -  		ex	de, hl
  623 D1:B1A4 E1 -  -  -  	pop	hl
  624 D1:B1A5 -  -  -  -  FoundRightCFunction:
  625 D1:B1A5 E5 -  -  -  	push	hl
  626 D1:B1A6 EB -  -  -  		ex	de, hl
  627 D1:B1A7 11 51 00 00 		ld	de, AMOUNT_OF_C_FUNCTIONS
  628 D1:B1AB B7 -  -  -  		or	a
  629 D1:B1AC ED 52 -  -  		sbc	hl, de
  630 D1:B1AE 30 1F -  -  		jr	nc,  WrongCFunction
  631 D1:B1B0 19 -  -  -  		add	hl, de
  632 D1:B1B1 EB -  -  -  		ex	de, hl
  633 D1:B1B2 21 90 EA D1 		ld	hl, usedCroutines
  634 D1:B1B6 19 -  -  -  		add	hl, de
  635 D1:B1B7 7E -  -  -  		ld	a, (hl)
  636 D1:B1B8 B7 -  -  -  		or	a
  637 D1:B1B9 20 14 -  -  		jr	nz, FunctionAlreadyInProgram
  638 D1:B1BB -  -  -  -  AddCFunctionToProgram:
  639 D1:B1BB 3A 7E EA D1 		ld	a, (amountOfCRoutines)
  640 D1:B1BF 3C -  -  -  		inc	a
  641 D1:B1C0 77 -  -  -  		ld	(hl), a
  642 D1:B1C1 32 7E EA D1 		ld	(amountOfCRoutines), a
  643 D1:B1C5 3E C3 -  -  		ld	a, 0C3h
  644 D1:B1C7 D5 -  -  -  		push	de
  645 D1:B1C8 E1 -  -  -  		pop	hl
  646 D1:B1C9 29 -  -  -  		add	hl, hl
  647 D1:B1CA 19 -  -  -  		add	hl, de
  648 D1:B1CB CD 4C AC D1 		call	InsertAHL																; jp *
  649 D1:B1CF -  -  -  -  FunctionAlreadyInProgram:
  650 D1:B1CF -  -  -  -  WrongCFunction:
  651 D1:B1CF E1 -  -  -  	pop	hl
  652 D1:B1D0 C3 31 B1 D1 	jp	ScanLoop
  653 D1:B1D4 -  -  -  -  
  654 D1:B1D4 -  -  -  -  GetSpriteData:
  655 D1:B1D4 B7 -  -  -  	or	a
  656 D1:B1D5 ED 52 -  -  	sbc	hl, de
  657 D1:B1D7 C8 -  -  -  	ret	z
  658 D1:B1D8 19 -  -  -  	add	hl, de
  659 D1:B1D9 1A -  -  -  	ld	a, (de)
  660 D1:B1DA D6 30 -  -  	sub	t0
  661 D1:B1DC DA 80 AF D1 	jp	c, WrongSpriteDataError
  662 D1:B1E0 FE 11 -  -  	cp	a, tA-t0
  663 D1:B1E2 38 0A -  -  	jr	c, +_
  664 D1:B1E4 D6 11 -  -  	sub	tA-t0
  665 D1:B1E6 FE 06 -  -  	cp	a, tG-tA
  666 D1:B1E8 D2 80 AF D1 	jp	nc, WrongSpriteDataError
  667 D1:B1EC C6 0A -  -  	add	a, 10
  668 D1:B1EE 87 -  -  -  _:	add	a, a
  669 D1:B1EF 87 -  -  -  	add	a, a
  670 D1:B1F0 87 -  -  -  	add	a, a
  671 D1:B1F1 87 -  -  -  	add	a, a
  672 D1:B1F2 DD 67 -  -  	ld	ixh, a
  673 D1:B1F4 13 -  -  -  	inc	de
  674 D1:B1F5 B7 -  -  -  	or	a
  675 D1:B1F6 ED 52 -  -  	sbc	hl, de
  676 D1:B1F8 CA 40 AF D1 	jp	z, ErrorSyntax
  677 D1:B1FC 19 -  -  -  	add	hl, de
  678 D1:B1FD 1A -  -  -  	ld	a, (de)
  679 D1:B1FE D6 30 -  -  	sub	t0
  680 D1:B200 DA 80 AF D1 	jp	c, WrongSpriteDataError
  681 D1:B204 FE 11 -  -  	cp	a, tA-t0
  682 D1:B206 38 0A -  -  	jr	c, +_
  683 D1:B208 D6 11 -  -  	sub	tA-t0
  684 D1:B20A FE 06 -  -  	cp	a, tG-tA
  685 D1:B20C D2 80 AF D1 	jp	nc, WrongSpriteDataError
  686 D1:B210 C6 0A -  -  	add	a, 10
  687 D1:B212 DD B4 -  -  _:	or	a, ixh
  688 D1:B214 02 -  -  -  	ld	(bc), a
  689 D1:B215 03 -  -  -  	inc	bc
  690 D1:B216 13 -  -  -  	inc	de
  691 D1:B217 18 BB -  -  	jr	GetSpriteData
  692 D1:B219 -  -  -  -  	
  693 D1:B219 -  -  -  -  UpdateSpritePointers:
  694 D1:B219 C5 -  -  -  	push	bc
  695 D1:B21A 2A 62 EA D1 		ld	hl, (programPtr)
  696 D1:B21E ED 5B 33 EA 
              D0 -  -  -  		ld	de, (PrevProgramPtr)
  697 D1:B223 B7 -  -  -  		or	a
  698 D1:B224 ED 52 -  -  		sbc	hl, de
  699 D1:B226 EB -  -  -  		ex	de, hl
  700 D1:B227 01 F4 FF FF 		ld	bc, -12
  701 D1:B22B 09 -  -  -  		add	hl, bc
  702 D1:B22C E5 -  -  -  		push	hl
  703 D1:B22D ED 27 -  -  			ld	hl, (hl)
  704 D1:B22F 19 -  -  -  			add	hl, de
  705 D1:B230 EB -  -  -  			ex	de, hl
  706 D1:B231 E1 -  -  -  		pop	hl
  707 D1:B232 ED 1F -  -  		ld	(hl), de
  708 D1:B234 C1 -  -  -  	pop	bc
  709 D1:B235 C9 -  -  -  	ret
  710 D1:B236 -  -  -  -  	
  711 D1:B236 -  -  -  -  GetProgramName:
  712 D1:B236 E5 -  -  -  	push	hl
  713 D1:B237 CD 28 10 02 		call	_IncFetch
  714 D1:B23B E1 -  -  -  	pop	hl
  715 D1:B23C DA 5C AF D1 	jp	c, InvalidNameLength
  716 D1:B240 23 -  -  -  	inc	hl
  717 D1:B241 FE 3F -  -  	cp	a, tEnter
  718 D1:B243 CA 5C AF D1 	jp	z, InvalidNameLength
  719 D1:B247 FE 41 -  -  	cp	a, tA
  720 D1:B249 DA 56 AF D1 	jp	c, InvalidTokenError
  721 D1:B24D FE 5C -  -  	cp	a, ttheta+1
  722 D1:B24F D2 56 AF D1 	jp	nc, InvalidTokenError
  723 D1:B253 77 -  -  -  	ld	(hl), a
  724 D1:B254 1E 08 -  -  	ld	e, 8
  725 D1:B256 -  -  -  -  GetProgramNameLoop:
  726 D1:B256 E5 -  -  -  	push	hl
  727 D1:B257 CD 28 10 02 		call	_IncFetch
  728 D1:B25B E1 -  -  -  	pop	hl
  729 D1:B25C 23 -  -  -  	inc	hl
  730 D1:B25D 36 00 -  -  	ld	(hl), 0
  731 D1:B25F D8 -  -  -  	ret	c
  732 D1:B260 FE 3F -  -  	cp	a, tEnter
  733 D1:B262 C8 -  -  -  	ret	z
  734 D1:B263 FE 30 -  -  	cp	a, t0
  735 D1:B265 DA 56 AF D1 _:	jp	c, InvalidTokenError
  736 D1:B269 FE 3A -  -  	cp	a, t9+1
  737 D1:B26B 38 0A -  -  	jr	c, +_
  738 D1:B26D FE 41 -  -  	cp	a, tA
  739 D1:B26F 38 F4 -  -  	jr	c, -_
  740 D1:B271 FE 5C -  -  	cp	a, ttheta+1
  741 D1:B273 D2 56 AF D1 	jp	nc, InvalidTokenError
  742 D1:B277 77 -  -  -  _:	ld	(hl), a
  743 D1:B278 1D -  -  -  	dec	e
  744 D1:B279 20 DB -  -  	jr	nz, GetProgramNameLoop
  745 D1:B27B C3 5C AF D1 	jp	InvalidNameLength
Listing for file "ice.asm"
  442 D1:B27F -  -  -  -  #include "parse.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
    1 D1:B27F -  -  -  -  ParseLine:
    2 D1:B27F CD 2C 10 02 	call	_CurFetch
    3 D1:B283 FE 3F -  -  	cp	a, tEnter
    4 D1:B285 C8 -  -  -  	ret	z
    5 D1:B286 21 2B E9 D1 	ld	hl, FunctionsSingle
    6 D1:B28A 01 10 00 00 	ld	bc, FunctionsSingleEnd - FunctionsSingle
    7 D1:B28E ED B1 -  -  	cpir
    8 D1:B290 20 2F -  -  	jr	nz, ParseExpression2
    9 D1:B292 FE 62 -  -  	cp	a, tVarOut
   10 D1:B294 28 10 -  -  	jr	z, +_
   11 D1:B296 FE 2C -  -  	cp	a, tii
   12 D1:B298 28 0C -  -  	jr	z, +_
   13 D1:B29A FD CB D0 7E 	bit	used_code, (iy+fProgram1)
   14 D1:B29E FD CB D0 FE 	set	used_code, (iy+fProgram1)
   15 D1:B2A2 CC 19 B2 D1 	call	z, UpdateSpritePointers
   16 D1:B2A6 3A 7C EA D1 _:	ld	a, (openedParensF)
   17 D1:B2AA B7 -  -  -  	or	a, a
   18 D1:B2AB C2 74 AF D1 	jp	nz, FunctionError
   19 D1:B2AF FD 77 B0 -  	ld	(iy+fFunction1), a
   20 D1:B2B2 FD 77 AF -  	ld	(iy+fFunction2), a
   21 D1:B2B5 06 03 -  -  	ld	b, 3
   22 D1:B2B7 ED 4C -  -  	mlt	bc
   23 D1:B2B9 21 3B E9 D1 	ld	hl, FunctionsSingleStart
   24 D1:B2BD 09 -  -  -  	add	hl, bc
   25 D1:B2BE ED 27 -  -  	ld	hl, (hl)
   26 D1:B2C0 E9 -  -  -  	jp	(hl)
   27 D1:B2C1 -  -  -  -  	
   28 D1:B2C1 -  -  -  -  ParseExpression2:
   29 D1:B2C1 FD CB D0 7E 	bit	used_code, (iy+fProgram1)
   30 D1:B2C5 FD CB D0 FE 	set	used_code, (iy+fProgram1)
   31 D1:B2C9 CC 19 B2 D1 	call	z, UpdateSpritePointers
   32 D1:B2CD -  -  -  -  ParseExpression:
   33 D1:B2CD 21 83 EA D0 	ld	hl, stack
   34 D1:B2D1 22 5C EA D1 	ld	(stackPtr), hl
   35 D1:B2D5 21 6B EE D0 	ld	hl, output
   36 D1:B2D9 22 5F EA D1 	ld	(outputPtr), hl
   37 D1:B2DD AF -  -  -  	xor	a, a
   38 D1:B2DE 32 7B EA D1 	ld	(openedParensE), a
   39 D1:B2E2 FD 77 C0 -  	ld	(iy+fExpression1), a
   40 D1:B2E5 FD 77 BF -  	ld	(iy+fExpression2), a
   41 D1:B2E8 FD 77 BE -  	ld	(iy+fExpression3), a
   42 D1:B2EB CD 2C 10 02 	call	_CurFetch
   43 D1:B2EF -  -  -  -  MainLoopResCarryFlag:
   44 D1:B2EF B7 -  -  -  	or	a, a	
   45 D1:B2F0 -  -  -  -  MainLoop:
   46 D1:B2F0 32 1F EA D0 	ld	(tempToken), a
   47 D1:B2F4 DA 83 B6 D1 	jp	c, StopParsing
   48 D1:B2F8 FE 30 -  -  	cp	a, t0
   49 D1:B2FA 38 45 -  -  	jr	c, NotANumber
   50 D1:B2FC FE 3A -  -  	cp	a, t9+1
   51 D1:B2FE 30 41 -  -  	jr	nc, NotANumber
   52 D1:B300 -  -  -  -  ANumber:
   53 D1:B300 -  -  -  -  #include "number.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\number.asm"
    1 D1:B300 2A 5F EA D1 	ld	hl, (outputPtr)
    2 D1:B304 FD CB C0 46 	bit	prev_is_number, (iy+fExpression1)
    3 D1:B308 FD CB C0 C6 	set	prev_is_number, (iy+fExpression1)
    4 D1:B30C 28 1A -  -  	jr	z, AddNumberToStack
    5 D1:B30E -  -  -  -  ChangeLastNumberFromStack:
    6 D1:B30E 2B -  -  -  	dec	hl
    7 D1:B30F 2B -  -  -  	dec	hl
    8 D1:B310 2B -  -  -  	dec	hl
    9 D1:B311 E5 -  -  -  	push	hl
   10 D1:B312 ED 27 -  -  		ld	hl, (hl)
   11 D1:B314 29 -  -  -  		add	hl, hl											;	HL * 10
   12 D1:B315 E5 -  -  -  		push	hl
   13 D1:B316 D1 -  -  -  		pop	de
   14 D1:B317 29 -  -  -  		add	hl, hl
   15 D1:B318 29 -  -  -  		add	hl, hl
   16 D1:B319 19 -  -  -  		add	hl, de
   17 D1:B31A D6 30 -  -  		sub	a, t0											;	HL + <number>
   18 D1:B31C 11 00 00 00 		ld	de, 0
   19 D1:B320 5F -  -  -  		ld	e, a
   20 D1:B321 19 -  -  -  		add	hl, de
   21 D1:B322 D1 -  -  -  	pop	de
   22 D1:B323 EB -  -  -  	ex	de, hl
   23 D1:B324 ED 1F -  -  	ld	(hl), de
   24 D1:B326 18 13 -  -  	jr	NumberStop
   25 D1:B328 -  -  -  -  AddNumberToStack:
   26 D1:B328 36 00 -  -  	ld	(hl), typeNumber
   27 D1:B32A 23 -  -  -  	inc	hl
   28 D1:B32B D6 30 -  -  	sub	a, t0												;	new number
   29 D1:B32D -  -  -  -  InsertAndUpdatePointer
   30 D1:B32D 11 00 00 00 	ld	de, 0
   31 D1:B331 5F -  -  -  	ld	e, a
   32 D1:B332 ED 1F -  -  	ld	(hl), de
   33 D1:B334 -  -  -  -  UpdatePointer:
   34 D1:B334 23 -  -  -  	inc	hl
   35 D1:B335 23 -  -  -  	inc	hl
   36 D1:B336 23 -  -  -  	inc	hl
   37 D1:B337 22 5F EA D1 	ld	(outputPtr), hl
   38 D1:B33B -  -  -  -  NumberStop:
   39 D1:B33B CD 28 10 02 	call	_IncFetch
   40 D1:B33F 18 AF -  -  	jr	MainLoop
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   54 D1:B341 -  -  -  -  
   55 D1:B341 -  -  -  -  NotANumber:
   56 D1:B341 FD CB C0 86 	res	prev_is_number, (iy+fExpression1)
   57 D1:B345 FE 41 -  -  	cp	a, tA
   58 D1:B347 38 0F -  -  	jr	c, NotAVariable
   59 D1:B349 FE 5C -  -  	cp	a, ttheta+1
   60 D1:B34B 30 0B -  -  	jr	nc, NotAVariable
   61 D1:B34D -  -  -  -  AVariable:
   62 D1:B34D 2A 5F EA D1 	ld	hl, (outputPtr)
   63 D1:B351 36 01 -  -  	ld	(hl), typeVariable
   64 D1:B353 23 -  -  -  	inc	hl
   65 D1:B354 D6 41 -  -  	sub	a, tA
   66 D1:B356 18 D5 -  -  	jr	InsertAndUpdatePointer
   67 D1:B358 -  -  -  -  NotAVariable:
   68 D1:B358 21 EF E8 D1 	ld	hl, operators_booleans
   69 D1:B35C 01 0F 00 00 	ld	bc, 15
   70 D1:B360 ED B1 -  -  	cpir
   71 D1:B362 20 75 -  -  	jr	nz, NotABoolean
   72 D1:B364 -  -  -  -  ABoolean:
   73 D1:B364 -  -  -  -  #include "operator.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operator.asm"
    1 D1:B364 21 1C EA D1 	ld	hl, precedence
    2 D1:B368 09 -  -  -  	add	hl, bc
    3 D1:B369 5E -  -  -  	ld	e, (hl)										;	e = precedence of current token
    4 D1:B36A FE 04 -  -  	cp	a, tStore
    5 D1:B36C CC 1C B8 D1 	call	z, MoveStackEntryToOutput
    6 D1:B370 -  -  -  -  CheckOperator:
    7 D1:B370 2A 5C EA D1 	ld	hl, (stackPtr)
    8 D1:B374 01 83 EA D0 	ld	bc, stack
    9 D1:B378 B7 -  -  -  	or	a, a
   10 D1:B379 ED 42 -  -  	sbc	hl, bc
   11 D1:B37B 28 41 -  -  	jr	z, InsertBoolean
   12 D1:B37D 09 -  -  -  	add	hl, bc
   13 D1:B37E 2B -  -  -  	dec	hl
   14 D1:B37F 2B -  -  -  	dec	hl
   15 D1:B380 2B -  -  -  	dec	hl
   16 D1:B381 2B -  -  -  	dec	hl
   17 D1:B382 7E -  -  -  	ld	a, (hl)
   18 D1:B383 FE 1F -  -  	cp	a, typeOperator
   19 D1:B385 20 37 -  -  	jr	nz, InsertBoolean
   20 D1:B387 23 -  -  -  	inc	hl
   21 D1:B388 7E -  -  -  	ld	a, (hl)
   22 D1:B389 21 EF E8 D1 	ld	hl, operators_booleans
   23 D1:B38D 01 0F 00 00 	ld	bc, 15
   24 D1:B391 ED B1 -  -  	cpir
   25 D1:B393 21 2B EA D1 	ld	hl, precedence2
   26 D1:B397 09 -  -  -  	add	hl, bc
   27 D1:B398 7E -  -  -  	ld	a, (hl)										;	a = precedence of last token on stack
   28 D1:B399 BB -  -  -  	cp	a, e											;	if a <= e then move
   29 D1:B39A 38 22 -  -  	jr	c, InsertBoolean
   30 D1:B39C -  -  -  -  MoveBooleanFromStackToOutput:
   31 D1:B39C 7B -  -  -  	ld	a, e											;	save for the precedence of current token
   32 D1:B39D ED 5B 5F EA 
              D1 -  -  -  	ld	de, (outputPtr)
   33 D1:B3A2 2A 5C EA D1 	ld	hl, (stackPtr)
   34 D1:B3A6 2B -  -  -  	dec	hl
   35 D1:B3A7 2B -  -  -  	dec	hl
   36 D1:B3A8 2B -  -  -  	dec	hl
   37 D1:B3A9 2B -  -  -  	dec	hl
   38 D1:B3AA 22 5C EA D1 	ld	(stackPtr), hl
   39 D1:B3AE ED A0 -  -  	ldi
   40 D1:B3B0 ED A0 -  -  	ldi
   41 D1:B3B2 ED A0 -  -  	ldi
   42 D1:B3B4 ED A0 -  -  	ldi
   43 D1:B3B6 ED 53 5F EA 
              D1 -  -  -  	ld	(outputPtr), de
   44 D1:B3BB 5F -  -  -  	ld	e, a
   45 D1:B3BC 18 B2 -  -  	jr	CheckOperator
   46 D1:B3BE -  -  -  -  InsertBoolean:
   47 D1:B3BE 2A 5C EA D1 	ld	hl, (stackPtr)
   48 D1:B3C2 36 1F -  -  	ld	(hl), typeOperator
   49 D1:B3C4 23 -  -  -  	inc	hl
   50 D1:B3C5 3A 1F EA D0 	ld	a, (tempToken)
   51 D1:B3C9 77 -  -  -  	ld	(hl), a
   52 D1:B3CA 23 -  -  -  	inc	hl
   53 D1:B3CB 23 -  -  -  	inc	hl
   54 D1:B3CC 23 -  -  -  	inc	hl
   55 D1:B3CD 22 5C EA D1 	ld	(stackPtr), hl
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   74 D1:B3D1 -  -  -  -  
   75 D1:B3D1 -  -  -  -  ReturnToLoop:
   76 D1:B3D1 CD 28 10 02 	call	_IncFetch
   77 D1:B3D5 C3 F0 B2 D1 	jp	MainLoop
   78 D1:B3D9 -  -  -  -  NotABoolean:
   79 D1:B3D9 FE 2B -  -  	cp	a, tComma
   80 D1:B3DB 28 06 -  -  	jr	z, CloseArgument
   81 D1:B3DD FE 11 -  -  	cp	a, tRParen
   82 D1:B3DF C2 72 B4 D1 	jp	nz, NotACommaOrRParen
   83 D1:B3E3 -  -  -  -  CloseArgument:
   84 D1:B3E3 -  -  -  -  #include "closing.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\closing.asm"
    1 D1:B3E3 21 7B EA D1 	ld	hl, openedParensE
    2 D1:B3E7 47 -  -  -  	ld	b, a
    3 D1:B3E8 7E -  -  -  	ld	a, (hl)
    4 D1:B3E9 B7 -  -  -  	or	a, a
    5 D1:B3EA 28 6D -  -  	jr	z, MismatchedParens
    6 D1:B3EC 78 -  -  -  	ld	a, b
    7 D1:B3ED FE 2B -  -  	cp	a, tComma
    8 D1:B3EF 28 01 -  -  	jr	z, +_
    9 D1:B3F1 35 -  -  -  	dec	(hl)
   10 D1:B3F2 2A 5C EA D1 _:	ld	hl, (stackPtr)
   11 D1:B3F6 01 83 EA D0 	ld	bc, stack
   12 D1:B3FA B7 -  -  -  	or	a, a
   13 D1:B3FB ED 42 -  -  	sbc	hl, bc
   14 D1:B3FD 28 52 -  -  	jr	z, StopMovingForArgument2
   15 D1:B3FF 09 -  -  -  	add	hl, bc
   16 D1:B400 2B -  -  -  	dec	hl
   17 D1:B401 2B -  -  -  	dec	hl
   18 D1:B402 2B -  -  -  	dec	hl
   19 D1:B403 2B -  -  -  	dec	hl
   20 D1:B404 7E -  -  -  	ld	a, (hl)
   21 D1:B405 FE 3F -  -  	cp	a, typeFunction
   22 D1:B407 28 23 -  -  	jr	z, StopMovingForArgument
   23 D1:B409 FE 1F -  -  	cp	a, typeOperator
   24 D1:B40B 20 06 -  -  	jr	nz, +_
   25 D1:B40D 23 -  -  -  	inc	hl
   26 D1:B40E 7E -  -  -  	ld	a, (hl)
   27 D1:B40F 2B -  -  -  	dec	hl
   28 D1:B410 B7 -  -  -  	or	a, a
   29 D1:B411 28 19 -  -  	jr	z, StopMovingForArgument
   30 D1:B413 22 5C EA D1 _:	ld	(stackPtr), hl
   31 D1:B417 ED 5B 5F EA 
              D1 -  -  -  	ld	de, (outputPtr)
   32 D1:B41C ED A0 -  -  	ldi
   33 D1:B41E ED A0 -  -  	ldi
   34 D1:B420 ED A0 -  -  	ldi
   35 D1:B422 ED A0 -  -  	ldi
   36 D1:B424 ED 53 5F EA 
              D1 -  -  -  	ld	(outputPtr), de
   37 D1:B429 18 C7 -  -  	jr	--_
   38 D1:B42B 09 -  -  -  _:	add	hl, bc
   39 D1:B42C -  -  -  -  StopMovingForArgument:
   40 D1:B42C 3A 1F EA D0 	ld	a, (tempToken)
   41 D1:B430 FE 2B -  -  	cp	a, tComma
   42 D1:B432 28 1D -  -  	jr	z, StopMovingForArgument2
   43 D1:B434 22 5C EA D1 	ld	(stackPtr), hl
   44 D1:B438 23 -  -  -  	inc	hl
   45 D1:B439 7E -  -  -  	ld	a, (hl)
   46 D1:B43A FE 10 -  -  	cp	a, tLParen
   47 D1:B43C 28 13 -  -  	jr	z, StopMovingForArgument2
   48 D1:B43E 2B -  -  -  	dec	hl
   49 D1:B43F ED 5B 5F EA 
              D1 -  -  -  	ld	de, (outputPtr)
   50 D1:B444 ED A0 -  -  	ldi
   51 D1:B446 ED A0 -  -  	ldi
   52 D1:B448 ED A0 -  -  	ldi
   53 D1:B44A ED A0 -  -  	ldi
   54 D1:B44C ED 53 5F EA 
              D1 -  -  -  	ld	(outputPtr), de
   55 D1:B451 -  -  -  -  StopMovingForArgument2:
   56 D1:B451 CD 28 10 02 	call	_IncFetch
   57 D1:B455 C3 F0 B2 D1 	jp	MainLoop
   58 D1:B459 -  -  -  -  MismatchedParens:
   59 D1:B459 3A 7C EA D1 	ld	a, (openedParensF)
   60 D1:B45D B7 -  -  -  	or	a, a
   61 D1:B45E CA 46 AF D1 	jp	z, MismatchError
   62 D1:B462 3A 1F EA D0 	ld	a, (tempToken)
   63 D1:B466 FE 2B -  -  	cp	a, tComma
   64 D1:B468 20 04 -  -  	jr	nz, +_
   65 D1:B46A FD CB BE C6 	set	triggered_a_comma, (iy+fExpression3)
   66 D1:B46E C3 83 B6 D1 _:	jp	StopParsing
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   85 D1:B472 -  -  -  -  
   86 D1:B472 -  -  -  -  NotACommaOrRParen:
   87 D1:B472 FE 08 -  -  	cp	a, tLBrace
   88 D1:B474 C2 04 B5 D1 	jp	nz, NotAList
   89 D1:B478 -  -  -  -  AList:
   90 D1:B478 -  -  -  -  #include "list.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\list.asm"
    1 D1:B478 2A 5F EA D1 	ld	hl, (outputPtr)
    2 D1:B47C 36 05 -  -  	ld	(hl), typeList
    3 D1:B47E 23 -  -  -  	inc	hl
    4 D1:B47F ED 5B 74 EA 
              D1 -  -  -  	ld	de, (tempListsPtr)
    5 D1:B484 ED 1F -  -  	ld	(hl), de
    6 D1:B486 ED 53 E6 B4 
              D1 -  -  -  	ld	(ListLengthSMC), de
    7 D1:B48B 23 -  -  -  	inc	hl
    8 D1:B48C 23 -  -  -  	inc	hl
    9 D1:B48D 23 -  -  -  	inc	hl
   10 D1:B48E 22 5F EA D1 	ld	(outputPtr), hl
   11 D1:B492 EB -  -  -  	ex	de, hl
   12 D1:B493 23 -  -  -  	inc	hl
   13 D1:B494 23 -  -  -  	inc	hl
   14 D1:B495 23 -  -  -  	inc	hl
   15 D1:B496 22 74 EA D1 	ld	(tempListsPtr), hl
   16 D1:B49A -  -  -  -  ListStart:
   17 D1:B49A B7 -  -  -  	or	a, a
   18 D1:B49B ED 62 -  -  	sbc	hl, hl
   19 D1:B49D -  -  -  -  ListLoop:
   20 D1:B49D E5 -  -  -  	push	hl
   21 D1:B49E CD 28 10 02 		call	_IncFetch
   22 D1:B4A2 E1 -  -  -  	pop	hl
   23 D1:B4A3 FE 30 -  -  	cp	a, t0
   24 D1:B4A5 38 14 -  -  	jr	c, ListNotNumber
   25 D1:B4A7 FE 3A -  -  	cp	a, t9+1
   26 D1:B4A9 30 10 -  -  	jr	nc, ListNotNumber
   27 D1:B4AB D6 30 -  -  	sub	a, t0
   28 D1:B4AD 29 -  -  -  	add	hl, hl
   29 D1:B4AE E5 -  -  -  	push	hl
   30 D1:B4AF D1 -  -  -  	pop	de
   31 D1:B4B0 29 -  -  -  	add	hl, hl
   32 D1:B4B1 29 -  -  -  	add	hl, hl
   33 D1:B4B2 19 -  -  -  	add	hl, de
   34 D1:B4B3 11 00 00 00 	ld	de, 0
   35 D1:B4B7 5F -  -  -  	ld	e, a
   36 D1:B4B8 19 -  -  -  	add	hl, de
   37 D1:B4B9 18 E2 -  -  	jr	ListLoop
   38 D1:B4BB -  -  -  -  ListNotNumber:
   39 D1:B4BB FE 2B -  -  	cp	a, tComma
   40 D1:B4BD 20 10 -  -  	jr	nz, ListNotNumberOrComma
   41 D1:B4BF EB -  -  -  	ex	de, hl
   42 D1:B4C0 2A 74 EA D1 	ld	hl, (tempListsPtr)
   43 D1:B4C4 ED 1F -  -  	ld	(hl), de
   44 D1:B4C6 23 -  -  -  	inc	hl
   45 D1:B4C7 23 -  -  -  	inc	hl
   46 D1:B4C8 23 -  -  -  	inc	hl
   47 D1:B4C9 22 74 EA D1 	ld	(tempListsPtr), hl
   48 D1:B4CD 18 CB -  -  	jr	ListStart
   49 D1:B4CF -  -  -  -  ListNotNumberOrComma:
   50 D1:B4CF FE 09 -  -  	cp	a, tRBrace
   51 D1:B4D1 28 04 -  -  	jr	z, ListStop
   52 D1:B4D3 FE 04 -  -  	cp	a, tStore
   53 D1:B4D5 20 25 -  -  	jr	nz, ListError
   54 D1:B4D7 -  -  -  -  ListStop:
   55 D1:B4D7 EB -  -  -  	ex	de, hl
   56 D1:B4D8 2A 74 EA D1 	ld	hl, (tempListsPtr)
   57 D1:B4DC ED 1F -  -  	ld	(hl), de
   58 D1:B4DE 23 -  -  -  	inc	hl
   59 D1:B4DF 23 -  -  -  	inc	hl
   60 D1:B4E0 23 -  -  -  	inc	hl
   61 D1:B4E1 22 74 EA D1 	ld	(tempListsPtr),  hl
   62 D1:B4E5 -  -  -  -  ListLengthSMC = $+1
   63 D1:B4E5 11 00 00 00 	ld	de, 0
   64 D1:B4E9 2B -  -  -  	dec	hl
   65 D1:B4EA 2B -  -  -  	dec	hl
   66 D1:B4EB 2B -  -  -  	dec	hl
   67 D1:B4EC B7 -  -  -  	or	a, a
   68 D1:B4ED ED 52 -  -  	sbc	hl, de
   69 D1:B4EF EB -  -  -  	ex	de, hl
   70 D1:B4F0 ED 1F -  -  	ld	(hl), de
   71 D1:B4F2 FE 04 -  -  	cp	a, tStore
   72 D1:B4F4 C4 28 10 02 	call	nz, _IncFetch
   73 D1:B4F8 C3 F0 B2 D1 	jp	MainLoop
   74 D1:B4FC -  -  -  -  ListError:
   75 D1:B4FC 21 52 EB D1 	ld	hl, InvalidListArgumentMessage
   76 D1:B500 C3 9C AF D1 	jp	DispFinalString
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   91 D1:B504 -  -  -  -  
   92 D1:B504 -  -  -  -  NotAList:
   93 D1:B504 FE 5D -  -  	cp	a, tVarLst
   94 D1:B506 20 4E -  -  	jr	nz, NotAnOSList
   95 D1:B508 -  -  -  -  AnOSList:
   96 D1:B508 CD 28 10 02 	call	_IncFetch
   97 D1:B50C FE 06 -  -  	cp	a, 6
   98 D1:B50E D2 56 AF D1 	jp	nc, InvalidTokenError
   99 D1:B512 4F -  -  -  	ld	c, a
  100 D1:B513 06 03 -  -  	ld	b, 3
  101 D1:B515 ED 4C -  -  	mlt	bc
  102 D1:B517 21 3A EA D1 	ld	hl, lists
  103 D1:B51B 09 -  -  -  	add	hl, bc
  104 D1:B51C ED 27 -  -  	ld	hl, (hl)
  105 D1:B51E EB -  -  -  	ex	de, hl
  106 D1:B51F 2A 5F EA D1 	ld	hl, (outputPtr)
  107 D1:B523 36 06 -  -  	ld	(hl), typeOSList
  108 D1:B525 23 -  -  -  	inc	hl
  109 D1:B526 ED 1F -  -  	ld	(hl), de
  110 D1:B528 23 -  -  -  	inc	hl
  111 D1:B529 23 -  -  -  	inc	hl
  112 D1:B52A 23 -  -  -  	inc	hl
  113 D1:B52B 22 5F EA D1 	ld	(outputPtr), hl
  114 D1:B52F CD 28 10 02 	call	_IncFetch
  115 D1:B533 FE 10 -  -  	cp	a, tLParen
  116 D1:B535 C2 EF B2 D1 	jp	nz, MainLoopResCarryFlag
  117 D1:B539 21 7B EA D1 	ld	hl, openedParensE
  118 D1:B53D 34 -  -  -  	inc	(hl)
  119 D1:B53E 2A 5C EA D1 	ld	hl, (stackPtr)
  120 D1:B542 36 1F -  -  	ld	(hl), typeOperator
  121 D1:B544 23 -  -  -  	inc	hl
  122 D1:B545 36 00 -  -  	ld	(hl), 0
  123 D1:B547 23 -  -  -  	inc	hl
  124 D1:B548 23 -  -  -  	inc	hl
  125 D1:B549 23 -  -  -  	inc	hl
  126 D1:B54A 22 5C EA D1 	ld	(stackPtr), hl
  127 D1:B54E CD 28 10 02 	call	_IncFetch
  128 D1:B552 C3 F0 B2 D1 	jp	MainLoop
  129 D1:B556 -  -  -  -  NotAnOSList:
  130 D1:B556 FE 2A -  -  	cp	a, tString
  131 D1:B558 20 53 -  -  	jr	nz, NotAString
  132 D1:B55A -  -  -  -  AString:
  133 D1:B55A 2A 5F EA D1 	ld	hl, (outputPtr)
  134 D1:B55E 36 07 -  -  	ld	(hl), typeString
  135 D1:B560 23 -  -  -  	inc	hl
  136 D1:B561 ED 5B 71 EA 
              D1 -  -  -  	ld	de, (tempStringsPtr)
  137 D1:B566 ED 1F -  -  	ld	(hl), de
  138 D1:B568 23 -  -  -  	inc	hl
  139 D1:B569 23 -  -  -  	inc	hl
  140 D1:B56A 23 -  -  -  	inc	hl
  141 D1:B56B 22 5F EA D1 	ld	(outputPtr), hl
  142 D1:B56F -  -  -  -  StringLoop:
  143 D1:B56F CD 28 10 02 	call	_IncFetch
  144 D1:B573 38 2C -  -  	jr	c, StringStop2
  145 D1:B575 FE 3F -  -  	cp	a, tEnter
  146 D1:B577 28 28 -  -  	jr	z, StringStop2
  147 D1:B579 FE 2A -  -  	cp	a, tString
  148 D1:B57B 28 1E -  -  	jr	z, StringStop
  149 D1:B57D FE 04 -  -  	cp	a, tStore
  150 D1:B57F 28 1A -  -  	jr	z, StringStop
  151 D1:B581 CD AC 04 02 	call	_IsA2ByteTok
  152 D1:B585 20 06 -  -  	jr	nz, +_
  153 D1:B587 23 -  -  -  	inc	hl
  154 D1:B588 22 1A 23 D0 	ld	(curPC), hl
  155 D1:B58C 2B -  -  -  	dec	hl
  156 D1:B58D D5 -  -  -  _:	push	de
  157 D1:B58E CD 70 08 02 		call	_Get_Tok_Strng
  158 D1:B592 D1 -  -  -  	pop	de
  159 D1:B593 21 0E 06 D0 	ld	hl, OP3
  160 D1:B597 ED B0 -  -  	ldir
  161 D1:B599 18 D4 -  -  	jr	StringLoop
  162 D1:B59B -  -  -  -  StringStop:
  163 D1:B59B FE 3F -  -  	cp	a, tEnter
  164 D1:B59D C4 28 10 02 	call	nz, _IncFetch
  165 D1:B5A1 -  -  -  -  StringStop2:
  166 D1:B5A1 EB -  -  -  	ex	de, hl
  167 D1:B5A2 36 00 -  -  	ld	(hl), 0
  168 D1:B5A4 23 -  -  -  	inc	hl
  169 D1:B5A5 22 71 EA D1 	ld	(tempStringsPtr), hl
  170 D1:B5A9 C3 F0 B2 D1 	jp	MainLoop
  171 D1:B5AD -  -  -  -  NotAString:
  172 D1:B5AD FE 3F -  -  	cp	a, tEnter
  173 D1:B5AF CA 83 B6 D1 	jp	z, StopParsing
  174 D1:B5B3 21 0C E9 D1 	ld	hl, FunctionsWithReturnValue
  175 D1:B5B7 01 0A 00 00 	ld	bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValue
  176 D1:B5BB ED B1 -  -  	cpir
  177 D1:B5BD C2 56 AF D1 	jp	nz, InvalidTokenError
  178 D1:B5C1 FE AD -  -  	cp	a, tGetKey
  179 D1:B5C3 28 0A -  -  	jr	z, AddFunctionToOutput
  180 D1:B5C5 FE 0D -  -  	cp	a, tSqr
  181 D1:B5C7 28 06 -  -  	jr	z, AddFunctionToOutput
  182 D1:B5C9 FE AB -  -  	cp	a, trand
  183 D1:B5CB C2 5D B6 D1 	jp	nz, AddFunctionToStack
  184 D1:B5CF -  -  -  -  AddFunctionToOutput:
  185 D1:B5CF 2A 5F EA D1 	ld	hl, (outputPtr)
  186 D1:B5D3 1E 04 -  -  	ld	e, typeReturnValue
  187 D1:B5D5 FE 0D -  -  	cp	a, tSqr
  188 D1:B5D7 20 02 -  -  	jr	nz, +_
  189 D1:B5D9 1E 3F -  -  	ld	e, typeFunction
  190 D1:B5DB 73 -  -  -  _:	ld	(hl), e
  191 D1:B5DC 23 -  -  -  	inc	hl
  192 D1:B5DD 77 -  -  -  	ld	(hl), a
  193 D1:B5DE 23 -  -  -  	inc	hl
  194 D1:B5DF 23 -  -  -  	inc	hl
  195 D1:B5E0 23 -  -  -  	inc	hl
  196 D1:B5E1 22 5F EA D1 	ld	(outputPtr), hl
  197 D1:B5E5 FE AD -  -  	cp	a, tGetKey
  198 D1:B5E7 C2 D1 B3 D1 	jp	nz, ReturnToLoop
  199 D1:B5EB CD 28 10 02 	call	_IncFetch
  200 D1:B5EF DA F0 B2 D1 	jp	c, MainLoop
  201 D1:B5F3 FE 10 -  -  	cp	a, tLParen
  202 D1:B5F5 C2 EF B2 D1 	jp	nz, MainLoopResCarryFlag
  203 D1:B5F9 CD 28 10 02 	call	_IncFetch
  204 D1:B5FD DA 40 AF D1 _:	jp	c, ErrorSyntax
  205 D1:B601 FE 3F -  -  	cp	a, tEnter
  206 D1:B603 CA 40 AF D1 	jp	z, ErrorSyntax
  207 D1:B607 D6 30 -  -  	sub	a, t0
  208 D1:B609 38 F2 -  -  	jr	c, -_
  209 D1:B60B FE 0A -  -  	cp	a, t9-t0+1
  210 D1:B60D D2 40 AF D1 _:	jp	nc, ErrorSyntax
  211 D1:B611 11 00 00 00 	ld	de, 0
  212 D1:B615 5F -  -  -  	ld	e, a
  213 D1:B616 CD 28 10 02 	call	_IncFetch
  214 D1:B61A 38 35 -  -  	jr	c, AddGetKeyDirect
  215 D1:B61C FE 3F -  -  	cp	a, tEnter
  216 D1:B61E 28 31 -  -  	jr	z, AddGetKeyDirect
  217 D1:B620 FE 11 -  -  	cp	a, tRParen
  218 D1:B622 28 29 -  -  	jr	z, +_
  219 D1:B624 FE 04 -  -  	cp	a, tStore
  220 D1:B626 28 29 -  -  	jr	z, AddGetKeyDirect
  221 D1:B628 D6 30 -  -  	sub	a, t0
  222 D1:B62A 38 D1 -  -  	jr	c, --_
  223 D1:B62C FE 0A -  -  	cp	a, t9-t0+1
  224 D1:B62E 30 DD -  -  	jr	nc, -_
  225 D1:B630 D5 -  -  -  	push	de
  226 D1:B631 E1 -  -  -  	pop	hl
  227 D1:B632 29 -  -  -  	add	hl, hl
  228 D1:B633 29 -  -  -  	add	hl, hl
  229 D1:B634 19 -  -  -  	add	hl, de
  230 D1:B635 29 -  -  -  	add	hl, hl
  231 D1:B636 5F -  -  -  	ld	e, a
  232 D1:B637 19 -  -  -  	add	hl, de
  233 D1:B638 EB -  -  -  	ex	de, hl
  234 D1:B639 CD 28 10 02 	call	_IncFetch
  235 D1:B63D 38 12 -  -  	jr	c, AddGetKeyDirect
  236 D1:B63F FE 3F -  -  	cp	a, tEnter
  237 D1:B641 28 0E -  -  	jr	z, AddGetKeyDirect
  238 D1:B643 FE 04 -  -  	cp	a, tStore
  239 D1:B645 28 0A -  -  	jr	z, AddGetKeyDirect
  240 D1:B647 FE 11 -  -  	cp	a, tRParen
  241 D1:B649 C2 40 AF D1 	jp	nz, ErrorSyntax
  242 D1:B64D CD 28 10 02 _:	call	_IncFetch
  243 D1:B651 -  -  -  -  AddGetKeyDirect:
  244 D1:B651 2A 5F EA D1 	ld	hl, (outputPtr)
  245 D1:B655 2B -  -  -  	dec	hl
  246 D1:B656 2B -  -  -  	dec	hl
  247 D1:B657 2B -  -  -  	dec	hl
  248 D1:B658 73 -  -  -  	ld	(hl), e
  249 D1:B659 C3 F0 B2 D1 	jp	MainLoop
  250 D1:B65D -  -  -  -  AddFunctionToStack:
  251 D1:B65D 21 7B EA D1 	ld	hl, openedParensE
  252 D1:B661 34 -  -  -  	inc	(hl)
  253 D1:B662 CD AC 04 02 	call	_IsA2ByteTok
  254 D1:B666 CC 28 10 02 	call	z, _IncFetch
  255 D1:B66A 47 -  -  -  	ld	b, a
  256 D1:B66B 2A 5C EA D1 	ld	hl, (stackPtr)
  257 D1:B66F 3A 1F EA D0 	ld	a, (tempToken)
  258 D1:B673 36 3F -  -  	ld	(hl), typeFunction
  259 D1:B675 23 -  -  -  	inc	hl
  260 D1:B676 77 -  -  -  	ld	(hl), a
  261 D1:B677 23 -  -  -  	inc	hl
  262 D1:B678 70 -  -  -  	ld	(hl), b
  263 D1:B679 23 -  -  -  	inc	hl
  264 D1:B67A 23 -  -  -  	inc	hl
  265 D1:B67B 22 5C EA D1 	ld	(stackPtr), hl
  266 D1:B67F C3 D1 B3 D1 	jp	ReturnToLoop
  267 D1:B683 -  -  -  -  StopParsing:																;	move stack to output
  268 D1:B683 CD 1C B8 D1 	call	MoveStackEntryToOutput
  269 D1:B687 2A 5F EA D1 	ld	hl, (outputPtr)
  270 D1:B68B 11 6B EE D0 	ld	de, output
  271 D1:B68F B7 -  -  -  	or	a, a
  272 D1:B690 ED 52 -  -  	sbc	hl, de
  273 D1:B692 E5 -  -  -  	push	hl
  274 D1:B693 C1 -  -  -  	pop	bc																	;	BC / 4 is amount of elements in the stack
  275 D1:B694 D5 -  -  -  	push	de
  276 D1:B695 E1 -  -  -  	pop	hl
  277 D1:B696 3E 01 -  -  	ld	a, OutputIsInHL
  278 D1:B698 32 83 EA D1 	ld	(ExprOutput), a
  279 D1:B69C 32 84 EA D1 	ld	(ExprOutput2), a
  280 D1:B6A0 78 -  -  -  	ld	a, b
  281 D1:B6A1 B1 -  -  -  	or	a, c
  282 D1:B6A2 FE 04 -  -  	cp	a, 4
  283 D1:B6A4 D8 -  -  -  	ret	c
  284 D1:B6A5 CA B4 B7 D1 	jp	z, ParseSingleArgument
  285 D1:B6A9 -  -  -  -  Loop:
  286 D1:B6A9 AF -  -  -  	xor	a, a
  287 D1:B6AA FD 77 C0 -  	ld	(iy+fExpression1), a
  288 D1:B6AD FD 77 BF -  	ld	(iy+fExpression2), a
  289 D1:B6B0 ED 42 -  -  	sbc	hl, bc
  290 D1:B6B2 11 6B EE D0 	ld	de, output
  291 D1:B6B6 ED 52 -  -  	sbc	hl, de
  292 D1:B6B8 CA 40 AF D1 	jp	z, ErrorSyntax
  293 D1:B6BC 19 -  -  -  	add	hl, de
  294 D1:B6BD 09 -  -  -  	add	hl, bc
  295 D1:B6BE E5 -  -  -  	push	hl
  296 D1:B6BF 21 0C 00 00 		ld	hl, 12
  297 D1:B6C3 B7 -  -  -  		or	a, a
  298 D1:B6C4 ED 42 -  -  		sbc	hl, bc
  299 D1:B6C6 20 04 -  -  		jr	nz, +_
  300 D1:B6C8 FD CB C0 DE 		set	op_is_last_one, (iy+fExpression1)
  301 D1:B6CC E1 -  -  -  _:	pop	hl
  302 D1:B6CD 78 -  -  -  	ld	a, b
  303 D1:B6CE B1 -  -  -  	or	a, c
  304 D1:B6CF FE 04 -  -  	cp	a, 4
  305 D1:B6D1 CA AA B7 D1 	jp	z, StopParseExpression
  306 D1:B6D5 7E -  -  -  	ld	a, (hl)
  307 D1:B6D6 FE 1F -  -  	cp	a, typeOperator
  308 D1:B6D8 28 5B -  -  	jr	z, ExpressOperator
  309 D1:B6DA FE 3F -  -  	cp	a, typeFunction
  310 D1:B6DC 28 06 -  -  	jr	z, ExpressFunction
  311 D1:B6DE 23 -  -  -  	inc	hl
  312 D1:B6DF 23 -  -  -  	inc	hl
  313 D1:B6E0 23 -  -  -  	inc	hl
  314 D1:B6E1 23 -  -  -  	inc	hl
  315 D1:B6E2 18 C5 -  -  	jr	Loop
  316 D1:B6E4 -  -  -  -  ExpressFunction:
  317 D1:B6E4 23 -  -  -  	inc	hl																	;	function = a
  318 D1:B6E5 7E -  -  -  	ld	a, (hl)
  319 D1:B6E6 2B -  -  -  	dec	hl
  320 D1:B6E7 C5 -  -  -  	push	bc
  321 D1:B6E8 E5 -  -  -  		push	hl
  322 D1:B6E9 CD 81 C5 D1 			call	ExecuteFunction
  323 D1:B6ED D1 -  -  -  		pop	de
  324 D1:B6EE D5 -  -  -  		push	de
  325 D1:B6EF E1 -  -  -  		pop	hl
  326 D1:B6F0 23 -  -  -  		inc	hl
  327 D1:B6F1 23 -  -  -  		inc	hl
  328 D1:B6F2 23 -  -  -  		inc	hl
  329 D1:B6F3 23 -  -  -  		inc	hl
  330 D1:B6F4 3A 7D EA D1 		ld	a, (amountOfArguments)
  331 D1:B6F8 3D -  -  -  		dec	a
  332 D1:B6F9 28 07 -  -  		jr	z, ++_
  333 D1:B6FB 47 -  -  -  		ld	b, a
  334 D1:B6FC 1B -  -  -  _:		dec	de
  335 D1:B6FD 1B -  -  -  		dec	de
  336 D1:B6FE 1B -  -  -  		dec	de
  337 D1:B6FF 1B -  -  -  		dec	de
  338 D1:B700 10 FA -  -  		djnz	-_
  339 D1:B702 C1 -  -  -  _:	pop	bc
  340 D1:B703 D5 -  -  -  	push	de
  341 D1:B704 C5 -  -  -  		push	bc
  342 D1:B705 E5 -  -  -  			push	hl
  343 D1:B706 ED B0 -  -  				ldir
  344 D1:B708 E1 -  -  -  			pop	hl
  345 D1:B709 C1 -  -  -  		pop	bc
  346 D1:B70A D1 -  -  -  	pop	de
  347 D1:B70B EB -  -  -  	ex	de, hl
  348 D1:B70C 09 -  -  -  	add	hl, bc
  349 D1:B70D B7 -  -  -  	or	a, a
  350 D1:B70E ED 52 -  -  	sbc	hl, de
  351 D1:B710 E5 -  -  -  	push	hl
  352 D1:B711 C1 -  -  -  	pop	bc																	;	BC = BC+DE-HL
  353 D1:B712 78 -  -  -  	ld	a, b
  354 D1:B713 B1 -  -  -  	or	a, c
  355 D1:B714 FE 04 -  -  	cp	a, 4
  356 D1:B716 20 0F -  -  	jr	nz, +_
  357 D1:B718 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  358 D1:B71C CA AA B7 D1 	jp	z, StopParseExpression
  359 D1:B720 DD 27 FD -  	ld	hl, (ix-3)
  360 D1:B723 C3 BF B7 D1 	jp	ParseSingleArgument2
  361 D1:B727 EB -  -  -  _:	ex	de, hl
  362 D1:B728 3A 7D EA D1 	ld	a, (amountOfArguments)
  363 D1:B72C 47 -  -  -  	ld	b, a
  364 D1:B72D 2B -  -  -  _:	dec	hl
  365 D1:B72E 2B -  -  -  	dec	hl
  366 D1:B72F 2B -  -  -  	dec	hl
  367 D1:B730 2B -  -  -  	dec	hl
  368 D1:B731 10 FA -  -  	djnz	-_
  369 D1:B733 18 4E -  -  	jr	AddChain
  370 D1:B735 -  -  -  -  ExpressOperator:
  371 D1:B735 23 -  -  -  	inc	hl
  372 D1:B736 7E -  -  -  	ld	a, (hl)
  373 D1:B737 2B -  -  -  	dec	hl
  374 D1:B738 C5 -  -  -  	push	bc
  375 D1:B739 E5 -  -  -  		push	hl
  376 D1:B73A DD E1 -  -  		pop	ix
  377 D1:B73C DD 17 FD -  		ld	de, (ix-3)
  378 D1:B73F DD 07 F9 -  		ld	bc, (ix-7)
  379 D1:B742 CD 89 D2 D1 		call	ExecuteOperator
  380 D1:B746 3A 84 EA D1 		ld	a, (ExprOutput2)
  381 D1:B74A 32 83 EA D1 		ld	(ExprOutput), a
  382 D1:B74E ED 12 FC -  		lea	de, ix-4
  383 D1:B751 C1 -  -  -  	pop	bc
  384 D1:B752 21 08 00 00 	ld	hl, 8
  385 D1:B756 19 -  -  -  	add	hl, de
  386 D1:B757 D5 -  -  -  	push	de
  387 D1:B758 C5 -  -  -  		push	bc
  388 D1:B759 ED B0 -  -  			ldir
  389 D1:B75B C1 -  -  -  		pop	bc
  390 D1:B75C 21 F4 FF FF 		ld	hl, -12
  391 D1:B760 09 -  -  -  		add	hl, bc
  392 D1:B761 19 -  -  -  		add	hl, de
  393 D1:B762 B7 -  -  -  		or	a
  394 D1:B763 ED 52 -  -  		sbc	hl, de
  395 D1:B765 E5 -  -  -  		push	hl
  396 D1:B766 C1 -  -  -  		pop	bc
  397 D1:B767 E1 -  -  -  	pop	hl
  398 D1:B768 20 0D -  -  	jr	nz, +_
  399 D1:B76A FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  400 D1:B76E CA AA B7 D1 	jp	z, StopParseExpression
  401 D1:B772 DD 27 F9 -  	ld	hl, (ix-7)
  402 D1:B775 18 48 -  -  	jr	ParseSingleArgument2
  403 D1:B777 03 -  -  -  _:	inc	bc
  404 D1:B778 03 -  -  -  	inc	bc
  405 D1:B779 03 -  -  -  	inc	bc
  406 D1:B77A 03 -  -  -  	inc	bc
  407 D1:B77B FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  408 D1:B77F C2 A9 B6 D1 	jp	nz, Loop
  409 D1:B783 -  -  -  -  AddChain:
  410 D1:B783 1E 03 -  -  	ld	e, typeChainAns
  411 D1:B785 7E -  -  -  	ld	a, (hl)
  412 D1:B786 FE 1F -  -  	cp	a, typeOperator
  413 D1:B788 30 15 -  -  	jr	nc, ChainAns2
  414 D1:B78A 23 -  -  -  	inc	hl
  415 D1:B78B 23 -  -  -  	inc	hl
  416 D1:B78C 23 -  -  -  	inc	hl
  417 D1:B78D 23 -  -  -  	inc	hl
  418 D1:B78E B6 -  -  -  	or	a, (hl)
  419 D1:B78F 2B -  -  -  	dec	hl
  420 D1:B790 2B -  -  -  	dec	hl
  421 D1:B791 2B -  -  -  	dec	hl
  422 D1:B792 2B -  -  -  	dec	hl
  423 D1:B793 FE 1F -  -  	cp	a, typeOperator
  424 D1:B795 28 08 -  -  	jr	z, ChainAns2
  425 D1:B797 -  -  -  -  ChainPush2:
  426 D1:B797 E5 -  -  -  	push	hl
  427 D1:B798 CD 09 AD D1 		call	InsertPushHLDE
  428 D1:B79C E1 -  -  -  	pop	hl
  429 D1:B79D 1E 02 -  -  	ld	e, typeChainPush
  430 D1:B79F -  -  -  -  ChainAns2:
  431 D1:B79F E5 -  -  -  	push	hl
  432 D1:B7A0 2B -  -  -  		dec	hl
  433 D1:B7A1 2B -  -  -  		dec	hl
  434 D1:B7A2 2B -  -  -  		dec	hl
  435 D1:B7A3 2B -  -  -  		dec	hl
  436 D1:B7A4 73 -  -  -  		ld	(hl), e
  437 D1:B7A5 E1 -  -  -  	pop	hl
  438 D1:B7A6 C3 A9 B6 D1 	jp	Loop
  439 D1:B7AA -  -  -  -  	
  440 D1:B7AA -  -  -  -  StopParseExpression:
  441 D1:B7AA 3A 7C EA D1 	ld	a, (openedParensF)
  442 D1:B7AE B7 -  -  -  	or	a, a
  443 D1:B7AF C2 C7 AC D1 	jp	nz, MaybeChangeDEToHL
  444 D1:B7B3 C9 -  -  -  	ret
  445 D1:B7B4 -  -  -  -  	
  446 D1:B7B4 -  -  -  -  ParseSingleArgument:
  447 D1:B7B4 7E -  -  -  	ld	a, (hl)
  448 D1:B7B5 B7 -  -  -  	or	a, a
  449 D1:B7B6 20 0D -  -  	jr	nz, ParseSingleNotNumber
  450 D1:B7B8 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  451 D1:B7BC 23 -  -  -  	inc	hl
  452 D1:B7BD ED 27 -  -  	ld	hl, (hl)
  453 D1:B7BF -  -  -  -  ParseSingleArgument2:
  454 D1:B7BF 3E 21 -  -  	ld	a, 021h
  455 D1:B7C1 C3 4C AC D1 	jp	InsertAHL															;	ld hl, *
  456 D1:B7C5 -  -  -  -  ParseSingleNotNumber:
  457 D1:B7C5 3D -  -  -  	dec	a
  458 D1:B7C6 20 06 -  -  	jr	nz, ParseSingleNotVariable
  459 D1:B7C8 23 -  -  -  	inc	hl
  460 D1:B7C9 4E -  -  -  	ld	c, (hl)
  461 D1:B7CA C3 72 AC D1 	jp	InsertHIXC
  462 D1:B7CE -  -  -  -  ParseSingleNotVariable:
  463 D1:B7CE D6 03 -  -  	sub	a, 3
  464 D1:B7D0 20 0C -  -  	jr	nz, ParseSingleNotFunction
  465 D1:B7D2 23 -  -  -  	inc	hl
  466 D1:B7D3 7E -  -  -  	ld	a, (hl)
  467 D1:B7D4 06 02 -  -  	ld	b, OutputInHL
  468 D1:B7D6 FD CB C0 B6 	res	need_push, (iy+fExpression1)
  469 D1:B7DA C3 47 AD D1 	jp	GetFunction
  470 D1:B7DE -  -  -  -  ParseSingleNotFunction:
  471 D1:B7DE D6 03 -  -  	sub	a, 3
  472 D1:B7E0 C2 40 AF D1 	jp	nz, ErrorSyntax
  473 D1:B7E4 FD CB C0 FE 	set	output_is_string, (iy+fExpression1)
  474 D1:B7E8 E5 -  -  -  	push	hl
  475 D1:B7E9 3E 21 -  -  		ld	a, 021h
  476 D1:B7EB CD 1B AD D1 		call	InsertA														;	ld hl, *
  477 D1:B7EF CD 32 AD D1 		call	InsertProgramPtrToDataOffset
  478 D1:B7F3 2A 77 EA D1 		ld	hl, (programDataDataPtr)
  479 D1:B7F7 CD 50 AC D1 		call	InsertHL														;	ld hl, XXXXXXX
  480 D1:B7FB E1 -  -  -  	pop	hl
  481 D1:B7FC 23 -  -  -  	inc	hl
  482 D1:B7FD ED 17 -  -  	ld	de, (hl)																;	hl points to string in string stack
  483 D1:B7FF ED 27 -  -  	ld	hl, (hl)
  484 D1:B801 01 FF FF FF 	ld	bc, -1
  485 D1:B805 AF -  -  -  	xor	a, a
  486 D1:B806 ED B1 -  -  	cpir
  487 D1:B808 ED 52 -  -  	sbc	hl, de
  488 D1:B80A E5 -  -  -  	push	hl
  489 D1:B80B C1 -  -  -  	pop	bc																	;	bc = length of string
  490 D1:B80C EB -  -  -  	ex	de, hl
  491 D1:B80D ED 5B 77 EA 
              D1 -  -  -  	ld	de, (programDataDataPtr)
  492 D1:B812 D5 -  -  -  	push	de
  493 D1:B813 ED B0 -  -  		ldir
  494 D1:B815 ED 53 77 EA 
              D1 -  -  -  		ld	(programDataDataPtr), de
  495 D1:B81A E1 -  -  -  	pop	hl
  496 D1:B81B C9 -  -  -  	ret
  497 D1:B81C -  -  -  -  	
  498 D1:B81C -  -  -  -  MoveStackEntryToOutput:
  499 D1:B81C 2A 5C EA D1 	ld	hl, (stackPtr)
  500 D1:B820 11 83 EA D0 	ld	de, stack
  501 D1:B824 B7 -  -  -  	or	a, a
  502 D1:B825 ED 52 -  -  	sbc	hl, de
  503 D1:B827 C8 -  -  -  	ret	z
  504 D1:B828 19 -  -  -  	add	hl, de
  505 D1:B829 2B -  -  -  	dec	hl
  506 D1:B82A 2B -  -  -  	dec	hl
  507 D1:B82B 2B -  -  -  	dec	hl
  508 D1:B82C 2B -  -  -  	dec	hl
  509 D1:B82D 22 5C EA D1 	ld	(stackPtr), hl
  510 D1:B831 ED 5B 5F EA 
              D1 -  -  -  	ld	de, (outputPtr)
  511 D1:B836 7E -  -  -  	ld	a, (hl)
  512 D1:B837 FE 3F -  -  	cp	a, typeFunction
  513 D1:B839 20 07 -  -  	jr	nz, +_
  514 D1:B83B 23 -  -  -  	inc	hl
  515 D1:B83C 7E -  -  -  	ld	a, (hl)
  516 D1:B83D 2B -  -  -  	dec	hl
  517 D1:B83E FE 10 -  -  	cp	a, tLParen
  518 D1:B840 28 DA -  -  	jr	z, MoveStackEntryToOutput
  519 D1:B842 ED A0 -  -  _:	ldi
  520 D1:B844 ED A0 -  -  	ldi
  521 D1:B846 ED A0 -  -  	ldi
  522 D1:B848 ED A0 -  -  	ldi
  523 D1:B84A ED 53 5F EA 
              D1 -  -  -  	ld	(outputPtr), de
  524 D1:B84F 18 CB -  -  	jr	MoveStackEntryToOutput
Listing for file "ice.asm"
  443 D1:B851 -  -  -  -  #include "putchar.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\putchar.asm"
    1 D1:B851 -  -  -  -  _PrintChar_ASM:
    2 D1:B851 E5 -  -  -  	push	hl
    3 D1:B852 -  -  -  -  TextXPos_ASM = $+1
    4 D1:B852 01 00 00 00 		ld	bc,	0
    5 D1:B856 F5 -  -  -  		push	af
    6 D1:B857 F5 -  -  -  			push	af
    7 D1:B858 C5 -  -  -  				push	bc
    8 D1:B859 B7 -  -  -  					or	a,a
    9 D1:B85A ED 62 -  -  					sbc	hl,hl
   10 D1:B85C 6F -  -  -  					ld	l,a
   11 D1:B85D 11 BF B8 D1 					ld	de,	DefaultCharSpacing_ASM
   12 D1:B861 19 -  -  -  					add	hl,de
   13 D1:B862 7E -  -  -  					ld	a,(hl)
   14 D1:B863 32 A6 B8 D1 					ld	(charwidth),a
   15 D1:B867 B7 -  -  -  					or	a,a
   16 D1:B868 ED 62 -  -  					sbc	hl,hl
   17 D1:B86A 6F -  -  -  					ld	l,a
   18 D1:B86B ED 44 -  -  					neg
   19 D1:B86D 32 77 B8 D1 					ld	(CharWidthDelta_ASM),a
   20 D1:B871 09 -  -  -  					add	hl,bc
   21 D1:B872 22 53 B8 D1 					ld	(TextXPos_ASM),hl
   22 D1:B876 -  -  -  -  CharWidthDelta_ASM	=$+1
   23 D1:B876 11 FF FF FF 					ld	de,$FFFFFF
   24 D1:B87A 21 40 01 00 					ld	hl,lcdWidth
   25 D1:B87E 19 -  -  -  					add	hl,de
   26 D1:B87F 22 B3 B8 D1 					ld	(line_change),hl
   27 D1:B883 -  -  -  -  TextYPos_ASM	= $+1
   28 D1:B883 2E 00 -  -  					ld	l,0
   29 D1:B885 26 A0 -  -  					ld	h,160
   30 D1:B887 ED 6C -  -  					mlt	hl
   31 D1:B889 29 -  -  -  					add	hl,hl
   32 D1:B88A 11 00 00 D4 					ld	de,vRAM
   33 D1:B88E 19 -  -  -  					add	hl,de
   34 D1:B88F D1 -  -  -  				pop	de
   35 D1:B890 19 -  -  -  				add	hl,de
   36 D1:B891 F1 -  -  -  			pop	af
   37 D1:B892 EB -  -  -  			ex	de,hl
   38 D1:B893 B7 -  -  -  			or	a,a
   39 D1:B894 ED 62 -  -  			sbc	hl,hl
   40 D1:B896 D6 17 -  -  			sub	a, 23
   41 D1:B898 6F -  -  -  			ld	l,a
   42 D1:B899 29 -  -  -  			add	hl,hl
   43 D1:B89A 29 -  -  -  			add	hl,hl
   44 D1:B89B 29 -  -  -  			add	hl,hl
   45 D1:B89C 01 3A B9 D1 			ld	bc,	DefaultTextData_ASM
   46 D1:B8A0 09 -  -  -  			add	hl,bc
   47 D1:B8A1 06 08 -  -  			ld	b,8
   48 D1:B8A3 C5 -  -  -  iloop:		push	bc
   49 D1:B8A4 4E -  -  -  				ld	c,(hl)
   50 D1:B8A5 -  -  -  -  charwidth =$+1
   51 D1:B8A5 06 00 -  -  				ld	b,0
   52 D1:B8A7 EB -  -  -  				ex	de,hl
   53 D1:B8A8 -  -  -  -  color = $+1
   54 D1:B8A8 3E 00 -  -  				ld	a, 0
   55 D1:B8AA CB 21 -  -  cloop:			sla	c
   56 D1:B8AC 30 01 -  -  				jr	nc,+_
   57 D1:B8AE 77 -  -  -  				ld	(hl), a
   58 D1:B8AF 23 -  -  -  _:				inc	hl
   59 D1:B8B0 10 F8 -  -  				djnz	cloop
   60 D1:B8B2 -  -  -  -  line_change =$+1
   61 D1:B8B2 01 00 00 00 				ld	bc,0
   62 D1:B8B6 09 -  -  -  				add	hl,bc
   63 D1:B8B7 EB -  -  -  				ex	de,hl
   64 D1:B8B8 23 -  -  -  				inc	hl
   65 D1:B8B9 C1 -  -  -  			pop	bc
   66 D1:B8BA 10 E7 -  -  			djnz	iloop
   67 D1:B8BC F1 -  -  -  		pop	af
   68 D1:B8BD E1 -  -  -  	pop	hl
   69 D1:B8BE C9 -  -  -  	ret
   70 D1:B8BF -  -  -  -  
   71 D1:B8BF -  -  -  -  DefaultCharSpacing_ASM:
   72 D1:B8BF -  -  -  -  	;	  0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
   73 D1:B8BF 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 02 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8	;	0
   74 D1:B8CF 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	;	1
   75 D1:B8DF 03 04 06 08 
              08 08 08 05 
              05 05 08 07 
              04 07 03 08 	.db	3,4,6,8,8,8,8,5,5,5,8,7,4,7,3,8	;	2
   76 D1:B8EF 08 07 08 08 
              08 08 08 08 
              08 08 03 04 
              06 07 06 07 	.db	8,7,8,8,8,8,8,8,8,8,3,4,6,7,6,7	;	3
   77 D1:B8FF 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	;	4
   78 D1:B90F 08 08 08 08 
              08 08 08 08 
              08 08 08 05 
              08 05 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,5,8,5,8,8	;	5
   79 D1:B91F 04 08 08 08 
              08 08 08 08 
              08 05 08 08 
              05 08 08 08 	.db	4,8,8,8,8,8,8,8,8,5,8,8,5,8,8,8	;	6
   80 D1:B92F 08 08 08 08 
              07 08 08 08 
              08 08 08 -  	.db	8,8,8,8,7,8,8,8,8,8,8			;	7
   81 D1:B93A -  -  -  -   
   82 D1:B93A -  -  -  -  ;-------------------------------------------------------------------------------
   83 D1:B93A -  -  -  -  DefaultTextData_ASM:
   84 D1:B93A FF FF FF FF 
              FF FF FF FF Char000: .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF	;	_
   85 D1:B942 18 3C 7E 18 
              18 18 18 00 Char024: .db $18,$3C,$7E,$18,$18,$18,$18,$00	;	.
   86 D1:B94A 18 18 18 18 
              7E 3C 18 00 Char025: .db $18,$18,$18,$18,$7E,$3C,$18,$00	;	.
   87 D1:B952 00 18 0C FE 
              0C 18 00 00 Char026: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	;	.
   88 D1:B95A 00 30 60 FE 
              60 30 00 00 Char027: .db $00,$30,$60,$FE,$60,$30,$00,$00	;	.
   89 D1:B962 00 18 0C FE 
              0C 18 00 00 Char028: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	;	->
   90 D1:B96A 00 24 66 FF 
              66 24 00 00 Char029: .db $00,$24,$66,$FF,$66,$24,$00,$00	;	.
   91 D1:B972 00 18 3C 7E 
              FF FF 00 00 Char030: .db $00,$18,$3C,$7E,$FF,$FF,$00,$00	;	.
   92 D1:B97A 00 FF FF 7E 
              3C 18 00 00 Char031: .db $00,$FF,$FF,$7E,$3C,$18,$00,$00	;	.
   93 D1:B982 00 00 00 00 
              00 00 00 00 Char032: .db $00,$00,$00,$00,$00,$00,$00,$00	;	 
   94 D1:B98A C0 C0 C0 C0 
              C0 00 C0 00 Char033: .db $C0,$C0,$C0,$C0,$C0,$00,$C0,$00	;	!
   95 D1:B992 D8 D8 D8 00 
              00 00 00 00 Char034: .db $D8,$D8,$D8,$00,$00,$00,$00,$00	;	"
   96 D1:B99A 6C 6C FE 6C 
              FE 6C 6C 00 Char035: .db $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	;	#
   97 D1:B9A2 18 7E C0 7C 
              06 FC 18 00 Char036: .db $18,$7E,$C0,$7C,$06,$FC,$18,$00	;	$
   98 D1:B9AA 00 C6 CC 18 
              30 66 C6 00 Char037: .db $00,$C6,$CC,$18,$30,$66,$C6,$00	;	%
   99 D1:B9B2 38 6C 38 76 
              DC CC 76 00 Char038: .db $38,$6C,$38,$76,$DC,$CC,$76,$00	;	&
  100 D1:B9BA 30 30 60 00 
              00 00 00 00 Char039: .db $30,$30,$60,$00,$00,$00,$00,$00	;	'
  101 D1:B9C2 30 60 C0 C0 
              C0 60 30 00 Char040: .db $30,$60,$C0,$C0,$C0,$60,$30,$00	;	(
  102 D1:B9CA C0 60 30 30 
              30 60 C0 00 Char041: .db $C0,$60,$30,$30,$30,$60,$C0,$00	;	)
  103 D1:B9D2 00 66 3C FF 
              3C 66 00 00 Char042: .db $00,$66,$3C,$FF,$3C,$66,$00,$00	;	*
  104 D1:B9DA 00 30 30 FC 
              FC 30 30 00 Char043: .db $00,$30,$30,$FC,$FC,$30,$30,$00	;	+
  105 D1:B9E2 00 00 00 00 
              00 60 60 C0 Char044: .db $00,$00,$00,$00,$00,$60,$60,$C0	;	,
  106 D1:B9EA 00 00 00 FC 
              00 00 00 00 Char045: .db $00,$00,$00,$FC,$00,$00,$00,$00	;	-
  107 D1:B9F2 00 00 00 00 
              00 C0 C0 00 Char046: .db $00,$00,$00,$00,$00,$C0,$C0,$00	;	.
  108 D1:B9FA 06 0C 18 30 
              60 C0 80 00 Char047: .db $06,$0C,$18,$30,$60,$C0,$80,$00	;	/
  109 D1:BA02 7C CE DE F6 
              E6 C6 7C 00 Char048: .db $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00	;	0
  110 D1:BA0A 30 70 30 30 
              30 30 FC 00 Char049: .db $30,$70,$30,$30,$30,$30,$FC,$00	;	1
  111 D1:BA12 7C C6 06 7C 
              C0 C0 FE 00 Char050: .db $7C,$C6,$06,$7C,$C0,$C0,$FE,$00	;	2
  112 D1:BA1A FC 06 06 3C 
              06 06 FC 00 Char051: .db $FC,$06,$06,$3C,$06,$06,$FC,$00	;	3
  113 D1:BA22 0C CC CC CC 
              FE 0C 0C 00 Char052: .db $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00	;	4
  114 D1:BA2A FE C0 FC 06 
              06 C6 7C 00 Char053: .db $FE,$C0,$FC,$06,$06,$C6,$7C,$00	;	5
  115 D1:BA32 7C C0 C0 FC 
              C6 C6 7C 00 Char054: .db $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00	;	6
  116 D1:BA3A FE 06 06 0C 
              18 30 30 00 Char055: .db $FE,$06,$06,$0C,$18,$30,$30,$00	;	7
  117 D1:BA42 7C C6 C6 7C 
              C6 C6 7C 00 Char056: .db $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00	;	8
  118 D1:BA4A 7C C6 C6 7E 
              06 06 7C 00 Char057: .db $7C,$C6,$C6,$7E,$06,$06,$7C,$00	;	9
  119 D1:BA52 00 C0 C0 00 
              00 C0 C0 00 Char058: .db $00,$C0,$C0,$00,$00,$C0,$C0,$00	;	:
  120 D1:BA5A 00 60 60 00 
              00 60 60 C0 Char059: .db $00,$60,$60,$00,$00,$60,$60,$C0	;	;
  121 D1:BA62 18 30 60 C0 
              60 30 18 00 Char060: .db $18,$30,$60,$C0,$60,$30,$18,$00	;	<
  122 D1:BA6A 00 00 FC 00 
              FC 00 00 00 Char061: .db $00,$00,$FC,$00,$FC,$00,$00,$00	;	=
  123 D1:BA72 C0 60 30 18 
              30 60 C0 00 Char062: .db $C0,$60,$30,$18,$30,$60,$C0,$00	;	>
  124 D1:BA7A 78 CC 18 30 
              30 00 30 00 Char063: .db $78,$CC,$18,$30,$30,$00,$30,$00	;	?
  125 D1:BA82 7C C6 DE DE 
              DE C0 7E 00 Char064: .db $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00	;	@
  126 D1:BA8A 38 6C C6 C6 
              FE C6 C6 00 Char065: .db $38,$6C,$C6,$C6,$FE,$C6,$C6,$00	;	A
  127 D1:BA92 FC C6 C6 FC 
              C6 C6 FC 00 Char066: .db $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00	;	B
  128 D1:BA9A 7C C6 C0 C0 
              C0 C6 7C 00 Char067: .db $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00	;	C
  129 D1:BAA2 F8 CC C6 C6 
              C6 CC F8 00 Char068: .db $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00	;	D
  130 D1:BAAA FE C0 C0 F8 
              C0 C0 FE 00 Char069: .db $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00	;	E
  131 D1:BAB2 FE C0 C0 F8 
              C0 C0 C0 00 Char070: .db $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00	;	F
  132 D1:BABA 7C C6 C0 C0 
              CE C6 7C 00 Char071: .db $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00	;	G
  133 D1:BAC2 C6 C6 C6 FE 
              C6 C6 C6 00 Char072: .db $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00	;	H
  134 D1:BACA 7E 18 18 18 
              18 18 7E 00 Char073: .db $7E,$18,$18,$18,$18,$18,$7E,$00	;	I
  135 D1:BAD2 06 06 06 06 
              06 C6 7C 00 Char074: .db $06,$06,$06,$06,$06,$C6,$7C,$00	;	J
  136 D1:BADA C6 CC D8 F0 
              D8 CC C6 00 Char075: .db $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	;	K
  137 D1:BAE2 C0 C0 C0 C0 
              C0 C0 FE 00 Char076: .db $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00	;	L
  138 D1:BAEA C6 EE FE FE 
              D6 C6 C6 00 Char077: .db $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00	;	M
  139 D1:BAF2 C6 E6 F6 DE 
              CE C6 C6 00 Char078: .db $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	;	N
  140 D1:BAFA 7C C6 C6 C6 
              C6 C6 7C 00 Char079: .db $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00	;	O
  141 D1:BB02 FC C6 C6 FC 
              C0 C0 C0 00 Char080: .db $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00	;	P
  142 D1:BB0A 7C C6 C6 C6 
              D6 DE 7C 06 Char081: .db $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06	;	Q
  143 D1:BB12 FC C6 C6 FC 
              D8 CC C6 00 Char082: .db $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00	;	R
  144 D1:BB1A 7C C6 C0 7C 
              06 C6 7C 00 Char083: .db $7C,$C6,$C0,$7C,$06,$C6,$7C,$00	;	S
  145 D1:BB22 FF 18 18 18 
              18 18 18 00 Char084: .db $FF,$18,$18,$18,$18,$18,$18,$00	;	T
  146 D1:BB2A C6 C6 C6 C6 
              C6 C6 FE 00 Char085: .db $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00	;	U
  147 D1:BB32 C6 C6 C6 C6 
              C6 7C 38 00 Char086: .db $C6,$C6,$C6,$C6,$C6,$7C,$38,$00	;	V
  148 D1:BB3A C6 C6 C6 C6 
              D6 FE 6C 00 Char087: .db $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00	;	W
  149 D1:BB42 C6 C6 6C 38 
              6C C6 C6 00 Char088: .db $C6,$C6,$6C,$38,$6C,$C6,$C6,$00	;	X
  150 D1:BB4A C6 C6 C6 7C 
              18 30 E0 00 Char089: .db $C6,$C6,$C6,$7C,$18,$30,$E0,$00	;	Y
  151 D1:BB52 FE 06 0C 18 
              30 60 FE 00 Char090: .db $FE,$06,$0C,$18,$30,$60,$FE,$00	;	Z
  152 D1:BB5A F0 C0 C0 C0 
              C0 C0 F0 00 Char091: .db $F0,$C0,$C0,$C0,$C0,$C0,$F0,$00	;	[
  153 D1:BB62 C0 60 30 18 
              0C 06 02 00 Char092: .db $C0,$60,$30,$18,$0C,$06,$02,$00	;	\
  154 D1:BB6A F0 30 30 30 
              30 30 F0 00 Char093: .db $F0,$30,$30,$30,$30,$30,$F0,$00	;	]
  155 D1:BB72 10 38 6C C6 
              00 00 00 00 Char094: .db $10,$38,$6C,$C6,$00,$00,$00,$00	;	^
  156 D1:BB7A 00 00 00 00 
              00 00 00 FF Char095: .db $00,$00,$00,$00,$00,$00,$00,$FF	;	_
  157 D1:BB82 C0 C0 60 00 
              00 00 00 00 Char096: .db $C0,$C0,$60,$00,$00,$00,$00,$00	;	`
  158 D1:BB8A 00 00 7C 06 
              7E C6 7E 00 Char097: .db $00,$00,$7C,$06,$7E,$C6,$7E,$00	;	a
  159 D1:BB92 C0 C0 C0 FC 
              C6 C6 FC 00 Char098: .db $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00	;	b
  160 D1:BB9A 00 00 7C C6 
              C0 C6 7C 00 Char099: .db $00,$00,$7C,$C6,$C0,$C6,$7C,$00	;	c
  161 D1:BBA2 06 06 06 7E 
              C6 C6 7E 00 Char100: .db $06,$06,$06,$7E,$C6,$C6,$7E,$00	;	d
  162 D1:BBAA 00 00 7C C6 
              FE C0 7C 00 Char101: .db $00,$00,$7C,$C6,$FE,$C0,$7C,$00	;	e
  163 D1:BBB2 1C 36 30 78 
              30 30 78 00 Char102: .db $1C,$36,$30,$78,$30,$30,$78,$00	;	f
  164 D1:BBBA 00 00 7E C6 
              C6 7E 06 FC Char103: .db $00,$00,$7E,$C6,$C6,$7E,$06,$FC	;	g
  165 D1:BBC2 C0 C0 FC C6 
              C6 C6 C6 00 Char104: .db $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00	;	h
  166 D1:BBCA 60 00 E0 60 
              60 60 F0 00 Char105: .db $60,$00,$E0,$60,$60,$60,$F0,$00	;	i
  167 D1:BBD2 06 00 06 06 
              06 06 C6 7C Char106: .db $06,$00,$06,$06,$06,$06,$C6,$7C	;	j
  168 D1:BBDA C0 C0 CC D8 
              F8 CC C6 00 Char107: .db $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00	;	k
  169 D1:BBE2 E0 60 60 60 
              60 60 F0 00 Char108: .db $E0,$60,$60,$60,$60,$60,$F0,$00	;	l
  170 D1:BBEA 00 00 CC FE 
              FE D6 D6 00 Char109: .db $00,$00,$CC,$FE,$FE,$D6,$D6,$00	;	m
  171 D1:BBF2 00 00 FC C6 
              C6 C6 C6 00 Char110: .db $00,$00,$FC,$C6,$C6,$C6,$C6,$00	;	n
  172 D1:BBFA 00 00 7C C6 
              C6 C6 7C 00 Char111: .db $00,$00,$7C,$C6,$C6,$C6,$7C,$00	;	o
  173 D1:BC02 00 00 FC C6 
              C6 FC C0 C0 Char112: .db $00,$00,$FC,$C6,$C6,$FC,$C0,$C0	;	p
  174 D1:BC0A 00 00 7E C6 
              C6 7E 06 06 Char113: .db $00,$00,$7E,$C6,$C6,$7E,$06,$06	;	q
  175 D1:BC12 00 00 FC C6 
              C0 C0 C0 00 Char114: .db $00,$00,$FC,$C6,$C0,$C0,$C0,$00	;	r
  176 D1:BC1A 00 00 7E C0 
              7C 06 FC 00 Char115: .db $00,$00,$7E,$C0,$7C,$06,$FC,$00	;	s
  177 D1:BC22 30 30 FC 30 
              30 30 1C 00 Char116: .db $30,$30,$FC,$30,$30,$30,$1C,$00	;	t
  178 D1:BC2A 00 00 C6 C6 
              C6 C6 7E 00 Char117: .db $00,$00,$C6,$C6,$C6,$C6,$7E,$00	;	u
  179 D1:BC32 00 00 C6 C6 
              C6 7C 38 00 Char118: .db $00,$00,$C6,$C6,$C6,$7C,$38,$00	;	v
  180 D1:BC3A 00 00 C6 C6 
              D6 FE 6C 00 Char119: .db $00,$00,$C6,$C6,$D6,$FE,$6C,$00	;	w
  181 D1:BC42 00 00 C6 6C 
              38 6C C6 00 Char120: .db $00,$00,$C6,$6C,$38,$6C,$C6,$00	;	x
  182 D1:BC4A 00 00 C6 C6 
              C6 7E 06 FC Char121: .db $00,$00,$C6,$C6,$C6,$7E,$06,$FC	;	y
  183 D1:BC52 00 00 FE 0C 
              38 60 FE 00 Char122: .db $00,$00,$FE,$0C,$38,$60,$FE,$00	;	z
  184 D1:BC5A 1C 30 30 E0 
              30 30 1C 00 Char123: .db $1C,$30,$30,$E0,$30,$30,$1C,$00	;	{
  185 D1:BC62 C0 C0 C0 00 
              C0 C0 C0 00 Char124: .db $C0,$C0,$C0,$00,$C0,$C0,$C0,$00	;	|
  186 D1:BC6A E0 30 30 1C 
              30 30 E0 00 Char125: .db $E0,$30,$30,$1C,$30,$30,$E0,$00	;	}
  187 D1:BC72 76 DC 00 00 
              00 00 00 00 Char126: .db $76,$DC,$00,$00,$00,$00,$00,$00	;	~
  188 D1:BC7A 00 10 38 6C 
              C6 C6 FE 00 Char127: .db $00,$10,$38,$6C,$C6,$C6,$FE,$00	;	.
Listing for file "ice.asm"
  444 D1:BC82 -  -  -  -  #include "programs.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\programs.asm"
    1 D1:BC82 -  -  -  -  FindNextGoodVar:
    2 D1:BC82 ED 5B 9A 25 
              D0 -  -  -  	ld	de, (pTemp)
    3 D1:BC87 CD 3C 01 02 	call	_CpHLDE
    4 D1:BC8B 20 02 -  -  	jr	nz, FindContinue
    5 D1:BC8D 3C -  -  -  	inc	a									;	return nz
    6 D1:BC8E C9 -  -  -  	ret
    7 D1:BC8F -  -  -  -  FindContinue:
    8 D1:BC8F 7E -  -  -  	ld	a, (hl)
    9 D1:BC90 2B -  -  -  	dec	hl
   10 D1:BC91 2B -  -  -  	dec	hl
   11 D1:BC92 2B -  -  -  	dec	hl
   12 D1:BC93 FE 05 -  -  	cp	a, ProgObj
   13 D1:BC95 28 04 -  -  	jr	z, FindGoodProgram
   14 D1:BC97 FE 06 -  -  	cp	a, ProtProgObj
   15 D1:BC99 20 43 -  -  	jr	nz, FindWrongProgram
   16 D1:BC9B -  -  -  -  FindGoodProgram:
   17 D1:BC9B 5E -  -  -  	ld	e, (hl)
   18 D1:BC9C 2B -  -  -  	dec	hl
   19 D1:BC9D 56 -  -  -  	ld	d, (hl)
   20 D1:BC9E 2B -  -  -  	dec	hl
   21 D1:BC9F 7E -  -  -  	ld	a, (hl)
   22 D1:BCA0 CD 68 1D 02 	call	_SetDEUToA
   23 D1:BCA4 FE D0 -  -  	cp	a, 0D0h
   24 D1:BCA6 30 0C -  -  	jr	nc, +_
   25 D1:BCA8 E5 -  -  -  	push	hl
   26 D1:BCA9 EB -  -  -  		ex	de, hl
   27 D1:BCAA 11 09 00 00 		ld	de, 9
   28 D1:BCAE 19 -  -  -  		add	hl, de
   29 D1:BCAF 5E -  -  -  		ld	e, (hl)
   30 D1:BCB0 1C -  -  -  		inc	e
   31 D1:BCB1 19 -  -  -  		add	hl, de
   32 D1:BCB2 EB -  -  -  		ex	de, hl
   33 D1:BCB3 E1 -  -  -  	pop	hl
   34 D1:BCB4 13 -  -  -  _:	inc	de
   35 D1:BCB5 13 -  -  -  	inc	de
   36 D1:BCB6 1A -  -  -  	ld	a, (de)
   37 D1:BCB7 FE 2C -  -  	cp	a, tii
   38 D1:BCB9 20 25 -  -  	jr	nz, FindWrongProgram2
   39 D1:BCBB 2B -  -  -  	dec	hl
   40 D1:BCBC D5 -  -  -  	push	de
   41 D1:BCBD E5 -  -  -  		push	hl
   42 D1:BCBE 2A 65 EA D1 			ld	hl, (ProgramNamesPtr)
   43 D1:BCC2 11 08 00 00 			ld	de, 8
   44 D1:BCC6 19 -  -  -  			add	hl, de
   45 D1:BCC7 22 65 EA D1 			ld	(ProgramNamesPtr), hl
   46 D1:BCCB B7 -  -  -  			or	a, a
   47 D1:BCCC ED 52 -  -  			sbc	hl, de
   48 D1:BCCE EB -  -  -  			ex	de, hl
   49 D1:BCCF E1 -  -  -  		pop	hl
   50 D1:BCD0 46 -  -  -  		ld	b, (hl)
   51 D1:BCD1 48 -  -  -  		ld	c, b
   52 D1:BCD2 2B -  -  -  		dec	hl
   53 D1:BCD3 -  -  -  -  FindCopyProgName:
   54 D1:BCD3 7E -  -  -  		ld	a, (hl)
   55 D1:BCD4 12 -  -  -  		ld	(de), a
   56 D1:BCD5 2B -  -  -  		dec	hl
   57 D1:BCD6 13 -  -  -  		inc	de
   58 D1:BCD7 10 FA -  -  		djnz	FindCopyProgName
   59 D1:BCD9 AF -  -  -  		xor	a, a
   60 D1:BCDA 12 -  -  -  		ld	(de), a
   61 D1:BCDB D1 -  -  -  	pop	de
   62 D1:BCDC BF -  -  -  	cp	a, a
   63 D1:BCDD C9 -  -  -  	ret
   64 D1:BCDE -  -  -  -  FindWrongProgram:
   65 D1:BCDE 2B -  -  -  	dec	hl
   66 D1:BCDF 2B -  -  -  	dec	hl
   67 D1:BCE0 -  -  -  -  FindWrongProgram2:
   68 D1:BCE0 2B -  -  -  	dec	hl
   69 D1:BCE1 46 -  -  -  	ld	b, (hl)
   70 D1:BCE2 2B -  -  -  	dec	hl
   71 D1:BCE3 -  -  -  -  FindSkipProgramName:
   72 D1:BCE3 2B -  -  -  	dec	hl
   73 D1:BCE4 10 FD -  -  	djnz	FindSkipProgramName
   74 D1:BCE6 18 9A -  -  	jr	FindNextGoodVar
Listing for file "ice.asm"
  445 D1:BCE8 -  -  -  -  #include "hooks.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\hooks.asm"
    1 D1:BCE8 -  -  -  -  InstallHooks:
    2 D1:BCE8 21 E1 EA D1 	ld	hl, ICEAppvar
    3 D1:BCEC CD 20 03 02 	call	_Mov9ToOP1
    4 D1:BCF0 CD 0C 05 02 	call	_ChkFindSym
    5 D1:BCF4 38 13 -  -  	jr	c, ++_
    6 D1:BCF6 CD 98 1F 02 	call	_ChkInRAM
    7 D1:BCFA 30 09 -  -  	jr	nc, +_
    8 D1:BCFC CD 48 14 02 	call	_Arc_Unarc
    9 D1:BD00 01 05 00 00 	ld	bc, 5
   10 D1:BD04 09 -  -  -  	add	hl, bc
   11 D1:BD05 CD 88 05 02 _:	call	_DelVar
   12 D1:BD09 21 3D 08 00 _:	ld	hl, Hooks_end - KeyHook_start
   13 D1:BD0D CD 30 13 02 	call	_CreateAppVar
   14 D1:BD11 13 -  -  -  	inc	de
   15 D1:BD12 13 -  -  -  	inc	de
   16 D1:BD13 21 44 BD D1 	ld	hl, KeyHook_start
   17 D1:BD17 01 3D 08 00 	ld	bc, Hooks_end - KeyHook_start
   18 D1:BD1B ED B0 -  -  	ldir
   19 D1:BD1D CD C8 02 02 	call	_OP4ToOP1
   20 D1:BD21 CD 48 14 02 	call	_Arc_Unarc
   21 D1:BD25 CD 0C 05 02 	call	_ChkFindSym
   22 D1:BD29 21 13 00 00 	ld	hl, 19														;	archived program header+VAT entry
   23 D1:BD2D 19 -  -  -  	add	hl, de
   24 D1:BD2E CD CC 13 02 	call	_SetGetKeyHook
   25 D1:BD32 -  -  -  -  	
   26 D1:BD32 11 64 07 00 	ld	de, KeyHook_end - KeyHook_start
   27 D1:BD36 19 -  -  -  	add	hl, de
   28 D1:BD37 CD F8 13 02 	call	_SetTokenHook
   29 D1:BD3B -  -  -  -  	
   30 D1:BD3B 11 2B 00 00 	ld	de, TokenHook_end - TokenHook_start
   31 D1:BD3F 19 -  -  -  	add	hl, de
   32 D1:BD40 C3 C4 13 02 	jp	_SetCursorhook
   33 D1:BD44 -  -  -  -  	
   34 D1:BD44 -  -  -  -  KeyHook_start:
   35 D1:BD44 83 -  -  -  	.db	83h
   36 D1:BD45 B7 -  -  -  	or	a, a
   37 D1:BD46 C8 -  -  -  	ret	z
   38 D1:BD47 47 -  -  -  	ld	b, a
   39 D1:BD48 3A E0 07 D0 	ld	a, (cxCurApp)
   40 D1:BD4C FE 46 -  -  	cp	a, cxPrgmEdit
   41 D1:BD4E 78 -  -  -  	ld	a, b
   42 D1:BD4F C0 -  -  -  	ret	nz
   43 D1:BD50 F5 -  -  -  	push	af
   44 D1:BD51 CD A0 20 02 		call	_os_ClearStatusBarLow
   45 D1:BD55 FD CB B0 86 		res	displayed_det, (iy+fAlways1)
   46 D1:BD59 F1 -  -  -  	pop	af
   47 D1:BD5A FE 5A -  -  	cp	a, kTrace
   48 D1:BD5C C0 -  -  -  	ret	nz
   49 D1:BD5D -  -  -  -  DisplayCustomTokensAndCFunctions:
   50 D1:BD5D CD A8 08 02 	call	_CursorOff
   51 D1:BD61 16 00 -  -  	ld	d, 0
   52 D1:BD63 -  -  -  -  DisplayTabWithTokens:
   53 D1:BD63 D5 -  -  -  	push	de
   54 D1:BD64 CD 08 08 02 		call	_ClrLCDFull
   55 D1:BD68 D1 -  -  -  	pop	de
   56 D1:BD69 21 1E 00 00 	ld	hl, 30
   57 D1:BD6D 22 D5 08 D0 	ld	(penRow), hl
   58 D1:BD71 21 0C 00 00 	ld	hl, 12
   59 D1:BD75 22 D2 08 D0 	ld	(penCol), hl
   60 D1:BD79 06 00 -  -  	ld	b, 0
   61 D1:BD7B 7A -  -  -  	ld	a, d
   62 D1:BD7C 1E 03 -  -  	ld	e, 3
   63 D1:BD7E ED 5C -  -  	mlt	de
   64 D1:BD80 21 28 06 00 	ld	hl, TabData - KeyHook_start
   65 D1:BD84 19 -  -  -  	add	hl, de
   66 D1:BD85 ED 5B DB 25 
              D0 -  -  -  	ld	de, (rawKeyHookPtr)
   67 D1:BD8A 19 -  -  -  	add	hl, de
   68 D1:BD8B ED 27 -  -  	ld	hl, (hl)
   69 D1:BD8D 19 -  -  -  	add	hl, de
   70 D1:BD8E 57 -  -  -  	ld	d, a
   71 D1:BD8F 1E 00 -  -  	ld	e, 0
   72 D1:BD91 18 0F -  -  	jr	DisplayTokensLoop
   73 D1:BD93 -  -  -  -  KeyIsLeft:
   74 D1:BD93 7A -  -  -  	ld	a, d
   75 D1:BD94 B7 -  -  -  	or	a, a
   76 D1:BD95 28 61 -  -  	jr	z, KeyLoop
   77 D1:BD97 15 -  -  -  	dec	d
   78 D1:BD98 18 C9 -  -  	jr	DisplayTabWithTokens
   79 D1:BD9A -  -  -  -  KeyIsRight:
   80 D1:BD9A 7A -  -  -  	ld	a, d
   81 D1:BD9B FE 05 -  -  	cp	a, 5
   82 D1:BD9D 28 59 -  -  	jr	z, KeyLoop
   83 D1:BD9F 14 -  -  -  	inc	d
   84 D1:BDA0 18 C1 -  -  	jr	DisplayTabWithTokens
   85 D1:BDA2 -  -  -  -  DisplayTokensLoop:
   86 D1:BDA2 78 -  -  -  	ld	a, b
   87 D1:BDA3 FE 10 -  -  	cp	a, 16
   88 D1:BDA5 28 22 -  -  	jr	z, StopDisplayingTokens
   89 D1:BDA7 04 -  -  -  	inc	b
   90 D1:BDA8 CD 34 08 02 	call	_VPutS
   91 D1:BDAC E5 -  -  -  	push	hl
   92 D1:BDAD D5 -  -  -  		push	de
   93 D1:BDAE 2A D5 08 D0 			ld	hl, (penRow)
   94 D1:BDB2 11 0D 00 00 			ld	de, 13
   95 D1:BDB6 19 -  -  -  			add	hl, de
   96 D1:BDB7 22 D5 08 D0 			ld	(penRow), hl
   97 D1:BDBB 21 0C 00 00 			ld	hl, 12
   98 D1:BDBF 22 D2 08 D0 			ld	(penCol), hl
   99 D1:BDC3 D1 -  -  -  		pop	de
  100 D1:BDC4 E1 -  -  -  	pop	hl
  101 D1:BDC5 7E -  -  -  	ld	a, (hl)
  102 D1:BDC6 B7 -  -  -  	or	a, a
  103 D1:BDC7 20 D9 -  -  	jr	nz, DisplayTokensLoop
  104 D1:BDC9 -  -  -  -  StopDisplayingTokens:
  105 D1:BDC9 21 01 00 00 	ld	hl, 1
  106 D1:BDCD 22 D2 08 D0 	ld	(penCol), hl
  107 D1:BDD1 -  -  -  -  GetRightCustomToken:
  108 D1:BDD1 7B -  -  -  	ld	a, e
  109 D1:BDD2 42 -  -  -  	ld	b, d
  110 D1:BDD3 16 0D -  -  	ld	d, 13
  111 D1:BDD5 ED 5C -  -  	mlt	de
  112 D1:BDD7 21 1E 00 00 	ld	hl, 30
  113 D1:BDDB 19 -  -  -  	add	hl, de
  114 D1:BDDC 50 -  -  -  	ld	d, b
  115 D1:BDDD 5F -  -  -  	ld	e, a
  116 D1:BDDE 22 D5 08 D0 	ld	(penRow), hl
  117 D1:BDE2 21 01 00 00 	ld	hl, 1
  118 D1:BDE6 22 D2 08 D0 	ld	(penCol), hl
  119 D1:BDEA E5 -  -  -  	push	hl
  120 D1:BDEB D5 -  -  -  		push	de
  121 D1:BDEC 3E 3E -  -  			ld	a, '>'
  122 D1:BDEE CD 30 08 02 			call	_VPutMap
  123 D1:BDF2 D1 -  -  -  		pop	de
  124 D1:BDF3 E1 -  -  -  	pop	hl
  125 D1:BDF4 22 D2 08 D0 	ld	(penCol), hl
  126 D1:BDF8 -  -  -  -  KeyLoop:
  127 D1:BDF8 CD 4C 01 02 	call	_GetCSC
  128 D1:BDFC B7 -  -  -  	or	a, a
  129 D1:BDFD 28 F9 -  -  	jr	z, KeyLoop
  130 D1:BDFF FE 02 -  -  	cp	a, skLeft
  131 D1:BE01 28 90 -  -  	jr	z, KeyIsLeft
  132 D1:BE03 FE 03 -  -  	cp	a, skRight
  133 D1:BE05 28 93 -  -  	jr	z, KeyIsRight
  134 D1:BE07 FE 04 -  -  	cp	a, skUp
  135 D1:BE09 20 1B -  -  	jr	nz, KeyNotUp
  136 D1:BE0B 7B -  -  -  	ld	a, e
  137 D1:BE0C B7 -  -  -  	or	a, a
  138 D1:BE0D 28 E9 -  -  	jr	z, KeyLoop
  139 D1:BE0F 1D -  -  -  	dec	e
  140 D1:BE10 -  -  -  -  EraseCursor:
  141 D1:BE10 D5 -  -  -  	push	de
  142 D1:BE11 3E 20 -  -  		ld	a, ' '
  143 D1:BE13 CD 30 08 02 		call	_VPutMap
  144 D1:BE17 3E 20 -  -  		ld	a, ' '
  145 D1:BE19 CD 30 08 02 		call	_VPutMap
  146 D1:BE1D 3E 20 -  -  		ld	a, ' '
  147 D1:BE1F CD 30 08 02 		call	_VPutMap
  148 D1:BE23 D1 -  -  -  	pop	de
  149 D1:BE24 18 AB -  -  	jr	GetRightCustomToken
  150 D1:BE26 -  -  -  -  KeyNotUp:
  151 D1:BE26 FE 01 -  -  	cp	a, skDown
  152 D1:BE28 20 12 -  -  	jr	nz, KeyNotDown
  153 D1:BE2A 7A -  -  -  	ld	a, d
  154 D1:BE2B FE 05 -  -  	cp	a, 5
  155 D1:BE2D 7B -  -  -  	ld	a, e
  156 D1:BE2E 20 04 -  -  	jr	nz, +_
  157 D1:BE30 FE 04 -  -  	cp	a, (AMOUNT_OF_C_FUNCTIONS + AMOUNT_OF_CUSTOM_TOKENS)%16 - 1
  158 D1:BE32 28 C4 -  -  	jr	z, KeyLoop
  159 D1:BE34 7B -  -  -  _:	ld	a, e
  160 D1:BE35 FE 0F -  -  	cp	a, 16-1
  161 D1:BE37 28 BF -  -  	jr	z, KeyLoop
  162 D1:BE39 1C -  -  -  	inc	e
  163 D1:BE3A 18 D4 -  -  	jr	EraseCursor
  164 D1:BE3C -  -  -  -  KeyNotDown:
  165 D1:BE3C FE 0F -  -  	cp	a, skClear
  166 D1:BE3E 28 75 -  -  	jr	z, KeyIsClear
  167 D1:BE40 FE 09 -  -  	cp	a, skEnter
  168 D1:BE42 20 B4 -  -  	jr	nz, KeyLoop
  169 D1:BE44 7B -  -  -  	ld	a, e
  170 D1:BE45 1E 10 -  -  	ld	e, 16
  171 D1:BE47 ED 5C -  -  	mlt	de
  172 D1:BE49 83 -  -  -  	add	a, e
  173 D1:BE4A D6 04 -  -  	sub	a, AMOUNT_OF_CUSTOM_TOKENS
  174 D1:BE4C 38 4F -  -  	jr	c, InsertCustomToken
  175 D1:BE4E 21 1F EA D0 	ld	hl, saveSScreen
  176 D1:BE52 36 B3 -  -  	ld	(hl), tDet
  177 D1:BE54 23 -  -  -  	inc	hl
  178 D1:BE55 FE 0A -  -  	cp	a, 10
  179 D1:BE57 38 17 -  -  	jr	c, +_
  180 D1:BE59 57 -  -  -  	ld	d, a
  181 D1:BE5A 1E 0A -  -  	ld	e, 10
  182 D1:BE5C AF -  -  -  	xor	a, a
  183 D1:BE5D 06 08 -  -  	ld	b, 8
  184 D1:BE5F -  -  -  -  _loop:
  185 D1:BE5F CB 22 -  -  	sla	d
  186 D1:BE61 17 -  -  -  	rla
  187 D1:BE62 BB -  -  -  	cp	a, e
  188 D1:BE63 38 02 -  -  	jr	c, $+4
  189 D1:BE65 93 -  -  -  	sub	a, e
  190 D1:BE66 14 -  -  -  	inc	d
  191 D1:BE67 10 F6 -  -  	djnz	_loop
  192 D1:BE69 5F -  -  -  	ld	e, a
  193 D1:BE6A 7A -  -  -  	ld	a, d
  194 D1:BE6B C6 30 -  -  	add	a, t0
  195 D1:BE6D 77 -  -  -  	ld	(hl), a
  196 D1:BE6E 23 -  -  -  	inc	hl
  197 D1:BE6F 7B -  -  -  	ld	a, e
  198 D1:BE70 C6 30 -  -  _:	add	a, t0
  199 D1:BE72 77 -  -  -  	ld	(hl), a
  200 D1:BE73 23 -  -  -  	inc	hl
  201 D1:BE74 36 00 -  -  	ld	(hl), 0
  202 D1:BE76 21 1F EA D0 	ld	hl, saveSScreen
  203 D1:BE7A -  -  -  -  InsertCFunctionLoop:
  204 D1:BE7A 7E -  -  -  	ld	a, (hl)
  205 D1:BE7B B7 -  -  -  	or	a, a
  206 D1:BE7C 28 37 -  -  	jr	z, BufferSearch
  207 D1:BE7E ED 5B 3D 24 
              D0 -  -  -  	ld	de, (editTail)
  208 D1:BE83 1A -  -  -  	ld	a, (de)
  209 D1:BE84 FE 3F -  -  	cp	a, tEnter
  210 D1:BE86 16 00 -  -  	ld	d, 0
  211 D1:BE88 5E -  -  -  	ld	e, (hl)
  212 D1:BE89 28 09 -  -  	jr	z, +_
  213 D1:BE8B E5 -  -  -  	push	hl
  214 D1:BE8C CD 08 0D 02 		call	_BufReplace
  215 D1:BE90 E1 -  -  -  	pop	hl
  216 D1:BE91 23 -  -  -  	inc	hl
  217 D1:BE92 18 E6 -  -  	jr	InsertCFunctionLoop
  218 D1:BE94 E5 -  -  -  _:	push	hl
  219 D1:BE95 CD 00 0D 02 		call	_BufInsert
  220 D1:BE99 E1 -  -  -  	pop	hl
  221 D1:BE9A 23 -  -  -  	inc	hl
  222 D1:BE9B 18 DD -  -  	jr	InsertCFunctionLoop
  223 D1:BE9D -  -  -  -  InsertCustomToken:
  224 D1:BE9D C6 0E -  -  	add	a, 10+AMOUNT_OF_CUSTOM_TOKENS
  225 D1:BE9F 5F -  -  -  	ld	e, a
  226 D1:BEA0 16 62 -  -  	ld	d, tVarOut
  227 D1:BEA2 2A 3A 24 D0 	ld	hl, (editCursor)
  228 D1:BEA6 7E -  -  -  	ld	a, (hl)
  229 D1:BEA7 FE 3F -  -  	cp	a, tEnter
  230 D1:BEA9 28 06 -  -  	jr	z, +_
  231 D1:BEAB CD 08 0D 02 	call	_BufReplace
  232 D1:BEAF 18 04 -  -  	jr	BufferSearch
  233 D1:BEB1 CD 00 0D 02 _:	call	_BufInsert
  234 D1:BEB5 -  -  -  -  KeyIsClear:
  235 D1:BEB5 -  -  -  -  BufferSearch:
  236 D1:BEB5 01 00 00 00 	ld	bc, 0
  237 D1:BEB9 CD F8 0C 02 _:	call	_BufLeft
  238 D1:BEBD 28 0C -  -  	jr	z, BufferFound
  239 D1:BEBF 7B -  -  -  	ld	a, e
  240 D1:BEC0 FE 3F -  -  	cp	a, tEnter
  241 D1:BEC2 28 03 -  -  	jr	z, +_
  242 D1:BEC4 03 -  -  -  	inc	bc
  243 D1:BEC5 18 F2 -  -  	jr	-_
  244 D1:BEC7 CD FC 0C 02 _:	call	_BufRight
  245 D1:BECB -  -  -  -  BufferFound:
  246 D1:BECB C5 -  -  -  	push	bc
  247 D1:BECC CD 08 08 02 		call	_ClrLCDFull
  248 D1:BED0 CD 18 08 02 		call	_ClrTxtShd
  249 D1:BED4 11 5B 07 00 		ld	de, CustomTokensProgramText - KeyHook_start
  250 D1:BED8 2A DB 25 D0 		ld	hl, (rawKeyHookPtr)
  251 D1:BEDC 19 -  -  -  		add	hl, de
  252 D1:BEDD AF -  -  -  		xor	a, a
  253 D1:BEDE 32 96 05 D0 		ld	(curCol), a
  254 D1:BEE2 32 95 05 D0 		ld	(curRow), a
  255 D1:BEE6 CD C0 07 02 		call	_PutS
  256 D1:BEEA 21 5B 06 D0 		ld	hl, progToEdit
  257 D1:BEEE 06 08 -  -  		ld	b, 8
  258 D1:BEF0 7E -  -  -  _:		ld	a, (hl)
  259 D1:BEF1 B7 -  -  -  		or	a, a
  260 D1:BEF2 28 07 -  -  		jr	z, +_
  261 D1:BEF4 CD B8 07 02 		call	_PutC
  262 D1:BEF8 23 -  -  -  		inc	hl
  263 D1:BEF9 10 F5 -  -  		djnz	-_
  264 D1:BEFB CD F0 07 02 _:		call	_NewLine
  265 D1:BEFF 3E 3A -  -  		ld	a, ':'
  266 D1:BF01 CD B8 07 02 		call	_PutC
  267 D1:BF05 CD 68 0D 02 		call	_DispEOW
  268 D1:BF09 C1 -  -  -  	pop	bc
  269 D1:BF0A -  -  -  -  MoveCursorOnce:
  270 D1:BF0A 78 -  -  -  	ld	a, b
  271 D1:BF0B B1 -  -  -  	or	a, c
  272 D1:BF0C 28 07 -  -  	jr	z, ReturnToEditor
  273 D1:BF0E CD 4C 0D 02 	call	_CursorRight
  274 D1:BF12 0B -  -  -  	dec	bc
  275 D1:BF13 18 F5 -  -  	jr	MoveCursorOnce
  276 D1:BF15 -  -  -  -  ReturnToEditor:
  277 D1:BF15 CD B0 08 02 	call	_CursorOn
  278 D1:BF19 3C -  -  -  	inc	a																	;	reset zero flag
  279 D1:BF1A 3E 00 -  -  	ld	a, 0
  280 D1:BF1C C9 -  -  -  	ret
  281 D1:BF1D -  -  -  -  CustomTokensData:
  282 D1:BF1D -  -  -  -  Tab1:
  283 D1:BF1D 45 78 65 63 
              48 65 78 28 
              00 -  -  -  C1:		.db	"ExecHex(", 0
  284 D1:BF26 44 65 66 69 
              6E 65 53 70 
              72 69 74 65 
              28 00 -  -  C2:		.db	"DefineSprite(", 0
  285 D1:BF34 43 61 6C 6C 
              20 00 -  -  C3:		.db	"Call ", 0
  286 D1:BF3A 43 6F 6D 70 
              69 6C 65 50 
              72 67 6D 28 
              00 -  -  -  C4:		.db	"CompilePrgm(", 0
  287 D1:BF47 -  -  -  -  
  288 D1:BF47 -  -  -  -  #define AMOUNT_OF_C_FUNCTIONS 81
  289 D1:BF47 -  -  -  -  
  290 D1:BF47 42 65 67 69 
              6E 00 -  -  C6:		.db	"Begin", 0
  291 D1:BF4D 45 6E 64 00 C7:		.db	"End", 0
  292 D1:BF51 53 65 74 43 
              6F 6C 6F 72 
              00 -  -  -  C8:		.db	"SetColor", 0
  293 D1:BF5A 53 65 74 44 
              65 66 61 75 
              6C 74 50 61 
              6C 65 74 74 
              65 00 -  -  C9:		.db	"SetDefaultPalette", 0
  294 D1:BF6C 53 65 74 50 
              61 6C 65 74 
              74 65 00 -  C10:	.db	"SetPalette", 0
  295 D1:BF77 46 69 6C 6C 
              53 63 72 65 
              65 6E 00 -  C11:	.db	"FillScreen", 0
  296 D1:BF82 53 65 74 50 
              69 78 65 6C 
              00 -  -  -  C12:	.db	"SetPixel", 0
  297 D1:BF8B 47 65 74 50 
              69 78 65 6C 
              00 -  -  -  C13:	.db	"GetPixel", 0
  298 D1:BF94 47 65 74 44 
              72 61 77 00 C14:	.db	"GetDraw", 0
  299 D1:BF9C 53 65 74 44 
              72 61 77 00 C15:	.db	"SetDraw", 0
  300 D1:BFA4 53 77 61 70 
              44 72 61 77 
              00 -  -  -  C16:	.db	"SwapDraw", 0
  301 D1:BFAD 42 6C 69 74 
              00 -  -  -  C17:	.db	"Blit", 0
  302 D1:BFB2 -  -  -  -  Tab2:
  303 D1:BFB2 42 6C 69 74 
              4C 69 6E 65 
              73 00 -  -  C18:	.db	"BlitLines", 0
  304 D1:BFBC 42 6C 69 74 
              41 72 65 61 
              00 -  -  -  C19:	.db	"BlitArea", 0
  305 D1:BFC5 50 72 69 6E 
              74 43 68 61 
              72 00 -  -  C20:	.db	"PrintChar", 0
  306 D1:BFCF 50 72 69 6E 
              74 49 6E 74 
              00 -  -  -  C21:	.db	"PrintInt", 0
  307 D1:BFD8 50 72 69 6E 
              74 55 49 6E 
              74 00 -  -  C22:	.db	"PrintUInt", 0
  308 D1:BFE2 50 72 69 6E 
              74 53 74 72 
              69 6E 67 00 C23:	.db	"PrintString", 0
  309 D1:BFEE 50 72 69 6E 
              74 53 74 72 
              69 6E 67 58 
              59 00 -  -  C24:	.db	"PrintStringXY", 0
  310 D1:BFFC 53 65 74 54 
              65 78 74 58 
              59 00 -  -  C25:	.db	"SetTextXY", 0
  311 D1:C006 53 65 74 54 
              65 78 74 42 
              47 43 6F 6C 
              6F 72 00 -  C26:	.db	"SetTextBGColor", 0
  312 D1:C015 53 65 74 54 
              65 78 74 46 
              47 43 6F 6C 
              6F 72 00 -  C27:	.db	"SetTextFGColor", 0
  313 D1:C024 53 65 74 54 
              65 78 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C28:	.db	"SetTextTransparentColor", 0
  314 D1:C03C 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 44 61 74 
              61 00 -  -  C29:	.db	"SetCustomFontData", 0
  315 D1:C04E 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 53 70 61 
              63 69 6E 67 
              00 -  -  -  C30:	.db	"SetCustomFontSpacing", 0
  316 D1:C063 53 65 74 4D 
              6F 6E 6F 73 
              70 61 63 65 
              46 6F 6E 74 
              00 -  -  -  C31:	.db	"SetMonospaceFont", 0
  317 D1:C074 47 65 74 53 
              74 72 69 6E 
              67 57 69 64 
              74 68 00 -  C32:	.db	"GetStringWidth", 0
  318 D1:C083 47 65 74 43 
              68 61 72 57 
              69 64 74 68 
              00 -  -  -  C33:	.db	"GetCharWidth", 0
  319 D1:C090 -  -  -  -  Tab3:
  320 D1:C090 47 65 74 54 
              65 78 74 58 
              00 -  -  -  C34:	.db	"GetTextX", 0
  321 D1:C099 47 65 74 54 
              65 78 74 59 
              00 -  -  -  C35:	.db	"GetTextY", 0
  322 D1:C0A2 4C 69 6E 65 
              00 -  -  -  C36:	.db	"Line", 0
  323 D1:C0A7 48 6F 72 69 
              7A 4C 69 6E 
              65 00 -  -  C37:	.db	"HorizLine", 0
  324 D1:C0B1 56 65 72 74 
              4C 69 6E 65 
              00 -  -  -  C38:	.db	"VertLine", 0
  325 D1:C0BA 43 69 72 63 
              6C 65 00 -  C39:	.db	"Circle", 0
  326 D1:C0C1 46 69 6C 6C 
              43 69 72 63 
              6C 65 00 -  C40:	.db	"FillCircle", 0
  327 D1:C0CC 52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C41:	.db	"Rectangle", 0
  328 D1:C0D6 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C42:	.db	"FillRectangle", 0
  329 D1:C0E4 4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C43:	.db	"Line_NoClip", 0
  330 D1:C0F0 48 6F 72 69 
              7A 4C 69 6E 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C44:	.db	"HorizLine_NoClip", 0
  331 D1:C101 56 65 72 74 
              4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C45:	.db	"VertLine_NoClip", 0
  332 D1:C111 46 69 6C 6C 
              43 69 72 63 
              6C 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C46:	.db	"FillCircle_NoClip", 0
  333 D1:C123 52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C47:	.db	"Rectangle_NoClip", 0
  334 D1:C134 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C48:	.db	"FillRectangle_NoClip", 0
  335 D1:C149 53 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C49:	.db	"SetClipRegion", 0
  336 D1:C157 -  -  -  -  Tab4:
  337 D1:C157 47 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C50:	.db	"GetClipRegion", 0
  338 D1:C165 53 68 69 66 
              74 44 6F 77 
              6E 00 -  -  C51:	.db	"ShiftDown", 0
  339 D1:C16F 53 68 69 66 
              74 55 70 00 C52:	.db	"ShiftUp", 0
  340 D1:C177 53 68 69 66 
              74 4C 65 66 
              74 00 -  -  C53:	.db	"ShiftLeft", 0
  341 D1:C181 53 68 69 66 
              74 52 69 67 
              68 74 00 -  C54:	.db	"ShiftRight", 0
  342 D1:C18C 54 69 6C 65 
              6D 61 70 00 C55:	.db	"Tilemap", 0
  343 D1:C194 54 69 6C 65 
              6D 61 70 5F 
              4E 6F 43 6C 
              69 70 00 -  C56:	.db	"Tilemap_NoClip", 0
  344 D1:C1A3 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 00 -  C57:	.db	"TransparentTilemap", 0
  345 D1:C1B6 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C58:	.db	"TransparentTilemap_NoClip", 0
  346 D1:C1D0 54 69 6C 65 
              50 74 72 00 C59:	.db	"TilePtr", 0
  347 D1:C1D8 54 69 6C 65 
              50 74 72 4D 
              61 70 70 65 
              64 00 -  -  C60:	.db	"TilePtrMapped", 0
  348 D1:C1E6 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              00 -  -  -  C61:	.db	"LZDecompress", 0
  349 D1:C1F3 41 6C 6C 6F 
              63 53 70 72 
              69 74 65 00 C62:	.db	"AllocSprite", 0
  350 D1:C1FF 53 70 72 69 
              74 65 00 -  C63:	.db	"Sprite", 0
  351 D1:C206 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 00 -  -  C64:	.db	"TransparentSprite", 0
  352 D1:C218 53 70 72 69 
              74 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C65:	.db	"Sprite_NoClip", 0
  353 D1:C226 -  -  -  -  Tab5:
  354 D1:C226 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C66:	.db	"TransparentSprite_NoClip", 0
  355 D1:C23F 47 65 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C67:	.db	"GetSprite_NoClip", 0
  356 D1:C250 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              5F 4E 6F 43 
              6C 69 70 00 C68:	.db	"ScaledSprite_NoClip", 0
  357 D1:C264 53 63 61 6C 
              65 64 54 72 
              61 6E 73 70 
              61 72 65 6E 
              74 53 70 72 
              69 74 65 5F 
              4E 6F 43 6C 
              69 70 00 -  C69:	.db	"ScaledTransparentSprite_NoClip", 0
  358 D1:C283 46 6C 69 70 
              53 70 72 69 
              74 65 59 00 C70:	.db	"FlipSpriteY", 0
  359 D1:C28F 46 6C 69 70 
              53 70 72 69 
              74 65 58 00 C71:	.db	"FlipSpriteX", 0
  360 D1:C29B 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 00 -  -  C72:	.db	"RotateSpriteC", 0
  361 D1:C2A9 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 43 00 -  C73:	.db	"RotateSpriteCC", 0
  362 D1:C2B8 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              48 61 6C 66 
              00 -  -  -  C74:	.db	"RotateSpriteHalf", 0
  363 D1:C2C9 50 6F 6C 79 
              67 6F 6E 00 C75:	.db	"Polygon", 0
  364 D1:C2D1 50 6F 6C 79 
              67 6F 6E 5F 
              4E 6F 43 6C 
              69 70 00 -  C76:	.db	"Polygon_NoClip", 0
  365 D1:C2E0 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              00 -  -  -  C77:	.db	"FillTriangle", 0
  366 D1:C2ED 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              5F 4E 6F 43 
              6C 69 70 00 C78:	.db	"FillTriangle_NoClip", 0
  367 D1:C301 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              53 70 72 69 
              74 65 00 -  C79:	.db	"LZDecompressSprite", 0
  368 D1:C314 53 65 74 54 
              65 78 74 53 
              63 61 6C 65 
              00 -  -  -  C80:	.db	"SetTextScale", 0
  369 D1:C321 53 65 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C81:	.db	"SetTransparentColor", 0
  370 D1:C335 -  -  -  -  Tab6:
  371 D1:C335 5A 65 72 6F 
              53 63 72 65 
              65 6E 00 -  C82:	.db	"ZeroScreen", 0
  372 D1:C340 53 65 74 54 
              65 78 74 43 
              6F 6E 66 69 
              67 00 -  -  C83:	.db	"SetTextConfig", 0
  373 D1:C34E 47 65 74 53 
              70 72 69 74 
              65 43 68 61 
              72 00 -  -  C84:	.db	"GetSpriteChar", 0
  374 D1:C35C 4C 69 67 68 
              74 65 6E 00 C85:	.db	"Lighten", 0
  375 D1:C364 44 61 72 6B 
              65 6E 00 -  C86		.db	"Darken", 0
  376 D1:C36B 00 -  -  -  		.db	0
  377 D1:C36C -  -  -  -  TabData:
  378 D1:C36C D9 01 00 -  	.dl	Tab1 - KeyHook_start
  379 D1:C36F 6E 02 00 -  	.dl	Tab2 - KeyHook_start
  380 D1:C372 4C 03 00 -  	.dl	Tab3 - KeyHook_start
  381 D1:C375 13 04 00 -  	.dl	Tab4 - KeyHook_start
  382 D1:C378 E2 04 00 -  	.dl	Tab5 - KeyHook_start
  383 D1:C37B F1 05 00 -  	.dl	Tab6 - KeyHook_start
  384 D1:C37E -  -  -  -  	
  385 D1:C37E -  -  -  -  CData5:
  386 D1:C37E 03 02 00 -  	.dl	C6 - KeyHook_start
  387 D1:C381 09 02 00 -  	.dl	C7 - KeyHook_start
  388 D1:C384 0D 02 00 -  	.dl	C8 - KeyHook_start
  389 D1:C387 16 02 00 -  	.dl	C9 - KeyHook_start
  390 D1:C38A 28 02 00 -  	.dl	C10 - KeyHook_start
  391 D1:C38D 33 02 00 -  	.dl	C11 - KeyHook_start
  392 D1:C390 3E 02 00 -  	.dl	C12 - KeyHook_start
  393 D1:C393 47 02 00 -  	.dl	C13 - KeyHook_start
  394 D1:C396 50 02 00 -  	.dl	C14 - KeyHook_start
  395 D1:C399 58 02 00 -  	.dl	C15 - KeyHook_start
  396 D1:C39C 60 02 00 -  	.dl	C16 - KeyHook_start
  397 D1:C39F 69 02 00 -  	.dl	C17 - KeyHook_start
  398 D1:C3A2 6E 02 00 -  	.dl	C18 - KeyHook_start
  399 D1:C3A5 78 02 00 -  	.dl	C19 - KeyHook_start
  400 D1:C3A8 81 02 00 -  	.dl	C20 - KeyHook_start
  401 D1:C3AB 8B 02 00 -  	.dl	C21 - KeyHook_start
  402 D1:C3AE 94 02 00 -  	.dl	C22 - KeyHook_start
  403 D1:C3B1 9E 02 00 -  	.dl	C23 - KeyHook_start
  404 D1:C3B4 AA 02 00 -  	.dl	C24 - KeyHook_start
  405 D1:C3B7 B8 02 00 -  	.dl	C25 - KeyHook_start
  406 D1:C3BA C2 02 00 -  	.dl	C26 - KeyHook_start
  407 D1:C3BD D1 02 00 -  	.dl	C27 - KeyHook_start
  408 D1:C3C0 E0 02 00 -  	.dl	C28 - KeyHook_start
  409 D1:C3C3 F8 02 00 -  	.dl	C29 - KeyHook_start
  410 D1:C3C6 0A 03 00 -  	.dl	C30 - KeyHook_start
  411 D1:C3C9 1F 03 00 -  	.dl	C31 - KeyHook_start
  412 D1:C3CC 30 03 00 -  	.dl	C32 - KeyHook_start
  413 D1:C3CF 3F 03 00 -  	.dl	C33 - KeyHook_start
  414 D1:C3D2 4C 03 00 -  	.dl	C34 - KeyHook_start
  415 D1:C3D5 55 03 00 -  	.dl	C35 - KeyHook_start
  416 D1:C3D8 5E 03 00 -  	.dl	C36 - KeyHook_start
  417 D1:C3DB 63 03 00 -  	.dl	C37 - KeyHook_start
  418 D1:C3DE 6D 03 00 -  	.dl	C38 - KeyHook_start
  419 D1:C3E1 76 03 00 -  	.dl	C39 - KeyHook_start
  420 D1:C3E4 7D 03 00 -  	.dl	C40 - KeyHook_start
  421 D1:C3E7 88 03 00 -  	.dl	C41 - KeyHook_start
  422 D1:C3EA 92 03 00 -  	.dl	C42 - KeyHook_start
  423 D1:C3ED A0 03 00 -  	.dl	C43 - KeyHook_start
  424 D1:C3F0 AC 03 00 -  	.dl	C44 - KeyHook_start
  425 D1:C3F3 BD 03 00 -  	.dl	C45 - KeyHook_start
  426 D1:C3F6 CD 03 00 -  	.dl	C46 - KeyHook_start
  427 D1:C3F9 DF 03 00 -  	.dl	C47 - KeyHook_start
  428 D1:C3FC F0 03 00 -  	.dl	C48 - KeyHook_start
  429 D1:C3FF 05 04 00 -  	.dl	C49 - KeyHook_start
  430 D1:C402 13 04 00 -  	.dl	C50 - KeyHook_start
  431 D1:C405 21 04 00 -  	.dl	C51 - KeyHook_start
  432 D1:C408 2B 04 00 -  	.dl	C52 - KeyHook_start
  433 D1:C40B 33 04 00 -  	.dl	C53 - KeyHook_start
  434 D1:C40E 3D 04 00 -  	.dl	C54 - KeyHook_start
  435 D1:C411 48 04 00 -  	.dl	C55 - KeyHook_start
  436 D1:C414 50 04 00 -  	.dl	C56 - KeyHook_start
  437 D1:C417 5F 04 00 -  	.dl	C57 - KeyHook_start
  438 D1:C41A 72 04 00 -  	.dl	C58 - KeyHook_start
  439 D1:C41D 8C 04 00 -  	.dl	C59 - KeyHook_start
  440 D1:C420 94 04 00 -  	.dl	C60 - KeyHook_start
  441 D1:C423 A2 04 00 -  	.dl	C61 - KeyHook_start
  442 D1:C426 AF 04 00 -  	.dl	C62 - KeyHook_start
  443 D1:C429 BB 04 00 -  	.dl	C63 - KeyHook_start
  444 D1:C42C C2 04 00 -  	.dl	C64 - KeyHook_start
  445 D1:C42F D4 04 00 -  	.dl	C65 - KeyHook_start
  446 D1:C432 E2 04 00 -  	.dl	C66 - KeyHook_start
  447 D1:C435 FB 04 00 -  	.dl	C67 - KeyHook_start
  448 D1:C438 0C 05 00 -  	.dl	C68 - KeyHook_start
  449 D1:C43B 20 05 00 -  	.dl	C69 - KeyHook_start
  450 D1:C43E 3F 05 00 -  	.dl	C70 - KeyHook_start
  451 D1:C441 4B 05 00 -  	.dl	C71 - KeyHook_start
  452 D1:C444 57 05 00 -  	.dl	C72 - KeyHook_start
  453 D1:C447 65 05 00 -  	.dl	C73 - KeyHook_start
  454 D1:C44A 74 05 00 -  	.dl	C74 - KeyHook_start
  455 D1:C44D 85 05 00 -  	.dl	C75 - KeyHook_start
  456 D1:C450 8D 05 00 -  	.dl	C76 - KeyHook_start
  457 D1:C453 9C 05 00 -  	.dl	C77 - KeyHook_start
  458 D1:C456 A9 05 00 -  	.dl	C78 - KeyHook_start
  459 D1:C459 BD 05 00 -  	.dl	C79 - KeyHook_start
  460 D1:C45C D0 05 00 -  	.dl	C80 - KeyHook_start
  461 D1:C45F DD 05 00 -  	.dl	C81 - KeyHook_start
  462 D1:C462 F1 05 00 -  	.dl	C82 - KeyHook_start
  463 D1:C465 FC 05 00 -  	.dl	C83 - KeyHook_start
  464 D1:C468 0A 06 00 -  	.dl	C84 - KeyHook_start
  465 D1:C46B 18 06 00 -  	.dl	C85 - KeyHook_start
  466 D1:C46E 20 06 00 -  	.dl	C86 - KeyHook_start
  467 D1:C471 -  -  -  -  	
  468 D1:C471 -  -  -  -  #define	AMOUNT_OF_CUSTOM_TOKENS 4
  469 D1:C471 08 45 78 65 
              63 48 65 78 
              28 00 -  -  Token1: .db 8,  "ExecHex(", 0
  470 D1:C47B 0D 44 65 66 
              69 6E 65 53 
              70 72 69 74 
              65 28 00 -  Token2: .db 13, "DefineSprite(", 0
  471 D1:C48A 05 43 61 6C 
              6C 20 00 -  Token3: .db 5,  "Call ", 0
  472 D1:C491 0C 43 6F 6D 
              70 69 6C 65 
              50 72 67 6D 
              28 00 -  -  Token4: .db 12, "CompilePrgm(", 0
  473 D1:C49F -  -  -  -  CustomTokensProgramText:
  474 D1:C49F 50 52 4F 47 
              52 41 4D 3A 
              00 -  -  -  	.db	"PROGRAM:", 0
  475 D1:C4A8 -  -  -  -  KeyHook_end:
  476 D1:C4A8 -  -  -  -  
  477 D1:C4A8 -  -  -  -  TokenHook_start:
  478 D1:C4A8 83 -  -  -  	.db	83h
  479 D1:C4A9 7A -  -  -  	ld	a, d
  480 D1:C4AA FE 04 -  -  	cp	a, 4
  481 D1:C4AC C0 -  -  -  	ret	nz
  482 D1:C4AD 7B -  -  -  	ld	a, e
  483 D1:C4AE FE 14 -  -  	cp	a, 5+3+(AMOUNT_OF_CUSTOM_TOKENS*3)
  484 D1:C4B0 D0 -  -  -  	ret	nc
  485 D1:C4B1 D6 05 -  -  	sub	a, 5
  486 D1:C4B3 ED 5B DB 25 
              D0 -  -  -  	ld	de, (rawKeyHookPtr)
  487 D1:C4B8 21 83 07 00 	ld	hl, TokenHook_data - KeyHook_start
  488 D1:C4BC 19 -  -  -  	add	hl, de
  489 D1:C4BD 01 00 00 00 	ld	bc, 0
  490 D1:C4C1 4F -  -  -  	ld	c, a
  491 D1:C4C2 09 -  -  -  	add	hl, bc
  492 D1:C4C3 ED 27 -  -  	ld	hl, (hl)
  493 D1:C4C5 19 -  -  -  	add	hl, de
  494 D1:C4C6 C9 -  -  -  	ret
  495 D1:C4C7 -  -  -  -  TokenHook_data:
  496 D1:C4C7 2C 07 00 -  	.dl	Token1 - KeyHook_start - 1
  497 D1:C4CA 36 07 00 -  	.dl	Token2 - KeyHook_start - 1
  498 D1:C4CD 45 07 00 -  	.dl	Token3 - KeyHook_start - 1
  499 D1:C4D0 4C 07 00 -  	.dl	Token4 - KeyHook_start - 1
  500 D1:C4D3 -  -  -  -  TokenHook_end:
  501 D1:C4D3 -  -  -  -  
  502 D1:C4D3 -  -  -  -  CursorHook_start:
  503 D1:C4D3 83 -  -  -  	.db	83h
  504 D1:C4D4 FE 24 -  -  	cp	a, 24h
  505 D1:C4D6 20 06 -  -  	jr	nz, +_
  506 D1:C4D8 3C -  -  -  	inc	a
  507 D1:C4D9 3A 99 05 D0 	ld	a, (curUnder)
  508 D1:C4DD C9 -  -  -  	ret
  509 D1:C4DE FE 22 -  -  _:	cp	a, 22h
  510 D1:C4E0 C0 -  -  -  	ret	nz
  511 D1:C4E1 3A E0 07 D0 	ld	a, (cxCurApp)
  512 D1:C4E5 FE 46 -  -  	cp	a, cxPrgmEdit
  513 D1:C4E7 C0 -  -  -  	ret	nz
  514 D1:C4E8 2A 3A 24 D0 	ld	hl, (editCursor)
  515 D1:C4EC 7E -  -  -  	ld	a, (hl)
  516 D1:C4ED FE B3 -  -  	cp	a, tDet
  517 D1:C4EF C0 -  -  -  	ret	nz
  518 D1:C4F0 -  -  -  -  DrawDetText:
  519 D1:C4F0 FD CB B0 46 	bit	displayed_det, (iy+fAlways1)
  520 D1:C4F4 C0 -  -  -  	ret	nz
  521 D1:C4F5 2A 3D 24 D0 	ld	hl, (editTail)
  522 D1:C4F9 23 -  -  -  	inc	hl
  523 D1:C4FA 7E -  -  -  	ld	a, (hl)
  524 D1:C4FB D6 30 -  -  	sub	a, t0
  525 D1:C4FD D8 -  -  -  	ret	c
  526 D1:C4FE FE 0A -  -  	cp	a, t9-t0+1
  527 D1:C500 ED 4B 40 24 
              D0 -  -  -  	ld	bc, (editBtm)
  528 D1:C505 11 00 00 00 	ld	de, 0
  529 D1:C509 5F -  -  -  	ld	e, a
  530 D1:C50A 38 02 -  -  	jr	c, GetDetValueLoop
  531 D1:C50C -  -  -  -  WrongDetValue:
  532 D1:C50C 3C -  -  -  	inc	a
  533 D1:C50D C9 -  -  -  	ret
  534 D1:C50E -  -  -  -  GetDetValueLoop:
  535 D1:C50E 23 -  -  -  	inc	hl
  536 D1:C50F B7 -  -  -  	or	a, a
  537 D1:C510 ED 42 -  -  	sbc	hl, bc
  538 D1:C512 28 1C -  -  	jr	z, GetDetValueStop
  539 D1:C514 09 -  -  -  	add	hl, bc
  540 D1:C515 7E -  -  -  	ld	a, (hl)
  541 D1:C516 D6 30 -  -  	sub	a, t0
  542 D1:C518 38 16 -  -  	jr	c, GetDetValueStop
  543 D1:C51A FE 0A -  -  	cp	a, t9-t0+1
  544 D1:C51C 30 12 -  -  	jr	nc, GetDetValueStop
  545 D1:C51E E5 -  -  -  	push	hl
  546 D1:C51F EB -  -  -  		ex	de, hl
  547 D1:C520 29 -  -  -  		add	hl, hl
  548 D1:C521 E5 -  -  -  		push	hl
  549 D1:C522 D1 -  -  -  		pop	de
  550 D1:C523 29 -  -  -  		add	hl, hl
  551 D1:C524 29 -  -  -  		add	hl, hl
  552 D1:C525 19 -  -  -  		add	hl, de
  553 D1:C526 11 00 00 00 		ld	de, 0
  554 D1:C52A 5F -  -  -  		ld	e, a
  555 D1:C52B 19 -  -  -  		add	hl, de
  556 D1:C52C EB -  -  -  		ex	de, hl
  557 D1:C52D E1 -  -  -  	pop	hl
  558 D1:C52E 18 DE -  -  	jr	GetDetValueLoop
  559 D1:C530 -  -  -  -  GetDetValueStop:
  560 D1:C530 EB -  -  -  	ex	de, hl
  561 D1:C531 11 51 00 00 	ld	de, AMOUNT_OF_C_FUNCTIONS
  562 D1:C535 B7 -  -  -  	or	a, a
  563 D1:C536 ED 52 -  -  	sbc	hl, de
  564 D1:C538 30 D2 -  -  	jr	nc, WrongDetValue
  565 D1:C53A 19 -  -  -  	add	hl, de
  566 D1:C53B 26 03 -  -  	ld	h, 3
  567 D1:C53D ED 6C -  -  	mlt	hl
  568 D1:C53F 11 3A 06 00 	ld	de, CData5 - KeyHook_start
  569 D1:C543 19 -  -  -  	add	hl, de
  570 D1:C544 ED 5B DB 25 
              D0 -  -  -  	ld	de, (rawKeyHookPtr)
  571 D1:C549 19 -  -  -  	add	hl, de
  572 D1:C54A ED 27 -  -  	ld	hl, (hl)
  573 D1:C54C 19 -  -  -  	add	hl, de
  574 D1:C54D 11 1C E7 00 	ld	de, 000E71Ch
  575 D1:C551 40 ED 53 AC 
              26 -  -  -  	ld.sis	(drawFGColor - 0D00000h), de
  576 D1:C556 40 ED 5B CC 
              2A -  -  -  	ld.sis	de, (statusBarBGColor - 0D00000h)
  577 D1:C55B 40 ED 53 AA 
              26 -  -  -  	ld.sis	(drawBGColor - 0D00000h), de
  578 D1:C560 3E 0E -  -  	ld	a, 14
  579 D1:C562 32 D5 08 D0 	ld	(penRow),a
  580 D1:C566 11 02 00 00 	ld	de, 2
  581 D1:C56A 40 ED 53 D2 
              08 -  -  -  	ld.sis	(penCol - 0D00000h), de
  582 D1:C56F CD 34 08 02 	call	_VPutS
  583 D1:C573 11 FF FF 00 	ld	de, $FFFF
  584 D1:C577 40 ED 53 AA 
              26 -  -  -  	ld.sis	(drawBGColor - 0D00000h), de
  585 D1:C57C FD CB B0 C6 	set	displayed_det, (iy+fAlways1)
  586 D1:C580 C9 -  -  -  	ret
  587 D1:C581 -  -  -  -  CursorHook_end:
  588 D1:C581 -  -  -  -  
  589 D1:C581 -  -  -  -  Hooks_end:
Listing for file "ice.asm"
  446 D1:C581 -  -  -  -  #include "operators functions/functions.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\functions.asm"
    1 D1:C581 -  -  -  -  ExecuteFunction:
    2 D1:C581 E5 -  -  -  	push	hl
    3 D1:C582 21 0F E9 D1 		ld	hl, FunctionsWithReturnValueArguments
    4 D1:C586 01 07 00 00 		ld	bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValueArguments
    5 D1:C58A ED B1 -  -  		cpir
    6 D1:C58C 06 03 -  -  		ld	b, 3
    7 D1:C58E ED 4C -  -  		mlt	bc
    8 D1:C590 21 16 E9 D1 		ld	hl, FunctionsWithReturnValueStart
    9 D1:C594 09 -  -  -  		add	hl, bc
   10 D1:C595 ED 27 -  -  		ld	hl, (hl)
   11 D1:C597 22 9D C5 D1 		ld	(JumpFunction), hl
   12 D1:C59B E1 -  -  -  	pop	hl
   13 D1:C59C -  -  -  -  JumpFunction = $+1
   14 D1:C59C C3 00 00 00 	jp	0
   15 D1:C5A0 -  -  -  -  	
   16 D1:C5A0 -  -  -  -  functionPrgm:
   17 D1:C5A0 CD A4 AC D1 	call	MaybeInsertIYFlags
   18 D1:C5A4 3E 21 -  -  	ld	a, 021h
   19 D1:C5A6 CD 1B AD D1 	call	InsertA															;	ld hl, *
   20 D1:C5AA CD 32 AD D1 	call	InsertProgramPtrToDataOffset
   21 D1:C5AE 2A 77 EA D1 	ld	hl, (programDataDataPtr)
   22 D1:C5B2 E5 -  -  -  	push	hl
   23 D1:C5B3 CD 50 AC D1 		call	InsertHL														;	ld hl, programname
   24 D1:C5B7 E1 -  -  -  	pop	hl
   25 D1:C5B8 36 05 -  -  	ld	(hl), ProgObj
   26 D1:C5BA CD 36 B2 D1 	call	GetProgramName
   27 D1:C5BE 23 -  -  -  	inc	hl
   28 D1:C5BF 22 77 EA D1 	ld	(programDataDataPtr), hl
   29 D1:C5C3 3E CD -  -  	ld	a, 0CDh
   30 D1:C5C5 21 20 03 02 	ld	hl, _Mov9ToOP1
   31 D1:C5C9 CD 4C AC D1 	call	InsertAHL															;	call _Mov9ToOP1
   32 D1:C5CD 3E FD -  -  	ld	a, 0FDh
   33 D1:C5CF 21 CB 08 CE 	ld	hl, 0CE08CBh
   34 D1:C5D3 CD 4C AC D1 	call	InsertAHL															;	set 1, (iy+8)
   35 D1:C5D7 3E CD -  -  	ld	a, 0CDh
   36 D1:C5D9 21 00 0F 02 	ld	hl, _ParseInp
   37 D1:C5DD CD 4C AC D1 	call	InsertAHL															;	call _ParseInp
   38 D1:C5E1 3E FD -  -  	ld	a, 0FDh
   39 D1:C5E3 21 CB 08 8E 	ld	hl, 08E08CBh
   40 D1:C5E7 C3 4C AC D1 	jp	InsertAHL															;	res 1, (iy+8)
   41 D1:C5EB -  -  -  -  	
   42 D1:C5EB -  -  -  -  
   43 D1:C5EB -  -  -  -  functionOutput:
   44 D1:C5EB CD A4 AC D1 	call	MaybeInsertIYFlags
   45 D1:C5EF 3E 01 -  -  	ld	a, 1
   46 D1:C5F1 32 7C EA D1 	ld	(openedParensF), a
   47 D1:C5F5 CD 28 10 02 	call	_IncFetch
   48 D1:C5F9 CD CD B2 D1 	call	ParseExpression
   49 D1:C5FD FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   50 D1:C601 FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   51 D1:C605 CA 40 AF D1 	jp	z, ErrorSyntax
   52 D1:C609 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   53 D1:C60D 20 08 -  -  	jr	nz, OutputRowIsNumber
   54 D1:C60F -  -  -  -  OutputRowIsVariable:
   55 D1:C60F 3E 7D -  -  	ld	a, 07Dh
   56 D1:C611 CD 1B AD D1 	call	InsertA															;	ld a, l
   57 D1:C615 18 0E -  -  	jr	+_
   58 D1:C617 -  -  -  -  OutputRowIsNumber:
   59 D1:C617 2A 62 EA D1 	ld	hl, (programPtr)
   60 D1:C61B 2B -  -  -  	dec	hl
   61 D1:C61C 2B -  -  -  	dec	hl
   62 D1:C61D 22 62 EA D1 	ld	(programPtr), hl
   63 D1:C621 2B -  -  -  	dec	hl
   64 D1:C622 2B -  -  -  	dec	hl
   65 D1:C623 36 3E -  -  	ld	(hl), 03Eh															;	ld a, *
   66 D1:C625 3E 32 -  -  _:	ld	a, 032h
   67 D1:C627 21 95 05 D0 	ld	hl, curRow
   68 D1:C62B CD 4C AC D1 	call	InsertAHL															;	ld (curRow), a
   69 D1:C62F CD 28 10 02 	call	_IncFetch
   70 D1:C633 CD CD B2 D1 	call	ParseExpression
   71 D1:C637 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   72 D1:C63B FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   73 D1:C63F CA 40 AF D1 	jp	z, ErrorSyntax
   74 D1:C643 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   75 D1:C647 20 08 -  -  	jr	nz, OutputColumnIsNumber
   76 D1:C649 -  -  -  -  OutputColumnIsVariable:
   77 D1:C649 3E 7D -  -  	ld	a, 07Dh
   78 D1:C64B CD 1B AD D1 	call	InsertA															;	ld a, l
   79 D1:C64F 18 0E -  -  	jr	+_
   80 D1:C651 -  -  -  -  OutputColumnIsNumber:
   81 D1:C651 2A 62 EA D1 	ld	hl, (programPtr)
   82 D1:C655 2B -  -  -  	dec	hl
   83 D1:C656 2B -  -  -  	dec	hl
   84 D1:C657 22 62 EA D1 	ld	(programPtr), hl
   85 D1:C65B 2B -  -  -  	dec	hl
   86 D1:C65C 2B -  -  -  	dec	hl
   87 D1:C65D 36 3E -  -  	ld	(hl), 03Eh															;	ld a, *
   88 D1:C65F 3E 32 -  -  _:	ld	a, 032h
   89 D1:C661 21 96 05 D0 	ld	hl, curCol
   90 D1:C665 CD 4C AC D1 	call	InsertAHL															;	ld (curCol), a
   91 D1:C669 F6 01 -  -  	or	a, 1																	;	rest zero flag
   92 D1:C66B CD 86 C6 D1 	call	DisplayNumberOrString
   93 D1:C66F C2 40 AF D1 	jp	nz, ErrorSyntax
   94 D1:C673 C9 -  -  -  	ret
   95 D1:C674 -  -  -  -  	
   96 D1:C674 -  -  -  -  functionDisp:
   97 D1:C674 CD A4 AC D1 	call	MaybeInsertIYFlags
   98 D1:C678 3E 01 -  -  	ld	a, 1
   99 D1:C67A 32 7C EA D1 	ld	(openedParensF), a
  100 D1:C67E 3D -  -  -  	dec	a																	;	set zero flag
  101 D1:C67F CD 86 C6 D1 	call	DisplayNumberOrString
  102 D1:C683 C8 -  -  -  	ret	z
  103 D1:C684 18 EE -  -  	jr	functionDisp
  104 D1:C686 -  -  -  -  	
  105 D1:C686 -  -  -  -  DisplayNumberOrString:
  106 D1:C686 F5 -  -  -  	push	af
  107 D1:C687 CD 28 10 02 		call	_IncFetch
  108 D1:C68B CD CD B2 D1 		call	ParseExpression
  109 D1:C68F ED 5B 62 EA 
              D1 -  -  -  		ld	de, (programPtr)
  110 D1:C694 01 0E 00 00 		ld	bc, 14
  111 D1:C698 FD CB C0 7E 		bit	output_is_string, (iy+fExpression1)
  112 D1:C69C 20 0F -  -  		jr	nz, DispString
  113 D1:C69E 21 98 EE D1 		ld	hl, DispNumberRoutine
  114 D1:C6A2 F1 -  -  -  	pop	af
  115 D1:C6A3 28 16 -  -  	jr	z, +_
  116 D1:C6A5 21 92 EE D1 	ld	hl, DispNumberRoutine-6
  117 D1:C6A9 0E 08 -  -  	ld	c, 8
  118 D1:C6AB 18 0E -  -  	jr	+_
  119 D1:C6AD -  -  -  -  DispString:
  120 D1:C6AD 21 A6 EE D1 		ld	hl, DispStringRoutine
  121 D1:C6B1 0B -  -  -  		dec	bc
  122 D1:C6B2 F1 -  -  -  	pop	af
  123 D1:C6B3 28 06 -  -  	jr	z, +_
  124 D1:C6B5 21 AB EE D1 	ld	hl, DispStringRoutine+5
  125 D1:C6B9 0E 08 -  -  	ld	c, 8
  126 D1:C6BB ED B0 -  -  _:	ldir
  127 D1:C6BD ED 53 62 EA 
              D1 -  -  -  	ld	(programPtr), de
  128 D1:C6C2 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  129 D1:C6C6 C9 -  -  -  	ret
  130 D1:C6C7 -  -  -  -  	
  131 D1:C6C7 -  -  -  -  	
  132 D1:C6C7 -  -  -  -  functionLbl:
  133 D1:C6C7 DD 2A 68 EA 
              D1 -  -  -  	ld	ix, (labelPtr)
  134 D1:C6CC 2A 62 EA D1 	ld	hl, (programPtr)
  135 D1:C6D0 DD 2F 00 -  	ld	(ix), hl
  136 D1:C6D3 2A 1A 23 D0 	ld	hl, (curPC)
  137 D1:C6D7 23 -  -  -  	inc	hl
  138 D1:C6D8 DD 2F 03 -  	ld	(ix+3), hl
  139 D1:C6DB ED 22 06 -  	lea	hl, ix+6
  140 D1:C6DE 22 68 EA D1 	ld	(labelPtr), hl
  141 D1:C6E2 -  -  -  -  functionSkipLine:
  142 D1:C6E2 2A 1D 23 D0 	ld	hl, (endPC)
  143 D1:C6E6 ED 5B 1A 23 
              D0 -  -  -  	ld	de, (curPC)
  144 D1:C6EB B7 -  -  -  	or	a
  145 D1:C6EC ED 52 -  -  	sbc	hl, de
  146 D1:C6EE D8 -  -  -  	ret	c
  147 D1:C6EF 23 -  -  -  	inc	hl
  148 D1:C6F0 E5 -  -  -  	push	hl
  149 D1:C6F1 C1 -  -  -  	pop	bc
  150 D1:C6F2 EB -  -  -  	ex	de, hl
  151 D1:C6F3 3E 3F -  -  	ld	a, tEnter
  152 D1:C6F5 ED B1 -  -  	cpir
  153 D1:C6F7 2B -  -  -  	dec	hl
  154 D1:C6F8 22 1A 23 D0 	ld	(curPC), hl
  155 D1:C6FC C9 -  -  -  	ret
  156 D1:C6FD -  -  -  -  	
  157 D1:C6FD -  -  -  -  functionCall:
  158 D1:C6FD 3E CD -  -  	ld	a, 0CDh
  159 D1:C6FF 18 02 -  -  	jr	$+4
  160 D1:C701 -  -  -  -  functionGoto:
  161 D1:C701 3E C3 -  -  	ld	a, 0C3h
  162 D1:C703 CD 1B AD D1 	call	InsertA															;	jp/call ******
  163 D1:C707 DD 2A 6B EA 
              D1 -  -  -  	ld	ix, (gotoPtr)
  164 D1:C70C 2A 62 EA D1 	ld	hl, (programPtr)
  165 D1:C710 DD 2F 00 -  	ld	(ix), hl
  166 D1:C713 2A 1A 23 D0 	ld	hl, (curPC)
  167 D1:C717 23 -  -  -  	inc	hl
  168 D1:C718 DD 2F 03 -  	ld	(ix+3), hl
  169 D1:C71B ED 22 06 -  	lea	hl, ix+6
  170 D1:C71E 22 6B EA D1 	ld	(gotoPtr), hl
  171 D1:C722 CD 50 AC D1 	call	InsertHL															;	jp/call RANDOM
  172 D1:C726 18 BA -  -  	jr	functionSkipLine
  173 D1:C728 -  -  -  -  	
  174 D1:C728 -  -  -  -  functionReturn:
  175 D1:C728 CD C0 0F 02 	call	_NxtFetch
  176 D1:C72C 30 04 -  -  	jr	nc, +_
  177 D1:C72E FD CB C0 D6 	set	last_token_is_ret, (iy+fExpression1)
  178 D1:C732 FE CE -  -  _:	cp	tIf
  179 D1:C734 20 1C -  -  	jr	nz, +_
  180 D1:C736 CD 28 10 02 	call	_IncFetch
  181 D1:C73A CD 28 10 02 	call	_IncFetch
  182 D1:C73E CD CD B2 D1 	call	ParseExpression
  183 D1:C742 3E 19 -  -  	ld	a, 019h
  184 D1:C744 CD 1B AD D1 	call	InsertA															;	add hl, de
  185 D1:C748 3E B7 -  -  	ld	a, 0B7h
  186 D1:C74A 21 ED 52 C0 	ld	hl, 0C052EDh
  187 D1:C74E C3 4C AC D1 	jp	InsertAHL															;	or a \ sbc hl, de \ ret nz
  188 D1:C752 3E C9 -  -  _:	ld	a, 0C9h
  189 D1:C754 C3 1B AD D1 	jp	InsertA																;	ret
  190 D1:C758 -  -  -  -  		
  191 D1:C758 -  -  -  -  functionRepeat:
  192 D1:C758 21 7F EA D1 	ld	hl, amountOfEnds
  193 D1:C75C 34 -  -  -  	inc	(hl)
  194 D1:C75D 2A 62 EA D1 	ld	hl, (programPtr)
  195 D1:C761 11 81 7C FC 	ld	de, UserMem - program
  196 D1:C765 19 -  -  -  	add	hl, de
  197 D1:C766 E5 -  -  -  	push	hl
  198 D1:C767 2A 1A 23 D0 		ld	hl, (curPC)
  199 D1:C76B 23 -  -  -  		inc	hl
  200 D1:C76C E5 -  -  -  		push	hl
  201 D1:C76D CD 28 10 02 _:			call	_IncFetch
  202 D1:C771 DA 40 AF D1 			jp	c, ErrorSyntax
  203 D1:C775 FE 3F -  -  			cp	tEnter
  204 D1:C777 20 F4 -  -  			jr	nz, -_
  205 D1:C779 CD 99 AA D1 			call	ParseProgramUntilEnd
  206 D1:C77D FE D0 -  -  			cp	tElse
  207 D1:C77F CA 40 AF D1 			jp	z, ErrorSyntax
  208 D1:C783 ED 5B 1A 23 
              D0 -  -  -  			ld	de, (curPC)
  209 D1:C788 E1 -  -  -  		pop	hl
  210 D1:C789 22 1A 23 D0 		ld	(curPC), hl
  211 D1:C78D D5 -  -  -  		push	de
  212 D1:C78E CD CD B2 D1 			call	ParseExpression
  213 D1:C792 D1 -  -  -  		pop	de
  214 D1:C793 ED 53 1A 23 
              D0 -  -  -  		ld	(curPC), de
  215 D1:C798 FD CB C0 66 		bit	output_is_number, (iy+fExpression1)
  216 D1:C79C C2 22 C8 D1 		jp	nz, functionRepeatInfinite
  217 D1:C7A0 FD CB C0 6E 		bit	ans_set_z_flag, (iy+fExpression1)
  218 D1:C7A4 28 14 -  -  		jr	z, +_
  219 D1:C7A6 2A 62 EA D1 		ld	hl, (programPtr)
  220 D1:C7AA 2B -  -  -  		dec	hl
  221 D1:C7AB 2B -  -  -  		dec	hl
  222 D1:C7AC 2B -  -  -  		dec	hl
  223 D1:C7AD 7E -  -  -  		ld	a, (hl)
  224 D1:C7AE DD 67 -  -  		ld	ixh, a
  225 D1:C7B0 2B -  -  -  		dec	hl
  226 D1:C7B1 2B -  -  -  		dec	hl
  227 D1:C7B2 2B -  -  -  		dec	hl
  228 D1:C7B3 2B -  -  -  		dec	hl
  229 D1:C7B4 22 62 EA D1 		ld	(programPtr), hl
  230 D1:C7B8 18 1D -  -  		jr	functionRepeatInsert
  231 D1:C7BA FD CB BF 4E _:		bit	last_token_was_not, (iy+fExpression2)
  232 D1:C7BE 28 0D -  -  		jr	z, InsertNormalRepeat2
  233 D1:C7C0 2A 62 EA D1 		ld	hl, (programPtr)
  234 D1:C7C4 11 F8 FF FF 		ld	de, -8
  235 D1:C7C8 19 -  -  -  		add	hl, de
  236 D1:C7C9 22 62 EA D1 		ld	(programPtr), hl
  237 D1:C7CD -  -  -  -  InsertNormalRepeat2:
  238 D1:C7CD 3E 19 -  -  		ld	a, 019h
  239 D1:C7CF 21 B7 ED 52 		ld	hl, 052EDB7h
  240 D1:C7D3 CD 4C AC D1 		call	InsertAHL														;	add hl, de \ or a \ sbc hl, de
  241 D1:C7D7 -  -  -  -  functionRepeatInsert:
  242 D1:C7D7 01 81 7C FC 		ld	bc, UserMem - program
  243 D1:C7DB 09 -  -  -  		add	hl, bc
  244 D1:C7DC D1 -  -  -  	pop	de
  245 D1:C7DD B7 -  -  -  	or	a
  246 D1:C7DE ED 52 -  -  	sbc	hl, de
  247 D1:C7E0 7C -  -  -  	ld	a, h
  248 D1:C7E1 B7 -  -  -  	or	a
  249 D1:C7E2 20 23 -  -  	jr	nz, functionRepeatLarge
  250 D1:C7E4 7D -  -  -  	ld	a, l
  251 D1:C7E5 2F -  -  -  	cpl
  252 D1:C7E6 3D -  -  -  	dec	a
  253 D1:C7E7 FE 80 -  -  	cp	%10000000
  254 D1:C7E9 38 1C -  -  	jr	c, functionRepeatLarge
  255 D1:C7EB -  -  -  -  functionRepeatSmall:
  256 D1:C7EB 47 -  -  -  	ld	b, a
  257 D1:C7EC 3E 28 -  -  	ld	a, 028h
  258 D1:C7EE FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  259 D1:C7F2 28 02 -  -  	jr	z, +_
  260 D1:C7F4 DD 7C -  -  	ld	a, ixh
  261 D1:C7F6 FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  262 D1:C7FA 28 02 -  -  	jr	z, $+4
  263 D1:C7FC EE 08 -  -  	xor	8
  264 D1:C7FE CD 1B AD D1 	call	InsertA															;	jr [n]z, *
  265 D1:C802 78 -  -  -  	ld	a, b
  266 D1:C803 C3 1B AD D1 	jp	InsertA																;	jr [n]z, *
  267 D1:C807 -  -  -  -  functionRepeatLarge:
  268 D1:C807 EB -  -  -  	ex	de, hl
  269 D1:C808 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  270 D1:C80C 28 06 -  -  	jr	z, +_
  271 D1:C80E DD 7C -  -  	ld	a, ixh
  272 D1:C810 C6 A2 -  -  	add	a, 0A2h
  273 D1:C812 18 02 -  -  	jr	++_
  274 D1:C814 3E CA -  -  _:	ld	a, 0CAh
  275 D1:C816 FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  276 D1:C81A 28 02 -  -  	jr	z, $+4
  277 D1:C81C EE 08 -  -  	xor	8
  278 D1:C81E C3 4C AC D1 	jp	InsertAHL															;	jp [n]z, XXXXXX
  279 D1:C822 -  -  -  -  functionRepeatInfinite:
  280 D1:C822 2A 62 EA D1 		ld	hl, (programPtr)
  281 D1:C826 2B -  -  -  		dec	hl
  282 D1:C827 2B -  -  -  		dec	hl
  283 D1:C828 2B -  -  -  		dec	hl
  284 D1:C829 2B -  -  -  		dec	hl
  285 D1:C82A 22 62 EA D1 		ld	(programPtr), hl
  286 D1:C82E E5 -  -  -  		push	hl
  287 D1:C82F 23 -  -  -  			inc	hl
  288 D1:C830 ED 27 -  -  			ld	hl, (hl)
  289 D1:C832 19 -  -  -  			add	hl, de
  290 D1:C833 B7 -  -  -  			or	a
  291 D1:C834 ED 52 -  -  			sbc	hl, de
  292 D1:C836 E1 -  -  -  		pop	hl
  293 D1:C837 C0 -  -  -  		ret	nz
  294 D1:C838 11 81 7C FC 		ld	de, UserMem - program
  295 D1:C83C 19 -  -  -  		add	hl, de
  296 D1:C83D D1 -  -  -  	pop	de
  297 D1:C83E B7 -  -  -  	or	a
  298 D1:C83F ED 52 -  -  	sbc	hl, de
  299 D1:C841 7C -  -  -  	ld	a, h
  300 D1:C842 B7 -  -  -  	or	a
  301 D1:C843 20 13 -  -  	jr	nz, functionRepeatInfiniteLarge
  302 D1:C845 7D -  -  -  	ld	a, l
  303 D1:C846 2F -  -  -  	cpl
  304 D1:C847 3D -  -  -  	dec	a
  305 D1:C848 FE 80 -  -  	cp	%10000000
  306 D1:C84A 38 0C -  -  	jr	c, functionRepeatInfiniteLarge
  307 D1:C84C -  -  -  -  functionRepeatInfiniteSmall:
  308 D1:C84C 47 -  -  -  	ld	b, a
  309 D1:C84D 3E 18 -  -  	ld	a, 018h
  310 D1:C84F CD 1B AD D1 	call	InsertA															;	jr *
  311 D1:C853 78 -  -  -  	ld	a, b
  312 D1:C854 C3 1B AD D1 	jp	InsertA																;	jr *
  313 D1:C858 -  -  -  -  functionRepeatInfiniteLarge:
  314 D1:C858 EB -  -  -  	ex	de, hl
  315 D1:C859 3E C3 -  -  	ld	a, 0C3h
  316 D1:C85B C3 4C AC D1 	jp	InsertAHL															;	jp XXXXXX
  317 D1:C85F -  -  -  -  
  318 D1:C85F -  -  -  -  functionIf:
  319 D1:C85F 21 7F EA D1 	ld	hl, amountOfEnds
  320 D1:C863 34 -  -  -  	inc	(hl)
  321 D1:C864 CD 28 10 02 	call	_IncFetch
  322 D1:C868 CD CD B2 D1 	call	ParseExpression
  323 D1:C86C FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  324 D1:C870 C2 01 C9 D1 	jp	nz, functionIfInfinite
  325 D1:C874 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  326 D1:C878 28 14 -  -  	jr	z, InsertNormalIf
  327 D1:C87A 2A 62 EA D1 	ld	hl, (programPtr)
  328 D1:C87E 2B -  -  -  	dec	hl
  329 D1:C87F 2B -  -  -  	dec	hl
  330 D1:C880 2B -  -  -  	dec	hl
  331 D1:C881 7E -  -  -  	ld	a, (hl)
  332 D1:C882 C6 A2 -  -  	add	a, 0A2h
  333 D1:C884 2B -  -  -  	dec	hl
  334 D1:C885 2B -  -  -  	dec	hl
  335 D1:C886 2B -  -  -  	dec	hl
  336 D1:C887 2B -  -  -  	dec	hl
  337 D1:C888 22 62 EA D1 	ld	(programPtr), hl
  338 D1:C88C 18 27 -  -  	jr	InsertIf
  339 D1:C88E -  -  -  -  InsertNormalIf:
  340 D1:C88E FD CB BF 4E 	bit	last_token_was_not, (iy+fExpression2)
  341 D1:C892 28 0D -  -  	jr	z, InsertNormalIf2
  342 D1:C894 2A 62 EA D1 	ld	hl, (programPtr)
  343 D1:C898 11 F8 FF FF 	ld	de, -8
  344 D1:C89C 19 -  -  -  	add	hl, de
  345 D1:C89D 22 62 EA D1 	ld	(programPtr), hl
  346 D1:C8A1 -  -  -  -  InsertNormalIf2:
  347 D1:C8A1 3E 19 -  -  	ld	a, 019h
  348 D1:C8A3 21 B7 ED 52 	ld	hl, 052EDB7h
  349 D1:C8A7 CD 4C AC D1 	call	InsertAHL															;	add hl, de \ or a \ sbc hl, de
  350 D1:C8AB 3E CA -  -  	ld	a, 0CAh
  351 D1:C8AD FD CB BF 4E 	bit	last_token_was_not, (iy+fExpression2)
  352 D1:C8B1 28 02 -  -  	jr	z, InsertIf
  353 D1:C8B3 3E C2 -  -  	ld	a, 0C2h
  354 D1:C8B5 -  -  -  -  InsertIf:
  355 D1:C8B5 CD 1B AD D1 	call	InsertA															;	jp z, ******
  356 D1:C8B9 2A 62 EA D1 	ld	hl, (programPtr)
  357 D1:C8BD E5 -  -  -  	push	hl
  358 D1:C8BE CD 50 AC D1 		call	InsertHL														;	jp z, XXXXXX
  359 D1:C8C2 CD 99 AA D1 		call	ParseProgramUntilEnd
  360 D1:C8C6 FE D0 -  -  		cp	tElse
  361 D1:C8C8 20 29 -  -  		jr	nz, +_
  362 D1:C8CA 21 7F EA D1 		ld	hl, amountOfEnds
  363 D1:C8CE 34 -  -  -  		inc	(hl)
  364 D1:C8CF 3E C3 -  -  		ld	a, 0C3h
  365 D1:C8D1 CD 1B AD D1 		call	InsertA														;	jp ******
  366 D1:C8D5 ED 5B 62 EA 
              D1 -  -  -  		ld	de, (programPtr)
  367 D1:C8DA CD 50 AC D1 		call	InsertHL														;	jp XXXXXX
  368 D1:C8DE 01 81 7C FC 		ld	bc, UserMem - program
  369 D1:C8E2 09 -  -  -  		add	hl, bc
  370 D1:C8E3 E5 -  -  -  		push	hl
  371 D1:C8E4 C1 -  -  -  		pop	bc
  372 D1:C8E5 E1 -  -  -  	pop	hl
  373 D1:C8E6 ED 0F -  -  	ld	(hl), bc
  374 D1:C8E8 D5 -  -  -  	push	de
  375 D1:C8E9 CD 99 AA D1 		call	ParseProgramUntilEnd
  376 D1:C8ED FE D0 -  -  		cp	tElse
  377 D1:C8EF CA 40 AF D1 		jp	z, ErrorSyntax
  378 D1:C8F3 2A 62 EA D1 _:		ld	hl, (programPtr)
  379 D1:C8F7 11 81 7C FC 		ld	de, UserMem - program
  380 D1:C8FB 19 -  -  -  		add	hl, de
  381 D1:C8FC EB -  -  -  		ex	de, hl
  382 D1:C8FD E1 -  -  -  	pop	hl
  383 D1:C8FE ED 1F -  -  	ld	(hl), de
  384 D1:C900 C9 -  -  -  	ret
  385 D1:C901 -  -  -  -  functionIfInfinite:
  386 D1:C901 2A 62 EA D1 	ld	hl, (programPtr)
  387 D1:C905 2B -  -  -  	dec	hl
  388 D1:C906 2B -  -  -  	dec	hl
  389 D1:C907 2B -  -  -  	dec	hl
  390 D1:C908 2B -  -  -  	dec	hl
  391 D1:C909 22 62 EA D1 	ld	(programPtr), hl
  392 D1:C90D 23 -  -  -  	inc	hl
  393 D1:C90E ED 27 -  -  	ld	hl, (hl)
  394 D1:C910 19 -  -  -  	add	hl, de
  395 D1:C911 B7 -  -  -  	or	a
  396 D1:C912 ED 52 -  -  	sbc	hl, de
  397 D1:C914 28 1C -  -  	jr	z, functionIfInfiniteFalse
  398 D1:C916 CD 99 AA D1 	call	ParseProgramUntilEnd
  399 D1:C91A FE D0 -  -  	cp	tElse
  400 D1:C91C C0 -  -  -  	ret	nz
  401 D1:C91D 2A 62 EA D1 	ld	hl, (programPtr)
  402 D1:C921 E5 -  -  -  	push	hl
  403 D1:C922 CD 99 AA D1 		call	ParseProgramUntilEnd
  404 D1:C926 FE D0 -  -  		cp	tElse
  405 D1:C928 CA 40 AF D1 		jp	z, ErrorSyntax
  406 D1:C92C E1 -  -  -  	pop	hl
  407 D1:C92D 22 62 EA D1 	ld	(programPtr), hl
  408 D1:C931 C9 -  -  -  	ret
  409 D1:C932 -  -  -  -  functionIfInfiniteFalse:
  410 D1:C932 2A 62 EA D1 	ld	hl, (programPtr)
  411 D1:C936 E5 -  -  -  	push	hl
  412 D1:C937 CD 99 AA D1 		call	ParseProgramUntilEnd
  413 D1:C93B E1 -  -  -  	pop	hl
  414 D1:C93C 22 62 EA D1 	ld	(programPtr), hl
  415 D1:C940 FE D0 -  -  	cp	tElse
  416 D1:C942 C0 -  -  -  	ret	nz
  417 D1:C943 CD 99 AA D1 	call	ParseProgramUntilEnd
  418 D1:C947 FE D0 -  -  	cp	tElse
  419 D1:C949 CA 40 AF D1 	jp	z, ErrorSyntax
  420 D1:C94D C9 -  -  -  	ret
  421 D1:C94E -  -  -  -  	
  422 D1:C94E -  -  -  -  functionWhile:
  423 D1:C94E 21 7F EA D1 	ld	hl, amountOfEnds
  424 D1:C952 34 -  -  -  	inc	(hl)
  425 D1:C953 CD 28 10 02 	call	_IncFetch
  426 D1:C957 DA 40 AF D1 	jp	c, ErrorSyntax
  427 D1:C95B FE 3F -  -  	cp	tEnter
  428 D1:C95D CA 40 AF D1 	jp	z, ErrorSyntax
  429 D1:C961 2A 62 EA D1 	ld	hl, (programPtr)
  430 D1:C965 E5 -  -  -  	push	hl
  431 D1:C966 CD CD B2 D1 		call	ParseExpression
  432 D1:C96A FD CB C0 66 		bit	output_is_number, (iy+fExpression1)
  433 D1:C96E 20 6A -  -  		jr	nz, functionWhileInfinite
  434 D1:C970 FD CB C0 6E 		bit	ans_set_z_flag, (iy+fExpression1)
  435 D1:C974 28 14 -  -  		jr	z, +_
  436 D1:C976 2A 62 EA D1 		ld	hl, (programPtr)
  437 D1:C97A 2B -  -  -  		dec	hl
  438 D1:C97B 2B -  -  -  		dec	hl
  439 D1:C97C 2B -  -  -  		dec	hl
  440 D1:C97D 7E -  -  -  		ld	a, (hl)
  441 D1:C97E C6 A2 -  -  		add	a, 0A2h
  442 D1:C980 2B -  -  -  		dec	hl
  443 D1:C981 2B -  -  -  		dec	hl
  444 D1:C982 2B -  -  -  		dec	hl
  445 D1:C983 2B -  -  -  		dec	hl
  446 D1:C984 22 62 EA D1 		ld	(programPtr), hl
  447 D1:C988 18 1F -  -  		jr	InsertNormalWhile
  448 D1:C98A FD CB BF 4E _:		bit	last_token_was_not, (iy+fExpression2)
  449 D1:C98E 28 0D -  -  		jr	z, InsertNormalWhile2
  450 D1:C990 2A 62 EA D1 		ld	hl, (programPtr)
  451 D1:C994 11 F8 FF FF 		ld	de, -8
  452 D1:C998 19 -  -  -  		add	hl, de
  453 D1:C999 22 62 EA D1 		ld	(programPtr), hl
  454 D1:C99D -  -  -  -  InsertNormalWhile2:
  455 D1:C99D 3E 19 -  -  		ld	a, 019h
  456 D1:C99F 21 B7 ED 52 		ld	hl, 052EDB7h
  457 D1:C9A3 CD 4C AC D1 		call	InsertAHL														;	add hl, de \ or a \ sbc hl, de
  458 D1:C9A7 3E CA -  -  		ld	a, 0CAh
  459 D1:C9A9 -  -  -  -  InsertNormalWhile:
  460 D1:C9A9 FD CB BF 4E 		bit	last_token_was_not, (iy+fExpression2)
  461 D1:C9AD 28 02 -  -  		jr	z, $+4
  462 D1:C9AF EE 08 -  -  		xor	8
  463 D1:C9B1 CD 1B AD D1 		call	InsertA														;	jp z, ******
  464 D1:C9B5 2A 62 EA D1 		ld	hl, (programPtr)
  465 D1:C9B9 E5 -  -  -  		push	hl
  466 D1:C9BA CD 50 AC D1 			call	InsertHL													;	jp z, ******
  467 D1:C9BE CD 99 AA D1 			call	ParseProgramUntilEnd
  468 D1:C9C2 FE D0 -  -  			cp	tElse
  469 D1:C9C4 CA 40 AF D1 			jp	z, ErrorSyntax
  470 D1:C9C8 3E C3 -  -  			ld	a, 0C3h
  471 D1:C9CA D1 -  -  -  		pop	de
  472 D1:C9CB E1 -  -  -  	pop	hl
  473 D1:C9CC 01 81 7C FC 	ld	bc, UserMem - program
  474 D1:C9D0 09 -  -  -  	add	hl, bc
  475 D1:C9D1 CD 4C AC D1 	call	InsertAHL															;	jp XXXXXX
  476 D1:C9D5 09 -  -  -  	add	hl, bc
  477 D1:C9D6 EB -  -  -  	ex	de, hl
  478 D1:C9D7 ED 1F -  -  	ld	(hl), de
  479 D1:C9D9 C9 -  -  -  	ret
  480 D1:C9DA -  -  -  -  functionWhileInfinite:
  481 D1:C9DA 2A 62 EA D1 		ld	hl, (programPtr)
  482 D1:C9DE 2B -  -  -  		dec	hl
  483 D1:C9DF 2B -  -  -  		dec	hl
  484 D1:C9E0 2B -  -  -  		dec	hl
  485 D1:C9E1 2B -  -  -  		dec	hl
  486 D1:C9E2 22 62 EA D1 		ld	(programPtr), hl
  487 D1:C9E6 23 -  -  -  		inc	hl
  488 D1:C9E7 ED 27 -  -  		ld	hl, (hl)
  489 D1:C9E9 19 -  -  -  		add	hl, de
  490 D1:C9EA B7 -  -  -  		or	a
  491 D1:C9EB ED 52 -  -  		sbc	hl, de
  492 D1:C9ED 28 16 -  -  		jr	z, +_
  493 D1:C9EF CD 99 AA D1 		call	ParseProgramUntilEnd
  494 D1:C9F3 FE D0 -  -  		cp	tElse
  495 D1:C9F5 CA 40 AF D1 		jp	z, ErrorSyntax
  496 D1:C9F9 3E C3 -  -  		ld	a, 0C3h
  497 D1:C9FB E1 -  -  -  	pop	hl
  498 D1:C9FC 01 81 7C FC 	ld	bc, UserMem - program
  499 D1:CA00 09 -  -  -  	add	hl, bc
  500 D1:CA01 C3 4C AC D1 	jp	InsertAHL															;	jp XXXXXX
  501 D1:CA05 CD 99 AA D1 _:		call	ParseProgramUntilEnd
  502 D1:CA09 FE D0 -  -  		cp	tElse
  503 D1:CA0B CA 40 AF D1 		jp	z, ErrorSyntax
  504 D1:CA0F E1 -  -  -  	pop	hl
  505 D1:CA10 22 62 EA D1 	ld	(programPtr), hl
  506 D1:CA14 C9 -  -  -  	ret
  507 D1:CA15 -  -  -  -  	
  508 D1:CA15 -  -  -  -  functionClrHome:
  509 D1:CA15 CD C0 0F 02 	call	_NxtFetch
  510 D1:CA19 38 06 -  -  	jr	c, +_
  511 D1:CA1B FE 3F -  -  	cp	tEnter
  512 D1:CA1D C2 40 AF D1 	jp	nz, ErrorSyntax
  513 D1:CA21 21 28 08 02 _:	ld	hl, _HomeUp
  514 D1:CA25 CD 6E AC D1 	call	InsertCallHL														;	call _HomeUp
  515 D1:CA29 21 08 08 02 	ld	hl, _ClrLCDFull
  516 D1:CA2D C3 4C AC D1 	jp	InsertAHL															;	call _ClrLCDFull
  517 D1:CA31 -  -  -  -  	
  518 D1:CA31 -  -  -  -  functionPause:
  519 D1:CA31 CD 28 10 02 	call	_IncFetch
  520 D1:CA35 38 59 -  -  	jr	c, ++_
  521 D1:CA37 FE 3F -  -  	cp	tEnter
  522 D1:CA39 28 55 -  -  	jr	z, ++_
  523 D1:CA3B CD CD B2 D1 	call	ParseExpression
  524 D1:CA3F 3A 81 EA D1 	ld	a, (amountOfPause)
  525 D1:CA43 3D -  -  -  	dec	a
  526 D1:CA44 CA CA CA D1 	jp	z, functionPauseOnce
  527 D1:CA48 FD CB D0 66 	bit	has_already_pause, (iy+fProgram1)
  528 D1:CA4C 20 54 -  -  	jr	nz, AddPause
  529 D1:CA4E 3E CD -  -  	ld	a, 0CDh
  530 D1:CA50 CD 1B AD D1 	call	InsertA															;	call *
  531 D1:CA54 CD 32 AD D1 	call	InsertProgramPtrToDataOffset
  532 D1:CA58 2A 77 EA D1 	ld	hl, (programDataDataPtr)
  533 D1:CA5C 22 27 EA D0 	ld	(PauseStartData), hl
  534 D1:CA60 E5 -  -  -  	push	hl
  535 D1:CA61 D1 -  -  -  	pop	de
  536 D1:CA62 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  537 D1:CA66 28 10 -  -  	jr	z, +_
  538 D1:CA68 E5 -  -  -  	push	hl
  539 D1:CA69 2A 62 EA D1 		ld	hl, (programPtr)
  540 D1:CA6D 2B -  -  -  		dec	hl
  541 D1:CA6E 2B -  -  -  		dec	hl
  542 D1:CA6F 2B -  -  -  		dec	hl
  543 D1:CA70 2B -  -  -  		dec	hl
  544 D1:CA71 ED 07 -  -  		ld	bc, (hl)
  545 D1:CA73 0B -  -  -  		dec	bc
  546 D1:CA74 ED 0F -  -  		ld	(hl), bc
  547 D1:CA76 E1 -  -  -  	pop	hl
  548 D1:CA77 23 -  -  -  	inc	hl
  549 D1:CA78 CD 50 AC D1 _:	call	InsertHL															;	call *
  550 D1:CA7C 21 B3 EE D1 	ld	hl, PauseRoutine
  551 D1:CA80 01 13 00 00 	ld	bc, PauseRoutineEnd - PauseRoutine
  552 D1:CA84 ED B0 -  -  	ldir
  553 D1:CA86 ED 53 77 EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
  554 D1:CA8B FD CB D0 E6 	set	has_already_pause, (iy+fProgram1)
  555 D1:CA8F C9 -  -  -  	ret
  556 D1:CA90 21 4C 01 02 _:	ld	hl, _GetCSC
  557 D1:CA94 CD 6E AC D1 	call	InsertCallHL														;	call _GetCSC
  558 D1:CA98 3E FE -  -  	ld	a, 0FEh
  559 D1:CA9A 21 09 20 F8 	ld	hl, 0F82009h
  560 D1:CA9E C3 4C AC D1 	jp	InsertAHL															;	cp tEnter \ jr nz, $-9
  561 D1:CAA2 -  -  -  -  AddPause:
  562 D1:CAA2 3E CD -  -  	ld	a, 0CDh
  563 D1:CAA4 CD 1B AD D1 	call	InsertA															;	call ******
  564 D1:CAA8 CD 32 AD D1 	call	InsertProgramPtrToDataOffset
  565 D1:CAAC 2A 27 EA D0 	ld	hl, (PauseStartData)
  566 D1:CAB0 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  567 D1:CAB4 28 10 -  -  	jr	z, +_
  568 D1:CAB6 E5 -  -  -  	push	hl
  569 D1:CAB7 2A 62 EA D1 		ld	hl, (programPtr)
  570 D1:CABB 2B -  -  -  		dec	hl
  571 D1:CABC 2B -  -  -  		dec	hl
  572 D1:CABD 2B -  -  -  		dec	hl
  573 D1:CABE 2B -  -  -  		dec	hl
  574 D1:CABF ED 17 -  -  		ld	de, (hl)
  575 D1:CAC1 1B -  -  -  		dec	de
  576 D1:CAC2 ED 1F -  -  		ld	(hl), de
  577 D1:CAC4 E1 -  -  -  	pop	hl
  578 D1:CAC5 23 -  -  -  	inc	hl
  579 D1:CAC6 C3 50 AC D1 _:	jp	InsertHL																;	call XXXXXX
  580 D1:CACA -  -  -  -  functionPauseOnce:
  581 D1:CACA ED 5B 62 EA 
              D1 -  -  -  	ld	de, (programPtr)
  582 D1:CACF 21 B3 EE D1 	ld	hl, PauseRoutine
  583 D1:CAD3 01 13 00 00 	ld	bc, PauseRoutineEnd - PauseRoutine
  584 D1:CAD7 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  585 D1:CADB 28 11 -  -  	jr	z, +_
  586 D1:CADD DD 2A 62 EA 
              D1 -  -  -  	ld	ix, (programPtr)
  587 D1:CAE2 DD 17 FD -  	ld	de, (ix-3)
  588 D1:CAE5 1B -  -  -  	dec	de
  589 D1:CAE6 DD 1F FD -  	ld	(ix-3), de
  590 D1:CAE9 ED 12 00 -  	lea	de, ix
  591 D1:CAEC 23 -  -  -  	inc	hl
  592 D1:CAED 0B -  -  -  	dec	bc
  593 D1:CAEE ED B0 -  -  _:	ldir
  594 D1:CAF0 1B -  -  -  	dec	de
  595 D1:CAF1 ED 53 62 EA 
              D1 -  -  -  	ld	(programPtr), de
  596 D1:CAF6 C9 -  -  -  	ret
  597 D1:CAF7 -  -  -  -  	
  598 D1:CAF7 -  -  -  -  functionInput:
  599 D1:CAF7 CD A4 AC D1 	call	MaybeInsertIYFlags
  600 D1:CAFB CD 28 10 02 	call	_IncFetch
  601 D1:CAFF FE 41 -  -  	cp	tA
  602 D1:CB01 DA 40 AF D1 	jp	c, ErrorSyntax
  603 D1:CB05 FE 5C -  -  	cp	ttheta+1
  604 D1:CB07 D2 40 AF D1 	jp	nc, ErrorSyntax
  605 D1:CB0B CD C0 0F 02 	call	_NxtFetch
  606 D1:CB0F 38 06 -  -  	jr	c, +_
  607 D1:CB11 FE 3F -  -  	cp	tEnter
  608 D1:CB13 C2 40 AF D1 	jp	nz, ErrorSyntax
  609 D1:CB17 3A 80 EA D1 _:	ld	a, (amountOfInput)
  610 D1:CB1B 3D -  -  -  	dec	a
  611 D1:CB1C 28 79 -  -  	jr	z, functionInputOnce
  612 D1:CB1E 3E 3E -  -  	ld	a, 03Eh
  613 D1:CB20 CD 1B AD D1 	call	InsertA															;	ld a, **
  614 D1:CB24 CD 2C 10 02 	call	_CurFetch
  615 D1:CB28 D6 41 -  -  	sub	tA
  616 D1:CB2A 47 -  -  -  	ld	b, a
  617 D1:CB2B 87 -  -  -  	add	a, a
  618 D1:CB2C 80 -  -  -  	add	a, b
  619 D1:CB2D CD 1B AD D1 	call	InsertA															;	ld a, XX
  620 D1:CB31 3E 32 -  -  	ld	a, 032h
  621 D1:CB33 CD 1B AD D1 	call	InsertA															;	ld (******), a
  622 D1:CB37 CD 32 AD D1 	call	InsertProgramPtrToDataOffset
  623 D1:CB3B FD CB D0 56 	bit	has_already_input, (iy+fProgram1)
  624 D1:CB3F 20 39 -  -  	jr	nz, AddPointerToInput
  625 D1:CB41 2A 77 EA D1 	ld	hl, (programDataDataPtr)
  626 D1:CB45 22 21 EA D0 	ld	(InputStartData), hl
  627 D1:CB49 01 3D 00 00 	ld	bc, InputOffset-InputRoutine
  628 D1:CB4D 09 -  -  -  	add	hl, bc
  629 D1:CB4E CD 50 AC D1 	call	InsertHL															;	ld (XXXXXX), a
  630 D1:CB52 3E CD -  -  	ld	a, 0CDh
  631 D1:CB54 CD 1B AD D1 	call	InsertA															;	call ******
  632 D1:CB58 CD 32 AD D1 	call	InsertProgramPtrToDataOffset
  633 D1:CB5C 2A 77 EA D1 	ld	hl, (programDataDataPtr)
  634 D1:CB60 E5 -  -  -  	push	hl
  635 D1:CB61 D1 -  -  -  	pop	de
  636 D1:CB62 CD 50 AC D1 	call	InsertHL															;	call XXXXXX
  637 D1:CB66 21 20 EE D1 _:	ld	hl, InputRoutine
  638 D1:CB6A 01 42 00 00 	ld	bc, InputRoutineEnd-InputRoutine
  639 D1:CB6E ED B0 -  -  	ldir
  640 D1:CB70 ED 53 77 EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
  641 D1:CB75 FD CB D0 D6 	set	has_already_input, (iy+fProgram1)
  642 D1:CB79 C9 -  -  -  	ret
  643 D1:CB7A -  -  -  -  AddPointerToInput:
  644 D1:CB7A 2A 21 EA D0 	ld	hl, (InputStartData)
  645 D1:CB7E E5 -  -  -  	push	hl
  646 D1:CB7F 01 3D 00 00 		ld	bc, InputOffset-InputRoutine
  647 D1:CB83 09 -  -  -  		add	hl, bc
  648 D1:CB84 CD 50 AC D1 		call	InsertHL														;	ld (XXXXXX), a
  649 D1:CB88 3E CD -  -  		ld	a, 0CDh
  650 D1:CB8A CD 1B AD D1 		call	InsertA														;	call ******
  651 D1:CB8E CD 32 AD D1 		call	InsertProgramPtrToDataOffset
  652 D1:CB92 E1 -  -  -  	pop	hl
  653 D1:CB93 C3 50 AC D1 	jp	InsertHL																;	call XXXXXX
  654 D1:CB97 -  -  -  -  functionInputOnce:
  655 D1:CB97 CD 2C 10 02 	call	_CurFetch
  656 D1:CB9B D6 41 -  -  	sub	tA
  657 D1:CB9D 47 -  -  -  	ld	b, a
  658 D1:CB9E 87 -  -  -  	add	a, a
  659 D1:CB9F 80 -  -  -  	add	a, b
  660 D1:CBA0 32 5D EE D1 	ld	(InputOffset), a
  661 D1:CBA4 ED 5B 62 EA 
              D1 -  -  -  	ld	de, (programPtr)
  662 D1:CBA9 21 20 EE D1 	ld	hl, InputRoutine
  663 D1:CBAD 01 42 00 00 	ld	bc, InputRoutineEnd - InputRoutine
  664 D1:CBB1 ED B0 -  -  	ldir
  665 D1:CBB3 D5 -  -  -  	push	de
  666 D1:CBB4 DD E1 -  -  	pop	ix
  667 D1:CBB6 DD 36 FC CD 	ld	(ix-4), 0CDh
  668 D1:CBBA ED 53 62 EA 
              D1 -  -  -  	ld	(programPtr), de
  669 D1:CBBF C9 -  -  -  	ret
  670 D1:CBC0 -  -  -  -  	
  671 D1:CBC0 -  -  -  -  functionNot:
  672 D1:CBC0 3E 01 -  -  	ld	a, 1
  673 D1:CBC2 32 7D EA D1 	ld	(amountOfArguments), a
  674 D1:CBC6 FD CB BF CE 	set	last_token_was_not, (iy+fExpression2)
  675 D1:CBCA E5 -  -  -  	push	hl
  676 D1:CBCB DD E1 -  -  	pop	ix
  677 D1:CBCD DD 7E FC -  	ld	a, (ix-4)
  678 D1:CBD0 B7 -  -  -  	or	a
  679 D1:CBD1 28 10 -  -  	jr	z, NotNumber
  680 D1:CBD3 3D -  -  -  	dec	a
  681 D1:CBD4 28 23 -  -  	jr	z, NotVariable
  682 D1:CBD6 3D -  -  -  	dec	a
  683 D1:CBD7 28 36 -  -  	jr	z, NotChainPush
  684 D1:CBD9 3D -  -  -  	dec	a
  685 D1:CBDA 28 37 -  -  	jr	z, NotChainAns
  686 D1:CBDC 3D -  -  -  	dec	a
  687 D1:CBDD 28 48 -  -  	jr	z, NotFunction
  688 D1:CBDF C3 40 AF D1 	jp	ErrorSyntax
  689 D1:CBE3 -  -  -  -  NotNumber:
  690 D1:CBE3 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  691 D1:CBE7 DD 27 FD -  	ld	hl, (ix-3)
  692 D1:CBEA 19 -  -  -  	add	hl, de
  693 D1:CBEB B7 -  -  -  	or	a
  694 D1:CBEC ED 52 -  -  	sbc	hl, de
  695 D1:CBEE 21 00 00 00 	ld	hl, 0
  696 D1:CBF2 20 01 -  -  	jr	nz, +_
  697 D1:CBF4 23 -  -  -  	inc	hl
  698 D1:CBF5 DD 2F FD -  _:	ld	(ix-3), hl
  699 D1:CBF8 C9 -  -  -  	ret
  700 D1:CBF9 -  -  -  -  NotVariable:
  701 D1:CBF9 DD 4E FD -  	ld	c, (ix-3)
  702 D1:CBFC 06 03 -  -  	ld	b, 3
  703 D1:CBFE ED 4C -  -  	mlt	bc
  704 D1:CC00 79 -  -  -  	ld	a, c
  705 D1:CC01 21 DD 27 00 	ld	hl, 00027DDh
  706 D1:CC05 CD 70 1D 02 	call	_SetHLUToA
  707 D1:CC09 CD 50 AC D1 	call	InsertHL															;	ld hl, (ix+*)
  708 D1:CC0D 18 04 -  -  	jr	NotChainAns
  709 D1:CC0F -  -  -  -  NotChainPush:
  710 D1:CC0F C3 7A AF D1 	jp	UnknownError
  711 D1:CC13 -  -  -  -  NotChainAns:
  712 D1:CC13 3E 11 -  -  	ld	a, 011h
  713 D1:CC15 CD 1B AD D1 	call	InsertA															;	ld de, *
  714 D1:CC19 3E FF -  -  	ld	a, 0FFh
  715 D1:CC1B 11 FF FF 19 	ld	de, 019FFFFh
  716 D1:CC1F 21 ED 62 23 	ld	hl, 02362EDh
  717 D1:CC23 C3 98 AC D1 	jp	InsertADEHL															;	ld de, -1 \ add hl, de \ sbc hl, hl \ inc hl
  718 D1:CC27 -  -  -  -  NotFunction:
  719 D1:CC27 DD 7E FD -  	ld	a, (ix-3)
  720 D1:CC2A 06 02 -  -  	ld	b, OutputInHL
  721 D1:CC2C CD 47 AD D1 	call	GetFunction
  722 D1:CC30 18 E1 -  -  	jr	NotChainAns
  723 D1:CC32 -  -  -  -  	
  724 D1:CC32 -  -  -  -  functionCE:
  725 D1:CC32 23 -  -  -  	inc	hl
  726 D1:CC33 23 -  -  -  	inc	hl
  727 D1:CC34 7E -  -  -  	ld	a, (hl)
  728 D1:CC35 FE 32 -  -  	cp	tRemainder
  729 D1:CC37 C2 40 AF D1 	jp	nz, ErrorSyntax
  730 D1:CC3B 11 F6 FF FF 	ld	de, -10
  731 D1:CC3F 19 -  -  -  	add	hl, de
  732 D1:CC40 -  -  -  -  		
  733 D1:CC40 -  -  -  -  functionRemainder:
  734 D1:CC40 3E 02 -  -  	ld	a, 2
  735 D1:CC42 32 7D EA D1 	ld	(amountOfArguments), a
  736 D1:CC46 7E -  -  -  	ld	a, (hl)
  737 D1:CC47 DD 67 -  -  	ld	ixh, a
  738 D1:CC49 23 -  -  -  	inc	hl
  739 D1:CC4A E5 -  -  -  	push	hl
  740 D1:CC4B ED 07 -  -  		ld	bc, (hl)
  741 D1:CC4D 23 -  -  -  		inc	hl
  742 D1:CC4E 23 -  -  -  		inc	hl
  743 D1:CC4F 23 -  -  -  		inc	hl
  744 D1:CC50 7E -  -  -  		ld	a, (hl)
  745 D1:CC51 DD 6F -  -  		ld	ixl, a
  746 D1:CC53 23 -  -  -  		inc	hl
  747 D1:CC54 ED 17 -  -  		ld	de, (hl)
  748 D1:CC56 E1 -  -  -  	pop	hl
  749 D1:CC57 DD 7C -  -  	ld	a, ixh
  750 D1:CC59 B7 -  -  -  	or	a
  751 D1:CC5A 28 18 -  -  	jr	z, RemainderNumberXXX
  752 D1:CC5C 3D -  -  -  	dec	a
  753 D1:CC5D CA D4 CC D1 	jp	z, RemainderVariableXXX
  754 D1:CC61 3D -  -  -  	dec	a
  755 D1:CC62 CA 1A CD D1 	jp	z, RemainderChainPushXXX
  756 D1:CC66 3D -  -  -  	dec	a
  757 D1:CC67 CA 2C CD D1 	jp	z, RemainderChainAnsXXX
  758 D1:CC6B 3D -  -  -  	dec	a
  759 D1:CC6C CA 6B CD D1 	jp	z, RemainderFunctionXXX
  760 D1:CC70 C3 40 AF D1 	jp	ErrorSyntax
  761 D1:CC74 -  -  -  -  RemainderNumberXXX:
  762 D1:CC74 DD 7D -  -  	ld	a, ixl
  763 D1:CC76 B7 -  -  -  	or	a
  764 D1:CC77 28 10 -  -  	jr	z, RemainderNumberNumber
  765 D1:CC79 3D -  -  -  	dec	a
  766 D1:CC7A 28 1F -  -  	jr	z, RemainderNumberVariable
  767 D1:CC7C 3D -  -  -  	dec	a
  768 D1:CC7D 28 28 -  -  	jr	z, RemainderNumberChainPush
  769 D1:CC7F 3D -  -  -  	dec	a
  770 D1:CC80 28 29 -  -  	jr	z, RemainderNumberChainAns
  771 D1:CC82 3D -  -  -  	dec	a
  772 D1:CC83 28 38 -  -  	jr	z, RemainderNumberFunction
  773 D1:CC85 C3 40 AF D1 	jp	ErrorSyntax
  774 D1:CC89 -  -  -  -  RemainderNumberNumber:
  775 D1:CC89 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  776 D1:CC8D E5 -  -  -  	push	hl
  777 D1:CC8E C5 -  -  -  		push	bc
  778 D1:CC8F E1 -  -  -  		pop	hl
  779 D1:CC90 D5 -  -  -  		push	de
  780 D1:CC91 C1 -  -  -  		pop	bc
  781 D1:CC92 CD 44 01 00 		call	__idvrmu
  782 D1:CC96 EB -  -  -  		ex	de, hl
  783 D1:CC97 E1 -  -  -  	pop	hl
  784 D1:CC98 ED 1F -  -  	ld	(hl), de
  785 D1:CC9A C9 -  -  -  	ret
  786 D1:CC9B -  -  -  -  RemainderNumberVariable:
  787 D1:CC9B 3E 21 -  -  	ld	a, 021h
  788 D1:CC9D C5 -  -  -  	push	bc
  789 D1:CC9E E1 -  -  -  	pop	hl
  790 D1:CC9F CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  791 D1:CCA3 C3 50 CD D1 	jp	RemainderChainAnsVariable
  792 D1:CCA7 -  -  -  -  RemainderNumberChainPush:
  793 D1:CCA7 C3 7A AF D1 	jp	UnknownError
  794 D1:CCAB -  -  -  -  RemainderNumberChainAns:
  795 D1:CCAB 11 E5 C1 21 	ld	de, 021C1E5h
  796 D1:CCAF C5 -  -  -  	push	bc
  797 D1:CCB0 E1 -  -  -  	pop	hl
  798 D1:CCB1 CD 9C AC D1 	call	InsertDEHL															;	push hl \ pop bc \ ld hl, *
  799 D1:CCB5 21 44 01 00 	ld	hl, __idvrmu
  800 D1:CCB9 C3 6E AC D1 	jp	InsertCallHL															;	call __idvrmu
  801 D1:CCBD -  -  -  -  RemainderNumberFunction:
  802 D1:CCBD 7B -  -  -  	ld	a, e
  803 D1:CCBE C5 -  -  -  	push	bc
  804 D1:CCBF 06 00 -  -  		ld	b, OutputInBC
  805 D1:CCC1 CD 47 AD D1 		call	GetFunction
  806 D1:CCC5 E1 -  -  -  	pop	hl
  807 D1:CCC6 3E 21 -  -  	ld	a, 021h
  808 D1:CCC8 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  809 D1:CCCC 21 44 01 00 	ld	hl, __idvrmu
  810 D1:CCD0 C3 6E AC D1 	jp	InsertCallHL															;	call __idvrmu
  811 D1:CCD4 -  -  -  -  RemainderVariableXXX:
  812 D1:CCD4 DD 7D -  -  	ld	a, ixl
  813 D1:CCD6 B7 -  -  -  	or	a
  814 D1:CCD7 28 10 -  -  	jr	z, RemainderVariableNumber
  815 D1:CCD9 3D -  -  -  	dec	a
  816 D1:CCDA 28 13 -  -  	jr	z, RemainderVariableVariable
  817 D1:CCDC 3D -  -  -  	dec	a
  818 D1:CCDD 28 16 -  -  	jr	z, RemainderVariableChainPush
  819 D1:CCDF 3D -  -  -  	dec	a
  820 D1:CCE0 28 17 -  -  	jr	z, RemainderVariableChainAns
  821 D1:CCE2 3D -  -  -  	dec	a
  822 D1:CCE3 28 2C -  -  	jr	z, RemainderVariableFunction
  823 D1:CCE5 C3 40 AF D1 	jp	ErrorSyntax
  824 D1:CCE9 -  -  -  -  RemainderVariableNumber:
  825 D1:CCE9 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  826 D1:CCED 18 52 -  -  	jr	RemainderChainAnsNumber
  827 D1:CCEF -  -  -  -  RemainderVariableVariable
  828 D1:CCEF CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  829 D1:CCF3 18 5B -  -  	jr	RemainderChainAnsVariable
  830 D1:CCF5 -  -  -  -  RemainderVariableChainPush:
  831 D1:CCF5 C3 7A AF D1 	jp	UnknownError
  832 D1:CCF9 -  -  -  -  RemainderVariableChainAns:
  833 D1:CCF9 3E E5 -  -  	ld	a, 0E5h
  834 D1:CCFB CD 1B AD D1 	call	InsertA															;	push hl
  835 D1:CCFF 3E C1 -  -  	ld	a, 0C1h
  836 D1:CD01 CD 1B AD D1 	call	InsertA															;	pop bc
  837 D1:CD05 CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  838 D1:CD09 21 44 01 00 	ld	hl, __idvrmu
  839 D1:CD0D C3 6E AC D1 	jp	InsertCallHL															;	call __idvrmu
  840 D1:CD11 -  -  -  -  RemainderVariableFunction:
  841 D1:CD11 7B -  -  -  	ld	a, e
  842 D1:CD12 06 00 -  -  	ld	b, OutputInBC
  843 D1:CD14 CD 47 AD D1 	call	GetFunction
  844 D1:CD18 18 EB -  -  	jr	-_
  845 D1:CD1A -  -  -  -  RemainderChainPushXXX:
  846 D1:CD1A DD 7D -  -  	ld	a, ixl
  847 D1:CD1C FE 03 -  -  	cp	typeChainAns
  848 D1:CD1E C2 7A AF D1 	jp	nz, UnknownError
  849 D1:CD22 21 E5 C1 E1 	ld	hl, 0E1C1E5h
  850 D1:CD26 CD 4C AC D1 	call	InsertAHL															;	push hl \ pop bc \ pop hl
  851 D1:CD2A 18 1C -  -  	jr	+_
  852 D1:CD2C -  -  -  -  RemainderChainAnsXXX:
  853 D1:CD2C DD 7D -  -  	ld	a, ixl
  854 D1:CD2E B7 -  -  -  	or	a
  855 D1:CD2F 28 10 -  -  	jr	z, RemainderChainAnsNumber
  856 D1:CD31 3D -  -  -  	dec	a
  857 D1:CD32 28 1C -  -  	jr	z, RemainderChainAnsVariable
  858 D1:CD34 3D -  -  -  	dec	a
  859 D1:CD35 28 1F -  -  	jr	z, RemainderChainAnsChainPush
  860 D1:CD37 3D -  -  -  	dec	a
  861 D1:CD38 28 20 -  -  	jr	z, RemainderChainAnsChainAns
  862 D1:CD3A 3D -  -  -  	dec	a
  863 D1:CD3B 28 21 -  -  	jr	z, RemainderChainAnsFunction
  864 D1:CD3D C3 40 AF D1 	jp	ErrorSyntax
  865 D1:CD41 -  -  -  -  RemainderChainAnsNumber:
  866 D1:CD41 EB -  -  -  	ex	de, hl
  867 D1:CD42 3E 01 -  -  	ld	a, 001h
  868 D1:CD44 CD 4C AC D1 	call	InsertAHL															;	ld bc, *
  869 D1:CD48 21 44 01 00 _:	ld	hl, __idvrmu
  870 D1:CD4C C3 6E AC D1 	jp	InsertCallHL															;	call __idvrmu
  871 D1:CD50 -  -  -  -  RemainderChainAnsVariable:
  872 D1:CD50 CD 8A AC D1 	call	InsertIXC															;	ld bc, (ix+*)
  873 D1:CD54 18 F2 -  -  	jr	-_
  874 D1:CD56 -  -  -  -  RemainderChainAnsChainPush:
  875 D1:CD56 C3 7A AF D1 	jp	UnknownError
  876 D1:CD5A -  -  -  -  RemainderChainAnsChainAns:
  877 D1:CD5A C3 7A AF D1 	jp	UnknownError
  878 D1:CD5E -  -  -  -  RemainderChainAnsFunction:
  879 D1:CD5E 7B -  -  -  	ld	a, e
  880 D1:CD5F 06 00 -  -  	ld	b, OutputInBC
  881 D1:CD61 FD CB C0 F6 	set	need_push, (iy+fExpression1)
  882 D1:CD65 CD 47 AD D1 	call	GetFunction
  883 D1:CD69 18 DD -  -  	jr	-_
  884 D1:CD6B -  -  -  -  RemainderFunctionXXX:
  885 D1:CD6B DD 7D -  -  	ld	a, ixl
  886 D1:CD6D B7 -  -  -  	or	a
  887 D1:CD6E 28 10 -  -  	jr	z, RemainderFunctionNumber
  888 D1:CD70 3D -  -  -  	dec	a
  889 D1:CD71 28 16 -  -  	jr	z, RemainderFunctionVariable
  890 D1:CD73 3D -  -  -  	dec	a
  891 D1:CD74 28 1C -  -  	jr	z, RemainderFunctionChainPush
  892 D1:CD76 3D -  -  -  	dec	a
  893 D1:CD77 28 1D -  -  	jr	z, RemainderFunctionChainAns
  894 D1:CD79 3D -  -  -  	dec	a
  895 D1:CD7A 28 2F -  -  	jr	z, RemainderFunctionFunction
  896 D1:CD7C C3 40 AF D1 	jp	ErrorSyntax
  897 D1:CD80 -  -  -  -  RemainderFunctionNumber:
  898 D1:CD80 79 -  -  -  	ld	a, c
  899 D1:CD81 06 02 -  -  	ld	b, OutputInHL
  900 D1:CD83 CD 47 AD D1 	call	GetFunction
  901 D1:CD87 18 B8 -  -  	jr	RemainderChainAnsNumber
  902 D1:CD89 -  -  -  -  RemainderFunctionVariable:
  903 D1:CD89 79 -  -  -  	ld	a, c
  904 D1:CD8A 06 02 -  -  	ld	b, OutputInHL
  905 D1:CD8C CD 47 AD D1 	call	GetFunction
  906 D1:CD90 18 BE -  -  	jr	RemainderChainAnsVariable
  907 D1:CD92 -  -  -  -  RemainderFunctionChainPush:
  908 D1:CD92 C3 7A AF D1 	jp	UnknownError
  909 D1:CD96 -  -  -  -  RemainderFunctionChainAns:
  910 D1:CD96 3E E5 -  -  	ld	a, 0E5h
  911 D1:CD98 CD 1B AD D1 	call	InsertA														;	push hl
  912 D1:CD9C 3E C1 -  -  	ld	a, 0C1h
  913 D1:CD9E CD 1B AD D1 	call	InsertA														;	pop bc
  914 D1:CDA2 79 -  -  -  	ld	a, c
  915 D1:CDA3 06 02 -  -  	ld	b, OutputInHL
  916 D1:CDA5 CD 47 AD D1 	call	GetFunction
  917 D1:CDA9 18 9D -  -  	jr	-_
  918 D1:CDAB -  -  -  -  RemainderFunctionFunction:
  919 D1:CDAB 7B -  -  -  	ld	a, e
  920 D1:CDAC 06 00 -  -  	ld	b, OutputInBC
  921 D1:CDAE CD 47 AD D1 	call	GetFunction
  922 D1:CDB2 79 -  -  -  	ld	a, c
  923 D1:CDB3 06 02 -  -  	ld	b, OutputInHL
  924 D1:CDB5 CD 47 AD D1 	call	GetFunction
  925 D1:CDB9 18 8D -  -  	jr	-_
  926 D1:CDBB -  -  -  -  	
  927 D1:CDBB -  -  -  -  functionMean:
  928 D1:CDBB FD CB BF C6 	set	use_mean_routine, (iy+fExpression2)
  929 D1:CDBF -  -  -  -  functionMax:
  930 D1:CDBF 3E 30 -  -  	ld	a, 030h
  931 D1:CDC1 18 02 -  -  	jr	+_
  932 D1:CDC3 -  -  -  -  functionMin:
  933 D1:CDC3 3E 38 -  -  	ld	a, 038h
  934 D1:CDC5 32 02 CF D1 _:	ld	(MaxMinMeanInsertSMC), a
  935 D1:CDC9 3E 02 -  -  	ld	a, 2
  936 D1:CDCB 32 7D EA D1 	ld	(amountOfArguments), a
  937 D1:CDCF 2B -  -  -  	dec	hl
  938 D1:CDD0 2B -  -  -  	dec	hl
  939 D1:CDD1 2B -  -  -  	dec	hl
  940 D1:CDD2 ED 17 -  -  	ld	de, (hl)
  941 D1:CDD4 2B -  -  -  	dec	hl
  942 D1:CDD5 7E -  -  -  	ld	a, (hl)
  943 D1:CDD6 DD 6F -  -  	ld	ixl, a
  944 D1:CDD8 2B -  -  -  	dec	hl
  945 D1:CDD9 2B -  -  -  	dec	hl
  946 D1:CDDA 2B -  -  -  	dec	hl
  947 D1:CDDB ED 07 -  -  	ld	bc, (hl)
  948 D1:CDDD 2B -  -  -  	dec	hl
  949 D1:CDDE 7E -  -  -  	ld	a, (hl)
  950 D1:CDDF 23 -  -  -  	inc	hl
  951 D1:CDE0 B7 -  -  -  	or	a
  952 D1:CDE1 28 18 -  -  	jr	z, MaxMinMeanNumberXXX
  953 D1:CDE3 3D -  -  -  	dec	a
  954 D1:CDE4 CA 6A CE D1 	jp	z, MaxMinMeanVariableXXX
  955 D1:CDE8 3D -  -  -  	dec	a
  956 D1:CDE9 CA B3 CE D1 	jp	z, MaxMinMeanChainPushXXX
  957 D1:CDED 3D -  -  -  	dec	a
  958 D1:CDEE CA D7 CE D1 	jp	z, MaxMinMeanChainAnsXXX
  959 D1:CDF2 3D -  -  -  	dec	a
  960 D1:CDF3 CA 24 CF D1 	jp	z, MaxMinMeanFunctionXXX
  961 D1:CDF7 C3 40 AF D1 	jp	ErrorSyntax
  962 D1:CDFB -  -  -  -  MaxMinMeanNumberXXX:
  963 D1:CDFB DD 7D -  -  	ld	a, ixl
  964 D1:CDFD B7 -  -  -  	or	a
  965 D1:CDFE 28 10 -  -  	jr	z, MaxMinMeanNumberNumber
  966 D1:CE00 3D -  -  -  	dec	a
  967 D1:CE01 28 4B -  -  	jr	z, MaxMinMeanNumberVariable
  968 D1:CE03 3D -  -  -  	dec	a
  969 D1:CE04 28 4F -  -  	jr	z, MaxMinMeanNumberChainPush
  970 D1:CE06 3D -  -  -  	dec	a
  971 D1:CE07 28 50 -  -  	jr	z, MaxMinMeanNumberChainAns
  972 D1:CE09 3D -  -  -  	dec	a
  973 D1:CE0A 28 51 -  -  	jr	z, MaxMinMeanNumberFunction
  974 D1:CE0C C3 40 AF D1 	jp	ErrorSyntax
  975 D1:CE10 -  -  -  -  MaxMinMeanNumberNumber:
  976 D1:CE10 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  977 D1:CE14 E5 -  -  -  	push	hl
  978 D1:CE15 FD CB BF 46 		bit	use_mean_routine, (iy+fExpression2)
  979 D1:CE19 20 1C -  -  		jr	nz, ++_
  980 D1:CE1B 3A 02 CF D1 		ld	a, (MaxMinMeanInsertSMC)
  981 D1:CE1F C5 -  -  -  		push	bc
  982 D1:CE20 E1 -  -  -  		pop	hl
  983 D1:CE21 FE 30 -  -  		cp	030h
  984 D1:CE23 28 09 -  -  		jr	z, +_
  985 D1:CE25 B7 -  -  -  		or	a
  986 D1:CE26 ED 52 -  -  		sbc	hl, de
  987 D1:CE28 19 -  -  -  		add	hl, de
  988 D1:CE29 30 01 -  -  		jr	nc, $+3
  989 D1:CE2B EB -  -  -  		ex	de, hl
  990 D1:CE2C 18 1C -  -  		jr	+++_
  991 D1:CE2E B7 -  -  -  _:		or	a
  992 D1:CE2F ED 52 -  -  		sbc	hl, de
  993 D1:CE31 19 -  -  -  		add	hl, de
  994 D1:CE32 38 01 -  -  		jr	c, $+3
  995 D1:CE34 EB -  -  -  		ex	de, hl
  996 D1:CE35 18 13 -  -  		jr	++_
  997 D1:CE37 EB -  -  -  _:		ex	de, hl
  998 D1:CE38 DD 21 00 00 
              00 -  -  -  		ld	ix, 0
  999 D1:CE3D DD 39 -  -  		add	ix, sp
 1000 D1:CE3F 09 -  -  -  		add	hl, bc
 1001 D1:CE40 E5 -  -  -  		push	hl
 1002 D1:CE41 DD CB FF 1E 			rr	(ix-1)
 1003 D1:CE45 D1 -  -  -  		pop	de
 1004 D1:CE46 CB 1A -  -  		rr	d
 1005 D1:CE48 CB 1B -  -  		rr	e
 1006 D1:CE4A E1 -  -  -  _:	pop	hl
 1007 D1:CE4B ED 1F -  -  	ld	(hl), de
 1008 D1:CE4D C9 -  -  -  	ret
 1009 D1:CE4E -  -  -  -  MaxMinMeanNumberVariable:
 1010 D1:CE4E C5 -  -  -  	push	bc
 1011 D1:CE4F E1 -  -  -  	pop	hl
 1012 D1:CE50 EB -  -  -  	ex	de, hl
 1013 D1:CE51 E5 -  -  -  	push	hl
 1014 D1:CE52 C1 -  -  -  	pop	bc
 1015 D1:CE53 18 2A -  -  	jr	MaxMinMeanVariableNumber
 1016 D1:CE55 -  -  -  -  MaxMinMeanNumberChainPush:
 1017 D1:CE55 C3 7A AF D1 	jp	UnknownError
 1018 D1:CE59 -  -  -  -  MaxMinMeanNumberChainAns:
 1019 D1:CE59 C5 -  -  -  	push	bc
 1020 D1:CE5A D1 -  -  -  	pop	de
 1021 D1:CE5B 18 09 -  -  	jr	+_
 1022 D1:CE5D -  -  -  -  MaxMinMeanNumberFunction:
 1023 D1:CE5D 7B -  -  -  	ld	a, e
 1024 D1:CE5E C5 -  -  -  	push	bc
 1025 D1:CE5F 06 02 -  -  		ld	b, OutputInHL
 1026 D1:CE61 CD 47 AD D1 		call	GetFunction
 1027 D1:CE65 D1 -  -  -  	pop	de
 1028 D1:CE66 C3 EC CE D1 _:	jp	MaxMinMeanChainAnsNumber
 1029 D1:CE6A -  -  -  -  MaxMinMeanVariableXXX:
 1030 D1:CE6A DD 7D -  -  	ld	a, ixl
 1031 D1:CE6C B7 -  -  -  	or	a
 1032 D1:CE6D 28 10 -  -  	jr	z, MaxMinMeanVariableNumber
 1033 D1:CE6F 3D -  -  -  	dec	a
 1034 D1:CE70 28 13 -  -  	jr	z, MaxMinMeanVariableVariable
 1035 D1:CE72 3D -  -  -  	dec	a
 1036 D1:CE73 28 18 -  -  	jr	z, MaxMinMeanVariableChainPush
 1037 D1:CE75 3D -  -  -  	dec	a
 1038 D1:CE76 28 2B -  -  	jr	z, MaxMinMeanVariableChainAns
 1039 D1:CE78 3D -  -  -  	dec	a
 1040 D1:CE79 28 2F -  -  	jr	z, MaxMinMeanVariableFunction
 1041 D1:CE7B C3 40 AF D1 	jp	ErrorSyntax
 1042 D1:CE7F -  -  -  -  MaxMinMeanVariableNumber:
 1043 D1:CE7F CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1044 D1:CE83 18 67 -  -  	jr	MaxMinMeanChainAnsNumber
 1045 D1:CE85 -  -  -  -  MaxMinMeanVariableVariable
 1046 D1:CE85 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1047 D1:CE89 C3 09 CF D1 	jp	MaxMinMeanChainAnsVariable
 1048 D1:CE8D -  -  -  -  MaxMinMeanVariableChainPush:
 1049 D1:CE8D 2A 62 EA D1 	ld	hl, (programPtr)
 1050 D1:CE91 2B -  -  -  	dec	hl
 1051 D1:CE92 7E -  -  -  	ld	a, (hl)
 1052 D1:CE93 FE E5 -  -  	cp	0E5h
 1053 D1:CE95 28 03 -  -  	jr	z, +_
 1054 D1:CE97 36 E1 -  -  	ld	(hl), 0E1h
 1055 D1:CE99 23 -  -  -  	inc	hl
 1056 D1:CE9A 22 62 EA D1 _:	ld	(programPtr), hl
 1057 D1:CE9E 59 -  -  -  	ld	e, c
 1058 D1:CE9F C3 09 CF D1 	jp	MaxMinMeanChainAnsVariable
 1059 D1:CEA3 -  -  -  -  MaxMinMeanVariableChainAns:
 1060 D1:CEA3 59 -  -  -  _:	ld	e, c
 1061 D1:CEA4 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1062 D1:CEA8 18 49 -  -  	jr	MaxMinMeanInsert
 1063 D1:CEAA -  -  -  -  MaxMinMeanVariableFunction:
 1064 D1:CEAA 7B -  -  -  	ld	a, e
 1065 D1:CEAB 06 02 -  -  	ld	b, OutputInHL
 1066 D1:CEAD CD 47 AD D1 	call	GetFunction
 1067 D1:CEB1 18 F0 -  -  	jr	-_
 1068 D1:CEB3 -  -  -  -  MaxMinMeanChainPushXXX:
 1069 D1:CEB3 DD 7D -  -  	ld	a, ixl
 1070 D1:CEB5 FE 03 -  -  	cp	typeChainAns
 1071 D1:CEB7 C2 7A AF D1 	jp	nz, UnknownError
 1072 D1:CEBB FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1073 D1:CEBF 20 0E -  -  	jr	nz, +_
 1074 D1:CEC1 3E EB -  -  	ld	a, 0EBh
 1075 D1:CEC3 CD 1B AD D1 	call	InsertA															;	ex de, hl
 1076 D1:CEC7 3E E1 -  -  	ld	a, 0E1h
 1077 D1:CEC9 CD 1B AD D1 	call	InsertA															;	pop hl
 1078 D1:CECD 18 24 -  -  	jr	MaxMinMeanInsert
 1079 D1:CECF 3E D1 -  -  _:	ld	a, 0D1h
 1080 D1:CED1 CD 1B AD D1 	call	InsertA															;	pop de
 1081 D1:CED5 18 1C -  -  	jr	MaxMinMeanInsert
 1082 D1:CED7 -  -  -  -  MaxMinMeanChainAnsXXX:
 1083 D1:CED7 DD 7D -  -  	ld	a, ixl
 1084 D1:CED9 B7 -  -  -  	or	a
 1085 D1:CEDA 28 10 -  -  	jr	z, MaxMinMeanChainAnsNumber
 1086 D1:CEDC 3D -  -  -  	dec	a
 1087 D1:CEDD 28 2A -  -  	jr	z, MaxMinMeanChainAnsVariable
 1088 D1:CEDF 3D -  -  -  	dec	a
 1089 D1:CEE0 28 2D -  -  	jr	z, MaxMinMeanChainAnsChainPush
 1090 D1:CEE2 3D -  -  -  	dec	a
 1091 D1:CEE3 28 2E -  -  	jr	z, MaxMinMeanChainAnsChainAns
 1092 D1:CEE5 3D -  -  -  	dec	a
 1093 D1:CEE6 28 2F -  -  	jr	z, MaxMinMeanChainAnsFunction
 1094 D1:CEE8 C3 40 AF D1 	jp	ErrorSyntax
 1095 D1:CEEC -  -  -  -  MaxMinMeanChainAnsNumber:
 1096 D1:CEEC EB -  -  -  	ex	de, hl
 1097 D1:CEED 3E 11 -  -  	ld	a, 011h
 1098 D1:CEEF CD 4C AC D1 	call	InsertAHL															;	ld de, *
 1099 D1:CEF3 -  -  -  -  MaxMinMeanInsert:
 1100 D1:CEF3 FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1101 D1:CEF7 C2 83 CF D1 	jp	nz, MeanInsert
 1102 D1:CEFB 3E B7 -  -  	ld	a, 0B7h
 1103 D1:CEFD 11 ED 52 19 	ld	de, 01952EDh
 1104 D1:CF01 -  -  -  -  MaxMinMeanInsertSMC = $+1
 1105 D1:CF01 21 30 01 EB 	ld	hl, 0EB0130h
 1106 D1:CF05 C3 98 AC D1 	jp	InsertADEHL															;	or a \ sbc hl, de \ add hl, de \ jr [n]c, $+3 \ add hl, de
 1107 D1:CF09 -  -  -  -  MaxMinMeanChainAnsVariable:
 1108 D1:CF09 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1109 D1:CF0D 18 E4 -  -  	jr	MaxMinMeanInsert
 1110 D1:CF0F -  -  -  -  MaxMinMeanChainAnsChainPush:
 1111 D1:CF0F C3 7A AF D1 	jp	UnknownError
 1112 D1:CF13 -  -  -  -  MaxMinMeanChainAnsChainAns:
 1113 D1:CF13 C3 7A AF D1 	jp	UnknownError
 1114 D1:CF17 -  -  -  -  MaxMinMeanChainAnsFunction:
 1115 D1:CF17 7B -  -  -  	ld	a, e
 1116 D1:CF18 06 01 -  -  	ld	b, OutputInDE
 1117 D1:CF1A FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1118 D1:CF1E CD 47 AD D1 	call	GetFunction
 1119 D1:CF22 18 CF -  -  _:	jr	MaxMinMeanInsert
 1120 D1:CF24 -  -  -  -  MaxMinMeanFunctionXXX:
 1121 D1:CF24 DD 7D -  -  	ld	a, ixl
 1122 D1:CF26 B7 -  -  -  	or	a
 1123 D1:CF27 28 10 -  -  	jr	z, MaxMinMeanFunctionNumber
 1124 D1:CF29 3D -  -  -  	dec	a
 1125 D1:CF2A 28 16 -  -  	jr	z, MaxMinMeanFunctionVariable
 1126 D1:CF2C 3D -  -  -  	dec	a
 1127 D1:CF2D 28 1C -  -  	jr	z, MaxMinMeanFunctionChainPush
 1128 D1:CF2F 3D -  -  -  	dec	a
 1129 D1:CF30 28 1D -  -  	jr	z, MaxMinMeanFunctionChainAns
 1130 D1:CF32 3D -  -  -  	dec	a
 1131 D1:CF33 28 38 -  -  	jr	z, MaxMinMeanFunctionFunction
 1132 D1:CF35 C3 40 AF D1 	jp	ErrorSyntax
 1133 D1:CF39 -  -  -  -  MaxMinMeanFunctionNumber:
 1134 D1:CF39 79 -  -  -  	ld	a, c
 1135 D1:CF3A 06 02 -  -  	ld	b, OutputInHL
 1136 D1:CF3C CD 47 AD D1 	call	GetFunction
 1137 D1:CF40 18 AA -  -  	jr	MaxMinMeanChainAnsNumber
 1138 D1:CF42 -  -  -  -  MaxMinMeanFunctionVariable:
 1139 D1:CF42 79 -  -  -  	ld	a, c
 1140 D1:CF43 06 02 -  -  	ld	b, OutputInHL
 1141 D1:CF45 CD 47 AD D1 	call	GetFunction
 1142 D1:CF49 18 BE -  -  	jr	MaxMinMeanChainAnsVariable
 1143 D1:CF4B -  -  -  -  MaxMinMeanFunctionChainPush:
 1144 D1:CF4B C3 7A AF D1 	jp	UnknownError
 1145 D1:CF4F -  -  -  -  MaxMinMeanFunctionChainAns:
 1146 D1:CF4F FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1147 D1:CF53 20 13 -  -  	jr	nz, ++_
 1148 D1:CF55 3E EB -  -  	ld	a, 0EBh
 1149 D1:CF57 CD 1B AD D1 	call	InsertA															;	ex de, hl
 1150 D1:CF5B 79 -  -  -  	ld	a, c
 1151 D1:CF5C 06 02 -  -  	ld	b, OutputInHL
 1152 D1:CF5E FD CB C0 F6 _:	set	need_push, (iy+fExpression1)
 1153 D1:CF62 CD 47 AD D1 	call	GetFunction
 1154 D1:CF66 18 8B -  -  	jr	MaxMinMeanInsert
 1155 D1:CF68 79 -  -  -  _:	ld	a, c
 1156 D1:CF69 06 01 -  -  	ld	b, OutputInDE
 1157 D1:CF6B 18 F1 -  -  	jr	--_
 1158 D1:CF6D -  -  -  -  MaxMinMeanFunctionFunction:
 1159 D1:CF6D 7B -  -  -  	ld	a, e
 1160 D1:CF6E 06 01 -  -  	ld	b, OutputInDE
 1161 D1:CF70 CD 47 AD D1 	call	GetFunction
 1162 D1:CF74 79 -  -  -  	ld	a, c
 1163 D1:CF75 06 02 -  -  	ld	b, OutputInHL
 1164 D1:CF77 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1165 D1:CF7B CD 47 AD D1 	call	GetFunction
 1166 D1:CF7F C3 F3 CE D1 	jp	MaxMinMeanInsert
 1167 D1:CF83 -  -  -  -  MeanInsert:
 1168 D1:CF83 FD CB D0 6E 	bit	has_already_mean, (iy+fProgram1)
 1169 D1:CF87 20 2C -  -  	jr	nz, +_
 1170 D1:CF89 3E CD -  -  	ld	a, 0CDh
 1171 D1:CF8B CD 1B AD D1 	call	InsertA															;	call *
 1172 D1:CF8F CD 32 AD D1 	call	InsertProgramPtrToDataOffset
 1173 D1:CF93 2A 77 EA D1 	ld	hl, (programDataDataPtr)
 1174 D1:CF97 22 2A EA D0 	ld	(MeanStartData), hl
 1175 D1:CF9B E5 -  -  -  	push	hl
 1176 D1:CF9C D1 -  -  -  	pop	de
 1177 D1:CF9D CD 50 AC D1 	call	InsertHL															;	call *
 1178 D1:CFA1 21 C6 EE D1 	ld	hl, MeanRoutine
 1179 D1:CFA5 01 18 00 00 	ld	bc, MeanRoutineEnd - MeanRoutine
 1180 D1:CFA9 ED B0 -  -  	ldir
 1181 D1:CFAB ED 53 77 EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1182 D1:CFB0 FD CB D0 EE 	set	has_already_mean, (iy+fProgram1)
 1183 D1:CFB4 C9 -  -  -  	ret
 1184 D1:CFB5 3E CD -  -  _:	ld	a, 0CDh
 1185 D1:CFB7 CD 1B AD D1 	call	InsertA															;	call ******
 1186 D1:CFBB CD 32 AD D1 	call	InsertProgramPtrToDataOffset
 1187 D1:CFBF 2A 2A EA D0 	ld	hl, (MeanStartData)
 1188 D1:CFC3 C3 50 AC D1 	jp	InsertHL																;	call XXXXXX
 1189 D1:CFC7 -  -  -  -  	
 1190 D1:CFC7 -  -  -  -  functionSqrt:
 1191 D1:CFC7 3E 01 -  -  	ld	a, 1
 1192 D1:CFC9 32 7D EA D1 	ld	(amountOfArguments), a
 1193 D1:CFCD FD CB BF CE 	set	last_token_was_not, (iy+fExpression2)
 1194 D1:CFD1 E5 -  -  -  	push	hl
 1195 D1:CFD2 DD E1 -  -  	pop	ix
 1196 D1:CFD4 DD 7E FC -  	ld	a, (ix-4)
 1197 D1:CFD7 B7 -  -  -  	or	a
 1198 D1:CFD8 28 10 -  -  	jr	z, SqrtNumber
 1199 D1:CFDA 3D -  -  -  	dec	a
 1200 D1:CFDB 28 1E -  -  	jr	z, SqrtVariable
 1201 D1:CFDD 3D -  -  -  	dec	a
 1202 D1:CFDE 28 31 -  -  	jr	z, SqrtChainPush
 1203 D1:CFE0 3D -  -  -  	dec	a
 1204 D1:CFE1 28 32 -  -  	jr	z, SqrtChainAns
 1205 D1:CFE3 3D -  -  -  	dec	a
 1206 D1:CFE4 28 3F -  -  	jr	z, SqrtFunction
 1207 D1:CFE6 C3 40 AF D1 	jp	ErrorSyntax
 1208 D1:CFEA -  -  -  -  SqrtNumber:
 1209 D1:CFEA FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1210 D1:CFEE DD 27 FD -  	ld	hl, (ix-3)
 1211 D1:CFF1 E5 -  -  -  	push	hl
 1212 D1:CFF2 C1 -  -  -  	pop	bc
 1213 D1:CFF3 CD 54 01 00 	call	__imulu
 1214 D1:CFF7 DD 2F FD -  	ld	(ix-3), hl
 1215 D1:CFFA C9 -  -  -  	ret
 1216 D1:CFFB -  -  -  -  SqrtVariable:
 1217 D1:CFFB DD 4E FD -  	ld	c, (ix-3)
 1218 D1:CFFE 06 03 -  -  	ld	b, 3
 1219 D1:D000 ED 4C -  -  	mlt	bc
 1220 D1:D002 79 -  -  -  	ld	a, c
 1221 D1:D003 21 DD 27 00 	ld	hl, 00027DDh
 1222 D1:D007 CD 70 1D 02 	call	_SetHLUToA
 1223 D1:D00B CD 50 AC D1 	call	InsertHL															;	ld hl, (ix+*)
 1224 D1:D00F 18 08 -  -  	jr	SqrtChainAns2
 1225 D1:D011 -  -  -  -  SqrtChainPush:
 1226 D1:D011 C3 7A AF D1 	jp	UnknownError
 1227 D1:D015 -  -  -  -  SqrtChainAns:
 1228 D1:D015 CD C7 AC D1 	call	MaybeChangeDEToHL
 1229 D1:D019 -  -  -  -  SqrtChainAns2:
 1230 D1:D019 11 E5 C1 CD 	ld	de, 0CDC1E5h
 1231 D1:D01D 21 58 01 00 	ld	hl, __imuls
 1232 D1:D021 C3 9C AC D1 	jp	InsertDEHL															;	push hl \ pop bc \ call __imuls
 1233 D1:D025 -  -  -  -  SqrtFunction:
 1234 D1:D025 DD 7E FD -  	ld	a, (ix-3)
 1235 D1:D028 06 02 -  -  	ld	b, OutputInHL
 1236 D1:D02A CD 47 AD D1 	call	GetFunction
 1237 D1:D02E 18 E9 -  -  	jr	SqrtChainAns2
 1238 D1:D030 -  -  -  -  	
 1239 D1:D030 -  -  -  -  functionC:
 1240 D1:D030 3E 01 -  -  	ld	a, 1
 1241 D1:D032 32 7C EA D1 	ld	(openedParensF), a
 1242 D1:D036 CD 28 10 02 	call	_IncFetch
 1243 D1:D03A CD CD B2 D1 	call	ParseExpression
 1244 D1:D03E FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
 1245 D1:D042 CA 40 AF D1 	jp	z, ErrorSyntax
 1246 D1:D046 2A 62 EA D1 	ld	hl, (programPtr)
 1247 D1:D04A 2B -  -  -  	dec	hl
 1248 D1:D04B 2B -  -  -  	dec	hl
 1249 D1:D04C 2B -  -  -  	dec	hl
 1250 D1:D04D 2B -  -  -  	dec	hl
 1251 D1:D04E 22 62 EA D1 	ld	(programPtr), hl
 1252 D1:D052 23 -  -  -  	inc	hl
 1253 D1:D053 ED 27 -  -  	ld	hl, (hl)
 1254 D1:D055 11 51 00 00 	ld	de, AMOUNT_OF_C_FUNCTIONS
 1255 D1:D059 B7 -  -  -  	or	a
 1256 D1:D05A ED 52 -  -  	sbc	hl, de
 1257 D1:D05C D2 40 AF D1 	jp	nc, ErrorSyntax
 1258 D1:D060 19 -  -  -  	add	hl, de
 1259 D1:D061 7D -  -  -  	ld	a, l
 1260 D1:D062 B7 -  -  -  	or	a
 1261 D1:D063 ED 62 -  -  	sbc	hl, hl
 1262 D1:D065 6F -  -  -  	ld	l, a
 1263 D1:D066 11 9E E8 D1 	ld	de, CFunctionsArguments
 1264 D1:D06A 19 -  -  -  	add	hl, de
 1265 D1:D06B 47 -  -  -  	ld	b, a
 1266 D1:D06C 7E -  -  -  	ld	a, (hl)
 1267 D1:D06D FE E0 -  -  	cp	%11100000
 1268 D1:D06F CA 86 AF D1 	jp	z, ImplementError
 1269 D1:D073 FD 77 B0 -  	ld	(iy+fFunction1), a
 1270 D1:D076 07 -  -  -  	rlca
 1271 D1:D077 07 -  -  -  	rlca
 1272 D1:D078 07 -  -  -  	rlca
 1273 D1:D079 E6 07 -  -  	and	000000111b
 1274 D1:D07B 4F -  -  -  	ld	c, a
 1275 D1:D07C 78 -  -  -  	ld	a, b
 1276 D1:D07D 06 03 -  -  	ld	b, 3
 1277 D1:D07F ED 4C -  -  	mlt	bc
 1278 D1:D081 21 FB E9 D1 	ld	hl, CArguments
 1279 D1:D085 09 -  -  -  	add	hl, bc
 1280 D1:D086 ED 27 -  -  	ld	hl, (hl)
 1281 D1:D088 32 21 E5 D1 	ld	(CFunctionArgsSMC), a
 1282 D1:D08C E9 -  -  -  	jp	(hl)
 1283 D1:D08D -  -  -  -  
 1284 D1:D08D -  -  -  -  functionCustom:
 1285 D1:D08D CD 28 10 02 	call	_IncFetch
 1286 D1:D091 D6 0A -  -  	sub	10
 1287 D1:D093 DA 40 AF D1 	jp	c, ErrorSyntax
 1288 D1:D097 FE 05 -  -  	cp	AMOUNT_OF_CUSTOM_TOKENS + 1
 1289 D1:D099 D2 40 AF D1 	jp	nc, ErrorSyntax
 1290 D1:D09D 4F -  -  -  	ld	c, a
 1291 D1:D09E 06 03 -  -  	ld	b, 3
 1292 D1:D0A0 ED 4C -  -  	mlt	bc
 1293 D1:D0A2 21 10 EA D1 	ld	hl, functionCustomStart
 1294 D1:D0A6 09 -  -  -  	add	hl, bc
 1295 D1:D0A7 ED 27 -  -  	ld	hl, (hl)
 1296 D1:D0A9 E9 -  -  -  	jp	(hl)
 1297 D1:D0AA -  -  -  -  	
 1298 D1:D0AA -  -  -  -  functionExecHex:
 1299 D1:D0AA CD 28 10 02 	call	_IncFetch
 1300 D1:D0AE D8 -  -  -  	ret	c
 1301 D1:D0AF FE 3F -  -  	cp	tEnter
 1302 D1:D0B1 C8 -  -  -  	ret	z
 1303 D1:D0B2 FE 2A -  -  	cp	tString
 1304 D1:D0B4 C8 -  -  -  	ret	z
 1305 D1:D0B5 21 4C EA D1 	ld	hl, hexadecimals
 1306 D1:D0B9 01 10 00 00 	ld	bc, 16
 1307 D1:D0BD ED B1 -  -  	cpir
 1308 D1:D0BF C2 40 AF D1 _:	jp	nz, ErrorSyntax
 1309 D1:D0C3 51 -  -  -  	ld	d, c
 1310 D1:D0C4 CD 28 10 02 	call	_IncFetch
 1311 D1:D0C8 DA 40 AF D1 	jp	c, ErrorSyntax
 1312 D1:D0CC 21 4C EA D1 	ld	hl, hexadecimals
 1313 D1:D0D0 01 10 00 00 	ld	bc, 16
 1314 D1:D0D4 ED B1 -  -  	cpir
 1315 D1:D0D6 20 E7 -  -  	jr	nz, -_
 1316 D1:D0D8 7A -  -  -  	ld	a, d
 1317 D1:D0D9 87 -  -  -  	add	a, a
 1318 D1:D0DA 87 -  -  -  	add	a, a
 1319 D1:D0DB 87 -  -  -  	add	a, a
 1320 D1:D0DC 87 -  -  -  	add	a, a
 1321 D1:D0DD 81 -  -  -  	add	a, c
 1322 D1:D0DE CD 1B AD D1 	call	InsertA
 1323 D1:D0E2 18 C6 -  -  	jr	functionExecHex
 1324 D1:D0E4 -  -  -  -  	
 1325 D1:D0E4 -  -  -  -  functionRoot:
 1326 D1:D0E4 3E 01 -  -  	ld	a, 1
 1327 D1:D0E6 32 7D EA D1 	ld	(amountOfArguments), a
 1328 D1:D0EA E5 -  -  -  	push	hl
 1329 D1:D0EB DD E1 -  -  	pop	ix
 1330 D1:D0ED DD 7E FC -  	ld	a, (ix-4)
 1331 D1:D0F0 B7 -  -  -  	or	a
 1332 D1:D0F1 28 10 -  -  	jr	z, RootNumber
 1333 D1:D0F3 3D -  -  -  	dec	a
 1334 D1:D0F4 28 20 -  -  	jr	z, RootVariable
 1335 D1:D0F6 3D -  -  -  	dec	a
 1336 D1:D0F7 28 33 -  -  	jr	z, RootChainPush
 1337 D1:D0F9 3D -  -  -  	dec	a
 1338 D1:D0FA 28 34 -  -  	jr	z, RootChainAns
 1339 D1:D0FC 3D -  -  -  	dec	a
 1340 D1:D0FD 28 6A -  -  	jr	z, RootFunction
 1341 D1:D0FF C3 40 AF D1 	jp	ErrorSyntax
 1342 D1:D103 -  -  -  -  RootNumber:
 1343 D1:D103 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1344 D1:D107 DD 27 FD -  	ld	hl, (ix-3)
 1345 D1:D10A FD E5 -  -  	push	iy
 1346 D1:D10C CD F2 EE D1 		call	RootRoutine
 1347 D1:D110 FD E1 -  -  	pop	iy
 1348 D1:D112 DD 2F FD -  	ld	(ix-3), hl
 1349 D1:D115 C9 -  -  -  	ret
 1350 D1:D116 -  -  -  -  RootVariable:
 1351 D1:D116 DD 4E FD -  	ld	c, (ix-3)
 1352 D1:D119 06 03 -  -  	ld	b, 3
 1353 D1:D11B ED 4C -  -  	mlt	bc
 1354 D1:D11D 79 -  -  -  	ld	a, c
 1355 D1:D11E 21 DD 27 00 	ld	hl, 00027DDh
 1356 D1:D122 CD 70 1D 02 	call	_SetHLUToA
 1357 D1:D126 CD 50 AC D1 	call	InsertHL															;	ld hl, (ix+*)
 1358 D1:D12A 18 04 -  -  	jr	RootChainAns
 1359 D1:D12C -  -  -  -  RootChainPush:
 1360 D1:D12C C3 7A AF D1 	jp	UnknownError
 1361 D1:D130 -  -  -  -  RootChainAns:
 1362 D1:D130 FD CB CF 46 	bit	has_already_root, (iy+fProgram2)
 1363 D1:D134 FD CB CF C6 	set	has_already_root, (iy+fProgram2)
 1364 D1:D138 20 1D -  -  	jr	nz, RootChainAnsRecallRoutine
 1365 D1:D13A -  -  -  -  RootChainAnsAddRoutine:
 1366 D1:D13A FD CB B0 CE 	set	modified_iy, (iy+fAlways1)
 1367 D1:D13E ED 5B 77 EA 
              D1 -  -  -  	ld	de, (programDataDataPtr)
 1368 D1:D143 ED 53 30 EA 
              D0 -  -  -  	ld	(RootStartData), de
 1369 D1:D148 21 F2 EE D1 	ld	hl, RootRoutine
 1370 D1:D14C 01 2D 00 00 	ld	bc, RootRoutineEnd - RootRoutine
 1371 D1:D150 ED B0 -  -  	ldir
 1372 D1:D152 ED 53 77 EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1373 D1:D157 -  -  -  -  RootChainAnsRecallRoutine:
 1374 D1:D157 3E CD -  -  	ld	a, 0CDh
 1375 D1:D159 CD 1B AD D1 	call	InsertA															;	call *
 1376 D1:D15D CD 32 AD D1 	call	InsertProgramPtrToDataOffset
 1377 D1:D161 2A 30 EA D0 	ld	hl, (RootStartData)
 1378 D1:D165 C3 50 AC D1 	jp	InsertHL																;	call *
 1379 D1:D169 -  -  -  -  RootFunction:
 1380 D1:D169 DD 7E FD -  	ld	a, (ix-3)
 1381 D1:D16C 06 02 -  -  	ld	b, OutputInHL
 1382 D1:D16E CD 47 AD D1 	call	GetFunction
 1383 D1:D172 18 BC -  -  	jr	RootChainAns
 1384 D1:D174 -  -  -  -  	
 1385 D1:D174 -  -  -  -  	
 1386 D1:D174 -  -  -  -  	
 1387 D1:D174 -  -  -  -  	
 1388 D1:D174 -  -  -  -  	
 1389 D1:D174 -  -  -  -  	
 1390 D1:D174 -  -  -  -  	
 1391 D1:D174 -  -  -  -  functionDefineSprite:
 1392 D1:D174 FD CB D0 7E 	bit	used_code, (iy+fProgram1)
 1393 D1:D178 C2 68 AF D1 	jp	nz, ErrorUsedCode
 1394 D1:D17C 3E 01 -  -  	ld	a, 1
 1395 D1:D17E 32 7C EA D1 	ld	(openedParensF), a
 1396 D1:D182 CD 32 AD D1 	call	InsertProgramPtrToDataOffset
 1397 D1:D186 2A 77 EA D1 	ld	hl, (programDataDataPtr)
 1398 D1:D18A E5 -  -  -  	push	hl
 1399 D1:D18B D1 -  -  -  	pop	de
 1400 D1:D18C CD 50 AC D1 	call	InsertHL
 1401 D1:D190 06 02 -  -  	ld	b, 2
 1402 D1:D192 D5 -  -  -  _:	push	de
 1403 D1:D193 C5 -  -  -  		push	bc
 1404 D1:D194 CD 28 10 02 			call	_IncFetch
 1405 D1:D198 CD CD B2 D1 			call	ParseExpression
 1406 D1:D19C FD CB C0 66 			bit	output_is_number, (iy+fExpression1)
 1407 D1:D1A0 CA 40 AF D1 			jp	z, ErrorSyntax
 1408 D1:D1A4 FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
 1409 D1:D1A8 CA 40 AF D1 			jp	z, ErrorSyntax
 1410 D1:D1AC 2A 62 EA D1 			ld	hl, (programPtr)
 1411 D1:D1B0 2B -  -  -  			dec	hl
 1412 D1:D1B1 2B -  -  -  			dec	hl
 1413 D1:D1B2 2B -  -  -  			dec	hl
 1414 D1:D1B3 2B -  -  -  			dec	hl
 1415 D1:D1B4 22 62 EA D1 			ld	(programPtr), hl
 1416 D1:D1B8 23 -  -  -  			inc	hl
 1417 D1:D1B9 7E -  -  -  			ld	a, (hl)
 1418 D1:D1BA C1 -  -  -  		pop	bc
 1419 D1:D1BB D1 -  -  -  	pop	de
 1420 D1:D1BC 12 -  -  -  	ld	(de), a
 1421 D1:D1BD 13 -  -  -  	inc	de
 1422 D1:D1BE 10 D2 -  -  	djnz	-_
 1423 D1:D1C0 2A 62 EA D1 	ld	hl, (programPtr)
 1424 D1:D1C4 E5 -  -  -  	push	hl
 1425 D1:D1C5 ED 53 62 EA 
              D1 -  -  -  		ld	(programPtr), de
 1426 D1:D1CA CD 28 10 02 		call	_IncFetch
 1427 D1:D1CE FE 2A -  -  		cp	tString
 1428 D1:D1D0 C2 40 AF D1 		jp	nz, ErrorSyntax
 1429 D1:D1D4 CD C0 0F 02 		call	_NxtFetch
 1430 D1:D1D8 DA 40 AF D1 		jp	c, ErrorSyntax
 1431 D1:D1DC FE 3F -  -  		cp	tEnter
 1432 D1:D1DE CA 40 AF D1 		jp	z, ErrorSyntax
 1433 D1:D1E2 CD AA D0 D1 		call	functionExecHex
 1434 D1:D1E6 2A 62 EA D1 		ld	hl, (programPtr)
 1435 D1:D1EA 22 77 EA D1 		ld	(programDataDataPtr), hl
 1436 D1:D1EE E1 -  -  -  	pop	hl
 1437 D1:D1EF 22 62 EA D1 	ld	(programPtr), hl
 1438 D1:D1F3 C9 -  -  -  	ret
 1439 D1:D1F4 -  -  -  -  	
 1440 D1:D1F4 -  -  -  -  functionCompilePrgm:
 1441 D1:D1F4 21 F8 05 D0 	ld	hl, OP1
 1442 D1:D1F8 CD 36 B2 D1 	call	GetProgramName
 1443 D1:D1FC 3E 05 -  -  	ld	a, ProgObj
 1444 D1:D1FE 32 F8 05 D0 	ld	(OP1), a
 1445 D1:D202 CD 0C 05 02 	call	_ChkFindSym
 1446 D1:D206 30 0D -  -  	jr	nc, +_
 1447 D1:D208 21 F8 05 D0 	ld	hl, OP1
 1448 D1:D20C 34 -  -  -  	inc	(hl)
 1449 D1:D20D CD 0C 05 02 	call	_ChkFindSym
 1450 D1:D211 DA 62 AF D1 	jp	c, ErrorNotFound
 1451 D1:D215 CD 98 1F 02 _:	call	_ChkInRAM
 1452 D1:D219 30 0A -  -  	jr	nc, +_
 1453 D1:D21B EB -  -  -  	ex	de, hl
 1454 D1:D21C 11 09 00 00 	ld	de, 9
 1455 D1:D220 19 -  -  -  	add	hl, de
 1456 D1:D221 5E -  -  -  	ld	e, (hl)
 1457 D1:D222 19 -  -  -  	add	hl, de
 1458 D1:D223 23 -  -  -  	inc	hl
 1459 D1:D224 EB -  -  -  	ex	de, hl
 1460 D1:D225 2A F8 05 D0 _:	ld	hl, (OP1)
 1461 D1:D229 E5 -  -  -  	push	hl
 1462 D1:D22A 2A FB 05 D0 		ld	hl, (OP1+3)
 1463 D1:D22E E5 -  -  -  		push	hl
 1464 D1:D22F 2A FE 05 D0 			ld	hl, (OP1+6)
 1465 D1:D233 E5 -  -  -  			push	hl
 1466 D1:D234 2A 17 23 D0 				ld	hl, (begPC)
 1467 D1:D238 E5 -  -  -  				push	hl
 1468 D1:D239 2A 1A 23 D0 					ld	hl, (curPC)
 1469 D1:D23D E5 -  -  -  					push	hl
 1470 D1:D23E 2A 1D 23 D0 						ld	hl, (endPC)
 1471 D1:D242 E5 -  -  -  						push	hl
 1472 D1:D243 EB -  -  -  							ex	de, hl
 1473 D1:D244 01 00 00 00 							ld	bc, 0
 1474 D1:D248 4E -  -  -  							ld	c, (hl)
 1475 D1:D249 23 -  -  -  							inc	hl
 1476 D1:D24A 22 1A 23 D0 							ld	(curPC), hl
 1477 D1:D24E 46 -  -  -  							ld	b, (hl)
 1478 D1:D24F 23 -  -  -  							inc	hl
 1479 D1:D250 22 17 23 D0 							ld	(begPC), hl
 1480 D1:D254 09 -  -  -  							add	hl, bc
 1481 D1:D255 2B -  -  -  							dec	hl
 1482 D1:D256 22 1D 23 D0 							ld	(endPC), hl
 1483 D1:D25A CD FF B0 D1 							call	PrintCompilingProgram
 1484 D1:D25E 21 85 EA D1 							ld	hl, AmountOfSubPrograms
 1485 D1:D262 34 -  -  -  							inc	(hl)
 1486 D1:D263 CD 70 AA D1 							call	CompileProgramFull
 1487 D1:D267 E1 -  -  -  						pop	hl
 1488 D1:D268 22 1D 23 D0 						ld	(endPC), hl
 1489 D1:D26C E1 -  -  -  					pop	hl
 1490 D1:D26D 22 1A 23 D0 					ld	(curPC), hl
 1491 D1:D271 E1 -  -  -  				pop	hl
 1492 D1:D272 22 17 23 D0 				ld	(begPC), hl
 1493 D1:D276 E1 -  -  -  			pop	hl
 1494 D1:D277 22 FE 05 D0 			ld	(OP1+6), hl
 1495 D1:D27B E1 -  -  -  		pop	hl
 1496 D1:D27C 22 FB 05 D0 		ld	(OP1+3), hl
 1497 D1:D280 E1 -  -  -  	pop	hl
 1498 D1:D281 22 F8 05 D0 	ld	(OP1), hl
 1499 D1:D285 C3 FF B0 D1 	jp	PrintCompilingProgram
Listing for file "ice.asm"
  447 D1:D289 -  -  -  -  #include "operators functions/operators.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\operators.asm"
    1 D1:D289 -  -  -  -  ExecuteOperator:
    2 D1:D289 32 20 EA D0 	ld	(tempToken2), a
    3 D1:D28D 21 84 EA D1 	ld	hl, ExprOutput2
    4 D1:D291 36 01 -  -  	ld	(hl), OutputIsInHL
    5 D1:D293 B7 -  -  -  	or	a
    6 D1:D294 CA DE D2 D1 	jp	z, ListElementXXX
    7 D1:D298 FE 6D -  -  	cp	tLE
    8 D1:D29A CC C2 DA D1 	call	z, SwapLEToGE
    9 D1:D29E FE 6B -  -  	cp	tLT
   10 D1:D2A0 CC C6 DA D1 	call	z, SwapLTToGT
   11 D1:D2A4 32 1F EA D0 	ld	(tempToken), a
   12 D1:D2A8 C5 -  -  -  	push	bc
   13 D1:D2A9 21 EF E8 D1 		ld	hl, operators_booleans
   14 D1:D2AD 01 0E 00 00 		ld	bc, 14
   15 D1:D2B1 ED B1 -  -  		cpir
   16 D1:D2B3 21 FE E8 D1 		ld	hl, operators_special
   17 D1:D2B7 09 -  -  -  		add	hl, bc
   18 D1:D2B8 4E -  -  -  		ld	c, (hl)
   19 D1:D2B9 79 -  -  -  		ld	a, c
   20 D1:D2BA FE 04 -  -  		cp	4
   21 D1:D2BC 20 04 -  -  		jr	nz, +_
   22 D1:D2BE FD CB C0 EE 		set	ans_set_z_flag, (iy+fExpression1)
   23 D1:D2C2 06 12 -  -  _:		ld	b, 18
   24 D1:D2C4 ED 4C -  -  		mlt	bc
   25 D1:D2C6 21 6B E9 D1 		ld	hl, operator_start											;	start of bunch jumps
   26 D1:D2CA 09 -  -  -  		add	hl, bc														;	start of right operator
   27 D1:D2CB DD 7E F8 -  		ld	a, (ix-8)
   28 D1:D2CE 4F -  -  -  		ld	c, a
   29 D1:D2CF FE 06 -  -  		cp	6
   30 D1:D2D1 D2 40 AF D1 		jp	nc, ErrorSyntax
   31 D1:D2D5 06 03 -  -  		ld	b, 3
   32 D1:D2D7 ED 4C -  -  		mlt	bc
   33 D1:D2D9 09 -  -  -  		add	hl, bc														;	start of right subelement
   34 D1:D2DA ED 27 -  -  		ld	hl, (hl)
   35 D1:D2DC C1 -  -  -  	pop	bc
   36 D1:D2DD E9 -  -  -  	jp	(hl)
   37 D1:D2DE -  -  -  -  	
   38 D1:D2DE -  -  -  -  ListElementXXX:
   39 D1:D2DE DD 7E FC -  	ld	a, (ix-4)
   40 D1:D2E1 B7 -  -  -  	or	a
   41 D1:D2E2 28 0C -  -  	jr	z, ListElementNumber
   42 D1:D2E4 3D -  -  -  	dec	a
   43 D1:D2E5 28 14 -  -  	jr	z, ListElementVariable
   44 D1:D2E7 3D -  -  -  	dec	a
   45 D1:D2E8 28 17 -  -  	jr	z, ListElementChainPush
   46 D1:D2EA 3D -  -  -  	dec	a
   47 D1:D2EB 28 18 -  -  	jr	z, ListElementChainAns
   48 D1:D2ED 3D -  -  -  	dec	a
   49 D1:D2EE 28 31 -  -  	jr	z, ListElementFunction
   50 D1:D2F0 -  -  -  -  ListElementNumber:
   51 D1:D2F0 3E 2A -  -  	ld	a, 02Ah
   52 D1:D2F2 C5 -  -  -  	push	bc
   53 D1:D2F3 E1 -  -  -  	pop	hl
   54 D1:D2F4 19 -  -  -  	add	hl, de
   55 D1:D2F5 19 -  -  -  	add	hl, de
   56 D1:D2F6 19 -  -  -  	add	hl, de
   57 D1:D2F7 C3 4C AC D1 	jp	InsertAHL															;	ld hl, (*)
   58 D1:D2FB -  -  -  -  ListElementVariable:
   59 D1:D2FB CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
   60 D1:D2FF 18 08 -  -  	jr	+_
   61 D1:D301 -  -  -  -  ListElementChainPush:
   62 D1:D301 C3 7A AF D1 	jp	UnknownError
   63 D1:D305 -  -  -  -  ListElementChainAns:
   64 D1:D305 CD BD AC D1 	call	MaybeChangeHLToDE
   65 D1:D309 3E 21 -  -  _:	ld	a, 021h
   66 D1:D30B C5 -  -  -  	push	bc
   67 D1:D30C D1 -  -  -  	pop	de
   68 D1:D30D 21 19 19 19 	ld	hl, 0191919h
   69 D1:D311 CD 98 AC D1 	call	InsertADEHL														;	ld hl, * \ add hl, de \ add hl, de \ add hl, de
   70 D1:D315 3E ED -  -  	ld	a, 0EDh
   71 D1:D317 CD 1B AD D1 	call	InsertA															;	ld hl, (hl) (1)
   72 D1:D31B 3E 27 -  -  	ld	a, 027h
   73 D1:D31D C3 1B AD D1 	jp	InsertA																;	ld hl, (hl) (2)
   74 D1:D321 -  -  -  -  ListElementFunction:
   75 D1:D321 7B -  -  -  	ld	a, e
   76 D1:D322 06 01 -  -  	ld	b, OutputInDE
   77 D1:D324 CD 47 AD D1 	call	GetFunction
   78 D1:D328 18 DF -  -  	jr	-_
   79 D1:D32A -  -  -  -  	
   80 D1:D32A -  -  -  -  SubNumberXXX:
   81 D1:D32A DD 7E FC -  	ld	a, (ix-4)
   82 D1:D32D B7 -  -  -  	or	a
   83 D1:D32E 28 10 -  -  	jr	z, SubNumberNumber
   84 D1:D330 3D -  -  -  	dec	a
   85 D1:D331 28 1A -  -  	jr	z, SubNumberVariable
   86 D1:D333 3D -  -  -  	dec	a
   87 D1:D334 28 23 -  -  	jr	z, SubNumberChainPush
   88 D1:D336 3D -  -  -  	dec	a
   89 D1:D337 28 24 -  -  	jr	z, SubNumberChainAns
   90 D1:D339 3D -  -  -  	dec	a
   91 D1:D33A 28 31 -  -  	jr	z, SubNumberFunction
   92 D1:D33C C3 D5 AE D1 	jp	SubError
   93 D1:D340 -  -  -  -  SubNumberNumber:
   94 D1:D340 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
   95 D1:D344 C5 -  -  -  	push	bc
   96 D1:D345 E1 -  -  -  	pop	hl
   97 D1:D346 B7 -  -  -  	or	a
   98 D1:D347 ED 52 -  -  	sbc	hl, de
   99 D1:D349 DD 2F F9 -  	ld	(ix-7), hl
  100 D1:D34C C9 -  -  -  	ret
  101 D1:D34D -  -  -  -  SubNumberVariable:
  102 D1:D34D 3E 21 -  -  	ld	a, 021h
  103 D1:D34F C5 -  -  -  	push	bc
  104 D1:D350 E1 -  -  -  	pop	hl
  105 D1:D351 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  106 D1:D355 C3 7E D4 D1 	jp	SubChainAnsVariable
  107 D1:D359 -  -  -  -  SubNumberChainPush:
  108 D1:D359 C3 7A AF D1 	jp	UnknownError
  109 D1:D35D -  -  -  -  SubNumberChainAns:
  110 D1:D35D CD BD AC D1 	call	MaybeChangeHLToDE
  111 D1:D361 3E 21 -  -  	ld	a, 021h
  112 D1:D363 C5 -  -  -  	push	bc
  113 D1:D364 D1 -  -  -  	pop	de
  114 D1:D365 21 B7 ED 52 	ld	hl, 052EDB7h
  115 D1:D369 C3 98 AC D1 	jp	InsertADEHL															;	ld hl, * \ or a \ sbc hl, de
  116 D1:D36D -  -  -  -  SubNumberFunction:
  117 D1:D36D 7B -  -  -  	ld	a, e
  118 D1:D36E C5 -  -  -  	push	bc
  119 D1:D36F 06 01 -  -  		ld	b, OutputInDE
  120 D1:D371 CD 47 AD D1 		call	GetFunction
  121 D1:D375 3E 21 -  -  		ld	a, 021h
  122 D1:D377 D1 -  -  -  	pop	de
  123 D1:D378 21 B7 ED 52 	ld	hl, 052EDB7h
  124 D1:D37C C3 98 AC D1 	jp	InsertADEHL															;	ld hl, * \ or a \ sbc hl, de
  125 D1:D380 -  -  -  -  SubVariableXXX:
  126 D1:D380 DD 7E FC -  	ld	a, (ix-4)
  127 D1:D383 B7 -  -  -  	or	a
  128 D1:D384 28 12 -  -  	jr	z, SubVariableNumber
  129 D1:D386 3D -  -  -  	dec	a
  130 D1:D387 28 17 -  -  	jr	z, SubVariableVariable
  131 D1:D389 3D -  -  -  	dec	a
  132 D1:D38A 28 2E -  -  	jr	z, SubVariableChainPush
  133 D1:D38C 3D -  -  -  	dec	a
  134 D1:D38D 28 2F -  -  	jr	z, SubVariableChainAns
  135 D1:D38F 3D -  -  -  	dec	a
  136 D1:D390 CA CE D3 D1 	jp	z, SubVariableFunction
  137 D1:D394 C3 D5 AE D1 	jp	SubError
  138 D1:D398 -  -  -  -  SubVariableNumber:
  139 D1:D398 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  140 D1:D39C C3 3B D4 D1 	jp	SubChainAnsNumber
  141 D1:D3A0 -  -  -  -  SubVariableVariable:
  142 D1:D3A0 79 -  -  -  	ld	a, c
  143 D1:D3A1 BB -  -  -  	cp	e
  144 D1:D3A2 20 0E -  -  	jr	nz, +_
  145 D1:D3A4 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  146 D1:D3A8 36 00 -  -  	ld	(hl), typeNumber
  147 D1:D3AA 11 00 00 00 	ld	de, 0
  148 D1:D3AE 23 -  -  -  	inc	hl
  149 D1:D3AF ED 1F -  -  	ld	(hl), de
  150 D1:D3B1 C9 -  -  -  	ret
  151 D1:D3B2 CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  152 D1:D3B6 C3 7E D4 D1 	jp	SubChainAnsVariable
  153 D1:D3BA -  -  -  -  SubVariableChainPush:
  154 D1:D3BA C3 7A AF D1 	jp	UnknownError
  155 D1:D3BE -  -  -  -  SubVariableChainAns:
  156 D1:D3BE CD BD AC D1 	call	MaybeChangeHLToDE
  157 D1:D3C2 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  158 D1:D3C6 21 B7 ED 52 	ld	hl, 052EDB7h
  159 D1:D3CA C3 50 AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  160 D1:D3CE -  -  -  -  SubVariableFunction:
  161 D1:D3CE 7B -  -  -  	ld	a, e
  162 D1:D3CF 06 01 -  -  	ld	b, OutputInDE
  163 D1:D3D1 CD 47 AD D1 	call	GetFunction
  164 D1:D3D5 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  165 D1:D3D9 21 B7 ED 52 	ld	hl, 052EDB7h
  166 D1:D3DD C3 50 AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  167 D1:D3E1 -  -  -  -  SubChainPushXXX:
  168 D1:D3E1 DD 7E FC -  	ld	a, (ix-4)
  169 D1:D3E4 B7 -  -  -  	or	a
  170 D1:D3E5 28 12 -  -  	jr	z, SubChainPushNumber
  171 D1:D3E7 3D -  -  -  	dec	a
  172 D1:D3E8 28 17 -  -  	jr	z, SubChainPushVariable
  173 D1:D3EA 3D -  -  -  	dec	a
  174 D1:D3EB 28 1C -  -  	jr	z, SubChainPushChainPush
  175 D1:D3ED 3D -  -  -  	dec	a
  176 D1:D3EE 28 1D -  -  	jr	z, SubChainPushChainAns
  177 D1:D3F0 3D -  -  -  	dec	a
  178 D1:D3F1 CA 1B D4 D1 	jp	z, SubChainPushFunction
  179 D1:D3F5 C3 D5 AE D1 	jp	SubError
  180 D1:D3F9 -  -  -  -  SubChainPushNumber:
  181 D1:D3F9 3E E1 -  -  	ld	a, 0E1h
  182 D1:D3FB CD 1B AD D1 	call	InsertA															;	pop hl
  183 D1:D3FF 18 3A -  -  	jr	SubChainAnsNumber
  184 D1:D401 -  -  -  -  SubChainPushVariable:
  185 D1:D401 3E E1 -  -  	ld	a, 0E1h
  186 D1:D403 CD 1B AD D1 	call	InsertA															;	pop hl
  187 D1:D407 18 75 -  -  	jr	SubChainAnsVariable
  188 D1:D409 -  -  -  -  SubChainPushChainPush:
  189 D1:D409 C3 7A AF D1 	jp	UnknownError
  190 D1:D40D -  -  -  -  SubChainPushChainAns:
  191 D1:D40D CD BD AC D1 	call	MaybeChangeHLToDE
  192 D1:D411 3E E1 -  -  	ld	a, 0E1h
  193 D1:D413 21 B7 ED 52 	ld	hl, 052EDB7h
  194 D1:D417 C3 4C AC D1 	jp	InsertAHL															;	pop hl \ or a \ sbc hl, de
  195 D1:D41B -  -  -  -  SubChainPushFunction:
  196 D1:D41B 3E E1 -  -  	ld	a, 0E1h
  197 D1:D41D CD 1B AD D1 	call	InsertA															;	pop hl
  198 D1:D421 18 73 -  -  	jr	SubChainAnsFunction
  199 D1:D423 -  -  -  -  SubChainAnsXXX:
  200 D1:D423 DD 7E FC -  	ld	a, (ix-4)
  201 D1:D426 B7 -  -  -  	or	a
  202 D1:D427 28 12 -  -  	jr	z, SubChainAnsNumber
  203 D1:D429 3D -  -  -  	dec	a
  204 D1:D42A 28 52 -  -  	jr	z, SubChainAnsVariable
  205 D1:D42C 3D -  -  -  	dec	a
  206 D1:D42D 28 5F -  -  	jr	z, SubChainAnsChainPush
  207 D1:D42F 3D -  -  -  	dec	a
  208 D1:D430 28 60 -  -  	jr	z, SubChainAnsChainAns
  209 D1:D432 3D -  -  -  	dec	a
  210 D1:D433 CA 96 D4 D1 	jp	z, SubChainAnsFunction
  211 D1:D437 C3 D5 AE D1 	jp	SubError
  212 D1:D43B -  -  -  -  SubChainAnsNumber:
  213 D1:D43B B7 -  -  -  	or	a
  214 D1:D43C ED 62 -  -  	sbc	hl, hl
  215 D1:D43E EB -  -  -  	ex	de, hl
  216 D1:D43F ED 52 -  -  	sbc	hl, de
  217 D1:D441 C8 -  -  -  	ret	z
  218 D1:D442 1E 07 -  -  	ld	e, 7
  219 D1:D444 ED 52 -  -  	sbc	hl, de
  220 D1:D446 30 1C -  -  	jr	nc, SubHLDE
  221 D1:D448 19 -  -  -  	add	hl, de
  222 D1:D449 45 -  -  -  	ld	b, l
  223 D1:D44A 3A 83 EA D1 	ld	a, (ExprOutput)
  224 D1:D44E B7 -  -  -  	or	a
  225 D1:D44F 28 09 -  -  	jr	z, ++_
  226 D1:D451 3E 2B -  -  	ld	a, 02Bh
  227 D1:D453 CD 1B AD D1 _:	call	InsertA															;	dec hl/de
  228 D1:D457 10 FA -  -  	djnz	-_
  229 D1:D459 C9 -  -  -  	ret
  230 D1:D45A 3E 00 -  -  _:	ld	a, OutputIsInDE
  231 D1:D45C 32 84 EA D1 	ld	(ExprOutput2), a
  232 D1:D460 3E 1B -  -  	ld	a, 01Bh
  233 D1:D462 18 EF -  -  	jr	--_
  234 D1:D464 -  -  -  -  SubHLDE:
  235 D1:D464 19 -  -  -  	add	hl, de
  236 D1:D465 CD 60 01 00 	call	__ineg
  237 D1:D469 3A 83 EA D1 	ld	a, (ExprOutput)
  238 D1:D46D B7 -  -  -  	or	a
  239 D1:D46E 3E 11 -  -  	ld	a, 011h
  240 D1:D470 20 02 -  -  	jr	nz, +_
  241 D1:D472 3E 21 -  -  	ld	a, 021h
  242 D1:D474 CD 4C AC D1 _:	call	InsertAHL															;	ld hl/de, 16777215-*
  243 D1:D478 3E 19 -  -  	ld	a, 019h
  244 D1:D47A C3 1B AD D1 	jp	InsertA																;	add hl, de
  245 D1:D47E -  -  -  -  SubChainAnsVariable:
  246 D1:D47E CD C7 AC D1 	call	MaybeChangeDEToHL
  247 D1:D482 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
  248 D1:D486 21 B7 ED 52 	ld	hl, 052EDB7h
  249 D1:D48A C3 50 AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  250 D1:D48E -  -  -  -  SubChainAnsChainPush:
  251 D1:D48E C3 7A AF D1 	jp	UnknownError
  252 D1:D492 -  -  -  -  SubChainAnsChainAns:
  253 D1:D492 C3 7A AF D1 	jp	UnknownError
  254 D1:D496 -  -  -  -  SubChainAnsFunction:
  255 D1:D496 3A 83 EA D1 	ld	a, (ExprOutput)
  256 D1:D49A 87 -  -  -  	add	a, a
  257 D1:D49B 87 -  -  -  	add	a, a
  258 D1:D49C 87 -  -  -  	add	a, a
  259 D1:D49D 87 -  -  -  	add	a, a
  260 D1:D49E C6 D5 -  -  	add	a, 0D5h
  261 D1:D4A0 CD 1B AD D1 	call	InsertA															;	push hl/de
  262 D1:D4A4 7B -  -  -  	ld	a, e
  263 D1:D4A5 06 01 -  -  	ld	b, OutputInDE
  264 D1:D4A7 CD 47 AD D1 	call	GetFunction
  265 D1:D4AB 3E E1 -  -  	ld	a, 0E1h
  266 D1:D4AD 21 B7 ED 52 	ld	hl, 052EDB7h
  267 D1:D4B1 C3 4C AC D1 	jp	InsertAHL															;	pop hl \ or a \ sbc hl, de
  268 D1:D4B5 -  -  -  -  SubFunctionXXX:
  269 D1:D4B5 DD 7E FC -  	ld	a, (ix-4)
  270 D1:D4B8 B7 -  -  -  	or	a
  271 D1:D4B9 28 10 -  -  	jr	z, SubFunctionNumber
  272 D1:D4BB 3D -  -  -  	dec	a
  273 D1:D4BC 28 18 -  -  	jr	z, SubFunctionVariable
  274 D1:D4BE 3D -  -  -  	dec	a
  275 D1:D4BF 28 20 -  -  	jr	z, SubFunctionChainPush
  276 D1:D4C1 3D -  -  -  	dec	a
  277 D1:D4C2 28 21 -  -  	jr	z, SubFunctionChainAns
  278 D1:D4C4 3D -  -  -  	dec	a
  279 D1:D4C5 28 3D -  -  	jr	z, SubFunctionFunction
  280 D1:D4C7 C3 D5 AE D1 	jp	SubError
  281 D1:D4CB -  -  -  -  SubFunctionNumber:
  282 D1:D4CB 79 -  -  -  	ld	a, c
  283 D1:D4CC 06 02 -  -  	ld	b, OutputInHL
  284 D1:D4CE CD 47 AD D1 	call	GetFunction
  285 D1:D4D2 C3 3B D4 D1 	jp	SubChainAnsNumber
  286 D1:D4D6 -  -  -  -  SubFunctionVariable:
  287 D1:D4D6 79 -  -  -  	ld	a, c
  288 D1:D4D7 06 02 -  -  	ld	b, OutputInHL
  289 D1:D4D9 CD 47 AD D1 	call	GetFunction
  290 D1:D4DD C3 7E D4 D1 	jp	SubChainAnsVariable
  291 D1:D4E1 -  -  -  -  SubFunctionChainPush:
  292 D1:D4E1 C3 7A AF D1 	jp	UnknownError
  293 D1:D4E5 -  -  -  -  SubFunctionChainAns:
  294 D1:D4E5 3A 83 EA D1 	ld	a, (ExprOutput)
  295 D1:D4E9 87 -  -  -  	add	a, a
  296 D1:D4EA 87 -  -  -  	add	a, a
  297 D1:D4EB 87 -  -  -  	add	a, a
  298 D1:D4EC 87 -  -  -  	add	a, a
  299 D1:D4ED C6 D5 -  -  	add	a, 0D5h
  300 D1:D4EF CD 1B AD D1 	call	InsertA															;	push hl/de
  301 D1:D4F3 79 -  -  -  	ld	a, c
  302 D1:D4F4 06 02 -  -  	ld	b, OutputInHL
  303 D1:D4F6 CD 47 AD D1 	call	GetFunction
  304 D1:D4FA 3E E1 -  -  	ld	a, 0E1h
  305 D1:D4FC 21 B7 ED 52 	ld	hl, 052EDB7h
  306 D1:D500 C3 4C AC D1 	jp	InsertAHL															;	pop de \ or a \ sbc hl, de
  307 D1:D504 -  -  -  -  SubFunctionFunction:
  308 D1:D504 7B -  -  -  	ld	a, e
  309 D1:D505 06 02 -  -  	ld	b, OutputInHL
  310 D1:D507 CD 47 AD D1 	call	GetFunction
  311 D1:D50B 79 -  -  -  	ld	a, c
  312 D1:D50C 06 01 -  -  	ld	b, OutputInDE
  313 D1:D50E FD CB C0 F6 	set	need_push, (iy+fExpression1)
  314 D1:D512 CD 47 AD D1 	call	GetFunction
  315 D1:D516 21 B7 ED 52 	ld	hl, 052EDB7h
  316 D1:D51A C3 50 AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  317 D1:D51E -  -  -  -  
  318 D1:D51E -  -  -  -  AddNumberXXX:
  319 D1:D51E DD 7E FC -  	ld	a, (ix-4)
  320 D1:D521 B7 -  -  -  	or	a
  321 D1:D522 28 10 -  -  	jr	z, AddNumberNumber
  322 D1:D524 3D -  -  -  	dec	a
  323 D1:D525 28 17 -  -  	jr	z, AddNumberVariable
  324 D1:D527 3D -  -  -  	dec	a
  325 D1:D528 28 1B -  -  	jr	z, AddNumberChainPush
  326 D1:D52A 3D -  -  -  	dec	a
  327 D1:D52B 28 1C -  -  	jr	z, AddNumberChainAns
  328 D1:D52D 3D -  -  -  	dec	a
  329 D1:D52E 28 1F -  -  	jr	z, AddNumberFunction
  330 D1:D530 C3 D9 AE D1 	jp	AddError
  331 D1:D534 -  -  -  -  AddNumberNumber:
  332 D1:D534 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  333 D1:D538 EB -  -  -  	ex	de, hl
  334 D1:D539 09 -  -  -  	add	hl, bc
  335 D1:D53A DD 2F F9 -  	ld	(ix-7), hl
  336 D1:D53D C9 -  -  -  	ret
  337 D1:D53E -  -  -  -  AddNumberVariable:
  338 D1:D53E C5 -  -  -  	push	bc
  339 D1:D53F E1 -  -  -  	pop	hl
  340 D1:D540 EB -  -  -  	ex	de, hl
  341 D1:D541 E5 -  -  -  	push	hl
  342 D1:D542 C1 -  -  -  	pop	bc
  343 D1:D543 18 2B -  -  	jr	AddVariableNumber
  344 D1:D545 -  -  -  -  AddNumberChainPush:
  345 D1:D545 C3 7A AF D1 	jp	UnknownError
  346 D1:D549 -  -  -  -  AddNumberChainAns:
  347 D1:D549 C5 -  -  -  	push	bc
  348 D1:D54A D1 -  -  -  	pop	de
  349 D1:D54B C3 03 D6 D1 	jp	AddChainAnsNumber
  350 D1:D54F -  -  -  -  AddNumberFunction:
  351 D1:D54F C5 -  -  -  	push	bc
  352 D1:D550 E1 -  -  -  	pop	hl
  353 D1:D551 EB -  -  -  	ex	de, hl
  354 D1:D552 E5 -  -  -  	push	hl
  355 D1:D553 C1 -  -  -  	pop	bc
  356 D1:D554 C3 A1 D6 D1 	jp	AddFunctionNumber
  357 D1:D558 -  -  -  -  AddVariableXXX:
  358 D1:D558 DD 7E FC -  	ld	a, (ix-4)
  359 D1:D55B B7 -  -  -  	or	a
  360 D1:D55C 28 12 -  -  	jr	z, AddVariableNumber
  361 D1:D55E 3D -  -  -  	dec	a
  362 D1:D55F 28 17 -  -  	jr	z, AddVariableVariable
  363 D1:D561 3D -  -  -  	dec	a
  364 D1:D562 28 1C -  -  	jr	z, AddVariableChainPush
  365 D1:D564 3D -  -  -  	dec	a
  366 D1:D565 28 24 -  -  	jr	z, AddVariableChainAns
  367 D1:D567 3D -  -  -  	dec	a
  368 D1:D568 CA 90 D5 D1 	jp	z, AddVariableFunction
  369 D1:D56C C3 D9 AE D1 	jp	AddError
  370 D1:D570 -  -  -  -  AddVariableNumber:
  371 D1:D570 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  372 D1:D574 C3 03 D6 D1 	jp	AddChainAnsNumber
  373 D1:D578 -  -  -  -  AddVariableVariable:
  374 D1:D578 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  375 D1:D57C C3 42 D6 D1 	jp	AddChainAnsVariable
  376 D1:D580 -  -  -  -  AddVariableChainPush:
  377 D1:D580 3E E1 -  -  	ld	a, 0E1h
  378 D1:D582 CD 1B AD D1 	call	InsertA															;	pop hl
  379 D1:D586 59 -  -  -  	ld	e, c
  380 D1:D587 C3 42 D6 D1 	jp	AddChainAnsVariable
  381 D1:D58B -  -  -  -  AddVariableChainAns:
  382 D1:D58B 59 -  -  -  	ld	e, c
  383 D1:D58C C3 42 D6 D1 	jp	AddChainAnsVariable
  384 D1:D590 -  -  -  -  AddVariableFunction:
  385 D1:D590 7B -  -  -  	ld	a, e
  386 D1:D591 06 02 -  -  	ld	b, OutputInHL
  387 D1:D593 CD 47 AD D1 	call	GetFunction
  388 D1:D597 59 -  -  -  	ld	e, c
  389 D1:D598 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
  390 D1:D59C 3E 19 -  -  	ld	a, 019h
  391 D1:D59E C3 1B AD D1 	jp	InsertA																;	add hl, de
  392 D1:D5A2 -  -  -  -  AddChainPushXXX:
  393 D1:D5A2 DD 7E FC -  	ld	a, (ix-4)
  394 D1:D5A5 B7 -  -  -  	or	a
  395 D1:D5A6 28 12 -  -  	jr	z, AddChainPushNumber
  396 D1:D5A8 3D -  -  -  	dec	a
  397 D1:D5A9 28 17 -  -  	jr	z, AddChainPushVariable
  398 D1:D5AB 3D -  -  -  	dec	a
  399 D1:D5AC 28 1C -  -  	jr	z, AddChainPushChainPush
  400 D1:D5AE 3D -  -  -  	dec	a
  401 D1:D5AF 28 1D -  -  	jr	z, AddChainPushChainAns
  402 D1:D5B1 3D -  -  -  	dec	a
  403 D1:D5B2 CA E3 D5 D1 	jp	z, AddChainPushFunction
  404 D1:D5B6 C3 D9 AE D1 	jp	AddError
  405 D1:D5BA -  -  -  -  AddChainPushNumber:
  406 D1:D5BA 3E E1 -  -  	ld	a, 0E1h
  407 D1:D5BC CD 1B AD D1 	call	InsertA															;	pop hl
  408 D1:D5C0 18 41 -  -  	jr	AddChainAnsNumber
  409 D1:D5C2 -  -  -  -  AddChainPushVariable:
  410 D1:D5C2 3E E1 -  -  	ld	a, 0E1h
  411 D1:D5C4 CD 1B AD D1 	call	InsertA															;	pop hl
  412 D1:D5C8 18 78 -  -  	jr	AddChainAnsVariable
  413 D1:D5CA -  -  -  -  AddChainPushChainPush:
  414 D1:D5CA C3 7A AF D1 	jp	UnknownError
  415 D1:D5CE -  -  -  -  AddChainPushChainAns:
  416 D1:D5CE 3A 83 EA D1 	ld	a, (ExprOutput)
  417 D1:D5D2 B7 -  -  -  	or	a
  418 D1:D5D3 3E D1 -  -  	ld	a, 0D1h
  419 D1:D5D5 20 02 -  -  	jr	nz, +_
  420 D1:D5D7 3E E1 -  -  	ld	a, 0E1h
  421 D1:D5D9 CD 1B AD D1 _:	call	InsertA															;	pop hl/de
  422 D1:D5DD 3E 19 -  -  	ld	a, 019h
  423 D1:D5DF C3 1B AD D1 	jp	InsertA																;	add hl, de
  424 D1:D5E3 -  -  -  -  AddChainPushFunction:
  425 D1:D5E3 3E E1 -  -  	ld	a, 0E1h
  426 D1:D5E5 CD 1B AD D1 	call	InsertA															;	pop hl
  427 D1:D5E9 18 7F -  -  	jr	AddChainAnsFunction
  428 D1:D5EB -  -  -  -  AddChainAnsXXX:
  429 D1:D5EB DD 7E FC -  	ld	a, (ix-4)
  430 D1:D5EE B7 -  -  -  	or	a
  431 D1:D5EF 28 12 -  -  	jr	z, AddChainAnsNumber
  432 D1:D5F1 3D -  -  -  	dec	a
  433 D1:D5F2 28 4E -  -  	jr	z, AddChainAnsVariable
  434 D1:D5F4 3D -  -  -  	dec	a
  435 D1:D5F5 28 6B -  -  	jr	z, AddChainAnsChainPush
  436 D1:D5F7 3D -  -  -  	dec	a
  437 D1:D5F8 28 6C -  -  	jr	z, AddChainAnsChainAns
  438 D1:D5FA 3D -  -  -  	dec	a
  439 D1:D5FB CA 6A D6 D1 	jp	z, AddChainAnsFunction
  440 D1:D5FF C3 D9 AE D1 	jp	AddError
  441 D1:D603 -  -  -  -  AddChainAnsNumber:
  442 D1:D603 B7 -  -  -  	or	a
  443 D1:D604 ED 62 -  -  	sbc	hl, hl
  444 D1:D606 EB -  -  -  	ex	de, hl
  445 D1:D607 ED 52 -  -  	sbc	hl, de
  446 D1:D609 C8 -  -  -  	ret	z
  447 D1:D60A 1E 06 -  -  	ld	e, 6
  448 D1:D60C ED 52 -  -  	sbc	hl, de
  449 D1:D60E 30 1C -  -  	jr	nc, AddHLDE
  450 D1:D610 19 -  -  -  	add	hl, de
  451 D1:D611 45 -  -  -  	ld	b, l
  452 D1:D612 3A 83 EA D1 	ld	a, (ExprOutput)
  453 D1:D616 B7 -  -  -  	or	a
  454 D1:D617 28 09 -  -  	jr	z, ++_
  455 D1:D619 3E 23 -  -  	ld	a, 023h
  456 D1:D61B CD 1B AD D1 _:	call	InsertA															;	inc hl/de
  457 D1:D61F 10 FA -  -  	djnz	-_
  458 D1:D621 C9 -  -  -  	ret
  459 D1:D622 3E 00 -  -  _:	ld	a, OutputIsInDE
  460 D1:D624 32 84 EA D1 	ld	(ExprOutput2), a
  461 D1:D628 3E 13 -  -  	ld	a, 013h
  462 D1:D62A 18 EF -  -  	jr	--_
  463 D1:D62C -  -  -  -  AddHLDE:
  464 D1:D62C 19 -  -  -  	add	hl, de
  465 D1:D62D 3A 83 EA D1 	ld	a, (ExprOutput)
  466 D1:D631 B7 -  -  -  	or	a
  467 D1:D632 3E 11 -  -  	ld	a, 011h
  468 D1:D634 20 02 -  -  	jr	nz, +_
  469 D1:D636 3E 21 -  -  	ld	a, 021h
  470 D1:D638 CD 4C AC D1 _:	call	InsertAHL															;	ld hl/de, *
  471 D1:D63C 3E 19 -  -  	ld	a, 019h
  472 D1:D63E C3 1B AD D1 	jp	InsertA																;	add hl, de
  473 D1:D642 -  -  -  -  AddChainAnsVariable:
  474 D1:D642 26 17 -  -  	ld	h, 017h
  475 D1:D644 16 03 -  -  	ld	d, 3
  476 D1:D646 ED 5C -  -  	mlt	de
  477 D1:D648 7B -  -  -  	ld	a, e
  478 D1:D649 2E DD -  -  	ld	l, 0DDh
  479 D1:D64B CD 70 1D 02 	call	_SetHLUToA
  480 D1:D64F 3A 83 EA D1 	ld	a, (ExprOutput)
  481 D1:D653 B7 -  -  -  	or	a
  482 D1:D654 20 02 -  -  	jr	nz, +_
  483 D1:D656 26 27 -  -  	ld	h, 027h
  484 D1:D658 CD 50 AC D1 _:	call	InsertHL															;	ld hl/de, (ix+*)
  485 D1:D65C 3E 19 -  -  	ld	a, 019h
  486 D1:D65E C3 1B AD D1 	jp	InsertA																;	add hl, de
  487 D1:D662 -  -  -  -  AddChainAnsChainPush:
  488 D1:D662 C3 7A AF D1 	jp	UnknownError
  489 D1:D666 -  -  -  -  AddChainAnsChainAns:
  490 D1:D666 C3 7A AF D1 	jp	UnknownError
  491 D1:D66A -  -  -  -  AddChainAnsFunction:
  492 D1:D66A 3A 83 EA D1 	ld	a, (ExprOutput)
  493 D1:D66E 87 -  -  -  	add	a, a
  494 D1:D66F 87 -  -  -  	add	a, a
  495 D1:D670 87 -  -  -  	add	a, a
  496 D1:D671 87 -  -  -  	add	a, a
  497 D1:D672 C6 D5 -  -  	add	a, 0D5h
  498 D1:D674 CD 1B AD D1 	call	InsertA															;	push hl/de
  499 D1:D678 7B -  -  -  	ld	a, e
  500 D1:D679 06 02 -  -  	ld	b, OutputInHL
  501 D1:D67B CD 47 AD D1 	call	GetFunction
  502 D1:D67F 3E D1 -  -  	ld	a, 0D1h
  503 D1:D681 CD 1B AD D1 	call	InsertA															;	pop de
  504 D1:D685 3E 19 -  -  	ld	a, 019h
  505 D1:D687 C3 1B AD D1 	jp	InsertA																;	add hl, de
  506 D1:D68B -  -  -  -  AddFunctionXXX:
  507 D1:D68B DD 7E FC -  	ld	a, (ix-4)
  508 D1:D68E B7 -  -  -  	or	a
  509 D1:D68F 28 10 -  -  	jr	z, AddFunctionNumber
  510 D1:D691 3D -  -  -  	dec	a
  511 D1:D692 28 18 -  -  	jr	z, AddFunctionVariable
  512 D1:D694 3D -  -  -  	dec	a
  513 D1:D695 28 20 -  -  	jr	z, AddFunctionChainPush
  514 D1:D697 3D -  -  -  	dec	a
  515 D1:D698 28 21 -  -  	jr	z, AddFunctionChainAns
  516 D1:D69A 3D -  -  -  	dec	a
  517 D1:D69B 28 3F -  -  	jr	z, AddFunctionFunction
  518 D1:D69D C3 D9 AE D1 	jp	AddError
  519 D1:D6A1 -  -  -  -  AddFunctionNumber:
  520 D1:D6A1 79 -  -  -  	ld	a, c
  521 D1:D6A2 06 02 -  -  	ld	b, OutputInHL
  522 D1:D6A4 CD 47 AD D1 	call	GetFunction
  523 D1:D6A8 C3 03 D6 D1 	jp	AddChainAnsNumber
  524 D1:D6AC -  -  -  -  AddFunctionVariable:
  525 D1:D6AC 79 -  -  -  	ld	a, c
  526 D1:D6AD 06 02 -  -  	ld	b, OutputInHL
  527 D1:D6AF CD 47 AD D1 	call	GetFunction
  528 D1:D6B3 C3 42 D6 D1 	jp	AddChainAnsVariable
  529 D1:D6B7 -  -  -  -  AddFunctionChainPush:
  530 D1:D6B7 C3 7A AF D1 	jp	UnknownError
  531 D1:D6BB -  -  -  -  AddFunctionChainAns:
  532 D1:D6BB 3A 83 EA D1 	ld	a, (ExprOutput)
  533 D1:D6BF 87 -  -  -  	add	a, a
  534 D1:D6C0 87 -  -  -  	add	a, a
  535 D1:D6C1 87 -  -  -  	add	a, a
  536 D1:D6C2 87 -  -  -  	add	a, a
  537 D1:D6C3 C6 D5 -  -  	add	a, 0D5h
  538 D1:D6C5 CD 1B AD D1 	call	InsertA															;	push hl/de
  539 D1:D6C9 79 -  -  -  	ld	a, c
  540 D1:D6CA 06 02 -  -  	ld	b, OutputInHL
  541 D1:D6CC CD 47 AD D1 	call	GetFunction
  542 D1:D6D0 3E D1 -  -  	ld	a, 0D1h
  543 D1:D6D2 CD 1B AD D1 	call	InsertA															;	pop de
  544 D1:D6D6 3E 19 -  -  	ld	a, 019h
  545 D1:D6D8 C3 1B AD D1 	jp	InsertA																;	add hl, de
  546 D1:D6DC -  -  -  -  AddFunctionFunction:
  547 D1:D6DC 7B -  -  -  	ld	a, e
  548 D1:D6DD 06 02 -  -  	ld	b, OutputInHL
  549 D1:D6DF CD 47 AD D1 	call	GetFunction
  550 D1:D6E3 79 -  -  -  	ld	a, c
  551 D1:D6E4 06 01 -  -  	ld	b, OutputInDE
  552 D1:D6E6 FD CB C0 F6 	set	need_push, (iy+fExpression1)
  553 D1:D6EA CD 47 AD D1 	call	GetFunction
  554 D1:D6EE 3E 19 -  -  	ld	a, 019h
  555 D1:D6F0 C3 1B AD D1 	jp	InsertA																;	add hl, de
  556 D1:D6F4 -  -  -  -  	
  557 D1:D6F4 -  -  -  -  DivNumberXXX:
  558 D1:D6F4 DD 7E FC -  	ld	a, (ix-4)
  559 D1:D6F7 B7 -  -  -  	or	a
  560 D1:D6F8 28 10 -  -  	jr	z, DivNumberNumber
  561 D1:D6FA 3D -  -  -  	dec	a
  562 D1:D6FB 28 1D -  -  	jr	z, DivNumberVariable
  563 D1:D6FD 3D -  -  -  	dec	a
  564 D1:D6FE 28 26 -  -  	jr	z, DivNumberChainPush
  565 D1:D700 3D -  -  -  	dec	a
  566 D1:D701 28 27 -  -  	jr	z, DivNumberChainAns
  567 D1:D703 3D -  -  -  	dec	a
  568 D1:D704 28 39 -  -  	jr	z, DivNumberFunction
  569 D1:D706 C3 DD AE D1 	jp	DivError
  570 D1:D70A -  -  -  -  DivNumberNumber:
  571 D1:D70A FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  572 D1:D70E C5 -  -  -  	push	bc
  573 D1:D70F E1 -  -  -  	pop	hl
  574 D1:D710 D5 -  -  -  	push	de
  575 D1:D711 C1 -  -  -  	pop	bc
  576 D1:D712 CD 44 01 00 	call	__idvrmu
  577 D1:D716 DD 1F F9 -  	ld	(ix-7), de
  578 D1:D719 C9 -  -  -  	ret
  579 D1:D71A -  -  -  -  DivNumberVariable:
  580 D1:D71A 3E 21 -  -  	ld	a, 021h
  581 D1:D71C C5 -  -  -  	push	bc
  582 D1:D71D E1 -  -  -  	pop	hl
  583 D1:D71E CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  584 D1:D722 C3 52 D8 D1 	jp	DivChainAnsVariable
  585 D1:D726 -  -  -  -  DivNumberChainPush:
  586 D1:D726 C3 7A AF D1 	jp	UnknownError
  587 D1:D72A -  -  -  -  DivNumberChainAns:
  588 D1:D72A 11 E5 C1 21 	ld	de, 021C1E5h
  589 D1:D72E C5 -  -  -  	push	bc
  590 D1:D72F E1 -  -  -  	pop	hl
  591 D1:D730 3A 83 EA D1 	ld	a, (ExprOutput)
  592 D1:D734 B7 -  -  -  	or	a
  593 D1:D735 20 02 -  -  	jr	nz, +_
  594 D1:D737 1E D5 -  -  	ld	e, 0D5h
  595 D1:D739 CD 9C AC D1 _:	call	InsertDEHL															;	push hl/de \ pop bc \ ld hl, *
  596 D1:D73D 18 74 -  -  	jr	DivInsert
  597 D1:D73F -  -  -  -  DivNumberFunction:
  598 D1:D73F 7B -  -  -  	ld	a, e
  599 D1:D740 C5 -  -  -  	push	bc
  600 D1:D741 06 00 -  -  		ld	b, OutputInBC
  601 D1:D743 CD 47 AD D1 		call	GetFunction
  602 D1:D747 3E 21 -  -  		ld	a, 021h
  603 D1:D749 E1 -  -  -  	pop	hl
  604 D1:D74A CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  605 D1:D74E 18 63 -  -  	jr	DivInsert
  606 D1:D750 -  -  -  -  DivVariableXXX:
  607 D1:D750 DD 7E FC -  	ld	a, (ix-4)
  608 D1:D753 B7 -  -  -  	or	a
  609 D1:D754 28 12 -  -  	jr	z, DivVariableNumber
  610 D1:D756 3D -  -  -  	dec	a
  611 D1:D757 28 17 -  -  	jr	z, DivVariableVariable
  612 D1:D759 3D -  -  -  	dec	a
  613 D1:D75A 28 2E -  -  	jr	z, DivVariableChainPush
  614 D1:D75C 3D -  -  -  	dec	a
  615 D1:D75D 28 2F -  -  	jr	z, DivVariableChainAns
  616 D1:D75F 3D -  -  -  	dec	a
  617 D1:D760 CA A8 D7 D1 	jp	z, DivVariableFunction
  618 D1:D764 C3 DD AE D1 	jp	DivError
  619 D1:D768 -  -  -  -  DivVariableNumber:
  620 D1:D768 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  621 D1:D76C C3 24 D8 D1 	jp	DivChainAnsNumber
  622 D1:D770 -  -  -  -  DivVariableVariable:
  623 D1:D770 79 -  -  -  	ld	a, c
  624 D1:D771 BB -  -  -  	cp	e
  625 D1:D772 20 0E -  -  	jr	nz, +_
  626 D1:D774 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  627 D1:D778 36 00 -  -  	ld	(hl), typeNumber
  628 D1:D77A 11 01 00 00 	ld	de, 1
  629 D1:D77E 23 -  -  -  	inc	hl
  630 D1:D77F ED 1F -  -  	ld	(hl), de
  631 D1:D781 C9 -  -  -  	ret
  632 D1:D782 CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  633 D1:D786 C3 52 D8 D1 	jp	DivChainAnsVariable
  634 D1:D78A -  -  -  -  DivVariableChainPush:
  635 D1:D78A C3 7A AF D1 	jp	UnknownError
  636 D1:D78E -  -  -  -  DivVariableChainAns:
  637 D1:D78E 3A 83 EA D1 	ld	a, (ExprOutput)
  638 D1:D792 87 -  -  -  	add	a, a
  639 D1:D793 87 -  -  -  	add	a, a
  640 D1:D794 87 -  -  -  	add	a, a
  641 D1:D795 87 -  -  -  	add	a, a
  642 D1:D796 C6 D5 -  -  	add	a, 0D5h
  643 D1:D798 CD 1B AD D1 	call	InsertA															;	push hl/de
  644 D1:D79C 3E C1 -  -  	ld	a, 0C1h
  645 D1:D79E CD 1B AD D1 	call	InsertA															;	pop bc
  646 D1:D7A2 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  647 D1:D7A6 18 0B -  -  	jr	DivInsert
  648 D1:D7A8 -  -  -  -  DivVariableFunction:
  649 D1:D7A8 7B -  -  -  	ld	a, e
  650 D1:D7A9 06 00 -  -  	ld	b, OutputInBC
  651 D1:D7AB CD 47 AD D1 	call	GetFunction
  652 D1:D7AF CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  653 D1:D7B3 -  -  -  -  DivInsert:
  654 D1:D7B3 3E 00 -  -  	ld	a, OutputIsInDE
  655 D1:D7B5 32 84 EA D1 	ld	(ExprOutput2), a
  656 D1:D7B9 3E CD -  -  	ld	a, 0CDh
  657 D1:D7BB 21 44 01 00 	ld	hl, __idvrmu
  658 D1:D7BF C3 4C AC D1 	jp	InsertAHL															;	call __idvrmu
  659 D1:D7C3 -  -  -  -  DivChainPushXXX:
  660 D1:D7C3 DD 7E FC -  	ld	a, (ix-4)
  661 D1:D7C6 B7 -  -  -  	or	a
  662 D1:D7C7 28 12 -  -  	jr	z, DivChainPushNumber
  663 D1:D7C9 3D -  -  -  	dec	a
  664 D1:D7CA 28 17 -  -  	jr	z, DivChainPushVariable
  665 D1:D7CC 3D -  -  -  	dec	a
  666 D1:D7CD 28 1C -  -  	jr	z, DivChainPushChainPush
  667 D1:D7CF 3D -  -  -  	dec	a
  668 D1:D7D0 28 1D -  -  	jr	z, DivChainPushChainAns
  669 D1:D7D2 3D -  -  -  	dec	a
  670 D1:D7D3 CA 04 D8 D1 	jp	z, DivChainPushFunction
  671 D1:D7D7 C3 DD AE D1 	jp	DivError
  672 D1:D7DB -  -  -  -  DivChainPushNumber:
  673 D1:D7DB 3E E1 -  -  	ld	a, 0E1h
  674 D1:D7DD CD 1B AD D1 	call	InsertA															;	pop hl
  675 D1:D7E1 18 41 -  -  	jr	DivChainAnsNumber
  676 D1:D7E3 -  -  -  -  DivChainPushVariable:
  677 D1:D7E3 3E E1 -  -  	ld	a, 0E1h
  678 D1:D7E5 CD 1B AD D1 	call	InsertA															;	pop hl
  679 D1:D7E9 18 67 -  -  	jr	DivChainAnsVariable
  680 D1:D7EB -  -  -  -  DivChainPushChainPush:
  681 D1:D7EB C3 7A AF D1 	jp	UnknownError
  682 D1:D7EF -  -  -  -  DivChainPushChainAns:
  683 D1:D7EF 21 E5 C1 E1 	ld	hl, 0E1C1E5h
  684 D1:D7F3 3A 83 EA D1 	ld	a, (ExprOutput)
  685 D1:D7F7 87 -  -  -  	add	a, a
  686 D1:D7F8 87 -  -  -  	add	a, a
  687 D1:D7F9 87 -  -  -  	add	a, a
  688 D1:D7FA 87 -  -  -  	add	a, a
  689 D1:D7FB C6 D5 -  -  	add	a, 0D5h
  690 D1:D7FD 6F -  -  -  	ld	l, a
  691 D1:D7FE CD 50 AC D1 	call	InsertHL															;	push hl/de \ pop bc \ pop hl
  692 D1:D802 18 AF -  -  _:	jr	DivInsert
  693 D1:D804 -  -  -  -  DivChainPushFunction:
  694 D1:D804 3E E1 -  -  	ld	a, 0E1h
  695 D1:D806 CD 1B AD D1 	call	InsertA															;	pop hl
  696 D1:D80A 18 58 -  -  	jr	DivChainAnsFunction
  697 D1:D80C -  -  -  -  DivChainAnsXXX:
  698 D1:D80C DD 7E FC -  	ld	a, (ix-4)
  699 D1:D80F B7 -  -  -  	or	a
  700 D1:D810 28 12 -  -  	jr	z, DivChainAnsNumber
  701 D1:D812 3D -  -  -  	dec	a
  702 D1:D813 28 3D -  -  	jr	z, DivChainAnsVariable
  703 D1:D815 3D -  -  -  	dec	a
  704 D1:D816 28 44 -  -  	jr	z, DivChainAnsChainPush
  705 D1:D818 3D -  -  -  	dec	a
  706 D1:D819 28 45 -  -  	jr	z, DivChainAnsChainAns
  707 D1:D81B 3D -  -  -  	dec	a
  708 D1:D81C CA 64 D8 D1 	jp	z, DivChainAnsFunction
  709 D1:D820 C3 DD AE D1 	jp	DivError
  710 D1:D824 -  -  -  -  DivChainAnsNumber:
  711 D1:D824 CD C7 AC D1 	call	MaybeChangeDEToHL
  712 D1:D828 3E 01 -  -  	ld	a, 001h
  713 D1:D82A EB -  -  -  	ex	de, hl
  714 D1:D82B 11 00 01 00 	ld	de, 256
  715 D1:D82F B7 -  -  -  	or	a
  716 D1:D830 ED 52 -  -  	sbc	hl, de
  717 D1:D832 30 17 -  -  	jr	nc, +_
  718 D1:D834 19 -  -  -  	add	hl, de
  719 D1:D835 4D -  -  -  	ld	c, l
  720 D1:D836 3E 3E -  -  	ld	a, 03Eh
  721 D1:D838 CD 1B AD D1 	call	InsertA															;	ld a, *
  722 D1:D83C 79 -  -  -  	ld	a, c
  723 D1:D83D CD 1B AD D1 	call	InsertA															;	ld a, *
  724 D1:D841 3E CD -  -  	ld	a, 0CDh
  725 D1:D843 21 90 1D 02 	ld	hl, _DivHLByA
  726 D1:D847 C3 4C AC D1 	jp	InsertAHL															;	call _DivHLByA
  727 D1:D84B 19 -  -  -  _:	add	hl, de
  728 D1:D84C CD 4C AC D1 	call	InsertAHL															;	ld bc, *
  729 D1:D850 18 B0 -  -  _:	jr	---_
  730 D1:D852 -  -  -  -  DivChainAnsVariable:
  731 D1:D852 CD C7 AC D1 	call	MaybeChangeDEToHL
  732 D1:D856 CD 8A AC D1 	call	InsertIXC
  733 D1:D85A 18 F4 -  -  	jr	-_
  734 D1:D85C -  -  -  -  DivChainAnsChainPush:
  735 D1:D85C C3 7A AF D1 	jp	UnknownError
  736 D1:D860 -  -  -  -  DivChainAnsChainAns:
  737 D1:D860 C3 7A AF D1 	jp	UnknownError
  738 D1:D864 -  -  -  -  DivChainAnsFunction:
  739 D1:D864 3A 83 EA D1 	ld	a, (ExprOutput)
  740 D1:D868 87 -  -  -  	add	a, a
  741 D1:D869 87 -  -  -  	add	a, a
  742 D1:D86A 87 -  -  -  	add	a, a
  743 D1:D86B 87 -  -  -  	add	a, a
  744 D1:D86C C6 D5 -  -  	add	a, 0D5h
  745 D1:D86E CD 1B AD D1 	call	InsertA															;	push hl/de
  746 D1:D872 7B -  -  -  	ld	a, e
  747 D1:D873 06 00 -  -  	ld	b, OutputInBC
  748 D1:D875 CD 47 AD D1 	call	GetFunction
  749 D1:D879 3E E1 -  -  	ld	a, 0E1h
  750 D1:D87B CD 1B AD D1 	call	InsertA															;	pop hl
  751 D1:D87F 18 CF -  -  _:	jr	--_
  752 D1:D881 -  -  -  -  DivFunctionXXX:
  753 D1:D881 DD 7E FC -  	ld	a, (ix-4)
  754 D1:D884 B7 -  -  -  	or	a
  755 D1:D885 28 10 -  -  	jr	z, DivFunctionNumber
  756 D1:D887 3D -  -  -  	dec	a
  757 D1:D888 28 18 -  -  	jr	z, DivFunctionVariable
  758 D1:D88A 3D -  -  -  	dec	a
  759 D1:D88B 28 20 -  -  	jr	z, DivFunctionChainPush
  760 D1:D88D 3D -  -  -  	dec	a
  761 D1:D88E 28 21 -  -  	jr	z, DivFunctionChainAns
  762 D1:D890 3D -  -  -  	dec	a
  763 D1:D891 28 3B -  -  	jr	z, DivFunctionFunction
  764 D1:D893 C3 DD AE D1 	jp	DivError
  765 D1:D897 -  -  -  -  DivFunctionNumber:
  766 D1:D897 79 -  -  -  	ld	a, c
  767 D1:D898 06 02 -  -  	ld	b, OutputInHL
  768 D1:D89A CD 47 AD D1 	call	GetFunction
  769 D1:D89E C3 24 D8 D1 	jp	DivChainAnsNumber
  770 D1:D8A2 -  -  -  -  DivFunctionVariable:
  771 D1:D8A2 79 -  -  -  	ld	a, c
  772 D1:D8A3 06 02 -  -  	ld	b, OutputInHL
  773 D1:D8A5 CD 47 AD D1 	call	GetFunction
  774 D1:D8A9 C3 52 D8 D1 	jp	DivChainAnsVariable
  775 D1:D8AD -  -  -  -  DivFunctionChainPush:
  776 D1:D8AD C3 7A AF D1 	jp	UnknownError
  777 D1:D8B1 -  -  -  -  DivFunctionChainAns:
  778 D1:D8B1 3A 83 EA D1 	ld	a, (ExprOutput)
  779 D1:D8B5 87 -  -  -  	add	a, a
  780 D1:D8B6 87 -  -  -  	add	a, a
  781 D1:D8B7 87 -  -  -  	add	a, a
  782 D1:D8B8 87 -  -  -  	add	a, a
  783 D1:D8B9 C6 D5 -  -  	add	a, 0D5h
  784 D1:D8BB CD 1B AD D1 	call	InsertA															;	push hl/de
  785 D1:D8BF 3E C1 -  -  	ld	a, 0C1h
  786 D1:D8C1 CD 1B AD D1 	call	InsertA															;	pop bc
  787 D1:D8C5 79 -  -  -  	ld	a, c
  788 D1:D8C6 06 02 -  -  	ld	b, OutputInHL
  789 D1:D8C8 CD 47 AD D1 	call	GetFunction
  790 D1:D8CC 18 B1 -  -  	jr	-_
  791 D1:D8CE -  -  -  -  DivFunctionFunction:
  792 D1:D8CE 7B -  -  -  	ld	a, e
  793 D1:D8CF 06 00 -  -  	ld	b, OutputInBC
  794 D1:D8D1 CD 47 AD D1 	call	GetFunction
  795 D1:D8D5 79 -  -  -  	ld	a, c
  796 D1:D8D6 06 02 -  -  	ld	b, OutputInHL
  797 D1:D8D8 CD 47 AD D1 	call	GetFunction
  798 D1:D8DC 18 A1 -  -  	jr	-_
  799 D1:D8DE -  -  -  -  	
  800 D1:D8DE -  -  -  -  MulNumberXXX:
  801 D1:D8DE DD 7E FC -  	ld	a, (ix-4)
  802 D1:D8E1 B7 -  -  -  	or	a
  803 D1:D8E2 28 10 -  -  	jr	z, MulNumberNumber
  804 D1:D8E4 3D -  -  -  	dec	a
  805 D1:D8E5 28 1A -  -  	jr	z, MulNumberVariable
  806 D1:D8E7 3D -  -  -  	dec	a
  807 D1:D8E8 28 1E -  -  	jr	z, MulNumberChainPush
  808 D1:D8EA 3D -  -  -  	dec	a
  809 D1:D8EB 28 1F -  -  	jr	z, MulNumberChainAns
  810 D1:D8ED 3D -  -  -  	dec	a
  811 D1:D8EE 28 22 -  -  	jr	z, MulNumberFunction
  812 D1:D8F0 C3 E1 AE D1 	jp	MulError
  813 D1:D8F4 -  -  -  -  MulNumberNumber:
  814 D1:D8F4 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  815 D1:D8F8 EB -  -  -  	ex	de, hl
  816 D1:D8F9 CD 54 01 00 	call	__imulu
  817 D1:D8FD DD 2F F9 -  	ld	(ix-7), hl
  818 D1:D900 C9 -  -  -  	ret
  819 D1:D901 -  -  -  -  MulNumberVariable:
  820 D1:D901 C5 -  -  -  	push	bc
  821 D1:D902 E1 -  -  -  	pop	hl
  822 D1:D903 EB -  -  -  	ex	de, hl
  823 D1:D904 E5 -  -  -  	push	hl
  824 D1:D905 C1 -  -  -  	pop	bc
  825 D1:D906 18 2B -  -  	jr	MulVariableNumber
  826 D1:D908 -  -  -  -  MulNumberChainPush:
  827 D1:D908 C3 7A AF D1 	jp	UnknownError
  828 D1:D90C -  -  -  -  MulNumberChainAns:
  829 D1:D90C C5 -  -  -  	push	bc
  830 D1:D90D D1 -  -  -  	pop	de
  831 D1:D90E C3 CE D9 D1 	jp	MulChainAnsNumber
  832 D1:D912 -  -  -  -  MulNumberFunction:
  833 D1:D912 C5 -  -  -  	push	bc
  834 D1:D913 E1 -  -  -  	pop	hl
  835 D1:D914 EB -  -  -  	ex	de, hl
  836 D1:D915 E5 -  -  -  	push	hl
  837 D1:D916 C1 -  -  -  	pop	bc
  838 D1:D917 C3 8D DA D1 	jp	MulFunctionNumber
  839 D1:D91B -  -  -  -  MulVariableXXX:
  840 D1:D91B DD 7E FC -  	ld	a, (ix-4)
  841 D1:D91E B7 -  -  -  	or	a
  842 D1:D91F 28 12 -  -  	jr	z, MulVariableNumber
  843 D1:D921 3D -  -  -  	dec	a
  844 D1:D922 28 17 -  -  	jr	z, MulVariableVariable
  845 D1:D924 3D -  -  -  	dec	a
  846 D1:D925 28 1C -  -  	jr	z, MulVariableChainPush
  847 D1:D927 3D -  -  -  	dec	a
  848 D1:D928 28 24 -  -  	jr	z, MulVariableChainAns
  849 D1:D92A 3D -  -  -  	dec	a
  850 D1:D92B CA 53 D9 D1 	jp	z, MulVariableFunction
  851 D1:D92F C3 E1 AE D1 	jp	MulError
  852 D1:D933 -  -  -  -  MulVariableNumber:
  853 D1:D933 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  854 D1:D937 C3 CE D9 D1 	jp	MulChainAnsNumber
  855 D1:D93B -  -  -  -  MulVariableVariable:
  856 D1:D93B CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  857 D1:D93F C3 38 DA D1 	jp	MulChainAnsVariable
  858 D1:D943 -  -  -  -  MulVariableChainPush:
  859 D1:D943 3E E1 -  -  	ld	a, 0E1h
  860 D1:D945 CD 1B AD D1 	call	InsertA															;	pop hl
  861 D1:D949 59 -  -  -  	ld	e, c
  862 D1:D94A C3 38 DA D1 	jp	MulChainAnsVariable
  863 D1:D94E -  -  -  -  MulVariableChainAns:
  864 D1:D94E 59 -  -  -  	ld	e, c
  865 D1:D94F C3 38 DA D1 	jp	MulChainAnsVariable
  866 D1:D953 -  -  -  -  MulVariableFunction:
  867 D1:D953 7B -  -  -  	ld	a, e
  868 D1:D954 06 02 -  -  	ld	b, OutputInHL
  869 D1:D956 CD 47 AD D1 	call	GetFunction
  870 D1:D95A CD 8A AC D1 	call	InsertIXC
  871 D1:D95E 21 54 01 00 	ld	hl, __imulu
  872 D1:D962 C3 6E AC D1 	jp	InsertCallHL															;	call __imulu
  873 D1:D966 -  -  -  -  MulChainPushXXX:
  874 D1:D966 DD 7E FC -  	ld	a, (ix-4)
  875 D1:D969 B7 -  -  -  	or	a
  876 D1:D96A 28 12 -  -  	jr	z, MulChainPushNumber
  877 D1:D96C 3D -  -  -  	dec	a
  878 D1:D96D 28 17 -  -  	jr	z, MulChainPushVariable
  879 D1:D96F 3D -  -  -  	dec	a
  880 D1:D970 28 1E -  -  	jr	z, MulChainPushChainPush
  881 D1:D972 3D -  -  -  	dec	a
  882 D1:D973 28 1F -  -  	jr	z, MulChainPushChainAns
  883 D1:D975 3D -  -  -  	dec	a
  884 D1:D976 CA A8 D9 D1 	jp	z, MulChainPushFunction
  885 D1:D97A C3 E1 AE D1 	jp	MulError
  886 D1:D97E -  -  -  -  MulChainPushNumber:
  887 D1:D97E 3E E1 -  -  	ld	a, 0E1h
  888 D1:D980 CD 1B AD D1 	call	InsertA															;	pop hl
  889 D1:D984 18 48 -  -  	jr	MulChainAnsNumber
  890 D1:D986 -  -  -  -  MulChainPushVariable:
  891 D1:D986 3E E1 -  -  	ld	a, 0E1h
  892 D1:D988 CD 1B AD D1 	call	InsertA															;	pop hl
  893 D1:D98C C3 38 DA D1 	jp	MulChainAnsVariable
  894 D1:D990 -  -  -  -  MulChainPushChainPush:
  895 D1:D990 C3 7A AF D1 	jp	UnknownError
  896 D1:D994 -  -  -  -  MulChainPushChainAns:
  897 D1:D994 CD C7 AC D1 	call	MaybeChangeDEToHL
  898 D1:D998 3E C1 -  -  	ld	a, 0C1h
  899 D1:D99A CD 1B AD D1 	call	InsertA															;	pop bc
  900 D1:D99E 3E CD -  -  	ld	a, 0CDh
  901 D1:D9A0 21 54 01 00 	ld	hl, __imulu
  902 D1:D9A4 C3 4C AC D1 	jp	InsertAHL															;	call __imulu
  903 D1:D9A8 -  -  -  -  MulChainPushFunction:
  904 D1:D9A8 3E E1 -  -  	ld	a, 0E1h
  905 D1:D9AA CD 1B AD D1 	call	InsertA															;	pop hl
  906 D1:D9AE C3 52 DA D1 	jp	MulChainAnsFunction
  907 D1:D9B2 -  -  -  -  MulChainAnsXXX:
  908 D1:D9B2 DD 7E FC -  	ld	a, (ix-4)
  909 D1:D9B5 B7 -  -  -  	or	a
  910 D1:D9B6 28 16 -  -  	jr	z, MulChainAnsNumber
  911 D1:D9B8 3D -  -  -  	dec	a
  912 D1:D9B9 28 7D -  -  	jr	z, MulChainAnsVariable
  913 D1:D9BB 3D -  -  -  	dec	a
  914 D1:D9BC CA 4A DA D1 	jp	z, MulChainAnsChainPush
  915 D1:D9C0 3D -  -  -  	dec	a
  916 D1:D9C1 CA 4E DA D1 	jp	z, MulChainAnsChainAns
  917 D1:D9C5 3D -  -  -  	dec	a
  918 D1:D9C6 CA 52 DA D1 	jp	z, MulChainAnsFunction
  919 D1:D9CA C3 E1 AE D1 	jp	MulError
  920 D1:D9CE -  -  -  -  MulChainAnsNumber:
  921 D1:D9CE CD 4C 1D 02 	call	_ChkDEIs0
  922 D1:D9D2 20 08 -  -  	jr	nz, +_
  923 D1:D9D4 21 B7 ED 62 	ld	hl, 062EDB7h
  924 D1:D9D8 C3 50 AC D1 	jp	InsertHL																;	or a \ sbc hl, hl
  925 D1:D9DC CD C7 AC D1 _:	call	MaybeChangeDEToHL
  926 D1:D9E0 1B -  -  -  	dec	de
  927 D1:D9E1 CD 4C 1D 02 	call	_ChkDEIs0
  928 D1:D9E5 C8 -  -  -  	ret	z
  929 D1:D9E6 13 -  -  -  	inc	de
  930 D1:D9E7 EB -  -  -  	ex	de, hl
  931 D1:D9E8 11 15 00 00 	ld	de, 21
  932 D1:D9EC B7 -  -  -  	or	a
  933 D1:D9ED ED 52 -  -  	sbc	hl, de
  934 D1:D9EF 30 16 -  -  	jr	nc, ++_
  935 D1:D9F1 19 -  -  -  	add	hl, de
  936 D1:D9F2 2D -  -  -  	dec	l
  937 D1:D9F3 2D -  -  -  	dec	l
  938 D1:D9F4 26 0A -  -  	ld	h, 10
  939 D1:D9F6 ED 6C -  -  	mlt	hl
  940 D1:D9F8 11 62 ED D1 	ld	de, MulTable
  941 D1:D9FC 19 -  -  -  	add	hl, de
  942 D1:D9FD 46 -  -  -  	ld	b, (hl)
  943 D1:D9FE 23 -  -  -  _:	inc	hl
  944 D1:D9FF 7E -  -  -  	ld	a, (hl)
  945 D1:DA00 CD 1B AD D1 	call	InsertA
  946 D1:DA04 10 F8 -  -  	djnz	-_
  947 D1:DA06 C9 -  -  -  	ret
  948 D1:DA07 19 -  -  -  _:	add	hl, de
  949 D1:DA08 11 00 01 00 	ld	de, 256
  950 D1:DA0C B7 -  -  -  	or	a
  951 D1:DA0D ED 52 -  -  	sbc	hl, de
  952 D1:DA0F 38 10 -  -  	jr	c, +_
  953 D1:DA11 3E 01 -  -  	ld	a, 001h
  954 D1:DA13 CD 4C AC D1 	call	InsertAHL															;	ld bc, *
  955 D1:DA17 3E CD -  -  	ld	a, 0CDh
  956 D1:DA19 21 54 01 00 	ld	hl, __imulu
  957 D1:DA1D C3 4C AC D1 	jp	InsertAHL															;	call __imulu
  958 D1:DA21 19 -  -  -  _:	add	hl, de
  959 D1:DA22 4D -  -  -  	ld	c, l
  960 D1:DA23 3E 3E -  -  	ld	a, 03Eh
  961 D1:DA25 CD 1B AD D1 	call	InsertA															;	ld a, *
  962 D1:DA29 79 -  -  -  	ld	a, c
  963 D1:DA2A CD 1B AD D1 	call	InsertA															;	ld a, *
  964 D1:DA2E 3E CD -  -  	ld	a, 0CDh
  965 D1:DA30 21 50 01 00 	ld	hl, __imul_b
  966 D1:DA34 C3 4C AC D1 	jp	InsertAHL															;	call __imul_b
  967 D1:DA38 -  -  -  -  MulChainAnsVariable:
  968 D1:DA38 CD C7 AC D1 	call	MaybeChangeDEToHL
  969 D1:DA3C CD 8A AC D1 	call	InsertIXC															;	ld bc, (ix+*)
  970 D1:DA40 3E CD -  -  	ld	a, 0CDh
  971 D1:DA42 21 54 01 00 	ld	hl, __imulu
  972 D1:DA46 C3 4C AC D1 	jp	InsertAHL															;	call __imulu
  973 D1:DA4A -  -  -  -  MulChainAnsChainPush:
  974 D1:DA4A C3 7A AF D1 	jp	UnknownError
  975 D1:DA4E -  -  -  -  MulChainAnsChainAns:
  976 D1:DA4E C3 7A AF D1 	jp	UnknownError
  977 D1:DA52 -  -  -  -  MulChainAnsFunction:
  978 D1:DA52 3A 83 EA D1 	ld	a, (ExprOutput)
  979 D1:DA56 87 -  -  -  	add	a, a
  980 D1:DA57 87 -  -  -  	add	a, a
  981 D1:DA58 87 -  -  -  	add	a, a
  982 D1:DA59 87 -  -  -  	add	a, a
  983 D1:DA5A C6 D5 -  -  	add	a, 0D5h
  984 D1:DA5C CD 1B AD D1 	call	InsertA															;	push hl/de
  985 D1:DA60 7B -  -  -  	ld	a, e
  986 D1:DA61 06 00 -  -  	ld	b, OutputInBC
  987 D1:DA63 CD 47 AD D1 	call	GetFunction
  988 D1:DA67 3E E1 -  -  	ld	a, 0E1h
  989 D1:DA69 CD 1B AD D1 	call	InsertA															;	pop hl
  990 D1:DA6D 3E CD -  -  	ld	a, 0CDh
  991 D1:DA6F 21 54 01 00 	ld	hl, __imulu
  992 D1:DA73 C3 4C AC D1 	jp	InsertAHL															;	call __imulu
  993 D1:DA77 -  -  -  -  MulFunctionXXX:
  994 D1:DA77 DD 7E FC -  	ld	a, (ix-4)
  995 D1:DA7A B7 -  -  -  	or	a
  996 D1:DA7B 28 10 -  -  	jr	z, MulFunctionNumber
  997 D1:DA7D 3D -  -  -  	dec	a
  998 D1:DA7E 28 18 -  -  	jr	z, MulFunctionVariable
  999 D1:DA80 3D -  -  -  	dec	a
 1000 D1:DA81 28 20 -  -  	jr	z, MulFunctionChainPush
 1001 D1:DA83 3D -  -  -  	dec	a
 1002 D1:DA84 28 21 -  -  	jr	z, MulFunctionChainAns
 1003 D1:DA86 3D -  -  -  	dec	a
 1004 D1:DA87 28 21 -  -  	jr	z, MulFunctionFunction
 1005 D1:DA89 C3 E1 AE D1 	jp	MulError
 1006 D1:DA8D -  -  -  -  MulFunctionNumber:
 1007 D1:DA8D 79 -  -  -  	ld	a, c
 1008 D1:DA8E 06 02 -  -  	ld	b, OutputInHL
 1009 D1:DA90 CD 47 AD D1 	call	GetFunction
 1010 D1:DA94 C3 CE D9 D1 	jp	MulChainAnsNumber
 1011 D1:DA98 -  -  -  -  MulFunctionVariable:
 1012 D1:DA98 79 -  -  -  	ld	a, c
 1013 D1:DA99 06 02 -  -  	ld	b, OutputInHL
 1014 D1:DA9B CD 47 AD D1 	call	GetFunction
 1015 D1:DA9F C3 38 DA D1 	jp	MulChainAnsVariable
 1016 D1:DAA3 -  -  -  -  MulFunctionChainPush:
 1017 D1:DAA3 C3 7A AF D1 	jp	UnknownError
 1018 D1:DAA7 -  -  -  -  MulFunctionChainAns:
 1019 D1:DAA7 59 -  -  -  	ld	e, c
 1020 D1:DAA8 18 A8 -  -  	jr	MulChainAnsFunction
 1021 D1:DAAA -  -  -  -  MulFunctionFunction:
 1022 D1:DAAA 7B -  -  -  	ld	a, e
 1023 D1:DAAB 06 00 -  -  	ld	b, OutputInBC
 1024 D1:DAAD CD 47 AD D1 	call	GetFunction
 1025 D1:DAB1 79 -  -  -  	ld	a, c
 1026 D1:DAB2 06 02 -  -  	ld	b, OutputInHL
 1027 D1:DAB4 CD 47 AD D1 	call	GetFunction
 1028 D1:DAB8 3E CD -  -  	ld	a, 0CDh
 1029 D1:DABA 21 54 01 00 	ld	hl, __imulu
 1030 D1:DABE C3 4C AC D1 	jp	InsertAHL															;	call __imulu
 1031 D1:DAC2 -  -  -  -  
 1032 D1:DAC2 -  -  -  -  SwapLEToGE:
 1033 D1:DAC2 3E 6E -  -  	ld	a, tGE
 1034 D1:DAC4 18 02 -  -  	jr	$+4	
 1035 D1:DAC6 -  -  -  -  SwapLTToGT:
 1036 D1:DAC6 3E 6C -  -  	ld	a, tGT
 1037 D1:DAC8 C5 -  -  -  	push	bc
 1038 D1:DAC9 E1 -  -  -  	pop	hl
 1039 D1:DACA DD 4E FC -  	ld	c, (ix-4)
 1040 D1:DACD DD 46 F8 -  	ld	b, (ix-8)
 1041 D1:DAD0 DD 70 FC -  	ld	(ix-4), b
 1042 D1:DAD3 DD 71 F8 -  	ld	(ix-8), c
 1043 D1:DAD6 EB -  -  -  	ex	de, hl
 1044 D1:DAD7 E5 -  -  -  	push	hl
 1045 D1:DAD8 C1 -  -  -  	pop	bc
 1046 D1:DAD9 C9 -  -  -  	ret
 1047 D1:DADA -  -  -  -  
 1048 D1:DADA -  -  -  -  GLETNumberXXX:
 1049 D1:DADA DD 7E FC -  	ld	a, (ix-4)
 1050 D1:DADD B7 -  -  -  	or	a
 1051 D1:DADE 28 10 -  -  	jr	z, GLETNumberNumber
 1052 D1:DAE0 3D -  -  -  	dec	a
 1053 D1:DAE1 28 25 -  -  	jr	z, GLETNumberVariable
 1054 D1:DAE3 3D -  -  -  	dec	a
 1055 D1:DAE4 28 2E -  -  	jr	z, GLETNumberChainPush
 1056 D1:DAE6 3D -  -  -  	dec	a
 1057 D1:DAE7 28 2F -  -  	jr	z, GLETNumberChainAns
 1058 D1:DAE9 3D -  -  -  	dec	a
 1059 D1:DAEA 28 3A -  -  	jr	z, GLETNumberFunction
 1060 D1:DAEC C3 E5 AE D1 	jp	GLETError
 1061 D1:DAF0 -  -  -  -  GLETNumberNumber:
 1062 D1:DAF0 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1063 D1:DAF4 C5 -  -  -  	push	bc
 1064 D1:DAF5 E1 -  -  -  	pop	hl
 1065 D1:DAF6 3A 1F EA D0 	ld	a, (tempToken)
 1066 D1:DAFA FE 6E -  -  	cp	tGE
 1067 D1:DAFC 28 01 -  -  	jr	z, +_
 1068 D1:DAFE 37 -  -  -  	scf
 1069 D1:DAFF ED 52 -  -  _:	sbc	hl, de
 1070 D1:DB01 ED 62 -  -  	sbc	hl, hl
 1071 D1:DB03 23 -  -  -  	inc	hl
 1072 D1:DB04 DD 2F F9 -  	ld	(ix-7), hl
 1073 D1:DB07 C9 -  -  -  	ret
 1074 D1:DB08 -  -  -  -  GLETNumberVariable:
 1075 D1:DB08 3E 21 -  -  	ld	a, 021h
 1076 D1:DB0A C5 -  -  -  	push	bc
 1077 D1:DB0B E1 -  -  -  	pop	hl
 1078 D1:DB0C CD 4C AC D1 	call	InsertAHL															;	ld hl, *
 1079 D1:DB10 C3 24 DC D1 	jp	GLETChainAnsVariable
 1080 D1:DB14 -  -  -  -  GLETNumberChainPush:
 1081 D1:DB14 C3 7A AF D1 	jp	UnknownError
 1082 D1:DB18 -  -  -  -  GLETNumberChainAns:
 1083 D1:DB18 CD BD AC D1 	call	MaybeChangeHLToDE
 1084 D1:DB1C 3E 21 -  -  	ld	a, 021h
 1085 D1:DB1E C5 -  -  -  	push	bc
 1086 D1:DB1F E1 -  -  -  	pop	hl
 1087 D1:DB20 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
 1088 D1:DB24 18 6F -  -  	jr	GLETInsert
 1089 D1:DB26 -  -  -  -  GLETNumberFunction:
 1090 D1:DB26 7B -  -  -  	ld	a, e
 1091 D1:DB27 C5 -  -  -  	push	bc
 1092 D1:DB28 06 01 -  -  		ld	b, OutputInDE
 1093 D1:DB2A CD 47 AD D1 		call	GetFunction
 1094 D1:DB2E 3E 21 -  -  		ld	a, 021h
 1095 D1:DB30 E1 -  -  -  	pop	hl
 1096 D1:DB31 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
 1097 D1:DB35 18 5E -  -  	jr	GLETInsert
 1098 D1:DB37 -  -  -  -  GLETVariableXXX:
 1099 D1:DB37 DD 7E FC -  	ld	a, (ix-4)
 1100 D1:DB3A B7 -  -  -  	or	a
 1101 D1:DB3B 28 12 -  -  	jr	z, GLETVariableNumber
 1102 D1:DB3D 3D -  -  -  	dec	a
 1103 D1:DB3E 28 17 -  -  	jr	z, GLETVariableVariable
 1104 D1:DB40 3D -  -  -  	dec	a
 1105 D1:DB41 28 39 -  -  	jr	z, GLETVariableChainPush
 1106 D1:DB43 3D -  -  -  	dec	a
 1107 D1:DB44 28 3A -  -  	jr	z, GLETVariableChainAns
 1108 D1:DB46 3D -  -  -  	dec	a
 1109 D1:DB47 CA 8A DB D1 	jp	z, GLETVariableFunction
 1110 D1:DB4B C3 E5 AE D1 	jp	GLETError
 1111 D1:DB4F -  -  -  -  GLETVariableNumber:
 1112 D1:DB4F CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1113 D1:DB53 C3 0A DC D1 	jp	GLETChainAnsNumber
 1114 D1:DB57 -  -  -  -  GLETVariableVariable:
 1115 D1:DB57 79 -  -  -  	ld	a, c
 1116 D1:DB58 BB -  -  -  	cp	e
 1117 D1:DB59 20 19 -  -  	jr	nz, ++_
 1118 D1:DB5B FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1119 D1:DB5F 3A 1F EA D0 	ld	a, (tempToken)
 1120 D1:DB63 D6 6C -  -  	sub	tGT
 1121 D1:DB65 28 02 -  -  	jr	z, +_
 1122 D1:DB67 3E 01 -  -  	ld	a, 1
 1123 D1:DB69 11 00 00 00 _:	ld	de, 0
 1124 D1:DB6D 5F -  -  -  	ld	e, a
 1125 D1:DB6E 36 00 -  -  	ld	(hl), typeNumber
 1126 D1:DB70 23 -  -  -  	inc	hl
 1127 D1:DB71 ED 1F -  -  	ld	(hl), de
 1128 D1:DB73 C9 -  -  -  	ret
 1129 D1:DB74 CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1130 D1:DB78 C3 24 DC D1 	jp	GLETChainAnsVariable
 1131 D1:DB7C -  -  -  -  GLETVariableChainPush:
 1132 D1:DB7C C3 7A AF D1 	jp	UnknownError
 1133 D1:DB80 -  -  -  -  GLETVariableChainAns:
 1134 D1:DB80 CD BD AC D1 	call	MaybeChangeHLToDE
 1135 D1:DB84 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1136 D1:DB88 18 0B -  -  	jr	GLETInsert
 1137 D1:DB8A -  -  -  -  GLETVariableFunction:
 1138 D1:DB8A 7B -  -  -  	ld	a, e
 1139 D1:DB8B 06 01 -  -  	ld	b, OutputInDE
 1140 D1:DB8D CD 47 AD D1 	call	GetFunction
 1141 D1:DB91 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1142 D1:DB95 -  -  -  -  GLETInsert:
 1143 D1:DB95 11 37 ED 52 	ld	de, 052ED37h
 1144 D1:DB99 21 ED 62 23 	ld	hl, 02362EDh
 1145 D1:DB9D 3A 1F EA D0 	ld	a, (tempToken)
 1146 D1:DBA1 FE 6C -  -  	cp	tGT
 1147 D1:DBA3 28 02 -  -  	jr	z, +_
 1148 D1:DBA5 1E B7 -  -  	ld	e, 0B7h
 1149 D1:DBA7 C3 9C AC D1 _:	jp	InsertDEHL															;	scf/or a \ sbc hl, de \ sbc hl, hl \ inc hl
 1150 D1:DBAB -  -  -  -  GLETChainPushXXX:
 1151 D1:DBAB DD 7E FC -  	ld	a, (ix-4)
 1152 D1:DBAE B7 -  -  -  	or	a
 1153 D1:DBAF 28 12 -  -  	jr	z, GLETChainPushNumber
 1154 D1:DBB1 3D -  -  -  	dec	a
 1155 D1:DBB2 28 17 -  -  	jr	z, GLETChainPushVariable
 1156 D1:DBB4 3D -  -  -  	dec	a
 1157 D1:DBB5 28 1C -  -  	jr	z, GLETChainPushChainPush
 1158 D1:DBB7 3D -  -  -  	dec	a
 1159 D1:DBB8 28 1D -  -  	jr	z, GLETChainPushChainAns
 1160 D1:DBBA 3D -  -  -  	dec	a
 1161 D1:DBBB CA E3 DB D1 	jp	z, GLETChainPushFunction
 1162 D1:DBBF C3 E5 AE D1 	jp	GLETError
 1163 D1:DBC3 -  -  -  -  GLETChainPushNumber:
 1164 D1:DBC3 3E E1 -  -  	ld	a, 0E1h
 1165 D1:DBC5 CD 1B AD D1 	call	InsertA															;	pop hl
 1166 D1:DBC9 18 3F -  -  	jr	GLETChainAnsNumber
 1167 D1:DBCB -  -  -  -  GLETChainPushVariable:
 1168 D1:DBCB 3E E1 -  -  	ld	a, 0E1h
 1169 D1:DBCD CD 1B AD D1 	call	InsertA															;	pop hl
 1170 D1:DBD1 18 51 -  -  	jr	GLETChainAnsVariable
 1171 D1:DBD3 -  -  -  -  GLETChainPushChainPush:
 1172 D1:DBD3 C3 7A AF D1 	jp	UnknownError
 1173 D1:DBD7 -  -  -  -  GLETChainPushChainAns:
 1174 D1:DBD7 CD BD AC D1 	call	MaybeChangeHLToDE
 1175 D1:DBDB 3E E1 -  -  	ld	a, 0E1h
 1176 D1:DBDD CD 1B AD D1 	call	InsertA															;	pop hl
 1177 D1:DBE1 18 B2 -  -  	jr	GLETInsert
 1178 D1:DBE3 -  -  -  -  GLETChainPushFunction:
 1179 D1:DBE3 7B -  -  -  	ld	a, e
 1180 D1:DBE4 06 01 -  -  	ld	b, OutputInDE
 1181 D1:DBE6 CD 47 AD D1 	call	GetFunction
 1182 D1:DBEA 3E E1 -  -  	ld	a, 0E1h
 1183 D1:DBEC CD 1B AD D1 	call	InsertA															;	pop hl
 1184 D1:DBF0 18 A3 -  -  _:	jr	GLETInsert
 1185 D1:DBF2 -  -  -  -  GLETChainAnsXXX:
 1186 D1:DBF2 DD 7E FC -  	ld	a, (ix-4)
 1187 D1:DBF5 B7 -  -  -  	or	a
 1188 D1:DBF6 28 12 -  -  	jr	z, GLETChainAnsNumber
 1189 D1:DBF8 3D -  -  -  	dec	a
 1190 D1:DBF9 28 29 -  -  	jr	z, GLETChainAnsVariable
 1191 D1:DBFB 3D -  -  -  	dec	a
 1192 D1:DBFC 28 30 -  -  	jr	z, GLETChainAnsChainPush
 1193 D1:DBFE 3D -  -  -  	dec	a
 1194 D1:DBFF 28 31 -  -  	jr	z, GLETChainAnsChainAns
 1195 D1:DC01 3D -  -  -  	dec	a
 1196 D1:DC02 CA 36 DC D1 	jp	z, GLETChainAnsFunction
 1197 D1:DC06 C3 E5 AE D1 	jp	GLETError
 1198 D1:DC0A -  -  -  -  GLETChainAnsNumber:
 1199 D1:DC0A CD C7 AC D1 	call	MaybeChangeDEToHL
 1200 D1:DC0E 21 1F EA D0 	ld	hl, tempToken
 1201 D1:DC12 7E -  -  -  	ld	a, (hl)
 1202 D1:DC13 FE 6C -  -  	cp	tGT
 1203 D1:DC15 20 04 -  -  	jr	nz, +_
 1204 D1:DC17 13 -  -  -  	inc	de
 1205 D1:DC18 3E 6E -  -  	ld	a, tGE
 1206 D1:DC1A 77 -  -  -  	ld	(hl), a
 1207 D1:DC1B 3E 11 -  -  _:	ld	a, 011h
 1208 D1:DC1D EB -  -  -  	ex	de, hl
 1209 D1:DC1E CD 4C AC D1 	call	InsertAHL															;	ld de, *
 1210 D1:DC22 18 CC -  -  	jr	--_
 1211 D1:DC24 -  -  -  -  GLETChainAnsVariable:
 1212 D1:DC24 CD C7 AC D1 	call	MaybeChangeDEToHL
 1213 D1:DC28 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1214 D1:DC2C 18 C2 -  -  	jr	--_
 1215 D1:DC2E -  -  -  -  GLETChainAnsChainPush:
 1216 D1:DC2E C3 7A AF D1 	jp	UnknownError
 1217 D1:DC32 -  -  -  -  GLETChainAnsChainAns:
 1218 D1:DC32 C3 7A AF D1 	jp	UnknownError
 1219 D1:DC36 -  -  -  -  GLETChainAnsFunction:
 1220 D1:DC36 3A 83 EA D1 	ld	a, (ExprOutput)
 1221 D1:DC3A 87 -  -  -  	add	a, a
 1222 D1:DC3B 87 -  -  -  	add	a, a
 1223 D1:DC3C 87 -  -  -  	add	a, a
 1224 D1:DC3D 87 -  -  -  	add	a, a
 1225 D1:DC3E C6 D5 -  -  	add	a, 0D5h
 1226 D1:DC40 CD 1B AD D1 	call	InsertA															;	push hl/de
 1227 D1:DC44 7B -  -  -  	ld	a, e
 1228 D1:DC45 06 01 -  -  	ld	b, OutputInDE
 1229 D1:DC47 CD 47 AD D1 	call	GetFunction
 1230 D1:DC4B 3E E1 -  -  	ld	a, 0E1h
 1231 D1:DC4D CD 1B AD D1 	call	InsertA															;	pop hl
 1232 D1:DC51 18 C8 -  -  _:	jr	--_
 1233 D1:DC53 -  -  -  -  GLETFunctionXXX:
 1234 D1:DC53 DD 7E FC -  	ld	a, (ix-4)
 1235 D1:DC56 B7 -  -  -  	or	a
 1236 D1:DC57 28 10 -  -  	jr	z, GLETFunctionNumber
 1237 D1:DC59 3D -  -  -  	dec	a
 1238 D1:DC5A 28 18 -  -  	jr	z, GLETFunctionVariable
 1239 D1:DC5C 3D -  -  -  	dec	a
 1240 D1:DC5D 28 20 -  -  	jr	z, GLETFunctionChainPush
 1241 D1:DC5F 3D -  -  -  	dec	a
 1242 D1:DC60 28 21 -  -  	jr	z, GLETFunctionChainAns
 1243 D1:DC62 3D -  -  -  	dec	a
 1244 D1:DC63 28 3B -  -  	jr	z, GLETFunctionFunction
 1245 D1:DC65 C3 E5 AE D1 	jp	GLETError
 1246 D1:DC69 -  -  -  -  GLETFunctionNumber:
 1247 D1:DC69 79 -  -  -  	ld	a, c
 1248 D1:DC6A 06 02 -  -  	ld	b, OutputInHL
 1249 D1:DC6C CD 47 AD D1 	call	GetFunction
 1250 D1:DC70 C3 0A DC D1 	jp	GLETChainAnsNumber
 1251 D1:DC74 -  -  -  -  GLETFunctionVariable:
 1252 D1:DC74 79 -  -  -  	ld	a, c
 1253 D1:DC75 06 02 -  -  	ld	b, OutputInHL
 1254 D1:DC77 CD 47 AD D1 	call	GetFunction
 1255 D1:DC7B C3 24 DC D1 	jp	GLETChainAnsVariable
 1256 D1:DC7F -  -  -  -  GLETFunctionChainPush:
 1257 D1:DC7F C3 7A AF D1 	jp	UnknownError
 1258 D1:DC83 -  -  -  -  GLETFunctionChainAns:
 1259 D1:DC83 3A 83 EA D1 	ld	a, (ExprOutput)
 1260 D1:DC87 87 -  -  -  	add	a, a
 1261 D1:DC88 87 -  -  -  	add	a, a
 1262 D1:DC89 87 -  -  -  	add	a, a
 1263 D1:DC8A 87 -  -  -  	add	a, a
 1264 D1:DC8B C6 D5 -  -  	add	a, 0D5h
 1265 D1:DC8D CD 1B AD D1 	call	InsertA															;	push hl/de
 1266 D1:DC91 79 -  -  -  	ld	a, c
 1267 D1:DC92 06 02 -  -  	ld	b, OutputInHL
 1268 D1:DC94 CD 47 AD D1 	call	GetFunction
 1269 D1:DC98 3E D1 -  -  	ld	a, 0D1h
 1270 D1:DC9A CD 1B AD D1 	call	InsertA															;	pop de
 1271 D1:DC9E 18 B1 -  -  	jr	-_
 1272 D1:DCA0 -  -  -  -  GLETFunctionFunction:
 1273 D1:DCA0 7B -  -  -  	ld	a, e
 1274 D1:DCA1 06 01 -  -  	ld	b, OutputInDE
 1275 D1:DCA3 CD 47 AD D1 	call	GetFunction
 1276 D1:DCA7 79 -  -  -  	ld	a, c
 1277 D1:DCA8 06 02 -  -  	ld	b, OutputInHL
 1278 D1:DCAA FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1279 D1:DCAE CD 47 AD D1 	call	GetFunction
 1280 D1:DCB2 18 9D -  -  	jr	-_
 1281 D1:DCB4 -  -  -  -  	
 1282 D1:DCB4 -  -  -  -  NEQNumberXXX:
 1283 D1:DCB4 DD 7E FC -  	ld	a, (ix-4)
 1284 D1:DCB7 B7 -  -  -  	or	a
 1285 D1:DCB8 28 10 -  -  	jr	z, NEQNumberNumber
 1286 D1:DCBA 3D -  -  -  	dec	a
 1287 D1:DCBB 28 33 -  -  	jr	z, NEQNumberVariable
 1288 D1:DCBD 3D -  -  -  	dec	a
 1289 D1:DCBE 28 37 -  -  	jr	z, NEQNumberChainPush
 1290 D1:DCC0 3D -  -  -  	dec	a
 1291 D1:DCC1 28 38 -  -  	jr	z, NEQNumberChainAns
 1292 D1:DCC3 3D -  -  -  	dec	a
 1293 D1:DCC4 28 3B -  -  	jr	z, NEQNumberFunction
 1294 D1:DCC6 C3 FF AE D1 	jp	NEQError
 1295 D1:DCCA -  -  -  -  NEQNumberNumber:
 1296 D1:DCCA FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1297 D1:DCCE EB -  -  -  	ex	de, hl
 1298 D1:DCCF 3A 1F EA D0 	ld	a, (tempToken)
 1299 D1:DCD3 FE 6A -  -  	cp	tEq
 1300 D1:DCD5 28 0C -  -  	jr	z, +_
 1301 D1:DCD7 B7 -  -  -  	or	a
 1302 D1:DCD8 ED 42 -  -  	sbc	hl, bc
 1303 D1:DCDA 21 00 00 00 	ld	hl, 0
 1304 D1:DCDE 28 01 -  -  	jr	z, $+3
 1305 D1:DCE0 23 -  -  -  	inc	hl
 1306 D1:DCE1 18 09 -  -  	jr	++_
 1307 D1:DCE3 ED 42 -  -  _:	sbc	hl, bc
 1308 D1:DCE5 21 00 00 00 	ld	hl, 0
 1309 D1:DCE9 20 01 -  -  	jr	nz, $+3
 1310 D1:DCEB 23 -  -  -  	inc	hl
 1311 D1:DCEC DD 2F F9 -  _:	ld	(ix-7), hl
 1312 D1:DCEF C9 -  -  -  	ret
 1313 D1:DCF0 -  -  -  -  NEQNumberVariable:
 1314 D1:DCF0 C5 -  -  -  	push	bc
 1315 D1:DCF1 E1 -  -  -  	pop	hl
 1316 D1:DCF2 EB -  -  -  	ex	de, hl
 1317 D1:DCF3 E5 -  -  -  	push	hl
 1318 D1:DCF4 C1 -  -  -  	pop	bc
 1319 D1:DCF5 18 2B -  -  	jr	NEQVariableNumber
 1320 D1:DCF7 -  -  -  -  NEQNumberChainPush:
 1321 D1:DCF7 C3 7A AF D1 	jp	UnknownError
 1322 D1:DCFB -  -  -  -  NEQNumberChainAns:
 1323 D1:DCFB C5 -  -  -  	push	bc
 1324 D1:DCFC D1 -  -  -  	pop	de
 1325 D1:DCFD C3 E7 DD D1 	jp	NEQChainAnsNumber
 1326 D1:DD01 -  -  -  -  NEQNumberFunction:
 1327 D1:DD01 C5 -  -  -  	push	bc
 1328 D1:DD02 E1 -  -  -  	pop	hl
 1329 D1:DD03 EB -  -  -  	ex	de, hl
 1330 D1:DD04 E5 -  -  -  	push	hl
 1331 D1:DD05 C1 -  -  -  	pop	bc
 1332 D1:DD06 C3 64 DE D1 	jp	NEQFunctionNumber
 1333 D1:DD0A -  -  -  -  NEQVariableXXX:
 1334 D1:DD0A DD 7E FC -  	ld	a, (ix-4)
 1335 D1:DD0D B7 -  -  -  	or	a
 1336 D1:DD0E 28 12 -  -  	jr	z, NEQVariableNumber
 1337 D1:DD10 3D -  -  -  	dec	a
 1338 D1:DD11 28 17 -  -  	jr	z, NEQVariableVariable
 1339 D1:DD13 3D -  -  -  	dec	a
 1340 D1:DD14 28 39 -  -  	jr	z, NEQVariableChainPush
 1341 D1:DD16 3D -  -  -  	dec	a
 1342 D1:DD17 28 3A -  -  	jr	z, NEQVariableChainAns
 1343 D1:DD19 3D -  -  -  	dec	a
 1344 D1:DD1A CA 58 DD D1 	jp	z, NEQVariableFunction
 1345 D1:DD1E C3 FF AE D1 	jp	NEQError
 1346 D1:DD22 -  -  -  -  NEQVariableNumber:
 1347 D1:DD22 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1348 D1:DD26 C3 E7 DD D1 	jp	NEQChainAnsNumber
 1349 D1:DD2A -  -  -  -  NEQVariableVariable:
 1350 D1:DD2A 79 -  -  -  	ld	a, c
 1351 D1:DD2B BB -  -  -  	cp	e
 1352 D1:DD2C 20 19 -  -  	jr	nz, ++_
 1353 D1:DD2E FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1354 D1:DD32 3A 1F EA D0 	ld	a, (tempToken)
 1355 D1:DD36 D6 6F -  -  	sub	tNE
 1356 D1:DD38 28 02 -  -  	jr	z, +_
 1357 D1:DD3A 3E 01 -  -  	ld	a, 1
 1358 D1:DD3C 11 00 00 00 _:	ld	de, 0
 1359 D1:DD40 5F -  -  -  	ld	e, a
 1360 D1:DD41 36 00 -  -  	ld	(hl), typeNumber
 1361 D1:DD43 23 -  -  -  	inc	hl
 1362 D1:DD44 ED 1F -  -  	ld	(hl), de
 1363 D1:DD46 C9 -  -  -  	ret
 1364 D1:DD47 CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1365 D1:DD4B C3 0B DE D1 	jp	NEQChainAnsVariable
 1366 D1:DD4F -  -  -  -  NEQVariableChainPush:
 1367 D1:DD4F C3 7A AF D1 	jp	UnknownError
 1368 D1:DD53 -  -  -  -  NEQVariableChainAns:
 1369 D1:DD53 59 -  -  -  	ld	e, c
 1370 D1:DD54 C3 0B DE D1 	jp	NEQChainAnsVariable
 1371 D1:DD58 -  -  -  -  NEQVariableFunction:
 1372 D1:DD58 7B -  -  -  	ld	a, e
 1373 D1:DD59 06 01 -  -  	ld	b, OutputInDE
 1374 D1:DD5B CD 47 AD D1 	call	GetFunction
 1375 D1:DD5F CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1376 D1:DD63 -  -  -  -  NEQInsert:
 1377 D1:DD63 21 B7 ED 52 	ld	hl, 052EDB7h
 1378 D1:DD67 CD 50 AC D1 	call	InsertHL															;	or a \ sbc hl, de
 1379 D1:DD6B 11 00 00 00 	ld	de, 0
 1380 D1:DD6F 21 20 01 23 	ld	hl, 0230120h
 1381 D1:DD73 3A 1F EA D0 	ld	a, (tempToken)
 1382 D1:DD77 FE 6A -  -  	cp	tEq
 1383 D1:DD79 28 02 -  -  	jr	z, +_
 1384 D1:DD7B 2E 28 -  -  	ld	l, 028h
 1385 D1:DD7D 3E 21 -  -  _:	ld	a, 021h
 1386 D1:DD7F C3 98 AC D1 	jp	InsertADEHL															;	ld hl, 0 \ jr [n]z, $+3 \ inc hl
 1387 D1:DD83 -  -  -  -  NEQChainPushXXX:
 1388 D1:DD83 DD 7E FC -  	ld	a, (ix-4)
 1389 D1:DD86 B7 -  -  -  	or	a
 1390 D1:DD87 28 12 -  -  	jr	z, NEQChainPushNumber
 1391 D1:DD89 3D -  -  -  	dec	a
 1392 D1:DD8A 28 17 -  -  	jr	z, NEQChainPushVariable
 1393 D1:DD8C 3D -  -  -  	dec	a
 1394 D1:DD8D 28 1C -  -  	jr	z, NEQChainPushChainPush
 1395 D1:DD8F 3D -  -  -  	dec	a
 1396 D1:DD90 28 1D -  -  	jr	z, NEQChainPushChainAns
 1397 D1:DD92 3D -  -  -  	dec	a
 1398 D1:DD93 CA C0 DD D1 	jp	z, NEQChainPushFunction
 1399 D1:DD97 C3 FF AE D1 	jp	NEQError
 1400 D1:DD9B -  -  -  -  NEQChainPushNumber:
 1401 D1:DD9B 3E E1 -  -  	ld	a, 0E1h
 1402 D1:DD9D CD 1B AD D1 	call	InsertA															;	pop hl
 1403 D1:DDA1 18 44 -  -  	jr	NEQChainAnsNumber
 1404 D1:DDA3 -  -  -  -  NEQChainPushVariable:
 1405 D1:DDA3 3E E1 -  -  	ld	a, 0E1h
 1406 D1:DDA5 CD 1B AD D1 	call	InsertA															;	pop hl
 1407 D1:DDA9 18 60 -  -  	jr	NEQChainAnsVariable
 1408 D1:DDAB -  -  -  -  NEQChainPushChainPush:
 1409 D1:DDAB C3 7A AF D1 	jp	UnknownError
 1410 D1:DDAF -  -  -  -  NEQChainPushChainAns:
 1411 D1:DDAF 3A 83 EA D1 	ld	a, (ExprOutput)
 1412 D1:DDB3 B7 -  -  -  	or	a
 1413 D1:DDB4 3E D1 -  -  	ld	a, 0D1h
 1414 D1:DDB6 20 02 -  -  	jr	nz, +_
 1415 D1:DDB8 3E E1 -  -  	ld	a, 0E1h
 1416 D1:DDBA CD 1B AD D1 _:	call	InsertA															;	pop hl/de
 1417 D1:DDBE 18 A3 -  -  	jr	NEQInsert
 1418 D1:DDC0 -  -  -  -  NEQChainPushFunction:
 1419 D1:DDC0 7B -  -  -  	ld	a, e
 1420 D1:DDC1 06 02 -  -  	ld	b, OutputInHL
 1421 D1:DDC3 CD 47 AD D1 	call	GetFunction
 1422 D1:DDC7 3E D1 -  -  	ld	a, 0D1h
 1423 D1:DDC9 CD 1B AD D1 	call	InsertA															;	pop de
 1424 D1:DDCD 18 94 -  -  _:	jr	NEQInsert
 1425 D1:DDCF -  -  -  -  NEQChainAnsXXX:
 1426 D1:DDCF DD 7E FC -  	ld	a, (ix-4)
 1427 D1:DDD2 B7 -  -  -  	or	a
 1428 D1:DDD3 28 12 -  -  	jr	z, NEQChainAnsNumber
 1429 D1:DDD5 3D -  -  -  	dec	a
 1430 D1:DDD6 28 33 -  -  	jr	z, NEQChainAnsVariable
 1431 D1:DDD8 3D -  -  -  	dec	a
 1432 D1:DDD9 28 4C -  -  	jr	z, NEQChainAnsChainPush
 1433 D1:DDDB 3D -  -  -  	dec	a
 1434 D1:DDDC 28 4D -  -  	jr	z, NEQChainAnsChainAns
 1435 D1:DDDE 3D -  -  -  	dec	a
 1436 D1:DDDF CA 2F DE D1 	jp	z, NEQChainAnsFunction
 1437 D1:DDE3 C3 FF AE D1 	jp	NEQError
 1438 D1:DDE7 -  -  -  -  NEQChainAnsNumber:
 1439 D1:DDE7 FD CB C0 5E 	bit	op_is_last_one, (iy+fExpression1)
 1440 D1:DDEB 28 0C -  -  	jr	z, +_
 1441 D1:DDED 3A 1F EA D0 	ld	a, (tempToken)
 1442 D1:DDF1 FE 6F -  -  	cp	tNE
 1443 D1:DDF3 20 04 -  -  	jr	nz, +_
 1444 D1:DDF5 FD CB C0 AE 	res	ans_set_z_flag, (iy+fExpression1)
 1445 D1:DDF9 3A 83 EA D1 _:	ld	a, (ExprOutput)
 1446 D1:DDFD B7 -  -  -  	or	a
 1447 D1:DDFE 3E 11 -  -  	ld	a, 011h
 1448 D1:DE00 20 02 -  -  	jr	nz, $+4
 1449 D1:DE02 3E 21 -  -  	ld	a, 021h
 1450 D1:DE04 EB -  -  -  	ex	de, hl
 1451 D1:DE05 CD 4C AC D1 	call	InsertAHL															;	ld hl/de, *
 1452 D1:DE09 18 C2 -  -  	jr	--_
 1453 D1:DE0B -  -  -  -  NEQChainAnsVariable:
 1454 D1:DE0B 26 17 -  -  	ld	h, 017h
 1455 D1:DE0D 16 03 -  -  	ld	d, 3
 1456 D1:DE0F ED 5C -  -  	mlt	de
 1457 D1:DE11 7B -  -  -  	ld	a, e
 1458 D1:DE12 2E DD -  -  	ld	l, 0DDh
 1459 D1:DE14 CD 70 1D 02 	call	_SetHLUToA
 1460 D1:DE18 3A 83 EA D1 	ld	a, (ExprOutput)
 1461 D1:DE1C B7 -  -  -  	or	a
 1462 D1:DE1D 20 02 -  -  	jr	nz, $+4
 1463 D1:DE1F 26 27 -  -  	ld	h, 027h
 1464 D1:DE21 CD 50 AC D1 	call	InsertHL															;	ld hl/de, (ix+*)
 1465 D1:DE25 18 A6 -  -  	jr	--_
 1466 D1:DE27 -  -  -  -  NEQChainAnsChainPush:
 1467 D1:DE27 C3 7A AF D1 	jp	UnknownError
 1468 D1:DE2B -  -  -  -  NEQChainAnsChainAns:
 1469 D1:DE2B C3 7A AF D1 	jp	UnknownError
 1470 D1:DE2F -  -  -  -  NEQChainAnsFunction:
 1471 D1:DE2F 3A 83 EA D1 	ld	a, (ExprOutput)
 1472 D1:DE33 87 -  -  -  	add	a, a
 1473 D1:DE34 87 -  -  -  	add	a, a
 1474 D1:DE35 87 -  -  -  	add	a, a
 1475 D1:DE36 87 -  -  -  	add	a, a
 1476 D1:DE37 C6 D5 -  -  	add	a, 0D5h
 1477 D1:DE39 CD 1B AD D1 	call	InsertA															;	push hl/de
 1478 D1:DE3D 7B -  -  -  	ld	a, e
 1479 D1:DE3E 06 02 -  -  	ld	b, OutputInHL
 1480 D1:DE40 CD 47 AD D1 	call	GetFunction
 1481 D1:DE44 3E D1 -  -  	ld	a, 0D1h
 1482 D1:DE46 CD 1B AD D1 	call	InsertA															;	pop de
 1483 D1:DE4A C3 63 DD D1 _:	jp	NEQInsert
 1484 D1:DE4E -  -  -  -  NEQFunctionXXX:
 1485 D1:DE4E DD 7E FC -  	ld	a, (ix-4)
 1486 D1:DE51 B7 -  -  -  	or	a
 1487 D1:DE52 28 10 -  -  	jr	z, NEQFunctionNumber
 1488 D1:DE54 3D -  -  -  	dec	a
 1489 D1:DE55 28 18 -  -  	jr	z, NEQFunctionVariable
 1490 D1:DE57 3D -  -  -  	dec	a
 1491 D1:DE58 28 1C -  -  	jr	z, NEQFunctionChainPush
 1492 D1:DE5A 3D -  -  -  	dec	a
 1493 D1:DE5B 28 1D -  -  	jr	z, NEQFunctionChainAns
 1494 D1:DE5D 3D -  -  -  	dec	a
 1495 D1:DE5E 28 1D -  -  	jr	z, NEQFunctionFunction
 1496 D1:DE60 C3 FF AE D1 	jp	NEQError
 1497 D1:DE64 -  -  -  -  NEQFunctionNumber:
 1498 D1:DE64 79 -  -  -  	ld	a, c
 1499 D1:DE65 06 02 -  -  	ld	b, OutputInHL
 1500 D1:DE67 CD 47 AD D1 	call	GetFunction
 1501 D1:DE6B C3 E7 DD D1 	jp	NEQChainAnsNumber
 1502 D1:DE6F -  -  -  -  NEQFunctionVariable:
 1503 D1:DE6F 79 -  -  -  	ld	a, c
 1504 D1:DE70 4B -  -  -  	ld	c, e
 1505 D1:DE71 5F -  -  -  	ld	e, a
 1506 D1:DE72 C3 58 DD D1 	jp	NEQVariableFunction
 1507 D1:DE76 -  -  -  -  NEQFunctionChainPush:
 1508 D1:DE76 C3 7A AF D1 	jp	UnknownError
 1509 D1:DE7A -  -  -  -  NEQFunctionChainAns:
 1510 D1:DE7A 59 -  -  -  	ld	e, c
 1511 D1:DE7B 18 B2 -  -  	jr	NEQChainAnsFunction
 1512 D1:DE7D -  -  -  -  NEQFunctionFunction:
 1513 D1:DE7D 7B -  -  -  	ld	a, e
 1514 D1:DE7E 06 01 -  -  	ld	b, OutputInDE
 1515 D1:DE80 CD 47 AD D1 	call	GetFunction
 1516 D1:DE84 79 -  -  -  	ld	a, c
 1517 D1:DE85 06 02 -  -  	ld	b, OutputInHL
 1518 D1:DE87 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1519 D1:DE8B CD 47 AD D1 	call	GetFunction
 1520 D1:DE8F 18 B9 -  -  	jr	-_
 1521 D1:DE91 -  -  -  -  
 1522 D1:DE91 -  -  -  -  XORANDNumberXXX:
 1523 D1:DE91 DD 7E FC -  	ld	a, (ix-4)
 1524 D1:DE94 B7 -  -  -  	or	a
 1525 D1:DE95 28 10 -  -  	jr	z, XORANDNumberNumber
 1526 D1:DE97 3D -  -  -  	dec	a
 1527 D1:DE98 28 59 -  -  	jr	z, XORANDNumberVariable
 1528 D1:DE9A 3D -  -  -  	dec	a
 1529 D1:DE9B 28 5D -  -  	jr	z, XORANDNumberChainPush
 1530 D1:DE9D 3D -  -  -  	dec	a
 1531 D1:DE9E 28 5E -  -  	jr	z, XORANDNumberChainAns
 1532 D1:DEA0 3D -  -  -  	dec	a
 1533 D1:DEA1 28 61 -  -  	jr	z, XORANDNumberFunction
 1534 D1:DEA3 C3 0D AF D1 	jp	XORANDError
 1535 D1:DEA7 -  -  -  -  XORANDNumberNumber:
 1536 D1:DEA7 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1537 D1:DEAB B7 -  -  -  	or	a
 1538 D1:DEAC ED 62 -  -  	sbc	hl, hl
 1539 D1:DEAE 3A 1F EA D0 	ld	a, (tempToken)
 1540 D1:DEB2 FE 3D -  -  	cp	tXor
 1541 D1:DEB4 28 22 -  -  	jr	z, ++_
 1542 D1:DEB6 FE 3C -  -  	cp	tOr
 1543 D1:DEB8 28 0F -  -  	jr	z, +_
 1544 D1:DEBA CD 48 1D 02 	call	_ChkBCIs0
 1545 D1:DEBE 28 2F -  -  	jr	z, +++_
 1546 D1:DEC0 CD 4C 1D 02 	call	_ChkDEIs0
 1547 D1:DEC4 28 29 -  -  	jr	z, +++_
 1548 D1:DEC6 23 -  -  -  	inc	hl
 1549 D1:DEC7 18 26 -  -  	jr	+++_
 1550 D1:DEC9 CD 48 1D 02 _:	call	_ChkBCIs0
 1551 D1:DECD 47 -  -  -  	ld	b, a
 1552 D1:DECE CD 4C 1D 02 	call	_ChkDEIs0
 1553 D1:DED2 B0 -  -  -  	or	a, b
 1554 D1:DED3 28 1A -  -  	jr	z, ++_
 1555 D1:DED5 23 -  -  -  	inc	hl
 1556 D1:DED6 18 17 -  -  	jr	++_
 1557 D1:DED8 CD 4C 1D 02 _:	call	_ChkDEIs0
 1558 D1:DEDC 11 00 00 00 	ld	de, 0
 1559 D1:DEE0 28 01 -  -  	jr	z, $+3
 1560 D1:DEE2 13 -  -  -  	inc	de
 1561 D1:DEE3 CD 48 1D 02 	call	_ChkBCIs0
 1562 D1:DEE7 3E 00 -  -  	ld	a, 0
 1563 D1:DEE9 28 01 -  -  	jr	z, $+3
 1564 D1:DEEB 3C -  -  -  	inc	a
 1565 D1:DEEC AB -  -  -  	xor	e
 1566 D1:DEED 5F -  -  -  	ld	e, a
 1567 D1:DEEE EB -  -  -  	ex	de, hl
 1568 D1:DEEF DD 2F F9 -  _:	ld	(ix-7), hl
 1569 D1:DEF2 C9 -  -  -  	ret
 1570 D1:DEF3 -  -  -  -  XORANDNumberVariable:
 1571 D1:DEF3 C5 -  -  -  	push	bc
 1572 D1:DEF4 E1 -  -  -  	pop	hl
 1573 D1:DEF5 EB -  -  -  	ex	de, hl
 1574 D1:DEF6 E5 -  -  -  	push	hl
 1575 D1:DEF7 C1 -  -  -  	pop	bc
 1576 D1:DEF8 18 2B -  -  	jr	XORANDVariableNumber
 1577 D1:DEFA -  -  -  -  XORANDNumberChainPush:
 1578 D1:DEFA C3 7A AF D1 	jp	UnknownError
 1579 D1:DEFE -  -  -  -  XORANDNumberChainAns:
 1580 D1:DEFE C5 -  -  -  	push	bc
 1581 D1:DEFF D1 -  -  -  	pop	de
 1582 D1:DF00 C3 ED DF D1 	jp	XORANDChainAnsNumber
 1583 D1:DF04 -  -  -  -  XORANDNumberFunction:
 1584 D1:DF04 C5 -  -  -  	push	bc
 1585 D1:DF05 E1 -  -  -  	pop	hl
 1586 D1:DF06 EB -  -  -  	ex	de, hl
 1587 D1:DF07 E5 -  -  -  	push	hl
 1588 D1:DF08 C1 -  -  -  	pop	bc
 1589 D1:DF09 C3 56 E0 D1 	jp	XORANDFunctionNumber
 1590 D1:DF0D -  -  -  -  XORANDVariableXXX:
 1591 D1:DF0D DD 7E FC -  	ld	a, (ix-4)
 1592 D1:DF10 B7 -  -  -  	or	a
 1593 D1:DF11 28 12 -  -  	jr	z, XORANDVariableNumber
 1594 D1:DF13 3D -  -  -  	dec	a
 1595 D1:DF14 28 17 -  -  	jr	z, XORANDVariableVariable
 1596 D1:DF16 3D -  -  -  	dec	a
 1597 D1:DF17 28 39 -  -  	jr	z, XORANDVariableChainPush
 1598 D1:DF19 3D -  -  -  	dec	a
 1599 D1:DF1A 28 3A -  -  	jr	z, XORANDVariableChainAns
 1600 D1:DF1C 3D -  -  -  	dec	a
 1601 D1:DF1D CA 5B DF D1 	jp	z, XORANDVariableFunction
 1602 D1:DF21 C3 0D AF D1 	jp	XORANDError
 1603 D1:DF25 -  -  -  -  XORANDVariableNumber:
 1604 D1:DF25 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1605 D1:DF29 C3 ED DF D1 	jp	XORANDChainAnsNumber
 1606 D1:DF2D -  -  -  -  XORANDVariableVariable:
 1607 D1:DF2D 79 -  -  -  	ld	a, c
 1608 D1:DF2E BB -  -  -  	cp	e
 1609 D1:DF2F 20 19 -  -  	jr	nz, ++_
 1610 D1:DF31 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1611 D1:DF35 3A 1F EA D0 	ld	a, (tempToken)
 1612 D1:DF39 D6 6F -  -  	sub	tNE
 1613 D1:DF3B 28 02 -  -  	jr	z, +_
 1614 D1:DF3D 3E 01 -  -  	ld	a, 1
 1615 D1:DF3F 11 00 00 00 _:	ld	de, 0
 1616 D1:DF43 5F -  -  -  	ld	e, a
 1617 D1:DF44 36 00 -  -  	ld	(hl), typeNumber
 1618 D1:DF46 23 -  -  -  	inc	hl
 1619 D1:DF47 ED 1F -  -  	ld	(hl), de
 1620 D1:DF49 C9 -  -  -  	ret
 1621 D1:DF4A CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1622 D1:DF4E C3 FF DF D1 	jp	XORANDChainAnsVariable
 1623 D1:DF52 -  -  -  -  XORANDVariableChainPush:
 1624 D1:DF52 C3 7A AF D1 	jp	UnknownError
 1625 D1:DF56 -  -  -  -  XORANDVariableChainAns:
 1626 D1:DF56 59 -  -  -  	ld	e, c
 1627 D1:DF57 C3 FF DF D1 	jp	XORANDChainAnsVariable
 1628 D1:DF5B -  -  -  -  XORANDVariableFunction:
 1629 D1:DF5B 7B -  -  -  	ld	a, e
 1630 D1:DF5C 06 01 -  -  	ld	b, OutputInDE
 1631 D1:DF5E CD 47 AD D1 	call	GetFunction
 1632 D1:DF62 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1633 D1:DF66 -  -  -  -  XORANDInsert:
 1634 D1:DF66 ED 5B 62 EA 
              D1 -  -  -  	ld	de, (programPtr)
 1635 D1:DF6B 21 1F EF D1 	ld	hl, XORANDData
 1636 D1:DF6F 06 A2 -  -  	ld	b, 0A2h
 1637 D1:DF71 3A 1F EA D0 	ld	a, (tempToken)
 1638 D1:DF75 FE 3D -  -  	cp	tXor
 1639 D1:DF77 20 02 -  -  	jr	nz, +_
 1640 D1:DF79 06 AA -  -  	ld	b, 0AAh
 1641 D1:DF7B FE 3C -  -  _:	cp	tOr
 1642 D1:DF7D 20 02 -  -  	jr	nz, +_
 1643 D1:DF7F 06 B2 -  -  	ld	b, 0B2h
 1644 D1:DF81 78 -  -  -  _:	ld	a, b
 1645 D1:DF82 32 29 EF D1 	ld	(XORANDSMC), a
 1646 D1:DF86 01 10 00 00 	ld	bc, 16
 1647 D1:DF8A ED B0 -  -  	ldir
 1648 D1:DF8C ED 53 62 EA 
              D1 -  -  -  	ld	(programPtr), de
 1649 D1:DF91 C9 -  -  -  	ret
 1650 D1:DF92 -  -  -  -  XORANDChainPushXXX:
 1651 D1:DF92 DD 7E FC -  	ld	a, (ix-4)
 1652 D1:DF95 B7 -  -  -  	or	a
 1653 D1:DF96 28 12 -  -  	jr	z, XORANDChainPushNumber
 1654 D1:DF98 3D -  -  -  	dec	a
 1655 D1:DF99 28 17 -  -  	jr	z, XORANDChainPushVariable
 1656 D1:DF9B 3D -  -  -  	dec	a
 1657 D1:DF9C 28 1C -  -  	jr	z, XORANDChainPushChainPush
 1658 D1:DF9E 3D -  -  -  	dec	a
 1659 D1:DF9F 28 1D -  -  	jr	z, XORANDChainPushChainAns
 1660 D1:DFA1 3D -  -  -  	dec	a
 1661 D1:DFA2 CA C6 DF D1 	jp	z, XORANDChainPushFunction
 1662 D1:DFA6 C3 0D AF D1 	jp	XORANDError
 1663 D1:DFAA -  -  -  -  XORANDChainPushNumber:
 1664 D1:DFAA 3E E1 -  -  	ld	a, 0E1h
 1665 D1:DFAC CD 1B AD D1 	call	InsertA															;	pop hl
 1666 D1:DFB0 18 3B -  -  	jr	XORANDChainAnsNumber
 1667 D1:DFB2 -  -  -  -  XORANDChainPushVariable:
 1668 D1:DFB2 3E E1 -  -  	ld	a, 0E1h
 1669 D1:DFB4 CD 1B AD D1 	call	InsertA															;	pop hl
 1670 D1:DFB8 18 45 -  -  	jr	XORANDChainAnsVariable
 1671 D1:DFBA -  -  -  -  XORANDChainPushChainPush:
 1672 D1:DFBA C3 7A AF D1 	jp	UnknownError
 1673 D1:DFBE -  -  -  -  XORANDChainPushChainAns:
 1674 D1:DFBE 3E D1 -  -  	ld	a, 0D1h
 1675 D1:DFC0 CD 1B AD D1 	call	InsertA															;	pop de
 1676 D1:DFC4 18 A0 -  -  	jr	XORANDInsert
 1677 D1:DFC6 -  -  -  -  XORANDChainPushFunction:
 1678 D1:DFC6 7B -  -  -  	ld	a, e
 1679 D1:DFC7 06 02 -  -  	ld	b, OutputInHL
 1680 D1:DFC9 CD 47 AD D1 	call	GetFunction
 1681 D1:DFCD 3E D1 -  -  	ld	a, 0D1h
 1682 D1:DFCF CD 1B AD D1 	call	InsertA															;	pop de
 1683 D1:DFD3 18 91 -  -  _:	jr	XORANDInsert
 1684 D1:DFD5 -  -  -  -  XORANDChainAnsXXX:
 1685 D1:DFD5 DD 7E FC -  	ld	a, (ix-4)
 1686 D1:DFD8 B7 -  -  -  	or	a
 1687 D1:DFD9 28 12 -  -  	jr	z, XORANDChainAnsNumber
 1688 D1:DFDB 3D -  -  -  	dec	a
 1689 D1:DFDC 28 21 -  -  	jr	z, XORANDChainAnsVariable
 1690 D1:DFDE 3D -  -  -  	dec	a
 1691 D1:DFDF 28 3A -  -  	jr	z, XORANDChainAnsChainPush
 1692 D1:DFE1 3D -  -  -  	dec	a
 1693 D1:DFE2 28 3B -  -  	jr	z, XORANDChainAnsChainAns
 1694 D1:DFE4 3D -  -  -  	dec	a
 1695 D1:DFE5 CA 23 E0 D1 	jp	z, XORANDChainAnsFunction
 1696 D1:DFE9 C3 0D AF D1 	jp	XORANDError
 1697 D1:DFED -  -  -  -  XORANDChainAnsNumber:
 1698 D1:DFED 3A 83 EA D1 	ld	a, (ExprOutput)
 1699 D1:DFF1 B7 -  -  -  	or	a
 1700 D1:DFF2 3E 11 -  -  	ld	a, 011h
 1701 D1:DFF4 20 02 -  -  	jr	nz, +_
 1702 D1:DFF6 3E 21 -  -  	ld	a, 021h
 1703 D1:DFF8 EB -  -  -  _:	ex	de, hl
 1704 D1:DFF9 CD 4C AC D1 	call	InsertAHL															;	ld hl/de, *
 1705 D1:DFFD 18 D4 -  -  	jr	--_
 1706 D1:DFFF -  -  -  -  XORANDChainAnsVariable:
 1707 D1:DFFF 26 17 -  -  	ld	h, 017h
 1708 D1:E001 16 03 -  -  	ld	d, 3
 1709 D1:E003 ED 5C -  -  	mlt	de
 1710 D1:E005 7B -  -  -  	ld	a, e
 1711 D1:E006 2E DD -  -  	ld	l, 0DDh
 1712 D1:E008 CD 70 1D 02 	call	_SetHLUToA
 1713 D1:E00C 3A 83 EA D1 	ld	a, (ExprOutput)
 1714 D1:E010 B7 -  -  -  	or	a
 1715 D1:E011 20 02 -  -  	jr	nz, $+4
 1716 D1:E013 26 27 -  -  	ld	h, 027h
 1717 D1:E015 CD 50 AC D1 	call	InsertHL															;	ld hl/de, (ix+*)
 1718 D1:E019 18 B8 -  -  	jr	--_
 1719 D1:E01B -  -  -  -  XORANDChainAnsChainPush:
 1720 D1:E01B C3 7A AF D1 	jp	UnknownError
 1721 D1:E01F -  -  -  -  XORANDChainAnsChainAns:
 1722 D1:E01F C3 7A AF D1 	jp	UnknownError
 1723 D1:E023 -  -  -  -  XORANDChainAnsFunction:
 1724 D1:E023 3A 83 EA D1 	ld	a, (ExprOutput)
 1725 D1:E027 87 -  -  -  	add	a, a
 1726 D1:E028 87 -  -  -  	add	a, a
 1727 D1:E029 87 -  -  -  	add	a, a
 1728 D1:E02A 87 -  -  -  	add	a, a
 1729 D1:E02B C6 D5 -  -  	add	a, 0D5h
 1730 D1:E02D CD 1B AD D1 	call	InsertA															;	push hl/de
 1731 D1:E031 7B -  -  -  	ld	a, e
 1732 D1:E032 06 02 -  -  	ld	b, OutputInHL
 1733 D1:E034 CD 47 AD D1 	call	GetFunction
 1734 D1:E038 3E D1 -  -  	ld	a, 0D1h
 1735 D1:E03A CD 1B AD D1 	call	InsertA															;	pop de
 1736 D1:E03E 18 93 -  -  _:	jr	---_
 1737 D1:E040 -  -  -  -  XORANDFunctionXXX:
 1738 D1:E040 DD 7E FC -  	ld	a, (ix-4)
 1739 D1:E043 B7 -  -  -  	or	a
 1740 D1:E044 28 10 -  -  	jr	z, XORANDFunctionNumber
 1741 D1:E046 3D -  -  -  	dec	a
 1742 D1:E047 28 18 -  -  	jr	z, XORANDFunctionVariable
 1743 D1:E049 3D -  -  -  	dec	a
 1744 D1:E04A 28 1C -  -  	jr	z, XORANDFunctionChainPush
 1745 D1:E04C 3D -  -  -  	dec	a
 1746 D1:E04D 28 1D -  -  	jr	z, XORANDFunctionChainAns
 1747 D1:E04F 3D -  -  -  	dec	a
 1748 D1:E050 28 1D -  -  	jr	z, XORANDFunctionFunction
 1749 D1:E052 C3 0D AF D1 	jp	XORANDError
 1750 D1:E056 -  -  -  -  XORANDFunctionNumber:
 1751 D1:E056 79 -  -  -  	ld	a, c
 1752 D1:E057 06 02 -  -  	ld	b, OutputInHL
 1753 D1:E059 CD 47 AD D1 	call	GetFunction
 1754 D1:E05D C3 ED DF D1 	jp	XORANDChainAnsNumber
 1755 D1:E061 -  -  -  -  XORANDFunctionVariable:
 1756 D1:E061 79 -  -  -  	ld	a, c
 1757 D1:E062 4B -  -  -  	ld	c, e
 1758 D1:E063 5F -  -  -  	ld	e, a
 1759 D1:E064 C3 5B DF D1 	jp	XORANDVariableFunction
 1760 D1:E068 -  -  -  -  XORANDFunctionChainPush:
 1761 D1:E068 C3 7A AF D1 	jp	UnknownError
 1762 D1:E06C -  -  -  -  XORANDFunctionChainAns:
 1763 D1:E06C 59 -  -  -  	ld	e, c
 1764 D1:E06D 18 B4 -  -  	jr	XORANDChainAnsFunction
 1765 D1:E06F -  -  -  -  XORANDFunctionFunction:
 1766 D1:E06F 7B -  -  -  	ld	a, e
 1767 D1:E070 06 01 -  -  	ld	b, OutputInDE
 1768 D1:E072 CD 47 AD D1 	call	GetFunction
 1769 D1:E076 79 -  -  -  	ld	a, c
 1770 D1:E077 06 02 -  -  	ld	b, OutputInHL
 1771 D1:E079 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1772 D1:E07D CD 47 AD D1 	call	GetFunction
 1773 D1:E081 18 BB -  -  	jr	-_
 1774 D1:E083 -  -  -  -  	
 1775 D1:E083 -  -  -  -  StoNumberXXX:
 1776 D1:E083 DD 7E FC -  	ld	a, (ix-4)
 1777 D1:E086 FE 03 -  -  	cp	typeChainAns
 1778 D1:E088 28 0A -  -  	jr	z, +_
 1779 D1:E08A FE 01 -  -  	cp	typeVariable
 1780 D1:E08C CA B7 E0 D1 	jp	z, ++_
 1781 D1:E090 C3 7A AF D1 	jp	UnknownError
 1782 D1:E094 CD 0A E2 D1 _:	call	StoTestStoToListElement
 1783 D1:E098 C2 7A AF D1 	jp	nz, UnknownError
 1784 D1:E09C 3E 11 -  -  	ld	a, 011h
 1785 D1:E09E C5 -  -  -  	push	bc
 1786 D1:E09F E1 -  -  -  	pop	hl
 1787 D1:E0A0 CD 4C AC D1 	call	InsertAHL															;	ld de, *
 1788 D1:E0A4 3E ED -  -  	ld	a, 0EDh
 1789 D1:E0A6 CD 1B AD D1 	call	InsertA															;	ld (hl), de (1)
 1790 D1:E0AA 3E 1F -  -  	ld	a, 01Fh
 1791 D1:E0AC CD 1B AD D1 	call	InsertA															;	ld (hl), de (2)
 1792 D1:E0B0 3E 00 -  -  	ld	a, OutputIsInDE
 1793 D1:E0B2 32 84 EA D1 	ld	(ExprOutput2), a
 1794 D1:E0B6 C9 -  -  -  	ret
 1795 D1:E0B7 21 DD 2F 00 _:	ld	hl, 0002FDDh
 1796 D1:E0BB 16 03 -  -  	ld	d, 3
 1797 D1:E0BD ED 5C -  -  	mlt	de
 1798 D1:E0BF 7B -  -  -  	ld	a, e
 1799 D1:E0C0 CD 70 1D 02 	call	_SetHLUToA
 1800 D1:E0C4 C5 -  -  -  	push	bc
 1801 D1:E0C5 D1 -  -  -  	pop	de
 1802 D1:E0C6 CD 48 1D 02 	call	_ChkBCIs0
 1803 D1:E0CA 3E 21 -  -  	ld	a, 021h
 1804 D1:E0CC 20 08 -  -  	jr	nz, +_
 1805 D1:E0CE 11 B7 ED 62 	ld	de, 062EDB7h
 1806 D1:E0D2 C3 9C AC D1 	jp	InsertDEHL															;	or a \ sbc hl, hl \ ld (ix+*), hl
 1807 D1:E0D6 C3 98 AC D1 _:	jp	InsertADEHL															;	ld hl, * \ ld (ix+*), hl
 1808 D1:E0DA -  -  -  -  StoVariableXXX:
 1809 D1:E0DA DD 7E FC -  	ld	a, (ix-4)
 1810 D1:E0DD FE 03 -  -  	cp	typeChainAns
 1811 D1:E0DF 28 0A -  -  	jr	z, +_
 1812 D1:E0E1 FE 01 -  -  	cp	typeVariable
 1813 D1:E0E3 CA 0B E1 D1 	jp	z, ++_
 1814 D1:E0E7 C3 7A AF D1 	jp	UnknownError
 1815 D1:E0EB CD 0A E2 D1 _:	call	StoTestStoToListElement
 1816 D1:E0EF C2 7A AF D1 	jp	nz, UnknownError
 1817 D1:E0F3 59 -  -  -  	ld	e, c
 1818 D1:E0F4 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1819 D1:E0F8 3E ED -  -  	ld	a, 0EDh
 1820 D1:E0FA CD 1B AD D1 	call	InsertA															;	ld (hl), de (1)
 1821 D1:E0FE 3E 1F -  -  	ld	a, 01Fh
 1822 D1:E100 CD 1B AD D1 	call	InsertA															;	ld (hl), de (2)
 1823 D1:E104 3E 00 -  -  	ld	a, OutputIsInDE
 1824 D1:E106 32 84 EA D1 	ld	(ExprOutput2), a
 1825 D1:E10A C9 -  -  -  	ret
 1826 D1:E10B CD 72 AC D1 _:	call	InsertHIXC
 1827 D1:E10F 21 DD 2F 00 	ld	hl, 0002FDDh
 1828 D1:E113 16 03 -  -  	ld	d, 3
 1829 D1:E115 ED 5C -  -  	mlt	de
 1830 D1:E117 7B -  -  -  	ld	a, e
 1831 D1:E118 CD 70 1D 02 	call	_SetHLUToA
 1832 D1:E11C C3 50 AC D1 	jp	InsertHL																;	ld ld (ix+*), hl
 1833 D1:E120 -  -  -  -  StoChainPushXXX:
 1834 D1:E120 DD 7E FC -  	ld	a, (ix-4)
 1835 D1:E123 FE 03 -  -  	cp	typeChainAns
 1836 D1:E125 C2 7A AF D1 _:	jp	nz, UnknownError
 1837 D1:E129 CD 0A E2 D1 	call	StoTestStoToListElement
 1838 D1:E12D 20 F6 -  -  	jr	nz, -_
 1839 D1:E12F 21 D1 ED 1F 	ld	hl, 01FEDD1h
 1840 D1:E133 CD 50 AC D1 	call	InsertHL															;	pop de \ ld (hl), de
 1841 D1:E137 3E 00 -  -  	ld	a, OutputIsInDE
 1842 D1:E139 32 84 EA D1 	ld	(ExprOutput2), a
 1843 D1:E13D C9 -  -  -  	ret
 1844 D1:E13E -  -  -  -  StoChainAnsXXX:
 1845 D1:E13E DD 7E FC -  	ld	a, (ix-4)
 1846 D1:E141 FE 01 -  -  	cp	typeVariable
 1847 D1:E143 C2 21 AF D1 	jp	nz, StoError
 1848 D1:E147 21 DD 2F 00 _:	ld	hl, 0002FDDh
 1849 D1:E14B 16 03 -  -  	ld	d, 3
 1850 D1:E14D ED 5C -  -  	mlt	de
 1851 D1:E14F 7B -  -  -  	ld	a, e
 1852 D1:E150 CD 70 1D 02 	call	_SetHLUToA
 1853 D1:E154 3A 83 EA D1 	ld	a, (ExprOutput)
 1854 D1:E158 B7 -  -  -  	or	a
 1855 D1:E159 20 02 -  -  	jr	nz, $+4
 1856 D1:E15B 26 1F -  -  	ld	h, 01Fh
 1857 D1:E15D 32 84 EA D1 	ld	(ExprOutput2), a
 1858 D1:E161 C3 50 AC D1 	jp	InsertHL																;	ld (ix+*), hl/de
 1859 D1:E165 -  -  -  -  StoFunctionXXX:
 1860 D1:E165 DD 7E FC -  	ld	a, (ix-4)
 1861 D1:E168 FE 03 -  -  	cp	typeChainAns
 1862 D1:E16A 28 0A -  -  	jr	z, +_
 1863 D1:E16C FE 01 -  -  	cp	typeVariable
 1864 D1:E16E CA 9C E1 D1 	jp	z, ++_
 1865 D1:E172 C3 7A AF D1 	jp	UnknownError
 1866 D1:E176 CD 0A E2 D1 _:	call	StoTestStoToListElement
 1867 D1:E17A C2 7A AF D1 	jp	nz, UnknownError
 1868 D1:E17E 79 -  -  -  	ld	a, c
 1869 D1:E17F 06 01 -  -  	ld	b, OutputInDE
 1870 D1:E181 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1871 D1:E185 CD 47 AD D1 	call	GetFunction
 1872 D1:E189 3E ED -  -  	ld	a, 0EDh
 1873 D1:E18B CD 1B AD D1 	call	InsertA															;	ld (hl), de (1)
 1874 D1:E18F 3E 1F -  -  	ld	a, 01Fh
 1875 D1:E191 CD 1B AD D1 	call	InsertA															;	ld (hl), de (2)
 1876 D1:E195 3E 00 -  -  	ld	a, OutputIsInDE
 1877 D1:E197 32 84 EA D1 	ld	(ExprOutput2), a
 1878 D1:E19B C9 -  -  -  	ret
 1879 D1:E19C 79 -  -  -  _:	ld	a, c
 1880 D1:E19D 06 02 -  -  	ld	b, OutputInHL
 1881 D1:E19F CD 47 AD D1 	call	GetFunction
 1882 D1:E1A3 21 DD 2F 00 	ld	hl, 0002FDDh
 1883 D1:E1A7 16 03 -  -  	ld	d, 3
 1884 D1:E1A9 ED 5C -  -  	mlt	de
 1885 D1:E1AB 7B -  -  -  	ld	a, e
 1886 D1:E1AC CD 70 1D 02 	call	_SetHLUToA
 1887 D1:E1B0 C3 50 AC D1 	jp	InsertHL																;	ld (ix+*), hl
 1888 D1:E1B4 -  -  -  -  StoListXXX:
 1889 D1:E1B4 DD 7E FC -  	ld	a, (ix-4)
 1890 D1:E1B7 FE 06 -  -  	cp	typeOSList
 1891 D1:E1B9 C2 21 AF D1 	jp	nz, StoError
 1892 D1:E1BD 3E 21 -  -  	ld	a, 021h
 1893 D1:E1BF CD 1B AD D1 	call	InsertA															;	ld hl, *
 1894 D1:E1C3 CD 32 AD D1 	call	InsertProgramPtrToDataOffset
 1895 D1:E1C7 2A 77 EA D1 	ld	hl, (programDataDataPtr)
 1896 D1:E1CB CD 50 AC D1 	call	InsertHL															;	ld hl, RANDOM
 1897 D1:E1CF 3E 11 -  -  	ld	a, 011h
 1898 D1:E1D1 D5 -  -  -  	push	de
 1899 D1:E1D2 E1 -  -  -  	pop	hl
 1900 D1:E1D3 CD 4C AC D1 	call	InsertAHL															;	ld de, OSList
 1901 D1:E1D7 3E 01 -  -  	ld	a, 01h
 1902 D1:E1D9 CD 1B AD D1 	call	InsertA															;	ld bc, *
 1903 D1:E1DD C5 -  -  -  	push	bc
 1904 D1:E1DE E1 -  -  -  	pop	hl
 1905 D1:E1DF 22 F1 E1 D1 	ld	(StartData), hl
 1906 D1:E1E3 ED 27 -  -  	ld	hl, (hl)
 1907 D1:E1E5 E5 -  -  -  	push	hl
 1908 D1:E1E6 C1 -  -  -  	pop	bc
 1909 D1:E1E7 CD 50 AC D1 	call	InsertHL															;	ld bc, LENGTH
 1910 D1:E1EB ED 5B 77 EA 
              D1 -  -  -  	ld	de, (programDataDataPtr)
 1911 D1:E1F0 -  -  -  -  StartData = $+1
 1912 D1:E1F0 21 00 00 00 	ld	hl, 0
 1913 D1:E1F4 23 -  -  -  	inc	hl
 1914 D1:E1F5 23 -  -  -  	inc	hl
 1915 D1:E1F6 23 -  -  -  	inc	hl
 1916 D1:E1F7 ED B0 -  -  	ldir
 1917 D1:E1F9 ED 53 77 EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1918 D1:E1FE 3E ED -  -  	ld	a, 0EDh
 1919 D1:E200 CD 1B AD D1 	call	InsertA															;	ldir (1)
 1920 D1:E204 3E B0 -  -  	ld	a, 0B0h
 1921 D1:E206 C3 1B AD D1 	jp	InsertA																;	ldir (2)
 1922 D1:E20A -  -  -  -  	
 1923 D1:E20A -  -  -  -  StoTestStoToListElement:
 1924 D1:E20A 2A 62 EA D1 	ld	hl, (programPtr)
 1925 D1:E20E 2B -  -  -  	dec	hl
 1926 D1:E20F 7E -  -  -  	ld	a, (hl)
 1927 D1:E210 FE 27 -  -  	cp	027h
 1928 D1:E212 20 0B -  -  	jr	nz, StoLastOpcodeNotHLHL
 1929 D1:E214 2B -  -  -  	dec	hl
 1930 D1:E215 7E -  -  -  	ld	a, (hl)
 1931 D1:E216 FE ED -  -  	cp	0EDh
 1932 D1:E218 20 05 -  -  	jr	nz, StoLastOpcodeNotHLHL
 1933 D1:E21A 22 62 EA D1 	ld	(programPtr), hl
 1934 D1:E21E C9 -  -  -  	ret
 1935 D1:E21F -  -  -  -  StoLastOpcodeNotHLHL:
 1936 D1:E21F 2A 62 EA D1 	ld	hl, (programPtr)
 1937 D1:E223 2B -  -  -  	dec	hl
 1938 D1:E224 2B -  -  -  	dec	hl
 1939 D1:E225 2B -  -  -  	dec	hl
 1940 D1:E226 2B -  -  -  	dec	hl
 1941 D1:E227 7E -  -  -  	ld	a, (hl)
 1942 D1:E228 FE 2A -  -  	cp	02Ah
 1943 D1:E22A C0 -  -  -  	ret	nz
 1944 D1:E22B 36 21 -  -  	ld	(hl), 021h
 1945 D1:E22D C9 -  -  -  	ret
 1946 D1:E22E 00 -  -  -  	nop
 1947 D1:E22F 00 -  -  -  	nop
 1948 D1:E230 00 -  -  -  	nop
Listing for file "ice.asm"
  448 D1:E231 -  -  -  -  #include "operators functions/function_for.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_for.asm"
    1 D1:E231 -  -  -  -  functionFor:
    2 D1:E231 21 7F EA D1 	ld	hl, amountOfEnds
    3 D1:E235 34 -  -  -  	inc	(hl)
    4 D1:E236 3E 01 -  -  	ld	a, 1
    5 D1:E238 32 7C EA D1 	ld	(openedParensF), a
    6 D1:E23C FD 36 AF 00 	ld	(iy+fFunction2), 0
    7 D1:E240 CD 28 10 02 	call	_IncFetch
    8 D1:E244 D6 41 -  -  	sub	tA
    9 D1:E246 DA B6 E4 D1 	jp	c, functionForSmall
   10 D1:E24A FE 1B -  -  	cp	ttheta+1-tA
   11 D1:E24C D2 B6 E4 D1 	jp	nc, functionForSmall
   12 D1:E250 -  -  -  -  	;	loop variable
   13 D1:E250 47 -  -  -  	ld	b, a
   14 D1:E251 87 -  -  -  	add	a, a
   15 D1:E252 80 -  -  -  	add	a, b
   16 D1:E253 32 8B E2 D1 	ld	(ForVariable1), a
   17 D1:E257 6F -  -  -  	ld	l, a
   18 D1:E258 E5 -  -  -  	push	hl
   19 D1:E259 CD 28 10 02 		call	_IncFetch
   20 D1:E25D DA 40 AF D1 _:		jp	c, ErrorSyntax
   21 D1:E261 FE 2B -  -  		cp	tComma
   22 D1:E263 C2 40 AF D1 		jp	nz, ErrorSyntax
   23 D1:E267 CD 28 10 02 		call	_IncFetch
   24 D1:E26B -  -  -  -  		;	loop start point
   25 D1:E26B 2A 62 EA D1 		ld	hl, (programPtr)
   26 D1:E26F E5 -  -  -  		push	hl
   27 D1:E270 21 C6 52 D0 			ld	hl, tempArg1
   28 D1:E274 22 62 EA D1 			ld	(programPtr), hl
   29 D1:E278 CD CD B2 D1 			call	ParseExpression
   30 D1:E27C FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
   31 D1:E280 FD CB BE 86 			res	triggered_a_comma, (iy+fExpression3)
   32 D1:E284 CA 40 AF D1 			jp	z, ErrorSyntax
   33 D1:E288 -  -  -  -  ForVariable1 = $+3
   34 D1:E288 21 DD 2F 00 			ld	hl, 0002FDDh
   35 D1:E28C CD 50 AC D1 			call	InsertHL										;	ld (ix+*), hl
   36 D1:E290 CD 28 10 02 			call	_IncFetch
   37 D1:E294 38 C7 -  -  			jr	c, -_
   38 D1:E296 2A 62 EA D1 			ld	hl, (programPtr)
   39 D1:E29A 11 C6 52 D0 			ld	de, tempArg1
   40 D1:E29E B7 -  -  -  			or	a
   41 D1:E29F ED 52 -  -  			sbc	hl, de
   42 D1:E2A1 EB -  -  -  			ex	de, hl
   43 D1:E2A2 E1 -  -  -  		pop	hl
   44 D1:E2A3 22 62 EA D1 		ld	(programPtr), hl
   45 D1:E2A7 D5 -  -  -  		push	de
   46 D1:E2A8 -  -  -  -  			;	loop end point
   47 D1:E2A8 CD CD B2 D1 			call	ParseExpression
   48 D1:E2AC FD CB C0 66 			bit	output_is_number, (iy+fExpression1)
   49 D1:E2B0 20 14 -  -  			jr	nz, ForEndPointIsNumber
   50 D1:E2B2 -  -  -  -  ForEndPointIsExpression:
   51 D1:E2B2 3E 22 -  -  			ld	a, 022h
   52 D1:E2B4 CD 1B AD D1 			call	InsertA										;	ld (******), hl
   53 D1:E2B8 2A 62 EA D1 			ld	hl, (programPtr)
   54 D1:E2BC 22 AE E3 D1 			ld	(ForEndPointExpression), hl
   55 D1:E2C0 CD 50 AC D1 			call	InsertHL										;	ld (RANDOM), hl
   56 D1:E2C4 18 17 -  -  			jr	ForGetStep
   57 D1:E2C6 -  -  -  -  ForEndPointIsNumber:
   58 D1:E2C6 FD CB AF D6 			set	end_point_is_number, (iy+fFunction2)
   59 D1:E2CA 2A 62 EA D1 			ld	hl, (programPtr)
   60 D1:E2CE 2B -  -  -  			dec	hl
   61 D1:E2CF 2B -  -  -  			dec	hl
   62 D1:E2D0 2B -  -  -  			dec	hl
   63 D1:E2D1 ED 17 -  -  			ld	de, (hl)
   64 D1:E2D3 2B -  -  -  			dec	hl
   65 D1:E2D4 22 62 EA D1 			ld	(programPtr), hl
   66 D1:E2D8 ED 53 BC E3 
              D1 -  -  -  			ld	(ForFixedEndPoint), de
   67 D1:E2DD -  -  -  -  ForGetStep:
   68 D1:E2DD FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
   69 D1:E2E1 FD CB BE 86 			res	triggered_a_comma, (iy+fExpression3)
   70 D1:E2E5 20 0B -  -  			jr	nz, +_
   71 D1:E2E7 -  -  -  -  			;	loop step
   72 D1:E2E7 FD CB AF CE 			set	for_step_is_number, (iy+fFunction2)
   73 D1:E2EB 21 01 00 00 			ld	hl, 1
   74 D1:E2EF E5 -  -  -  			push	hl
   75 D1:E2F0 18 76 -  -  				jr	ForStart
   76 D1:E2F2 CD 28 10 02 _:			call	_IncFetch
   77 D1:E2F6 DA 40 AF D1 			jp	c, ErrorSyntax
   78 D1:E2FA FE B0 -  -  			cp	tChs
   79 D1:E2FC 20 0C -  -  			jr	nz, +_
   80 D1:E2FE FD CB AF C6 			set	negative_for_step, (iy+fFunction2)
   81 D1:E302 CD 28 10 02 			call	_IncFetch
   82 D1:E306 DA 40 AF D1 			jp	c, ErrorSyntax
   83 D1:E30A FE 41 -  -  _:			cp	tA
   84 D1:E30C 38 34 -  -  			jr	c, ForGetStepNumber
   85 D1:E30E FE 5C -  -  			cp	ttheta+1
   86 D1:E310 D2 42 E3 D1 			jp	nc, ForGetStepNumber
   87 D1:E314 -  -  -  -  ForGetStepVariable:
   88 D1:E314 FD CB AF 8E 			res	for_step_is_number, (iy+fFunction2)
   89 D1:E318 CD 2C 10 02 			call	_CurFetch
   90 D1:E31C D6 41 -  -  			sub	tA
   91 D1:E31E 4F -  -  -  			ld	c, a
   92 D1:E31F CD 72 AC D1 			call	InsertHIXC										;	ld hl, (ix+*)
   93 D1:E323 CD C0 0F 02 			call	_NxtFetch
   94 D1:E327 DA 40 AF D1 			jp	c, ErrorSyntax
   95 D1:E32B FE 3F -  -  			cp	tEnter
   96 D1:E32D C2 40 AF D1 			jp	nz, ErrorSyntax
   97 D1:E331 3E 22 -  -  			ld	a, 022h
   98 D1:E333 CD 1B AD D1 			call	InsertA										;	ld (*), hl
   99 D1:E337 2A 62 EA D1 			ld	hl, (programPtr)
  100 D1:E33B E5 -  -  -  			push	hl
  101 D1:E33C CD 50 AC D1 				call	InsertHL									;	ld (RANDOM), hl
  102 D1:E340 18 26 -  -  				jr	ForStart
  103 D1:E342 -  -  -  -  ForGetStepNumber:
  104 D1:E342 FD CB AF CE 			set	for_step_is_number, (iy+fFunction2)
  105 D1:E346 CD CD B2 D1 			call	ParseExpression
  106 D1:E34A FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
  107 D1:E34E 20 BA -  -  			jr	nz, -_
  108 D1:E350 FD CB C0 66 			bit	output_is_number, (iy+fExpression1)
  109 D1:E354 CA 40 AF D1 			jp	z, ErrorSyntax
  110 D1:E358 2A 62 EA D1 			ld	hl, (programPtr)
  111 D1:E35C 2B -  -  -  			dec	hl
  112 D1:E35D 2B -  -  -  			dec	hl
  113 D1:E35E 2B -  -  -  			dec	hl
  114 D1:E35F 2B -  -  -  			dec	hl
  115 D1:E360 22 62 EA D1 			ld	(programPtr), hl
  116 D1:E364 23 -  -  -  			inc	hl
  117 D1:E365 ED 27 -  -  			ld	hl, (hl)
  118 D1:E367 E5 -  -  -  			push	hl
  119 D1:E368 -  -  -  -  ForStart:
  120 D1:E368 E1 -  -  -  			pop	hl
  121 D1:E369 D1 -  -  -  		pop	de
  122 D1:E36A E5 -  -  -  		push	hl
  123 D1:E36B 2A 62 EA D1 			ld	hl, (programPtr)
  124 D1:E36F 19 -  -  -  			add	hl, de
  125 D1:E370 E5 -  -  -  			push	hl
  126 D1:E371 D5 -  -  -  				push	de
  127 D1:E372 C1 -  -  -  				pop	bc
  128 D1:E373 ED 5B 62 EA 
              D1 -  -  -  				ld	de, (programPtr)
  129 D1:E378 21 C6 52 D0 				ld	hl, tempArg1
  130 D1:E37C ED B0 -  -  				ldir
  131 D1:E37E ED 53 62 EA 
              D1 -  -  -  				ld	(programPtr), de
  132 D1:E383 FD CB AF 56 				bit	end_point_is_number, (iy+fFunction2)
  133 D1:E387 20 30 -  -  				jr	nz, ForInsertEndPointNumber
  134 D1:E389 -  -  -  -  ForInsertEndPointExpression:
  135 D1:E389 3E B7 -  -  				ld	a, 0B7h
  136 D1:E38B FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  137 D1:E38F 20 08 -  -  				jr	nz, +_
  138 D1:E391 FD CB AF 56 				bit	end_point_is_number, (iy+fFunction2)
  139 D1:E395 20 02 -  -  				jr	nz, +_
  140 D1:E397 3E 37 -  -  				ld	a, 037h
  141 D1:E399 32 CB E3 D1 _:				ld	(ForSetCarryFlag), a
  142 D1:E39D 3E 11 -  -  				ld	a, 011h
  143 D1:E39F CD 1B AD D1 				call	InsertA										;	ld de, *
  144 D1:E3A3 2A 62 EA D1 				ld	hl, (programPtr)
  145 D1:E3A7 11 81 7C FC 				ld	de, UserMem-program
  146 D1:E3AB 19 -  -  -  				add	hl, de
  147 D1:E3AC EB -  -  -  				ex	de, hl
  148 D1:E3AD -  -  -  -  ForEndPointExpression = $+1
  149 D1:E3AD 21 00 00 00 				ld	hl, 0
  150 D1:E3B1 ED 1F -  -  				ld	(hl), de
  151 D1:E3B3 CD 50 AC D1 				call	InsertHL										;	ld de, RANDOM
  152 D1:E3B7 18 11 -  -  				jr	ForSkip
  153 D1:E3B9 -  -  -  -  ForInsertEndPointNumber:
  154 D1:E3B9 3E 11 -  -  				ld	a, 011h
  155 D1:E3BB -  -  -  -  ForFixedEndPoint = $+1
  156 D1:E3BB 21 00 00 00 				ld	hl, 0
  157 D1:E3BF FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  158 D1:E3C3 20 01 -  -  				jr	nz, +_
  159 D1:E3C5 23 -  -  -  				inc	hl
  160 D1:E3C6 CD 4C AC D1 _:				call	InsertAHL										;	ld de, *
  161 D1:E3CA -  -  -  -  ForSkip:
  162 D1:E3CA -  -  -  -  ForSetCarryFlag = $+1
  163 D1:E3CA 21 B7 ED 52 				ld	hl, 052EDB7h
  164 D1:E3CE CD 50 AC D1 				call	InsertHL										;	or a \ sbc hl, de
  165 D1:E3D2 3E D2 -  -  				ld	a, 0D2h
  166 D1:E3D4 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  167 D1:E3D8 28 02 -  -  				jr	z, +_
  168 D1:E3DA C6 08 -  -  				add	a, 8
  169 D1:E3DC CD 1B AD D1 _:				call	InsertA										;	jp [n]c, *
  170 D1:E3E0 2A 62 EA D1 				ld	hl, (programPtr)
  171 D1:E3E4 E5 -  -  -  				push	hl
  172 D1:E3E5 CD 50 AC D1 					call	InsertHL									;	jp [n]c, RANDOM
  173 D1:E3E9 FD 46 AF -  					ld	b, (iy+fFunction2)
  174 D1:E3EC C5 -  -  -  					push	bc
  175 D1:E3ED CD 99 AA D1 						call	ParseProgramUntilEnd
  176 D1:E3F1 C1 -  -  -  					pop	bc
  177 D1:E3F2 FD 70 AF -  					ld	(iy+fFunction2), b
  178 D1:E3F5 FE D0 -  -  					cp	tElse
  179 D1:E3F7 CA 40 AF D1 					jp	z, ErrorSyntax
  180 D1:E3FB DD 21 00 00 
              00 -  -  -  					ld	ix, 0
  181 D1:E400 DD 39 -  -  					add	ix, sp
  182 D1:E402 DD 7E 09 -  					ld	a, (ix+9)
  183 D1:E405 21 DD 27 00 					ld	hl, 00027DDh
  184 D1:E409 CD 70 1D 02 					call	_SetHLUToA
  185 D1:E40D CD 50 AC D1 					call	InsertHL									;	ld hl, (ix+*)
  186 D1:E411 C1 -  -  -  				pop	bc
  187 D1:E412 D1 -  -  -  			pop	de
  188 D1:E413 E1 -  -  -  		pop	hl
  189 D1:E414 D5 -  -  -  		push	de
  190 D1:E415 C5 -  -  -  			push	bc
  191 D1:E416 FD CB AF 4E 				bit	for_step_is_number, (iy+fFunction2)
  192 D1:E41A 28 19 -  -  				jr	z, InsertVariableChange
  193 D1:E41C -  -  -  -  InsertNumberChange:
  194 D1:E41C EB -  -  -  				ex	de, hl
  195 D1:E41D 3E 01 -  -  				ld	a, 1
  196 D1:E41F 32 83 EA D1 				ld	(ExprOutput), a
  197 D1:E423 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  198 D1:E427 28 06 -  -  				jr	z, $+8
  199 D1:E429 CD 3B D4 D1 				call	SubChainAnsNumber
  200 D1:E42D 18 04 -  -  				jr	$+6
  201 D1:E42F CD 03 D6 D1 				call	AddChainAnsNumber
  202 D1:E433 18 29 -  -  				jr	InsertStop
  203 D1:E435 -  -  -  -  InsertVariableChange:
  204 D1:E435 EB -  -  -  				ex	de, hl
  205 D1:E436 3E 11 -  -  				ld	a, 011h
  206 D1:E438 CD 1B AD D1 				call	InsertA										;	ld de, *
  207 D1:E43C 2A 62 EA D1 				ld	hl, (programPtr)
  208 D1:E440 01 81 7C FC 				ld	bc, UserMem-program
  209 D1:E444 09 -  -  -  				add	hl, bc
  210 D1:E445 EB -  -  -  				ex	de, hl
  211 D1:E446 ED 1F -  -  				ld	(hl), de
  212 D1:E448 CD 50 AC D1 				call	InsertHL										;	ld de, RANDOM
  213 D1:E44C 3E 19 -  -  				ld	a, 019h
  214 D1:E44E 21 B7 ED 52 				ld	hl, 052EDB7h
  215 D1:E452 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  216 D1:E456 C4 50 AC D1 				call	nz, InsertHL									;	or a \ sbc hl, de
  217 D1:E45A CC 1B AD D1 				call	z, InsertA										;	add hl, de
  218 D1:E45E -  -  -  -  InsertStop:
  219 D1:E45E C1 -  -  -  			pop	bc
  220 D1:E45F D1 -  -  -  		pop	de
  221 D1:E460 E1 -  -  -  	pop	hl
  222 D1:E461 7D -  -  -  	ld	a, l
  223 D1:E462 21 DD 2F 00 	ld	hl, 0002FDDh
  224 D1:E466 CD 70 1D 02 	call	_SetHLUToA
  225 D1:E46A CD 50 AC D1 	call	InsertHL													;	ld (ix+*), hl
  226 D1:E46E B7 -  -  -  	or	a
  227 D1:E46F ED 52 -  -  	sbc	hl, de
  228 D1:E471 7C -  -  -  	ld	a, h
  229 D1:E472 B7 -  -  -  	or	a
  230 D1:E473 20 07 -  -  	jr	nz, ForBigLoop
  231 D1:E475 7D -  -  -  	ld	a, l
  232 D1:E476 2F -  -  -  	cpl
  233 D1:E477 3D -  -  -  	dec	a
  234 D1:E478 FE 80 -  -  	cp	%10000000
  235 D1:E47A 30 15 -  -  	jr	nc, ForSmallLoop
  236 D1:E47C -  -  -  -  ForBigLoop:
  237 D1:E47C 3E C3 -  -  	ld	a, 0C3h
  238 D1:E47E FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  239 D1:E482 28 02 -  -  	jr	z, $+4
  240 D1:E484 3E D2 -  -  	ld	a, 0D2h
  241 D1:E486 21 81 7C FC 	ld	hl, UserMem-program
  242 D1:E48A 19 -  -  -  	add	hl, de
  243 D1:E48B CD 4C AC D1 	call	InsertAHL													;	jp [nc], ******
  244 D1:E48F 18 1A -  -  	jr	ForLoopInsert
  245 D1:E491 -  -  -  -  ForSmallLoop:
  246 D1:E491 DD 6F -  -  	ld	ixl, a
  247 D1:E493 3E 18 -  -  	ld	a, 018h
  248 D1:E495 FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  249 D1:E499 28 02 -  -  	jr	z, $+4
  250 D1:E49B 3E 30 -  -  	ld	a, 030h
  251 D1:E49D CD 1B AD D1 	call	InsertA													;	jr [nc], **
  252 D1:E4A1 DD 7D -  -  	ld	a, ixl
  253 D1:E4A3 CD 1B AD D1 	call	InsertA													;	jr [nc], **
  254 D1:E4A7 2A 62 EA D1 	ld	hl, (programPtr)
  255 D1:E4AB -  -  -  -  ForLoopInsert:
  256 D1:E4AB 11 81 7C FC 	ld	de, UserMem-program
  257 D1:E4AF 19 -  -  -  	add	hl, de
  258 D1:E4B0 EB -  -  -  	ex	de, hl
  259 D1:E4B1 C5 -  -  -  	push	bc
  260 D1:E4B2 E1 -  -  -  	pop	hl
  261 D1:E4B3 ED 1F -  -  	ld	(hl), de
  262 D1:E4B5 C9 -  -  -  	ret
  263 D1:E4B6 -  -  -  -  	
  264 D1:E4B6 -  -  -  -  functionForSmall:
  265 D1:E4B6 CD CD B2 D1 	call	ParseExpression
  266 D1:E4BA FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  267 D1:E4BE 28 10 -  -  	jr	z, +_
  268 D1:E4C0 2A 62 EA D1 	ld	hl, (programPtr)
  269 D1:E4C4 2B -  -  -  	dec	hl
  270 D1:E4C5 2B -  -  -  	dec	hl
  271 D1:E4C6 22 62 EA D1 	ld	(programPtr), hl
  272 D1:E4CA 2B -  -  -  	dec	hl
  273 D1:E4CB 2B -  -  -  	dec	hl
  274 D1:E4CC 36 06 -  -  	ld	(hl), 06h													;	ld b, *
  275 D1:E4CE 18 06 -  -  	jr	++_
  276 D1:E4D0 3E 45 -  -  _:	ld	a, 045h
  277 D1:E4D2 CD 1B AD D1 	call	InsertA													;	ld b, l
  278 D1:E4D6 2A 62 EA D1 _:	ld	hl, (programPtr)
  279 D1:E4DA E5 -  -  -  	push	hl
  280 D1:E4DB 3E C5 -  -  		ld	a, 0C5h
  281 D1:E4DD CD 1B AD D1 		call	InsertA												;	push bc
  282 D1:E4E1 CD 99 AA D1 		call	ParseProgramUntilEnd
  283 D1:E4E5 3E C1 -  -  		ld	a, 0C1h
  284 D1:E4E7 CD 1B AD D1 		call	InsertA												;	pop bc
  285 D1:E4EB D1 -  -  -  	pop	de
  286 D1:E4EC 2A 62 EA D1 	ld	hl, (programPtr)
  287 D1:E4F0 B7 -  -  -  	or	a
  288 D1:E4F1 ED 52 -  -  	sbc	hl, de
  289 D1:E4F3 7C -  -  -  	ld	a, h
  290 D1:E4F4 B7 -  -  -  	or	a
  291 D1:E4F5 C2 92 AF D1 _:	jp	nz, ErrorTooLargeLoop
  292 D1:E4F9 7D -  -  -  	ld	a, l
  293 D1:E4FA 2F -  -  -  	cpl
  294 D1:E4FB 3D -  -  -  	dec	a
  295 D1:E4FC FE 80 -  -  	cp	%10000000
  296 D1:E4FE DA F5 E4 D1 	jp	c, -_
  297 D1:E502 47 -  -  -  	ld	b, a
  298 D1:E503 3E 10 -  -  	ld	a, 010h
  299 D1:E505 CD 1B AD D1 	call	InsertA													;	djnz *
  300 D1:E509 78 -  -  -  	ld	a, b
  301 D1:E50A C3 1B AD D1 	jp	InsertA														;	djnz *
Listing for file "ice.asm"
  449 D1:E50E -  -  -  -  #include "operators functions/function_C.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_C.asm"
    1 D1:E50E -  -  -  -  CFunction0Args:
    2 D1:E50E FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
    3 D1:E512 C2 40 AF D1 	jp	nz, ErrorSyntax
    4 D1:E516 06 00 -  -  	ld	b, 0
    5 D1:E518 -  -  -  -  CInsertCallPops:
    6 D1:E518 FD CB B0 CE 	set	modified_iy, (iy+fAlways1)
    7 D1:E51C 21 90 EA D1 	ld	hl, usedCroutines
    8 D1:E520 -  -  -  -  CFunctionArgsSMC = $+1
    9 D1:E520 11 00 00 00 	ld	de, 0
   10 D1:E524 7B -  -  -  	ld	a, e
   11 D1:E525 B7 -  -  -  	or	a, a
   12 D1:E526 20 0B -  -  	jr	nz, +_
   13 D1:E528 E5 -  -  -  	push	hl
   14 D1:E529 21 2E 27 E5 		ld	hl, 0E5272Eh
   15 D1:E52D CD 50 AC D1 		call	InsertHL								; ld l, lcdBpp8 \ push hl
   16 D1:E531 04 -  -  -  		inc	b
   17 D1:E532 E1 -  -  -  	pop	hl
   18 D1:E533 19 -  -  -  _:	add	hl, de
   19 D1:E534 5E -  -  -  	ld	e, (hl)
   20 D1:E535 16 04 -  -  	ld	d, 4
   21 D1:E537 ED 5C -  -  	mlt	de
   22 D1:E539 21 F6 A8 D1 	ld	hl, CData2-CData+UserMem-4
   23 D1:E53D 19 -  -  -  	add	hl, de
   24 D1:E53E CD 6E AC D1 	call	InsertCallHL									; call *
   25 D1:E542 78 -  -  -  	ld	a, b
   26 D1:E543 B7 -  -  -  	or	a
   27 D1:E544 C8 -  -  -  	ret	z
   28 D1:E545 3E E1 -  -  	ld	a, 0E1h
   29 D1:E547 CD 1B AD D1 _:	call	InsertA
   30 D1:E54B 10 FA -  -  	djnz	-_
   31 D1:E54D C9 -  -  -  	ret											; pop hl
   32 D1:E54E -  -  -  -  	
   33 D1:E54E -  -  -  -  CFunction1Arg:
   34 D1:E54E FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   35 D1:E552 CA 40 AF D1 	jp	z, ErrorSyntax
   36 D1:E556 2A 62 EA D1 	ld	hl, (programPtr)
   37 D1:E55A FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   38 D1:E55E CD CF AC D1 	call	CGetArgumentLast
   39 D1:E562 06 01 -  -  	ld	b, 1
   40 D1:E564 18 B2 -  -  	jr	CInsertCallPops
   41 D1:E566 -  -  -  -  		
   42 D1:E566 -  -  -  -  CFunction2Args:
   43 D1:E566 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   44 D1:E56A CA 40 AF D1 	jp	z, ErrorSyntax
   45 D1:E56E 2A 62 EA D1 	ld	hl, (programPtr)
   46 D1:E572 22 84 E5 D1 	ld	(CFunction2ArgsSMC2), hl
   47 D1:E576 21 C6 52 D0 	ld	hl, tempArg1
   48 D1:E57A FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   49 D1:E57E CD D3 AC D1 	call	CGetArgument
   50 D1:E582 E5 -  -  -  	push	hl
   51 D1:E583 -  -  -  -  CFunction2ArgsSMC2 = $+1
   52 D1:E583 21 00 00 00 		ld	hl, 0
   53 D1:E587 FD CB B0 5E 		bit	arg2_is_small, (iy+fFunction1)
   54 D1:E58B CD CF AC D1 		call	CGetArgumentLast
   55 D1:E58F ED 5B 62 EA 
              D1 -  -  -  		ld	de, (programPtr)
   56 D1:E594 E1 -  -  -  	pop	hl
   57 D1:E595 01 C6 52 D0 	ld	bc, tempArg1
   58 D1:E599 CD 87 E8 D1 	call	CCheckIfPrevArgIsSame
   59 D1:E59D CD 28 AD D1 	call	CAddArgument
   60 D1:E5A1 ED 53 62 EA 
              D1 -  -  -  	ld	(programPtr), de
   61 D1:E5A6 06 02 -  -  	ld	b, 2
   62 D1:E5A8 C3 18 E5 D1 	jp	CInsertCallPops
   63 D1:E5AC -  -  -  -  	
   64 D1:E5AC -  -  -  -  CFunction3Args:
   65 D1:E5AC FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   66 D1:E5B0 CA 40 AF D1 	jp	z, ErrorSyntax
   67 D1:E5B4 2A 62 EA D1 	ld	hl, (programPtr)
   68 D1:E5B8 22 E1 E5 D1 	ld	(CFunction3ArgsSMC2), hl
   69 D1:E5BC 21 C6 52 D0 	ld	hl, tempArg1
   70 D1:E5C0 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   71 D1:E5C4 CD D3 AC D1 	call	CGetArgument
   72 D1:E5C8 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   73 D1:E5CC F5 -  -  -  	push	af
   74 D1:E5CD FD CB C0 7E 		bit	output_is_string, (iy+fExpression1)
   75 D1:E5D1 F5 -  -  -  		push	af
   76 D1:E5D2 E5 -  -  -  			push	hl
   77 D1:E5D3 21 AE 56 D0 				ld	hl, tempArg2
   78 D1:E5D7 FD CB B0 5E 				bit	arg2_is_small, (iy+fFunction1)
   79 D1:E5DB CD D3 AC D1 				call	CGetArgument
   80 D1:E5DF E5 -  -  -  				push	hl
   81 D1:E5E0 -  -  -  -  CFunction3ArgsSMC2 = $+1
   82 D1:E5E0 21 00 00 00 					ld	hl, 0
   83 D1:E5E4 FD CB B0 56 					bit	arg3_is_small, (iy+fFunction1)
   84 D1:E5E8 CD CF AC D1 					call	CGetArgumentLast
   85 D1:E5EC ED 5B 62 EA 
              D1 -  -  -  					ld	de, (programPtr)
   86 D1:E5F1 E1 -  -  -  				pop	hl
   87 D1:E5F2 01 AE 56 D0 				ld	bc, tempArg2
   88 D1:E5F6 CD 87 E8 D1 				call	CCheckIfPrevArgIsSame
   89 D1:E5FA CD 28 AD D1 				call	CAddArgument
   90 D1:E5FE E1 -  -  -  			pop	hl
   91 D1:E5FF 01 C6 52 D0 			ld	bc, tempArg1
   92 D1:E603 CD 87 E8 D1 			call	CCheckIfPrevArgIsSame
   93 D1:E607 B7 -  -  -  			or	a
   94 D1:E608 ED 42 -  -  			sbc	hl, bc
   95 D1:E60A E5 -  -  -  			push	hl
   96 D1:E60B C1 -  -  -  			pop	bc
   97 D1:E60C 21 C6 52 D0 			ld	hl, tempArg1
   98 D1:E610 ED A0 -  -  			ldi
   99 D1:E612 F1 -  -  -  		pop	af
  100 D1:E613 28 0B -  -  		jr	z, +_
  101 D1:E615 E5 -  -  -  		push	hl
  102 D1:E616 2A 6E EA D1 			ld	hl, (programDataOffsetPtr)
  103 D1:E61A 2B -  -  -  			dec	hl
  104 D1:E61B 2B -  -  -  			dec	hl
  105 D1:E61C 2B -  -  -  			dec	hl
  106 D1:E61D ED 1F -  -  			ld	(hl), de
  107 D1:E61F E1 -  -  -  		pop	hl
  108 D1:E620 ED B0 -  -  _:		ldir
  109 D1:E622 ED 53 62 EA 
              D1 -  -  -  		ld	(programPtr), de
  110 D1:E627 06 03 -  -  		ld	b, 3
  111 D1:E629 CD 18 E5 D1 		call	CInsertCallPops
  112 D1:E62D 3A 21 E5 D1 		ld	a, (CFunctionArgsSMC)
  113 D1:E631 FE 3B -  -  		cp	a, 59
  114 D1:E633 28 0C -  -  		jr	z, CInsertSprite
  115 D1:E635 FE 3C -  -  		cp	a, 60
  116 D1:E637 28 08 -  -  		jr	z, CInsertSprite
  117 D1:E639 F1 -  -  -  	pop	af
  118 D1:E63A C9 -  -  -  	ret
  119 D1:E63B -  -  -  -  	
  120 D1:E63B -  -  -  -  CInsertSpriteScaled:
  121 D1:E63B 01 F3 FF FF 		ld	bc, -13
  122 D1:E63F 18 04 -  -  		jr	+_
  123 D1:E641 -  -  -  -  CInsertSprite:
  124 D1:E641 01 F5 FF FF 		ld	bc, -11
  125 D1:E645 F1 -  -  -  _:	pop	af
  126 D1:E646 2A 62 EA D1 	ld	hl, (programPtr)
  127 D1:E64A 28 1B -  -  	jr	z, +_
  128 D1:E64C 09 -  -  -  	add	hl, bc
  129 D1:E64D E5 -  -  -  	push	hl
  130 D1:E64E ED 27 -  -  		ld	hl, (hl)
  131 D1:E650 E5 -  -  -  		push	hl
  132 D1:E651 D1 -  -  -  		pop	de
  133 D1:E652 29 -  -  -  		add	hl, hl
  134 D1:E653 19 -  -  -  		add	hl, de
  135 D1:E654 ED 5B 33 EA 
              D0 -  -  -  		ld	de, (PrevProgramPtr)
  136 D1:E659 19 -  -  -  		add	hl, de
  137 D1:E65A 11 81 7C FC 		ld	de, UserMem - program
  138 D1:E65E 19 -  -  -  		add	hl, de
  139 D1:E65F EB -  -  -  		ex	de, hl
  140 D1:E660 E1 -  -  -  	pop	hl
  141 D1:E661 ED 1F -  -  	ld	(hl), de
  142 D1:E663 2B -  -  -  	dec	hl
  143 D1:E664 36 2A -  -  	ld	(hl), 02Ah									; ld hl, (XXXXXX)
  144 D1:E666 C9 -  -  -  	ret
  145 D1:E667 03 -  -  -  _:	inc	bc
  146 D1:E668 03 -  -  -  	inc	bc
  147 D1:E669 03 -  -  -  	inc	bc
  148 D1:E66A 09 -  -  -  	add	hl, bc
  149 D1:E66B 22 62 EA D1 	ld	(programPtr), hl
  150 D1:E66F 23 -  -  -  	inc	hl
  151 D1:E670 23 -  -  -  	inc	hl
  152 D1:E671 ED 27 -  -  	ld	hl, (hl)
  153 D1:E673 E5 -  -  -  	push	hl
  154 D1:E674 3E E5 -  -  		ld	a, 0E5h
  155 D1:E676 CD 1B AD D1 		call	InsertA									; push hl
  156 D1:E67A 3E D1 -  -  		ld	a, 0D1h
  157 D1:E67C 21 29 19 11 		ld	hl, 0111929h
  158 D1:E680 CD 4C AC D1 		call	InsertAHL								; pop de \ add hl, hl \ add hl, de \ ld de, ******
  159 D1:E684 2A 33 EA D0 		ld	hl, (PrevProgramPtr)
  160 D1:E688 11 81 7C FC 		ld	de, UserMem - program
  161 D1:E68C 19 -  -  -  		add	hl, de
  162 D1:E68D CD 50 AC D1 		call	InsertHL								; ld de, XXXXXX
  163 D1:E691 3E 19 -  -  		ld	a, 019h
  164 D1:E693 21 ED 27 E5 		ld	hl, 0E527EDh
  165 D1:E697 CD 4C AC D1 		call	InsertAHL								; add hl, de \ ld hl, (hl) \ push hl
  166 D1:E69B E1 -  -  -  	pop	hl
  167 D1:E69C CD 6E AC D1 	call	InsertCallHL									; call ******
  168 D1:E6A0 21 E1 E1 E1 	ld	hl, 0E1E1E1h
  169 D1:E6A4 CD 50 AC D1 	call	InsertHL									; pop hl \ pop hl \ pop hl
  170 D1:E6A8 3A 21 E5 D1 	ld	a, (CFunctionArgsSMC)
  171 D1:E6AC FE 3E -  -  	cp	a, 62
  172 D1:E6AE D8 -  -  -  	ret	c
  173 D1:E6AF 3E E1 -  -  	ld	a, 0E1h
  174 D1:E6B1 CD 1B AD D1 	call	InsertA										; pop hl
  175 D1:E6B5 C3 1B AD D1 	jp	InsertA										; pop hl
  176 D1:E6B9 -  -  -  -  	
  177 D1:E6B9 -  -  -  -  CFunction4Args:
  178 D1:E6B9 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  179 D1:E6BD CA 40 AF D1 	jp	z, ErrorSyntax
  180 D1:E6C1 2A 62 EA D1 	ld	hl, (programPtr)
  181 D1:E6C5 22 F1 E6 D1 	ld	(CFunction4ArgsSMC2), hl
  182 D1:E6C9 21 C6 52 D0 	ld	hl, tempArg1
  183 D1:E6CD FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  184 D1:E6D1 CD D3 AC D1 	call	CGetArgument
  185 D1:E6D5 E5 -  -  -  	push	hl
  186 D1:E6D6 21 AE 56 D0 		ld	hl, tempArg2
  187 D1:E6DA FD CB B0 5E 		bit	arg2_is_small, (iy+fFunction1)
  188 D1:E6DE CD D3 AC D1 		call	CGetArgument
  189 D1:E6E2 E5 -  -  -  		push	hl
  190 D1:E6E3 21 96 5A D0 			ld	hl, tempArg3
  191 D1:E6E7 FD CB B0 56 			bit	arg3_is_small, (iy+fFunction1)
  192 D1:E6EB CD D3 AC D1 			call	CGetArgument
  193 D1:E6EF E5 -  -  -  			push	hl
  194 D1:E6F0 -  -  -  -  CFunction4ArgsSMC2 = $+1
  195 D1:E6F0 21 00 00 00 				ld	hl, 0
  196 D1:E6F4 FD CB B0 4E 				bit	arg4_is_small, (iy+fFunction1)
  197 D1:E6F8 CD CF AC D1 				call	CGetArgumentLast
  198 D1:E6FC ED 5B 62 EA 
              D1 -  -  -  				ld	de, (programPtr)
  199 D1:E701 E1 -  -  -  			pop	hl
  200 D1:E702 01 96 5A D0 			ld	bc, tempArg3
  201 D1:E706 CD 87 E8 D1 			call	CCheckIfPrevArgIsSame
  202 D1:E70A CD 28 AD D1 			call	CAddArgument
  203 D1:E70E E1 -  -  -  		pop	hl
  204 D1:E70F 01 AE 56 D0 		ld	bc, tempArg2
  205 D1:E713 CD 87 E8 D1 		call	CCheckIfPrevArgIsSame
  206 D1:E717 CD 28 AD D1 		call	CAddArgument
  207 D1:E71B E1 -  -  -  	pop	hl
  208 D1:E71C 01 C6 52 D0 	ld	bc, tempArg1
  209 D1:E720 CD 87 E8 D1 	call	CCheckIfPrevArgIsSame
  210 D1:E724 CD 28 AD D1 	call	CAddArgument
  211 D1:E728 ED 53 62 EA 
              D1 -  -  -  	ld	(programPtr), de
  212 D1:E72D 06 04 -  -  	ld	b, 4
  213 D1:E72F C3 18 E5 D1 	jp	CInsertCallPops
  214 D1:E733 -  -  -  -  	
  215 D1:E733 -  -  -  -  CFunction5Args:
  216 D1:E733 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  217 D1:E737 CA 40 AF D1 	jp	z, ErrorSyntax
  218 D1:E73B 2A 62 EA D1 	ld	hl, (programPtr)
  219 D1:E73F 22 7D E7 D1 	ld	(CFunction5ArgsSMC2), hl
  220 D1:E743 21 C6 52 D0 	ld	hl, tempArg1
  221 D1:E747 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  222 D1:E74B CD D3 AC D1 	call	CGetArgument
  223 D1:E74F FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  224 D1:E753 F5 -  -  -  	push	af
  225 D1:E754 E5 -  -  -  		push	hl
  226 D1:E755 21 AE 56 D0 			ld	hl, tempArg2
  227 D1:E759 FD CB B0 5E 			bit	arg2_is_small, (iy+fFunction1)
  228 D1:E75D CD D3 AC D1 			call	CGetArgument
  229 D1:E761 E5 -  -  -  			push	hl
  230 D1:E762 21 96 5A D0 				ld	hl, tempArg3
  231 D1:E766 FD CB B0 56 				bit	arg3_is_small, (iy+fFunction1)
  232 D1:E76A CD D3 AC D1 				call	CGetArgument
  233 D1:E76E E5 -  -  -  				push	hl
  234 D1:E76F 21 7E 5E D0 					ld	hl, tempArg4
  235 D1:E773 FD CB B0 4E 					bit	arg4_is_small, (iy+fFunction1)
  236 D1:E777 CD D3 AC D1 					call	CGetArgument
  237 D1:E77B E5 -  -  -  					push	hl
  238 D1:E77C -  -  -  -  CFunction5ArgsSMC2 = $+1
  239 D1:E77C 21 00 00 00 						ld	hl, 0
  240 D1:E780 FD CB B0 46 						bit	arg5_is_small, (iy+fFunction1)
  241 D1:E784 CD CF AC D1 						call	CGetArgumentLast
  242 D1:E788 ED 5B 62 EA 
              D1 -  -  -  						ld	de, (programPtr)
  243 D1:E78D E1 -  -  -  					pop	hl
  244 D1:E78E 01 7E 5E D0 					ld	bc, tempArg4
  245 D1:E792 CD 87 E8 D1 					call	CCheckIfPrevArgIsSame
  246 D1:E796 CD 28 AD D1 					call	CAddArgument
  247 D1:E79A E1 -  -  -  				pop	hl
  248 D1:E79B 01 96 5A D0 				ld	bc, tempArg3
  249 D1:E79F CD 87 E8 D1 				call	CCheckIfPrevArgIsSame
  250 D1:E7A3 CD 28 AD D1 				call	CAddArgument
  251 D1:E7A7 E1 -  -  -  			pop	hl
  252 D1:E7A8 01 AE 56 D0 			ld	bc, tempArg2
  253 D1:E7AC CD 87 E8 D1 			call	CCheckIfPrevArgIsSame
  254 D1:E7B0 CD 28 AD D1 			call	CAddArgument
  255 D1:E7B4 E1 -  -  -  		pop	hl
  256 D1:E7B5 01 C6 52 D0 		ld	bc, tempArg1
  257 D1:E7B9 CD 87 E8 D1 		call	CCheckIfPrevArgIsSame
  258 D1:E7BD CD 28 AD D1 		call	CAddArgument
  259 D1:E7C1 ED 53 62 EA 
              D1 -  -  -  		ld	(programPtr), de
  260 D1:E7C6 06 05 -  -  		ld	b, 5
  261 D1:E7C8 CD 18 E5 D1 		call	CInsertCallPops
  262 D1:E7CC 3A 21 E5 D1 		ld	a, (CFunctionArgsSMC)
  263 D1:E7D0 FE 3E -  -  		cp	a, 62
  264 D1:E7D2 CA 3B E6 D1 _:		jp	z, CInsertSpriteScaled
  265 D1:E7D6 FE 3F -  -  		cp	a, 63
  266 D1:E7D8 28 F8 -  -  		jr	z, -_
  267 D1:E7DA F1 -  -  -  	pop	af
  268 D1:E7DB C9 -  -  -  	ret
  269 D1:E7DC -  -  -  -  	
  270 D1:E7DC -  -  -  -  CFunction6Args:
  271 D1:E7DC FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  272 D1:E7E0 CA 40 AF D1 	jp	z, ErrorSyntax
  273 D1:E7E4 2A 62 EA D1 	ld	hl, (programPtr)
  274 D1:E7E8 22 2E E8 D1 	ld	(CFunction6ArgsSMC2), hl
  275 D1:E7EC 21 C6 52 D0 	ld	hl, tempArg1
  276 D1:E7F0 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  277 D1:E7F4 CD D3 AC D1 	call	CGetArgument
  278 D1:E7F8 E5 -  -  -  	push	hl
  279 D1:E7F9 21 AE 56 D0 		ld	hl, tempArg2
  280 D1:E7FD FD CB B0 5E 		bit	arg2_is_small, (iy+fFunction1)
  281 D1:E801 CD D3 AC D1 		call	CGetArgument
  282 D1:E805 E5 -  -  -  		push	hl
  283 D1:E806 21 96 5A D0 			ld	hl, tempArg3
  284 D1:E80A FD CB B0 56 			bit	arg3_is_small, (iy+fFunction1)
  285 D1:E80E CD D3 AC D1 			call	CGetArgument
  286 D1:E812 E5 -  -  -  			push	hl
  287 D1:E813 21 7E 5E D0 				ld	hl, tempArg4
  288 D1:E817 FD CB B0 4E 				bit	arg4_is_small, (iy+fFunction1)
  289 D1:E81B CD D3 AC D1 				call	CGetArgument
  290 D1:E81F E5 -  -  -  				push	hl
  291 D1:E820 21 66 62 D0 					ld	hl, tempArg5
  292 D1:E824 FD CB B0 46 					bit	arg5_is_small, (iy+fFunction1)
  293 D1:E828 CD D3 AC D1 					call	CGetArgument
  294 D1:E82C E5 -  -  -  					push	hl
  295 D1:E82D -  -  -  -  CFunction6ArgsSMC2 = $+1
  296 D1:E82D 21 00 00 00 						ld	hl, 0
  297 D1:E831 BF -  -  -  						cp	a, a					;	reset zero flag
  298 D1:E832 CD CF AC D1 						call	CGetArgumentLast
  299 D1:E836 ED 5B 62 EA 
              D1 -  -  -  						ld	de, (programPtr)
  300 D1:E83B E1 -  -  -  					pop	hl
  301 D1:E83C 01 66 62 D0 					ld	bc, tempArg5
  302 D1:E840 CD 87 E8 D1 					call	CCheckIfPrevArgIsSame
  303 D1:E844 CD 28 AD D1 					call	CAddArgument
  304 D1:E848 E1 -  -  -  				pop	hl
  305 D1:E849 01 7E 5E D0 				ld	bc, tempArg4
  306 D1:E84D CD 87 E8 D1 				call	CCheckIfPrevArgIsSame
  307 D1:E851 CD 28 AD D1 				call	CAddArgument
  308 D1:E855 E1 -  -  -  			pop	hl
  309 D1:E856 01 96 5A D0 			ld	bc, tempArg3
  310 D1:E85A CD 87 E8 D1 			call	CCheckIfPrevArgIsSame
  311 D1:E85E CD 28 AD D1 			call	CAddArgument
  312 D1:E862 E1 -  -  -  		pop	hl
  313 D1:E863 01 AE 56 D0 		ld	bc, tempArg2
  314 D1:E867 CD 87 E8 D1 		call	CCheckIfPrevArgIsSame
  315 D1:E86B CD 28 AD D1 		call	CAddArgument
  316 D1:E86F E1 -  -  -  	pop	hl
  317 D1:E870 01 C6 52 D0 	ld	bc, tempArg1
  318 D1:E874 CD 87 E8 D1 	call	CCheckIfPrevArgIsSame
  319 D1:E878 CD 28 AD D1 	call	CAddArgument
  320 D1:E87C ED 53 62 EA 
              D1 -  -  -  	ld	(programPtr), de
  321 D1:E881 06 06 -  -  	ld	b, 6
  322 D1:E883 C3 18 E5 D1 	jp	CInsertCallPops
  323 D1:E887 -  -  -  -  	
  324 D1:E887 -  -  -  -  CCheckIfPrevArgIsSame:
  325 D1:E887 E5 -  -  -  	push	hl
  326 D1:E888 D5 -  -  -  		push	de
  327 D1:E889 C5 -  -  -  			push	bc
  328 D1:E88A B7 -  -  -  				or	a
  329 D1:E88B ED 42 -  -  				sbc	hl, bc
  330 D1:E88D EB -  -  -  				ex	de, hl
  331 D1:E88E ED 52 -  -  				sbc	hl, de
  332 D1:E890 D1 -  -  -  			pop	de
  333 D1:E891 1A -  -  -  _:			ld	a, (de)
  334 D1:E892 BE -  -  -  			cp	a, (hl)
  335 D1:E893 23 -  -  -  			inc	hl
  336 D1:E894 13 -  -  -  			inc	de
  337 D1:E895 28 FA -  -  			jr	z, -_
  338 D1:E897 D1 -  -  -  		pop	de
  339 D1:E898 E1 -  -  -  	pop	hl
  340 D1:E899 C0 -  -  -  	ret	nz
  341 D1:E89A E5 -  -  -  	push	hl
  342 D1:E89B C1 -  -  -  	pop	bc
  343 D1:E89C 0B -  -  -  	dec	bc
  344 D1:E89D C9 -  -  -  	ret
Listing for file "ice.asm"
  450 D1:E89E -  -  -  -  #include "clibs/graphics.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\clibs\graphics.asm"
    1 D1:E89E -  -  -  -  ; Byte: . . . . . . . .
    2 D1:E89E -  -  -  -  ;       <---> <------->
    3 D1:E89E -  -  -  -  ;       Args  1 = that argument is small (0-255)
    4 D1:E89E -  -  -  -  ;       1 1 1:
    5 D1:E89E -  -  -  -  ;    	bit   1 reset = not implemented
    6 D1:E89E -  -  -  -  ;		bit   0 set   = special function (none yet)
    7 D1:E89E -  -  -  -  
    8 D1:E89E -  -  -  -  CFunctionsArguments:
    9 D1:E89E 00 -  -  -  Begin:									.db 000000000b
   10 D1:E89F 00 -  -  -  End_:									.db 000000000b
   11 D1:E8A0 30 -  -  -  SetColor:								.db 000110000b
   12 D1:E8A1 00 -  -  -  SetDefaultPalette:						.db 000000000b
   13 D1:E8A2 E0 -  -  -  SetPalette:								.db 011100000b
   14 D1:E8A3 30 -  -  -  FillScreen:								.db 000110000b
   15 D1:E8A4 48 -  -  -  SetPixel:								.db 001001000b
   16 D1:E8A5 E0 -  -  -  GetPixel:								.db 011100000b
   17 D1:E8A6 E0 -  -  -  GetDraw:								.db 011100000b
   18 D1:E8A7 30 -  -  -  SetDraw:								.db 000110000b
   19 D1:E8A8 00 -  -  -  SwapDraw:								.db 000000000b
   20 D1:E8A9 30 -  -  -  Blit:									.db 000110000b
   21 D1:E8AA 7C -  -  -  BlitLines:								.db 001111100b
   22 D1:E8AB B5 -  -  -  BlitArea:								.db 010110101b
   23 D1:E8AC 30 -  -  -  PrintChar:								.db 000110000b
   24 D1:E8AD 48 -  -  -  PrintInt:								.db 001001000b
   25 D1:E8AE 48 -  -  -  PrintUInt:								.db 001001000b
   26 D1:E8AF 20 -  -  -  PrintString_:							.db 000100000b
   27 D1:E8B0 60 -  -  -  PrintStringXY:							.db 001100000b
   28 D1:E8B1 48 -  -  -  SetTextXY:								.db 001001000b
   29 D1:E8B2 30 -  -  -  SetTextBGColor:							.db 000110000b
   30 D1:E8B3 30 -  -  -  SetTextFGColor:							.db 000110000b
   31 D1:E8B4 30 -  -  -  SetTextTransparentColor:				.db 000110000b
   32 D1:E8B5 E0 -  -  -  SetCustomFontData:						.db 011100000b
   33 D1:E8B6 E0 -  -  -  SetCustomFontSpacing:					.db 011100000b
   34 D1:E8B7 30 -  -  -  SetMonospaceFont:						.db 000110000b
   35 D1:E8B8 E0 -  -  -  GetStringWidth:							.db 011100000b
   36 D1:E8B9 E0 -  -  -  GetCharWidth:							.db 011100000b
   37 D1:E8BA E0 -  -  -  GetTextX:								.db 011100000b
   38 D1:E8BB E0 -  -  -  GetTextY:								.db 011100000b
   39 D1:E8BC 80 -  -  -  Line:									.db 010000000b
   40 D1:E8BD 60 -  -  -  HorizLine:								.db 001100000b
   41 D1:E8BE 60 -  -  -  VertLine:								.db 001100000b
   42 D1:E8BF 60 -  -  -  Circle:									.db 001100000b
   43 D1:E8C0 60 -  -  -  FillCircle:								.db 001100000b
   44 D1:E8C1 80 -  -  -  Rectangle:								.db 010000000b
   45 D1:E8C2 80 -  -  -  FillRectangle:							.db 010000000b
   46 D1:E8C3 80 -  -  -  LineNoClip:								.db 010000000b
   47 D1:E8C4 60 -  -  -  HorizLineNoClip:						.db 001100000b
   48 D1:E8C5 60 -  -  -  VertLineNoClip:							.db 001100000b
   49 D1:E8C6 60 -  -  -  FillCircleNoClip:						.db 001100000b
   50 D1:E8C7 80 -  -  -  RectangleNoClip:						.db 010000000b
   51 D1:E8C8 80 -  -  -  FillRectangleNoClip:					.db 010000000b
   52 D1:E8C9 82 -  -  -  SetClipRegion:							.db 010000010b
   53 D1:E8CA E0 -  -  -  GetClipRegion:							.db 011100000b
   54 D1:E8CB 20 -  -  -  ShiftDown:								.db 000100000b
   55 D1:E8CC 20 -  -  -  ShiftUp:								.db 000100000b
   56 D1:E8CD 20 -  -  -  ShiftLeft:								.db 000100000b
   57 D1:E8CE 20 -  -  -  ShiftRight:								.db 000100000b
   58 D1:E8CF E0 -  -  -  Tilemap:								.db 011100000b
   59 D1:E8D0 E0 -  -  -  TilemapNoClip:							.db 011100000b
   60 D1:E8D1 E0 -  -  -  TransparentTilemap:						.db 011100000b
   61 D1:E8D2 E0 -  -  -  TransparentTilemapNoClip:				.db 011100000b
   62 D1:E8D3 E0 -  -  -  TilePtr:								.db 011100000b
   63 D1:E8D4 E0 -  -  -  TilePtrMapped:							.db 011100000b
   64 D1:E8D5 E0 -  -  -  LZDecompress:							.db 011100000b
   65 D1:E8D6 E0 -  -  -  AllocSprite:							.db 011100000b
   66 D1:E8D7 E0 -  -  -  Sprite:									.db 011100000b
   67 D1:E8D8 E0 -  -  -  TransparentSprite:						.db 011100000b
   68 D1:E8D9 64 -  -  -  SpriteNoClip:							.db 001100100b
   69 D1:E8DA 64 -  -  -  TransparentSpriteNoClip:				.db 001100100b
   70 D1:E8DB E0 -  -  -  GetSpriteNoClip:						.db 011100000b
   71 D1:E8DC A7 -  -  -  ScaledSpriteNoClip:						.db 010100111b
   72 D1:E8DD A7 -  -  -  ScaledTransparentSpriteNoClip:			.db 010100111b
   73 D1:E8DE E0 -  -  -  FlipSpriteY:							.db 011100000b
   74 D1:E8DF E0 -  -  -  FlipSpriteX:							.db 011100000b
   75 D1:E8E0 E0 -  -  -  RotateSpriteC:							.db 011100000b
   76 D1:E8E1 E0 -  -  -  RotateSpriteCC:							.db 011100000b
   77 D1:E8E2 E0 -  -  -  RotateSpriteHalf:						.db 011100000b
   78 D1:E8E3 E0 -  -  -  Polygon:								.db 011100000b
   79 D1:E8E4 E0 -  -  -  PolygonNoClip:							.db 011100000b
   80 D1:E8E5 C0 -  -  -  FillTriangle:							.db 011000000b
   81 D1:E8E6 C0 -  -  -  FillTriangleNoClip:						.db 011000000b
   82 D1:E8E7 E0 -  -  -  LZDecompressSprite:						.db 011100000b
   83 D1:E8E8 58 -  -  -  SetTextScale:							.db 001011000b
   84 D1:E8E9 30 -  -  -  SetTransparentColor:					.db 000110000b
   85 D1:E8EA 00 -  -  -  ZeroScreen:								.db 000000000b
   86 D1:E8EB 30 -  -  -  SetTextConfig:							.db 000110000b
   87 D1:E8EC E0 -  -  -  GetSpriteChar:							.db 011100000b
   88 D1:E8ED E0 -  -  -  Lighten:								.db 011100000b
   89 D1:E8EE E0 -  -  -  Darken:									.db 011100000b
Listing for file "ice.asm"
  451 D1:E8EF -  -  -  -  #include "data.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\data.asm"
    1 D1:E8EF -  -  -  -  operators_booleans:
    2 D1:E8EF 04 40 3D 3C 
              6A 6B 6C 6D 
              6E 6F 82 83 
              70 71 00 -  	.db tStore, tAnd, tXor, tOr, tEQ, tLT, tGT, tLE, tGE, tNE, tMul, tDiv, tAdd, tSub, 0			;	0 = temp +
    3 D1:E8FE -  -  -  -  operators_special:
    4 D1:E8FE 00 01 02 03 
              04 05 05 05 
              05 04 06 06 
              06 07 -  -  	.db 0, 1, 2, 3, 4, 5, 5, 5, 5, 4, 6, 6, 6, 7
    5 D1:E90C -  -  -  -  	
    6 D1:E90C -  -  -  -  FunctionsWithReturnValue:
    7 D1:E90C AD AB 10 -  	.db tGetKey, trand, tLParen
    8 D1:E90F -  -  -  -  FunctionsWithReturnValueArguments:
    9 D1:E90F 21 1A 19 B8 
              EF 0D BC -  	.db tMean, tMin, tMax, tNot, tExtTok, tSqr, tSqrt
   10 D1:E916 -  -  -  -  FunctionsWithReturnValueEnd:
   11 D1:E916 -  -  -  -  
   12 D1:E916 -  -  -  -  FunctionsWithReturnValueStart:
   13 D1:E916 E4 D0 D1 C7 
              CF D1 32 CC 
              D1 C0 CB D1 
              BF CD D1 C3 
              CD D1 BB CD 
              D1 -  -  -  	.dl functionRoot, functionSqrt, functionCE, functionNot, functionMax, functionMin, functionMean
   14 D1:E92B -  -  -  -  
   15 D1:E92B -  -  -  -  FunctionsSingle:
   16 D1:E92B E0 DC E1 D8 
              CE D1 D2 DE 
              D3 D5 62 D6 
              D7 2C B3 5F 	.db tOutput, tInput, tClLCD, tPause, tIf, tWhile, tRepeat, tDisp, tFor, tReturn, tVarOut, tLbl, tGoto, tii, tDet, tProg
   17 D1:E93B -  -  -  -  FunctionsSingleEnd:
   18 D1:E93B -  -  -  -  
   19 D1:E93B -  -  -  -  FunctionsSingleStart:
   20 D1:E93B A0 C5 D1 30 
              D0 D1 E2 C6 
              D1 01 C7 D1 
              C7 C6 D1 8D 
              D0 D1 28 C7 
              D1 31 E2 D1 	.dl functionPrgm, functionC, functionSkipLine, functionGoto, functionLbl, functionCustom, functionReturn, functionFor
   21 D1:E953 74 C6 D1 58 
              C7 D1 4E C9 
              D1 5F C8 D1 
              31 CA D1 15 
              CA D1 F7 CA 
              D1 EB C5 D1 	.dl functionDisp, functionRepeat, functionWhile, functionIf, functionPause, functionClrHome, functionInput, functionOutput
   22 D1:E96B -  -  -  -  	
   23 D1:E96B -  -  -  -  operator_start:
   24 D1:E96B 2A D3 D1 80 
              D3 D1 E1 D3 
              D1 23 D4 D1 
              B5 D4 D1 D5 
              AE D1 -  -  	.dl SubNumberXXX, SubVariableXXX, SubChainPushXXX, SubChainAnsXXX, SubFunctionXXX, SubError
   25 D1:E97D 1E D5 D1 58 
              D5 D1 A2 D5 
              D1 EB D5 D1 
              8B D6 D1 D9 
              AE D1 -  -  	.dl AddNumberXXX, AddVariableXXX, AddChainPushXXX, AddChainAnsXXX, AddFunctionXXX, AddError
   26 D1:E98F F4 D6 D1 50 
              D7 D1 C3 D7 
              D1 0C D8 D1 
              81 D8 D1 DD 
              AE D1 -  -  	.dl DivNumberXXX, DivVariableXXX, DivChainPushXXX, DivChainAnsXXX, DivFunctionXXX, DivError
   27 D1:E9A1 DE D8 D1 1B 
              D9 D1 66 D9 
              D1 B2 D9 D1 
              77 DA D1 E1 
              AE D1 -  -  	.dl MulNumberXXX, MulVariableXXX, MulChainPushXXX, MulChainAnsXXX, MulFunctionXXX, MulError
   28 D1:E9B3 B4 DC D1 0A 
              DD D1 83 DD 
              D1 CF DD D1 
              4E DE D1 FF 
              AE D1 -  -  	.dl NEQNumberXXX, NEQVariableXXX, NEQChainPushXXX, NEQChainAnsXXX, NEQFunctionXXX, NEQError
   29 D1:E9C5 DA DA D1 37 
              DB D1 AB DB 
              D1 F2 DB D1 
              53 DC D1 E5 
              AE D1 -  -  	.dl GLETNumberXXX, GLETVariableXXX, GLETChainPushXXX, GLETChainAnsXXX, GLETFunctionXXX, GLETError
   30 D1:E9D7 91 DE D1 0D 
              DF D1 92 DF 
              D1 D5 DF D1 
              40 E0 D1 0D 
              AF D1 -  -  	.dl XORANDNumberXXX, XORANDVariableXXX, XORANDChainPushXXX, XORANDChainAnsXXX, XORANDFunctionXXX, XORANDError
   31 D1:E9E9 83 E0 D1 DA 
              E0 D1 20 E1 
              D1 3E E1 D1 
              65 E1 D1 B4 
              E1 D1 -  -  	.dl StoNumberXXX, StoVariableXXX, StoChainPushXXX, StoChainAnsXXX, StoFunctionXXX, StoListXXX
   32 D1:E9FB -  -  -  -  	
   33 D1:E9FB -  -  -  -  CArguments:
   34 D1:E9FB 0E E5 D1 4E 
              E5 D1 66 E5 
              D1 AC E5 D1 
              B9 E6 D1 33 
              E7 D1 DC E7 
              D1 -  -  -  	.dl CFunction0Args, CFunction1Arg, CFunction2Args, CFunction3Args, CFunction4Args, CFunction5Args, CFunction6Args
   35 D1:EA10 -  -  -  -  	
   36 D1:EA10 -  -  -  -  functionCustomStart:
   37 D1:EA10 AA D0 D1 74 
              D1 D1 FD C6 
              D1 F4 D1 D1 	.dl functionExecHex, functionDefineSprite, functionCall, functionCompilePrgm
   38 D1:EA1C -  -  -  -  	
   39 D1:EA1C 07 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 00 -  precedence:	.db 7, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  0
   40 D1:EA2B -  -  -  -  	         ;   t+ - + / * ≠ ≥ ≤ > < = or xor and →
   41 D1:EA2B 00 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 06 -  precedence2: 	.db 0, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  6
   42 D1:EA3A -  -  -  -  
   43 D1:EA3A -  -  -  -  lists:
   44 D1:EA3A 1F EA D0 96 
              73 D0 C6 52 
              D0 66 94 D0 
              F6 31 D0 2F 
              11 D1 -  -  	.dl L1, L2, L3, L4, L5, L6
   45 D1:EA4C -  -  -  -  	
   46 D1:EA4C -  -  -  -  hexadecimals:
   47 D1:EA4C 46 45 44 43 
              42 41 39 38 
              37 36 35 34 
              33 32 31 30 	.db tF, tE, tD, tC, tB, tA, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0
   48 D1:EA5C -  -  -  -  	
   49 D1:EA5C 83 EA D0 -  stackPtr:		.dl stack
   50 D1:EA5F 6B EE D0 -  outputPtr:		.dl output
   51 D1:EA62 00 2C D5 -  programPtr:		.dl program
   52 D1:EA65 D7 F5 D0 -  programNamesPtr:	.dl programNamesStack
   53 D1:EA68 D7 F5 D0 -  labelPtr:		.dl labelStack
   54 D1:EA6B BF F9 D0 -  gotoPtr:		.dl gotoStack
   55 D1:EA6E A7 FD D0 -  programDataOffsetPtr:	.dl programDataOffsetStack
   56 D1:EA71 83 03 D1 -  tempStringsPtr:		.dl tempStringsStack
   57 D1:EA74 5F 09 D1 -  tempListsPtr:		.dl tempListsStack
   58 D1:EA77 17 15 D1 -  programDataDataPtr:	.dl programDataData
   59 D1:EA7A 00 -  -  -  amountOfPrograms	.db 0
   60 D1:EA7B 00 -  -  -  openedParensE		.db 0
   61 D1:EA7C 00 -  -  -  openedParensF		.db 0
   62 D1:EA7D 00 -  -  -  amountOfArguments	.db 0
   63 D1:EA7E 00 -  -  -  amountOfCRoutines	.db 0
   64 D1:EA7F 00 -  -  -  amountOfEnds		.db 0
   65 D1:EA80 00 -  -  -  amountOfInput		.db 0
   66 D1:EA81 00 -  -  -  amountOfPause		.db 0
   67 D1:EA82 00 -  -  -  amountOfRoot		.db 0
   68 D1:EA83 00 -  -  -  ExprOutput		.db 0
   69 D1:EA84 00 -  -  -  ExprOutput2		.db 0
   70 D1:EA85 00 -  -  -  AmountOfSubPrograms	.db 0
   71 D1:EA86 -  -  -  -  
   72 D1:EA86 -  -  -  -  varname:
   73 D1:EA86 06 00 00 00 
              00 00 00 00 
              00 00 -  -  	.db ProtProgObj, 0,0,0,0,0,0,0,0,0
   74 D1:EA90 -  -  -  -  	
   75 D1:EA90 -  -  -  -  usedCroutines:
   76 D1:EA90 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  .fill	AMOUNT_OF_C_FUNCTIONS, 0
   77 D1:EAE1 -  -  -  -  
   78 D1:EAE1 -  -  -  -  ICEAppvar:
   79 D1:EAE1 15 49 43 45 
              41 50 50 56 
              00 -  -  -  	.db AppVarObj, "ICEAPPV", 0
   80 D1:EAEA -  -  -  -  ICEProgram:
   81 D1:EAEA 06 49 43 45 
              00 -  -  -  	.db ProtProgObj, "ICE", 0
   82 D1:EAEF -  -  -  -  	
   83 D1:EAEF -  -  -  -  ErrorMessageStandard:
   84 D1:EAEF 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 66 6F 
              72 20 27 00 	.db "Invalid arguments for '", 0
   85 D1:EB07 -  -  -  -  EndErrorMessage:
   86 D1:EB07 54 6F 6F 20 
              6D 61 6E 79 
              20 45 6E 64 
              73 21 00 -  	.db "Too many Ends!", 0
   87 D1:EB16 -  -  -  -  GoodCompileMessage:
   88 D1:EB16 53 75 63 63 
              65 73 66 75 
              6C 6C 79 20 
              63 6F 6D 70 
              69 6C 65 64 
              21 00 -  -  	.db "Succesfully compiled!", 0
   89 D1:EB2C -  -  -  -  NoProgramsMessage:
   90 D1:EB2C 4E 6F 20 70 
              72 6F 67 72 
              61 6D 73 20 
              66 6F 75 6E 
              64 21 00 -  	.db "No programs found!", 0
   91 D1:EB3F -  -  -  -  InvalidTokenMessage:
   92 D1:EB3F 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              74 6F 6B 65 
              6E 21 00 -  	.db "Unsupported token!", 0
   93 D1:EB52 -  -  -  -  InvalidListArgumentMessage:
   94 D1:EB52 4F 6E 6C 79 
              20 69 6E 74 
              65 67 65 72 
              73 20 69 6E 
              20 6C 69 73 
              74 73 20 73 
              75 70 70 6F 
              72 74 65 64 
              21 00 -  -  	.db "Only integers in lists supported!", 0
   95 D1:EB74 -  -  -  -  InvalidNameLengthMessage:
   96 D1:EB74 50 72 6F 67 
              72 61 6D 20 
              6E 61 6D 65 
              20 74 6F 6F 
              20 6C 6F 6E 
              67 21 00 -  	.db "Program name too long!", 0
   97 D1:EB8B -  -  -  -  SameNameMessage:
   98 D1:EB8B 4F 75 74 70 
              75 74 20 6E 
              61 6D 65 20 
              69 73 20 74 
              68 65 20 73 
              61 6D 65 20 
              61 73 20 69 
              6E 70 75 74 
              20 6E 61 6D 
              65 21 00 -  	.db "Output name is the same as input name!", 0
   99 D1:EBB2 -  -  -  -  WrongSpriteDataMessgae:
  100 D1:EBB2 49 6E 76 61 
              6C 69 64 20 
              73 70 72 69 
              74 65 20 64 
              61 74 61 21 
              00 -  -  -  	.db "Invalid sprite data!", 0
  101 D1:EBC7 -  -  -  -  FunctionFunctionMessage:
  102 D1:EBC7 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 61 20 
              66 75 6E 63 
              74 69 6F 6E 
              20 69 6E 20 
              61 20 66 75 
              6E 63 74 69 
              6F 6E 21 00 	.db "You can't use a function in a function!", 0
  103 D1:EBEF -  -  -  -  NotFoundMessage:
  104 D1:EBEF 50 72 6F 67 
              72 61 6D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 21 00 -  	.db "Program not found!", 0
  105 D1:EC02 -  -  -  -  ImplementMessage:
  106 D1:EC02 54 68 69 73 
              20 66 75 6E 
              63 74 69 6F 
              6E 20 68 61 
              73 20 6E 6F 
              74 20 62 65 
              65 6E 20 69 
              6D 70 6C 65 
              6D 65 6E 74 
              65 64 20 79 
              65 74 21 00 	.db "This function has not been implemented yet!", 0
  107 D1:EC2E -  -  -  -  SyntaxErrorMessage:
  108 D1:EC2E 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 65 6E 
              74 65 72 65 
              64 21 00 -  	.db "Invalid arguments entered!", 0
  109 D1:EC49 -  -  -  -  TooLargeLoopMessage:
  110 D1:EC49 54 6F 6F 20 
              6C 61 72 67 
              65 20 61 6E 
              6F 6E 79 6D 
              6F 75 73 20 
              6C 6F 6F 70 
              21 00 -  -  	.db "Too large anonymous loop!", 0
  111 D1:EC63 -  -  -  -  UsedCodeMessage:
  112 D1:EC63 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 63 6F 
              64 65 20 62 
              65 66 6F 72 
              65 20 44 65 
              66 69 6E 65 
              53 70 72 69 
              74 65 28 29 
              21 00 -  -  	.db "You can't use code before DefineSprite()!", 0
  113 D1:EC8D -  -  -  -  LineNumber:
  114 D1:EC8D 45 72 72 6F 
              72 20 6F 6E 
              20 6C 69 6E 
              65 20 00 -  	.db "Error on line ", 0
  115 D1:EC9C -  -  -  -  MismatchErrorMessage:
  116 D1:EC9C 4D 69 73 6D 
              61 74 63 68 
              65 64 20 70 
              61 72 65 6E 
              74 68 65 73 
              69 73 21 00 	.db "Mismatched parenthesis!", 0
  117 D1:ECB4 -  -  -  -  UnknownMessage:
  118 D1:ECB4 53 6F 6D 65 
              74 68 69 6E 
              67 20 77 65 
              6E 74 20 77 
              72 6F 6E 67 
              21 20 50 6C 
              65 61 73 65 
              20 72 65 70 
              6F 72 74 20 
              69 74 21 00 	.db "Something went wrong! Please report it!", 0
  119 D1:ECDC -  -  -  -  NotEnoughMem:
  120 D1:ECDC 4E 6F 74 20 
              65 6E 6F 75 
              67 68 20 66 
              72 65 65 20 
              52 41 4D 21 
              00 -  -  -  	.db "Not enough free RAM!", 0
  121 D1:ECF1 -  -  -  -  LabelErrorMessage:
  122 D1:ECF1 43 61 6E 27 
              74 20 66 69 
              6E 64 20 73 
              70 65 63 69 
              66 69 63 20 
              6C 61 62 65 
              6C 21 00 -  	.db "Can't find specific label!", 0
  123 D1:ED0C -  -  -  -  StartParseMessage:
  124 D1:ED0C 43 6F 6D 70 
              69 6C 69 6E 
              67 20 70 72 
              6F 67 72 61 
              6D 20 00 -  	.db "Compiling program ", 0
  125 D1:ED1F -  -  -  -  ICEName:
  126 D1:ED1F 49 43 45 20 
              43 6F 6D 70 
              69 6C 65 72 
              20 76 31 2E 
              35 20 2D 20 
              42 79 20 50 
              65 74 65 72 
              20 22 50 54 
              5F 22 20 54 
              69 6C 6C 65 
              6D 61 00 -  	.db "ICE Compiler v1.5 - By Peter \"PT_\" Tillema", 0
  127 D1:ED4A -  -  -  -  PressKey:
  128 D1:ED4A 5B 50 72 65 
              73 73 20 61 
              6E 79 20 6B 
              65 79 20 74 
              6F 20 65 78 
              69 74 5D 00 	.db "[Press any key to exit]", 0
  129 D1:ED62 -  -  -  -  	
  130 D1:ED62 -  -  -  -  MulTable:
  131 D1:ED62 01 29 00 00 
              00 00 00 00 
              00 00 -  -  	.db 1 \ add hl, hl \ .db 0,0,0,0,0,0,0,0	                                                                ; 2
  132 D1:ED6C 04 E5 D1 29 
              19 00 00 00 
              00 00 -  -  	.db 4 \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0,0	                                        ; 3
  133 D1:ED76 02 29 29 00 
              00 00 00 00 
              00 00 -  -  	.db 2 \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0,0								; 4
  134 D1:ED80 05 E5 D1 29 
              29 19 00 00 
              00 00 -  -  	.db 5 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0,0					; 5
  135 D1:ED8A 05 29 E5 D1 
              29 19 00 00 
              00 00 -  -  	.db 5 \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0					; 6
  136 D1:ED94 06 E5 D1 29 
              19 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0,0			; 7
  137 D1:ED9E 03 29 29 29 
              00 00 00 00 
              00 00 -  -  	.db 3 \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0							; 8
  138 D1:EDA8 06 E5 D1 29 
              29 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0			; 9
  139 D1:EDB2 06 E5 D1 29 
              29 19 29 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0,0			; 10
  140 D1:EDBC 07 E5 D1 29 
              29 19 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0             ; 11
  141 D1:EDC6 06 29 29 E5 
              D1 29 19 00 
              00 00 -  -  	.db 6 \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0                        ; 12
  142 D1:EDD0 07 E5 D1 29 
              19 29 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0		; 13
  143 D1:EDDA 07 E5 D1 29 
              19 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0             ; 14
  144 D1:EDE4 08 E5 D1 29 
              19 29 19 29 
              19 00 -  -  	.db 8 \	push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0	; 15
  145 D1:EDEE 04 29 29 29 
              29 00 00 00 
              00 00 -  -  	.db 4 \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0                                       ; 16
  146 D1:EDF8 07 E5 D1 29 
              29 29 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0             ; 17
  147 D1:EE02 07 E5 D1 29 
              29 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0             ; 18
  148 D1:EE0C 08 E5 D1 29 
              29 29 19 29 
              19 00 -  -  	.db 8 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0	; 19
  149 D1:EE16 07 E5 D1 29 
              29 19 29 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ .db 0,0             ; 20
  150 D1:EE20 -  -  -  -  	
  151 D1:EE20 -  -  -  -  InputRoutine:
  152 D1:EE20 CD 14 08 02 	call	_ClrScrn
  153 D1:EE24 CD 28 08 02 	call	_HomeUp
  154 D1:EE28 AF -  -  -  	xor	a, a
  155 D1:EE29 32 79 08 D0 	ld	(ioPrompt), a
  156 D1:EE2D 32 99 05 D0 	ld	(curUnder), a
  157 D1:EE31 CD 20 13 02 	call	_GetStringInput
  158 D1:EE35 2A 4E 24 D0 	ld	hl, (editSym)
  159 D1:EE39 CD E8 0A 02 	call	_VarNameToOP1HL
  160 D1:EE3D CD 0C 05 02 	call	_ChkFindSym
  161 D1:EE41 1A -  -  -  	ld	a, (de)
  162 D1:EE42 13 -  -  -  	inc	de
  163 D1:EE43 13 -  -  -  	inc	de
  164 D1:EE44 47 -  -  -  	ld	b, a
  165 D1:EE45 ED 62 -  -  	sbc	hl, hl
  166 D1:EE47 C5 -  -  -  _:	push	bc
  167 D1:EE48 29 -  -  -  		add	hl, hl
  168 D1:EE49 E5 -  -  -  		push	hl
  169 D1:EE4A C1 -  -  -  		pop	bc
  170 D1:EE4B 29 -  -  -  		add	hl, hl
  171 D1:EE4C 29 -  -  -  		add	hl, hl
  172 D1:EE4D 09 -  -  -  		add	hl, bc
  173 D1:EE4E 1A -  -  -  		ld	a, (de)
  174 D1:EE4F D6 30 -  -  		sub	a, t0
  175 D1:EE51 01 00 00 00 		ld	bc, 0
  176 D1:EE55 4F -  -  -  		ld	c, a
  177 D1:EE56 09 -  -  -  		add	hl, bc
  178 D1:EE57 13 -  -  -  		inc	de
  179 D1:EE58 C1 -  -  -  	pop	bc
  180 D1:EE59 10 EC -  -  	djnz	-_
  181 D1:EE5B -  -  -  -  InputOffset = $+2
  182 D1:EE5B DD 2F 00 -  	ld	(ix+0), hl
  183 D1:EE5E C3 78 15 02 	jp	_DeleteTempEditEqu
  184 D1:EE62 -  -  -  -  InputRoutineEnd:
  185 D1:EE62 -  -  -  -  
  186 D1:EE62 -  -  -  -  RandRoutine:
  187 D1:EE62 DD 27 51 -  	ld	hl, (ix+rand1)
  188 D1:EE65 DD 17 54 -  	ld	de, (ix+rand1+3)
  189 D1:EE68 44 -  -  -  	ld	b, h
  190 D1:EE69 4D -  -  -  	ld	c, l
  191 D1:EE6A 29 -  -  -  	add	hl, hl
  192 D1:EE6B CB 13 -  -  	rl	e
  193 D1:EE6D CB 12 -  -  	rl	d
  194 D1:EE6F 29 -  -  -  	add	hl, hl
  195 D1:EE70 CB 13 -  -  	rl	e
  196 D1:EE72 CB 12 -  -  	rl	d
  197 D1:EE74 2C -  -  -  	inc	l
  198 D1:EE75 09 -  -  -  	add	hl, bc
  199 D1:EE76 DD 2F 51 -  	ld	(ix+rand1), hl
  200 D1:EE79 ED 5A -  -  	adc	hl, de
  201 D1:EE7B DD 2F 54 -  	ld	(ix+rand1+3), hl
  202 D1:EE7E EB -  -  -  	ex	de, hl
  203 D1:EE7F DD 27 57 -  	ld	hl, (ix+rand1+6)
  204 D1:EE82 DD 07 5A -  	ld	bc, (ix+rand1+9)
  205 D1:EE85 29 -  -  -  	add	hl, hl
  206 D1:EE86 CB 11 -  -  	rl	c
  207 D1:EE88 CB 10 -  -  	rl	b
  208 D1:EE8A DD 0F 5A -  	ld	(ix+rand1+9), bc
  209 D1:EE8D 9F -  -  -  	sbc	a, a
  210 D1:EE8E E6 C5 -  -  	and	%11000101
  211 D1:EE90 AD -  -  -  	xor	l
  212 D1:EE91 6F -  -  -  	ld	l, a
  213 D1:EE92 DD 2F 57 -  	ld	(ix+rand1+6), hl
  214 D1:EE95 EB -  -  -  	ex	de, hl
  215 D1:EE96 09 -  -  -  	add	hl, bc
  216 D1:EE97 C9 -  -  -  	ret
  217 D1:EE98 -  -  -  -  RandRoutineEnd:
  218 D1:EE98 -  -  -  -  
  219 D1:EE98 -  -  -  -  DispNumberRoutine:
  220 D1:EE98 3E 12 -  -  	ld	a, 18
  221 D1:EE9A 32 96 05 D0 	ld	(curCol), a
  222 D1:EE9E CD E0 1E 02 	call	_DispHL
  223 D1:EEA2 CD F0 07 02 	call	_NewLine
  224 D1:EEA6 -  -  -  -  	
  225 D1:EEA6 -  -  -  -  DispStringRoutine:
  226 D1:EEA6 AF -  -  -  	xor	a, a
  227 D1:EEA7 32 96 05 D0 	ld	(curCol), a
  228 D1:EEAB CD C0 07 02 	call	_PutS
  229 D1:EEAF CD F0 07 02 	call	_NewLine
  230 D1:EEB3 -  -  -  -  
  231 D1:EEB3 -  -  -  -  PauseRoutine:
  232 D1:EEB3 2B -  -  -  	dec	hl
  233 D1:EEB4 -  -  -  -  PauseRoutine2:
  234 D1:EEB4 0E 6E -  -  	ld	c, 110
  235 D1:EEB6 06 20 -  -  _:	ld	b, 32
  236 D1:EEB8 10 FE -  -  	djnz	$
  237 D1:EEBA 0D -  -  -  	dec	c
  238 D1:EEBB 20 F9 -  -  	jr	nz, -_
  239 D1:EEBD B7 -  -  -  	or	a, a
  240 D1:EEBE 11 FF FF FF 	ld	de, -1
  241 D1:EEC2 19 -  -  -  	add	hl, de
  242 D1:EEC3 38 EF -  -  	jr	c, PauseRoutine2
  243 D1:EEC5 C9 -  -  -  	ret
  244 D1:EEC6 -  -  -  -  PauseRoutineEnd:
  245 D1:EEC6 -  -  -  -  
  246 D1:EEC6 -  -  -  -  MeanRoutine:
  247 D1:EEC6 DD 21 00 00 
              00 -  -  -  	ld	ix, 0
  248 D1:EECB DD 39 -  -  	add	ix, sp
  249 D1:EECD 19 -  -  -  	add	hl, de
  250 D1:EECE E5 -  -  -  	push	hl
  251 D1:EECF DD CB FF 1E 		rr	(ix-1)
  252 D1:EED3 E1 -  -  -  	pop	hl
  253 D1:EED4 CB 1C -  -  	rr	h
  254 D1:EED6 CB 1D -  -  	rr	l
  255 D1:EED8 DD 21 3F 38 
              D1 -  -  -  	ld	ix, L1+20000
  256 D1:EEDD C9 -  -  -  	ret
  257 D1:EEDE -  -  -  -  MeanRoutineEnd:
  258 D1:EEDE -  -  -  -  
  259 D1:EEDE -  -  -  -  KeypadRoutine:
  260 D1:EEDE F3 -  -  -  	di
  261 D1:EEDF 21 00 00 F5 	ld	hl, 0F50000h
  262 D1:EEE3 36 02 -  -  	ld	(hl), 2
  263 D1:EEE5 AF -  -  -  	xor	a, a
  264 D1:EEE6 BE -  -  -  _:	cp	a, (hl)
  265 D1:EEE7 20 FD -  -  	jr	nz, -_
  266 D1:EEE9 FB -  -  -  	ei
  267 D1:EEEA 68 -  -  -  	ld	l, b
  268 D1:EEEB 7E -  -  -  	ld	a, (hl)
  269 D1:EEEC ED 62 -  -  	sbc	hl, hl
  270 D1:EEEE A1 -  -  -  	and	c
  271 D1:EEEF C8 -  -  -  	ret	z
  272 D1:EEF0 2C -  -  -  	inc	l
  273 D1:EEF1 C9 -  -  -  	ret
  274 D1:EEF2 -  -  -  -  KeypadRoutineEnd:
  275 D1:EEF2 -  -  -  -  
  276 D1:EEF2 -  -  -  -  RootRoutine:
  277 D1:EEF2 F3 -  -  -  	di
  278 D1:EEF3 3B -  -  -  	dec sp      ; (sp) = ?
  279 D1:EEF4 E5 -  -  -  	push hl      ; (sp) = ?uhl
  280 D1:EEF5 3B -  -  -  		dec sp      ; (sp) = ?uhl?
  281 D1:EEF6 FD E1 -  -  		pop iy      ; (sp) = ?u, uix = hl?
  282 D1:EEF8 3B -  -  -  		dec sp      ; (sp) = ?u?
  283 D1:EEF9 F1 -  -  -  	pop af      ; af = u?
  284 D1:EEFA B7 -  -  -  	or  a,a
  285 D1:EEFB ED 62 -  -  	sbc hl,hl
  286 D1:EEFD EB -  -  -  	ex  de,hl   ; de = 0
  287 D1:EEFE ED 62 -  -  	sbc hl,hl   ; hl = 0
  288 D1:EF00 01 40 0C 00 	ld  bc,$C40 ; b = 12, c = 0x40
  289 D1:EF04 -  -  -  -  Sqrt24Loop:
  290 D1:EF04 91 -  -  -  	sub     a,c
  291 D1:EF05 ED 52 -  -  	sbc     hl,de
  292 D1:EF07 30 03 -  -  	jr      nc,Sqrt24Skip
  293 D1:EF09 81 -  -  -  	add     a,c
  294 D1:EF0A ED 5A -  -  	adc     hl,de
  295 D1:EF0C -  -  -  -  Sqrt24Skip:
  296 D1:EF0C 3F -  -  -  	ccf
  297 D1:EF0D CB 13 -  -  	rl	e
  298 D1:EF0F CB 12 -  -  	rl	d
  299 D1:EF11 FD 29 -  -  	add	iy,iy
  300 D1:EF13 17 -  -  -  	rla
  301 D1:EF14 ED 6A -  -  	adc	hl,hl
  302 D1:EF16 FD 29 -  -  	add	iy,iy
  303 D1:EF18 17 -  -  -  	rla
  304 D1:EF19 ED 6A -  -  	adc	hl,hl
  305 D1:EF1B 10 E7 -  -  	djnz	Sqrt24Loop
  306 D1:EF1D EB -  -  -  	ex	de,hl
  307 D1:EF1E C9 -  -  -  	ret
  308 D1:EF1F -  -  -  -  RootRoutineEnd:
  309 D1:EF1F -  -  -  -  
  310 D1:EF1F -  -  -  -  XORANDData:
  311 D1:EF1F 01 FF FF FF 	ld	bc, -1
  312 D1:EF23 09 -  -  -  	add	hl, bc
  313 D1:EF24 9F -  -  -  	sbc	a, a
  314 D1:EF25 EB -  -  -  	ex	de, hl
  315 D1:EF26 57 -  -  -  	ld	d, a
  316 D1:EF27 09 -  -  -  	add	hl, bc
  317 D1:EF28 9F -  -  -  	sbc	a, a
  318 D1:EF29 -  -  -  -  XORANDSMC:
  319 D1:EF29 A2 -  -  -  	and	a, d
  320 D1:EF2A ED 62 -  -  	sbc	hl, hl
  321 D1:EF2C E6 01 -  -  	and	a, 1
  322 D1:EF2E 6F -  -  -  	ld	l, a
  323 D1:EF2F -  -  -  -  
  324 D1:EF2F -  -  -  -  CData:
  325 D1:EF2F DD 21 3F 38 
              D1 -  -  -  	ld	ix, L1+20000
  326 D1:EF34 21 DA A8 D1 	ld	hl, LibLoadAppVar - CData + UserMem
  327 D1:EF38 CD 20 03 02 	call	_Mov9ToOP1
  328 D1:EF3C 3E 15 -  -  	ld	a, AppVarObj
  329 D1:EF3E 32 F8 05 D0 	ld	(OP1), a
  330 D1:EF42 CD 0C 05 02 _:	call	_ChkFindSym
  331 D1:EF46 38 24 -  -  	jr	c, NotFound
  332 D1:EF48 CD 98 1F 02 	call	_ChkInRAM
  333 D1:EF4C 20 0E -  -  	jr	nz, InArc
  334 D1:EF4E CD 28 06 02 	call	_PushOP1
  335 D1:EF52 CD 48 14 02 	call	_Arc_UnArc
  336 D1:EF56 CD C4 05 02 	call	_PopOP1
  337 D1:EF5A 18 E6 -  -  	jr	-_
  338 D1:EF5C -  -  -  -  InArc:
  339 D1:EF5C EB -  -  -  	ex	de, hl
  340 D1:EF5D 11 09 00 00 	ld	de, 9
  341 D1:EF61 19 -  -  -  	add	hl, de
  342 D1:EF62 5E -  -  -  	ld	e, (hl)
  343 D1:EF63 19 -  -  -  	add	hl, de
  344 D1:EF64 23 -  -  -  	inc	hl
  345 D1:EF65 23 -  -  -  	inc	hl
  346 D1:EF66 23 -  -  -  	inc	hl
  347 D1:EF67 11 F1 A8 D1 	ld	de, RelocationStart - CData + UserMem
  348 D1:EF6B E9 -  -  -  	jp	(hl)
  349 D1:EF6C -  -  -  -  NotFound:
  350 D1:EF6C CD 14 08 02 	call	_ClrScrn
  351 D1:EF70 CD 28 08 02 	call	_HomeUp
  352 D1:EF74 21 D6 A8 D1 	ld	hl, MissingAppVar - CData + UserMem
  353 D1:EF78 CD C0 07 02 	call	_PutS
  354 D1:EF7C CD F0 07 02 	call	_NewLine
  355 D1:EF80 C3 C0 07 02 	jp	_PutS
  356 D1:EF84 -  -  -  -  MissingAppVar:
  357 D1:EF84 4E 65 65 64 	.db "Need"
  358 D1:EF88 -  -  -  -  LibLoadAppVar:
  359 D1:EF88 20 4C 69 62 
              4C 6F 61 64 
              00 -  -  -  	.db " LibLoad", 0
  360 D1:EF91 74 69 6E 79 
              2E 63 63 2F 
              63 6C 69 62 
              73 00 -  -  	.db "tiny.cc/clibs", 0
  361 D1:EF9F -  -  -  -  RelocationStart:
  362 D1:EF9F C0 47 52 41 
              50 48 58 00 
              04 -  -  -  	.db 0C0h, "GRAPHX", 0, 4
  363 D1:EFA8 -  -  -  -  CData2:
Listing for file "ice.asm"
  452 D1:EFA8 -  -  -  -  
  453 D1:EFA8 -  -  -  -  stop:
  454 D1:EFA8 -  -  -  -  
  455 D1:EFA8 -  -  -  -  .echo stop-start+14
