    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\ti84pce.inc"
Listing for file "ICE.asm"
    2 00:0000 -  -  -  -  #include "defines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\defines.asm"
    1 00:0000 -  -  -  -  tempToken				.equ saveSScreen+00
    2 00:0000 -  -  -  -  tempToken2				.equ saveSScreen+01
    3 00:0000 -  -  -  -  InputStartData			.equ saveSScreen+02
    4 00:0000 -  -  -  -  RandStartData			.equ saveSScreen+05
    5 00:0000 -  -  -  -  PauseStartData			.equ saveSScreen+08
    6 00:0000 -  -  -  -  MeanStartData			.equ saveSScreen+11
    7 00:0000 -  -  -  -  KeypadStartData			.equ saveSScreen+14
    8 00:0000 -  -  -  -  PrevProgramPtr			.equ saveSScreen+17
    9 00:0000 -  -  -  -  
   10 00:0000 -  -  -  -  stack					.equ saveSScreen+00100
   11 00:0000 -  -  -  -  output					.equ saveSScreen+01100
   12 00:0000 -  -  -  -  programNamesStack		.equ saveSScreen+03000
   13 00:0000 -  -  -  -  labelStack				.equ saveSScreen+03000
   14 00:0000 -  -  -  -  gotoStack				.equ saveSScreen+04000
   15 00:0000 -  -  -  -  programDataOffsetStack	.equ saveSScreen+05000
   16 00:0000 -  -  -  -  tempStringsStack		.equ saveSScreen+06500
   17 00:0000 -  -  -  -  tempListsStack			.equ saveSScreen+08000
   18 00:0000 -  -  -  -  programDataData			.equ saveSScreen+11000
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  tempArg1				.equ pixelShadow2+0000
   21 00:0000 -  -  -  -  tempArg2				.equ pixelShadow2+1000
   22 00:0000 -  -  -  -  tempArg3				.equ pixelShadow2+2000
   23 00:0000 -  -  -  -  tempArg4				.equ pixelShadow2+3000
   24 00:0000 -  -  -  -  tempArg5				.equ pixelShadow2+4000
   25 00:0000 -  -  -  -  tempArg6				.equ pixelShadow2+5000
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  startTab				.equ saveSScreen
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  program					.equ vRAM+(320*240)
   30 00:0000 -  -  -  -  
   31 00:0000 -  -  -  -  fProgram1				.equ -30h
   32 00:0000 -  -  -  -  comp_with_libs			.equ 0										; used if compile with C libs
   33 00:0000 -  -  -  -  good_compilation		.equ 1										; used if compilation is succesfull
   34 00:0000 -  -  -  -  has_already_input		.equ 2										; only once time "Input" routine
   35 00:0000 -  -  -  -  has_already_rand		.equ 3										; only once time "rand" routine
   36 00:0000 -  -  -  -  has_already_pause		.equ 4										; only once time "Pause" routine
   37 00:0000 -  -  -  -  has_already_mean		.equ 5										; only once time "mean()" routine
   38 00:0000 -  -  -  -  has_already_keypad		.equ 6										; only once time scanning the keypad
   39 00:0000 -  -  -  -  used_code				.equ 7										; DefineSprite( must be in front of all the code
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  fExpression1			.equ -40h
   42 00:0000 -  -  -  -  prev_is_number			.equ 0										; used if a number consists of more digits
   43 00:0000 -  -  -  -  chain_operators			.equ 1										; used if the calculation is needed for another calculation
   44 00:0000 -  -  -  -  last_token_is_ret		.equ 2										; used if last token is "Return"
   45 00:0000 -  -  -  -  op_is_last_one			.equ 3										; used if the operator is the last of that line
   46 00:0000 -  -  -  -  output_is_number		.equ 4										; used if the calculation is only a single number, loop-statements can be 
   47 00:0000 -  -  -  -  ans_set_z_flag			.equ 5										; used if the previous calculation sets the zero flag, useful for loop/conditions
   48 00:0000 -  -  -  -  need_push				.equ 6										; used if Ans may not be overwritten
   49 00:0000 -  -  -  -  output_is_string		.equ 7										; used for strings
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  fExpression2			.equ -41h
   52 00:0000 -  -  -  -  use_mean_routine		.equ 0										; used if the function is mean()
   53 00:0000 -  -  -  -  last_token_was_not		.equ 1										; used if the last token is "not(", which can be optimized at If/Repeat/While
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  fExpression3			.equ -42h
   56 00:0000 -  -  -  -  triggered_a_comma		.equ 0										; used if a comma is entered outside parens, used by functions
   57 00:0000 -  -  -  -  
   58 00:0000 -  -  -  -  fFunction1				.equ -50h
   59 00:0000 -  -  -  -  arg1_is_small			.equ 4										; used in C functions
   60 00:0000 -  -  -  -  function_implemented	.equ 4										; used if C function is implemented
   61 00:0000 -  -  -  -  arg2_is_small			.equ 3										; used in C functions
   62 00:0000 -  -  -  -  arg3_is_small			.equ 2										; used in C functions
   63 00:0000 -  -  -  -  arg4_is_small			.equ 1										; used in C functions
   64 00:0000 -  -  -  -  arg5_is_small			.equ 0										; used in C functions
   65 00:0000 -  -  -  -  
   66 00:0000 -  -  -  -  fFunction2				.equ -51h
   67 00:0000 -  -  -  -  negative_for_step		.equ 0										; used for the step in a For loop
   68 00:0000 -  -  -  -  for_step_is_number		.equ 1										; used for the step in a For loop
   69 00:0000 -  -  -  -  end_point_is_number		.equ 2										; used for the end point in a For loop
   70 00:0000 -  -  -  -  
   71 00:0000 -  -  -  -  fAlways1				.equ -50h
   72 00:0000 -  -  -  -  displayed_det			.equ 0										; used if the text of a det( function is displayed in the statusbar
   73 00:0000 -  -  -  -  modified_iy				.equ 1										; used if iy is modified by a C routine
   74 00:0000 -  -  -  -  
   75 00:0000 -  -  -  -  typeNumber				.equ 0
   76 00:0000 -  -  -  -  typeVariable			.equ 1
   77 00:0000 -  -  -  -  typeChainPush			.equ 2
   78 00:0000 -  -  -  -  typeChainAns			.equ 3
   79 00:0000 -  -  -  -  typeReturnValue			.equ 4										; getKey, rand
   80 00:0000 -  -  -  -  typeList				.equ 5
   81 00:0000 -  -  -  -  typeOSList				.equ 6
   82 00:0000 -  -  -  -  typeString				.equ 7
   83 00:0000 -  -  -  -  typeFunction			.equ 00111111b
   84 00:0000 -  -  -  -  typeOperator			.equ 00011111b
   85 00:0000 -  -  -  -  
   86 00:0000 -  -  -  -  ChainPush				.equ 0
   87 00:0000 -  -  -  -  ChainAns				.equ 1
   88 00:0000 -  -  -  -  ChainListPush			.equ 2
   89 00:0000 -  -  -  -  ChainListAns			.equ 3
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  OutputInBC				.equ 0
   92 00:0000 -  -  -  -  OutputInDE				.equ 1
   93 00:0000 -  -  -  -  OutputInHL				.equ 2
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  OutputIsInDE			.equ 0
   96 00:0000 -  -  -  -  OutputIsInHL			.equ 1
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  ;---------------------------;
   99 00:0000 -  -  -  -  ;----- User Variables ------;
  100 00:0000 -  -  -  -  ;---------------------------;
  101 00:0000 -  -  -  -  Str0					.equ saveSScreen+15500
  102 00:0000 -  -  -  -  Str1					.equ saveSScreen+16000
  103 00:0000 -  -  -  -  Str2					.equ saveSScreen+16500
  104 00:0000 -  -  -  -  Str3					.equ saveSScreen+17000
  105 00:0000 -  -  -  -  Str4					.equ saveSScreen+17500
  106 00:0000 -  -  -  -  Str5					.equ saveSScreen+18000
  107 00:0000 -  -  -  -  Str6					.equ saveSScreen+18500
  108 00:0000 -  -  -  -  Str7					.equ saveSScreen+19000
  109 00:0000 -  -  -  -  Str8					.equ saveSScreen+19500
  110 00:0000 -  -  -  -  Str9					.equ saveSScreen+20000
  111 00:0000 -  -  -  -  
  112 00:0000 -  -  -  -  L1						.equ saveSScreen
  113 00:0000 -  -  -  -  L2						.equ cmdPixelShadow
  114 00:0000 -  -  -  -  L3						.equ pixelShadow2
  115 00:0000 -  -  -  -  L4						.equ plotSScreen
  116 00:0000 -  -  -  -  L5						.equ pixelShadow
  117 00:0000 -  -  -  -  L6						.equ L1+10000
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  ; IX offsets
  120 00:0000 -  -  -  -  vA						.equ 0
  121 00:0000 -  -  -  -  vB						.equ 3
  122 00:0000 -  -  -  -  vC						.equ 6
  123 00:0000 -  -  -  -  vD						.equ 9
  124 00:0000 -  -  -  -  vE						.equ 12
  125 00:0000 -  -  -  -  vF						.equ 15
  126 00:0000 -  -  -  -  vG						.equ 18
  127 00:0000 -  -  -  -  vH						.equ 21
  128 00:0000 -  -  -  -  vI						.equ 24
  129 00:0000 -  -  -  -  vJ						.equ 27
  130 00:0000 -  -  -  -  vK						.equ 30
  131 00:0000 -  -  -  -  vL						.equ 33
  132 00:0000 -  -  -  -  vM						.equ 36
  133 00:0000 -  -  -  -  vN						.equ 39
  134 00:0000 -  -  -  -  vO						.equ 42
  135 00:0000 -  -  -  -  vP						.equ 45
  136 00:0000 -  -  -  -  vQ						.equ 48
  137 00:0000 -  -  -  -  vR						.equ 51
  138 00:0000 -  -  -  -  vS						.equ 54
  139 00:0000 -  -  -  -  vT						.equ 57
  140 00:0000 -  -  -  -  vU						.equ 60
  141 00:0000 -  -  -  -  vV						.equ 63
  142 00:0000 -  -  -  -  vW						.equ 66
  143 00:0000 -  -  -  -  vX						.equ 69
  144 00:0000 -  -  -  -  vY						.equ 72
  145 00:0000 -  -  -  -  vZ						.equ 75
  146 00:0000 -  -  -  -  vtheta					.equ 78
  147 00:0000 -  -  -  -  
  148 00:0000 -  -  -  -  rand1					.equ 81
  149 00:0000 -  -  -  -  rand2					.equ 84
Listing for file "ICE.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 EF 7B -  -  .db tExtTok, tAsm84CeCmp
    5 00:0002 -  -  -  -  .org UserMem
    6 D1:A881 -  -  -  -  
    7 D1:A881 -  -  -  -  start:
    8 D1:A881 ED 73 1E B0 
              D1 -  -  -  	ld (backupSP), sp
    9 D1:A886 2A 17 23 D0 	ld hl, (begPC)
   10 D1:A88A 22 22 B0 D1 	ld (backupBegPC), hl
   11 D1:A88E 2A 1A 23 D0 	ld hl, (curPC)
   12 D1:A892 22 2A B0 D1 	ld (backupCurPC), hl
   13 D1:A896 2A 1D 23 D0 	ld hl, (endPC)
   14 D1:A89A 22 32 B0 D1 	ld (backupEndPC), hl
   15 D1:A89E CD 48 08 02 	call _RunIndicOff
   16 D1:A8A2 CD CB BC D1 	call InstallHooks
   17 D1:A8A6 -  -  -  -  GUI:
   18 D1:A8A6 3E 27 -  -  	ld a, lcdBpp8
   19 D1:A8A8 32 18 00 E3 	ld (mpLcdCtrl), a
   20 D1:A8AC 21 00 02 E3 	ld hl, mpLcdPalette
   21 D1:A8B0 06 00 -  -  	ld b, 0
   22 D1:A8B2 50 -  -  -  _:	ld d, b
   23 D1:A8B3 78 -  -  -  	ld a, b
   24 D1:A8B4 E6 C0 -  -  	and 011000000b
   25 D1:A8B6 CB 3A -  -  	srl d
   26 D1:A8B8 1F -  -  -  	rra
   27 D1:A8B9 5F -  -  -  	ld e, a
   28 D1:A8BA 3E 1F -  -  	ld a, 000011111b
   29 D1:A8BC A0 -  -  -  	and b
   30 D1:A8BD B3 -  -  -  	or e
   31 D1:A8BE 77 -  -  -  	ld (hl), a
   32 D1:A8BF 23 -  -  -  	inc hl
   33 D1:A8C0 72 -  -  -  	ld (hl), d
   34 D1:A8C1 23 -  -  -  	inc hl
   35 D1:A8C2 04 -  -  -  	inc b
   36 D1:A8C3 20 ED -  -  	jr nz, -_
   37 D1:A8C5 21 00 00 D4 	ld hl, vRAM
   38 D1:A8C9 36 BD -  -  	ld (hl), 189
   39 D1:A8CB E5 -  -  -  	push hl
   40 D1:A8CC D1 -  -  -  	pop de
   41 D1:A8CD 13 -  -  -  	inc de
   42 D1:A8CE 01 80 0C 00 	ld bc, 320*10
   43 D1:A8D2 ED B0 -  -  	ldir
   44 D1:A8D4 36 00 -  -  	ld (hl), 0
   45 D1:A8D6 01 40 01 00 	ld bc, 320
   46 D1:A8DA ED B0 -  -  	ldir
   47 D1:A8DC 36 FF -  -  	ld (hl), 255
   48 D1:A8DE 01 3F 1E 01 	ld bc, 320*229-1
   49 D1:A8E2 ED B0 -  -  	ldir
   50 D1:A8E4 FD CB D0 CE 	set good_compilation, (iy+fProgram1)
   51 D1:A8E8 FD CB B0 8E 	res modified_iy, (iy+fAlways1)
   52 D1:A8EC 21 54 EC D1 	ld hl, ICEName
   53 D1:A8F0 3E 01 -  -  	ld a, 1
   54 D1:A8F2 32 67 B8 D1 	ld (TextYPos_ASM), a
   55 D1:A8F6 C6 14 -  -  	add a, 20
   56 D1:A8F8 32 36 B8 D1 	ld (TextXPos_ASM), a
   57 D1:A8FC CD 0A B1 D1 	call PrintString
   58 D1:A900 21 67 B8 D1 	ld hl, TextYPos_ASM
   59 D1:A904 34 -  -  -  	inc (hl)
   60 D1:A905 34 -  -  -  	inc (hl)
   61 D1:A906 2A 9D 25 D0 	ld hl, (progPtr)
   62 D1:A90A -  -  -  -  FindPrograms:
   63 D1:A90A CD 65 BC D1 	call FindNextGoodVar
   64 D1:A90E 20 34 -  -  	jr nz, StopFindingPrograms
   65 D1:A910 E5 -  -  -  	push hl
   66 D1:A911 3A 67 B8 D1 		ld a, (TextYPos_ASM)
   67 D1:A915 C6 0A -  -  		add a, 10
   68 D1:A917 38 28 -  -  		jr c, +_
   69 D1:A919 32 67 B8 D1 		ld (TextYPos_ASM), a
   70 D1:A91D 21 0A 00 00 		ld hl, 10
   71 D1:A921 22 36 B8 D1 		ld (TextXPos_ASM), hl
   72 D1:A925 21 B2 E9 D1 		ld hl, AmountOfPrograms
   73 D1:A929 34 -  -  -  		inc (hl)
   74 D1:A92A CD 98 1F 02 		call _ChkInRAM
   75 D1:A92E 3E 23 -  -  		ld a, '#'
   76 D1:A930 DC 34 B8 D1 		call c, _PrintChar_ASM
   77 D1:A934 2A 9D E9 D1 		ld hl, (ProgramNamesPtr)
   78 D1:A938 11 F8 FF FF 		ld de, -8
   79 D1:A93C 19 -  -  -  		add hl, de
   80 D1:A93D CD 0A B1 D1 		call PrintString
   81 D1:A941 E1 -  -  -  _:	pop hl
   82 D1:A942 18 C6 -  -  	jr FindPrograms
   83 D1:A944 -  -  -  -  StopFindingPrograms:
   84 D1:A944 3E 0D -  -  	ld a, 13
   85 D1:A946 32 67 B8 D1 	ld (TextYPos_ASM), a
   86 D1:A94A 21 01 00 00 	ld hl, 1
   87 D1:A94E 22 36 B8 D1 	ld (TextXPos_ASM), hl
   88 D1:A952 3A B2 E9 D1 	ld a, (AmountOfPrograms)
   89 D1:A956 B7 -  -  -  	or a
   90 D1:A957 CA 42 AF D1 	jp z, NoProgramsError
   91 D1:A95B 32 C4 A9 D1 	ld (AmountPrograms), a
   92 D1:A95F 2E 01 -  -  	ld l, 1
   93 D1:A961 -  -  -  -  PrintCursor:
   94 D1:A961 5D -  -  -  	ld e, l
   95 D1:A962 16 0A -  -  	ld d, 10
   96 D1:A964 ED 5C -  -  	mlt de
   97 D1:A966 1C -  -  -  	inc e
   98 D1:A967 1C -  -  -  	inc e
   99 D1:A968 1C -  -  -  	inc e
  100 D1:A969 7B -  -  -  	ld a, e
  101 D1:A96A 32 67 B8 D1 	ld (TextYPos_ASM), a
  102 D1:A96E AF -  -  -  	xor a
  103 D1:A96F 32 8C B8 D1 	ld (color), a
  104 D1:A973 3C -  -  -  	inc a
  105 D1:A974 32 36 B8 D1 	ld (TextXPos_ASM), a
  106 D1:A978 3E 3E -  -  	ld a, '>'
  107 D1:A97A CD 34 B8 D1 	call _PrintChar_ASM
  108 D1:A97E 3E FF -  -  	ld a, 255
  109 D1:A980 32 8C B8 D1 	ld (color), a
  110 D1:A984 3E 01 -  -  	ld a, 1
  111 D1:A986 32 36 B8 D1 	ld (TextXPos_ASM), a
  112 D1:A98A E5 -  -  -  _:	push hl
  113 D1:A98B CD 4C 01 02 		call _GetCSC
  114 D1:A98F E1 -  -  -  	pop hl
  115 D1:A990 B7 -  -  -  	or a
  116 D1:A991 28 F7 -  -  	jr z, -_
  117 D1:A993 FE 04 -  -  	cp skUp
  118 D1:A995 28 1E -  -  	jr z, PressedUp
  119 D1:A997 FE 01 -  -  	cp skDown
  120 D1:A999 28 27 -  -  	jr z, PressedDown
  121 D1:A99B FE 0F -  -  	cp skClear
  122 D1:A99D CA 0D B0 D1 	jp z, StopProgram
  123 D1:A9A1 FE 09 -  -  	cp skEnter
  124 D1:A9A3 20 E5 -  -  	jr nz, -_
  125 D1:A9A5 -  -  -  -  PressedEnter:
  126 D1:A9A5 2D -  -  -  	dec l
  127 D1:A9A6 26 08 -  -  	ld h, 8
  128 D1:A9A8 ED 6C -  -  	mlt hl
  129 D1:A9AA 11 D6 F5 D0 	ld de, ProgramNamesStack-1
  130 D1:A9AE 19 -  -  -  	add hl, de
  131 D1:A9AF CD 20 03 02 	call _Mov9ToOP1
  132 D1:A9B3 18 1B -  -  	jr StartParsing
  133 D1:A9B5 -  -  -  -  PressedUp:
  134 D1:A9B5 7D -  -  -  	ld a, l
  135 D1:A9B6 3D -  -  -  	dec a
  136 D1:A9B7 28 D1 -  -  	jr z, -_
  137 D1:A9B9 2D -  -  -  	dec l
  138 D1:A9BA 3E 17 -  -  	ld a, 23
  139 D1:A9BC CD 34 B8 D1 	call _PrintChar_ASM
  140 D1:A9C0 18 9F -  -  	jr PrintCursor
  141 D1:A9C2 -  -  -  -  PressedDown:
  142 D1:A9C2 7D -  -  -  	ld a, l
  143 D1:A9C3 -  -  -  -  AmountPrograms = $+1
  144 D1:A9C3 FE 00 -  -  	cp a, 0
  145 D1:A9C5 28 C3 -  -  	jr z, -_
  146 D1:A9C7 2C -  -  -  	inc l
  147 D1:A9C8 3E 17 -  -  	ld a, 23
  148 D1:A9CA CD 34 B8 D1 	call _PrintChar_ASM
  149 D1:A9CE 18 91 -  -  	jr PrintCursor
  150 D1:A9D0 -  -  -  -  StartParsing:
  151 D1:A9D0 3E 05 -  -  	ld a, ProgObj
  152 D1:A9D2 32 F8 05 D0 	ld (OP1), a
  153 D1:A9D6 CD 0C 05 02 _:	call _ChkFindSym
  154 D1:A9DA 30 07 -  -  	jr nc, +_
  155 D1:A9DC 21 F8 05 D0 	ld hl, OP1
  156 D1:A9E0 34 -  -  -  	inc (hl)
  157 D1:A9E1 18 F3 -  -  	jr -_
  158 D1:A9E3 CD 98 1F 02 _:	call _ChkInRAM
  159 D1:A9E7 30 0A -  -  	jr nc, +_
  160 D1:A9E9 EB -  -  -  	ex de, hl
  161 D1:A9EA 11 09 00 00 	ld de, 9
  162 D1:A9EE 19 -  -  -  	add hl, de
  163 D1:A9EF 5E -  -  -  	ld e, (hl)
  164 D1:A9F0 19 -  -  -  	add hl, de
  165 D1:A9F1 23 -  -  -  	inc hl
  166 D1:A9F2 EB -  -  -  	ex de, hl
  167 D1:A9F3 01 00 00 00 _:	ld bc, 0
  168 D1:A9F7 EB -  -  -  	ex de, hl
  169 D1:A9F8 4E -  -  -  	ld c, (hl)																; BC = program length
  170 D1:A9F9 23 -  -  -  	inc hl
  171 D1:A9FA 46 -  -  -  	ld b, (hl)
  172 D1:A9FB 23 -  -  -  	inc hl
  173 D1:A9FC 22 1A 23 D0 	ld (curPC), hl
  174 D1:AA00 22 17 23 D0 	ld (begPC), hl
  175 D1:AA04 09 -  -  -  	add hl, bc
  176 D1:AA05 2B -  -  -  	dec hl
  177 D1:AA06 22 1D 23 D0 	ld (endPC), hl
  178 D1:AA0A CD F5 B0 D1 	call PrintCompilingProgram
  179 D1:AA0E FD 36 D0 01 	ld (iy+fProgram1), 1
  180 D1:AA12 21 36 EE D1 	ld hl, CData
  181 D1:AA16 ED 5B 9A E9 
              D1 -  -  -  	ld de, (programPtr)
  182 D1:AA1B 01 79 00 00 	ld bc, CData2 - CData
  183 D1:AA1F ED B0 -  -  	ldir
  184 D1:AA21 ED 53 9A E9 
              D1 -  -  -  	ld (programPtr), de
  185 D1:AA26 CD 14 B1 D1 	call PreScanPrograms
  186 D1:AA2A 3E CD -  -  	ld a, 0CDh
  187 D1:AA2C 21 48 08 02 	ld hl, _RunIndicOff
  188 D1:AA30 CD 48 AC D1 	call InsertAHL															; call _RunIndicOff
  189 D1:AA34 2A 9A E9 D1 	ld hl, (programPtr)
  190 D1:AA38 11 8E 7C FC 	ld de, 4+4+5+UserMem-program
  191 D1:AA3C 19 -  -  -  	add hl, de
  192 D1:AA3D CD 48 AC D1 	call InsertAHL															; call *
  193 D1:AA41 01 FD 21 80 	ld bc, 08021FDh
  194 D1:AA45 11 00 D0 C3 	ld de, 0C3D000h
  195 D1:AA49 21 3C 1A 02 	ld hl, _DrawStatusBar
  196 D1:AA4D CD 7D AC D1 	call InsertBCDEHL														; ld iy, flags \ jp _DrawStatusBar
  197 D1:AA51 2A 9A E9 D1 	ld hl, (programPtr)
  198 D1:AA55 22 30 EA D0 	ld (PrevProgramPtr), hl
  199 D1:AA59 3A B6 E9 D1 	ld a, (amountOfCRoutines)
  200 D1:AA5D B7 -  -  -  	or a
  201 D1:AA5E 20 0C -  -  	jr nz, CompileProgramFull
  202 D1:AA60 FD CB D0 86 	res comp_with_libs, (iy+fProgram1)
  203 D1:AA64 21 05 2C D5 	ld hl, program+5
  204 D1:AA68 22 9A E9 D1 	ld (programPtr), hl
  205 D1:AA6C -  -  -  -  CompileProgramFull:
  206 D1:AA6C 3A BC E9 D1 	ld a, (AmountOfSubPrograms)
  207 D1:AA70 B7 -  -  -  	or a
  208 D1:AA71 20 22 -  -  	jr nz, SkipGetProgramName
  209 D1:AA73 21 BD E9 D1 	ld hl, varname
  210 D1:AA77 CD 19 B2 D1 	call GetProgramName
  211 D1:AA7B 21 F9 05 D0 	ld hl, OP1+1
  212 D1:AA7F 11 BE E9 D1 	ld de, varname+1
  213 D1:AA83 06 08 -  -  	ld b, 8
  214 D1:AA85 -  -  -  -  CheckNames:
  215 D1:AA85 1A -  -  -  	ld a, (de)
  216 D1:AA86 B7 -  -  -  	or a
  217 D1:AA87 28 07 -  -  	jr z, CheckNamesSameLength
  218 D1:AA89 BE -  -  -  	cp (hl)
  219 D1:AA8A 20 09 -  -  	jr nz, GoodProgramName
  220 D1:AA8C 23 -  -  -  	inc hl
  221 D1:AA8D 13 -  -  -  	inc de
  222 D1:AA8E 10 F5 -  -  	djnz CheckNames
  223 D1:AA90 -  -  -  -  CheckNamesSameLength:
  224 D1:AA90 BE -  -  -  	cp (hl)
  225 D1:AA91 CA 64 AF D1 	jp z, SameNameError
  226 D1:AA95 -  -  -  -  GoodProgramName:
  227 D1:AA95 -  -  -  -  SkipGetProgramName:
  228 D1:AA95 -  -  -  -  
  229 D1:AA95 -  -  -  -  ParseProgramUntilEnd:
  230 D1:AA95 -  -  -  -  CompileLoop:
  231 D1:AA95 AF -  -  -  	xor a
  232 D1:AA96 FD 77 C0 -  	ld (iy+fExpression1), a
  233 D1:AA99 FD 77 BF -  	ld (iy+fExpression2), a
  234 D1:AA9C FD 77 BE -  	ld (iy+fExpression3), a
  235 D1:AA9F FD 77 B0 -  	ld (iy+fFunction1), a
  236 D1:AAA2 FD 77 AF -  	ld (iy+fFunction2), a
  237 D1:AAA5 32 B3 E9 D1 	ld (openedParensE), a
  238 D1:AAA9 32 B4 E9 D1 	ld (openedParensF), a
  239 D1:AAAD CD 28 10 02 	call _IncFetch
  240 D1:AAB1 32 1F EA D0 	ld (tempToken), a
  241 D1:AAB5 38 58 -  -  	jr c, FindGotos
  242 D1:AAB7 FE D4 -  -  	cp tEnd
  243 D1:AAB9 20 10 -  -  	jr nz, ++_
  244 D1:AABB 21 B7 E9 D1 _:	ld hl, amountOfEnds
  245 D1:AABF 7E -  -  -  	ld a, (hl)
  246 D1:AAC0 35 -  -  -  	dec (hl)
  247 D1:AAC1 B7 -  -  -  	or a
  248 D1:AAC2 CA 82 AF D1 	jp z, EndError
  249 D1:AAC6 3A 1F EA D0 	ld a, (tempToken)
  250 D1:AACA C9 -  -  -  	ret
  251 D1:AACB FE D0 -  -  _:	cp tElse
  252 D1:AACD 28 EC -  -  	jr z, --_
  253 D1:AACF CD 62 B2 D1 	call ParseLine
  254 D1:AAD3 2A 1A 23 D0 	ld hl, (curPC)
  255 D1:AAD7 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  256 D1:AADC B7 -  -  -  	or a
  257 D1:AADD ED 52 -  -  	sbc hl, de
  258 D1:AADF 01 40 01 00 	ld bc, 320
  259 D1:AAE3 CD 54 01 00 	call __imulu
  260 D1:AAE7 E5 -  -  -  	push hl
  261 D1:AAE8 2A 1D 23 D0 		ld hl, (endPC)
  262 D1:AAEC B7 -  -  -  		or a
  263 D1:AAED ED 52 -  -  		sbc hl, de
  264 D1:AAEF 23 -  -  -  		inc hl
  265 D1:AAF0 E5 -  -  -  		push hl
  266 D1:AAF1 C1 -  -  -  		pop bc
  267 D1:AAF2 E1 -  -  -  	pop hl
  268 D1:AAF3 CD 40 01 00 	call __idivu
  269 D1:AAF7 E5 -  -  -  	push hl
  270 D1:AAF8 C1 -  -  -  	pop bc
  271 D1:AAF9 78 -  -  -  	ld a, b
  272 D1:AAFA B1 -  -  -  	or c
  273 D1:AAFB 28 10 -  -  	jr z, +_
  274 D1:AAFD 21 40 1F D4 	ld hl, vRAM+(320*25)
  275 D1:AB01 36 00 -  -  	ld (hl), 0
  276 D1:AB03 E5 -  -  -  	push hl
  277 D1:AB04 D1 -  -  -  	pop de
  278 D1:AB05 13 -  -  -  	inc de
  279 D1:AB06 0B -  -  -  	dec bc
  280 D1:AB07 78 -  -  -  	ld a, b
  281 D1:AB08 B1 -  -  -  	or c
  282 D1:AB09 28 8A -  -  	jr z, CompileLoop
  283 D1:AB0B ED B0 -  -  	ldir
  284 D1:AB0D 18 86 -  -  _:	jr CompileLoop
  285 D1:AB0F -  -  -  -  FindGotos:
  286 D1:AB0F 21 B7 E9 D1 	ld hl, amountOfEnds
  287 D1:AB13 7E -  -  -  	ld a, (hl)
  288 D1:AB14 B7 -  -  -  	or a
  289 D1:AB15 28 02 -  -  	jr z, +_
  290 D1:AB17 35 -  -  -  	dec (hl)
  291 D1:AB18 C9 -  -  -  	ret
  292 D1:AB19 21 BC E9 D1 _:	ld hl, AmountOfSubPrograms
  293 D1:AB1D 7E -  -  -  	ld a, (hl)
  294 D1:AB1E 35 -  -  -  	dec (hl)
  295 D1:AB1F B7 -  -  -  	or a
  296 D1:AB20 C0 -  -  -  	ret nz
  297 D1:AB21 -  -  -  -  FindGotosLoop:
  298 D1:AB21 2A A3 E9 D1 	ld hl, (gotoPtr)
  299 D1:AB25 11 BF F9 D0 	ld de, gotoStack
  300 D1:AB29 B7 -  -  -  	or a
  301 D1:AB2A ED 52 -  -  	sbc hl, de
  302 D1:AB2C 28 4F -  -  	jr z, AddDataToProgramData												; have we finished all the Goto's?
  303 D1:AB2E 19 -  -  -  	add hl, de
  304 D1:AB2F 2B -  -  -  	dec hl
  305 D1:AB30 2B -  -  -  	dec hl
  306 D1:AB31 2B -  -  -  	dec hl
  307 D1:AB32 E5 -  -  -  	push hl
  308 D1:AB33 ED 27 -  -  		ld hl, (hl)
  309 D1:AB35 EB -  -  -  		ex de, hl															; de = pointer to goto data
  310 D1:AB36 2A A0 E9 D1 		ld hl, (labelPtr)
  311 D1:AB3A -  -  -  -  FindLabels:
  312 D1:AB3A 01 D7 F5 D0 		ld bc, labelStack
  313 D1:AB3E B7 -  -  -  		or a
  314 D1:AB3F ED 42 -  -  		sbc hl, bc
  315 D1:AB41 CA 8E AF D1 		jp z, LabelError													; have we finished all the Lbl's?
  316 D1:AB45 09 -  -  -  		add hl, bc
  317 D1:AB46 2B -  -  -  		dec hl
  318 D1:AB47 2B -  -  -  		dec hl
  319 D1:AB48 2B -  -  -  		dec hl																; hl = pointer to label
  320 D1:AB49 -  -  -  -  FindLabel:
  321 D1:AB49 E5 -  -  -  		push hl
  322 D1:AB4A D5 -  -  -  			push de
  323 D1:AB4B ED 27 -  -  				ld hl, (hl)													; hl = pointer to label data
  324 D1:AB4D CD C1 AE D1 				call CompareStrings											; is it the right label?
  325 D1:AB51 D1 -  -  -  			pop de
  326 D1:AB52 E1 -  -  -  		pop hl
  327 D1:AB53 20 22 -  -  		jr nz, LabelNotRightOne
  328 D1:AB55 -  -  -  -  RightLabel:
  329 D1:AB55 2B -  -  -  		dec hl
  330 D1:AB56 2B -  -  -  		dec hl
  331 D1:AB57 2B -  -  -  		dec hl
  332 D1:AB58 ED 27 -  -  		ld hl, (hl)
  333 D1:AB5A 11 81 7C FC 		ld de, UserMem-program
  334 D1:AB5E 19 -  -  -  		add hl, de
  335 D1:AB5F EB -  -  -  		ex de, hl															; de points to label memory
  336 D1:AB60 E1 -  -  -  	pop hl																	; hl = pointer to goto
  337 D1:AB61 2B -  -  -  	dec hl
  338 D1:AB62 2B -  -  -  	dec hl
  339 D1:AB63 2B -  -  -  	dec hl
  340 D1:AB64 ED 27 -  -  	ld hl, (hl)																; hl = pointer to jump to
  341 D1:AB66 ED 1F -  -  	ld (hl), de
  342 D1:AB68 2A A3 E9 D1 	ld hl, (gotoPtr)
  343 D1:AB6C 11 FA FF FF 	ld de, -6
  344 D1:AB70 19 -  -  -  	add hl, de																; get next Goto
  345 D1:AB71 22 A3 E9 D1 	ld (gotoPtr), hl
  346 D1:AB75 18 AA -  -  	jr FindGotosLoop
  347 D1:AB77 -  -  -  -  LabelNotRightOne:
  348 D1:AB77 2B -  -  -  		dec hl
  349 D1:AB78 2B -  -  -  		dec hl
  350 D1:AB79 2B -  -  -  		dec hl
  351 D1:AB7A 18 BE -  -  		jr FindLabels
  352 D1:AB7C -  -  -  -  StopFindLabels:
  353 D1:AB7C E1 -  -  -  	pop hl
  354 D1:AB7D -  -  -  -  AddDataToProgramData:
  355 D1:AB7D FD CB C0 56 	bit last_token_is_ret, (iy+fExpression1)
  356 D1:AB81 20 06 -  -  	jr nz, +_
  357 D1:AB83 3E C9 -  -  	ld a, 0C9h
  358 D1:AB85 CD 0A AD D1 	call InsertA															; ret
  359 D1:AB89 2A AF E9 D1 _:	ld hl, (programDataDataPtr)
  360 D1:AB8D 01 17 15 D1 	ld bc, programDataData
  361 D1:AB91 B7 -  -  -  	or a
  362 D1:AB92 ED 42 -  -  	sbc hl, bc
  363 D1:AB94 E5 -  -  -  	push hl
  364 D1:AB95 C1 -  -  -  	pop bc																	; bc = data length
  365 D1:AB96 28 3D -  -  	jr z, CreateProgram														; check IF there is data
  366 D1:AB98 ED 5B 9A E9 
              D1 -  -  -  	ld de, (programPtr)
  367 D1:AB9D 21 17 15 D1 	ld hl, programDataData
  368 D1:ABA1 B7 -  -  -  	or a
  369 D1:ABA2 ED 52 -  -  	sbc hl, de
  370 D1:ABA4 E5 -  -  -  	push hl
  371 D1:ABA5 19 -  -  -  		add hl, de
  372 D1:ABA6 ED B0 -  -  		ldir																; move the data to the end of the program
  373 D1:ABA8 ED 53 9A E9 
              D1 -  -  -  		ld (programPtr), de
  374 D1:ABAD D1 -  -  -  	pop de
  375 D1:ABAE 2A A6 E9 D1 	ld hl, (programDataOffsetPtr)
  376 D1:ABB2 -  -  -  -  AddDataLoop:																; update all the pointers pointing to data
  377 D1:ABB2 01 A7 FD D0 	ld bc, programDataOffsetStack
  378 D1:ABB6 B7 -  -  -  	or a
  379 D1:ABB7 ED 42 -  -  	sbc hl, bc
  380 D1:ABB9 28 1A -  -  	jr z, CreateProgram														; no more pointers left
  381 D1:ABBB 09 -  -  -  	add hl, bc
  382 D1:ABBC 2B -  -  -  	dec hl
  383 D1:ABBD 2B -  -  -  	dec hl
  384 D1:ABBE 2B -  -  -  	dec hl
  385 D1:ABBF E5 -  -  -  	push hl
  386 D1:ABC0 ED 27 -  -  		ld hl, (hl)															; complicated stuff XD
  387 D1:ABC2 E5 -  -  -  		push hl
  388 D1:ABC3 ED 27 -  -  			ld hl, (hl)
  389 D1:ABC5 B7 -  -  -  			or a
  390 D1:ABC6 ED 52 -  -  			sbc hl, de
  391 D1:ABC8 01 81 7C FC 			ld bc, UserMem-program
  392 D1:ABCC 09 -  -  -  			add hl, bc
  393 D1:ABCD E5 -  -  -  			push hl
  394 D1:ABCE C1 -  -  -  			pop bc
  395 D1:ABCF E1 -  -  -  		pop hl
  396 D1:ABD0 ED 0F -  -  		ld (hl), bc															; ld (XXXXXX), hl
  397 D1:ABD2 E1 -  -  -  	pop hl
  398 D1:ABD3 18 DD -  -  	jr AddDataLoop
  399 D1:ABD5 -  -  -  -  CreateProgram:
  400 D1:ABD5 21 BD E9 D1 	ld hl, varname
  401 D1:ABD9 CD 20 03 02 	call _Mov9ToOP1
  402 D1:ABDD CD 0C 05 02 	call _ChkFindSym
  403 D1:ABE1 38 13 -  -  	jr c, ++_
  404 D1:ABE3 CD 98 1F 02 	call _ChkInRAM
  405 D1:ABE7 30 09 -  -  	jr nc, +_
  406 D1:ABE9 CD 48 14 02 	call _Arc_Unarc
  407 D1:ABED 01 05 00 00 	ld bc, 5
  408 D1:ABF1 09 -  -  -  	add hl, bc
  409 D1:ABF2 CD 88 05 02 _:	call _DelVar
  410 D1:ABF6 2A 9A E9 D1 _:	ld hl, (programPtr)
  411 D1:ABFA 01 00 2C D5 	ld bc, program
  412 D1:ABFE B7 -  -  -  	or a
  413 D1:ABFF ED 42 -  -  	sbc hl, bc
  414 D1:AC01 E5 -  -  -  	push hl
  415 D1:AC02 01 11 00 00 		ld bc, 17
  416 D1:AC06 09 -  -  -  		add hl, bc
  417 D1:AC07 E5 -  -  -  		push hl
  418 D1:AC08 CD 1C 05 02 			call _EnoughMem
  419 D1:AC0C 21 11 EC D1 			ld hl, NotEnoughMem
  420 D1:AC10 DA 92 AF D1 			jp c, DispFinalString
  421 D1:AC14 E1 -  -  -  		pop hl
  422 D1:AC15 01 F1 FF FF 		ld bc, -15
  423 D1:AC19 09 -  -  -  		add hl, bc
  424 D1:AC1A CD 34 13 02 		call _CreateProtProg
  425 D1:AC1E C1 -  -  -  	pop bc
  426 D1:AC1F 13 -  -  -  	inc de
  427 D1:AC20 13 -  -  -  	inc de
  428 D1:AC21 21 00 2C D5 	ld hl, program
  429 D1:AC25 EB -  -  -  	ex de, hl
  430 D1:AC26 36 EF -  -  	ld (hl), tExtTok														; insert header
  431 D1:AC28 23 -  -  -  	inc hl
  432 D1:AC29 36 7B -  -  	ld (hl), tAsm84CeCmp
  433 D1:AC2B 23 -  -  -  	inc hl
  434 D1:AC2C EB -  -  -  	ex de, hl
  435 D1:AC2D ED B0 -  -  	ldir																	; insert the program data
  436 D1:AC2F 21 4B EA D1 	ld hl, GoodCompileMessage
  437 D1:AC33 FD CB D0 CE 	set good_compilation, (iy+fProgram1)
  438 D1:AC37 C3 92 AF D1 	jp DispFinalString														; DONE :D :D :D
  439 D1:AC3B -  -  -  -  
  440 D1:AC3B -  -  -  -  #include "routines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\routines.asm"
    1 D1:AC3B -  -  -  -  InsertBCDEAHL:
    2 D1:AC3B E5 -  -  -  	push hl
    3 D1:AC3C C5 -  -  -  		push bc
    4 D1:AC3D E1 -  -  -  		pop hl
    5 D1:AC3E CD 4C AC D1 		call InsertHL
    6 D1:AC42 EB -  -  -  		ex de, hl
    7 D1:AC43 CD 4C AC D1 		call InsertHL
    8 D1:AC47 E1 -  -  -  	pop hl
    9 D1:AC48 -  -  -  -  InsertAHL:
   10 D1:AC48 CD 0A AD D1 	call InsertA
   11 D1:AC4C -  -  -  -  InsertHL:
   12 D1:AC4C D5 -  -  -  	push de
   13 D1:AC4D EB -  -  -  		ex de, hl
   14 D1:AC4E 2A 9A E9 D1 		ld hl, (programPtr)
   15 D1:AC52 ED 1F -  -  		ld (hl), de
   16 D1:AC54 23 -  -  -  		inc hl
   17 D1:AC55 23 -  -  -  		inc hl
   18 D1:AC56 23 -  -  -  		inc hl
   19 D1:AC57 22 9A E9 D1 		ld (programPtr), hl
   20 D1:AC5B D1 -  -  -  	pop de
   21 D1:AC5C C9 -  -  -  	ret
   22 D1:AC5D -  -  -  -  	
   23 D1:AC5D -  -  -  -  InsertCallHL:
   24 D1:AC5D 3E CD -  -  	ld a, 0CDh
   25 D1:AC5F 18 E7 -  -  	jr InsertAHL
   26 D1:AC61 -  -  -  -  	
   27 D1:AC61 -  -  -  -  InsertHIXC:
   28 D1:AC61 26 27 -  -  	ld h, 027h
   29 D1:AC63 06 03 -  -  	ld b, 3
   30 D1:AC65 ED 4C -  -  	mlt bc
   31 D1:AC67 79 -  -  -  	ld a, c
   32 D1:AC68 18 07 -  -  	jr ++_
   33 D1:AC6A -  -  -  -  InsertIXE:
   34 D1:AC6A 26 17 -  -  	ld h, 017h
   35 D1:AC6C 16 03 -  -  _:	ld d, 3
   36 D1:AC6E ED 5C -  -  	mlt de
   37 D1:AC70 7B -  -  -  	ld a, e
   38 D1:AC71 2E DD -  -  _:	ld l, 0DDh
   39 D1:AC73 CD 70 1D 02 	call _SetHLUToA
   40 D1:AC77 18 D3 -  -  	jr InsertHL																; ld hl/de/bc, (ix+*)
   41 D1:AC79 -  -  -  -  InsertIXC:
   42 D1:AC79 26 07 -  -  	ld h, 007h
   43 D1:AC7B 18 EF -  -  	jr --_
   44 D1:AC7D -  -  -  -  
   45 D1:AC7D -  -  -  -  InsertBCDEHL:
   46 D1:AC7D E5 -  -  -  	push hl
   47 D1:AC7E C5 -  -  -  		push bc
   48 D1:AC7F E1 -  -  -  		pop hl
   49 D1:AC80 CD 4C AC D1 		call InsertHL
   50 D1:AC84 E1 -  -  -  	pop hl
   51 D1:AC85 18 04 -  -  	jr InsertDEHL
   52 D1:AC87 -  -  -  -  InsertADEHL:
   53 D1:AC87 CD 0A AD D1 	call InsertA
   54 D1:AC8B -  -  -  -  InsertDEHL:
   55 D1:AC8B EB -  -  -  	ex de, hl
   56 D1:AC8C CD 4C AC D1 	call InsertHL
   57 D1:AC90 EB -  -  -  	ex de, hl
   58 D1:AC91 18 B9 -  -  	jr InsertHL
   59 D1:AC93 -  -  -  -  	
   60 D1:AC93 -  -  -  -  MaybeInsertIYFlags:
   61 D1:AC93 FD CB B0 4E 	bit modified_iy, (iy+fAlways1)
   62 D1:AC97 C8 -  -  -  	ret z
   63 D1:AC98 FD CB B0 8E 	res modified_iy, (iy+fAlways1)
   64 D1:AC9C 3E FD -  -  	ld a, 0FDh
   65 D1:AC9E CD 0A AD D1 	call InsertA															; ld iy, flags
   66 D1:ACA2 3E 21 -  -  	ld a, 021h
   67 D1:ACA4 21 80 00 D0 	ld hl, flags
   68 D1:ACA8 C3 48 AC D1 	jp InsertAHL															; ld iy, flags
   69 D1:ACAC -  -  -  -  	
   70 D1:ACAC -  -  -  -  MaybeChangeHLToDE:
   71 D1:ACAC 3A BA E9 D1 	ld a, (ExprOutput)
   72 D1:ACB0 B7 -  -  -  _:	or a
   73 D1:ACB1 C8 -  -  -  	ret z
   74 D1:ACB2 3E EB -  -  	ld a, 0EBh
   75 D1:ACB4 18 54 -  -  	jr InsertA																; ex de, hl
   76 D1:ACB6 -  -  -  -  	
   77 D1:ACB6 -  -  -  -  MaybeChangeDEToHL:
   78 D1:ACB6 3A BA E9 D1 	ld a, (ExprOutput)
   79 D1:ACBA EE 01 -  -  	xor 1
   80 D1:ACBC 18 F2 -  -  	jr -_
   81 D1:ACBE -  -  -  -  	
   82 D1:ACBE -  -  -  -  CGetArgumentLast:
   83 D1:ACBE 3E C2 -  -  	ld a, 0C2h
   84 D1:ACC0 18 02 -  -  	jr $+4
   85 D1:ACC2 -  -  -  -  CGetArgument:
   86 D1:ACC2 3E CA -  -  	ld a, 0CAh
   87 D1:ACC4 32 D9 AC D1 	ld (CGetArgumentLastOrNot), a
   88 D1:ACC8 22 9A E9 D1 	ld (programPtr), hl
   89 D1:ACCC F5 -  -  -  	push af
   90 D1:ACCD CD 28 10 02 		call _IncFetch
   91 D1:ACD1 CD B0 B2 D1 		call ParseExpression
   92 D1:ACD5 FD CB BE 46 		bit triggered_a_comma, (iy+fExpression3)
   93 D1:ACD9 -  -  -  -  CGetArgumentLastOrNot:
   94 D1:ACD9 CA 36 AF D1 		jp z, ErrorSyntax
   95 D1:ACDD 2A 9A E9 D1 		ld hl, (programPtr)
   96 D1:ACE1 F1 -  -  -  	pop af
   97 D1:ACE2 28 14 -  -  	jr z, InsertPushHLDE
   98 D1:ACE4 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   99 D1:ACE8 28 0E -  -  	jr z, InsertPushHLDE
  100 D1:ACEA 2B -  -  -  	dec hl
  101 D1:ACEB 2B -  -  -  	dec hl
  102 D1:ACEC 22 9A E9 D1 	ld (programPtr), hl
  103 D1:ACF0 2B -  -  -  	dec hl
  104 D1:ACF1 2B -  -  -  	dec hl
  105 D1:ACF2 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  106 D1:ACF4 23 -  -  -  	inc hl
  107 D1:ACF5 ED 17 -  -  	ld de, (hl)
  108 D1:ACF7 73 -  -  -  	ld (hl), e
  109 D1:ACF8 -  -  -  -  InsertPushHLDE:
  110 D1:ACF8 3A BB E9 D1 	ld a, (ExprOutput2)
  111 D1:ACFC B7 -  -  -  	or a
  112 D1:ACFD 20 00 -  -  	jr nz, +_
  113 D1:ACFF -  -  -  -  	;ld hl, (programPtr)
  114 D1:ACFF -  -  -  -  	;dec hl
  115 D1:ACFF -  -  -  -  	;ld (programPtr), hl
  116 D1:ACFF 87 -  -  -  _:	add a, a
  117 D1:AD00 87 -  -  -  	add a, a
  118 D1:AD01 87 -  -  -  	add a, a
  119 D1:AD02 87 -  -  -  	add a, a
  120 D1:AD03 C6 D5 -  -  	add a, 0D5h
  121 D1:AD05 2A 9A E9 D1 	ld hl, (programPtr)
  122 D1:AD09 23 -  -  -  	inc hl
  123 D1:AD0A -  -  -  -  InsertA:
  124 D1:AD0A E5 -  -  -  	push hl
  125 D1:AD0B 2A 9A E9 D1 		ld hl, (programPtr)
  126 D1:AD0F 77 -  -  -  		ld (hl), a
  127 D1:AD10 23 -  -  -  		inc hl
  128 D1:AD11 22 9A E9 D1 		ld (programPtr), hl
  129 D1:AD15 E1 -  -  -  	pop hl
  130 D1:AD16 C9 -  -  -  	ret
  131 D1:AD17 -  -  -  -  
  132 D1:AD17 -  -  -  -  CAddArgument:
  133 D1:AD17 C5 -  -  -  	push bc
  134 D1:AD18 B7 -  -  -  		or a
  135 D1:AD19 ED 42 -  -  		sbc hl, bc
  136 D1:AD1B E5 -  -  -  		push hl
  137 D1:AD1C C1 -  -  -  		pop bc
  138 D1:AD1D E1 -  -  -  	pop hl
  139 D1:AD1E ED B0 -  -  	ldir
  140 D1:AD20 C9 -  -  -  	ret
  141 D1:AD21 -  -  -  -  	
  142 D1:AD21 -  -  -  -  InsertProgramPtrToDataOffset:
  143 D1:AD21 D5 -  -  -  	push de
  144 D1:AD22 2A A6 E9 D1 		ld hl, (programDataOffsetPtr)
  145 D1:AD26 ED 5B 9A E9 
              D1 -  -  -  		ld de, (programPtr)
  146 D1:AD2B ED 1F -  -  		ld (hl), de
  147 D1:AD2D 23 -  -  -  		inc hl
  148 D1:AD2E 23 -  -  -  		inc hl
  149 D1:AD2F 23 -  -  -  		inc hl
  150 D1:AD30 22 A6 E9 D1 		ld (programDataOffsetPtr), hl
  151 D1:AD34 D1 -  -  -  	pop de
  152 D1:AD35 C9 -  -  -  	ret
  153 D1:AD36 -  -  -  -  	
  154 D1:AD36 -  -  -  -  GetFunction:
  155 D1:AD36 C5 -  -  -  	push bc
  156 D1:AD37 D5 -  -  -  		push de
  157 D1:AD38 CD 3F AD D1 			call GetRightFunction
  158 D1:AD3C D1 -  -  -  		pop de
  159 D1:AD3D C1 -  -  -  	pop bc
  160 D1:AD3E C9 -  -  -  	ret
  161 D1:AD3F -  -  -  -  	
  162 D1:AD3F -  -  -  -  GetRightFunction:
  163 D1:AD3F 05 -  -  -  	dec b
  164 D1:AD40 CA 84 AD D1 	jp z, GetFunctionDE
  165 D1:AD44 05 -  -  -  	dec b
  166 D1:AD45 C2 EC AD D1 	jp nz, GetFunctionBC
  167 D1:AD49 -  -  -  -  GetFunctionHL:
  168 D1:AD49 FE AD -  -  	cp tGetKey
  169 D1:AD4B 20 12 -  -  	jr nz, +_
  170 D1:AD4D 21 4C 01 02 	ld hl, _GetCSC
  171 D1:AD51 CD 5D AC D1 	call InsertCallHL														; call _GetCSC
  172 D1:AD55 3E B7 -  -  	ld a, 0B7h
  173 D1:AD57 21 ED 62 6F 	ld hl, 06F62EDh
  174 D1:AD5B C3 48 AC D1 	jp InsertAHL															; or a \ sbc hl, hl \ ld l, a
  175 D1:AD5F FE AB -  -  _:	cp trand
  176 D1:AD61 20 19 -  -  	jr nz, +_
  177 D1:AD63 3E D5 -  -  	ld a, 0D5h
  178 D1:AD65 FD CB C0 76 	bit need_push, (iy+fExpression1)
  179 D1:AD69 C4 0A AD D1 	call nz, InsertA														; push de
  180 D1:AD6D CD 89 AE D1 	call InsertRandRoutine
  181 D1:AD71 FD CB C0 76 	bit need_push, (iy+fExpression1)
  182 D1:AD75 C8 -  -  -  	ret z
  183 D1:AD76 3E D1 -  -  	ld a, 0D1h
  184 D1:AD78 C3 0A AD D1 	jp InsertA																; pop de
  185 D1:AD7C CD 25 AE D1 _:	call InsertKeypadRoutine1
  186 D1:AD80 C3 4D AE D1 	jp InsertKeypadRoutine2
  187 D1:AD84 -  -  -  -  GetFunctionDE:
  188 D1:AD84 FE AD -  -  	cp tGetKey
  189 D1:AD86 20 2D -  -  	jr nz, +_
  190 D1:AD88 3E E5 -  -  	ld a, 0E5h
  191 D1:AD8A FD CB C0 76 	bit need_push, (iy+fExpression1)
  192 D1:AD8E C4 0A AD D1 	call nz, InsertA														; push hl
  193 D1:AD92 21 4C 01 02 	ld hl, _GetCSC
  194 D1:AD96 CD 5D AC D1 	call InsertCallHL														; call _GetCSC
  195 D1:AD9A FD CB C0 76 	bit need_push, (iy+fExpression1)
  196 D1:AD9E 28 06 -  -  	jr z, $+8
  197 D1:ADA0 3E E1 -  -  	ld a, 0E1h
  198 D1:ADA2 CD 0A AD D1 	call InsertA															; pop hl
  199 D1:ADA6 3E 11 -  -  	ld a, 011h
  200 D1:ADA8 CD 0A AD D1 	call InsertA															; ld de, *
  201 D1:ADAC AF -  -  -  	xor a
  202 D1:ADAD 21 00 00 5F 	ld hl, 05F0000h
  203 D1:ADB1 C3 48 AC D1 	jp InsertAHL															; ld de, 0 \ ld e, a
  204 D1:ADB5 FE AB -  -  _:	cp trand
  205 D1:ADB7 20 1F -  -  	jr nz, ++_
  206 D1:ADB9 3E E5 -  -  	ld a, 0E5h
  207 D1:ADBB FD CB C0 76 	bit need_push, (iy+fExpression1)
  208 D1:ADBF C4 0A AD D1 	call nz, InsertA														; push hl
  209 D1:ADC3 CD 89 AE D1 	call InsertRandRoutine
  210 D1:ADC7 3E EB -  -  _:	ld a, 0EBh
  211 D1:ADC9 CD 0A AD D1 	call InsertA															; ex de, hl
  212 D1:ADCD FD CB C0 76 	bit need_push, (iy+fExpression1)
  213 D1:ADD1 C8 -  -  -  	ret z
  214 D1:ADD2 3E E1 -  -  	ld a, 0E1h
  215 D1:ADD4 C3 0A AD D1 	jp InsertA																; pop hl
  216 D1:ADD8 CD 25 AE D1 _:	call InsertKeypadRoutine1
  217 D1:ADDC 3E E5 -  -  	ld a, 0E5h
  218 D1:ADDE FD CB C0 76 	bit need_push, (iy+fExpression1)
  219 D1:ADE2 C4 0A AD D1 	call nz, InsertA														; push hl
  220 D1:ADE6 CD 4D AE D1 	call InsertKeypadRoutine2
  221 D1:ADEA 18 DB -  -  	jr --_
  222 D1:ADEC -  -  -  -  GetFunctionBC:
  223 D1:ADEC FE AD -  -  	cp tGetKey
  224 D1:ADEE 20 17 -  -  	jr nz, +_
  225 D1:ADF0 21 4C 01 02 	ld hl, _GetCSC
  226 D1:ADF4 CD 5D AC D1 	call InsertCallHL														; call _GetCSC
  227 D1:ADF8 3E 01 -  -  	ld a, 001h
  228 D1:ADFA CD 0A AD D1 	call InsertA															; ld bc, *
  229 D1:ADFE AF -  -  -  	xor a
  230 D1:ADFF 21 00 00 4F 	ld hl, 04F0000h
  231 D1:AE03 C3 48 AC D1 	jp InsertAHL															; ld bc, 0 \ ld c, a
  232 D1:AE07 FE AB -  -  _:	cp trand
  233 D1:AE09 20 10 -  -  	jr nz, ++_
  234 D1:AE0B CD 89 AE D1 	call InsertRandRoutine
  235 D1:AE0F 3E E5 -  -  _:	ld a, 0E5h
  236 D1:AE11 CD 0A AD D1 	call InsertA															; push hl
  237 D1:AE15 3E C1 -  -  	ld a, 0C1h
  238 D1:AE17 C3 0A AD D1 	jp InsertA																; pop bc
  239 D1:AE1B CD 25 AE D1 _:	call InsertKeypadRoutine1
  240 D1:AE1F CD 4D AE D1 	call InsertKeypadRoutine2
  241 D1:AE23 18 EA -  -  	jr --_
  242 D1:AE25 -  -  -  -  InsertKeypadRoutine1:
  243 D1:AE25 47 -  -  -  	ld b, a
  244 D1:AE26 3E 06 -  -  	ld a, 006h
  245 D1:AE28 CD 0A AD D1 	call InsertA															; ld b, *
  246 D1:AE2C 78 -  -  -  	ld a, b
  247 D1:AE2D 3D -  -  -  	dec a
  248 D1:AE2E 0F -  -  -  	rrca
  249 D1:AE2F 0F -  -  -  	rrca
  250 D1:AE30 E6 0E -  -  	and 00001110b
  251 D1:AE32 4F -  -  -  	ld c, a
  252 D1:AE33 3E 1E -  -  	ld a, 01Eh
  253 D1:AE35 91 -  -  -  	sub c
  254 D1:AE36 CD 0A AD D1 	call InsertA															; ld b, X
  255 D1:AE3A 3E 0E -  -  	ld a, 00Eh
  256 D1:AE3C CD 0A AD D1 	call InsertA															; ld c, *
  257 D1:AE40 78 -  -  -  	ld a, b
  258 D1:AE41 E6 07 -  -  	and 000000111b
  259 D1:AE43 47 -  -  -  	ld b, a
  260 D1:AE44 AF -  -  -  	xor a
  261 D1:AE45 37 -  -  -  	scf
  262 D1:AE46 17 -  -  -  _:	rla
  263 D1:AE47 10 FD -  -  	djnz -_
  264 D1:AE49 C3 0A AD D1 	jp InsertA																; ld c, X
  265 D1:AE4D -  -  -  -  	
  266 D1:AE4D -  -  -  -  InsertKeypadRoutine2:
  267 D1:AE4D 3E CD -  -  	ld a, 0CDh
  268 D1:AE4F CD 0A AD D1 	call InsertA															; call *
  269 D1:AE53 CD 21 AD D1 	call InsertProgramPtrToDataOffset
  270 D1:AE57 2A 2D EA D0 	ld hl, (KeypadStartData)
  271 D1:AE5B FD CB D0 76 	bit has_already_keypad, (iy+fProgram1)
  272 D1:AE5F C2 4C AC D1 	jp nz, InsertHL															; call XXXXXX
  273 D1:AE63 2A AF E9 D1 	ld hl, (programDataDataPtr)
  274 D1:AE67 22 2D EA D0 	ld (KeypadStartData), hl
  275 D1:AE6B E5 -  -  -  	push hl
  276 D1:AE6C D1 -  -  -  	pop de
  277 D1:AE6D FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  278 D1:AE71 CD 4C AC D1 	call InsertHL															; call *
  279 D1:AE75 21 12 EE D1 	ld hl, KeypadRoutine
  280 D1:AE79 01 14 00 00 	ld bc, KeypadRoutineEnd - KeypadRoutine
  281 D1:AE7D ED B0 -  -  	ldir
  282 D1:AE7F ED 53 AF E9 
              D1 -  -  -  	ld (programDataDataPtr), de
  283 D1:AE84 FD CB D0 F6 	set has_already_keypad, (iy+fProgram1)
  284 D1:AE88 C9 -  -  -  	ret
  285 D1:AE89 -  -  -  -  	
  286 D1:AE89 -  -  -  -  InsertRandRoutine:
  287 D1:AE89 3E CD -  -  	ld a, 0CDh
  288 D1:AE8B CD 0A AD D1 	call InsertA															; call *
  289 D1:AE8F CD 21 AD D1 	call InsertProgramPtrToDataOffset
  290 D1:AE93 2A 24 EA D0 	ld hl, (RandStartData)
  291 D1:AE97 FD CB D0 5E 	bit has_already_rand, (iy+fProgram1)
  292 D1:AE9B C2 4C AC D1 	jp nz, InsertHL															; call XXXXXX
  293 D1:AE9F 2A AF E9 D1 	ld hl, (programDataDataPtr)
  294 D1:AEA3 22 24 EA D0 	ld (RandStartData), hl
  295 D1:AEA7 E5 -  -  -  	push hl
  296 D1:AEA8 D1 -  -  -  	pop de
  297 D1:AEA9 CD 4C AC D1 	call InsertHL															; call XXXXXX
  298 D1:AEAD 21 96 ED D1 	ld hl, RandRoutine
  299 D1:AEB1 01 36 00 00 	ld bc, RandRoutineEnd - RandRoutine
  300 D1:AEB5 ED B0 -  -  	ldir
  301 D1:AEB7 ED 53 AF E9 
              D1 -  -  -  	ld (programDataDataPtr), de
  302 D1:AEBC FD CB D0 DE 	set has_already_rand, (iy+fProgram1)
  303 D1:AEC0 C9 -  -  -  	ret
  304 D1:AEC1 -  -  -  -  	
  305 D1:AEC1 -  -  -  -  CompareStrings:
  306 D1:AEC1 1A -  -  -  	ld a, (de)
  307 D1:AEC2 FE 3F -  -  	cp tEnter
  308 D1:AEC4 C8 -  -  -  	ret z
  309 D1:AEC5 BE -  -  -  	cp a, (hl)
  310 D1:AEC6 23 -  -  -  	inc hl
  311 D1:AEC7 13 -  -  -  	inc de
  312 D1:AEC8 C0 -  -  -  	ret nz
  313 D1:AEC9 18 F6 -  -  	jr CompareStrings
  314 D1:AECB -  -  -  -  	
  315 D1:AECB -  -  -  -  SubError:
  316 D1:AECB 3E 2D -  -  	ld a, '-'
  317 D1:AECD 18 4D -  -  	jr DispOperatorErrorString
  318 D1:AECF -  -  -  -  AddError:
  319 D1:AECF 3E 2B -  -  	ld a, '+'
  320 D1:AED1 18 49 -  -  	jr DispOperatorErrorString
  321 D1:AED3 -  -  -  -  DivError:
  322 D1:AED3 3E 2F -  -  	ld a, '/'
  323 D1:AED5 18 45 -  -  	jr DispOperatorErrorString
  324 D1:AED7 -  -  -  -  MulError:
  325 D1:AED7 3E 2A -  -  	ld a, '*'
  326 D1:AED9 18 41 -  -  	jr DispOperatorErrorString
  327 D1:AEDB -  -  -  -  	
  328 D1:AEDB -  -  -  -  GLETError:
  329 D1:AEDB 3A 20 EA D0 	ld a, (tempToken2)
  330 D1:AEDF FE 6E -  -  	cp tGE
  331 D1:AEE1 0E 19 -  -  	ld c, 019h
  332 D1:AEE3 28 36 -  -  	jr z, DispOperatorErrorString2
  333 D1:AEE5 FE 6D -  -  	cp tLE
  334 D1:AEE7 0E 17 -  -  	ld c, 017h
  335 D1:AEE9 28 30 -  -  	jr z, DispOperatorErrorString2
  336 D1:AEEB FE 6C -  -  	cp tGT
  337 D1:AEED 0E 3E -  -  	ld c, '>'
  338 D1:AEEF 28 2A -  -  	jr z, DispOperatorErrorString2
  339 D1:AEF1 3E 3C -  -  	ld a, '<'
  340 D1:AEF3 18 27 -  -  	jr DispOperatorErrorString
  341 D1:AEF5 -  -  -  -  
  342 D1:AEF5 -  -  -  -  NEQError:
  343 D1:AEF5 3A 20 EA D0 	ld a, (tempToken2)
  344 D1:AEF9 FE 6A -  -  	cp tEq
  345 D1:AEFB 3E 3D -  -  	ld a, '='
  346 D1:AEFD 28 1D -  -  	jr z, DispOperatorErrorString
  347 D1:AEFF 3E 18 -  -  	ld a, 018h
  348 D1:AF01 18 19 -  -  	jr DispOperatorErrorString
  349 D1:AF03 -  -  -  -  XORANDError:
  350 D1:AF03 3A 20 EA D0 	ld a, (tempToken2)
  351 D1:AF07 FE 3C -  -  	cp tOr
  352 D1:AF09 0E 7C -  -  	ld c, '|'
  353 D1:AF0B 28 0E -  -  	jr z, DispOperatorErrorString2
  354 D1:AF0D FE 3D -  -  	cp tXor
  355 D1:AF0F 0E 5E -  -  	ld c, '^'
  356 D1:AF11 28 08 -  -  	jr z, DispOperatorErrorString2
  357 D1:AF13 3E 26 -  -  	ld a, '&'
  358 D1:AF15 18 05 -  -  	jr DispOperatorErrorString
  359 D1:AF17 -  -  -  -  StoError:
  360 D1:AF17 3E 1C -  -  	ld a, 01Ch
  361 D1:AF19 18 01 -  -  	jr DispOperatorErrorString
  362 D1:AF1B -  -  -  -  	
  363 D1:AF1B -  -  -  -  DispOperatorErrorString2:
  364 D1:AF1B 79 -  -  -  	ld a, c
  365 D1:AF1C -  -  -  -  DispOperatorErrorString:
  366 D1:AF1C F5 -  -  -  	push af
  367 D1:AF1D CD D4 B0 D1 		call ClearScreen
  368 D1:AF21 21 24 EA D1 		ld hl, ErrorMessageStandard
  369 D1:AF25 CD 0A B1 D1 		call PrintString
  370 D1:AF29 F1 -  -  -  	pop af
  371 D1:AF2A CD 34 B8 D1 	call _PrintChar_ASM
  372 D1:AF2E 3E 27 -  -  	ld a, '\''
  373 D1:AF30 CD 34 B8 D1 	call _PrintChar_ASM
  374 D1:AF34 18 66 -  -  	jr ReturnToOS
  375 D1:AF36 -  -  -  -  	
  376 D1:AF36 -  -  -  -  ErrorSyntax:
  377 D1:AF36 21 63 EB D1 	ld hl, SyntaxErrorMessage
  378 D1:AF3A 18 56 -  -  	jr DispFinalString
  379 D1:AF3C -  -  -  -  MismatchError:
  380 D1:AF3C 21 D1 EB D1 	ld hl, MismatchErrorMessage
  381 D1:AF40 18 50 -  -  	jr DispFinalString
  382 D1:AF42 -  -  -  -  NoProgramsError:
  383 D1:AF42 21 61 EA D1 	ld hl, NoProgramsMessage
  384 D1:AF46 FD CB D0 CE 	set good_compilation, (iy+fProgram1)
  385 D1:AF4A 18 46 -  -  	jr DispFinalString
  386 D1:AF4C -  -  -  -  InvalidTokenError:
  387 D1:AF4C 21 74 EA D1 	ld hl, InvalidTokenMessage
  388 D1:AF50 18 40 -  -  	jr DispFinalString
  389 D1:AF52 -  -  -  -  InvalidNameLength:
  390 D1:AF52 21 A9 EA D1 	ld hl, InvalidNameLengthMessage
  391 D1:AF56 18 3A -  -  	jr DispFinalString
  392 D1:AF58 -  -  -  -  ErrorNotFound:
  393 D1:AF58 21 24 EB D1 	ld hl, NotFoundMessage
  394 D1:AF5C 18 34 -  -  	jr DispFinalString
  395 D1:AF5E -  -  -  -  ErrorUsedCode:
  396 D1:AF5E 21 98 EB D1 	ld hl, UsedCodeMessage
  397 D1:AF62 18 2E -  -  	jr DispFinalString
  398 D1:AF64 -  -  -  -  SameNameError:
  399 D1:AF64 21 C0 EA D1 	ld hl, SameNameMessage
  400 D1:AF68 18 28 -  -  	jr DispFinalString
  401 D1:AF6A -  -  -  -  FunctionError:
  402 D1:AF6A 21 FC EA D1 	ld hl, FunctionFunctionMessage
  403 D1:AF6E 18 22 -  -  	jr DispFinalString
  404 D1:AF70 -  -  -  -  UnknownError:
  405 D1:AF70 21 E9 EB D1 	ld hl, UnknownMessage
  406 D1:AF74 18 1C -  -  	jr DispFinalString
  407 D1:AF76 -  -  -  -  WrongSpriteDataError:
  408 D1:AF76 21 E7 EA D1 	ld hl, WrongSpriteDataMessgae
  409 D1:AF7A 18 16 -  -  	jr DispFinalString
  410 D1:AF7C -  -  -  -  ImplementError:
  411 D1:AF7C 21 37 EB D1 	ld hl, ImplementMessage
  412 D1:AF80 18 10 -  -  	jr DispFinalString
  413 D1:AF82 -  -  -  -  EndError:
  414 D1:AF82 21 3C EA D1 	ld hl, EndErrorMessage
  415 D1:AF86 18 0A -  -  	jr DispFinalString
  416 D1:AF88 -  -  -  -  ErrorTooLargeLoop:
  417 D1:AF88 21 7E EB D1 	ld hl, TooLargeLoopMessage
  418 D1:AF8C 18 04 -  -  	jr DispFinalString
  419 D1:AF8E -  -  -  -  LabelError:
  420 D1:AF8E 21 26 EC D1 	ld hl, LabelErrorMessage
  421 D1:AF92 -  -  -  -  	
  422 D1:AF92 -  -  -  -  DispFinalString:
  423 D1:AF92 E5 -  -  -  	push hl
  424 D1:AF93 CD D4 B0 D1 		call ClearScreen
  425 D1:AF97 E1 -  -  -  	pop hl
  426 D1:AF98 CD 0A B1 D1 	call PrintString
  427 D1:AF9C -  -  -  -  ReturnToOS:
  428 D1:AF9C FD CB D0 4E 	bit good_compilation, (iy+fProgram1)
  429 D1:AFA0 20 51 -  -  	jr nz, SkipDisplayLineNumber
  430 D1:AFA2 3E 15 -  -  	ld a, 21
  431 D1:AFA4 32 67 B8 D1 	ld (TextYPos_ASM), a
  432 D1:AFA8 21 01 00 00 	ld hl, 1
  433 D1:AFAC 22 36 B8 D1 	ld (TextXPos_ASM), hl
  434 D1:AFB0 21 C2 EB D1 	ld hl, LineNumber
  435 D1:AFB4 CD 0A B1 D1 	call PrintString
  436 D1:AFB8 2A 1A 23 D0 	ld hl, (curPC)
  437 D1:AFBC ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  438 D1:AFC1 B7 -  -  -  	or a
  439 D1:AFC2 ED 52 -  -  	sbc hl, de
  440 D1:AFC4 E5 -  -  -  	push hl
  441 D1:AFC5 C1 -  -  -  	pop bc
  442 D1:AFC6 ED 62 -  -  	sbc hl, hl
  443 D1:AFC8 23 -  -  -  	inc hl
  444 D1:AFC9 EB -  -  -  	ex de, hl
  445 D1:AFCA -  -  -  -  GetAmountOfLines:
  446 D1:AFCA 78 -  -  -  	ld a, b
  447 D1:AFCB B1 -  -  -  	or c
  448 D1:AFCC 28 09 -  -  	jr z, GetAmountOfLinesStop
  449 D1:AFCE 3E 3F -  -  	ld a, tEnter
  450 D1:AFD0 ED B1 -  -  	cpir
  451 D1:AFD2 20 03 -  -  	jr nz, GetAmountOfLinesStop
  452 D1:AFD4 13 -  -  -  	inc de
  453 D1:AFD5 18 F3 -  -  	jr GetAmountOfLines
  454 D1:AFD7 -  -  -  -  GetAmountOfLinesStop:
  455 D1:AFD7 EB -  -  -  	ex de, hl
  456 D1:AFD8 AF -  -  -  	xor a
  457 D1:AFD9 11 18 06 D0 	ld de, OP3+10
  458 D1:AFDD 12 -  -  -  	ld (de), a
  459 D1:AFDE -  -  -  -  NumberToStringLoop:
  460 D1:AFDE 3E 0A -  -  	ld a, 10
  461 D1:AFE0 CD 90 1D 02 	call _DivHLByA
  462 D1:AFE4 C6 30 -  -  	add a, t0
  463 D1:AFE6 1B -  -  -  	dec de
  464 D1:AFE7 12 -  -  -  	ld (de), a
  465 D1:AFE8 19 -  -  -  	add hl, de
  466 D1:AFE9 B7 -  -  -  	or a
  467 D1:AFEA ED 52 -  -  	sbc hl, de
  468 D1:AFEC 20 F0 -  -  	jr nz, NumberToStringLoop
  469 D1:AFEE EB -  -  -  	ex de, hl
  470 D1:AFEF CD 0A B1 D1 	call PrintString
  471 D1:AFF3 -  -  -  -  SkipDisplayLineNumber:
  472 D1:AFF3 3E E6 -  -  	ld a, 230
  473 D1:AFF5 32 67 B8 D1 	ld (TextYPos_ASM), a
  474 D1:AFF9 21 55 00 00 	ld hl, 85
  475 D1:AFFD 22 36 B8 D1 	ld (TextXPos_ASM), hl
  476 D1:B001 21 7F EC D1 	ld hl, PressKey
  477 D1:B005 CD 0A B1 D1 	call PrintString
  478 D1:B009 CD 8C 0D 02 	call _GetKey
  479 D1:B00D -  -  -  -  StopProgram:
  480 D1:B00D 2A 1A 23 D0 	ld hl, (curPC)
  481 D1:B011 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  482 D1:B016 37 -  -  -  	scf
  483 D1:B017 ED 52 -  -  	sbc hl, de
  484 D1:B019 40 22 E3 08 	ld.sis (errOffset - 0D00000h), hl
  485 D1:B01D -  -  -  -  backupSP = $+1
  486 D1:B01D 31 00 00 00 	ld sp, 0
  487 D1:B021 -  -  -  -  backupBegPC = $+1
  488 D1:B021 21 00 00 00 	ld hl, 0
  489 D1:B025 22 17 23 D0 	ld (begPC), hl
  490 D1:B029 -  -  -  -  backupCurPC = $+1
  491 D1:B029 21 00 00 00 	ld hl, 0
  492 D1:B02D 22 1A 23 D0 	ld (curPC), hl
  493 D1:B031 -  -  -  -  backupEndPC = $+1
  494 D1:B031 21 00 00 00 	ld hl, 0
  495 D1:B035 22 1D 23 D0 	ld (endPC), hl
  496 D1:B039 CD 08 08 02 	call _ClrLCDFull
  497 D1:B03D CD 28 08 02 	call _HomeUp
  498 D1:B041 3E 2D -  -  	ld a, lcdBpp16
  499 D1:B043 32 18 00 E3 	ld (mpLcdCtrl), a
  500 D1:B047 CD 3C 1A 02 	call _DrawStatusBar
  501 D1:B04B C9 -  -  -  	ret
  502 D1:B04C FD CB D0 4E 	bit good_compilation, (iy+fProgram1)
  503 D1:B050 C0 -  -  -  	ret nz
  504 D1:B051 -  -  -  -  #include "editor.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\editor.asm"
    1 D1:B051 -  -  -  -  OpenEditBuffer:
    2 D1:B051 21 F9 05 D0 	ld hl, OP1+1
    3 D1:B055 11 5B 06 D0 	ld de, progToEdit
    4 D1:B059 01 08 00 00 	ld bc, 8
    5 D1:B05D ED B0 -  -  	ldir
    6 D1:B05F 11 1F EA D0 	ld de, saveSScreen
    7 D1:B063 21 71 B0 D1 	ld hl, +_
    8 D1:B067 01 63 00 00 	ld bc, StopProgramEditor - +_
    9 D1:B06B ED B0 -  -  	ldir
   10 D1:B06D C3 1F EA D0 	jp saveSScreen
   11 D1:B071 21 81 A8 D1 _:	ld hl, UserMem
   12 D1:B075 ED 5B 8C 11 
              D0 -  -  -  	ld de, (asm_prgm_size)
   13 D1:B07A CD 90 05 02 	call _DelMem
   14 D1:B07E 3E 46 -  -  	ld a, kPrgmEd
   15 D1:B080 CD 6C 01 02 	call _NewContext
   16 D1:B084 40 ED 4B E3 
              08 -  -  -  	ld.sis bc, (errOffset - 0D00000h)
   17 D1:B089 2A 3D 24 D0 	ld hl, (editTail)
   18 D1:B08D ED 5B 3A 24 
              D0 -  -  -  	ld de, (editCursor)
   19 D1:B092 ED B0 -  -  	ldir
   20 D1:B094 22 3D 24 D0 	ld (editTail), hl
   21 D1:B098 ED 53 3A 24 
              D0 -  -  -  	ld (editCursor), de
   22 D1:B09D -  -  -  -  FindPreviousEnter:
   23 D1:B09D CD F8 0C 02 	call _BufLeft
   24 D1:B0A1 28 0C -  -  	jr z, AtTopOfProgram
   25 D1:B0A3 7B -  -  -  	ld a, e
   26 D1:B0A4 FE 3F -  -  	cp tEnter
   27 D1:B0A6 28 03 -  -  	jr z, +_
   28 D1:B0A8 03 -  -  -  	inc bc
   29 D1:B0A9 18 F2 -  -  	jr FindPreviousEnter
   30 D1:B0AB CD FC 0C 02 _:	call _BufRight
   31 D1:B0AF -  -  -  -  AtTopOfProgram:
   32 D1:B0AF C5 -  -  -  	push bc
   33 D1:B0B0 CD 1C 08 02 		call _ClrWindow
   34 D1:B0B4 21 01 00 00 		ld hl, 0000001h
   35 D1:B0B8 22 95 05 D0 		ld (curRow), hl
   36 D1:B0BC 3E 3A -  -  		ld a, ':'
   37 D1:B0BE CD B8 07 02 		call _PutC
   38 D1:B0C2 CD 68 0D 02 		call _DispEOW
   39 D1:B0C6 C1 -  -  -  	pop bc
   40 D1:B0C7 78 -  -  -  _:	ld a, b
   41 D1:B0C8 B1 -  -  -  	or c
   42 D1:B0C9 CA 54 01 02 	jp z, _Mon
   43 D1:B0CD CD 4C 0D 02 	call _CursorRight
   44 D1:B0D1 0B -  -  -  	dec bc
   45 D1:B0D2 18 F3 -  -  	jr -_
   46 D1:B0D4 -  -  -  -  StopProgramEditor:
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\routines.asm"
  505 D1:B0D4 -  -  -  -  	
  506 D1:B0D4 -  -  -  -  ClearScreen:
  507 D1:B0D4 21 00 0F D4 	ld hl, vRAM+(320*12)
  508 D1:B0D8 36 FF -  -  	ld (hl), 255
  509 D1:B0DA E5 -  -  -  	push hl
  510 D1:B0DB D1 -  -  -  	pop de
  511 D1:B0DC 13 -  -  -  	inc de
  512 D1:B0DD 01 FF 1C 01 	ld bc, 320*228-1
  513 D1:B0E1 ED B0 -  -  	ldir
  514 D1:B0E3 03 -  -  -  	inc bc
  515 D1:B0E4 ED 43 36 B8 
              D1 -  -  -  	ld (TextXPos_ASM), bc
  516 D1:B0E9 3E 0C -  -  	ld a, 12
  517 D1:B0EB 32 67 B8 D1 	ld (TextYPos_ASM), a
  518 D1:B0EF AF -  -  -  	xor a
  519 D1:B0F0 32 8C B8 D1 	ld (color), a
  520 D1:B0F4 C9 -  -  -  	ret
  521 D1:B0F5 -  -  -  -  	
  522 D1:B0F5 -  -  -  -  PrintCompilingProgram:
  523 D1:B0F5 AF -  -  -  	xor a
  524 D1:B0F6 32 01 06 D0 	ld (OP1+9), a
  525 D1:B0FA CD D4 B0 D1 	call ClearScreen
  526 D1:B0FE 21 41 EC D1 	ld hl, StartParseMessage
  527 D1:B102 CD 0A B1 D1 	call PrintString
  528 D1:B106 21 F9 05 D0 	ld hl, OP1+1
  529 D1:B10A -  -  -  -  	
  530 D1:B10A -  -  -  -  PrintString:
  531 D1:B10A 7E -  -  -  	ld a, (hl)
  532 D1:B10B 23 -  -  -  	inc hl
  533 D1:B10C B7 -  -  -  	or a
  534 D1:B10D C4 34 B8 D1 	call nz, _PrintChar_ASM
  535 D1:B111 20 F7 -  -  	jr nz, PrintString
  536 D1:B113 C9 -  -  -  	ret
  537 D1:B114 -  -  -  -  	
  538 D1:B114 -  -  -  -  PreScanPrograms:
  539 D1:B114 2A 1D 23 D0 	ld hl, (endPC)
  540 D1:B118 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  541 D1:B11D B7 -  -  -  	or a
  542 D1:B11E ED 52 -  -  	sbc hl, de
  543 D1:B120 23 -  -  -  	inc hl
  544 D1:B121 E5 -  -  -  	push hl
  545 D1:B122 C1 -  -  -  	pop bc
  546 D1:B123 2A 1A 23 D0 	ld hl, (curPC)
  547 D1:B127 -  -  -  -  ScanLoop:
  548 D1:B127 78 -  -  -  	ld a, b
  549 D1:B128 B1 -  -  -  	or c
  550 D1:B129 C8 -  -  -  	ret z
  551 D1:B12A 3E 3F -  -  	ld a, tEnter
  552 D1:B12C ED B1 -  -  	cpir
  553 D1:B12E C0 -  -  -  	ret nz
  554 D1:B12F 7E -  -  -  	ld a, (hl)
  555 D1:B130 FE B3 -  -  	cp tDet
  556 D1:B132 28 1E -  -  	jr z, ScanFoundDet
  557 D1:B134 FE D8 -  -  	cp tPause
  558 D1:B136 28 0F -  -  	jr z, ScanFoundPause
  559 D1:B138 FE DC -  -  	cp tInput
  560 D1:B13A 20 EB -  -  	jr nz, ScanLoop
  561 D1:B13C -  -  -  -  ScanFoundInput:
  562 D1:B13C 3A B8 E9 D1 	ld a, (amountOfInput)
  563 D1:B140 3C -  -  -  	inc a
  564 D1:B141 32 B8 E9 D1 	ld (amountOfInput), a
  565 D1:B145 18 E0 -  -  	jr ScanLoop
  566 D1:B147 -  -  -  -  ScanFoundPause:
  567 D1:B147 3A B9 E9 D1 	ld a, (amountOfPause)
  568 D1:B14B 3C -  -  -  	inc a
  569 D1:B14C 32 B9 E9 D1 	ld (amountOfPause), a
  570 D1:B150 18 D5 -  -  	jr ScanLoop
  571 D1:B152 -  -  -  -  ScanFoundDet:
  572 D1:B152 23 -  -  -  	inc hl
  573 D1:B153 7E -  -  -  	ld a, (hl)
  574 D1:B154 D6 30 -  -  	sub t0
  575 D1:B156 38 CF -  -  	jr c, ScanLoop
  576 D1:B158 FE 0A -  -  	cp t9-t0+1
  577 D1:B15A 30 CB -  -  	jr nc, ScanLoop
  578 D1:B15C 11 00 00 00 	ld de, 0
  579 D1:B160 5F -  -  -  	ld e, a
  580 D1:B161 23 -  -  -  	inc hl
  581 D1:B162 0B -  -  -  	dec bc
  582 D1:B163 78 -  -  -  	ld a, b
  583 D1:B164 B1 -  -  -  	or c
  584 D1:B165 28 21 -  -  	jr z, FoundRightCFunction
  585 D1:B167 7E -  -  -  	ld a, (hl)
  586 D1:B168 FE 2B -  -  	cp tComma
  587 D1:B16A 28 1C -  -  	jr z, FoundRightCFunction
  588 D1:B16C FE 3F -  -  	cp tEnter
  589 D1:B16E 28 18 -  -  	jr z, FoundRightCFunction
  590 D1:B170 D6 30 -  -  	sub t0
  591 D1:B172 38 14 -  -  	jr c, FoundRightCFunction
  592 D1:B174 FE 0A -  -  	cp t9-t0+1
  593 D1:B176 30 10 -  -  	jr nc, FoundRightCFunction
  594 D1:B178 E5 -  -  -  	push hl
  595 D1:B179 EB -  -  -  		ex de, hl
  596 D1:B17A 29 -  -  -  		add hl, hl
  597 D1:B17B E5 -  -  -  		push hl
  598 D1:B17C D1 -  -  -  		pop de
  599 D1:B17D 29 -  -  -  		add hl, hl
  600 D1:B17E 29 -  -  -  		add hl, hl
  601 D1:B17F 19 -  -  -  		add hl, de
  602 D1:B180 11 00 00 00 		ld de, 0
  603 D1:B184 5F -  -  -  		ld e, a
  604 D1:B185 19 -  -  -  		add hl, de
  605 D1:B186 EB -  -  -  		ex de, hl
  606 D1:B187 E1 -  -  -  	pop hl
  607 D1:B188 -  -  -  -  FoundRightCFunction:
  608 D1:B188 E5 -  -  -  	push hl
  609 D1:B189 EB -  -  -  		ex de, hl
  610 D1:B18A 11 4F 00 00 		ld de, AMOUNT_OF_C_FUNCTIONS
  611 D1:B18E B7 -  -  -  		or a
  612 D1:B18F ED 52 -  -  		sbc hl, de
  613 D1:B191 30 1F -  -  		jr nc,  WrongCFunction
  614 D1:B193 19 -  -  -  		add hl, de
  615 D1:B194 EB -  -  -  		ex de, hl
  616 D1:B195 21 C7 E9 D1 		ld hl, usedCroutines
  617 D1:B199 19 -  -  -  		add hl, de
  618 D1:B19A 7E -  -  -  		ld a, (hl)
  619 D1:B19B B7 -  -  -  		or a
  620 D1:B19C 20 14 -  -  		jr nz, FunctionAlreadyInProgram
  621 D1:B19E -  -  -  -  AddCFunctionToProgram:
  622 D1:B19E 3A B6 E9 D1 		ld a, (amountOfCRoutines)
  623 D1:B1A2 3C -  -  -  		inc a
  624 D1:B1A3 77 -  -  -  		ld (hl), a
  625 D1:B1A4 32 B6 E9 D1 		ld (amountOfCRoutines), a
  626 D1:B1A8 3E C3 -  -  		ld a, 0C3h
  627 D1:B1AA D5 -  -  -  		push de
  628 D1:B1AB E1 -  -  -  		pop hl
  629 D1:B1AC 29 -  -  -  		add hl, hl
  630 D1:B1AD 19 -  -  -  		add hl, de
  631 D1:B1AE CD 48 AC D1 		call InsertAHL																; jp *
  632 D1:B1B2 -  -  -  -  FunctionAlreadyInProgram:
  633 D1:B1B2 -  -  -  -  WrongCFunction:
  634 D1:B1B2 E1 -  -  -  	pop hl
  635 D1:B1B3 C3 27 B1 D1 	jp ScanLoop
  636 D1:B1B7 -  -  -  -  
  637 D1:B1B7 -  -  -  -  GetSpriteData:
  638 D1:B1B7 B7 -  -  -  	or a
  639 D1:B1B8 ED 52 -  -  	sbc hl, de
  640 D1:B1BA C8 -  -  -  	ret z
  641 D1:B1BB 19 -  -  -  	add hl, de
  642 D1:B1BC 1A -  -  -  	ld a, (de)
  643 D1:B1BD D6 30 -  -  	sub t0
  644 D1:B1BF DA 76 AF D1 	jp c, WrongSpriteDataError
  645 D1:B1C3 FE 11 -  -  	cp tA-t0
  646 D1:B1C5 38 0A -  -  	jr c, +_
  647 D1:B1C7 D6 11 -  -  	sub tA-t0
  648 D1:B1C9 FE 06 -  -  	cp tG-tA
  649 D1:B1CB D2 76 AF D1 	jp nc, WrongSpriteDataError
  650 D1:B1CF C6 0A -  -  	add a, 10
  651 D1:B1D1 87 -  -  -  _:	add a, a
  652 D1:B1D2 87 -  -  -  	add a, a
  653 D1:B1D3 87 -  -  -  	add a, a
  654 D1:B1D4 87 -  -  -  	add a, a
  655 D1:B1D5 DD 67 -  -  	ld ixh, a
  656 D1:B1D7 13 -  -  -  	inc de
  657 D1:B1D8 B7 -  -  -  	or a
  658 D1:B1D9 ED 52 -  -  	sbc hl, de
  659 D1:B1DB CA 36 AF D1 	jp z, ErrorSyntax
  660 D1:B1DF 19 -  -  -  	add hl, de
  661 D1:B1E0 1A -  -  -  	ld a, (de)
  662 D1:B1E1 D6 30 -  -  	sub t0
  663 D1:B1E3 DA 76 AF D1 	jp c, WrongSpriteDataError
  664 D1:B1E7 FE 11 -  -  	cp tA-t0
  665 D1:B1E9 38 0A -  -  	jr c, +_
  666 D1:B1EB D6 11 -  -  	sub tA-t0
  667 D1:B1ED FE 06 -  -  	cp tG-tA
  668 D1:B1EF D2 76 AF D1 	jp nc, WrongSpriteDataError
  669 D1:B1F3 C6 0A -  -  	add a, 10
  670 D1:B1F5 DD B4 -  -  _:	or a, ixh
  671 D1:B1F7 02 -  -  -  	ld (bc), a
  672 D1:B1F8 03 -  -  -  	inc bc
  673 D1:B1F9 13 -  -  -  	inc de
  674 D1:B1FA 18 BB -  -  	jr GetSpriteData
  675 D1:B1FC -  -  -  -  	
  676 D1:B1FC -  -  -  -  UpdateSpritePointers:
  677 D1:B1FC C5 -  -  -  	push bc
  678 D1:B1FD 2A 9A E9 D1 		ld hl, (programPtr)
  679 D1:B201 ED 5B 30 EA 
              D0 -  -  -  		ld de, (PrevProgramPtr)
  680 D1:B206 B7 -  -  -  		or a
  681 D1:B207 ED 52 -  -  		sbc hl, de
  682 D1:B209 EB -  -  -  		ex de, hl
  683 D1:B20A 01 F4 FF FF 		ld bc, -12
  684 D1:B20E 09 -  -  -  		add hl, bc
  685 D1:B20F E5 -  -  -  		push hl
  686 D1:B210 ED 27 -  -  			ld hl, (hl)
  687 D1:B212 19 -  -  -  			add hl, de
  688 D1:B213 EB -  -  -  			ex de, hl
  689 D1:B214 E1 -  -  -  		pop hl
  690 D1:B215 ED 1F -  -  		ld (hl), de
  691 D1:B217 C1 -  -  -  	pop bc
  692 D1:B218 C9 -  -  -  	ret
  693 D1:B219 -  -  -  -  	
  694 D1:B219 -  -  -  -  GetProgramName:
  695 D1:B219 E5 -  -  -  	push hl
  696 D1:B21A CD 28 10 02 		call _IncFetch
  697 D1:B21E E1 -  -  -  	pop hl
  698 D1:B21F DA 52 AF D1 	jp c, InvalidNameLength
  699 D1:B223 23 -  -  -  	inc hl
  700 D1:B224 FE 3F -  -  	cp tEnter
  701 D1:B226 CA 52 AF D1 	jp z, InvalidNameLength
  702 D1:B22A FE 41 -  -  	cp tA
  703 D1:B22C DA 4C AF D1 	jp c, InvalidTokenError
  704 D1:B230 FE 5C -  -  	cp ttheta+1
  705 D1:B232 D2 4C AF D1 	jp nc, InvalidTokenError
  706 D1:B236 77 -  -  -  	ld (hl), a
  707 D1:B237 1E 08 -  -  	ld e, 8
  708 D1:B239 -  -  -  -  GetProgramNameLoop:
  709 D1:B239 E5 -  -  -  	push hl
  710 D1:B23A CD 28 10 02 		call _IncFetch
  711 D1:B23E E1 -  -  -  	pop hl
  712 D1:B23F 23 -  -  -  	inc hl
  713 D1:B240 36 00 -  -  	ld (hl), 0
  714 D1:B242 D8 -  -  -  	ret c
  715 D1:B243 FE 3F -  -  	cp tEnter
  716 D1:B245 C8 -  -  -  	ret z
  717 D1:B246 FE 30 -  -  	cp t0
  718 D1:B248 DA 4C AF D1 _:	jp c, InvalidTokenError
  719 D1:B24C FE 3A -  -  	cp t9+1
  720 D1:B24E 38 0A -  -  	jr c, +_
  721 D1:B250 FE 41 -  -  	cp tA
  722 D1:B252 38 F4 -  -  	jr c, -_
  723 D1:B254 FE 5C -  -  	cp ttheta+1
  724 D1:B256 D2 4C AF D1 	jp nc, InvalidTokenError
  725 D1:B25A 77 -  -  -  _:	ld (hl), a
  726 D1:B25B 1D -  -  -  	dec e
  727 D1:B25C 20 DB -  -  	jr nz, GetProgramNameLoop
  728 D1:B25E C3 52 AF D1 	jp InvalidNameLength
Listing for file "ICE.asm"
  441 D1:B262 -  -  -  -  #include "parse.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
    1 D1:B262 -  -  -  -  ParseLine:
    2 D1:B262 CD 2C 10 02 	call _CurFetch
    3 D1:B266 FE 3F -  -  	cp tEnter
    4 D1:B268 C8 -  -  -  	ret z
    5 D1:B269 21 63 E8 D1 	ld hl, FunctionsSingle
    6 D1:B26D 01 10 00 00 	ld bc, FunctionsSingleEnd - FunctionsSingle
    7 D1:B271 ED B1 -  -  	cpir
    8 D1:B273 20 2F -  -  	jr nz, ParseExpression2
    9 D1:B275 FE 62 -  -  	cp tVarOut
   10 D1:B277 28 10 -  -  	jr z, +_
   11 D1:B279 FE 2C -  -  	cp tii
   12 D1:B27B 28 0C -  -  	jr z, +_
   13 D1:B27D FD CB D0 7E 	bit used_code, (iy+fProgram1)
   14 D1:B281 FD CB D0 FE 	set used_code, (iy+fProgram1)
   15 D1:B285 CC FC B1 D1 	call z, UpdateSpritePointers
   16 D1:B289 3A B4 E9 D1 _:	ld a, (openedParensF)
   17 D1:B28D B7 -  -  -  	or a
   18 D1:B28E C2 6A AF D1 	jp nz, FunctionError
   19 D1:B292 FD 77 B0 -  	ld (iy+fFunction1), a
   20 D1:B295 FD 77 AF -  	ld (iy+fFunction2), a
   21 D1:B298 06 03 -  -  	ld b, 3
   22 D1:B29A ED 4C -  -  	mlt bc
   23 D1:B29C 21 73 E8 D1 	ld hl, FunctionsSingleStart
   24 D1:B2A0 09 -  -  -  	add hl, bc
   25 D1:B2A1 ED 27 -  -  	ld hl, (hl)
   26 D1:B2A3 E9 -  -  -  	jp (hl)
   27 D1:B2A4 -  -  -  -  	
   28 D1:B2A4 -  -  -  -  ParseExpression2:
   29 D1:B2A4 FD CB D0 7E 	bit used_code, (iy+fProgram1)
   30 D1:B2A8 FD CB D0 FE 	set used_code, (iy+fProgram1)
   31 D1:B2AC CC FC B1 D1 	call z, UpdateSpritePointers
   32 D1:B2B0 -  -  -  -  ParseExpression:
   33 D1:B2B0 21 83 EA D0 	ld hl, stack
   34 D1:B2B4 22 94 E9 D1 	ld (stackPtr), hl
   35 D1:B2B8 21 6B EE D0 	ld hl, output
   36 D1:B2BC 22 97 E9 D1 	ld (outputPtr), hl
   37 D1:B2C0 AF -  -  -  	xor a
   38 D1:B2C1 32 B3 E9 D1 	ld (openedParensE), a
   39 D1:B2C5 FD 77 C0 -  	ld (iy+fExpression1), a
   40 D1:B2C8 FD 77 BF -  	ld (iy+fExpression2), a
   41 D1:B2CB FD 77 BE -  	ld (iy+fExpression3), a
   42 D1:B2CE CD 2C 10 02 	call _CurFetch
   43 D1:B2D2 -  -  -  -  MainLoopResCarryFlag:
   44 D1:B2D2 B7 -  -  -  	or a	
   45 D1:B2D3 -  -  -  -  MainLoop:
   46 D1:B2D3 32 1F EA D0 	ld (tempToken), a
   47 D1:B2D7 DA 66 B6 D1 	jp c, StopParsing
   48 D1:B2DB FE 30 -  -  	cp t0
   49 D1:B2DD 38 45 -  -  	jr c, NotANumber
   50 D1:B2DF FE 3A -  -  	cp t9+1
   51 D1:B2E1 30 41 -  -  	jr nc, NotANumber
   52 D1:B2E3 -  -  -  -  ANumber:
   53 D1:B2E3 -  -  -  -  #include "number.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\number.asm"
    1 D1:B2E3 2A 97 E9 D1 	ld hl, (outputPtr)
    2 D1:B2E7 FD CB C0 46 	bit prev_is_number, (iy+fExpression1)
    3 D1:B2EB FD CB C0 C6 	set prev_is_number, (iy+fExpression1)
    4 D1:B2EF 28 1A -  -  	jr z, AddNumberToStack
    5 D1:B2F1 -  -  -  -  ChangeLastNumberFromStack:
    6 D1:B2F1 2B -  -  -  	dec hl
    7 D1:B2F2 2B -  -  -  	dec hl
    8 D1:B2F3 2B -  -  -  	dec hl
    9 D1:B2F4 E5 -  -  -  	push hl
   10 D1:B2F5 ED 27 -  -  		ld hl, (hl)
   11 D1:B2F7 29 -  -  -  		add hl, hl											; HL * 10
   12 D1:B2F8 E5 -  -  -  		push hl
   13 D1:B2F9 D1 -  -  -  		pop de
   14 D1:B2FA 29 -  -  -  		add hl, hl
   15 D1:B2FB 29 -  -  -  		add hl, hl
   16 D1:B2FC 19 -  -  -  		add hl, de
   17 D1:B2FD D6 30 -  -  		sub a, t0											; HL + <number>
   18 D1:B2FF 11 00 00 00 		ld de, 0
   19 D1:B303 5F -  -  -  		ld e, a
   20 D1:B304 19 -  -  -  		add hl, de
   21 D1:B305 D1 -  -  -  	pop de
   22 D1:B306 EB -  -  -  	ex de, hl
   23 D1:B307 ED 1F -  -  	ld (hl), de
   24 D1:B309 18 13 -  -  	jr NumberStop
   25 D1:B30B -  -  -  -  AddNumberToStack:
   26 D1:B30B 36 00 -  -  	ld (hl), typeNumber
   27 D1:B30D 23 -  -  -  	inc hl
   28 D1:B30E D6 30 -  -  	sub a, t0												; new number
   29 D1:B310 -  -  -  -  InsertAndUpdatePointer
   30 D1:B310 11 00 00 00 	ld de, 0
   31 D1:B314 5F -  -  -  	ld e, a
   32 D1:B315 ED 1F -  -  	ld (hl), de
   33 D1:B317 -  -  -  -  UpdatePointer:
   34 D1:B317 23 -  -  -  	inc hl
   35 D1:B318 23 -  -  -  	inc hl
   36 D1:B319 23 -  -  -  	inc hl
   37 D1:B31A 22 97 E9 D1 	ld (outputPtr), hl
   38 D1:B31E -  -  -  -  NumberStop:
   39 D1:B31E CD 28 10 02 	call _IncFetch
   40 D1:B322 18 AF -  -  	jr MainLoop
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   54 D1:B324 -  -  -  -  
   55 D1:B324 -  -  -  -  NotANumber:
   56 D1:B324 FD CB C0 86 	res prev_is_number, (iy+fExpression1)
   57 D1:B328 FE 41 -  -  	cp tA
   58 D1:B32A 38 0F -  -  	jr c, NotAVariable
   59 D1:B32C FE 5C -  -  	cp ttheta+1
   60 D1:B32E 30 0B -  -  	jr nc, NotAVariable
   61 D1:B330 -  -  -  -  AVariable:
   62 D1:B330 2A 97 E9 D1 	ld hl, (outputPtr)
   63 D1:B334 36 01 -  -  	ld (hl), typeVariable
   64 D1:B336 23 -  -  -  	inc hl
   65 D1:B337 D6 41 -  -  	sub a, tA
   66 D1:B339 18 D5 -  -  	jr InsertAndUpdatePointer
   67 D1:B33B -  -  -  -  NotAVariable:
   68 D1:B33B 21 2B E8 D1 	ld hl, operators_booleans
   69 D1:B33F 01 0F 00 00 	ld bc, 15
   70 D1:B343 ED B1 -  -  	cpir
   71 D1:B345 20 75 -  -  	jr nz, NotABoolean
   72 D1:B347 -  -  -  -  ABoolean:
   73 D1:B347 -  -  -  -  #include "operator.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operator.asm"
    1 D1:B347 21 54 E9 D1 	ld hl, precedence
    2 D1:B34B 09 -  -  -  	add hl, bc
    3 D1:B34C 5E -  -  -  	ld e, (hl)										; e = precedence of current token
    4 D1:B34D FE 04 -  -  	cp tStore
    5 D1:B34F CC FF B7 D1 	call z, MoveStackEntryToOutput
    6 D1:B353 -  -  -  -  CheckOperator:
    7 D1:B353 2A 94 E9 D1 	ld hl, (stackPtr)
    8 D1:B357 01 83 EA D0 	ld bc, stack
    9 D1:B35B B7 -  -  -  	or a
   10 D1:B35C ED 42 -  -  	sbc hl, bc
   11 D1:B35E 28 41 -  -  	jr z, InsertBoolean
   12 D1:B360 09 -  -  -  	add hl, bc
   13 D1:B361 2B -  -  -  	dec hl
   14 D1:B362 2B -  -  -  	dec hl
   15 D1:B363 2B -  -  -  	dec hl
   16 D1:B364 2B -  -  -  	dec hl
   17 D1:B365 7E -  -  -  	ld a, (hl)
   18 D1:B366 FE 1F -  -  	cp typeOperator
   19 D1:B368 20 37 -  -  	jr nz, InsertBoolean
   20 D1:B36A 23 -  -  -  	inc hl
   21 D1:B36B 7E -  -  -  	ld a, (hl)
   22 D1:B36C 21 2B E8 D1 	ld hl, operators_booleans
   23 D1:B370 01 0F 00 00 	ld bc, 15
   24 D1:B374 ED B1 -  -  	cpir
   25 D1:B376 21 63 E9 D1 	ld hl, precedence2
   26 D1:B37A 09 -  -  -  	add hl, bc
   27 D1:B37B 7E -  -  -  	ld a, (hl)										; a = precedence of last token on stack
   28 D1:B37C BB -  -  -  	cp a, e											; if a <= e then move
   29 D1:B37D 38 22 -  -  	jr c, InsertBoolean
   30 D1:B37F -  -  -  -  MoveBooleanFromStackToOutput:
   31 D1:B37F 7B -  -  -  	ld a, e											; save for the precedence of current token
   32 D1:B380 ED 5B 97 E9 
              D1 -  -  -  	ld de, (outputPtr)
   33 D1:B385 2A 94 E9 D1 	ld hl, (stackPtr)
   34 D1:B389 2B -  -  -  	dec hl
   35 D1:B38A 2B -  -  -  	dec hl
   36 D1:B38B 2B -  -  -  	dec hl
   37 D1:B38C 2B -  -  -  	dec hl
   38 D1:B38D 22 94 E9 D1 	ld (stackPtr), hl
   39 D1:B391 ED A0 -  -  	ldi
   40 D1:B393 ED A0 -  -  	ldi
   41 D1:B395 ED A0 -  -  	ldi
   42 D1:B397 ED A0 -  -  	ldi
   43 D1:B399 ED 53 97 E9 
              D1 -  -  -  	ld (outputPtr), de
   44 D1:B39E 5F -  -  -  	ld e, a
   45 D1:B39F 18 B2 -  -  	jr CheckOperator
   46 D1:B3A1 -  -  -  -  InsertBoolean:
   47 D1:B3A1 2A 94 E9 D1 	ld hl, (stackPtr)
   48 D1:B3A5 36 1F -  -  	ld (hl), typeOperator
   49 D1:B3A7 23 -  -  -  	inc hl
   50 D1:B3A8 3A 1F EA D0 	ld a, (tempToken)
   51 D1:B3AC 77 -  -  -  	ld (hl), a
   52 D1:B3AD 23 -  -  -  	inc hl
   53 D1:B3AE 23 -  -  -  	inc hl
   54 D1:B3AF 23 -  -  -  	inc hl
   55 D1:B3B0 22 94 E9 D1 	ld (stackPtr), hl
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   74 D1:B3B4 -  -  -  -  
   75 D1:B3B4 -  -  -  -  ReturnToLoop:
   76 D1:B3B4 CD 28 10 02 	call _IncFetch
   77 D1:B3B8 C3 D3 B2 D1 	jp MainLoop
   78 D1:B3BC -  -  -  -  NotABoolean:
   79 D1:B3BC FE 2B -  -  	cp tComma
   80 D1:B3BE 28 06 -  -  	jr z, CloseArgument
   81 D1:B3C0 FE 11 -  -  	cp tRParen
   82 D1:B3C2 C2 55 B4 D1 	jp nz, NotACommaOrRParen
   83 D1:B3C6 -  -  -  -  CloseArgument:
   84 D1:B3C6 -  -  -  -  #include "closing.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\closing.asm"
    1 D1:B3C6 21 B3 E9 D1 	ld hl, openedParensE
    2 D1:B3CA 47 -  -  -  	ld b, a
    3 D1:B3CB 7E -  -  -  	ld a, (hl)
    4 D1:B3CC B7 -  -  -  	or a
    5 D1:B3CD 28 6D -  -  	jr z, MismatchedParens
    6 D1:B3CF 78 -  -  -  	ld a, b
    7 D1:B3D0 FE 2B -  -  	cp tComma
    8 D1:B3D2 28 01 -  -  	jr z, +_
    9 D1:B3D4 35 -  -  -  	dec (hl)
   10 D1:B3D5 2A 94 E9 D1 _:	ld hl, (stackPtr)
   11 D1:B3D9 01 83 EA D0 	ld bc, stack
   12 D1:B3DD B7 -  -  -  	or a
   13 D1:B3DE ED 42 -  -  	sbc hl, bc
   14 D1:B3E0 28 52 -  -  	jr z, StopMovingForArgument2
   15 D1:B3E2 09 -  -  -  	add hl, bc
   16 D1:B3E3 2B -  -  -  	dec hl
   17 D1:B3E4 2B -  -  -  	dec hl
   18 D1:B3E5 2B -  -  -  	dec hl
   19 D1:B3E6 2B -  -  -  	dec hl
   20 D1:B3E7 7E -  -  -  	ld a, (hl)
   21 D1:B3E8 FE 3F -  -  	cp typeFunction
   22 D1:B3EA 28 23 -  -  	jr z, StopMovingForArgument
   23 D1:B3EC FE 1F -  -  	cp typeOperator
   24 D1:B3EE 20 06 -  -  	jr nz, +_
   25 D1:B3F0 23 -  -  -  	inc hl
   26 D1:B3F1 7E -  -  -  	ld a, (hl)
   27 D1:B3F2 2B -  -  -  	dec hl
   28 D1:B3F3 B7 -  -  -  	or a
   29 D1:B3F4 28 19 -  -  	jr z, StopMovingForArgument
   30 D1:B3F6 22 94 E9 D1 _:	ld (stackPtr), hl
   31 D1:B3FA ED 5B 97 E9 
              D1 -  -  -  	ld de, (outputPtr)
   32 D1:B3FF ED A0 -  -  	ldi
   33 D1:B401 ED A0 -  -  	ldi
   34 D1:B403 ED A0 -  -  	ldi
   35 D1:B405 ED A0 -  -  	ldi
   36 D1:B407 ED 53 97 E9 
              D1 -  -  -  	ld (outputPtr), de
   37 D1:B40C 18 C7 -  -  	jr --_
   38 D1:B40E 09 -  -  -  _:	add hl, bc
   39 D1:B40F -  -  -  -  StopMovingForArgument:
   40 D1:B40F 3A 1F EA D0 	ld a, (tempToken)
   41 D1:B413 FE 2B -  -  	cp tComma
   42 D1:B415 28 1D -  -  	jr z, StopMovingForArgument2
   43 D1:B417 22 94 E9 D1 	ld (stackPtr), hl
   44 D1:B41B 23 -  -  -  	inc hl
   45 D1:B41C 7E -  -  -  	ld a, (hl)
   46 D1:B41D FE 10 -  -  	cp tLParen
   47 D1:B41F 28 13 -  -  	jr z, StopMovingForArgument2
   48 D1:B421 2B -  -  -  	dec hl
   49 D1:B422 ED 5B 97 E9 
              D1 -  -  -  	ld de, (outputPtr)
   50 D1:B427 ED A0 -  -  	ldi
   51 D1:B429 ED A0 -  -  	ldi
   52 D1:B42B ED A0 -  -  	ldi
   53 D1:B42D ED A0 -  -  	ldi
   54 D1:B42F ED 53 97 E9 
              D1 -  -  -  	ld (outputPtr), de
   55 D1:B434 -  -  -  -  StopMovingForArgument2:
   56 D1:B434 CD 28 10 02 	call _IncFetch
   57 D1:B438 C3 D3 B2 D1 	jp MainLoop
   58 D1:B43C -  -  -  -  MismatchedParens:
   59 D1:B43C 3A B4 E9 D1 	ld a, (openedParensF)
   60 D1:B440 B7 -  -  -  	or a
   61 D1:B441 CA 3C AF D1 	jp z, MismatchError
   62 D1:B445 3A 1F EA D0 	ld a, (tempToken)
   63 D1:B449 FE 2B -  -  	cp tComma
   64 D1:B44B 20 04 -  -  	jr nz, +_
   65 D1:B44D FD CB BE C6 	set triggered_a_comma, (iy+fExpression3)
   66 D1:B451 C3 66 B6 D1 _:	jp StopParsing
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   85 D1:B455 -  -  -  -  
   86 D1:B455 -  -  -  -  NotACommaOrRParen:
   87 D1:B455 FE 08 -  -  	cp tLBrace
   88 D1:B457 C2 E7 B4 D1 	jp nz, NotAList
   89 D1:B45B -  -  -  -  AList:
   90 D1:B45B -  -  -  -  #include "list.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\list.asm"
    1 D1:B45B 2A 97 E9 D1 	ld hl, (outputPtr)
    2 D1:B45F 36 05 -  -  	ld (hl), typeList
    3 D1:B461 23 -  -  -  	inc hl
    4 D1:B462 ED 5B AC E9 
              D1 -  -  -  	ld de, (tempListsPtr)
    5 D1:B467 ED 1F -  -  	ld (hl), de
    6 D1:B469 ED 53 C9 B4 
              D1 -  -  -  	ld (ListLengthSMC), de
    7 D1:B46E 23 -  -  -  	inc hl
    8 D1:B46F 23 -  -  -  	inc hl
    9 D1:B470 23 -  -  -  	inc hl
   10 D1:B471 22 97 E9 D1 	ld (outputPtr), hl
   11 D1:B475 EB -  -  -  	ex de, hl
   12 D1:B476 23 -  -  -  	inc hl
   13 D1:B477 23 -  -  -  	inc hl
   14 D1:B478 23 -  -  -  	inc hl
   15 D1:B479 22 AC E9 D1 	ld (tempListsPtr), hl
   16 D1:B47D -  -  -  -  ListStart:
   17 D1:B47D B7 -  -  -  	or a
   18 D1:B47E ED 62 -  -  	sbc hl, hl
   19 D1:B480 -  -  -  -  ListLoop:
   20 D1:B480 E5 -  -  -  	push hl
   21 D1:B481 CD 28 10 02 		call _IncFetch
   22 D1:B485 E1 -  -  -  	pop hl
   23 D1:B486 FE 30 -  -  	cp t0
   24 D1:B488 38 14 -  -  	jr c, ListNotNumber
   25 D1:B48A FE 3A -  -  	cp t9+1
   26 D1:B48C 30 10 -  -  	jr nc, ListNotNumber
   27 D1:B48E D6 30 -  -  	sub t0
   28 D1:B490 29 -  -  -  	add hl, hl
   29 D1:B491 E5 -  -  -  	push hl
   30 D1:B492 D1 -  -  -  	pop de
   31 D1:B493 29 -  -  -  	add hl, hl
   32 D1:B494 29 -  -  -  	add hl, hl
   33 D1:B495 19 -  -  -  	add hl, de
   34 D1:B496 11 00 00 00 	ld de, 0
   35 D1:B49A 5F -  -  -  	ld e, a
   36 D1:B49B 19 -  -  -  	add hl, de
   37 D1:B49C 18 E2 -  -  	jr ListLoop
   38 D1:B49E -  -  -  -  ListNotNumber:
   39 D1:B49E FE 2B -  -  	cp tComma
   40 D1:B4A0 20 10 -  -  	jr nz, ListNotNumberOrComma
   41 D1:B4A2 EB -  -  -  	ex de, hl
   42 D1:B4A3 2A AC E9 D1 	ld hl, (tempListsPtr)
   43 D1:B4A7 ED 1F -  -  	ld (hl), de
   44 D1:B4A9 23 -  -  -  	inc hl
   45 D1:B4AA 23 -  -  -  	inc hl
   46 D1:B4AB 23 -  -  -  	inc hl
   47 D1:B4AC 22 AC E9 D1 	ld (tempListsPtr), hl
   48 D1:B4B0 18 CB -  -  	jr ListStart
   49 D1:B4B2 -  -  -  -  ListNotNumberOrComma:
   50 D1:B4B2 FE 09 -  -  	cp tRBrace
   51 D1:B4B4 28 04 -  -  	jr z, ListStop
   52 D1:B4B6 FE 04 -  -  	cp tStore
   53 D1:B4B8 20 25 -  -  	jr nz, ListError
   54 D1:B4BA -  -  -  -  ListStop:
   55 D1:B4BA EB -  -  -  	ex de, hl
   56 D1:B4BB 2A AC E9 D1 	ld hl, (tempListsPtr)
   57 D1:B4BF ED 1F -  -  	ld (hl), de
   58 D1:B4C1 23 -  -  -  	inc hl
   59 D1:B4C2 23 -  -  -  	inc hl
   60 D1:B4C3 23 -  -  -  	inc hl
   61 D1:B4C4 22 AC E9 D1 	ld (tempListsPtr),  hl
   62 D1:B4C8 -  -  -  -  ListLengthSMC = $+1
   63 D1:B4C8 11 00 00 00 	ld de, 0
   64 D1:B4CC 2B -  -  -  	dec hl
   65 D1:B4CD 2B -  -  -  	dec hl
   66 D1:B4CE 2B -  -  -  	dec hl
   67 D1:B4CF B7 -  -  -  	or a
   68 D1:B4D0 ED 52 -  -  	sbc hl, de
   69 D1:B4D2 EB -  -  -  	ex de, hl
   70 D1:B4D3 ED 1F -  -  	ld (hl), de
   71 D1:B4D5 FE 04 -  -  	cp tStore
   72 D1:B4D7 C4 28 10 02 	call nz, _IncFetch
   73 D1:B4DB C3 D3 B2 D1 	jp MainLoop
   74 D1:B4DF -  -  -  -  ListError:
   75 D1:B4DF 21 87 EA D1 	ld hl, InvalidListArgumentMessage
   76 D1:B4E3 C3 92 AF D1 	jp DispFinalString
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   91 D1:B4E7 -  -  -  -  
   92 D1:B4E7 -  -  -  -  NotAList:
   93 D1:B4E7 FE 5D -  -  	cp tVarLst
   94 D1:B4E9 20 4E -  -  	jr nz, NotAnOSList
   95 D1:B4EB -  -  -  -  AnOSList:
   96 D1:B4EB CD 28 10 02 	call _IncFetch
   97 D1:B4EF FE 06 -  -  	cp 6
   98 D1:B4F1 D2 4C AF D1 	jp nc, InvalidTokenError
   99 D1:B4F5 4F -  -  -  	ld c, a
  100 D1:B4F6 06 03 -  -  	ld b, 3
  101 D1:B4F8 ED 4C -  -  	mlt bc
  102 D1:B4FA 21 72 E9 D1 	ld hl, lists
  103 D1:B4FE 09 -  -  -  	add hl, bc
  104 D1:B4FF ED 27 -  -  	ld hl, (hl)
  105 D1:B501 EB -  -  -  	ex de, hl
  106 D1:B502 2A 97 E9 D1 	ld hl, (outputPtr)
  107 D1:B506 36 06 -  -  	ld (hl), typeOSList
  108 D1:B508 23 -  -  -  	inc hl
  109 D1:B509 ED 1F -  -  	ld (hl), de
  110 D1:B50B 23 -  -  -  	inc hl
  111 D1:B50C 23 -  -  -  	inc hl
  112 D1:B50D 23 -  -  -  	inc hl
  113 D1:B50E 22 97 E9 D1 	ld (outputPtr), hl
  114 D1:B512 CD 28 10 02 	call _IncFetch
  115 D1:B516 FE 10 -  -  	cp tLParen
  116 D1:B518 C2 D2 B2 D1 	jp nz, MainLoopResCarryFlag
  117 D1:B51C 21 B3 E9 D1 	ld hl, openedParensE
  118 D1:B520 34 -  -  -  	inc (hl)
  119 D1:B521 2A 94 E9 D1 	ld hl, (stackPtr)
  120 D1:B525 36 1F -  -  	ld (hl), typeOperator
  121 D1:B527 23 -  -  -  	inc hl
  122 D1:B528 36 00 -  -  	ld (hl), 0
  123 D1:B52A 23 -  -  -  	inc hl
  124 D1:B52B 23 -  -  -  	inc hl
  125 D1:B52C 23 -  -  -  	inc hl
  126 D1:B52D 22 94 E9 D1 	ld (stackPtr), hl
  127 D1:B531 CD 28 10 02 	call _IncFetch
  128 D1:B535 C3 D3 B2 D1 	jp MainLoop
  129 D1:B539 -  -  -  -  NotAnOSList:
  130 D1:B539 FE 2A -  -  	cp tString
  131 D1:B53B 20 53 -  -  	jr nz, NotAString
  132 D1:B53D -  -  -  -  AString:
  133 D1:B53D 2A 97 E9 D1 	ld hl, (outputPtr)
  134 D1:B541 36 07 -  -  	ld (hl), typeString
  135 D1:B543 23 -  -  -  	inc hl
  136 D1:B544 ED 5B A9 E9 
              D1 -  -  -  	ld de, (tempStringsPtr)
  137 D1:B549 ED 1F -  -  	ld (hl), de
  138 D1:B54B 23 -  -  -  	inc hl
  139 D1:B54C 23 -  -  -  	inc hl
  140 D1:B54D 23 -  -  -  	inc hl
  141 D1:B54E 22 97 E9 D1 	ld (outputPtr), hl
  142 D1:B552 -  -  -  -  StringLoop:
  143 D1:B552 CD 28 10 02 	call _IncFetch
  144 D1:B556 38 2C -  -  	jr c, StringStop2
  145 D1:B558 FE 3F -  -  	cp tEnter
  146 D1:B55A 28 28 -  -  	jr z, StringStop2
  147 D1:B55C FE 2A -  -  	cp tString
  148 D1:B55E 28 1E -  -  	jr z, StringStop
  149 D1:B560 FE 04 -  -  	cp tStore
  150 D1:B562 28 1A -  -  	jr z, StringStop
  151 D1:B564 CD AC 04 02 	call _IsA2ByteTok
  152 D1:B568 20 06 -  -  	jr nz, +_
  153 D1:B56A 23 -  -  -  	inc hl
  154 D1:B56B 22 1A 23 D0 	ld (curPC), hl
  155 D1:B56F 2B -  -  -  	dec hl
  156 D1:B570 D5 -  -  -  _:	push de
  157 D1:B571 CD 70 08 02 		call _Get_Tok_Strng
  158 D1:B575 D1 -  -  -  	pop de
  159 D1:B576 21 0E 06 D0 	ld hl, OP3
  160 D1:B57A ED B0 -  -  	ldir
  161 D1:B57C 18 D4 -  -  	jr StringLoop
  162 D1:B57E -  -  -  -  StringStop:
  163 D1:B57E FE 3F -  -  	cp tEnter
  164 D1:B580 C4 28 10 02 	call nz, _IncFetch
  165 D1:B584 -  -  -  -  StringStop2:
  166 D1:B584 EB -  -  -  	ex de, hl
  167 D1:B585 36 00 -  -  	ld (hl), 0
  168 D1:B587 23 -  -  -  	inc hl
  169 D1:B588 22 A9 E9 D1 	ld (tempStringsPtr), hl
  170 D1:B58C C3 D3 B2 D1 	jp MainLoop
  171 D1:B590 -  -  -  -  NotAString:
  172 D1:B590 FE 3F -  -  	cp tEnter
  173 D1:B592 CA 66 B6 D1 	jp z, StopParsing
  174 D1:B596 21 48 E8 D1 	ld hl, FunctionsWithReturnValue
  175 D1:B59A 01 09 00 00 	ld bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValue
  176 D1:B59E ED B1 -  -  	cpir
  177 D1:B5A0 C2 4C AF D1 	jp nz, InvalidTokenError
  178 D1:B5A4 FE AD -  -  	cp tGetKey
  179 D1:B5A6 28 0A -  -  	jr z, AddFunctionToOutput
  180 D1:B5A8 FE 0D -  -  	cp tSqr
  181 D1:B5AA 28 06 -  -  	jr z, AddFunctionToOutput
  182 D1:B5AC FE AB -  -  	cp trand
  183 D1:B5AE C2 40 B6 D1 	jp nz, AddFunctionToStack
  184 D1:B5B2 -  -  -  -  AddFunctionToOutput:
  185 D1:B5B2 2A 97 E9 D1 	ld hl, (outputPtr)
  186 D1:B5B6 1E 04 -  -  	ld e, typeReturnValue
  187 D1:B5B8 FE 0D -  -  	cp tSqr
  188 D1:B5BA 20 02 -  -  	jr nz, +_
  189 D1:B5BC 1E 3F -  -  	ld e, typeFunction
  190 D1:B5BE 73 -  -  -  _:	ld (hl), e
  191 D1:B5BF 23 -  -  -  	inc hl
  192 D1:B5C0 77 -  -  -  	ld (hl), a
  193 D1:B5C1 23 -  -  -  	inc hl
  194 D1:B5C2 23 -  -  -  	inc hl
  195 D1:B5C3 23 -  -  -  	inc hl
  196 D1:B5C4 22 97 E9 D1 	ld (outputPtr), hl
  197 D1:B5C8 FE AD -  -  	cp tGetKey
  198 D1:B5CA C2 B4 B3 D1 	jp nz, ReturnToLoop
  199 D1:B5CE CD 28 10 02 	call _IncFetch
  200 D1:B5D2 DA D3 B2 D1 	jp c, MainLoop
  201 D1:B5D6 FE 10 -  -  	cp tLParen
  202 D1:B5D8 C2 D2 B2 D1 	jp nz, MainLoopResCarryFlag
  203 D1:B5DC CD 28 10 02 	call _IncFetch
  204 D1:B5E0 DA 36 AF D1 _:	jp c, ErrorSyntax
  205 D1:B5E4 FE 3F -  -  	cp tEnter
  206 D1:B5E6 CA 36 AF D1 	jp z, ErrorSyntax
  207 D1:B5EA D6 30 -  -  	sub t0
  208 D1:B5EC 38 F2 -  -  	jr c, -_
  209 D1:B5EE FE 0A -  -  	cp t9-t0+1
  210 D1:B5F0 D2 36 AF D1 _:	jp nc, ErrorSyntax
  211 D1:B5F4 11 00 00 00 	ld de, 0
  212 D1:B5F8 5F -  -  -  	ld e, a
  213 D1:B5F9 CD 28 10 02 	call _IncFetch
  214 D1:B5FD 38 35 -  -  	jr c, AddGetKeyDirect
  215 D1:B5FF FE 3F -  -  	cp tEnter
  216 D1:B601 28 31 -  -  	jr z, AddGetKeyDirect
  217 D1:B603 FE 11 -  -  	cp tRParen
  218 D1:B605 28 29 -  -  	jr z, +_
  219 D1:B607 FE 04 -  -  	cp tStore
  220 D1:B609 28 29 -  -  	jr z, AddGetKeyDirect
  221 D1:B60B D6 30 -  -  	sub t0
  222 D1:B60D 38 D1 -  -  	jr c, --_
  223 D1:B60F FE 0A -  -  	cp t9-t0+1
  224 D1:B611 30 DD -  -  	jr nc, -_
  225 D1:B613 D5 -  -  -  	push de
  226 D1:B614 E1 -  -  -  	pop hl
  227 D1:B615 29 -  -  -  	add hl, hl
  228 D1:B616 29 -  -  -  	add hl, hl
  229 D1:B617 19 -  -  -  	add hl, de
  230 D1:B618 29 -  -  -  	add hl, hl
  231 D1:B619 5F -  -  -  	ld e, a
  232 D1:B61A 19 -  -  -  	add hl, de
  233 D1:B61B EB -  -  -  	ex de, hl
  234 D1:B61C CD 28 10 02 	call _IncFetch
  235 D1:B620 38 12 -  -  	jr c, AddGetKeyDirect
  236 D1:B622 FE 3F -  -  	cp tEnter
  237 D1:B624 28 0E -  -  	jr z, AddGetKeyDirect
  238 D1:B626 FE 04 -  -  	cp tStore
  239 D1:B628 28 0A -  -  	jr z, AddGetKeyDirect
  240 D1:B62A FE 11 -  -  	cp tRParen
  241 D1:B62C C2 36 AF D1 	jp nz, ErrorSyntax
  242 D1:B630 CD 28 10 02 _:	call _IncFetch
  243 D1:B634 -  -  -  -  AddGetKeyDirect:
  244 D1:B634 2A 97 E9 D1 	ld hl, (outputPtr)
  245 D1:B638 2B -  -  -  	dec hl
  246 D1:B639 2B -  -  -  	dec hl
  247 D1:B63A 2B -  -  -  	dec hl
  248 D1:B63B 73 -  -  -  	ld (hl), e
  249 D1:B63C C3 D3 B2 D1 	jp MainLoop
  250 D1:B640 -  -  -  -  AddFunctionToStack:
  251 D1:B640 21 B3 E9 D1 	ld hl, openedParensE
  252 D1:B644 34 -  -  -  	inc (hl)
  253 D1:B645 CD AC 04 02 	call _IsA2ByteTok
  254 D1:B649 CC 28 10 02 	call z, _IncFetch
  255 D1:B64D 47 -  -  -  	ld b, a
  256 D1:B64E 2A 94 E9 D1 	ld hl, (stackPtr)
  257 D1:B652 3A 1F EA D0 	ld a, (tempToken)
  258 D1:B656 36 3F -  -  	ld (hl), typeFunction
  259 D1:B658 23 -  -  -  	inc hl
  260 D1:B659 77 -  -  -  	ld (hl), a
  261 D1:B65A 23 -  -  -  	inc hl
  262 D1:B65B 70 -  -  -  	ld (hl), b
  263 D1:B65C 23 -  -  -  	inc hl
  264 D1:B65D 23 -  -  -  	inc hl
  265 D1:B65E 22 94 E9 D1 	ld (stackPtr), hl
  266 D1:B662 C3 B4 B3 D1 	jp ReturnToLoop
  267 D1:B666 -  -  -  -  StopParsing:																; move stack to output
  268 D1:B666 CD FF B7 D1 	call MoveStackEntryToOutput
  269 D1:B66A 2A 97 E9 D1 	ld hl, (outputPtr)
  270 D1:B66E 11 6B EE D0 	ld de, output
  271 D1:B672 B7 -  -  -  	or a
  272 D1:B673 ED 52 -  -  	sbc hl, de
  273 D1:B675 E5 -  -  -  	push hl
  274 D1:B676 C1 -  -  -  	pop bc																	; BC / 4 is amount of elements in the stack
  275 D1:B677 D5 -  -  -  	push de
  276 D1:B678 E1 -  -  -  	pop hl
  277 D1:B679 3E 01 -  -  	ld a, OutputIsInHL
  278 D1:B67B 32 BA E9 D1 	ld (ExprOutput), a
  279 D1:B67F 32 BB E9 D1 	ld (ExprOutput2), a
  280 D1:B683 78 -  -  -  	ld a, b
  281 D1:B684 B1 -  -  -  	or a, c
  282 D1:B685 FE 04 -  -  	cp 4
  283 D1:B687 D8 -  -  -  	ret c
  284 D1:B688 CA 97 B7 D1 	jp z, ParseSingleArgument
  285 D1:B68C -  -  -  -  Loop:
  286 D1:B68C AF -  -  -  	xor a
  287 D1:B68D FD 77 C0 -  	ld (iy+fExpression1), a
  288 D1:B690 FD 77 BF -  	ld (iy+fExpression2), a
  289 D1:B693 ED 42 -  -  	sbc hl, bc
  290 D1:B695 11 6B EE D0 	ld de, output
  291 D1:B699 ED 52 -  -  	sbc hl, de
  292 D1:B69B CA 36 AF D1 	jp z, ErrorSyntax
  293 D1:B69F 19 -  -  -  	add hl, de
  294 D1:B6A0 09 -  -  -  	add hl, bc
  295 D1:B6A1 E5 -  -  -  	push hl
  296 D1:B6A2 21 0C 00 00 		ld hl, 12
  297 D1:B6A6 B7 -  -  -  		or a
  298 D1:B6A7 ED 42 -  -  		sbc hl, bc
  299 D1:B6A9 20 04 -  -  		jr nz, +_
  300 D1:B6AB FD CB C0 DE 		set op_is_last_one, (iy+fExpression1)
  301 D1:B6AF E1 -  -  -  _:	pop hl
  302 D1:B6B0 78 -  -  -  	ld a, b
  303 D1:B6B1 B1 -  -  -  	or a, c
  304 D1:B6B2 FE 04 -  -  	cp 4
  305 D1:B6B4 CA 8D B7 D1 	jp z, StopParseExpression
  306 D1:B6B8 7E -  -  -  	ld a, (hl)
  307 D1:B6B9 FE 1F -  -  	cp typeOperator
  308 D1:B6BB 28 5B -  -  	jr z, ExpressOperator
  309 D1:B6BD FE 3F -  -  	cp typeFunction
  310 D1:B6BF 28 06 -  -  	jr z, ExpressFunction
  311 D1:B6C1 23 -  -  -  	inc hl
  312 D1:B6C2 23 -  -  -  	inc hl
  313 D1:B6C3 23 -  -  -  	inc hl
  314 D1:B6C4 23 -  -  -  	inc hl
  315 D1:B6C5 18 C5 -  -  	jr Loop
  316 D1:B6C7 -  -  -  -  ExpressFunction:
  317 D1:B6C7 23 -  -  -  	inc hl																	; function = a
  318 D1:B6C8 7E -  -  -  	ld a, (hl)
  319 D1:B6C9 2B -  -  -  	dec hl
  320 D1:B6CA C5 -  -  -  	push bc
  321 D1:B6CB E5 -  -  -  		push hl
  322 D1:B6CC CD 4F C5 D1 			call ExecuteFunction
  323 D1:B6D0 D1 -  -  -  		pop de
  324 D1:B6D1 D5 -  -  -  		push de
  325 D1:B6D2 E1 -  -  -  		pop hl
  326 D1:B6D3 23 -  -  -  		inc hl
  327 D1:B6D4 23 -  -  -  		inc hl
  328 D1:B6D5 23 -  -  -  		inc hl
  329 D1:B6D6 23 -  -  -  		inc hl
  330 D1:B6D7 3A B5 E9 D1 		ld a, (amountOfArguments)
  331 D1:B6DB 3D -  -  -  		dec a
  332 D1:B6DC 28 07 -  -  		jr z, ++_
  333 D1:B6DE 47 -  -  -  		ld b, a
  334 D1:B6DF 1B -  -  -  _:		dec de
  335 D1:B6E0 1B -  -  -  		dec de
  336 D1:B6E1 1B -  -  -  		dec de
  337 D1:B6E2 1B -  -  -  		dec de
  338 D1:B6E3 10 FA -  -  		djnz -_
  339 D1:B6E5 C1 -  -  -  _:	pop bc
  340 D1:B6E6 D5 -  -  -  	push de
  341 D1:B6E7 C5 -  -  -  		push bc
  342 D1:B6E8 E5 -  -  -  			push hl
  343 D1:B6E9 ED B0 -  -  				ldir
  344 D1:B6EB E1 -  -  -  			pop hl
  345 D1:B6EC C1 -  -  -  		pop bc
  346 D1:B6ED D1 -  -  -  	pop de
  347 D1:B6EE EB -  -  -  	ex de, hl
  348 D1:B6EF 09 -  -  -  	add hl, bc
  349 D1:B6F0 B7 -  -  -  	or a
  350 D1:B6F1 ED 52 -  -  	sbc hl, de
  351 D1:B6F3 E5 -  -  -  	push hl
  352 D1:B6F4 C1 -  -  -  	pop bc																	; BC = BC+DE-HL
  353 D1:B6F5 78 -  -  -  	ld a, b
  354 D1:B6F6 B1 -  -  -  	or c
  355 D1:B6F7 FE 04 -  -  	cp 4
  356 D1:B6F9 20 0F -  -  	jr nz, +_
  357 D1:B6FB FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  358 D1:B6FF CA 8D B7 D1 	jp z, StopParseExpression
  359 D1:B703 DD 27 FD -  	ld hl, (ix-3)
  360 D1:B706 C3 A2 B7 D1 	jp ParseSingleArgument2
  361 D1:B70A EB -  -  -  _:	ex de, hl
  362 D1:B70B 3A B5 E9 D1 	ld a, (amountOfArguments)
  363 D1:B70F 47 -  -  -  	ld b, a
  364 D1:B710 2B -  -  -  _:	dec hl
  365 D1:B711 2B -  -  -  	dec hl
  366 D1:B712 2B -  -  -  	dec hl
  367 D1:B713 2B -  -  -  	dec hl
  368 D1:B714 10 FA -  -  	djnz -_
  369 D1:B716 18 4E -  -  	jr AddChain
  370 D1:B718 -  -  -  -  ExpressOperator:
  371 D1:B718 23 -  -  -  	inc hl
  372 D1:B719 7E -  -  -  	ld a, (hl)
  373 D1:B71A 2B -  -  -  	dec hl
  374 D1:B71B C5 -  -  -  	push bc
  375 D1:B71C E5 -  -  -  		push hl
  376 D1:B71D DD E1 -  -  		pop ix
  377 D1:B71F DD 17 FD -  		ld de, (ix-3)
  378 D1:B722 DD 07 F9 -  		ld bc, (ix-7)
  379 D1:B725 CD C7 D1 D1 		call ExecuteOperator
  380 D1:B729 3A BB E9 D1 		ld a, (ExprOutput2)
  381 D1:B72D 32 BA E9 D1 		ld (ExprOutput), a
  382 D1:B731 ED 12 FC -  		lea de, ix-4
  383 D1:B734 C1 -  -  -  	pop bc
  384 D1:B735 21 08 00 00 	ld hl, 8
  385 D1:B739 19 -  -  -  	add hl, de
  386 D1:B73A D5 -  -  -  	push de
  387 D1:B73B C5 -  -  -  		push bc
  388 D1:B73C ED B0 -  -  			ldir
  389 D1:B73E C1 -  -  -  		pop bc
  390 D1:B73F 21 F4 FF FF 		ld hl, -12
  391 D1:B743 09 -  -  -  		add hl, bc
  392 D1:B744 19 -  -  -  		add hl, de
  393 D1:B745 B7 -  -  -  		or a
  394 D1:B746 ED 52 -  -  		sbc hl, de
  395 D1:B748 E5 -  -  -  		push hl
  396 D1:B749 C1 -  -  -  		pop bc
  397 D1:B74A E1 -  -  -  	pop hl
  398 D1:B74B 20 0D -  -  	jr nz, +_
  399 D1:B74D FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  400 D1:B751 CA 8D B7 D1 	jp z, StopParseExpression
  401 D1:B755 DD 27 F9 -  	ld hl, (ix-7)
  402 D1:B758 18 48 -  -  	jr ParseSingleArgument2
  403 D1:B75A 03 -  -  -  _:	inc bc
  404 D1:B75B 03 -  -  -  	inc bc
  405 D1:B75C 03 -  -  -  	inc bc
  406 D1:B75D 03 -  -  -  	inc bc
  407 D1:B75E FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  408 D1:B762 C2 8C B6 D1 	jp nz, Loop
  409 D1:B766 -  -  -  -  AddChain:
  410 D1:B766 1E 03 -  -  	ld e, typeChainAns
  411 D1:B768 7E -  -  -  	ld a, (hl)
  412 D1:B769 FE 1F -  -  	cp typeOperator
  413 D1:B76B 30 15 -  -  	jr nc, ChainAns2
  414 D1:B76D 23 -  -  -  	inc hl
  415 D1:B76E 23 -  -  -  	inc hl
  416 D1:B76F 23 -  -  -  	inc hl
  417 D1:B770 23 -  -  -  	inc hl
  418 D1:B771 B6 -  -  -  	or a, (hl)
  419 D1:B772 2B -  -  -  	dec hl
  420 D1:B773 2B -  -  -  	dec hl
  421 D1:B774 2B -  -  -  	dec hl
  422 D1:B775 2B -  -  -  	dec hl
  423 D1:B776 FE 1F -  -  	cp typeOperator
  424 D1:B778 28 08 -  -  	jr z, ChainAns2
  425 D1:B77A -  -  -  -  ChainPush2:
  426 D1:B77A E5 -  -  -  	push hl
  427 D1:B77B CD F8 AC D1 		call InsertPushHLDE
  428 D1:B77F E1 -  -  -  	pop hl
  429 D1:B780 1E 02 -  -  	ld e, typeChainPush
  430 D1:B782 -  -  -  -  ChainAns2:
  431 D1:B782 E5 -  -  -  	push hl
  432 D1:B783 2B -  -  -  		dec hl
  433 D1:B784 2B -  -  -  		dec hl
  434 D1:B785 2B -  -  -  		dec hl
  435 D1:B786 2B -  -  -  		dec hl
  436 D1:B787 73 -  -  -  		ld (hl), e
  437 D1:B788 E1 -  -  -  	pop hl
  438 D1:B789 C3 8C B6 D1 	jp Loop
  439 D1:B78D -  -  -  -  	
  440 D1:B78D -  -  -  -  StopParseExpression:
  441 D1:B78D 3A B4 E9 D1 	ld a, (openedParensF)
  442 D1:B791 B7 -  -  -  	or a
  443 D1:B792 C2 B6 AC D1 	jp nz, MaybeChangeDEToHL
  444 D1:B796 C9 -  -  -  	ret
  445 D1:B797 -  -  -  -  	
  446 D1:B797 -  -  -  -  ParseSingleArgument:
  447 D1:B797 7E -  -  -  	ld a, (hl)
  448 D1:B798 B7 -  -  -  	or a
  449 D1:B799 20 0D -  -  	jr nz, ParseSingleNotNumber
  450 D1:B79B FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  451 D1:B79F 23 -  -  -  	inc hl
  452 D1:B7A0 ED 27 -  -  	ld hl, (hl)
  453 D1:B7A2 -  -  -  -  ParseSingleArgument2:
  454 D1:B7A2 3E 21 -  -  	ld a, 021h
  455 D1:B7A4 C3 48 AC D1 	jp InsertAHL															; ld hl, *
  456 D1:B7A8 -  -  -  -  ParseSingleNotNumber:
  457 D1:B7A8 3D -  -  -  	dec a
  458 D1:B7A9 20 06 -  -  	jr nz, ParseSingleNotVariable
  459 D1:B7AB 23 -  -  -  	inc hl
  460 D1:B7AC 4E -  -  -  	ld c, (hl)
  461 D1:B7AD C3 61 AC D1 	jp InsertHIXC
  462 D1:B7B1 -  -  -  -  ParseSingleNotVariable:
  463 D1:B7B1 D6 03 -  -  	sub a, 3
  464 D1:B7B3 20 0C -  -  	jr nz, ParseSingleNotFunction
  465 D1:B7B5 23 -  -  -  	inc hl
  466 D1:B7B6 7E -  -  -  	ld a, (hl)
  467 D1:B7B7 06 02 -  -  	ld b, OutputInHL
  468 D1:B7B9 FD CB C0 B6 	res need_push, (iy+fExpression1)
  469 D1:B7BD C3 36 AD D1 	jp GetFunction
  470 D1:B7C1 -  -  -  -  ParseSingleNotFunction:
  471 D1:B7C1 D6 03 -  -  	sub a, 3
  472 D1:B7C3 C2 36 AF D1 	jp nz, ErrorSyntax
  473 D1:B7C7 FD CB C0 FE 	set output_is_string, (iy+fExpression1)
  474 D1:B7CB E5 -  -  -  	push hl
  475 D1:B7CC 3E 21 -  -  		ld a, 021h
  476 D1:B7CE CD 0A AD D1 		call InsertA														; ld hl, *
  477 D1:B7D2 CD 21 AD D1 		call InsertProgramPtrToDataOffset
  478 D1:B7D6 2A AF E9 D1 		ld hl, (programDataDataPtr)
  479 D1:B7DA CD 4C AC D1 		call InsertHL														; ld hl, XXXXXXX
  480 D1:B7DE E1 -  -  -  	pop hl
  481 D1:B7DF 23 -  -  -  	inc hl
  482 D1:B7E0 ED 17 -  -  	ld de, (hl)																; hl points to string in string stack
  483 D1:B7E2 ED 27 -  -  	ld hl, (hl)
  484 D1:B7E4 01 FF FF FF 	ld bc, -1
  485 D1:B7E8 AF -  -  -  	xor a
  486 D1:B7E9 ED B1 -  -  	cpir
  487 D1:B7EB ED 52 -  -  	sbc hl, de
  488 D1:B7ED E5 -  -  -  	push hl
  489 D1:B7EE C1 -  -  -  	pop bc																	; bc = length of string
  490 D1:B7EF EB -  -  -  	ex de, hl
  491 D1:B7F0 ED 5B AF E9 
              D1 -  -  -  	ld de, (programDataDataPtr)
  492 D1:B7F5 D5 -  -  -  	push de
  493 D1:B7F6 ED B0 -  -  		ldir
  494 D1:B7F8 ED 53 AF E9 
              D1 -  -  -  		ld (programDataDataPtr), de
  495 D1:B7FD E1 -  -  -  	pop hl
  496 D1:B7FE C9 -  -  -  	ret
  497 D1:B7FF -  -  -  -  	
  498 D1:B7FF -  -  -  -  MoveStackEntryToOutput:
  499 D1:B7FF 2A 94 E9 D1 	ld hl, (stackPtr)
  500 D1:B803 11 83 EA D0 	ld de, stack
  501 D1:B807 B7 -  -  -  	or a
  502 D1:B808 ED 52 -  -  	sbc hl, de
  503 D1:B80A C8 -  -  -  	ret z
  504 D1:B80B 19 -  -  -  	add hl, de
  505 D1:B80C 2B -  -  -  	dec hl
  506 D1:B80D 2B -  -  -  	dec hl
  507 D1:B80E 2B -  -  -  	dec hl
  508 D1:B80F 2B -  -  -  	dec hl
  509 D1:B810 22 94 E9 D1 	ld (stackPtr), hl
  510 D1:B814 ED 5B 97 E9 
              D1 -  -  -  	ld de, (outputPtr)
  511 D1:B819 7E -  -  -  	ld a, (hl)
  512 D1:B81A FE 3F -  -  	cp typeFunction
  513 D1:B81C 20 07 -  -  	jr nz, +_
  514 D1:B81E 23 -  -  -  	inc hl
  515 D1:B81F 7E -  -  -  	ld a, (hl)
  516 D1:B820 2B -  -  -  	dec hl
  517 D1:B821 FE 10 -  -  	cp tLParen
  518 D1:B823 28 DA -  -  	jr z, MoveStackEntryToOutput
  519 D1:B825 ED A0 -  -  _:	ldi
  520 D1:B827 ED A0 -  -  	ldi
  521 D1:B829 ED A0 -  -  	ldi
  522 D1:B82B ED A0 -  -  	ldi
  523 D1:B82D ED 53 97 E9 
              D1 -  -  -  	ld (outputPtr), de
  524 D1:B832 18 CB -  -  	jr MoveStackEntryToOutput
Listing for file "ICE.asm"
  442 D1:B834 -  -  -  -  #include "putchar.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\putchar.asm"
    1 D1:B834 -  -  -  -  _PrintChar_ASM:
    2 D1:B834 E5 -  -  -  	push hl
    3 D1:B835 -  -  -  -  TextXPos_ASM = $+1
    4 D1:B835 01 00 00 00 		ld	bc, 0
    5 D1:B839 F5 -  -  -  		push af
    6 D1:B83A F5 -  -  -  			push af
    7 D1:B83B C5 -  -  -  				push bc
    8 D1:B83C B7 -  -  -  					or	a,a
    9 D1:B83D ED 62 -  -  					sbc	hl,hl
   10 D1:B83F 6F -  -  -  					ld	l,a
   11 D1:B840 11 A2 B8 D1 					ld	de, DefaultCharSpacing_ASM
   12 D1:B844 19 -  -  -  					add	hl,de
   13 D1:B845 7E -  -  -  					ld	a,(hl)
   14 D1:B846 32 89 B8 D1 					ld	(charwidth),a
   15 D1:B84A B7 -  -  -  					or	a,a
   16 D1:B84B ED 62 -  -  					sbc	hl,hl
   17 D1:B84D 6F -  -  -  					ld	l,a
   18 D1:B84E ED 44 -  -  					neg
   19 D1:B850 32 5A B8 D1 					ld	(CharWidthDelta_ASM),a
   20 D1:B854 09 -  -  -  					add	hl,bc
   21 D1:B855 22 36 B8 D1 					ld	(TextXPos_ASM),hl
   22 D1:B859 -  -  -  -  CharWidthDelta_ASM =$+1
   23 D1:B859 11 FF FF FF 					ld	de,$FFFFFF
   24 D1:B85D 21 40 01 00 					ld	hl,lcdWidth
   25 D1:B861 19 -  -  -  					add	hl,de
   26 D1:B862 22 96 B8 D1 					ld	(line_change),hl
   27 D1:B866 -  -  -  -  TextYPos_ASM = $+1
   28 D1:B866 2E 00 -  -  					ld	l,0
   29 D1:B868 26 A0 -  -  					ld	h,160
   30 D1:B86A ED 6C -  -  					mlt	hl
   31 D1:B86C 29 -  -  -  					add	hl,hl
   32 D1:B86D 11 00 00 D4 					ld	de,vRAM
   33 D1:B871 19 -  -  -  					add	hl,de
   34 D1:B872 D1 -  -  -  				pop	de
   35 D1:B873 19 -  -  -  				add	hl,de
   36 D1:B874 F1 -  -  -  			pop	af
   37 D1:B875 EB -  -  -  			ex	de,hl
   38 D1:B876 B7 -  -  -  			or	a,a
   39 D1:B877 ED 62 -  -  			sbc	hl,hl
   40 D1:B879 D6 17 -  -  			sub a, 23
   41 D1:B87B 6F -  -  -  			ld	l,a
   42 D1:B87C 29 -  -  -  			add	hl,hl
   43 D1:B87D 29 -  -  -  			add	hl,hl
   44 D1:B87E 29 -  -  -  			add	hl,hl
   45 D1:B87F 01 1D B9 D1 			ld	bc, DefaultTextData_ASM
   46 D1:B883 09 -  -  -  			add	hl,bc
   47 D1:B884 06 08 -  -  			ld	b,8
   48 D1:B886 C5 -  -  -  iloop:		push bc
   49 D1:B887 4E -  -  -  				ld c,(hl)
   50 D1:B888 -  -  -  -  charwidth =$+1
   51 D1:B888 06 00 -  -  				ld b,0
   52 D1:B88A EB -  -  -  				ex de,hl
   53 D1:B88B -  -  -  -  color = $+1
   54 D1:B88B 3E 00 -  -  				ld a, 0
   55 D1:B88D CB 21 -  -  cloop:			sla	c
   56 D1:B88F 30 01 -  -  				jr nc,+_
   57 D1:B891 77 -  -  -  				ld (hl), a
   58 D1:B892 23 -  -  -  _:				inc	hl
   59 D1:B893 10 F8 -  -  				djnz cloop
   60 D1:B895 -  -  -  -  line_change =$+1
   61 D1:B895 01 00 00 00 				ld bc,0
   62 D1:B899 09 -  -  -  				add	hl,bc
   63 D1:B89A EB -  -  -  				ex de,hl
   64 D1:B89B 23 -  -  -  				inc	hl
   65 D1:B89C C1 -  -  -  			pop	bc
   66 D1:B89D 10 E7 -  -  			djnz iloop
   67 D1:B89F F1 -  -  -  		pop	af
   68 D1:B8A0 E1 -  -  -  	pop	hl
   69 D1:B8A1 C9 -  -  -  	ret
   70 D1:B8A2 -  -  -  -  
   71 D1:B8A2 -  -  -  -  DefaultCharSpacing_ASM:
   72 D1:B8A2 -  -  -  -  	;   0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
   73 D1:B8A2 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 02 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8	; 0
   74 D1:B8B2 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	; 1
   75 D1:B8C2 03 04 06 08 
              08 08 08 05 
              05 05 08 07 
              04 07 03 08 	.db 3,4,6,8,8,8,8,5,5,5,8,7,4,7,3,8	; 2
   76 D1:B8D2 08 07 08 08 
              08 08 08 08 
              08 08 03 04 
              06 07 06 07 	.db 8,7,8,8,8,8,8,8,8,8,3,4,6,7,6,7	; 3
   77 D1:B8E2 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	; 4
   78 D1:B8F2 08 08 08 08 
              08 08 08 08 
              08 08 08 05 
              08 05 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,5,8,5,8,8	; 5
   79 D1:B902 04 08 08 08 
              08 08 08 08 
              08 05 08 08 
              05 08 08 08 	.db 4,8,8,8,8,8,8,8,8,5,8,8,5,8,8,8	; 6
   80 D1:B912 08 08 08 08 
              07 08 08 08 
              08 08 08 -  	.db 8,8,8,8,7,8,8,8,8,8,8			; 7
   81 D1:B91D -  -  -  -   
   82 D1:B91D -  -  -  -  ;-------------------------------------------------------------------------------
   83 D1:B91D -  -  -  -  DefaultTextData_ASM:
   84 D1:B91D FF FF FF FF 
              FF FF FF FF Char000: .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF	; _
   85 D1:B925 18 3C 7E 18 
              18 18 18 00 Char024: .db $18,$3C,$7E,$18,$18,$18,$18,$00	; .
   86 D1:B92D 18 18 18 18 
              7E 3C 18 00 Char025: .db $18,$18,$18,$18,$7E,$3C,$18,$00	; .
   87 D1:B935 00 18 0C FE 
              0C 18 00 00 Char026: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	; .
   88 D1:B93D 00 30 60 FE 
              60 30 00 00 Char027: .db $00,$30,$60,$FE,$60,$30,$00,$00	; .
   89 D1:B945 00 18 0C FE 
              0C 18 00 00 Char028: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	; ->
   90 D1:B94D 00 24 66 FF 
              66 24 00 00 Char029: .db $00,$24,$66,$FF,$66,$24,$00,$00	; .
   91 D1:B955 00 18 3C 7E 
              FF FF 00 00 Char030: .db $00,$18,$3C,$7E,$FF,$FF,$00,$00	; .
   92 D1:B95D 00 FF FF 7E 
              3C 18 00 00 Char031: .db $00,$FF,$FF,$7E,$3C,$18,$00,$00	; .
   93 D1:B965 00 00 00 00 
              00 00 00 00 Char032: .db $00,$00,$00,$00,$00,$00,$00,$00	;  
   94 D1:B96D C0 C0 C0 C0 
              C0 00 C0 00 Char033: .db $C0,$C0,$C0,$C0,$C0,$00,$C0,$00	; !
   95 D1:B975 D8 D8 D8 00 
              00 00 00 00 Char034: .db $D8,$D8,$D8,$00,$00,$00,$00,$00	; "
   96 D1:B97D 6C 6C FE 6C 
              FE 6C 6C 00 Char035: .db $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
   97 D1:B985 18 7E C0 7C 
              06 FC 18 00 Char036: .db $18,$7E,$C0,$7C,$06,$FC,$18,$00	; $
   98 D1:B98D 00 C6 CC 18 
              30 66 C6 00 Char037: .db $00,$C6,$CC,$18,$30,$66,$C6,$00	; %
   99 D1:B995 38 6C 38 76 
              DC CC 76 00 Char038: .db $38,$6C,$38,$76,$DC,$CC,$76,$00	; &
  100 D1:B99D 30 30 60 00 
              00 00 00 00 Char039: .db $30,$30,$60,$00,$00,$00,$00,$00	; '
  101 D1:B9A5 30 60 C0 C0 
              C0 60 30 00 Char040: .db $30,$60,$C0,$C0,$C0,$60,$30,$00	; (
  102 D1:B9AD C0 60 30 30 
              30 60 C0 00 Char041: .db $C0,$60,$30,$30,$30,$60,$C0,$00	; )
  103 D1:B9B5 00 66 3C FF 
              3C 66 00 00 Char042: .db $00,$66,$3C,$FF,$3C,$66,$00,$00	; *
  104 D1:B9BD 00 30 30 FC 
              FC 30 30 00 Char043: .db $00,$30,$30,$FC,$FC,$30,$30,$00	; +
  105 D1:B9C5 00 00 00 00 
              00 60 60 C0 Char044: .db $00,$00,$00,$00,$00,$60,$60,$C0	; ,
  106 D1:B9CD 00 00 00 FC 
              00 00 00 00 Char045: .db $00,$00,$00,$FC,$00,$00,$00,$00	; -
  107 D1:B9D5 00 00 00 00 
              00 C0 C0 00 Char046: .db $00,$00,$00,$00,$00,$C0,$C0,$00	; .
  108 D1:B9DD 06 0C 18 30 
              60 C0 80 00 Char047: .db $06,$0C,$18,$30,$60,$C0,$80,$00	; /
  109 D1:B9E5 7C CE DE F6 
              E6 C6 7C 00 Char048: .db $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00	; 0
  110 D1:B9ED 30 70 30 30 
              30 30 FC 00 Char049: .db $30,$70,$30,$30,$30,$30,$FC,$00	; 1
  111 D1:B9F5 7C C6 06 7C 
              C0 C0 FE 00 Char050: .db $7C,$C6,$06,$7C,$C0,$C0,$FE,$00	; 2
  112 D1:B9FD FC 06 06 3C 
              06 06 FC 00 Char051: .db $FC,$06,$06,$3C,$06,$06,$FC,$00	; 3
  113 D1:BA05 0C CC CC CC 
              FE 0C 0C 00 Char052: .db $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00	; 4
  114 D1:BA0D FE C0 FC 06 
              06 C6 7C 00 Char053: .db $FE,$C0,$FC,$06,$06,$C6,$7C,$00	; 5
  115 D1:BA15 7C C0 C0 FC 
              C6 C6 7C 00 Char054: .db $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00	; 6
  116 D1:BA1D FE 06 06 0C 
              18 30 30 00 Char055: .db $FE,$06,$06,$0C,$18,$30,$30,$00	; 7
  117 D1:BA25 7C C6 C6 7C 
              C6 C6 7C 00 Char056: .db $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00	; 8
  118 D1:BA2D 7C C6 C6 7E 
              06 06 7C 00 Char057: .db $7C,$C6,$C6,$7E,$06,$06,$7C,$00	; 9
  119 D1:BA35 00 C0 C0 00 
              00 C0 C0 00 Char058: .db $00,$C0,$C0,$00,$00,$C0,$C0,$00	; :
  120 D1:BA3D 00 60 60 00 
              00 60 60 C0 Char059: .db $00,$60,$60,$00,$00,$60,$60,$C0	; ;
  121 D1:BA45 18 30 60 C0 
              60 30 18 00 Char060: .db $18,$30,$60,$C0,$60,$30,$18,$00	; <
  122 D1:BA4D 00 00 FC 00 
              FC 00 00 00 Char061: .db $00,$00,$FC,$00,$FC,$00,$00,$00	; =
  123 D1:BA55 C0 60 30 18 
              30 60 C0 00 Char062: .db $C0,$60,$30,$18,$30,$60,$C0,$00	; >
  124 D1:BA5D 78 CC 18 30 
              30 00 30 00 Char063: .db $78,$CC,$18,$30,$30,$00,$30,$00	; ?
  125 D1:BA65 7C C6 DE DE 
              DE C0 7E 00 Char064: .db $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00	; @
  126 D1:BA6D 38 6C C6 C6 
              FE C6 C6 00 Char065: .db $38,$6C,$C6,$C6,$FE,$C6,$C6,$00	; A
  127 D1:BA75 FC C6 C6 FC 
              C6 C6 FC 00 Char066: .db $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00	; B
  128 D1:BA7D 7C C6 C0 C0 
              C0 C6 7C 00 Char067: .db $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00	; C
  129 D1:BA85 F8 CC C6 C6 
              C6 CC F8 00 Char068: .db $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00	; D
  130 D1:BA8D FE C0 C0 F8 
              C0 C0 FE 00 Char069: .db $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00	; E
  131 D1:BA95 FE C0 C0 F8 
              C0 C0 C0 00 Char070: .db $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00	; F
  132 D1:BA9D 7C C6 C0 C0 
              CE C6 7C 00 Char071: .db $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00	; G
  133 D1:BAA5 C6 C6 C6 FE 
              C6 C6 C6 00 Char072: .db $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00	; H
  134 D1:BAAD 7E 18 18 18 
              18 18 7E 00 Char073: .db $7E,$18,$18,$18,$18,$18,$7E,$00	; I
  135 D1:BAB5 06 06 06 06 
              06 C6 7C 00 Char074: .db $06,$06,$06,$06,$06,$C6,$7C,$00	; J
  136 D1:BABD C6 CC D8 F0 
              D8 CC C6 00 Char075: .db $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
  137 D1:BAC5 C0 C0 C0 C0 
              C0 C0 FE 00 Char076: .db $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00	; L
  138 D1:BACD C6 EE FE FE 
              D6 C6 C6 00 Char077: .db $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00	; M
  139 D1:BAD5 C6 E6 F6 DE 
              CE C6 C6 00 Char078: .db $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
  140 D1:BADD 7C C6 C6 C6 
              C6 C6 7C 00 Char079: .db $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00	; O
  141 D1:BAE5 FC C6 C6 FC 
              C0 C0 C0 00 Char080: .db $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00	; P
  142 D1:BAED 7C C6 C6 C6 
              D6 DE 7C 06 Char081: .db $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06	; Q
  143 D1:BAF5 FC C6 C6 FC 
              D8 CC C6 00 Char082: .db $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00	; R
  144 D1:BAFD 7C C6 C0 7C 
              06 C6 7C 00 Char083: .db $7C,$C6,$C0,$7C,$06,$C6,$7C,$00	; S
  145 D1:BB05 FF 18 18 18 
              18 18 18 00 Char084: .db $FF,$18,$18,$18,$18,$18,$18,$00	; T
  146 D1:BB0D C6 C6 C6 C6 
              C6 C6 FE 00 Char085: .db $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00	; U
  147 D1:BB15 C6 C6 C6 C6 
              C6 7C 38 00 Char086: .db $C6,$C6,$C6,$C6,$C6,$7C,$38,$00	; V
  148 D1:BB1D C6 C6 C6 C6 
              D6 FE 6C 00 Char087: .db $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00	; W
  149 D1:BB25 C6 C6 6C 38 
              6C C6 C6 00 Char088: .db $C6,$C6,$6C,$38,$6C,$C6,$C6,$00	; X
  150 D1:BB2D C6 C6 C6 7C 
              18 30 E0 00 Char089: .db $C6,$C6,$C6,$7C,$18,$30,$E0,$00	; Y
  151 D1:BB35 FE 06 0C 18 
              30 60 FE 00 Char090: .db $FE,$06,$0C,$18,$30,$60,$FE,$00	; Z
  152 D1:BB3D F0 C0 C0 C0 
              C0 C0 F0 00 Char091: .db $F0,$C0,$C0,$C0,$C0,$C0,$F0,$00	; [
  153 D1:BB45 C0 60 30 18 
              0C 06 02 00 Char092: .db $C0,$60,$30,$18,$0C,$06,$02,$00	; \
  154 D1:BB4D F0 30 30 30 
              30 30 F0 00 Char093: .db $F0,$30,$30,$30,$30,$30,$F0,$00	; ]
  155 D1:BB55 10 38 6C C6 
              00 00 00 00 Char094: .db $10,$38,$6C,$C6,$00,$00,$00,$00	; ^
  156 D1:BB5D 00 00 00 00 
              00 00 00 FF Char095: .db $00,$00,$00,$00,$00,$00,$00,$FF	; _
  157 D1:BB65 C0 C0 60 00 
              00 00 00 00 Char096: .db $C0,$C0,$60,$00,$00,$00,$00,$00	; `
  158 D1:BB6D 00 00 7C 06 
              7E C6 7E 00 Char097: .db $00,$00,$7C,$06,$7E,$C6,$7E,$00	; a
  159 D1:BB75 C0 C0 C0 FC 
              C6 C6 FC 00 Char098: .db $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00	; b
  160 D1:BB7D 00 00 7C C6 
              C0 C6 7C 00 Char099: .db $00,$00,$7C,$C6,$C0,$C6,$7C,$00	; c
  161 D1:BB85 06 06 06 7E 
              C6 C6 7E 00 Char100: .db $06,$06,$06,$7E,$C6,$C6,$7E,$00	; d
  162 D1:BB8D 00 00 7C C6 
              FE C0 7C 00 Char101: .db $00,$00,$7C,$C6,$FE,$C0,$7C,$00	; e
  163 D1:BB95 1C 36 30 78 
              30 30 78 00 Char102: .db $1C,$36,$30,$78,$30,$30,$78,$00	; f
  164 D1:BB9D 00 00 7E C6 
              C6 7E 06 FC Char103: .db $00,$00,$7E,$C6,$C6,$7E,$06,$FC	; g
  165 D1:BBA5 C0 C0 FC C6 
              C6 C6 C6 00 Char104: .db $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00	; h
  166 D1:BBAD 60 00 E0 60 
              60 60 F0 00 Char105: .db $60,$00,$E0,$60,$60,$60,$F0,$00	; i
  167 D1:BBB5 06 00 06 06 
              06 06 C6 7C Char106: .db $06,$00,$06,$06,$06,$06,$C6,$7C	; j
  168 D1:BBBD C0 C0 CC D8 
              F8 CC C6 00 Char107: .db $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00	; k
  169 D1:BBC5 E0 60 60 60 
              60 60 F0 00 Char108: .db $E0,$60,$60,$60,$60,$60,$F0,$00	; l
  170 D1:BBCD 00 00 CC FE 
              FE D6 D6 00 Char109: .db $00,$00,$CC,$FE,$FE,$D6,$D6,$00	; m
  171 D1:BBD5 00 00 FC C6 
              C6 C6 C6 00 Char110: .db $00,$00,$FC,$C6,$C6,$C6,$C6,$00	; n
  172 D1:BBDD 00 00 7C C6 
              C6 C6 7C 00 Char111: .db $00,$00,$7C,$C6,$C6,$C6,$7C,$00	; o
  173 D1:BBE5 00 00 FC C6 
              C6 FC C0 C0 Char112: .db $00,$00,$FC,$C6,$C6,$FC,$C0,$C0	; p
  174 D1:BBED 00 00 7E C6 
              C6 7E 06 06 Char113: .db $00,$00,$7E,$C6,$C6,$7E,$06,$06	; q
  175 D1:BBF5 00 00 FC C6 
              C0 C0 C0 00 Char114: .db $00,$00,$FC,$C6,$C0,$C0,$C0,$00	; r
  176 D1:BBFD 00 00 7E C0 
              7C 06 FC 00 Char115: .db $00,$00,$7E,$C0,$7C,$06,$FC,$00	; s
  177 D1:BC05 30 30 FC 30 
              30 30 1C 00 Char116: .db $30,$30,$FC,$30,$30,$30,$1C,$00	; t
  178 D1:BC0D 00 00 C6 C6 
              C6 C6 7E 00 Char117: .db $00,$00,$C6,$C6,$C6,$C6,$7E,$00	; u
  179 D1:BC15 00 00 C6 C6 
              C6 7C 38 00 Char118: .db $00,$00,$C6,$C6,$C6,$7C,$38,$00	; v
  180 D1:BC1D 00 00 C6 C6 
              D6 FE 6C 00 Char119: .db $00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
  181 D1:BC25 00 00 C6 6C 
              38 6C C6 00 Char120: .db $00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
  182 D1:BC2D 00 00 C6 C6 
              C6 7E 06 FC Char121: .db $00,$00,$C6,$C6,$C6,$7E,$06,$FC	; y
  183 D1:BC35 00 00 FE 0C 
              38 60 FE 00 Char122: .db $00,$00,$FE,$0C,$38,$60,$FE,$00	; z
  184 D1:BC3D 1C 30 30 E0 
              30 30 1C 00 Char123: .db $1C,$30,$30,$E0,$30,$30,$1C,$00	; {
  185 D1:BC45 C0 C0 C0 00 
              C0 C0 C0 00 Char124: .db $C0,$C0,$C0,$00,$C0,$C0,$C0,$00	; |
  186 D1:BC4D E0 30 30 1C 
              30 30 E0 00 Char125: .db $E0,$30,$30,$1C,$30,$30,$E0,$00	; }
  187 D1:BC55 76 DC 00 00 
              00 00 00 00 Char126: .db $76,$DC,$00,$00,$00,$00,$00,$00	; ~
  188 D1:BC5D 00 10 38 6C 
              C6 C6 FE 00 Char127: .db $00,$10,$38,$6C,$C6,$C6,$FE,$00	; .
Listing for file "ICE.asm"
  443 D1:BC65 -  -  -  -  #include "programs.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\programs.asm"
    1 D1:BC65 -  -  -  -  FindNextGoodVar:
    2 D1:BC65 ED 5B 9A 25 
              D0 -  -  -  	ld de, (pTemp)
    3 D1:BC6A CD 3C 01 02 	call _CpHLDE
    4 D1:BC6E 20 02 -  -  	jr nz, FindContinue
    5 D1:BC70 3C -  -  -  	inc a									; return nz
    6 D1:BC71 C9 -  -  -  	ret
    7 D1:BC72 -  -  -  -  FindContinue:
    8 D1:BC72 7E -  -  -  	ld a, (hl)
    9 D1:BC73 2B -  -  -  	dec hl
   10 D1:BC74 2B -  -  -  	dec hl
   11 D1:BC75 2B -  -  -  	dec hl
   12 D1:BC76 FE 05 -  -  	cp ProgObj
   13 D1:BC78 28 04 -  -  	jr z, FindGoodProgram
   14 D1:BC7A FE 06 -  -  	cp ProtProgObj
   15 D1:BC7C 20 43 -  -  	jr nz, FindWrongProgram
   16 D1:BC7E -  -  -  -  FindGoodProgram:
   17 D1:BC7E 5E -  -  -  	ld e, (hl)
   18 D1:BC7F 2B -  -  -  	dec hl
   19 D1:BC80 56 -  -  -  	ld d, (hl)
   20 D1:BC81 2B -  -  -  	dec hl
   21 D1:BC82 7E -  -  -  	ld a, (hl)
   22 D1:BC83 CD 68 1D 02 	call _SetDEUToA
   23 D1:BC87 FE D0 -  -  	cp 0D0h
   24 D1:BC89 30 0C -  -  	jr nc, +_
   25 D1:BC8B E5 -  -  -  	push hl
   26 D1:BC8C EB -  -  -  		ex de, hl
   27 D1:BC8D 11 09 00 00 		ld de, 9
   28 D1:BC91 19 -  -  -  		add hl, de
   29 D1:BC92 5E -  -  -  		ld e, (hl)
   30 D1:BC93 1C -  -  -  		inc e
   31 D1:BC94 19 -  -  -  		add hl, de
   32 D1:BC95 EB -  -  -  		ex de, hl
   33 D1:BC96 E1 -  -  -  	pop hl
   34 D1:BC97 13 -  -  -  _:	inc de
   35 D1:BC98 13 -  -  -  	inc de
   36 D1:BC99 1A -  -  -  	ld a, (de)
   37 D1:BC9A FE 2C -  -  	cp tii
   38 D1:BC9C 20 25 -  -  	jr nz, FindWrongProgram2
   39 D1:BC9E 2B -  -  -  	dec hl
   40 D1:BC9F D5 -  -  -  	push de
   41 D1:BCA0 E5 -  -  -  		push hl
   42 D1:BCA1 2A 9D E9 D1 			ld hl, (ProgramNamesPtr)
   43 D1:BCA5 11 08 00 00 			ld de, 8
   44 D1:BCA9 19 -  -  -  			add hl, de
   45 D1:BCAA 22 9D E9 D1 			ld (ProgramNamesPtr), hl
   46 D1:BCAE B7 -  -  -  			or a
   47 D1:BCAF ED 52 -  -  			sbc hl, de
   48 D1:BCB1 EB -  -  -  			ex de, hl
   49 D1:BCB2 E1 -  -  -  		pop hl
   50 D1:BCB3 46 -  -  -  		ld b, (hl)
   51 D1:BCB4 48 -  -  -  		ld c, b
   52 D1:BCB5 2B -  -  -  		dec hl
   53 D1:BCB6 -  -  -  -  FindCopyProgName:
   54 D1:BCB6 7E -  -  -  		ld a, (hl)
   55 D1:BCB7 12 -  -  -  		ld (de), a
   56 D1:BCB8 2B -  -  -  		dec hl
   57 D1:BCB9 13 -  -  -  		inc de
   58 D1:BCBA 10 FA -  -  		djnz FindCopyProgName
   59 D1:BCBC AF -  -  -  		xor a
   60 D1:BCBD 12 -  -  -  		ld (de), a
   61 D1:BCBE D1 -  -  -  	pop de
   62 D1:BCBF BF -  -  -  	cp a
   63 D1:BCC0 C9 -  -  -  	ret
   64 D1:BCC1 -  -  -  -  FindWrongProgram:
   65 D1:BCC1 2B -  -  -  	dec hl
   66 D1:BCC2 2B -  -  -  	dec hl
   67 D1:BCC3 -  -  -  -  FindWrongProgram2:
   68 D1:BCC3 2B -  -  -  	dec hl
   69 D1:BCC4 46 -  -  -  	ld b, (hl)
   70 D1:BCC5 2B -  -  -  	dec hl
   71 D1:BCC6 -  -  -  -  FindSkipProgramName:
   72 D1:BCC6 2B -  -  -  	dec hl
   73 D1:BCC7 10 FD -  -  	djnz FindSkipProgramName
   74 D1:BCC9 18 9A -  -  	jr FindNextGoodVar
Listing for file "ICE.asm"
  444 D1:BCCB -  -  -  -  #include "hooks.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\hooks.asm"
    1 D1:BCCB -  -  -  -  InstallHooks:
    2 D1:BCCB 21 16 EA D1 	ld hl, ICEAppvar
    3 D1:BCCF CD 20 03 02 	call _Mov9ToOP1
    4 D1:BCD3 CD 0C 05 02 	call _ChkFindSym
    5 D1:BCD7 38 13 -  -  	jr c, ++_
    6 D1:BCD9 CD 98 1F 02 	call _ChkInRAM
    7 D1:BCDD 30 09 -  -  	jr nc, +_
    8 D1:BCDF CD 48 14 02 	call _Arc_Unarc
    9 D1:BCE3 01 05 00 00 	ld bc, 5
   10 D1:BCE7 09 -  -  -  	add hl, bc
   11 D1:BCE8 CD 88 05 02 _:	call _DelVar
   12 D1:BCEC 21 28 08 00 _:	ld hl, Hooks_end - KeyHook_start
   13 D1:BCF0 CD 30 13 02 	call _CreateAppVar
   14 D1:BCF4 13 -  -  -  	inc de
   15 D1:BCF5 13 -  -  -  	inc de
   16 D1:BCF6 21 27 BD D1 	ld hl, KeyHook_start
   17 D1:BCFA 01 28 08 00 	ld bc, Hooks_end - KeyHook_start
   18 D1:BCFE ED B0 -  -  	ldir
   19 D1:BD00 CD C8 02 02 	call _OP4ToOP1
   20 D1:BD04 CD 48 14 02 	call _Arc_Unarc
   21 D1:BD08 CD 0C 05 02 	call _ChkFindSym
   22 D1:BD0C 21 13 00 00 	ld hl, 19														; archived program header+VAT entry
   23 D1:BD10 19 -  -  -  	add hl, de
   24 D1:BD11 CD CC 13 02 	call _SetGetKeyHook
   25 D1:BD15 -  -  -  -  	
   26 D1:BD15 11 4F 07 00 	ld de, KeyHook_end - KeyHook_start
   27 D1:BD19 19 -  -  -  	add hl, de
   28 D1:BD1A CD F8 13 02 	call _SetTokenHook
   29 D1:BD1E -  -  -  -  	
   30 D1:BD1E 11 2B 00 00 	ld de, TokenHook_end - TokenHook_start
   31 D1:BD22 19 -  -  -  	add hl, de
   32 D1:BD23 C3 C4 13 02 	jp _SetCursorhook
   33 D1:BD27 -  -  -  -  	
   34 D1:BD27 -  -  -  -  KeyHook_start:
   35 D1:BD27 83 -  -  -  	.db 83h
   36 D1:BD28 B7 -  -  -  	or a
   37 D1:BD29 C8 -  -  -  	ret z
   38 D1:BD2A 47 -  -  -  	ld b, a
   39 D1:BD2B 3A E0 07 D0 	ld a, (cxCurApp)
   40 D1:BD2F FE 46 -  -  	cp cxPrgmEdit
   41 D1:BD31 78 -  -  -  	ld a, b
   42 D1:BD32 C0 -  -  -  	ret nz
   43 D1:BD33 F5 -  -  -  	push af
   44 D1:BD34 CD A0 20 02 		call _os_ClearStatusBarLow
   45 D1:BD38 FD CB B0 86 		res displayed_det, (iy+fAlways1)
   46 D1:BD3C F1 -  -  -  	pop af
   47 D1:BD3D FE 5A -  -  	cp kTrace
   48 D1:BD3F C0 -  -  -  	ret nz
   49 D1:BD40 -  -  -  -  DisplayCustomTokensAndCFunctions:
   50 D1:BD40 CD A8 08 02 	call _CursorOff
   51 D1:BD44 16 00 -  -  	ld d, 0
   52 D1:BD46 -  -  -  -  DisplayTabWithTokens:
   53 D1:BD46 D5 -  -  -  	push de
   54 D1:BD47 CD 08 08 02 		call _ClrLCDFull
   55 D1:BD4B D1 -  -  -  	pop de
   56 D1:BD4C 21 1E 00 00 	ld hl, 30
   57 D1:BD50 22 D5 08 D0 	ld (penRow), hl
   58 D1:BD54 21 0C 00 00 	ld hl, 12
   59 D1:BD58 22 D2 08 D0 	ld (penCol), hl
   60 D1:BD5C 06 00 -  -  	ld b, 0
   61 D1:BD5E 7A -  -  -  	ld a, d
   62 D1:BD5F 1E 03 -  -  	ld e, 3
   63 D1:BD61 ED 5C -  -  	mlt de
   64 D1:BD63 21 19 06 00 	ld hl, TabData - KeyHook_start
   65 D1:BD67 19 -  -  -  	add hl, de
   66 D1:BD68 ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
   67 D1:BD6D 19 -  -  -  	add hl, de
   68 D1:BD6E ED 27 -  -  	ld hl, (hl)
   69 D1:BD70 19 -  -  -  	add hl, de
   70 D1:BD71 57 -  -  -  	ld d, a
   71 D1:BD72 1E 00 -  -  	ld e, 0
   72 D1:BD74 18 0F -  -  	jr DisplayTokensLoop
   73 D1:BD76 -  -  -  -  KeyIsLeft:
   74 D1:BD76 7A -  -  -  	ld a, d
   75 D1:BD77 B7 -  -  -  	or a
   76 D1:BD78 28 61 -  -  	jr z, KeyLoop
   77 D1:BD7A 15 -  -  -  	dec d
   78 D1:BD7B 18 C9 -  -  	jr DisplayTabWithTokens
   79 D1:BD7D -  -  -  -  KeyIsRight:
   80 D1:BD7D 7A -  -  -  	ld a, d
   81 D1:BD7E FE 05 -  -  	cp 5
   82 D1:BD80 28 59 -  -  	jr z, KeyLoop
   83 D1:BD82 14 -  -  -  	inc d
   84 D1:BD83 18 C1 -  -  	jr DisplayTabWithTokens
   85 D1:BD85 -  -  -  -  DisplayTokensLoop:
   86 D1:BD85 78 -  -  -  	ld a, b
   87 D1:BD86 FE 10 -  -  	cp 16
   88 D1:BD88 28 22 -  -  	jr z, StopDisplayingTokens
   89 D1:BD8A 04 -  -  -  	inc b
   90 D1:BD8B CD 34 08 02 	call _VPutS
   91 D1:BD8F E5 -  -  -  	push hl
   92 D1:BD90 D5 -  -  -  		push de
   93 D1:BD91 2A D5 08 D0 			ld hl, (penRow)
   94 D1:BD95 11 0D 00 00 			ld de, 13
   95 D1:BD99 19 -  -  -  			add hl, de
   96 D1:BD9A 22 D5 08 D0 			ld (penRow), hl
   97 D1:BD9E 21 0C 00 00 			ld hl, 12
   98 D1:BDA2 22 D2 08 D0 			ld (penCol), hl
   99 D1:BDA6 D1 -  -  -  		pop de
  100 D1:BDA7 E1 -  -  -  	pop hl
  101 D1:BDA8 7E -  -  -  	ld a, (hl)
  102 D1:BDA9 B7 -  -  -  	or a
  103 D1:BDAA 20 D9 -  -  	jr nz, DisplayTokensLoop
  104 D1:BDAC -  -  -  -  StopDisplayingTokens:
  105 D1:BDAC 21 01 00 00 	ld hl, 1
  106 D1:BDB0 22 D2 08 D0 	ld (penCol), hl
  107 D1:BDB4 -  -  -  -  GetRightCustomToken:
  108 D1:BDB4 7B -  -  -  	ld a, e
  109 D1:BDB5 42 -  -  -  	ld b, d
  110 D1:BDB6 16 0D -  -  	ld d, 13
  111 D1:BDB8 ED 5C -  -  	mlt de
  112 D1:BDBA 21 1E 00 00 	ld hl, 30
  113 D1:BDBE 19 -  -  -  	add hl, de
  114 D1:BDBF 50 -  -  -  	ld d, b
  115 D1:BDC0 5F -  -  -  	ld e, a
  116 D1:BDC1 22 D5 08 D0 	ld (penRow), hl
  117 D1:BDC5 21 01 00 00 	ld hl, 1
  118 D1:BDC9 22 D2 08 D0 	ld (penCol), hl
  119 D1:BDCD E5 -  -  -  	push hl
  120 D1:BDCE D5 -  -  -  		push de
  121 D1:BDCF 3E 3E -  -  			ld a, '>'
  122 D1:BDD1 CD 30 08 02 			call _VPutMap
  123 D1:BDD5 D1 -  -  -  		pop de
  124 D1:BDD6 E1 -  -  -  	pop hl
  125 D1:BDD7 22 D2 08 D0 	ld (penCol), hl
  126 D1:BDDB -  -  -  -  KeyLoop:
  127 D1:BDDB CD 4C 01 02 	call _GetCSC
  128 D1:BDDF B7 -  -  -  	or a
  129 D1:BDE0 28 F9 -  -  	jr z, KeyLoop
  130 D1:BDE2 FE 02 -  -  	cp skLeft
  131 D1:BDE4 28 90 -  -  	jr z, KeyIsLeft
  132 D1:BDE6 FE 03 -  -  	cp skRight
  133 D1:BDE8 28 93 -  -  	jr z, KeyIsRight
  134 D1:BDEA FE 04 -  -  	cp skUp
  135 D1:BDEC 20 1B -  -  	jr nz, KeyNotUp
  136 D1:BDEE 7B -  -  -  	ld a, e
  137 D1:BDEF B7 -  -  -  	or a
  138 D1:BDF0 28 E9 -  -  	jr z, KeyLoop
  139 D1:BDF2 1D -  -  -  	dec e
  140 D1:BDF3 -  -  -  -  EraseCursor:
  141 D1:BDF3 D5 -  -  -  	push de
  142 D1:BDF4 3E 20 -  -  		ld a, ' '
  143 D1:BDF6 CD 30 08 02 		call _VPutMap
  144 D1:BDFA 3E 20 -  -  		ld a, ' '
  145 D1:BDFC CD 30 08 02 		call _VPutMap
  146 D1:BE00 3E 20 -  -  		ld a, ' '
  147 D1:BE02 CD 30 08 02 		call _VPutMap
  148 D1:BE06 D1 -  -  -  	pop de
  149 D1:BE07 18 AB -  -  	jr GetRightCustomToken
  150 D1:BE09 -  -  -  -  KeyNotUp:
  151 D1:BE09 FE 01 -  -  	cp skDown
  152 D1:BE0B 20 12 -  -  	jr nz, KeyNotDown
  153 D1:BE0D 7A -  -  -  	ld a, d
  154 D1:BE0E FE 05 -  -  	cp 5
  155 D1:BE10 7B -  -  -  	ld a, e
  156 D1:BE11 20 04 -  -  	jr nz, +_
  157 D1:BE13 FE 02 -  -  	cp (AMOUNT_OF_C_FUNCTIONS + AMOUNT_OF_CUSTOM_TOKENS)%16 - 1
  158 D1:BE15 28 C4 -  -  	jr z, KeyLoop
  159 D1:BE17 7B -  -  -  _:	ld a, e
  160 D1:BE18 FE 0F -  -  	cp 16-1
  161 D1:BE1A 28 BF -  -  	jr z, KeyLoop
  162 D1:BE1C 1C -  -  -  	inc e
  163 D1:BE1D 18 D4 -  -  	jr EraseCursor
  164 D1:BE1F -  -  -  -  KeyNotDown:
  165 D1:BE1F FE 0F -  -  	cp skClear
  166 D1:BE21 28 75 -  -  	jr z, KeyIsClear
  167 D1:BE23 FE 09 -  -  	cp skEnter
  168 D1:BE25 20 B4 -  -  	jr nz, KeyLoop
  169 D1:BE27 7B -  -  -  	ld a, e
  170 D1:BE28 1E 10 -  -  	ld e, 16
  171 D1:BE2A ED 5C -  -  	mlt de
  172 D1:BE2C 83 -  -  -  	add a, e
  173 D1:BE2D D6 04 -  -  	sub AMOUNT_OF_CUSTOM_TOKENS
  174 D1:BE2F 38 4F -  -  	jr c, InsertCustomToken
  175 D1:BE31 21 1F EA D0 	ld hl, saveSScreen
  176 D1:BE35 36 B3 -  -  	ld (hl), tDet
  177 D1:BE37 23 -  -  -  	inc hl
  178 D1:BE38 FE 0A -  -  	cp 10
  179 D1:BE3A 38 17 -  -  	jr c, +_
  180 D1:BE3C 57 -  -  -  	ld d, a
  181 D1:BE3D 1E 0A -  -  	ld e, 10
  182 D1:BE3F AF -  -  -  	xor a
  183 D1:BE40 06 08 -  -  	ld b, 8
  184 D1:BE42 -  -  -  -  _loop:
  185 D1:BE42 CB 22 -  -  	sla d
  186 D1:BE44 17 -  -  -  	rla
  187 D1:BE45 BB -  -  -  	cp e
  188 D1:BE46 38 02 -  -  	jr c, $+4
  189 D1:BE48 93 -  -  -  	sub e
  190 D1:BE49 14 -  -  -  	inc d
  191 D1:BE4A 10 F6 -  -  	djnz _loop
  192 D1:BE4C 5F -  -  -  	ld e, a
  193 D1:BE4D 7A -  -  -  	ld a, d
  194 D1:BE4E C6 30 -  -  	add a, t0
  195 D1:BE50 77 -  -  -  	ld (hl), a
  196 D1:BE51 23 -  -  -  	inc hl
  197 D1:BE52 7B -  -  -  	ld a, e
  198 D1:BE53 C6 30 -  -  _:	add a, t0
  199 D1:BE55 77 -  -  -  	ld (hl), a
  200 D1:BE56 23 -  -  -  	inc hl
  201 D1:BE57 36 00 -  -  	ld (hl), 0
  202 D1:BE59 21 1F EA D0 	ld hl, saveSScreen
  203 D1:BE5D -  -  -  -  InsertCFunctionLoop:
  204 D1:BE5D 7E -  -  -  	ld a, (hl)
  205 D1:BE5E B7 -  -  -  	or a
  206 D1:BE5F 28 37 -  -  	jr z, BufferSearch
  207 D1:BE61 ED 5B 3D 24 
              D0 -  -  -  	ld de, (editTail)
  208 D1:BE66 1A -  -  -  	ld a, (de)
  209 D1:BE67 FE 3F -  -  	cp tEnter
  210 D1:BE69 16 00 -  -  	ld d, 0
  211 D1:BE6B 5E -  -  -  	ld e, (hl)
  212 D1:BE6C 28 09 -  -  	jr z, +_
  213 D1:BE6E E5 -  -  -  	push hl
  214 D1:BE6F CD 08 0D 02 		call _BufReplace
  215 D1:BE73 E1 -  -  -  	pop hl
  216 D1:BE74 23 -  -  -  	inc hl
  217 D1:BE75 18 E6 -  -  	jr InsertCFunctionLoop
  218 D1:BE77 E5 -  -  -  _:	push hl
  219 D1:BE78 CD 00 0D 02 		call _BufInsert
  220 D1:BE7C E1 -  -  -  	pop hl
  221 D1:BE7D 23 -  -  -  	inc hl
  222 D1:BE7E 18 DD -  -  	jr InsertCFunctionLoop
  223 D1:BE80 -  -  -  -  InsertCustomToken:
  224 D1:BE80 C6 0E -  -  	add a, 10+AMOUNT_OF_CUSTOM_TOKENS
  225 D1:BE82 5F -  -  -  	ld e, a
  226 D1:BE83 16 62 -  -  	ld d, tVarOut
  227 D1:BE85 2A 3A 24 D0 	ld hl, (editCursor)
  228 D1:BE89 7E -  -  -  	ld a, (hl)
  229 D1:BE8A FE 3F -  -  	cp tEnter
  230 D1:BE8C 28 06 -  -  	jr z, +_
  231 D1:BE8E CD 08 0D 02 	call _BufReplace
  232 D1:BE92 18 04 -  -  	jr BufferSearch
  233 D1:BE94 CD 00 0D 02 _:	call _BufInsert
  234 D1:BE98 -  -  -  -  KeyIsClear:
  235 D1:BE98 -  -  -  -  BufferSearch:
  236 D1:BE98 01 00 00 00 	ld bc, 0
  237 D1:BE9C CD F8 0C 02 _:	call _BufLeft
  238 D1:BEA0 28 0C -  -  	jr z, BufferFound
  239 D1:BEA2 7B -  -  -  	ld a, e
  240 D1:BEA3 FE 3F -  -  	cp tEnter
  241 D1:BEA5 28 03 -  -  	jr z, +_
  242 D1:BEA7 03 -  -  -  	inc bc
  243 D1:BEA8 18 F2 -  -  	jr -_
  244 D1:BEAA CD FC 0C 02 _:	call _BufRight
  245 D1:BEAE -  -  -  -  BufferFound:
  246 D1:BEAE C5 -  -  -  	push bc
  247 D1:BEAF CD 08 08 02 		call _ClrLCDFull
  248 D1:BEB3 CD 18 08 02 		call _ClrTxtShd
  249 D1:BEB7 11 46 07 00 		ld de, CustomTokensProgramText - KeyHook_start
  250 D1:BEBB 2A DB 25 D0 		ld hl, (rawKeyHookPtr)
  251 D1:BEBF 19 -  -  -  		add hl, de
  252 D1:BEC0 AF -  -  -  		xor a
  253 D1:BEC1 32 96 05 D0 		ld (curCol), a
  254 D1:BEC5 32 95 05 D0 		ld (curRow), a
  255 D1:BEC9 CD C0 07 02 		call _PutS
  256 D1:BECD 21 5B 06 D0 		ld hl, progToEdit
  257 D1:BED1 06 08 -  -  		ld b, 8
  258 D1:BED3 7E -  -  -  _:		ld a, (hl)
  259 D1:BED4 B7 -  -  -  		or a
  260 D1:BED5 28 07 -  -  		jr z, +_
  261 D1:BED7 CD B8 07 02 		call _PutC
  262 D1:BEDB 23 -  -  -  		inc hl
  263 D1:BEDC 10 F5 -  -  		djnz -_
  264 D1:BEDE CD F0 07 02 _:		call _NewLine
  265 D1:BEE2 3E 3A -  -  		ld a, ':'
  266 D1:BEE4 CD B8 07 02 		call _PutC
  267 D1:BEE8 CD 68 0D 02 		call _DispEOW
  268 D1:BEEC C1 -  -  -  	pop bc
  269 D1:BEED -  -  -  -  MoveCursorOnce:
  270 D1:BEED 78 -  -  -  	ld a, b
  271 D1:BEEE B1 -  -  -  	or c
  272 D1:BEEF 28 07 -  -  	jr z, ReturnToEditor
  273 D1:BEF1 CD 4C 0D 02 	call _CursorRight
  274 D1:BEF5 0B -  -  -  	dec bc
  275 D1:BEF6 18 F5 -  -  	jr MoveCursorOnce
  276 D1:BEF8 -  -  -  -  ReturnToEditor:
  277 D1:BEF8 CD B0 08 02 	call _CursorOn
  278 D1:BEFC 3C -  -  -  	inc a																	; reset zero flag
  279 D1:BEFD 3E 00 -  -  	ld a, 0
  280 D1:BEFF C9 -  -  -  	ret
  281 D1:BF00 -  -  -  -  CustomTokensData:
  282 D1:BF00 -  -  -  -  Tab1:
  283 D1:BF00 45 78 65 63 
              48 65 78 28 
              00 -  -  -  C1:		.db "ExecHex(", 0
  284 D1:BF09 44 65 66 69 
              6E 65 53 70 
              72 69 74 65 
              28 00 -  -  C2:		.db "DefineSprite(", 0
  285 D1:BF17 43 61 6C 6C 
              20 00 -  -  C3:		.db "Call ", 0
  286 D1:BF1D 43 6F 6D 70 
              69 6C 65 50 
              72 67 6D 28 
              00 -  -  -  C4:		.db "CompilePrgm(", 0
  287 D1:BF2A -  -  -  -  
  288 D1:BF2A -  -  -  -  #define AMOUNT_OF_C_FUNCTIONS 79
  289 D1:BF2A -  -  -  -  
  290 D1:BF2A 42 65 67 69 
              6E 00 -  -  C6:		.db "Begin", 0
  291 D1:BF30 45 6E 64 00 C7:		.db "End", 0
  292 D1:BF34 53 65 74 43 
              6F 6C 6F 72 
              00 -  -  -  C8:		.db "SetColor", 0
  293 D1:BF3D 53 65 74 44 
              65 66 61 75 
              6C 74 50 61 
              6C 65 74 74 
              65 00 -  -  C9:		.db "SetDefaultPalette", 0
  294 D1:BF4F 53 65 74 50 
              61 6C 65 74 
              74 65 00 -  C10:	.db "SetPalette", 0
  295 D1:BF5A 46 69 6C 6C 
              53 63 72 65 
              65 6E 00 -  C11:	.db "FillScreen", 0
  296 D1:BF65 53 65 74 50 
              69 78 65 6C 
              00 -  -  -  C12:	.db "SetPixel", 0
  297 D1:BF6E 47 65 74 50 
              69 78 65 6C 
              00 -  -  -  C13:	.db "GetPixel", 0
  298 D1:BF77 47 65 74 44 
              72 61 77 00 C14:	.db "GetDraw", 0
  299 D1:BF7F 53 65 74 44 
              72 61 77 00 C15:	.db "SetDraw", 0
  300 D1:BF87 53 77 61 70 
              44 72 61 77 
              00 -  -  -  C16:	.db "SwapDraw", 0
  301 D1:BF90 42 6C 69 74 
              00 -  -  -  C17:	.db "Blit", 0
  302 D1:BF95 -  -  -  -  Tab2:
  303 D1:BF95 42 6C 69 74 
              4C 69 6E 65 
              73 00 -  -  C18:	.db "BlitLines", 0
  304 D1:BF9F 42 6C 69 74 
              41 72 65 61 
              00 -  -  -  C19:	.db "BlitArea", 0
  305 D1:BFA8 50 72 69 6E 
              74 43 68 61 
              72 00 -  -  C20:	.db "PrintChar", 0
  306 D1:BFB2 50 72 69 6E 
              74 49 6E 74 
              00 -  -  -  C21:	.db "PrintInt", 0
  307 D1:BFBB 50 72 69 6E 
              74 55 49 6E 
              74 00 -  -  C22:	.db "PrintUInt", 0
  308 D1:BFC5 50 72 69 6E 
              74 53 74 72 
              69 6E 67 00 C23:	.db "PrintString", 0
  309 D1:BFD1 50 72 69 6E 
              74 53 74 72 
              69 6E 67 58 
              59 00 -  -  C24:	.db "PrintStringXY", 0
  310 D1:BFDF 53 65 74 54 
              65 78 74 58 
              59 00 -  -  C25:	.db "SetTextXY", 0
  311 D1:BFE9 53 65 74 54 
              65 78 74 42 
              47 43 6F 6C 
              6F 72 00 -  C26:	.db "SetTextBGColor", 0
  312 D1:BFF8 53 65 74 54 
              65 78 74 46 
              47 43 6F 6C 
              6F 72 00 -  C27:	.db "SetTextFGColor", 0
  313 D1:C007 53 65 74 54 
              65 78 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C28:	.db "SetTextTransparentColor", 0
  314 D1:C01F 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 44 61 74 
              61 00 -  -  C29:	.db "SetCustomFontData", 0
  315 D1:C031 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 53 70 61 
              63 69 6E 67 
              00 -  -  -  C30:	.db "SetCustomFontSpacing", 0
  316 D1:C046 53 65 74 4D 
              6F 6E 6F 73 
              70 61 63 65 
              46 6F 6E 74 
              00 -  -  -  C31:	.db "SetMonospaceFont", 0
  317 D1:C057 47 65 74 53 
              74 72 69 6E 
              67 57 69 64 
              74 68 00 -  C32:	.db "GetStringWidth", 0
  318 D1:C066 47 65 74 43 
              68 61 72 57 
              69 64 74 68 
              00 -  -  -  C33:	.db "GetCharWidth", 0
  319 D1:C073 -  -  -  -  Tab3:
  320 D1:C073 47 65 74 54 
              65 78 74 58 
              00 -  -  -  C34:	.db "GetTextX", 0
  321 D1:C07C 47 65 74 54 
              65 78 74 59 
              00 -  -  -  C35:	.db "GetTextY", 0
  322 D1:C085 4C 69 6E 65 
              00 -  -  -  C36:	.db "Line", 0
  323 D1:C08A 48 6F 72 69 
              7A 4C 69 6E 
              65 00 -  -  C37:	.db "HorizLine", 0
  324 D1:C094 56 65 72 74 
              4C 69 6E 65 
              00 -  -  -  C38:	.db "VertLine", 0
  325 D1:C09D 43 69 72 63 
              6C 65 00 -  C39:	.db "Circle", 0
  326 D1:C0A4 46 69 6C 6C 
              43 69 72 63 
              6C 65 00 -  C40:	.db "FillCircle", 0
  327 D1:C0AF 52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C41:	.db "Rectangle", 0
  328 D1:C0B9 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C42:	.db "FillRectangle", 0
  329 D1:C0C7 4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C43:	.db "Line_NoClip", 0
  330 D1:C0D3 48 6F 72 69 
              7A 4C 69 6E 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C44:	.db "HorizLine_NoClip", 0
  331 D1:C0E4 56 65 72 74 
              4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C45:	.db "VertLine_NoClip", 0
  332 D1:C0F4 46 69 6C 6C 
              43 69 72 63 
              6C 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C46:	.db "FillCircle_NoClip", 0
  333 D1:C106 52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C47:	.db "Rectangle_NoClip", 0
  334 D1:C117 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C48:	.db "FillRectangle_NoClip", 0
  335 D1:C12C 53 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C49:	.db "SetClipRegion", 0
  336 D1:C13A -  -  -  -  Tab4:
  337 D1:C13A 47 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C50:	.db "GetClipRegion", 0
  338 D1:C148 53 68 69 66 
              74 44 6F 77 
              6E 00 -  -  C51:	.db "ShiftDown", 0
  339 D1:C152 53 68 69 66 
              74 55 70 00 C52:	.db "ShiftUp", 0
  340 D1:C15A 53 68 69 66 
              74 4C 65 66 
              74 00 -  -  C53:	.db "ShiftLeft", 0
  341 D1:C164 53 68 69 66 
              74 52 69 67 
              68 74 00 -  C54:	.db "ShiftRight", 0
  342 D1:C16F 54 69 6C 65 
              6D 61 70 00 C55:	.db "Tilemap", 0
  343 D1:C177 54 69 6C 65 
              6D 61 70 5F 
              4E 6F 43 6C 
              69 70 00 -  C56:	.db "Tilemap_NoClip", 0
  344 D1:C186 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 00 -  C57:	.db "TransparentTilemap", 0
  345 D1:C199 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C58:	.db "TransparentTilemap_NoClip", 0
  346 D1:C1B3 54 69 6C 65 
              50 74 72 00 C59:	.db "TilePtr", 0
  347 D1:C1BB 54 69 6C 65 
              50 74 72 4D 
              61 70 70 65 
              64 00 -  -  C60:	.db "TilePtrMapped", 0
  348 D1:C1C9 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              00 -  -  -  C61:	.db "LZDecompress", 0
  349 D1:C1D6 41 6C 6C 6F 
              63 53 70 72 
              69 74 65 00 C62:	.db "AllocSprite", 0
  350 D1:C1E2 53 70 72 69 
              74 65 00 -  C63:	.db "Sprite", 0
  351 D1:C1E9 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 00 -  -  C64:	.db "TransparentSprite", 0
  352 D1:C1FB 53 70 72 69 
              74 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C65:	.db "Sprite_NoClip", 0
  353 D1:C209 -  -  -  -  Tab5:
  354 D1:C209 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C66:	.db "TransparentSprite_NoClip", 0
  355 D1:C222 47 65 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C67:	.db "GetSprite_NoClip", 0
  356 D1:C233 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              5F 4E 6F 43 
              6C 69 70 00 C68:	.db "ScaledSprite_NoClip", 0
  357 D1:C247 53 63 61 6C 
              65 64 54 72 
              61 6E 73 70 
              61 72 65 6E 
              74 53 70 72 
              69 74 65 5F 
              4E 6F 43 6C 
              69 70 00 -  C69:	.db "ScaledTransparentSprite_NoClip", 0
  358 D1:C266 46 6C 69 70 
              53 70 72 69 
              74 65 59 00 C70:	.db "FlipSpriteY", 0
  359 D1:C272 46 6C 69 70 
              53 70 72 69 
              74 65 58 00 C71:	.db "FlipSpriteX", 0
  360 D1:C27E 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 00 -  -  C72:	.db "RotateSpriteC", 0
  361 D1:C28C 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 43 00 -  C73:	.db "RotateSpriteCC", 0
  362 D1:C29B 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              48 61 6C 66 
              00 -  -  -  C74:	.db "RotateSpriteHalf", 0
  363 D1:C2AC 50 6F 6C 79 
              67 6F 6E 00 C75:	.db "Polygon", 0
  364 D1:C2B4 50 6F 6C 79 
              67 6F 6E 5F 
              4E 6F 43 6C 
              69 70 00 -  C76:	.db "Polygon_NoClip", 0
  365 D1:C2C3 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              00 -  -  -  C77:	.db "FillTriangle", 0
  366 D1:C2D0 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              5F 4E 6F 43 
              6C 69 70 00 C78:	.db "FillTriangle_NoClip", 0
  367 D1:C2E4 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              53 70 72 69 
              74 65 00 -  C79:	.db "LZDecompressSprite", 0
  368 D1:C2F7 53 65 74 54 
              65 78 74 53 
              63 61 6C 65 
              00 -  -  -  C80:	.db "SetTextScale", 0
  369 D1:C304 53 65 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C81:	.db "SetTransparentColor", 0
  370 D1:C318 -  -  -  -  Tab6:
  371 D1:C318 5A 65 72 6F 
              53 63 72 65 
              65 6E 00 -  C82:	.db "ZeroScreen", 0
  372 D1:C323 53 65 74 54 
              65 78 74 43 
              6F 6E 66 69 
              67 00 -  -  C83:	.db "SetTextConfig", 0
  373 D1:C331 47 65 74 53 
              70 72 69 74 
              65 43 68 61 
              72 00 -  -  C84:	.db "GetSpriteChar", 0
  374 D1:C33F 00 -  -  -  		.db 0
  375 D1:C340 -  -  -  -  TabData:
  376 D1:C340 D9 01 00 -  	.dl Tab1 - KeyHook_start
  377 D1:C343 6E 02 00 -  	.dl Tab2 - KeyHook_start
  378 D1:C346 4C 03 00 -  	.dl Tab3 - KeyHook_start
  379 D1:C349 13 04 00 -  	.dl Tab4 - KeyHook_start
  380 D1:C34C E2 04 00 -  	.dl Tab5 - KeyHook_start
  381 D1:C34F F1 05 00 -  	.dl Tab6 - KeyHook_start
  382 D1:C352 -  -  -  -  	
  383 D1:C352 -  -  -  -  CData5:
  384 D1:C352 03 02 00 -  	.dl C6 - KeyHook_start
  385 D1:C355 09 02 00 -  	.dl C7 - KeyHook_start
  386 D1:C358 0D 02 00 -  	.dl C8 - KeyHook_start
  387 D1:C35B 16 02 00 -  	.dl C9 - KeyHook_start
  388 D1:C35E 28 02 00 -  	.dl C10 - KeyHook_start
  389 D1:C361 33 02 00 -  	.dl C11 - KeyHook_start
  390 D1:C364 3E 02 00 -  	.dl C12 - KeyHook_start
  391 D1:C367 47 02 00 -  	.dl C13 - KeyHook_start
  392 D1:C36A 50 02 00 -  	.dl C14 - KeyHook_start
  393 D1:C36D 58 02 00 -  	.dl C15 - KeyHook_start
  394 D1:C370 60 02 00 -  	.dl C16 - KeyHook_start
  395 D1:C373 69 02 00 -  	.dl C17 - KeyHook_start
  396 D1:C376 6E 02 00 -  	.dl C18 - KeyHook_start
  397 D1:C379 78 02 00 -  	.dl C19 - KeyHook_start
  398 D1:C37C 81 02 00 -  	.dl C20 - KeyHook_start
  399 D1:C37F 8B 02 00 -  	.dl C21 - KeyHook_start
  400 D1:C382 94 02 00 -  	.dl C22 - KeyHook_start
  401 D1:C385 9E 02 00 -  	.dl C23 - KeyHook_start
  402 D1:C388 AA 02 00 -  	.dl C24 - KeyHook_start
  403 D1:C38B B8 02 00 -  	.dl C25 - KeyHook_start
  404 D1:C38E C2 02 00 -  	.dl C26 - KeyHook_start
  405 D1:C391 D1 02 00 -  	.dl C27 - KeyHook_start
  406 D1:C394 E0 02 00 -  	.dl C28 - KeyHook_start
  407 D1:C397 F8 02 00 -  	.dl C29 - KeyHook_start
  408 D1:C39A 0A 03 00 -  	.dl C30 - KeyHook_start
  409 D1:C39D 1F 03 00 -  	.dl C31 - KeyHook_start
  410 D1:C3A0 30 03 00 -  	.dl C32 - KeyHook_start
  411 D1:C3A3 3F 03 00 -  	.dl C33 - KeyHook_start
  412 D1:C3A6 4C 03 00 -  	.dl C34 - KeyHook_start
  413 D1:C3A9 55 03 00 -  	.dl C35 - KeyHook_start
  414 D1:C3AC 5E 03 00 -  	.dl C36 - KeyHook_start
  415 D1:C3AF 63 03 00 -  	.dl C37 - KeyHook_start
  416 D1:C3B2 6D 03 00 -  	.dl C38 - KeyHook_start
  417 D1:C3B5 76 03 00 -  	.dl C39 - KeyHook_start
  418 D1:C3B8 7D 03 00 -  	.dl C40 - KeyHook_start
  419 D1:C3BB 88 03 00 -  	.dl C41 - KeyHook_start
  420 D1:C3BE 92 03 00 -  	.dl C42 - KeyHook_start
  421 D1:C3C1 A0 03 00 -  	.dl C43 - KeyHook_start
  422 D1:C3C4 AC 03 00 -  	.dl C44 - KeyHook_start
  423 D1:C3C7 BD 03 00 -  	.dl C45 - KeyHook_start
  424 D1:C3CA CD 03 00 -  	.dl C46 - KeyHook_start
  425 D1:C3CD DF 03 00 -  	.dl C47 - KeyHook_start
  426 D1:C3D0 F0 03 00 -  	.dl C48 - KeyHook_start
  427 D1:C3D3 05 04 00 -  	.dl C49 - KeyHook_start
  428 D1:C3D6 13 04 00 -  	.dl C50 - KeyHook_start
  429 D1:C3D9 21 04 00 -  	.dl C51 - KeyHook_start
  430 D1:C3DC 2B 04 00 -  	.dl C52 - KeyHook_start
  431 D1:C3DF 33 04 00 -  	.dl C53 - KeyHook_start
  432 D1:C3E2 3D 04 00 -  	.dl C54 - KeyHook_start
  433 D1:C3E5 48 04 00 -  	.dl C55 - KeyHook_start
  434 D1:C3E8 50 04 00 -  	.dl C56 - KeyHook_start
  435 D1:C3EB 5F 04 00 -  	.dl C57 - KeyHook_start
  436 D1:C3EE 72 04 00 -  	.dl C58 - KeyHook_start
  437 D1:C3F1 8C 04 00 -  	.dl C59 - KeyHook_start
  438 D1:C3F4 94 04 00 -  	.dl C60 - KeyHook_start
  439 D1:C3F7 A2 04 00 -  	.dl C61 - KeyHook_start
  440 D1:C3FA AF 04 00 -  	.dl C62 - KeyHook_start
  441 D1:C3FD BB 04 00 -  	.dl C63 - KeyHook_start
  442 D1:C400 C2 04 00 -  	.dl C64 - KeyHook_start
  443 D1:C403 D4 04 00 -  	.dl C65 - KeyHook_start
  444 D1:C406 E2 04 00 -  	.dl C66 - KeyHook_start
  445 D1:C409 FB 04 00 -  	.dl C67 - KeyHook_start
  446 D1:C40C 0C 05 00 -  	.dl C68 - KeyHook_start
  447 D1:C40F 20 05 00 -  	.dl C69 - KeyHook_start
  448 D1:C412 3F 05 00 -  	.dl C70 - KeyHook_start
  449 D1:C415 4B 05 00 -  	.dl C71 - KeyHook_start
  450 D1:C418 57 05 00 -  	.dl C72 - KeyHook_start
  451 D1:C41B 65 05 00 -  	.dl C73 - KeyHook_start
  452 D1:C41E 74 05 00 -  	.dl C74 - KeyHook_start
  453 D1:C421 85 05 00 -  	.dl C75 - KeyHook_start
  454 D1:C424 8D 05 00 -  	.dl C76 - KeyHook_start
  455 D1:C427 9C 05 00 -  	.dl C77 - KeyHook_start
  456 D1:C42A A9 05 00 -  	.dl C78 - KeyHook_start
  457 D1:C42D BD 05 00 -  	.dl C79 - KeyHook_start
  458 D1:C430 D0 05 00 -  	.dl C80 - KeyHook_start
  459 D1:C433 DD 05 00 -  	.dl C81 - KeyHook_start
  460 D1:C436 F1 05 00 -  	.dl C82 - KeyHook_start
  461 D1:C439 FC 05 00 -  	.dl C83 - KeyHook_start
  462 D1:C43C 0A 06 00 -  	.dl C84 - KeyHook_start
  463 D1:C43F -  -  -  -  	
  464 D1:C43F -  -  -  -  #define AMOUNT_OF_CUSTOM_TOKENS 4
  465 D1:C43F 08 45 78 65 
              63 48 65 78 
              28 00 -  -  Token1: .db 8,  "ExecHex(", 0
  466 D1:C449 0D 44 65 66 
              69 6E 65 53 
              70 72 69 74 
              65 28 00 -  Token2: .db 13, "DefineSprite(", 0
  467 D1:C458 05 43 61 6C 
              6C 20 00 -  Token3: .db 5,  "Call ", 0
  468 D1:C45F 0C 43 6F 6D 
              70 69 6C 65 
              50 72 67 6D 
              28 00 -  -  Token4: .db 12, "CompilePrgm(", 0
  469 D1:C46D -  -  -  -  CustomTokensProgramText:
  470 D1:C46D 50 52 4F 47 
              52 41 4D 3A 
              00 -  -  -  	.db "PROGRAM:", 0
  471 D1:C476 -  -  -  -  KeyHook_end:
  472 D1:C476 -  -  -  -  
  473 D1:C476 -  -  -  -  TokenHook_start:
  474 D1:C476 83 -  -  -  	.db 83h
  475 D1:C477 7A -  -  -  	ld a, d
  476 D1:C478 FE 04 -  -  	cp 4
  477 D1:C47A C0 -  -  -  	ret nz
  478 D1:C47B 7B -  -  -  	ld a, e
  479 D1:C47C FE 14 -  -  	cp 5+3+(AMOUNT_OF_CUSTOM_TOKENS*3)
  480 D1:C47E D0 -  -  -  	ret nc
  481 D1:C47F D6 05 -  -  	sub 5
  482 D1:C481 ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
  483 D1:C486 21 6E 07 00 	ld hl, TokenHook_data - KeyHook_start
  484 D1:C48A 19 -  -  -  	add hl, de
  485 D1:C48B 01 00 00 00 	ld bc, 0
  486 D1:C48F 4F -  -  -  	ld c, a
  487 D1:C490 09 -  -  -  	add hl, bc
  488 D1:C491 ED 27 -  -  	ld hl, (hl)
  489 D1:C493 19 -  -  -  	add hl, de
  490 D1:C494 C9 -  -  -  	ret
  491 D1:C495 -  -  -  -  TokenHook_data:
  492 D1:C495 17 07 00 -  	.dl Token1 - KeyHook_start - 1
  493 D1:C498 21 07 00 -  	.dl Token2 - KeyHook_start - 1
  494 D1:C49B 30 07 00 -  	.dl Token3 - KeyHook_start - 1
  495 D1:C49E 37 07 00 -  	.dl Token4 - KeyHook_start - 1
  496 D1:C4A1 -  -  -  -  TokenHook_end:
  497 D1:C4A1 -  -  -  -  
  498 D1:C4A1 -  -  -  -  CursorHook_start:
  499 D1:C4A1 83 -  -  -  	.db 83h
  500 D1:C4A2 FE 24 -  -  	cp 24h
  501 D1:C4A4 20 06 -  -  	jr nz, +_
  502 D1:C4A6 3C -  -  -  	inc a
  503 D1:C4A7 3A 99 05 D0 	ld a, (curUnder)
  504 D1:C4AB C9 -  -  -  	ret
  505 D1:C4AC FE 22 -  -  _:	cp 22h
  506 D1:C4AE C0 -  -  -  	ret nz
  507 D1:C4AF 3A E0 07 D0 	ld a, (cxCurApp)
  508 D1:C4B3 FE 46 -  -  	cp cxPrgmEdit
  509 D1:C4B5 C0 -  -  -  	ret nz
  510 D1:C4B6 2A 3A 24 D0 	ld hl, (editCursor)
  511 D1:C4BA 7E -  -  -  	ld a, (hl)
  512 D1:C4BB FE B3 -  -  	cp tDet
  513 D1:C4BD C0 -  -  -  	ret nz
  514 D1:C4BE -  -  -  -  DrawDetText:
  515 D1:C4BE FD CB B0 46 	bit displayed_det, (iy+fAlways1)
  516 D1:C4C2 C0 -  -  -  	ret nz
  517 D1:C4C3 2A 3D 24 D0 	ld hl, (editTail)
  518 D1:C4C7 23 -  -  -  	inc hl
  519 D1:C4C8 7E -  -  -  	ld a, (hl)
  520 D1:C4C9 D6 30 -  -  	sub t0
  521 D1:C4CB D8 -  -  -  	ret c
  522 D1:C4CC FE 0A -  -  	cp t9-t0+1
  523 D1:C4CE ED 4B 40 24 
              D0 -  -  -  	ld bc, (editBtm)
  524 D1:C4D3 11 00 00 00 	ld de, 0
  525 D1:C4D7 5F -  -  -  	ld e, a
  526 D1:C4D8 38 02 -  -  	jr c, GetDetValueLoop
  527 D1:C4DA -  -  -  -  WrongDetValue:
  528 D1:C4DA 3C -  -  -  	inc a
  529 D1:C4DB C9 -  -  -  	ret
  530 D1:C4DC -  -  -  -  GetDetValueLoop:
  531 D1:C4DC 23 -  -  -  	inc hl
  532 D1:C4DD B7 -  -  -  	or a
  533 D1:C4DE ED 42 -  -  	sbc hl, bc
  534 D1:C4E0 28 1C -  -  	jr z, GetDetValueStop
  535 D1:C4E2 09 -  -  -  	add hl, bc
  536 D1:C4E3 7E -  -  -  	ld a, (hl)
  537 D1:C4E4 D6 30 -  -  	sub t0
  538 D1:C4E6 38 16 -  -  	jr c, GetDetValueStop
  539 D1:C4E8 FE 0A -  -  	cp t9-t0+1
  540 D1:C4EA 30 12 -  -  	jr nc, GetDetValueStop
  541 D1:C4EC E5 -  -  -  	push hl
  542 D1:C4ED EB -  -  -  		ex de, hl
  543 D1:C4EE 29 -  -  -  		add hl, hl
  544 D1:C4EF E5 -  -  -  		push hl
  545 D1:C4F0 D1 -  -  -  		pop de
  546 D1:C4F1 29 -  -  -  		add hl, hl
  547 D1:C4F2 29 -  -  -  		add hl, hl
  548 D1:C4F3 19 -  -  -  		add hl, de
  549 D1:C4F4 11 00 00 00 		ld de, 0
  550 D1:C4F8 5F -  -  -  		ld e, a
  551 D1:C4F9 19 -  -  -  		add hl, de
  552 D1:C4FA EB -  -  -  		ex de, hl
  553 D1:C4FB E1 -  -  -  	pop hl
  554 D1:C4FC 18 DE -  -  	jr GetDetValueLoop
  555 D1:C4FE -  -  -  -  GetDetValueStop:
  556 D1:C4FE EB -  -  -  	ex de, hl
  557 D1:C4FF 11 4F 00 00 	ld de, AMOUNT_OF_C_FUNCTIONS
  558 D1:C503 B7 -  -  -  	or a
  559 D1:C504 ED 52 -  -  	sbc hl, de
  560 D1:C506 30 D2 -  -  	jr nc, WrongDetValue
  561 D1:C508 19 -  -  -  	add hl, de
  562 D1:C509 26 03 -  -  	ld h, 3
  563 D1:C50B ED 6C -  -  	mlt hl
  564 D1:C50D 11 2B 06 00 	ld de, CData5 - KeyHook_start
  565 D1:C511 19 -  -  -  	add hl, de
  566 D1:C512 ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
  567 D1:C517 19 -  -  -  	add hl, de
  568 D1:C518 ED 27 -  -  	ld hl, (hl)
  569 D1:C51A 19 -  -  -  	add hl, de
  570 D1:C51B 11 1C E7 00 	ld de, 000E71Ch
  571 D1:C51F 40 ED 53 AC 
              26 -  -  -  	ld.sis (drawFGColor - 0D00000h), de
  572 D1:C524 40 ED 5B CC 
              2A -  -  -  	ld.sis de, (statusBarBGColor - 0D00000h)
  573 D1:C529 40 ED 53 AA 
              26 -  -  -  	ld.sis (drawBGColor - 0D00000h), de
  574 D1:C52E 3E 0E -  -  	ld a, 14
  575 D1:C530 32 D5 08 D0 	ld (penRow),a
  576 D1:C534 11 02 00 00 	ld de, 2
  577 D1:C538 40 ED 53 D2 
              08 -  -  -  	ld.sis (penCol - 0D00000h), de
  578 D1:C53D CD 34 08 02 	call _VPutS
  579 D1:C541 11 FF FF 00 	ld de, $FFFF
  580 D1:C545 40 ED 53 AA 
              26 -  -  -  	ld.sis (drawBGColor - 0D00000h), de
  581 D1:C54A FD CB B0 C6 	set displayed_det, (iy+fAlways1)
  582 D1:C54E C9 -  -  -  	ret
  583 D1:C54F -  -  -  -  CursorHook_end:
  584 D1:C54F -  -  -  -  
  585 D1:C54F -  -  -  -  Hooks_end:
Listing for file "ICE.asm"
  445 D1:C54F -  -  -  -  #include "operators functions/functions.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\functions.asm"
    1 D1:C54F -  -  -  -  ExecuteFunction:
    2 D1:C54F E5 -  -  -  	push hl
    3 D1:C550 21 4B E8 D1 		ld hl, FunctionsWithReturnValueArguments
    4 D1:C554 01 06 00 00 		ld bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValueArguments
    5 D1:C558 ED B1 -  -  		cpir
    6 D1:C55A 06 03 -  -  		ld b, 3
    7 D1:C55C ED 4C -  -  		mlt bc
    8 D1:C55E 21 51 E8 D1 		ld hl, FunctionsWithReturnValueStart
    9 D1:C562 09 -  -  -  		add hl, bc
   10 D1:C563 ED 27 -  -  		ld hl, (hl)
   11 D1:C565 22 6B C5 D1 		ld (JumpFunction), hl
   12 D1:C569 E1 -  -  -  	pop hl
   13 D1:C56A -  -  -  -  JumpFunction = $+1
   14 D1:C56A C3 00 00 00 	jp 0
   15 D1:C56E -  -  -  -  	
   16 D1:C56E -  -  -  -  functionPrgm:
   17 D1:C56E CD 93 AC D1 	call MaybeInsertIYFlags
   18 D1:C572 3E 21 -  -  	ld a, 021h
   19 D1:C574 CD 0A AD D1 	call InsertA															; ld hl, *
   20 D1:C578 CD 21 AD D1 	call InsertProgramPtrToDataOffset
   21 D1:C57C 2A AF E9 D1 	ld hl, (programDataDataPtr)
   22 D1:C580 E5 -  -  -  	push hl
   23 D1:C581 CD 4C AC D1 		call InsertHL														; ld hl, programname
   24 D1:C585 E1 -  -  -  	pop hl
   25 D1:C586 36 05 -  -  	ld (hl), ProgObj
   26 D1:C588 CD 19 B2 D1 	call GetProgramName
   27 D1:C58C 23 -  -  -  	inc hl
   28 D1:C58D 22 AF E9 D1 	ld (programDataDataPtr), hl
   29 D1:C591 3E CD -  -  	ld a, 0CDh
   30 D1:C593 21 20 03 02 	ld hl, _Mov9ToOP1
   31 D1:C597 CD 48 AC D1 	call InsertAHL															; call _Mov9ToOP1
   32 D1:C59B 3E FD -  -  	ld a, 0FDh
   33 D1:C59D 21 CB 08 CE 	ld hl, 0CE08CBh
   34 D1:C5A1 CD 48 AC D1 	call InsertAHL															; set 1, (iy+8)
   35 D1:C5A5 3E CD -  -  	ld a, 0CDh
   36 D1:C5A7 21 00 0F 02 	ld hl, _ParseInp
   37 D1:C5AB CD 48 AC D1 	call InsertAHL															; call _ParseInp
   38 D1:C5AF 3E FD -  -  	ld a, 0FDh
   39 D1:C5B1 21 CB 08 8E 	ld hl, 08E08CBh
   40 D1:C5B5 C3 48 AC D1 	jp InsertAHL															; res 1, (iy+8)
   41 D1:C5B9 -  -  -  -  	
   42 D1:C5B9 -  -  -  -  
   43 D1:C5B9 -  -  -  -  functionOutput:
   44 D1:C5B9 CD 93 AC D1 	call MaybeInsertIYFlags
   45 D1:C5BD 3E 01 -  -  	ld a, 1
   46 D1:C5BF 32 B4 E9 D1 	ld (openedParensF), a
   47 D1:C5C3 CD 28 10 02 	call _IncFetch
   48 D1:C5C7 CD B0 B2 D1 	call ParseExpression
   49 D1:C5CB FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   50 D1:C5CF FD CB BE 86 	res triggered_a_comma, (iy+fExpression3)
   51 D1:C5D3 CA 36 AF D1 	jp z, ErrorSyntax
   52 D1:C5D7 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   53 D1:C5DB 20 08 -  -  	jr nz, OutputRowIsNumber
   54 D1:C5DD -  -  -  -  OutputRowIsVariable:
   55 D1:C5DD 3E 7D -  -  	ld a, 07Dh
   56 D1:C5DF CD 0A AD D1 	call InsertA															; ld a, l
   57 D1:C5E3 18 0E -  -  	jr +_
   58 D1:C5E5 -  -  -  -  OutputRowIsNumber:
   59 D1:C5E5 2A 9A E9 D1 	ld hl, (programPtr)
   60 D1:C5E9 2B -  -  -  	dec hl
   61 D1:C5EA 2B -  -  -  	dec hl
   62 D1:C5EB 22 9A E9 D1 	ld (programPtr), hl
   63 D1:C5EF 2B -  -  -  	dec hl
   64 D1:C5F0 2B -  -  -  	dec hl
   65 D1:C5F1 36 3E -  -  	ld (hl), 03Eh															; ld a, *
   66 D1:C5F3 3E 32 -  -  _:	ld a, 032h
   67 D1:C5F5 21 95 05 D0 	ld hl, curRow
   68 D1:C5F9 CD 48 AC D1 	call InsertAHL															; ld (curRow), a
   69 D1:C5FD CD 28 10 02 	call _IncFetch
   70 D1:C601 CD B0 B2 D1 	call ParseExpression
   71 D1:C605 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   72 D1:C609 FD CB BE 86 	res triggered_a_comma, (iy+fExpression3)
   73 D1:C60D CA 36 AF D1 	jp z, ErrorSyntax
   74 D1:C611 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   75 D1:C615 20 08 -  -  	jr nz, OutputColumnIsNumber
   76 D1:C617 -  -  -  -  OutputColumnIsVariable:
   77 D1:C617 3E 7D -  -  	ld a, 07Dh
   78 D1:C619 CD 0A AD D1 	call InsertA															; ld a, l
   79 D1:C61D 18 0E -  -  	jr +_
   80 D1:C61F -  -  -  -  OutputColumnIsNumber:
   81 D1:C61F 2A 9A E9 D1 	ld hl, (programPtr)
   82 D1:C623 2B -  -  -  	dec hl
   83 D1:C624 2B -  -  -  	dec hl
   84 D1:C625 22 9A E9 D1 	ld (programPtr), hl
   85 D1:C629 2B -  -  -  	dec hl
   86 D1:C62A 2B -  -  -  	dec hl
   87 D1:C62B 36 3E -  -  	ld (hl), 03Eh															; ld a, *
   88 D1:C62D 3E 32 -  -  _:	ld a, 032h
   89 D1:C62F 21 96 05 D0 	ld hl, curCol
   90 D1:C633 CD 48 AC D1 	call InsertAHL															; ld (curCol), a
   91 D1:C637 F6 01 -  -  	or a, 1																	; rest zero flag
   92 D1:C639 CD 54 C6 D1 	call DisplayNumberOrString
   93 D1:C63D C2 36 AF D1 	jp nz, ErrorSyntax
   94 D1:C641 C9 -  -  -  	ret
   95 D1:C642 -  -  -  -  	
   96 D1:C642 -  -  -  -  functionDisp:
   97 D1:C642 CD 93 AC D1 	call MaybeInsertIYFlags
   98 D1:C646 3E 01 -  -  	ld a, 1
   99 D1:C648 32 B4 E9 D1 	ld (openedParensF), a
  100 D1:C64C 3D -  -  -  	dec a																	; set zero flag
  101 D1:C64D CD 54 C6 D1 	call DisplayNumberOrString
  102 D1:C651 C8 -  -  -  	ret z
  103 D1:C652 18 EE -  -  	jr functionDisp
  104 D1:C654 -  -  -  -  	
  105 D1:C654 -  -  -  -  DisplayNumberOrString:
  106 D1:C654 F5 -  -  -  	push af
  107 D1:C655 CD 28 10 02 		call _IncFetch
  108 D1:C659 CD B0 B2 D1 		call ParseExpression
  109 D1:C65D ED 5B 9A E9 
              D1 -  -  -  		ld de, (programPtr)
  110 D1:C662 01 0E 00 00 		ld bc, 14
  111 D1:C666 FD CB C0 7E 		bit output_is_string, (iy+fExpression1)
  112 D1:C66A 20 0F -  -  		jr nz, DispString
  113 D1:C66C 21 CC ED D1 		ld hl, DispNumberRoutine
  114 D1:C670 F1 -  -  -  	pop af
  115 D1:C671 28 16 -  -  	jr z, +_
  116 D1:C673 21 C6 ED D1 	ld hl, DispNumberRoutine-6
  117 D1:C677 0E 08 -  -  	ld c, 8
  118 D1:C679 18 0E -  -  	jr +_
  119 D1:C67B -  -  -  -  DispString:
  120 D1:C67B 21 DA ED D1 		ld hl, DispStringRoutine
  121 D1:C67F 0B -  -  -  		dec bc
  122 D1:C680 F1 -  -  -  	pop af
  123 D1:C681 28 06 -  -  	jr z, +_
  124 D1:C683 21 DF ED D1 	ld hl, DispStringRoutine+5
  125 D1:C687 0E 08 -  -  	ld c, 8
  126 D1:C689 ED B0 -  -  _:	ldir
  127 D1:C68B ED 53 9A E9 
              D1 -  -  -  	ld (programPtr), de
  128 D1:C690 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
  129 D1:C694 C9 -  -  -  	ret
  130 D1:C695 -  -  -  -  	
  131 D1:C695 -  -  -  -  	
  132 D1:C695 -  -  -  -  functionLbl:
  133 D1:C695 DD 2A A0 E9 
              D1 -  -  -  	ld ix, (labelPtr)
  134 D1:C69A 2A 9A E9 D1 	ld hl, (programPtr)
  135 D1:C69E DD 2F 00 -  	ld (ix), hl
  136 D1:C6A1 2A 1A 23 D0 	ld hl, (curPC)
  137 D1:C6A5 23 -  -  -  	inc hl
  138 D1:C6A6 DD 2F 03 -  	ld (ix+3), hl
  139 D1:C6A9 ED 22 06 -  	lea hl, ix+6
  140 D1:C6AC 22 A0 E9 D1 	ld (labelPtr), hl
  141 D1:C6B0 -  -  -  -  functionSkipLine:
  142 D1:C6B0 2A 1D 23 D0 	ld hl, (endPC)
  143 D1:C6B4 ED 5B 1A 23 
              D0 -  -  -  	ld de, (curPC)
  144 D1:C6B9 B7 -  -  -  	or a
  145 D1:C6BA ED 52 -  -  	sbc hl, de
  146 D1:C6BC D8 -  -  -  	ret c
  147 D1:C6BD 23 -  -  -  	inc hl
  148 D1:C6BE E5 -  -  -  	push hl
  149 D1:C6BF C1 -  -  -  	pop bc
  150 D1:C6C0 EB -  -  -  	ex de, hl
  151 D1:C6C1 3E 3F -  -  	ld a, tEnter
  152 D1:C6C3 ED B1 -  -  	cpir
  153 D1:C6C5 2B -  -  -  	dec hl
  154 D1:C6C6 22 1A 23 D0 	ld (curPC), hl
  155 D1:C6CA C9 -  -  -  	ret
  156 D1:C6CB -  -  -  -  	
  157 D1:C6CB -  -  -  -  functionCall:
  158 D1:C6CB 3E CD -  -  	ld a, 0CDh
  159 D1:C6CD 18 02 -  -  	jr $+4
  160 D1:C6CF -  -  -  -  functionGoto:
  161 D1:C6CF 3E C3 -  -  	ld a, 0C3h
  162 D1:C6D1 CD 0A AD D1 	call InsertA															; jp/call ******
  163 D1:C6D5 DD 2A A3 E9 
              D1 -  -  -  	ld ix, (gotoPtr)
  164 D1:C6DA 2A 9A E9 D1 	ld hl, (programPtr)
  165 D1:C6DE DD 2F 00 -  	ld (ix), hl
  166 D1:C6E1 2A 1A 23 D0 	ld hl, (curPC)
  167 D1:C6E5 23 -  -  -  	inc hl
  168 D1:C6E6 DD 2F 03 -  	ld (ix+3), hl
  169 D1:C6E9 ED 22 06 -  	lea hl, ix+6
  170 D1:C6EC 22 A3 E9 D1 	ld (gotoPtr), hl
  171 D1:C6F0 CD 4C AC D1 	call InsertHL															; jp/call RANDOM
  172 D1:C6F4 18 BA -  -  	jr functionSkipLine
  173 D1:C6F6 -  -  -  -  	
  174 D1:C6F6 -  -  -  -  functionReturn:
  175 D1:C6F6 CD C0 0F 02 	call _NxtFetch
  176 D1:C6FA 30 04 -  -  	jr nc, +_
  177 D1:C6FC FD CB C0 D6 	set last_token_is_ret, (iy+fExpression1)
  178 D1:C700 FE CE -  -  _:	cp tIf
  179 D1:C702 20 1C -  -  	jr nz, +_
  180 D1:C704 CD 28 10 02 	call _IncFetch
  181 D1:C708 CD 28 10 02 	call _IncFetch
  182 D1:C70C CD B0 B2 D1 	call ParseExpression
  183 D1:C710 3E 19 -  -  	ld a, 019h
  184 D1:C712 CD 0A AD D1 	call InsertA															; add hl, de
  185 D1:C716 3E B7 -  -  	ld a, 0B7h
  186 D1:C718 21 ED 52 C0 	ld hl, 0C052EDh
  187 D1:C71C C3 48 AC D1 	jp InsertAHL															; or a \ sbc hl, de \ ret nz
  188 D1:C720 3E C9 -  -  _:	ld a, 0C9h
  189 D1:C722 C3 0A AD D1 	jp InsertA																; ret
  190 D1:C726 -  -  -  -  		
  191 D1:C726 -  -  -  -  functionRepeat:
  192 D1:C726 21 B7 E9 D1 	ld hl, amountOfEnds
  193 D1:C72A 34 -  -  -  	inc (hl)
  194 D1:C72B 2A 9A E9 D1 	ld hl, (programPtr)
  195 D1:C72F 11 81 7C FC 	ld de, UserMem - program
  196 D1:C733 19 -  -  -  	add hl, de
  197 D1:C734 E5 -  -  -  	push hl
  198 D1:C735 2A 1A 23 D0 		ld hl, (curPC)
  199 D1:C739 23 -  -  -  		inc hl
  200 D1:C73A E5 -  -  -  		push hl
  201 D1:C73B CD 28 10 02 _:			call _IncFetch
  202 D1:C73F DA 36 AF D1 			jp c, ErrorSyntax
  203 D1:C743 FE 3F -  -  			cp tEnter
  204 D1:C745 20 F4 -  -  			jr nz, -_
  205 D1:C747 CD 95 AA D1 			call ParseProgramUntilEnd
  206 D1:C74B FE D0 -  -  			cp tElse
  207 D1:C74D CA 36 AF D1 			jp z, ErrorSyntax
  208 D1:C751 ED 5B 1A 23 
              D0 -  -  -  			ld de, (curPC)
  209 D1:C756 E1 -  -  -  		pop hl
  210 D1:C757 22 1A 23 D0 		ld (curPC), hl
  211 D1:C75B D5 -  -  -  		push de
  212 D1:C75C CD B0 B2 D1 			call ParseExpression
  213 D1:C760 D1 -  -  -  		pop de
  214 D1:C761 ED 53 1A 23 
              D0 -  -  -  		ld (curPC), de
  215 D1:C766 FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  216 D1:C76A C2 F0 C7 D1 		jp nz, functionRepeatInfinite
  217 D1:C76E FD CB C0 6E 		bit ans_set_z_flag, (iy+fExpression1)
  218 D1:C772 28 14 -  -  		jr z, +_
  219 D1:C774 2A 9A E9 D1 		ld hl, (programPtr)
  220 D1:C778 2B -  -  -  		dec hl
  221 D1:C779 2B -  -  -  		dec hl
  222 D1:C77A 2B -  -  -  		dec hl
  223 D1:C77B 7E -  -  -  		ld a, (hl)
  224 D1:C77C DD 67 -  -  		ld ixh, a
  225 D1:C77E 2B -  -  -  		dec hl
  226 D1:C77F 2B -  -  -  		dec hl
  227 D1:C780 2B -  -  -  		dec hl
  228 D1:C781 2B -  -  -  		dec hl
  229 D1:C782 22 9A E9 D1 		ld (programPtr), hl
  230 D1:C786 18 1D -  -  		jr functionRepeatInsert
  231 D1:C788 FD CB BF 4E _:		bit last_token_was_not, (iy+fExpression2)
  232 D1:C78C 28 0D -  -  		jr z, InsertNormalRepeat2
  233 D1:C78E 2A 9A E9 D1 		ld hl, (programPtr)
  234 D1:C792 11 F8 FF FF 		ld de, -8
  235 D1:C796 19 -  -  -  		add hl, de
  236 D1:C797 22 9A E9 D1 		ld (programPtr), hl
  237 D1:C79B -  -  -  -  InsertNormalRepeat2:
  238 D1:C79B 3E 19 -  -  		ld a, 019h
  239 D1:C79D 21 B7 ED 52 		ld hl, 052EDB7h
  240 D1:C7A1 CD 48 AC D1 		call InsertAHL														; add hl, de \ or a \ sbc hl, de
  241 D1:C7A5 -  -  -  -  functionRepeatInsert:
  242 D1:C7A5 01 81 7C FC 		ld bc, UserMem - program
  243 D1:C7A9 09 -  -  -  		add hl, bc
  244 D1:C7AA D1 -  -  -  	pop de
  245 D1:C7AB B7 -  -  -  	or a
  246 D1:C7AC ED 52 -  -  	sbc hl, de
  247 D1:C7AE 7C -  -  -  	ld a, h
  248 D1:C7AF B7 -  -  -  	or a
  249 D1:C7B0 20 23 -  -  	jr nz, functionRepeatLarge
  250 D1:C7B2 7D -  -  -  	ld a, l
  251 D1:C7B3 2F -  -  -  	cpl
  252 D1:C7B4 3D -  -  -  	dec a
  253 D1:C7B5 FE 80 -  -  	cp %10000000
  254 D1:C7B7 38 1C -  -  	jr c, functionRepeatLarge
  255 D1:C7B9 -  -  -  -  functionRepeatSmall:
  256 D1:C7B9 47 -  -  -  	ld b, a
  257 D1:C7BA 3E 28 -  -  	ld a, 028h
  258 D1:C7BC FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  259 D1:C7C0 28 02 -  -  	jr z, +_
  260 D1:C7C2 DD 7C -  -  	ld a, ixh
  261 D1:C7C4 FD CB BF 4E _:	bit last_token_was_not, (iy+fExpression2)
  262 D1:C7C8 28 02 -  -  	jr z, $+4
  263 D1:C7CA EE 08 -  -  	xor 8
  264 D1:C7CC CD 0A AD D1 	call InsertA															; jr [n]z, *
  265 D1:C7D0 78 -  -  -  	ld a, b
  266 D1:C7D1 C3 0A AD D1 	jp InsertA																; jr [n]z, *
  267 D1:C7D5 -  -  -  -  functionRepeatLarge:
  268 D1:C7D5 EB -  -  -  	ex de, hl
  269 D1:C7D6 FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  270 D1:C7DA 28 06 -  -  	jr z, +_
  271 D1:C7DC DD 7C -  -  	ld a, ixh
  272 D1:C7DE C6 A2 -  -  	add a, 0A2h
  273 D1:C7E0 18 02 -  -  	jr ++_
  274 D1:C7E2 3E CA -  -  _:	ld a, 0CAh
  275 D1:C7E4 FD CB BF 4E _:	bit last_token_was_not, (iy+fExpression2)
  276 D1:C7E8 28 02 -  -  	jr z, $+4
  277 D1:C7EA EE 08 -  -  	xor 8
  278 D1:C7EC C3 48 AC D1 	jp InsertAHL															; jp [n]z, XXXXXX
  279 D1:C7F0 -  -  -  -  functionRepeatInfinite:
  280 D1:C7F0 2A 9A E9 D1 		ld hl, (programPtr)
  281 D1:C7F4 2B -  -  -  		dec hl
  282 D1:C7F5 2B -  -  -  		dec hl
  283 D1:C7F6 2B -  -  -  		dec hl
  284 D1:C7F7 2B -  -  -  		dec hl
  285 D1:C7F8 22 9A E9 D1 		ld (programPtr), hl
  286 D1:C7FC E5 -  -  -  		push hl
  287 D1:C7FD 23 -  -  -  			inc hl
  288 D1:C7FE ED 27 -  -  			ld hl, (hl)
  289 D1:C800 19 -  -  -  			add hl, de
  290 D1:C801 B7 -  -  -  			or a
  291 D1:C802 ED 52 -  -  			sbc hl, de
  292 D1:C804 E1 -  -  -  		pop hl
  293 D1:C805 C0 -  -  -  		ret nz
  294 D1:C806 11 81 7C FC 		ld de, UserMem - program
  295 D1:C80A 19 -  -  -  		add hl, de
  296 D1:C80B D1 -  -  -  	pop de
  297 D1:C80C B7 -  -  -  	or a
  298 D1:C80D ED 52 -  -  	sbc hl, de
  299 D1:C80F 7C -  -  -  	ld a, h
  300 D1:C810 B7 -  -  -  	or a
  301 D1:C811 20 13 -  -  	jr nz, functionRepeatInfiniteLarge
  302 D1:C813 7D -  -  -  	ld a, l
  303 D1:C814 2F -  -  -  	cpl
  304 D1:C815 3D -  -  -  	dec a
  305 D1:C816 FE 80 -  -  	cp %10000000
  306 D1:C818 38 0C -  -  	jr c, functionRepeatInfiniteLarge
  307 D1:C81A -  -  -  -  functionRepeatInfiniteSmall:
  308 D1:C81A 47 -  -  -  	ld b, a
  309 D1:C81B 3E 18 -  -  	ld a, 018h
  310 D1:C81D CD 0A AD D1 	call InsertA															; jr *
  311 D1:C821 78 -  -  -  	ld a, b
  312 D1:C822 C3 0A AD D1 	jp InsertA																; jr *
  313 D1:C826 -  -  -  -  functionRepeatInfiniteLarge:
  314 D1:C826 EB -  -  -  	ex de, hl
  315 D1:C827 3E C3 -  -  	ld a, 0C3h
  316 D1:C829 C3 48 AC D1 	jp InsertAHL															; jp XXXXXX
  317 D1:C82D -  -  -  -  
  318 D1:C82D -  -  -  -  functionIf:
  319 D1:C82D 21 B7 E9 D1 	ld hl, amountOfEnds
  320 D1:C831 34 -  -  -  	inc (hl)
  321 D1:C832 CD 28 10 02 	call _IncFetch
  322 D1:C836 CD B0 B2 D1 	call ParseExpression
  323 D1:C83A FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  324 D1:C83E C2 CF C8 D1 	jp nz, functionIfInfinite
  325 D1:C842 FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  326 D1:C846 28 14 -  -  	jr z, InsertNormalIf
  327 D1:C848 2A 9A E9 D1 	ld hl, (programPtr)
  328 D1:C84C 2B -  -  -  	dec hl
  329 D1:C84D 2B -  -  -  	dec hl
  330 D1:C84E 2B -  -  -  	dec hl
  331 D1:C84F 7E -  -  -  	ld a, (hl)
  332 D1:C850 C6 A2 -  -  	add a, 0A2h
  333 D1:C852 2B -  -  -  	dec hl
  334 D1:C853 2B -  -  -  	dec hl
  335 D1:C854 2B -  -  -  	dec hl
  336 D1:C855 2B -  -  -  	dec hl
  337 D1:C856 22 9A E9 D1 	ld (programPtr), hl
  338 D1:C85A 18 27 -  -  	jr InsertIf
  339 D1:C85C -  -  -  -  InsertNormalIf:
  340 D1:C85C FD CB BF 4E 	bit last_token_was_not, (iy+fExpression2)
  341 D1:C860 28 0D -  -  	jr z, InsertNormalIf2
  342 D1:C862 2A 9A E9 D1 	ld hl, (programPtr)
  343 D1:C866 11 F8 FF FF 	ld de, -8
  344 D1:C86A 19 -  -  -  	add hl, de
  345 D1:C86B 22 9A E9 D1 	ld (programPtr), hl
  346 D1:C86F -  -  -  -  InsertNormalIf2:
  347 D1:C86F 3E 19 -  -  	ld a, 019h
  348 D1:C871 21 B7 ED 52 	ld hl, 052EDB7h
  349 D1:C875 CD 48 AC D1 	call InsertAHL															; add hl, de \ or a \ sbc hl, de
  350 D1:C879 3E CA -  -  	ld a, 0CAh
  351 D1:C87B FD CB BF 4E 	bit last_token_was_not, (iy+fExpression2)
  352 D1:C87F 28 02 -  -  	jr z, InsertIf
  353 D1:C881 3E C2 -  -  	ld a, 0C2h
  354 D1:C883 -  -  -  -  InsertIf:
  355 D1:C883 CD 0A AD D1 	call InsertA															; jp z, ******
  356 D1:C887 2A 9A E9 D1 	ld hl, (programPtr)
  357 D1:C88B E5 -  -  -  	push hl
  358 D1:C88C CD 4C AC D1 		call InsertHL														; jp z, XXXXXX
  359 D1:C890 CD 95 AA D1 		call ParseProgramUntilEnd
  360 D1:C894 FE D0 -  -  		cp tElse
  361 D1:C896 20 29 -  -  		jr nz, +_
  362 D1:C898 21 B7 E9 D1 		ld hl, amountOfEnds
  363 D1:C89C 34 -  -  -  		inc (hl)
  364 D1:C89D 3E C3 -  -  		ld a, 0C3h
  365 D1:C89F CD 0A AD D1 		call InsertA														; jp ******
  366 D1:C8A3 ED 5B 9A E9 
              D1 -  -  -  		ld de, (programPtr)
  367 D1:C8A8 CD 4C AC D1 		call InsertHL														; jp XXXXXX
  368 D1:C8AC 01 81 7C FC 		ld bc, UserMem - program
  369 D1:C8B0 09 -  -  -  		add hl, bc
  370 D1:C8B1 E5 -  -  -  		push hl
  371 D1:C8B2 C1 -  -  -  		pop bc
  372 D1:C8B3 E1 -  -  -  	pop hl
  373 D1:C8B4 ED 0F -  -  	ld (hl), bc
  374 D1:C8B6 D5 -  -  -  	push de
  375 D1:C8B7 CD 95 AA D1 		call ParseProgramUntilEnd
  376 D1:C8BB FE D0 -  -  		cp tElse
  377 D1:C8BD CA 36 AF D1 		jp z, ErrorSyntax
  378 D1:C8C1 2A 9A E9 D1 _:		ld hl, (programPtr)
  379 D1:C8C5 11 81 7C FC 		ld de, UserMem - program
  380 D1:C8C9 19 -  -  -  		add hl, de
  381 D1:C8CA EB -  -  -  		ex de, hl
  382 D1:C8CB E1 -  -  -  	pop hl
  383 D1:C8CC ED 1F -  -  	ld (hl), de
  384 D1:C8CE C9 -  -  -  	ret
  385 D1:C8CF -  -  -  -  functionIfInfinite:
  386 D1:C8CF 2A 9A E9 D1 	ld hl, (programPtr)
  387 D1:C8D3 2B -  -  -  	dec hl
  388 D1:C8D4 2B -  -  -  	dec hl
  389 D1:C8D5 2B -  -  -  	dec hl
  390 D1:C8D6 2B -  -  -  	dec hl
  391 D1:C8D7 22 9A E9 D1 	ld (programPtr), hl
  392 D1:C8DB 23 -  -  -  	inc hl
  393 D1:C8DC ED 27 -  -  	ld hl, (hl)
  394 D1:C8DE 19 -  -  -  	add hl, de
  395 D1:C8DF B7 -  -  -  	or a
  396 D1:C8E0 ED 52 -  -  	sbc hl, de
  397 D1:C8E2 28 1C -  -  	jr z, functionIfInfiniteFalse
  398 D1:C8E4 CD 95 AA D1 	call ParseProgramUntilEnd
  399 D1:C8E8 FE D0 -  -  	cp tElse
  400 D1:C8EA C0 -  -  -  	ret nz
  401 D1:C8EB 2A 9A E9 D1 	ld hl, (programPtr)
  402 D1:C8EF E5 -  -  -  	push hl
  403 D1:C8F0 CD 95 AA D1 		call ParseProgramUntilEnd
  404 D1:C8F4 FE D0 -  -  		cp tElse
  405 D1:C8F6 CA 36 AF D1 		jp z, ErrorSyntax
  406 D1:C8FA E1 -  -  -  	pop hl
  407 D1:C8FB 22 9A E9 D1 	ld (programPtr), hl
  408 D1:C8FF C9 -  -  -  	ret
  409 D1:C900 -  -  -  -  functionIfInfiniteFalse:
  410 D1:C900 2A 9A E9 D1 	ld hl, (programPtr)
  411 D1:C904 E5 -  -  -  	push hl
  412 D1:C905 CD 95 AA D1 		call ParseProgramUntilEnd
  413 D1:C909 E1 -  -  -  	pop hl
  414 D1:C90A 22 9A E9 D1 	ld (programPtr), hl
  415 D1:C90E FE D0 -  -  	cp tElse
  416 D1:C910 C0 -  -  -  	ret nz
  417 D1:C911 CD 95 AA D1 	call ParseProgramUntilEnd
  418 D1:C915 FE D0 -  -  	cp tElse
  419 D1:C917 CA 36 AF D1 	jp z, ErrorSyntax
  420 D1:C91B C9 -  -  -  	ret
  421 D1:C91C -  -  -  -  	
  422 D1:C91C -  -  -  -  functionWhile:
  423 D1:C91C 21 B7 E9 D1 	ld hl, amountOfEnds
  424 D1:C920 34 -  -  -  	inc (hl)
  425 D1:C921 CD 28 10 02 	call _IncFetch
  426 D1:C925 DA 36 AF D1 	jp c, ErrorSyntax
  427 D1:C929 FE 3F -  -  	cp tEnter
  428 D1:C92B CA 36 AF D1 	jp z, ErrorSyntax
  429 D1:C92F 2A 9A E9 D1 	ld hl, (programPtr)
  430 D1:C933 E5 -  -  -  	push hl
  431 D1:C934 CD B0 B2 D1 		call ParseExpression
  432 D1:C938 FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  433 D1:C93C 20 6A -  -  		jr nz, functionWhileInfinite
  434 D1:C93E FD CB C0 6E 		bit ans_set_z_flag, (iy+fExpression1)
  435 D1:C942 28 14 -  -  		jr z, +_
  436 D1:C944 2A 9A E9 D1 		ld hl, (programPtr)
  437 D1:C948 2B -  -  -  		dec hl
  438 D1:C949 2B -  -  -  		dec hl
  439 D1:C94A 2B -  -  -  		dec hl
  440 D1:C94B 7E -  -  -  		ld a, (hl)
  441 D1:C94C C6 A2 -  -  		add a, 0A2h
  442 D1:C94E 2B -  -  -  		dec hl
  443 D1:C94F 2B -  -  -  		dec hl
  444 D1:C950 2B -  -  -  		dec hl
  445 D1:C951 2B -  -  -  		dec hl
  446 D1:C952 22 9A E9 D1 		ld (programPtr), hl
  447 D1:C956 18 1F -  -  		jr InsertNormalWhile
  448 D1:C958 FD CB BF 4E _:		bit last_token_was_not, (iy+fExpression2)
  449 D1:C95C 28 0D -  -  		jr z, InsertNormalWhile2
  450 D1:C95E 2A 9A E9 D1 		ld hl, (programPtr)
  451 D1:C962 11 F8 FF FF 		ld de, -8
  452 D1:C966 19 -  -  -  		add hl, de
  453 D1:C967 22 9A E9 D1 		ld (programPtr), hl
  454 D1:C96B -  -  -  -  InsertNormalWhile2:
  455 D1:C96B 3E 19 -  -  		ld a, 019h
  456 D1:C96D 21 B7 ED 52 		ld hl, 052EDB7h
  457 D1:C971 CD 48 AC D1 		call InsertAHL														; add hl, de \ or a \ sbc hl, de
  458 D1:C975 3E CA -  -  		ld a, 0CAh
  459 D1:C977 -  -  -  -  InsertNormalWhile:
  460 D1:C977 FD CB BF 4E 		bit last_token_was_not, (iy+fExpression2)
  461 D1:C97B 28 02 -  -  		jr z, $+4
  462 D1:C97D EE 08 -  -  		xor 8
  463 D1:C97F CD 0A AD D1 		call InsertA														; jp z, ******
  464 D1:C983 2A 9A E9 D1 		ld hl, (programPtr)
  465 D1:C987 E5 -  -  -  		push hl
  466 D1:C988 CD 4C AC D1 			call InsertHL													; jp z, ******
  467 D1:C98C CD 95 AA D1 			call ParseProgramUntilEnd
  468 D1:C990 FE D0 -  -  			cp tElse
  469 D1:C992 CA 36 AF D1 			jp z, ErrorSyntax
  470 D1:C996 3E C3 -  -  			ld a, 0C3h
  471 D1:C998 D1 -  -  -  		pop de
  472 D1:C999 E1 -  -  -  	pop hl
  473 D1:C99A 01 81 7C FC 	ld bc, UserMem - program
  474 D1:C99E 09 -  -  -  	add hl, bc
  475 D1:C99F CD 48 AC D1 	call InsertAHL															; jp XXXXXX
  476 D1:C9A3 09 -  -  -  	add hl, bc
  477 D1:C9A4 EB -  -  -  	ex de, hl
  478 D1:C9A5 ED 1F -  -  	ld (hl), de
  479 D1:C9A7 C9 -  -  -  	ret
  480 D1:C9A8 -  -  -  -  functionWhileInfinite:
  481 D1:C9A8 2A 9A E9 D1 		ld hl, (programPtr)
  482 D1:C9AC 2B -  -  -  		dec hl
  483 D1:C9AD 2B -  -  -  		dec hl
  484 D1:C9AE 2B -  -  -  		dec hl
  485 D1:C9AF 2B -  -  -  		dec hl
  486 D1:C9B0 22 9A E9 D1 		ld (programPtr), hl
  487 D1:C9B4 23 -  -  -  		inc hl
  488 D1:C9B5 ED 27 -  -  		ld hl, (hl)
  489 D1:C9B7 19 -  -  -  		add hl, de
  490 D1:C9B8 B7 -  -  -  		or a
  491 D1:C9B9 ED 52 -  -  		sbc hl, de
  492 D1:C9BB 28 16 -  -  		jr z, +_
  493 D1:C9BD CD 95 AA D1 		call ParseProgramUntilEnd
  494 D1:C9C1 FE D0 -  -  		cp tElse
  495 D1:C9C3 CA 36 AF D1 		jp z, ErrorSyntax
  496 D1:C9C7 3E C3 -  -  		ld a, 0C3h
  497 D1:C9C9 E1 -  -  -  	pop hl
  498 D1:C9CA 01 81 7C FC 	ld bc, UserMem - program
  499 D1:C9CE 09 -  -  -  	add hl, bc
  500 D1:C9CF C3 48 AC D1 	jp InsertAHL															; jp XXXXXX
  501 D1:C9D3 CD 95 AA D1 _:		call ParseProgramUntilEnd
  502 D1:C9D7 FE D0 -  -  		cp tElse
  503 D1:C9D9 CA 36 AF D1 		jp z, ErrorSyntax
  504 D1:C9DD E1 -  -  -  	pop hl
  505 D1:C9DE 22 9A E9 D1 	ld (programPtr), hl
  506 D1:C9E2 C9 -  -  -  	ret
  507 D1:C9E3 -  -  -  -  	
  508 D1:C9E3 -  -  -  -  functionClrHome:
  509 D1:C9E3 CD C0 0F 02 	call _NxtFetch
  510 D1:C9E7 38 06 -  -  	jr c, +_
  511 D1:C9E9 FE 3F -  -  	cp tEnter
  512 D1:C9EB C2 36 AF D1 	jp nz, ErrorSyntax
  513 D1:C9EF 21 28 08 02 _:	ld hl, _HomeUp
  514 D1:C9F3 CD 5D AC D1 	call InsertCallHL														; call _HomeUp
  515 D1:C9F7 21 08 08 02 	ld hl, _ClrLCDFull
  516 D1:C9FB C3 48 AC D1 	jp InsertAHL															; call _ClrLCDFull
  517 D1:C9FF -  -  -  -  	
  518 D1:C9FF -  -  -  -  functionPause:
  519 D1:C9FF CD 28 10 02 	call _IncFetch
  520 D1:CA03 38 59 -  -  	jr c, ++_
  521 D1:CA05 FE 3F -  -  	cp tEnter
  522 D1:CA07 28 55 -  -  	jr z, ++_
  523 D1:CA09 CD B0 B2 D1 	call ParseExpression
  524 D1:CA0D 3A B9 E9 D1 	ld a, (amountOfPause)
  525 D1:CA11 3D -  -  -  	dec a
  526 D1:CA12 CA 98 CA D1 	jp z, functionPauseOnce
  527 D1:CA16 FD CB D0 66 	bit has_already_pause, (iy+fProgram1)
  528 D1:CA1A 20 54 -  -  	jr nz, AddPause
  529 D1:CA1C 3E CD -  -  	ld a, 0CDh
  530 D1:CA1E CD 0A AD D1 	call InsertA															; call *
  531 D1:CA22 CD 21 AD D1 	call InsertProgramPtrToDataOffset
  532 D1:CA26 2A AF E9 D1 	ld hl, (programDataDataPtr)
  533 D1:CA2A 22 27 EA D0 	ld (PauseStartData), hl
  534 D1:CA2E E5 -  -  -  	push hl
  535 D1:CA2F D1 -  -  -  	pop de
  536 D1:CA30 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  537 D1:CA34 28 10 -  -  	jr z, +_
  538 D1:CA36 E5 -  -  -  	push hl
  539 D1:CA37 2A 9A E9 D1 		ld hl, (programPtr)
  540 D1:CA3B 2B -  -  -  		dec hl
  541 D1:CA3C 2B -  -  -  		dec hl
  542 D1:CA3D 2B -  -  -  		dec hl
  543 D1:CA3E 2B -  -  -  		dec hl
  544 D1:CA3F ED 07 -  -  		ld bc, (hl)
  545 D1:CA41 0B -  -  -  		dec bc
  546 D1:CA42 ED 0F -  -  		ld (hl), bc
  547 D1:CA44 E1 -  -  -  	pop hl
  548 D1:CA45 23 -  -  -  	inc hl
  549 D1:CA46 CD 4C AC D1 _:	call InsertHL															; call *
  550 D1:CA4A 21 E7 ED D1 	ld hl, PauseRoutine
  551 D1:CA4E 01 13 00 00 	ld bc, PauseRoutineEnd - PauseRoutine
  552 D1:CA52 ED B0 -  -  	ldir
  553 D1:CA54 ED 53 AF E9 
              D1 -  -  -  	ld (programDataDataPtr), de
  554 D1:CA59 FD CB D0 E6 	set has_already_pause, (iy+fProgram1)
  555 D1:CA5D C9 -  -  -  	ret
  556 D1:CA5E 21 4C 01 02 _:	ld hl, _GetCSC
  557 D1:CA62 CD 5D AC D1 	call InsertCallHL														; call _GetCSC
  558 D1:CA66 3E FE -  -  	ld a, 0FEh
  559 D1:CA68 21 09 20 F8 	ld hl, 0F82009h
  560 D1:CA6C C3 48 AC D1 	jp InsertAHL															; cp tEnter \ jr nz, $-9
  561 D1:CA70 -  -  -  -  AddPause:
  562 D1:CA70 3E CD -  -  	ld a, 0CDh
  563 D1:CA72 CD 0A AD D1 	call InsertA															; call ******
  564 D1:CA76 CD 21 AD D1 	call InsertProgramPtrToDataOffset
  565 D1:CA7A 2A 27 EA D0 	ld hl, (PauseStartData)
  566 D1:CA7E FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  567 D1:CA82 28 10 -  -  	jr z, +_
  568 D1:CA84 E5 -  -  -  	push hl
  569 D1:CA85 2A 9A E9 D1 		ld hl, (programPtr)
  570 D1:CA89 2B -  -  -  		dec hl
  571 D1:CA8A 2B -  -  -  		dec hl
  572 D1:CA8B 2B -  -  -  		dec hl
  573 D1:CA8C 2B -  -  -  		dec hl
  574 D1:CA8D ED 17 -  -  		ld de, (hl)
  575 D1:CA8F 1B -  -  -  		dec de
  576 D1:CA90 ED 1F -  -  		ld (hl), de
  577 D1:CA92 E1 -  -  -  	pop hl
  578 D1:CA93 23 -  -  -  	inc hl
  579 D1:CA94 C3 4C AC D1 _:	jp InsertHL																; call XXXXXX
  580 D1:CA98 -  -  -  -  functionPauseOnce:
  581 D1:CA98 ED 5B 9A E9 
              D1 -  -  -  	ld de, (programPtr)
  582 D1:CA9D 21 E7 ED D1 	ld hl, PauseRoutine
  583 D1:CAA1 01 13 00 00 	ld bc, PauseRoutineEnd - PauseRoutine
  584 D1:CAA5 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  585 D1:CAA9 28 11 -  -  	jr z, +_
  586 D1:CAAB DD 2A 9A E9 
              D1 -  -  -  	ld ix, (programPtr)
  587 D1:CAB0 DD 17 FD -  	ld de, (ix-3)
  588 D1:CAB3 1B -  -  -  	dec de
  589 D1:CAB4 DD 1F FD -  	ld (ix-3), de
  590 D1:CAB7 ED 12 00 -  	lea de, ix
  591 D1:CABA 23 -  -  -  	inc hl
  592 D1:CABB 0B -  -  -  	dec bc
  593 D1:CABC ED B0 -  -  _:	ldir
  594 D1:CABE 1B -  -  -  	dec de
  595 D1:CABF ED 53 9A E9 
              D1 -  -  -  	ld (programPtr), de
  596 D1:CAC4 C9 -  -  -  	ret
  597 D1:CAC5 -  -  -  -  	
  598 D1:CAC5 -  -  -  -  functionInput:
  599 D1:CAC5 CD 93 AC D1 	call MaybeInsertIYFlags
  600 D1:CAC9 CD 28 10 02 	call _IncFetch
  601 D1:CACD FE 41 -  -  	cp tA
  602 D1:CACF DA 36 AF D1 	jp c, ErrorSyntax
  603 D1:CAD3 FE 5C -  -  	cp ttheta+1
  604 D1:CAD5 D2 36 AF D1 	jp nc, ErrorSyntax
  605 D1:CAD9 CD C0 0F 02 	call _NxtFetch
  606 D1:CADD 38 06 -  -  	jr c, +_
  607 D1:CADF FE 3F -  -  	cp tEnter
  608 D1:CAE1 C2 36 AF D1 	jp nz, ErrorSyntax
  609 D1:CAE5 3A B8 E9 D1 _:	ld a, (amountOfInput)
  610 D1:CAE9 3D -  -  -  	dec a
  611 D1:CAEA 28 79 -  -  	jr z, functionInputOnce
  612 D1:CAEC 3E 3E -  -  	ld a, 03Eh
  613 D1:CAEE CD 0A AD D1 	call InsertA															; ld a, **
  614 D1:CAF2 CD 2C 10 02 	call _CurFetch
  615 D1:CAF6 D6 41 -  -  	sub tA
  616 D1:CAF8 47 -  -  -  	ld b, a
  617 D1:CAF9 87 -  -  -  	add a, a
  618 D1:CAFA 80 -  -  -  	add a, b
  619 D1:CAFB CD 0A AD D1 	call InsertA															; ld a, XX
  620 D1:CAFF 3E 32 -  -  	ld a, 032h
  621 D1:CB01 CD 0A AD D1 	call InsertA															; ld (******), a
  622 D1:CB05 CD 21 AD D1 	call InsertProgramPtrToDataOffset
  623 D1:CB09 FD CB D0 56 	bit has_already_input, (iy+fProgram1)
  624 D1:CB0D 20 39 -  -  	jr nz, AddPointerToInput
  625 D1:CB0F 2A AF E9 D1 	ld hl, (programDataDataPtr)
  626 D1:CB13 22 21 EA D0 	ld (InputStartData), hl
  627 D1:CB17 01 3D 00 00 	ld bc, InputOffset-InputRoutine
  628 D1:CB1B 09 -  -  -  	add hl, bc
  629 D1:CB1C CD 4C AC D1 	call InsertHL															; ld (XXXXXX), a
  630 D1:CB20 3E CD -  -  	ld a, 0CDh
  631 D1:CB22 CD 0A AD D1 	call InsertA															; call ******
  632 D1:CB26 CD 21 AD D1 	call InsertProgramPtrToDataOffset
  633 D1:CB2A 2A AF E9 D1 	ld hl, (programDataDataPtr)
  634 D1:CB2E E5 -  -  -  	push hl
  635 D1:CB2F D1 -  -  -  	pop de
  636 D1:CB30 CD 4C AC D1 	call InsertHL															; call XXXXXX
  637 D1:CB34 21 54 ED D1 _:	ld hl, InputRoutine
  638 D1:CB38 01 42 00 00 	ld bc, InputRoutineEnd-InputRoutine
  639 D1:CB3C ED B0 -  -  	ldir
  640 D1:CB3E ED 53 AF E9 
              D1 -  -  -  	ld (programDataDataPtr), de
  641 D1:CB43 FD CB D0 D6 	set has_already_input, (iy+fProgram1)
  642 D1:CB47 C9 -  -  -  	ret
  643 D1:CB48 -  -  -  -  AddPointerToInput:
  644 D1:CB48 2A 21 EA D0 	ld hl, (InputStartData)
  645 D1:CB4C E5 -  -  -  	push hl
  646 D1:CB4D 01 3D 00 00 		ld bc, InputOffset-InputRoutine
  647 D1:CB51 09 -  -  -  		add hl, bc
  648 D1:CB52 CD 4C AC D1 		call InsertHL														; ld (XXXXXX), a
  649 D1:CB56 3E CD -  -  		ld a, 0CDh
  650 D1:CB58 CD 0A AD D1 		call InsertA														; call ******
  651 D1:CB5C CD 21 AD D1 		call InsertProgramPtrToDataOffset
  652 D1:CB60 E1 -  -  -  	pop hl
  653 D1:CB61 C3 4C AC D1 	jp InsertHL																; call XXXXXX
  654 D1:CB65 -  -  -  -  functionInputOnce:
  655 D1:CB65 CD 2C 10 02 	call _CurFetch
  656 D1:CB69 D6 41 -  -  	sub tA
  657 D1:CB6B 47 -  -  -  	ld b, a
  658 D1:CB6C 87 -  -  -  	add a, a
  659 D1:CB6D 80 -  -  -  	add a, b
  660 D1:CB6E 32 91 ED D1 	ld (InputOffset), a
  661 D1:CB72 ED 5B 9A E9 
              D1 -  -  -  	ld de, (programPtr)
  662 D1:CB77 21 54 ED D1 	ld hl, InputRoutine
  663 D1:CB7B 01 42 00 00 	ld bc, InputRoutineEnd - InputRoutine
  664 D1:CB7F ED B0 -  -  	ldir
  665 D1:CB81 D5 -  -  -  	push de
  666 D1:CB82 DD E1 -  -  	pop ix
  667 D1:CB84 DD 36 FC CD 	ld (ix-4), 0CDh
  668 D1:CB88 ED 53 9A E9 
              D1 -  -  -  	ld (programPtr), de
  669 D1:CB8D C9 -  -  -  	ret
  670 D1:CB8E -  -  -  -  	
  671 D1:CB8E -  -  -  -  functionNot:
  672 D1:CB8E 3E 01 -  -  	ld a, 1
  673 D1:CB90 32 B5 E9 D1 	ld (amountOfArguments), a
  674 D1:CB94 FD CB BF CE 	set last_token_was_not, (iy+fExpression2)
  675 D1:CB98 E5 -  -  -  	push hl
  676 D1:CB99 DD E1 -  -  	pop ix
  677 D1:CB9B DD 7E FC -  	ld a, (ix-4)
  678 D1:CB9E B7 -  -  -  	or a
  679 D1:CB9F 28 10 -  -  	jr z, NotNumber
  680 D1:CBA1 3D -  -  -  	dec a
  681 D1:CBA2 28 23 -  -  	jr z, NotVariable
  682 D1:CBA4 3D -  -  -  	dec a
  683 D1:CBA5 28 36 -  -  	jr z, NotChainPush
  684 D1:CBA7 3D -  -  -  	dec a
  685 D1:CBA8 28 37 -  -  	jr z, NotChainAns
  686 D1:CBAA 3D -  -  -  	dec a
  687 D1:CBAB 28 48 -  -  	jr z, NotFunction
  688 D1:CBAD C3 36 AF D1 	jp ErrorSyntax
  689 D1:CBB1 -  -  -  -  NotNumber:
  690 D1:CBB1 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  691 D1:CBB5 DD 27 FD -  	ld hl, (ix-3)
  692 D1:CBB8 19 -  -  -  	add hl, de
  693 D1:CBB9 B7 -  -  -  	or a
  694 D1:CBBA ED 52 -  -  	sbc hl, de
  695 D1:CBBC 21 00 00 00 	ld hl, 0
  696 D1:CBC0 20 01 -  -  	jr nz, +_
  697 D1:CBC2 23 -  -  -  	inc hl
  698 D1:CBC3 DD 2F FD -  _:	ld (ix-3), hl
  699 D1:CBC6 C9 -  -  -  	ret
  700 D1:CBC7 -  -  -  -  NotVariable:
  701 D1:CBC7 DD 4E FD -  	ld c, (ix-3)
  702 D1:CBCA 06 03 -  -  	ld b, 3
  703 D1:CBCC ED 4C -  -  	mlt bc
  704 D1:CBCE 79 -  -  -  	ld a, c
  705 D1:CBCF 21 DD 27 00 	ld hl, 00027DDh
  706 D1:CBD3 CD 70 1D 02 	call _SetHLUToA
  707 D1:CBD7 CD 4C AC D1 	call InsertHL															; ld hl, (ix+*)
  708 D1:CBDB 18 04 -  -  	jr NotChainAns
  709 D1:CBDD -  -  -  -  NotChainPush:
  710 D1:CBDD C3 70 AF D1 	jp UnknownError
  711 D1:CBE1 -  -  -  -  NotChainAns:
  712 D1:CBE1 3E 11 -  -  	ld a, 011h
  713 D1:CBE3 CD 0A AD D1 	call InsertA															; ld de, *
  714 D1:CBE7 3E FF -  -  	ld a, 0FFh
  715 D1:CBE9 11 FF FF 19 	ld de, 019FFFFh
  716 D1:CBED 21 ED 62 23 	ld hl, 02362EDh
  717 D1:CBF1 C3 87 AC D1 	jp InsertADEHL															; ld de, -1 \ add hl, de \ sbc hl, hl \ inc hl
  718 D1:CBF5 -  -  -  -  NotFunction:
  719 D1:CBF5 DD 7E FD -  	ld a, (ix-3)
  720 D1:CBF8 06 02 -  -  	ld b, OutputInHL
  721 D1:CBFA CD 36 AD D1 	call GetFunction
  722 D1:CBFE 18 E1 -  -  	jr NotChainAns
  723 D1:CC00 -  -  -  -  	
  724 D1:CC00 -  -  -  -  functionCE:
  725 D1:CC00 23 -  -  -  	inc hl
  726 D1:CC01 23 -  -  -  	inc hl
  727 D1:CC02 7E -  -  -  	ld a, (hl)
  728 D1:CC03 FE 32 -  -  	cp tRemainder
  729 D1:CC05 C2 36 AF D1 	jp nz, ErrorSyntax
  730 D1:CC09 11 F6 FF FF 	ld de, -10
  731 D1:CC0D 19 -  -  -  	add hl, de
  732 D1:CC0E -  -  -  -  		
  733 D1:CC0E -  -  -  -  functionRemainder:
  734 D1:CC0E 3E 02 -  -  	ld a, 2
  735 D1:CC10 32 B5 E9 D1 	ld (amountOfArguments), a
  736 D1:CC14 7E -  -  -  	ld a, (hl)
  737 D1:CC15 DD 67 -  -  	ld ixh, a
  738 D1:CC17 23 -  -  -  	inc hl
  739 D1:CC18 E5 -  -  -  	push hl
  740 D1:CC19 ED 07 -  -  		ld bc, (hl)
  741 D1:CC1B 23 -  -  -  		inc hl
  742 D1:CC1C 23 -  -  -  		inc hl
  743 D1:CC1D 23 -  -  -  		inc hl
  744 D1:CC1E 7E -  -  -  		ld a, (hl)
  745 D1:CC1F DD 6F -  -  		ld ixl, a
  746 D1:CC21 23 -  -  -  		inc hl
  747 D1:CC22 ED 17 -  -  		ld de, (hl)
  748 D1:CC24 E1 -  -  -  	pop hl
  749 D1:CC25 DD 7C -  -  	ld a, ixh
  750 D1:CC27 B7 -  -  -  	or a
  751 D1:CC28 28 18 -  -  	jr z, RemainderNumberXXX
  752 D1:CC2A 3D -  -  -  	dec a
  753 D1:CC2B CA A2 CC D1 	jp z, RemainderVariableXXX
  754 D1:CC2F 3D -  -  -  	dec a
  755 D1:CC30 CA E8 CC D1 	jp z, RemainderChainPushXXX
  756 D1:CC34 3D -  -  -  	dec a
  757 D1:CC35 CA FA CC D1 	jp z, RemainderChainAnsXXX
  758 D1:CC39 3D -  -  -  	dec a
  759 D1:CC3A CA 39 CD D1 	jp z, RemainderFunctionXXX
  760 D1:CC3E C3 36 AF D1 	jp ErrorSyntax
  761 D1:CC42 -  -  -  -  RemainderNumberXXX:
  762 D1:CC42 DD 7D -  -  	ld a, ixl
  763 D1:CC44 B7 -  -  -  	or a
  764 D1:CC45 28 10 -  -  	jr z, RemainderNumberNumber
  765 D1:CC47 3D -  -  -  	dec a
  766 D1:CC48 28 1F -  -  	jr z, RemainderNumberVariable
  767 D1:CC4A 3D -  -  -  	dec a
  768 D1:CC4B 28 28 -  -  	jr z, RemainderNumberChainPush
  769 D1:CC4D 3D -  -  -  	dec a
  770 D1:CC4E 28 29 -  -  	jr z, RemainderNumberChainAns
  771 D1:CC50 3D -  -  -  	dec a
  772 D1:CC51 28 38 -  -  	jr z, RemainderNumberFunction
  773 D1:CC53 C3 36 AF D1 	jp ErrorSyntax
  774 D1:CC57 -  -  -  -  RemainderNumberNumber:
  775 D1:CC57 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  776 D1:CC5B E5 -  -  -  	push hl
  777 D1:CC5C C5 -  -  -  		push bc
  778 D1:CC5D E1 -  -  -  		pop hl
  779 D1:CC5E D5 -  -  -  		push de
  780 D1:CC5F C1 -  -  -  		pop bc
  781 D1:CC60 CD 44 01 00 		call __idvrmu
  782 D1:CC64 EB -  -  -  		ex de, hl
  783 D1:CC65 E1 -  -  -  	pop hl
  784 D1:CC66 ED 1F -  -  	ld (hl), de
  785 D1:CC68 C9 -  -  -  	ret
  786 D1:CC69 -  -  -  -  RemainderNumberVariable:
  787 D1:CC69 3E 21 -  -  	ld a, 021h
  788 D1:CC6B C5 -  -  -  	push bc
  789 D1:CC6C E1 -  -  -  	pop hl
  790 D1:CC6D CD 48 AC D1 	call InsertAHL															; ld hl, *
  791 D1:CC71 C3 1E CD D1 	jp RemainderChainAnsVariable
  792 D1:CC75 -  -  -  -  RemainderNumberChainPush:
  793 D1:CC75 C3 70 AF D1 	jp UnknownError
  794 D1:CC79 -  -  -  -  RemainderNumberChainAns:
  795 D1:CC79 11 E5 C1 21 	ld de, 021C1E5h
  796 D1:CC7D C5 -  -  -  	push bc
  797 D1:CC7E E1 -  -  -  	pop hl
  798 D1:CC7F CD 8B AC D1 	call InsertDEHL															; push hl \ pop bc \ ld hl, *
  799 D1:CC83 21 44 01 00 	ld hl, __idvrmu
  800 D1:CC87 C3 5D AC D1 	jp InsertCallHL															; call __idvrmu
  801 D1:CC8B -  -  -  -  RemainderNumberFunction:
  802 D1:CC8B 7B -  -  -  	ld a, e
  803 D1:CC8C C5 -  -  -  	push bc
  804 D1:CC8D 06 00 -  -  		ld b, OutputInBC
  805 D1:CC8F CD 36 AD D1 		call GetFunction
  806 D1:CC93 E1 -  -  -  	pop hl
  807 D1:CC94 3E 21 -  -  	ld a, 021h
  808 D1:CC96 CD 48 AC D1 	call InsertAHL															; ld hl, *
  809 D1:CC9A 21 44 01 00 	ld hl, __idvrmu
  810 D1:CC9E C3 5D AC D1 	jp InsertCallHL															; call __idvrmu
  811 D1:CCA2 -  -  -  -  RemainderVariableXXX:
  812 D1:CCA2 DD 7D -  -  	ld a, ixl
  813 D1:CCA4 B7 -  -  -  	or a
  814 D1:CCA5 28 10 -  -  	jr z, RemainderVariableNumber
  815 D1:CCA7 3D -  -  -  	dec a
  816 D1:CCA8 28 13 -  -  	jr z, RemainderVariableVariable
  817 D1:CCAA 3D -  -  -  	dec a
  818 D1:CCAB 28 16 -  -  	jr z, RemainderVariableChainPush
  819 D1:CCAD 3D -  -  -  	dec a
  820 D1:CCAE 28 17 -  -  	jr z, RemainderVariableChainAns
  821 D1:CCB0 3D -  -  -  	dec a
  822 D1:CCB1 28 2C -  -  	jr z, RemainderVariableFunction
  823 D1:CCB3 C3 36 AF D1 	jp ErrorSyntax
  824 D1:CCB7 -  -  -  -  RemainderVariableNumber:
  825 D1:CCB7 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  826 D1:CCBB 18 52 -  -  	jr RemainderChainAnsNumber
  827 D1:CCBD -  -  -  -  RemainderVariableVariable
  828 D1:CCBD CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  829 D1:CCC1 18 5B -  -  	jr RemainderChainAnsVariable
  830 D1:CCC3 -  -  -  -  RemainderVariableChainPush:
  831 D1:CCC3 C3 70 AF D1 	jp UnknownError
  832 D1:CCC7 -  -  -  -  RemainderVariableChainAns:
  833 D1:CCC7 3E E5 -  -  	ld a, 0E5h
  834 D1:CCC9 CD 0A AD D1 	call InsertA															; push hl
  835 D1:CCCD 3E C1 -  -  	ld a, 0C1h
  836 D1:CCCF CD 0A AD D1 	call InsertA															; pop bc
  837 D1:CCD3 CD 61 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  838 D1:CCD7 21 44 01 00 	ld hl, __idvrmu
  839 D1:CCDB C3 5D AC D1 	jp InsertCallHL															; call __idvrmu
  840 D1:CCDF -  -  -  -  RemainderVariableFunction:
  841 D1:CCDF 7B -  -  -  	ld a, e
  842 D1:CCE0 06 00 -  -  	ld b, OutputInBC
  843 D1:CCE2 CD 36 AD D1 	call GetFunction
  844 D1:CCE6 18 EB -  -  	jr -_
  845 D1:CCE8 -  -  -  -  RemainderChainPushXXX:
  846 D1:CCE8 DD 7D -  -  	ld a, ixl
  847 D1:CCEA FE 03 -  -  	cp typeChainAns
  848 D1:CCEC C2 70 AF D1 	jp nz, UnknownError
  849 D1:CCF0 21 E5 C1 E1 	ld hl, 0E1C1E5h
  850 D1:CCF4 CD 48 AC D1 	call InsertAHL															; push hl \ pop bc \ pop hl
  851 D1:CCF8 18 1C -  -  	jr +_
  852 D1:CCFA -  -  -  -  RemainderChainAnsXXX:
  853 D1:CCFA DD 7D -  -  	ld a, ixl
  854 D1:CCFC B7 -  -  -  	or a
  855 D1:CCFD 28 10 -  -  	jr z, RemainderChainAnsNumber
  856 D1:CCFF 3D -  -  -  	dec a
  857 D1:CD00 28 1C -  -  	jr z, RemainderChainAnsVariable
  858 D1:CD02 3D -  -  -  	dec a
  859 D1:CD03 28 1F -  -  	jr z, RemainderChainAnsChainPush
  860 D1:CD05 3D -  -  -  	dec a
  861 D1:CD06 28 20 -  -  	jr z, RemainderChainAnsChainAns
  862 D1:CD08 3D -  -  -  	dec a
  863 D1:CD09 28 21 -  -  	jr z, RemainderChainAnsFunction
  864 D1:CD0B C3 36 AF D1 	jp ErrorSyntax
  865 D1:CD0F -  -  -  -  RemainderChainAnsNumber:
  866 D1:CD0F EB -  -  -  	ex de, hl
  867 D1:CD10 3E 01 -  -  	ld a, 001h
  868 D1:CD12 CD 48 AC D1 	call InsertAHL															; ld bc, *
  869 D1:CD16 21 44 01 00 _:	ld hl, __idvrmu
  870 D1:CD1A C3 5D AC D1 	jp InsertCallHL															; call __idvrmu
  871 D1:CD1E -  -  -  -  RemainderChainAnsVariable:
  872 D1:CD1E CD 79 AC D1 	call InsertIXC															; ld bc, (ix+*)
  873 D1:CD22 18 F2 -  -  	jr -_
  874 D1:CD24 -  -  -  -  RemainderChainAnsChainPush:
  875 D1:CD24 C3 70 AF D1 	jp UnknownError
  876 D1:CD28 -  -  -  -  RemainderChainAnsChainAns:
  877 D1:CD28 C3 70 AF D1 	jp UnknownError
  878 D1:CD2C -  -  -  -  RemainderChainAnsFunction:
  879 D1:CD2C 7B -  -  -  	ld a, e
  880 D1:CD2D 06 00 -  -  	ld b, OutputInBC
  881 D1:CD2F FD CB C0 F6 	set need_push, (iy+fExpression1)
  882 D1:CD33 CD 36 AD D1 	call GetFunction
  883 D1:CD37 18 DD -  -  	jr -_
  884 D1:CD39 -  -  -  -  RemainderFunctionXXX:
  885 D1:CD39 DD 7D -  -  	ld a, ixl
  886 D1:CD3B B7 -  -  -  	or a
  887 D1:CD3C 28 10 -  -  	jr z, RemainderFunctionNumber
  888 D1:CD3E 3D -  -  -  	dec a
  889 D1:CD3F 28 16 -  -  	jr z, RemainderFunctionVariable
  890 D1:CD41 3D -  -  -  	dec a
  891 D1:CD42 28 1C -  -  	jr z, RemainderFunctionChainPush
  892 D1:CD44 3D -  -  -  	dec a
  893 D1:CD45 28 1D -  -  	jr z, RemainderFunctionChainAns
  894 D1:CD47 3D -  -  -  	dec a
  895 D1:CD48 28 2F -  -  	jr z, RemainderFunctionFunction
  896 D1:CD4A C3 36 AF D1 	jp ErrorSyntax
  897 D1:CD4E -  -  -  -  RemainderFunctionNumber:
  898 D1:CD4E 79 -  -  -  	ld a, c
  899 D1:CD4F 06 02 -  -  	ld b, OutputInHL
  900 D1:CD51 CD 36 AD D1 	call GetFunction
  901 D1:CD55 18 B8 -  -  	jr RemainderChainAnsNumber
  902 D1:CD57 -  -  -  -  RemainderFunctionVariable:
  903 D1:CD57 79 -  -  -  	ld a, c
  904 D1:CD58 06 02 -  -  	ld b, OutputInHL
  905 D1:CD5A CD 36 AD D1 	call GetFunction
  906 D1:CD5E 18 BE -  -  	jr RemainderChainAnsVariable
  907 D1:CD60 -  -  -  -  RemainderFunctionChainPush:
  908 D1:CD60 C3 70 AF D1 	jp UnknownError
  909 D1:CD64 -  -  -  -  RemainderFunctionChainAns:
  910 D1:CD64 3E E5 -  -  	ld a, 0E5h
  911 D1:CD66 CD 0A AD D1 	call InsertA														; push hl
  912 D1:CD6A 3E C1 -  -  	ld a, 0C1h
  913 D1:CD6C CD 0A AD D1 	call InsertA														; pop bc
  914 D1:CD70 79 -  -  -  	ld a, c
  915 D1:CD71 06 02 -  -  	ld b, OutputInHL
  916 D1:CD73 CD 36 AD D1 	call GetFunction
  917 D1:CD77 18 9D -  -  	jr -_
  918 D1:CD79 -  -  -  -  RemainderFunctionFunction:
  919 D1:CD79 7B -  -  -  	ld a, e
  920 D1:CD7A 06 00 -  -  	ld b, OutputInBC
  921 D1:CD7C CD 36 AD D1 	call GetFunction
  922 D1:CD80 79 -  -  -  	ld a, c
  923 D1:CD81 06 02 -  -  	ld b, OutputInHL
  924 D1:CD83 CD 36 AD D1 	call GetFunction
  925 D1:CD87 18 8D -  -  	jr -_
  926 D1:CD89 -  -  -  -  	
  927 D1:CD89 -  -  -  -  functionMean:
  928 D1:CD89 FD CB BF C6 	set use_mean_routine, (iy+fExpression2)
  929 D1:CD8D -  -  -  -  functionMax:
  930 D1:CD8D 3E 30 -  -  	ld a, 030h
  931 D1:CD8F 18 02 -  -  	jr +_
  932 D1:CD91 -  -  -  -  functionMin:
  933 D1:CD91 3E 38 -  -  	ld a, 038h
  934 D1:CD93 32 D0 CE D1 _:	ld (MaxMinMeanInsertSMC), a
  935 D1:CD97 3E 02 -  -  	ld a, 2
  936 D1:CD99 32 B5 E9 D1 	ld (amountOfArguments), a
  937 D1:CD9D 2B -  -  -  	dec hl
  938 D1:CD9E 2B -  -  -  	dec hl
  939 D1:CD9F 2B -  -  -  	dec hl
  940 D1:CDA0 ED 17 -  -  	ld de, (hl)
  941 D1:CDA2 2B -  -  -  	dec hl
  942 D1:CDA3 7E -  -  -  	ld a, (hl)
  943 D1:CDA4 DD 6F -  -  	ld ixl, a
  944 D1:CDA6 2B -  -  -  	dec hl
  945 D1:CDA7 2B -  -  -  	dec hl
  946 D1:CDA8 2B -  -  -  	dec hl
  947 D1:CDA9 ED 07 -  -  	ld bc, (hl)
  948 D1:CDAB 2B -  -  -  	dec hl
  949 D1:CDAC 7E -  -  -  	ld a, (hl)
  950 D1:CDAD 23 -  -  -  	inc hl
  951 D1:CDAE B7 -  -  -  	or a
  952 D1:CDAF 28 18 -  -  	jr z, MaxMinMeanNumberXXX
  953 D1:CDB1 3D -  -  -  	dec a
  954 D1:CDB2 CA 38 CE D1 	jp z, MaxMinMeanVariableXXX
  955 D1:CDB6 3D -  -  -  	dec a
  956 D1:CDB7 CA 81 CE D1 	jp z, MaxMinMeanChainPushXXX
  957 D1:CDBB 3D -  -  -  	dec a
  958 D1:CDBC CA A5 CE D1 	jp z, MaxMinMeanChainAnsXXX
  959 D1:CDC0 3D -  -  -  	dec a
  960 D1:CDC1 CA F2 CE D1 	jp z, MaxMinMeanFunctionXXX
  961 D1:CDC5 C3 36 AF D1 	jp ErrorSyntax
  962 D1:CDC9 -  -  -  -  MaxMinMeanNumberXXX:
  963 D1:CDC9 DD 7D -  -  	ld a, ixl
  964 D1:CDCB B7 -  -  -  	or a
  965 D1:CDCC 28 10 -  -  	jr z, MaxMinMeanNumberNumber
  966 D1:CDCE 3D -  -  -  	dec a
  967 D1:CDCF 28 4B -  -  	jr z, MaxMinMeanNumberVariable
  968 D1:CDD1 3D -  -  -  	dec a
  969 D1:CDD2 28 4F -  -  	jr z, MaxMinMeanNumberChainPush
  970 D1:CDD4 3D -  -  -  	dec a
  971 D1:CDD5 28 50 -  -  	jr z, MaxMinMeanNumberChainAns
  972 D1:CDD7 3D -  -  -  	dec a
  973 D1:CDD8 28 51 -  -  	jr z, MaxMinMeanNumberFunction
  974 D1:CDDA C3 36 AF D1 	jp ErrorSyntax
  975 D1:CDDE -  -  -  -  MaxMinMeanNumberNumber:
  976 D1:CDDE FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  977 D1:CDE2 E5 -  -  -  	push hl
  978 D1:CDE3 FD CB BF 46 		bit use_mean_routine, (iy+fExpression2)
  979 D1:CDE7 20 1C -  -  		jr nz, ++_
  980 D1:CDE9 3A D0 CE D1 		ld a, (MaxMinMeanInsertSMC)
  981 D1:CDED C5 -  -  -  		push bc
  982 D1:CDEE E1 -  -  -  		pop hl
  983 D1:CDEF FE 30 -  -  		cp 030h
  984 D1:CDF1 28 09 -  -  		jr z, +_
  985 D1:CDF3 B7 -  -  -  		or a
  986 D1:CDF4 ED 52 -  -  		sbc hl, de
  987 D1:CDF6 19 -  -  -  		add hl, de
  988 D1:CDF7 30 01 -  -  		jr nc, $+3
  989 D1:CDF9 EB -  -  -  		ex de, hl
  990 D1:CDFA 18 1C -  -  		jr +++_
  991 D1:CDFC B7 -  -  -  _:		or a
  992 D1:CDFD ED 52 -  -  		sbc hl, de
  993 D1:CDFF 19 -  -  -  		add hl, de
  994 D1:CE00 38 01 -  -  		jr c, $+3
  995 D1:CE02 EB -  -  -  		ex de, hl
  996 D1:CE03 18 13 -  -  		jr ++_
  997 D1:CE05 EB -  -  -  _:		ex de, hl
  998 D1:CE06 DD 21 00 00 
              00 -  -  -  		ld ix, 0
  999 D1:CE0B DD 39 -  -  		add ix, sp
 1000 D1:CE0D 09 -  -  -  		add hl, bc
 1001 D1:CE0E E5 -  -  -  		push hl
 1002 D1:CE0F DD CB FF 1E 			rr (ix-1)
 1003 D1:CE13 D1 -  -  -  		pop de
 1004 D1:CE14 CB 1A -  -  		rr d
 1005 D1:CE16 CB 1B -  -  		rr e
 1006 D1:CE18 E1 -  -  -  _:	pop hl
 1007 D1:CE19 ED 1F -  -  	ld (hl), de
 1008 D1:CE1B C9 -  -  -  	ret
 1009 D1:CE1C -  -  -  -  MaxMinMeanNumberVariable:
 1010 D1:CE1C C5 -  -  -  	push bc
 1011 D1:CE1D E1 -  -  -  	pop hl
 1012 D1:CE1E EB -  -  -  	ex de, hl
 1013 D1:CE1F E5 -  -  -  	push hl
 1014 D1:CE20 C1 -  -  -  	pop bc
 1015 D1:CE21 18 2A -  -  	jr MaxMinMeanVariableNumber
 1016 D1:CE23 -  -  -  -  MaxMinMeanNumberChainPush:
 1017 D1:CE23 C3 70 AF D1 	jp UnknownError
 1018 D1:CE27 -  -  -  -  MaxMinMeanNumberChainAns:
 1019 D1:CE27 C5 -  -  -  	push bc
 1020 D1:CE28 D1 -  -  -  	pop de
 1021 D1:CE29 18 09 -  -  	jr +_
 1022 D1:CE2B -  -  -  -  MaxMinMeanNumberFunction:
 1023 D1:CE2B 7B -  -  -  	ld a, e
 1024 D1:CE2C C5 -  -  -  	push bc
 1025 D1:CE2D 06 02 -  -  		ld b, OutputInHL
 1026 D1:CE2F CD 36 AD D1 		call GetFunction
 1027 D1:CE33 D1 -  -  -  	pop de
 1028 D1:CE34 C3 BA CE D1 _:	jp MaxMinMeanChainAnsNumber
 1029 D1:CE38 -  -  -  -  MaxMinMeanVariableXXX:
 1030 D1:CE38 DD 7D -  -  	ld a, ixl
 1031 D1:CE3A B7 -  -  -  	or a
 1032 D1:CE3B 28 10 -  -  	jr z, MaxMinMeanVariableNumber
 1033 D1:CE3D 3D -  -  -  	dec a
 1034 D1:CE3E 28 13 -  -  	jr z, MaxMinMeanVariableVariable
 1035 D1:CE40 3D -  -  -  	dec a
 1036 D1:CE41 28 18 -  -  	jr z, MaxMinMeanVariableChainPush
 1037 D1:CE43 3D -  -  -  	dec a
 1038 D1:CE44 28 2B -  -  	jr z, MaxMinMeanVariableChainAns
 1039 D1:CE46 3D -  -  -  	dec a
 1040 D1:CE47 28 2F -  -  	jr z, MaxMinMeanVariableFunction
 1041 D1:CE49 C3 36 AF D1 	jp ErrorSyntax
 1042 D1:CE4D -  -  -  -  MaxMinMeanVariableNumber:
 1043 D1:CE4D CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1044 D1:CE51 18 67 -  -  	jr MaxMinMeanChainAnsNumber
 1045 D1:CE53 -  -  -  -  MaxMinMeanVariableVariable
 1046 D1:CE53 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1047 D1:CE57 C3 D7 CE D1 	jp MaxMinMeanChainAnsVariable
 1048 D1:CE5B -  -  -  -  MaxMinMeanVariableChainPush:
 1049 D1:CE5B 2A 9A E9 D1 	ld hl, (programPtr)
 1050 D1:CE5F 2B -  -  -  	dec hl
 1051 D1:CE60 7E -  -  -  	ld a, (hl)
 1052 D1:CE61 FE E5 -  -  	cp 0E5h
 1053 D1:CE63 28 03 -  -  	jr z, +_
 1054 D1:CE65 36 E1 -  -  	ld (hl), 0E1h
 1055 D1:CE67 23 -  -  -  	inc hl
 1056 D1:CE68 22 9A E9 D1 _:	ld (programPtr), hl
 1057 D1:CE6C 59 -  -  -  	ld e, c
 1058 D1:CE6D C3 D7 CE D1 	jp MaxMinMeanChainAnsVariable
 1059 D1:CE71 -  -  -  -  MaxMinMeanVariableChainAns:
 1060 D1:CE71 59 -  -  -  _:	ld e, c
 1061 D1:CE72 CD 6A AC D1 	call InsertIXE															; ld de, (ix+*)
 1062 D1:CE76 18 49 -  -  	jr MaxMinMeanInsert
 1063 D1:CE78 -  -  -  -  MaxMinMeanVariableFunction:
 1064 D1:CE78 7B -  -  -  	ld a, e
 1065 D1:CE79 06 02 -  -  	ld b, OutputInHL
 1066 D1:CE7B CD 36 AD D1 	call GetFunction
 1067 D1:CE7F 18 F0 -  -  	jr -_
 1068 D1:CE81 -  -  -  -  MaxMinMeanChainPushXXX:
 1069 D1:CE81 DD 7D -  -  	ld a, ixl
 1070 D1:CE83 FE 03 -  -  	cp typeChainAns
 1071 D1:CE85 C2 70 AF D1 	jp nz, UnknownError
 1072 D1:CE89 FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
 1073 D1:CE8D 20 0E -  -  	jr nz, +_
 1074 D1:CE8F 3E EB -  -  	ld a, 0EBh
 1075 D1:CE91 CD 0A AD D1 	call InsertA															; ex de, hl
 1076 D1:CE95 3E E1 -  -  	ld a, 0E1h
 1077 D1:CE97 CD 0A AD D1 	call InsertA															; pop hl
 1078 D1:CE9B 18 24 -  -  	jr MaxMinMeanInsert
 1079 D1:CE9D 3E D1 -  -  _:	ld a, 0D1h
 1080 D1:CE9F CD 0A AD D1 	call InsertA															; pop de
 1081 D1:CEA3 18 1C -  -  	jr MaxMinMeanInsert
 1082 D1:CEA5 -  -  -  -  MaxMinMeanChainAnsXXX:
 1083 D1:CEA5 DD 7D -  -  	ld a, ixl
 1084 D1:CEA7 B7 -  -  -  	or a
 1085 D1:CEA8 28 10 -  -  	jr z, MaxMinMeanChainAnsNumber
 1086 D1:CEAA 3D -  -  -  	dec a
 1087 D1:CEAB 28 2A -  -  	jr z, MaxMinMeanChainAnsVariable
 1088 D1:CEAD 3D -  -  -  	dec a
 1089 D1:CEAE 28 2D -  -  	jr z, MaxMinMeanChainAnsChainPush
 1090 D1:CEB0 3D -  -  -  	dec a
 1091 D1:CEB1 28 2E -  -  	jr z, MaxMinMeanChainAnsChainAns
 1092 D1:CEB3 3D -  -  -  	dec a
 1093 D1:CEB4 28 2F -  -  	jr z, MaxMinMeanChainAnsFunction
 1094 D1:CEB6 C3 36 AF D1 	jp ErrorSyntax
 1095 D1:CEBA -  -  -  -  MaxMinMeanChainAnsNumber:
 1096 D1:CEBA EB -  -  -  	ex de, hl
 1097 D1:CEBB 3E 11 -  -  	ld a, 011h
 1098 D1:CEBD CD 48 AC D1 	call InsertAHL															; ld de, *
 1099 D1:CEC1 -  -  -  -  MaxMinMeanInsert:
 1100 D1:CEC1 FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
 1101 D1:CEC5 C2 51 CF D1 	jp nz, MeanInsert
 1102 D1:CEC9 3E B7 -  -  	ld a, 0B7h
 1103 D1:CECB 11 ED 52 19 	ld de, 01952EDh
 1104 D1:CECF -  -  -  -  MaxMinMeanInsertSMC = $+1
 1105 D1:CECF 21 30 01 EB 	ld hl, 0EB0130h
 1106 D1:CED3 C3 87 AC D1 	jp InsertADEHL															; or a \ sbc hl, de \ add hl, de \ jr [n]c, $+3 \ add hl, de
 1107 D1:CED7 -  -  -  -  MaxMinMeanChainAnsVariable:
 1108 D1:CED7 CD 6A AC D1 	call InsertIXE															; ld de, (ix+*)
 1109 D1:CEDB 18 E4 -  -  	jr MaxMinMeanInsert
 1110 D1:CEDD -  -  -  -  MaxMinMeanChainAnsChainPush:
 1111 D1:CEDD C3 70 AF D1 	jp UnknownError
 1112 D1:CEE1 -  -  -  -  MaxMinMeanChainAnsChainAns:
 1113 D1:CEE1 C3 70 AF D1 	jp UnknownError
 1114 D1:CEE5 -  -  -  -  MaxMinMeanChainAnsFunction:
 1115 D1:CEE5 7B -  -  -  	ld a, e
 1116 D1:CEE6 06 01 -  -  	ld b, OutputInDE
 1117 D1:CEE8 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1118 D1:CEEC CD 36 AD D1 	call GetFunction
 1119 D1:CEF0 18 CF -  -  _:	jr MaxMinMeanInsert
 1120 D1:CEF2 -  -  -  -  MaxMinMeanFunctionXXX:
 1121 D1:CEF2 DD 7D -  -  	ld a, ixl
 1122 D1:CEF4 B7 -  -  -  	or a
 1123 D1:CEF5 28 10 -  -  	jr z, MaxMinMeanFunctionNumber
 1124 D1:CEF7 3D -  -  -  	dec a
 1125 D1:CEF8 28 16 -  -  	jr z, MaxMinMeanFunctionVariable
 1126 D1:CEFA 3D -  -  -  	dec a
 1127 D1:CEFB 28 1C -  -  	jr z, MaxMinMeanFunctionChainPush
 1128 D1:CEFD 3D -  -  -  	dec a
 1129 D1:CEFE 28 1D -  -  	jr z, MaxMinMeanFunctionChainAns
 1130 D1:CF00 3D -  -  -  	dec a
 1131 D1:CF01 28 38 -  -  	jr z, MaxMinMeanFunctionFunction
 1132 D1:CF03 C3 36 AF D1 	jp ErrorSyntax
 1133 D1:CF07 -  -  -  -  MaxMinMeanFunctionNumber:
 1134 D1:CF07 79 -  -  -  	ld a, c
 1135 D1:CF08 06 02 -  -  	ld b, OutputInHL
 1136 D1:CF0A CD 36 AD D1 	call GetFunction
 1137 D1:CF0E 18 AA -  -  	jr MaxMinMeanChainAnsNumber
 1138 D1:CF10 -  -  -  -  MaxMinMeanFunctionVariable:
 1139 D1:CF10 79 -  -  -  	ld a, c
 1140 D1:CF11 06 02 -  -  	ld b, OutputInHL
 1141 D1:CF13 CD 36 AD D1 	call GetFunction
 1142 D1:CF17 18 BE -  -  	jr MaxMinMeanChainAnsVariable
 1143 D1:CF19 -  -  -  -  MaxMinMeanFunctionChainPush:
 1144 D1:CF19 C3 70 AF D1 	jp UnknownError
 1145 D1:CF1D -  -  -  -  MaxMinMeanFunctionChainAns:
 1146 D1:CF1D FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
 1147 D1:CF21 20 13 -  -  	jr nz, ++_
 1148 D1:CF23 3E EB -  -  	ld a, 0EBh
 1149 D1:CF25 CD 0A AD D1 	call InsertA															; ex de, hl
 1150 D1:CF29 79 -  -  -  	ld a, c
 1151 D1:CF2A 06 02 -  -  	ld b, OutputInHL
 1152 D1:CF2C FD CB C0 F6 _:	set need_push, (iy+fExpression1)
 1153 D1:CF30 CD 36 AD D1 	call GetFunction
 1154 D1:CF34 18 8B -  -  	jr MaxMinMeanInsert
 1155 D1:CF36 79 -  -  -  _:	ld a, c
 1156 D1:CF37 06 01 -  -  	ld b, OutputInDE
 1157 D1:CF39 18 F1 -  -  	jr --_
 1158 D1:CF3B -  -  -  -  MaxMinMeanFunctionFunction:
 1159 D1:CF3B 7B -  -  -  	ld a, e
 1160 D1:CF3C 06 01 -  -  	ld b, OutputInDE
 1161 D1:CF3E CD 36 AD D1 	call GetFunction
 1162 D1:CF42 79 -  -  -  	ld a, c
 1163 D1:CF43 06 02 -  -  	ld b, OutputInHL
 1164 D1:CF45 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1165 D1:CF49 CD 36 AD D1 	call GetFunction
 1166 D1:CF4D C3 C1 CE D1 	jp MaxMinMeanInsert
 1167 D1:CF51 -  -  -  -  MeanInsert:
 1168 D1:CF51 FD CB D0 6E 	bit has_already_mean, (iy+fProgram1)
 1169 D1:CF55 20 2C -  -  	jr nz, +_
 1170 D1:CF57 3E CD -  -  	ld a, 0CDh
 1171 D1:CF59 CD 0A AD D1 	call InsertA															; call *
 1172 D1:CF5D CD 21 AD D1 	call InsertProgramPtrToDataOffset
 1173 D1:CF61 2A AF E9 D1 	ld hl, (programDataDataPtr)
 1174 D1:CF65 22 2A EA D0 	ld (MeanStartData), hl
 1175 D1:CF69 E5 -  -  -  	push hl
 1176 D1:CF6A D1 -  -  -  	pop de
 1177 D1:CF6B CD 4C AC D1 	call InsertHL															; call *
 1178 D1:CF6F 21 FA ED D1 	ld hl, MeanRoutine
 1179 D1:CF73 01 18 00 00 	ld bc, MeanRoutineEnd - MeanRoutine
 1180 D1:CF77 ED B0 -  -  	ldir
 1181 D1:CF79 ED 53 AF E9 
              D1 -  -  -  	ld (programDataDataPtr), de
 1182 D1:CF7E FD CB D0 EE 	set has_already_mean, (iy+fProgram1)
 1183 D1:CF82 C9 -  -  -  	ret
 1184 D1:CF83 3E CD -  -  _:	ld a, 0CDh
 1185 D1:CF85 CD 0A AD D1 	call InsertA															; call ******
 1186 D1:CF89 CD 21 AD D1 	call InsertProgramPtrToDataOffset
 1187 D1:CF8D 2A 2A EA D0 	ld hl, (MeanStartData)
 1188 D1:CF91 C3 4C AC D1 	jp InsertHL																; call XXXXXX
 1189 D1:CF95 -  -  -  -  	
 1190 D1:CF95 -  -  -  -  functionSqrt:
 1191 D1:CF95 3E 01 -  -  	ld a, 1
 1192 D1:CF97 32 B5 E9 D1 	ld (amountOfArguments), a
 1193 D1:CF9B FD CB BF CE 	set last_token_was_not, (iy+fExpression2)
 1194 D1:CF9F E5 -  -  -  	push hl
 1195 D1:CFA0 DD E1 -  -  	pop ix
 1196 D1:CFA2 DD 7E FC -  	ld a, (ix-4)
 1197 D1:CFA5 B7 -  -  -  	or a
 1198 D1:CFA6 28 10 -  -  	jr z, SqrtNumber
 1199 D1:CFA8 3D -  -  -  	dec a
 1200 D1:CFA9 28 1E -  -  	jr z, SqrtVariable
 1201 D1:CFAB 3D -  -  -  	dec a
 1202 D1:CFAC 28 31 -  -  	jr z, SqrtChainPush
 1203 D1:CFAE 3D -  -  -  	dec a
 1204 D1:CFAF 28 32 -  -  	jr z, SqrtChainAns
 1205 D1:CFB1 3D -  -  -  	dec a
 1206 D1:CFB2 28 3F -  -  	jr z, SqrtFunction
 1207 D1:CFB4 C3 36 AF D1 	jp ErrorSyntax
 1208 D1:CFB8 -  -  -  -  SqrtNumber:
 1209 D1:CFB8 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1210 D1:CFBC DD 27 FD -  	ld hl, (ix-3)
 1211 D1:CFBF E5 -  -  -  	push hl
 1212 D1:CFC0 C1 -  -  -  	pop bc
 1213 D1:CFC1 CD 54 01 00 	call __imulu
 1214 D1:CFC5 DD 2F FD -  	ld (ix-3), hl
 1215 D1:CFC8 C9 -  -  -  	ret
 1216 D1:CFC9 -  -  -  -  SqrtVariable:
 1217 D1:CFC9 DD 4E FD -  	ld c, (ix-3)
 1218 D1:CFCC 06 03 -  -  	ld b, 3
 1219 D1:CFCE ED 4C -  -  	mlt bc
 1220 D1:CFD0 79 -  -  -  	ld a, c
 1221 D1:CFD1 21 DD 27 00 	ld hl, 00027DDh
 1222 D1:CFD5 CD 70 1D 02 	call _SetHLUToA
 1223 D1:CFD9 CD 4C AC D1 	call InsertHL															; ld hl, (ix+*)
 1224 D1:CFDD 18 08 -  -  	jr SqrtChainAns2
 1225 D1:CFDF -  -  -  -  SqrtChainPush:
 1226 D1:CFDF C3 70 AF D1 	jp UnknownError
 1227 D1:CFE3 -  -  -  -  SqrtChainAns:
 1228 D1:CFE3 CD B6 AC D1 	call MaybeChangeDEToHL
 1229 D1:CFE7 -  -  -  -  SqrtChainAns2:
 1230 D1:CFE7 11 E5 C1 CD 	ld de, 0CDC1E5h
 1231 D1:CFEB 21 58 01 00 	ld hl, __imuls
 1232 D1:CFEF C3 8B AC D1 	jp InsertDEHL															; push hl \ pop bc \ call __imuls
 1233 D1:CFF3 -  -  -  -  SqrtFunction:
 1234 D1:CFF3 DD 7E FD -  	ld a, (ix-3)
 1235 D1:CFF6 06 02 -  -  	ld b, OutputInHL
 1236 D1:CFF8 CD 36 AD D1 	call GetFunction
 1237 D1:CFFC 18 E9 -  -  	jr SqrtChainAns2
 1238 D1:CFFE -  -  -  -  	
 1239 D1:CFFE -  -  -  -  functionC:
 1240 D1:CFFE 3E 01 -  -  	ld a, 1
 1241 D1:D000 32 B4 E9 D1 	ld (openedParensF), a
 1242 D1:D004 CD 28 10 02 	call _IncFetch
 1243 D1:D008 CD B0 B2 D1 	call ParseExpression
 1244 D1:D00C FD CB C0 66 	bit output_is_number, (iy+fExpression1)
 1245 D1:D010 CA 36 AF D1 	jp z, ErrorSyntax
 1246 D1:D014 2A 9A E9 D1 	ld hl, (programPtr)
 1247 D1:D018 2B -  -  -  	dec hl
 1248 D1:D019 2B -  -  -  	dec hl
 1249 D1:D01A 2B -  -  -  	dec hl
 1250 D1:D01B 2B -  -  -  	dec hl
 1251 D1:D01C 22 9A E9 D1 	ld (programPtr), hl
 1252 D1:D020 23 -  -  -  	inc hl
 1253 D1:D021 ED 27 -  -  	ld hl, (hl)
 1254 D1:D023 11 4F 00 00 	ld de, AMOUNT_OF_C_FUNCTIONS
 1255 D1:D027 B7 -  -  -  	or a
 1256 D1:D028 ED 52 -  -  	sbc hl, de
 1257 D1:D02A D2 36 AF D1 	jp nc, ErrorSyntax
 1258 D1:D02E 19 -  -  -  	add hl, de
 1259 D1:D02F 7D -  -  -  	ld a, l
 1260 D1:D030 B7 -  -  -  	or a
 1261 D1:D031 ED 62 -  -  	sbc hl, hl
 1262 D1:D033 6F -  -  -  	ld l, a
 1263 D1:D034 11 DC E7 D1 	ld de, CFunctionsArguments
 1264 D1:D038 19 -  -  -  	add hl, de
 1265 D1:D039 47 -  -  -  	ld b, a
 1266 D1:D03A 7E -  -  -  	ld a, (hl)
 1267 D1:D03B FE E0 -  -  	cp %11100000
 1268 D1:D03D CA 7C AF D1 	jp z, ImplementError
 1269 D1:D041 FD 77 B0 -  	ld (iy+fFunction1), a
 1270 D1:D044 07 -  -  -  	rlca
 1271 D1:D045 07 -  -  -  	rlca
 1272 D1:D046 07 -  -  -  	rlca
 1273 D1:D047 E6 07 -  -  	and 000000111b
 1274 D1:D049 4F -  -  -  	ld c, a
 1275 D1:D04A 78 -  -  -  	ld a, b
 1276 D1:D04B 06 03 -  -  	ld b, 3
 1277 D1:D04D ED 4C -  -  	mlt bc
 1278 D1:D04F 21 33 E9 D1 	ld hl, CArguments
 1279 D1:D053 09 -  -  -  	add hl, bc
 1280 D1:D054 ED 27 -  -  	ld hl, (hl)
 1281 D1:D056 32 5F E4 D1 	ld (CFunctionArgsSMC), a
 1282 D1:D05A E9 -  -  -  	jp (hl)
 1283 D1:D05B -  -  -  -  
 1284 D1:D05B -  -  -  -  functionCustom:
 1285 D1:D05B CD 28 10 02 	call _IncFetch
 1286 D1:D05F D6 0A -  -  	sub 10
 1287 D1:D061 DA 36 AF D1 	jp c, ErrorSyntax
 1288 D1:D065 FE 05 -  -  	cp AMOUNT_OF_CUSTOM_TOKENS + 1
 1289 D1:D067 D2 36 AF D1 	jp nc, ErrorSyntax
 1290 D1:D06B 4F -  -  -  	ld c, a
 1291 D1:D06C 06 03 -  -  	ld b, 3
 1292 D1:D06E ED 4C -  -  	mlt bc
 1293 D1:D070 21 48 E9 D1 	ld hl, functionCustomStart
 1294 D1:D074 09 -  -  -  	add hl, bc
 1295 D1:D075 ED 27 -  -  	ld hl, (hl)
 1296 D1:D077 E9 -  -  -  	jp (hl)
 1297 D1:D078 -  -  -  -  	
 1298 D1:D078 -  -  -  -  functionExecHex:
 1299 D1:D078 CD 28 10 02 	call _IncFetch
 1300 D1:D07C D8 -  -  -  	ret c
 1301 D1:D07D FE 3F -  -  	cp tEnter
 1302 D1:D07F C8 -  -  -  	ret z
 1303 D1:D080 FE 2A -  -  	cp tString
 1304 D1:D082 C8 -  -  -  	ret z
 1305 D1:D083 21 84 E9 D1 	ld hl, hexadecimals
 1306 D1:D087 01 10 00 00 	ld bc, 16
 1307 D1:D08B ED B1 -  -  	cpir
 1308 D1:D08D C2 36 AF D1 _:	jp nz, ErrorSyntax
 1309 D1:D091 51 -  -  -  	ld d, c
 1310 D1:D092 CD 28 10 02 	call _IncFetch
 1311 D1:D096 DA 36 AF D1 	jp c, ErrorSyntax
 1312 D1:D09A 21 84 E9 D1 	ld hl, hexadecimals
 1313 D1:D09E 01 10 00 00 	ld bc, 16
 1314 D1:D0A2 ED B1 -  -  	cpir
 1315 D1:D0A4 20 E7 -  -  	jr nz, -_
 1316 D1:D0A6 7A -  -  -  	ld a, d
 1317 D1:D0A7 87 -  -  -  	add a, a
 1318 D1:D0A8 87 -  -  -  	add a, a
 1319 D1:D0A9 87 -  -  -  	add a, a
 1320 D1:D0AA 87 -  -  -  	add a, a
 1321 D1:D0AB 81 -  -  -  	add a, c
 1322 D1:D0AC CD 0A AD D1 	call InsertA
 1323 D1:D0B0 18 C6 -  -  	jr functionExecHex
 1324 D1:D0B2 -  -  -  -  	
 1325 D1:D0B2 -  -  -  -  functionDefineSprite:
 1326 D1:D0B2 FD CB D0 7E 	bit used_code, (iy+fProgram1)
 1327 D1:D0B6 C2 5E AF D1 	jp nz, ErrorUsedCode
 1328 D1:D0BA 3E 01 -  -  	ld a, 1
 1329 D1:D0BC 32 B4 E9 D1 	ld (openedParensF), a
 1330 D1:D0C0 CD 21 AD D1 	call InsertProgramPtrToDataOffset
 1331 D1:D0C4 2A AF E9 D1 	ld hl, (programDataDataPtr)
 1332 D1:D0C8 E5 -  -  -  	push hl
 1333 D1:D0C9 D1 -  -  -  	pop de
 1334 D1:D0CA CD 4C AC D1 	call InsertHL
 1335 D1:D0CE 06 02 -  -  	ld b, 2
 1336 D1:D0D0 D5 -  -  -  _:	push de
 1337 D1:D0D1 C5 -  -  -  		push bc
 1338 D1:D0D2 CD 28 10 02 			call _IncFetch
 1339 D1:D0D6 CD B0 B2 D1 			call ParseExpression
 1340 D1:D0DA FD CB C0 66 			bit output_is_number, (iy+fExpression1)
 1341 D1:D0DE CA 36 AF D1 			jp z, ErrorSyntax
 1342 D1:D0E2 FD CB BE 46 			bit triggered_a_comma, (iy+fExpression3)
 1343 D1:D0E6 CA 36 AF D1 			jp z, ErrorSyntax
 1344 D1:D0EA 2A 9A E9 D1 			ld hl, (programPtr)
 1345 D1:D0EE 2B -  -  -  			dec hl
 1346 D1:D0EF 2B -  -  -  			dec hl
 1347 D1:D0F0 2B -  -  -  			dec hl
 1348 D1:D0F1 2B -  -  -  			dec hl
 1349 D1:D0F2 22 9A E9 D1 			ld (programPtr), hl
 1350 D1:D0F6 23 -  -  -  			inc hl
 1351 D1:D0F7 7E -  -  -  			ld a, (hl)
 1352 D1:D0F8 C1 -  -  -  		pop bc
 1353 D1:D0F9 D1 -  -  -  	pop de
 1354 D1:D0FA 12 -  -  -  	ld (de), a
 1355 D1:D0FB 13 -  -  -  	inc de
 1356 D1:D0FC 10 D2 -  -  	djnz -_
 1357 D1:D0FE 2A 9A E9 D1 	ld hl, (programPtr)
 1358 D1:D102 E5 -  -  -  	push hl
 1359 D1:D103 ED 53 9A E9 
              D1 -  -  -  		ld (programPtr), de
 1360 D1:D108 CD 28 10 02 		call _IncFetch
 1361 D1:D10C FE 2A -  -  		cp tString
 1362 D1:D10E C2 36 AF D1 		jp nz, ErrorSyntax
 1363 D1:D112 CD C0 0F 02 		call _NxtFetch
 1364 D1:D116 DA 36 AF D1 		jp c, ErrorSyntax
 1365 D1:D11A FE 3F -  -  		cp tEnter
 1366 D1:D11C CA 36 AF D1 		jp z, ErrorSyntax
 1367 D1:D120 CD 78 D0 D1 		call functionExecHex
 1368 D1:D124 2A 9A E9 D1 		ld hl, (programPtr)
 1369 D1:D128 22 AF E9 D1 		ld (programDataDataPtr), hl
 1370 D1:D12C E1 -  -  -  	pop hl
 1371 D1:D12D 22 9A E9 D1 	ld (programPtr), hl
 1372 D1:D131 C9 -  -  -  	ret
 1373 D1:D132 -  -  -  -  	
 1374 D1:D132 -  -  -  -  functionCompilePrgm:
 1375 D1:D132 21 F8 05 D0 	ld hl, OP1
 1376 D1:D136 CD 19 B2 D1 	call GetProgramName
 1377 D1:D13A 3E 05 -  -  	ld a, ProgObj
 1378 D1:D13C 32 F8 05 D0 	ld (OP1), a
 1379 D1:D140 CD 0C 05 02 	call _ChkFindSym
 1380 D1:D144 30 0D -  -  	jr nc, +_
 1381 D1:D146 21 F8 05 D0 	ld hl, OP1
 1382 D1:D14A 34 -  -  -  	inc (hl)
 1383 D1:D14B CD 0C 05 02 	call _ChkFindSym
 1384 D1:D14F DA 58 AF D1 	jp c, ErrorNotFound
 1385 D1:D153 CD 98 1F 02 _:	call _ChkInRAM
 1386 D1:D157 30 0A -  -  	jr nc, +_
 1387 D1:D159 EB -  -  -  	ex de, hl
 1388 D1:D15A 11 09 00 00 	ld de, 9
 1389 D1:D15E 19 -  -  -  	add hl, de
 1390 D1:D15F 5E -  -  -  	ld e, (hl)
 1391 D1:D160 19 -  -  -  	add hl, de
 1392 D1:D161 23 -  -  -  	inc hl
 1393 D1:D162 EB -  -  -  	ex de, hl
 1394 D1:D163 2A F8 05 D0 _:	ld hl, (OP1)
 1395 D1:D167 E5 -  -  -  	push hl
 1396 D1:D168 2A FB 05 D0 		ld hl, (OP1+3)
 1397 D1:D16C E5 -  -  -  		push hl
 1398 D1:D16D 2A FE 05 D0 			ld hl, (OP1+6)
 1399 D1:D171 E5 -  -  -  			push hl
 1400 D1:D172 2A 17 23 D0 				ld hl, (begPC)
 1401 D1:D176 E5 -  -  -  				push hl
 1402 D1:D177 2A 1A 23 D0 					ld hl, (curPC)
 1403 D1:D17B E5 -  -  -  					push hl
 1404 D1:D17C 2A 1D 23 D0 						ld hl, (endPC)
 1405 D1:D180 E5 -  -  -  						push hl
 1406 D1:D181 EB -  -  -  							ex de, hl
 1407 D1:D182 01 00 00 00 							ld bc, 0
 1408 D1:D186 4E -  -  -  							ld c, (hl)
 1409 D1:D187 23 -  -  -  							inc hl
 1410 D1:D188 22 1A 23 D0 							ld (curPC), hl
 1411 D1:D18C 46 -  -  -  							ld b, (hl)
 1412 D1:D18D 23 -  -  -  							inc hl
 1413 D1:D18E 22 17 23 D0 							ld (begPC), hl
 1414 D1:D192 09 -  -  -  							add hl, bc
 1415 D1:D193 2B -  -  -  							dec hl
 1416 D1:D194 22 1D 23 D0 							ld (endPC), hl
 1417 D1:D198 CD F5 B0 D1 							call PrintCompilingProgram
 1418 D1:D19C 21 BC E9 D1 							ld hl, AmountOfSubPrograms
 1419 D1:D1A0 34 -  -  -  							inc (hl)
 1420 D1:D1A1 CD 6C AA D1 							call CompileProgramFull
 1421 D1:D1A5 E1 -  -  -  						pop hl
 1422 D1:D1A6 22 1D 23 D0 						ld (endPC), hl
 1423 D1:D1AA E1 -  -  -  					pop hl
 1424 D1:D1AB 22 1A 23 D0 					ld (curPC), hl
 1425 D1:D1AF E1 -  -  -  				pop hl
 1426 D1:D1B0 22 17 23 D0 				ld (begPC), hl
 1427 D1:D1B4 E1 -  -  -  			pop hl
 1428 D1:D1B5 22 FE 05 D0 			ld (OP1+6), hl
 1429 D1:D1B9 E1 -  -  -  		pop hl
 1430 D1:D1BA 22 FB 05 D0 		ld (OP1+3), hl
 1431 D1:D1BE E1 -  -  -  	pop hl
 1432 D1:D1BF 22 F8 05 D0 	ld (OP1), hl
 1433 D1:D1C3 C3 F5 B0 D1 	jp PrintCompilingProgram
Listing for file "ICE.asm"
  446 D1:D1C7 -  -  -  -  #include "operators functions/operators.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\operators.asm"
    1 D1:D1C7 -  -  -  -  ExecuteOperator:
    2 D1:D1C7 32 20 EA D0 	ld (tempToken2), a
    3 D1:D1CB 21 BB E9 D1 	ld hl, ExprOutput2
    4 D1:D1CF 36 01 -  -  	ld (hl), OutputIsInHL
    5 D1:D1D1 B7 -  -  -  	or a
    6 D1:D1D2 CA 1C D2 D1 	jp z, ListElementXXX
    7 D1:D1D6 FE 6D -  -  	cp tLE
    8 D1:D1D8 CC 00 DA D1 	call z, SwapLEToGE
    9 D1:D1DC FE 6B -  -  	cp tLT
   10 D1:D1DE CC 04 DA D1 	call z, SwapLTToGT
   11 D1:D1E2 32 1F EA D0 	ld (tempToken), a
   12 D1:D1E6 C5 -  -  -  	push bc
   13 D1:D1E7 21 2B E8 D1 		ld hl, operators_booleans
   14 D1:D1EB 01 0E 00 00 		ld bc, 14
   15 D1:D1EF ED B1 -  -  		cpir
   16 D1:D1F1 21 3A E8 D1 		ld hl, operators_special
   17 D1:D1F5 09 -  -  -  		add hl, bc
   18 D1:D1F6 4E -  -  -  		ld c, (hl)
   19 D1:D1F7 79 -  -  -  		ld a, c
   20 D1:D1F8 FE 04 -  -  		cp 4
   21 D1:D1FA 20 04 -  -  		jr nz, +_
   22 D1:D1FC FD CB C0 EE 		set ans_set_z_flag, (iy+fExpression1)
   23 D1:D200 06 12 -  -  _:		ld b, 18
   24 D1:D202 ED 4C -  -  		mlt bc
   25 D1:D204 21 A3 E8 D1 		ld hl, operator_start											; start of bunch jumps
   26 D1:D208 09 -  -  -  		add hl, bc														; start of right operator
   27 D1:D209 DD 7E F8 -  		ld a, (ix-8)
   28 D1:D20C 4F -  -  -  		ld c, a
   29 D1:D20D FE 06 -  -  		cp 6
   30 D1:D20F D2 36 AF D1 		jp nc, ErrorSyntax
   31 D1:D213 06 03 -  -  		ld b, 3
   32 D1:D215 ED 4C -  -  		mlt bc
   33 D1:D217 09 -  -  -  		add hl, bc														; start of right subelement
   34 D1:D218 ED 27 -  -  		ld hl, (hl)
   35 D1:D21A C1 -  -  -  	pop bc
   36 D1:D21B E9 -  -  -  	jp (hl)
   37 D1:D21C -  -  -  -  	
   38 D1:D21C -  -  -  -  ListElementXXX:
   39 D1:D21C DD 7E FC -  	ld a, (ix-4)
   40 D1:D21F B7 -  -  -  	or a
   41 D1:D220 28 0C -  -  	jr z, ListElementNumber
   42 D1:D222 3D -  -  -  	dec a
   43 D1:D223 28 14 -  -  	jr z, ListElementVariable
   44 D1:D225 3D -  -  -  	dec a
   45 D1:D226 28 17 -  -  	jr z, ListElementChainPush
   46 D1:D228 3D -  -  -  	dec a
   47 D1:D229 28 18 -  -  	jr z, ListElementChainAns
   48 D1:D22B 3D -  -  -  	dec a
   49 D1:D22C 28 31 -  -  	jr z, ListElementFunction
   50 D1:D22E -  -  -  -  ListElementNumber:
   51 D1:D22E 3E 2A -  -  	ld a, 02Ah
   52 D1:D230 C5 -  -  -  	push bc
   53 D1:D231 E1 -  -  -  	pop hl
   54 D1:D232 19 -  -  -  	add hl, de
   55 D1:D233 19 -  -  -  	add hl, de
   56 D1:D234 19 -  -  -  	add hl, de
   57 D1:D235 C3 48 AC D1 	jp InsertAHL															; ld hl, (*)
   58 D1:D239 -  -  -  -  ListElementVariable:
   59 D1:D239 CD 6A AC D1 	call InsertIXE															; ld de, (ix+*)
   60 D1:D23D 18 08 -  -  	jr +_
   61 D1:D23F -  -  -  -  ListElementChainPush:
   62 D1:D23F C3 70 AF D1 	jp UnknownError
   63 D1:D243 -  -  -  -  ListElementChainAns:
   64 D1:D243 CD AC AC D1 	call MaybeChangeHLToDE
   65 D1:D247 3E 21 -  -  _:	ld a, 021h
   66 D1:D249 C5 -  -  -  	push bc
   67 D1:D24A D1 -  -  -  	pop de
   68 D1:D24B 21 19 19 19 	ld hl, 0191919h
   69 D1:D24F CD 87 AC D1 	call InsertADEHL														; ld hl, * \ add hl, de \ add hl, de \ add hl, de
   70 D1:D253 3E ED -  -  	ld a, 0EDh
   71 D1:D255 CD 0A AD D1 	call InsertA															; ld hl, (hl) (1)
   72 D1:D259 3E 27 -  -  	ld a, 027h
   73 D1:D25B C3 0A AD D1 	jp InsertA																; ld hl, (hl) (2)
   74 D1:D25F -  -  -  -  ListElementFunction:
   75 D1:D25F 7B -  -  -  	ld a, e
   76 D1:D260 06 01 -  -  	ld b, OutputInDE
   77 D1:D262 CD 36 AD D1 	call GetFunction
   78 D1:D266 18 DF -  -  	jr -_
   79 D1:D268 -  -  -  -  	
   80 D1:D268 -  -  -  -  SubNumberXXX:
   81 D1:D268 DD 7E FC -  	ld a, (ix-4)
   82 D1:D26B B7 -  -  -  	or a
   83 D1:D26C 28 10 -  -  	jr z, SubNumberNumber
   84 D1:D26E 3D -  -  -  	dec a
   85 D1:D26F 28 1A -  -  	jr z, SubNumberVariable
   86 D1:D271 3D -  -  -  	dec a
   87 D1:D272 28 23 -  -  	jr z, SubNumberChainPush
   88 D1:D274 3D -  -  -  	dec a
   89 D1:D275 28 24 -  -  	jr z, SubNumberChainAns
   90 D1:D277 3D -  -  -  	dec a
   91 D1:D278 28 31 -  -  	jr z, SubNumberFunction
   92 D1:D27A C3 CB AE D1 	jp SubError
   93 D1:D27E -  -  -  -  SubNumberNumber:
   94 D1:D27E FD CB C0 E6 	set output_is_number, (iy+fExpression1)
   95 D1:D282 C5 -  -  -  	push bc
   96 D1:D283 E1 -  -  -  	pop hl
   97 D1:D284 B7 -  -  -  	or a
   98 D1:D285 ED 52 -  -  	sbc hl, de
   99 D1:D287 DD 2F F9 -  	ld (ix-7), hl
  100 D1:D28A C9 -  -  -  	ret
  101 D1:D28B -  -  -  -  SubNumberVariable:
  102 D1:D28B 3E 21 -  -  	ld a, 021h
  103 D1:D28D C5 -  -  -  	push bc
  104 D1:D28E E1 -  -  -  	pop hl
  105 D1:D28F CD 48 AC D1 	call InsertAHL															; ld hl, *
  106 D1:D293 C3 BC D3 D1 	jp SubChainAnsVariable
  107 D1:D297 -  -  -  -  SubNumberChainPush:
  108 D1:D297 C3 70 AF D1 	jp UnknownError
  109 D1:D29B -  -  -  -  SubNumberChainAns:
  110 D1:D29B CD AC AC D1 	call MaybeChangeHLToDE
  111 D1:D29F 3E 21 -  -  	ld a, 021h
  112 D1:D2A1 C5 -  -  -  	push bc
  113 D1:D2A2 D1 -  -  -  	pop de
  114 D1:D2A3 21 B7 ED 52 	ld hl, 052EDB7h
  115 D1:D2A7 C3 87 AC D1 	jp InsertADEHL															; ld hl, * \ or a \ sbc hl, de
  116 D1:D2AB -  -  -  -  SubNumberFunction:
  117 D1:D2AB 7B -  -  -  	ld a, e
  118 D1:D2AC C5 -  -  -  	push bc
  119 D1:D2AD 06 01 -  -  		ld b, OutputInDE
  120 D1:D2AF CD 36 AD D1 		call GetFunction
  121 D1:D2B3 3E 21 -  -  		ld a, 021h
  122 D1:D2B5 D1 -  -  -  	pop de
  123 D1:D2B6 21 B7 ED 52 	ld hl, 052EDB7h
  124 D1:D2BA C3 87 AC D1 	jp InsertADEHL															; ld hl, * \ or a \ sbc hl, de
  125 D1:D2BE -  -  -  -  SubVariableXXX:
  126 D1:D2BE DD 7E FC -  	ld a, (ix-4)
  127 D1:D2C1 B7 -  -  -  	or a
  128 D1:D2C2 28 12 -  -  	jr z, SubVariableNumber
  129 D1:D2C4 3D -  -  -  	dec a
  130 D1:D2C5 28 17 -  -  	jr z, SubVariableVariable
  131 D1:D2C7 3D -  -  -  	dec a
  132 D1:D2C8 28 2E -  -  	jr z, SubVariableChainPush
  133 D1:D2CA 3D -  -  -  	dec a
  134 D1:D2CB 28 2F -  -  	jr z, SubVariableChainAns
  135 D1:D2CD 3D -  -  -  	dec a
  136 D1:D2CE CA 0C D3 D1 	jp z, SubVariableFunction
  137 D1:D2D2 C3 CB AE D1 	jp SubError
  138 D1:D2D6 -  -  -  -  SubVariableNumber:
  139 D1:D2D6 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  140 D1:D2DA C3 79 D3 D1 	jp SubChainAnsNumber
  141 D1:D2DE -  -  -  -  SubVariableVariable:
  142 D1:D2DE 79 -  -  -  	ld a, c
  143 D1:D2DF BB -  -  -  	cp e
  144 D1:D2E0 20 0E -  -  	jr nz, +_
  145 D1:D2E2 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  146 D1:D2E6 36 00 -  -  	ld (hl), typeNumber
  147 D1:D2E8 11 00 00 00 	ld de, 0
  148 D1:D2EC 23 -  -  -  	inc hl
  149 D1:D2ED ED 1F -  -  	ld (hl), de
  150 D1:D2EF C9 -  -  -  	ret
  151 D1:D2F0 CD 61 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  152 D1:D2F4 C3 BC D3 D1 	jp SubChainAnsVariable
  153 D1:D2F8 -  -  -  -  SubVariableChainPush:
  154 D1:D2F8 C3 70 AF D1 	jp UnknownError
  155 D1:D2FC -  -  -  -  SubVariableChainAns:
  156 D1:D2FC CD AC AC D1 	call MaybeChangeHLToDE
  157 D1:D300 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  158 D1:D304 21 B7 ED 52 	ld hl, 052EDB7h
  159 D1:D308 C3 4C AC D1 	jp InsertHL																; or a \ sbc hl, de
  160 D1:D30C -  -  -  -  SubVariableFunction:
  161 D1:D30C 7B -  -  -  	ld a, e
  162 D1:D30D 06 01 -  -  	ld b, OutputInDE
  163 D1:D30F CD 36 AD D1 	call GetFunction
  164 D1:D313 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  165 D1:D317 21 B7 ED 52 	ld hl, 052EDB7h
  166 D1:D31B C3 4C AC D1 	jp InsertHL																; or a \ sbc hl, de
  167 D1:D31F -  -  -  -  SubChainPushXXX:
  168 D1:D31F DD 7E FC -  	ld a, (ix-4)
  169 D1:D322 B7 -  -  -  	or a
  170 D1:D323 28 12 -  -  	jr z, SubChainPushNumber
  171 D1:D325 3D -  -  -  	dec a
  172 D1:D326 28 17 -  -  	jr z, SubChainPushVariable
  173 D1:D328 3D -  -  -  	dec a
  174 D1:D329 28 1C -  -  	jr z, SubChainPushChainPush
  175 D1:D32B 3D -  -  -  	dec a
  176 D1:D32C 28 1D -  -  	jr z, SubChainPushChainAns
  177 D1:D32E 3D -  -  -  	dec a
  178 D1:D32F CA 59 D3 D1 	jp z, SubChainPushFunction
  179 D1:D333 C3 CB AE D1 	jp SubError
  180 D1:D337 -  -  -  -  SubChainPushNumber:
  181 D1:D337 3E E1 -  -  	ld a, 0E1h
  182 D1:D339 CD 0A AD D1 	call InsertA															; pop hl
  183 D1:D33D 18 3A -  -  	jr SubChainAnsNumber
  184 D1:D33F -  -  -  -  SubChainPushVariable:
  185 D1:D33F 3E E1 -  -  	ld a, 0E1h
  186 D1:D341 CD 0A AD D1 	call InsertA															; pop hl
  187 D1:D345 18 75 -  -  	jr SubChainAnsVariable
  188 D1:D347 -  -  -  -  SubChainPushChainPush:
  189 D1:D347 C3 70 AF D1 	jp UnknownError
  190 D1:D34B -  -  -  -  SubChainPushChainAns:
  191 D1:D34B CD AC AC D1 	call MaybeChangeHLToDE
  192 D1:D34F 3E E1 -  -  	ld a, 0E1h
  193 D1:D351 21 B7 ED 52 	ld hl, 052EDB7h
  194 D1:D355 C3 48 AC D1 	jp InsertAHL															; pop hl \ or a \ sbc hl, de
  195 D1:D359 -  -  -  -  SubChainPushFunction:
  196 D1:D359 3E E1 -  -  	ld a, 0E1h
  197 D1:D35B CD 0A AD D1 	call InsertA															; pop hl
  198 D1:D35F 18 73 -  -  	jr SubChainAnsFunction
  199 D1:D361 -  -  -  -  SubChainAnsXXX:
  200 D1:D361 DD 7E FC -  	ld a, (ix-4)
  201 D1:D364 B7 -  -  -  	or a
  202 D1:D365 28 12 -  -  	jr z, SubChainAnsNumber
  203 D1:D367 3D -  -  -  	dec a
  204 D1:D368 28 52 -  -  	jr z, SubChainAnsVariable
  205 D1:D36A 3D -  -  -  	dec a
  206 D1:D36B 28 5F -  -  	jr z, SubChainAnsChainPush
  207 D1:D36D 3D -  -  -  	dec a
  208 D1:D36E 28 60 -  -  	jr z, SubChainAnsChainAns
  209 D1:D370 3D -  -  -  	dec a
  210 D1:D371 CA D4 D3 D1 	jp z, SubChainAnsFunction
  211 D1:D375 C3 CB AE D1 	jp SubError
  212 D1:D379 -  -  -  -  SubChainAnsNumber:
  213 D1:D379 B7 -  -  -  	or a
  214 D1:D37A ED 62 -  -  	sbc hl, hl
  215 D1:D37C EB -  -  -  	ex de, hl
  216 D1:D37D ED 52 -  -  	sbc hl, de
  217 D1:D37F C8 -  -  -  	ret z
  218 D1:D380 1E 07 -  -  	ld e, 7
  219 D1:D382 ED 52 -  -  	sbc hl, de
  220 D1:D384 30 1C -  -  	jr nc, SubHLDE
  221 D1:D386 19 -  -  -  	add hl, de
  222 D1:D387 45 -  -  -  	ld b, l
  223 D1:D388 3A BA E9 D1 	ld a, (ExprOutput)
  224 D1:D38C B7 -  -  -  	or a
  225 D1:D38D 28 09 -  -  	jr z, ++_
  226 D1:D38F 3E 2B -  -  	ld a, 02Bh
  227 D1:D391 CD 0A AD D1 _:	call InsertA															; dec hl/de
  228 D1:D395 10 FA -  -  	djnz -_
  229 D1:D397 C9 -  -  -  	ret
  230 D1:D398 3E 00 -  -  _:	ld a, OutputIsInDE
  231 D1:D39A 32 BB E9 D1 	ld (ExprOutput2), a
  232 D1:D39E 3E 1B -  -  	ld a, 01Bh
  233 D1:D3A0 18 EF -  -  	jr --_
  234 D1:D3A2 -  -  -  -  SubHLDE:
  235 D1:D3A2 19 -  -  -  	add hl, de
  236 D1:D3A3 CD 60 01 00 	call __ineg
  237 D1:D3A7 3A BA E9 D1 	ld a, (ExprOutput)
  238 D1:D3AB B7 -  -  -  	or a
  239 D1:D3AC 3E 11 -  -  	ld a, 011h
  240 D1:D3AE 20 02 -  -  	jr nz, +_
  241 D1:D3B0 3E 21 -  -  	ld a, 021h
  242 D1:D3B2 CD 48 AC D1 _:	call InsertAHL															; ld hl/de, 16777215-*
  243 D1:D3B6 3E 19 -  -  	ld a, 019h
  244 D1:D3B8 C3 0A AD D1 	jp InsertA																; add hl, de
  245 D1:D3BC -  -  -  -  SubChainAnsVariable:
  246 D1:D3BC CD B6 AC D1 	call MaybeChangeDEToHL
  247 D1:D3C0 CD 6A AC D1 	call InsertIXE															; ld de, (ix+*)
  248 D1:D3C4 21 B7 ED 52 	ld hl, 052EDB7h
  249 D1:D3C8 C3 4C AC D1 	jp InsertHL																; or a \ sbc hl, de
  250 D1:D3CC -  -  -  -  SubChainAnsChainPush:
  251 D1:D3CC C3 70 AF D1 	jp UnknownError
  252 D1:D3D0 -  -  -  -  SubChainAnsChainAns:
  253 D1:D3D0 C3 70 AF D1 	jp UnknownError
  254 D1:D3D4 -  -  -  -  SubChainAnsFunction:
  255 D1:D3D4 3A BA E9 D1 	ld a, (ExprOutput)
  256 D1:D3D8 87 -  -  -  	add a, a
  257 D1:D3D9 87 -  -  -  	add a, a
  258 D1:D3DA 87 -  -  -  	add a, a
  259 D1:D3DB 87 -  -  -  	add a, a
  260 D1:D3DC C6 D5 -  -  	add a, 0D5h
  261 D1:D3DE CD 0A AD D1 	call InsertA															; push hl/de
  262 D1:D3E2 7B -  -  -  	ld a, e
  263 D1:D3E3 06 01 -  -  	ld b, OutputInDE
  264 D1:D3E5 CD 36 AD D1 	call GetFunction
  265 D1:D3E9 3E E1 -  -  	ld a, 0E1h
  266 D1:D3EB 21 B7 ED 52 	ld hl, 052EDB7h
  267 D1:D3EF C3 48 AC D1 	jp InsertAHL															; pop hl \ or a \ sbc hl, de
  268 D1:D3F3 -  -  -  -  SubFunctionXXX:
  269 D1:D3F3 DD 7E FC -  	ld a, (ix-4)
  270 D1:D3F6 B7 -  -  -  	or a
  271 D1:D3F7 28 10 -  -  	jr z, SubFunctionNumber
  272 D1:D3F9 3D -  -  -  	dec a
  273 D1:D3FA 28 18 -  -  	jr z, SubFunctionVariable
  274 D1:D3FC 3D -  -  -  	dec a
  275 D1:D3FD 28 20 -  -  	jr z, SubFunctionChainPush
  276 D1:D3FF 3D -  -  -  	dec a
  277 D1:D400 28 21 -  -  	jr z, SubFunctionChainAns
  278 D1:D402 3D -  -  -  	dec a
  279 D1:D403 28 3D -  -  	jr z, SubFunctionFunction
  280 D1:D405 C3 CB AE D1 	jp SubError
  281 D1:D409 -  -  -  -  SubFunctionNumber:
  282 D1:D409 79 -  -  -  	ld a, c
  283 D1:D40A 06 02 -  -  	ld b, OutputInHL
  284 D1:D40C CD 36 AD D1 	call GetFunction
  285 D1:D410 C3 79 D3 D1 	jp SubChainAnsNumber
  286 D1:D414 -  -  -  -  SubFunctionVariable:
  287 D1:D414 79 -  -  -  	ld a, c
  288 D1:D415 06 02 -  -  	ld b, OutputInHL
  289 D1:D417 CD 36 AD D1 	call GetFunction
  290 D1:D41B C3 BC D3 D1 	jp SubChainAnsVariable
  291 D1:D41F -  -  -  -  SubFunctionChainPush:
  292 D1:D41F C3 70 AF D1 	jp UnknownError
  293 D1:D423 -  -  -  -  SubFunctionChainAns:
  294 D1:D423 3A BA E9 D1 	ld a, (ExprOutput)
  295 D1:D427 87 -  -  -  	add a, a
  296 D1:D428 87 -  -  -  	add a, a
  297 D1:D429 87 -  -  -  	add a, a
  298 D1:D42A 87 -  -  -  	add a, a
  299 D1:D42B C6 D5 -  -  	add a, 0D5h
  300 D1:D42D CD 0A AD D1 	call InsertA															; push hl/de
  301 D1:D431 79 -  -  -  	ld a, c
  302 D1:D432 06 02 -  -  	ld b, OutputInHL
  303 D1:D434 CD 36 AD D1 	call GetFunction
  304 D1:D438 3E E1 -  -  	ld a, 0E1h
  305 D1:D43A 21 B7 ED 52 	ld hl, 052EDB7h
  306 D1:D43E C3 48 AC D1 	jp InsertAHL															; pop de \ or a \ sbc hl, de
  307 D1:D442 -  -  -  -  SubFunctionFunction:
  308 D1:D442 7B -  -  -  	ld a, e
  309 D1:D443 06 02 -  -  	ld b, OutputInHL
  310 D1:D445 CD 36 AD D1 	call GetFunction
  311 D1:D449 79 -  -  -  	ld a, c
  312 D1:D44A 06 01 -  -  	ld b, OutputInDE
  313 D1:D44C FD CB C0 F6 	set need_push, (iy+fExpression1)
  314 D1:D450 CD 36 AD D1 	call GetFunction
  315 D1:D454 21 B7 ED 52 	ld hl, 052EDB7h
  316 D1:D458 C3 4C AC D1 	jp InsertHL																; or a \ sbc hl, de
  317 D1:D45C -  -  -  -  
  318 D1:D45C -  -  -  -  AddNumberXXX:
  319 D1:D45C DD 7E FC -  	ld a, (ix-4)
  320 D1:D45F B7 -  -  -  	or a
  321 D1:D460 28 10 -  -  	jr z, AddNumberNumber
  322 D1:D462 3D -  -  -  	dec a
  323 D1:D463 28 17 -  -  	jr z, AddNumberVariable
  324 D1:D465 3D -  -  -  	dec a
  325 D1:D466 28 1B -  -  	jr z, AddNumberChainPush
  326 D1:D468 3D -  -  -  	dec a
  327 D1:D469 28 1C -  -  	jr z, AddNumberChainAns
  328 D1:D46B 3D -  -  -  	dec a
  329 D1:D46C 28 1F -  -  	jr z, AddNumberFunction
  330 D1:D46E C3 CF AE D1 	jp AddError
  331 D1:D472 -  -  -  -  AddNumberNumber:
  332 D1:D472 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  333 D1:D476 EB -  -  -  	ex de, hl
  334 D1:D477 09 -  -  -  	add hl, bc
  335 D1:D478 DD 2F F9 -  	ld (ix-7), hl
  336 D1:D47B C9 -  -  -  	ret
  337 D1:D47C -  -  -  -  AddNumberVariable:
  338 D1:D47C C5 -  -  -  	push bc
  339 D1:D47D E1 -  -  -  	pop hl
  340 D1:D47E EB -  -  -  	ex de, hl
  341 D1:D47F E5 -  -  -  	push hl
  342 D1:D480 C1 -  -  -  	pop bc
  343 D1:D481 18 2B -  -  	jr AddVariableNumber
  344 D1:D483 -  -  -  -  AddNumberChainPush:
  345 D1:D483 C3 70 AF D1 	jp UnknownError
  346 D1:D487 -  -  -  -  AddNumberChainAns:
  347 D1:D487 C5 -  -  -  	push bc
  348 D1:D488 D1 -  -  -  	pop de
  349 D1:D489 C3 41 D5 D1 	jp AddChainAnsNumber
  350 D1:D48D -  -  -  -  AddNumberFunction:
  351 D1:D48D C5 -  -  -  	push bc
  352 D1:D48E E1 -  -  -  	pop hl
  353 D1:D48F EB -  -  -  	ex de, hl
  354 D1:D490 E5 -  -  -  	push hl
  355 D1:D491 C1 -  -  -  	pop bc
  356 D1:D492 C3 DF D5 D1 	jp AddFunctionNumber
  357 D1:D496 -  -  -  -  AddVariableXXX:
  358 D1:D496 DD 7E FC -  	ld a, (ix-4)
  359 D1:D499 B7 -  -  -  	or a
  360 D1:D49A 28 12 -  -  	jr z, AddVariableNumber
  361 D1:D49C 3D -  -  -  	dec a
  362 D1:D49D 28 17 -  -  	jr z, AddVariableVariable
  363 D1:D49F 3D -  -  -  	dec a
  364 D1:D4A0 28 1C -  -  	jr z, AddVariableChainPush
  365 D1:D4A2 3D -  -  -  	dec a
  366 D1:D4A3 28 24 -  -  	jr z, AddVariableChainAns
  367 D1:D4A5 3D -  -  -  	dec a
  368 D1:D4A6 CA CE D4 D1 	jp z, AddVariableFunction
  369 D1:D4AA C3 CF AE D1 	jp AddError
  370 D1:D4AE -  -  -  -  AddVariableNumber:
  371 D1:D4AE CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  372 D1:D4B2 C3 41 D5 D1 	jp AddChainAnsNumber
  373 D1:D4B6 -  -  -  -  AddVariableVariable:
  374 D1:D4B6 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  375 D1:D4BA C3 80 D5 D1 	jp AddChainAnsVariable
  376 D1:D4BE -  -  -  -  AddVariableChainPush:
  377 D1:D4BE 3E E1 -  -  	ld a, 0E1h
  378 D1:D4C0 CD 0A AD D1 	call InsertA															; pop hl
  379 D1:D4C4 59 -  -  -  	ld e, c
  380 D1:D4C5 C3 80 D5 D1 	jp AddChainAnsVariable
  381 D1:D4C9 -  -  -  -  AddVariableChainAns:
  382 D1:D4C9 59 -  -  -  	ld e, c
  383 D1:D4CA C3 80 D5 D1 	jp AddChainAnsVariable
  384 D1:D4CE -  -  -  -  AddVariableFunction:
  385 D1:D4CE 7B -  -  -  	ld a, e
  386 D1:D4CF 06 02 -  -  	ld b, OutputInHL
  387 D1:D4D1 CD 36 AD D1 	call GetFunction
  388 D1:D4D5 59 -  -  -  	ld e, c
  389 D1:D4D6 CD 6A AC D1 	call InsertIXE															; ld de, (ix+*)
  390 D1:D4DA 3E 19 -  -  	ld a, 019h
  391 D1:D4DC C3 0A AD D1 	jp InsertA																; add hl, de
  392 D1:D4E0 -  -  -  -  AddChainPushXXX:
  393 D1:D4E0 DD 7E FC -  	ld a, (ix-4)
  394 D1:D4E3 B7 -  -  -  	or a
  395 D1:D4E4 28 12 -  -  	jr z, AddChainPushNumber
  396 D1:D4E6 3D -  -  -  	dec a
  397 D1:D4E7 28 17 -  -  	jr z, AddChainPushVariable
  398 D1:D4E9 3D -  -  -  	dec a
  399 D1:D4EA 28 1C -  -  	jr z, AddChainPushChainPush
  400 D1:D4EC 3D -  -  -  	dec a
  401 D1:D4ED 28 1D -  -  	jr z, AddChainPushChainAns
  402 D1:D4EF 3D -  -  -  	dec a
  403 D1:D4F0 CA 21 D5 D1 	jp z, AddChainPushFunction
  404 D1:D4F4 C3 CF AE D1 	jp AddError
  405 D1:D4F8 -  -  -  -  AddChainPushNumber:
  406 D1:D4F8 3E E1 -  -  	ld a, 0E1h
  407 D1:D4FA CD 0A AD D1 	call InsertA															; pop hl
  408 D1:D4FE 18 41 -  -  	jr AddChainAnsNumber
  409 D1:D500 -  -  -  -  AddChainPushVariable:
  410 D1:D500 3E E1 -  -  	ld a, 0E1h
  411 D1:D502 CD 0A AD D1 	call InsertA															; pop hl
  412 D1:D506 18 78 -  -  	jr AddChainAnsVariable
  413 D1:D508 -  -  -  -  AddChainPushChainPush:
  414 D1:D508 C3 70 AF D1 	jp UnknownError
  415 D1:D50C -  -  -  -  AddChainPushChainAns:
  416 D1:D50C 3A BA E9 D1 	ld a, (ExprOutput)
  417 D1:D510 B7 -  -  -  	or a
  418 D1:D511 3E D1 -  -  	ld a, 0D1h
  419 D1:D513 20 02 -  -  	jr nz, +_
  420 D1:D515 3E E1 -  -  	ld a, 0E1h
  421 D1:D517 CD 0A AD D1 _:	call InsertA															; pop hl/de
  422 D1:D51B 3E 19 -  -  	ld a, 019h
  423 D1:D51D C3 0A AD D1 	jp InsertA																; add hl, de
  424 D1:D521 -  -  -  -  AddChainPushFunction:
  425 D1:D521 3E E1 -  -  	ld a, 0E1h
  426 D1:D523 CD 0A AD D1 	call InsertA															; pop hl
  427 D1:D527 18 7F -  -  	jr AddChainAnsFunction
  428 D1:D529 -  -  -  -  AddChainAnsXXX:
  429 D1:D529 DD 7E FC -  	ld a, (ix-4)
  430 D1:D52C B7 -  -  -  	or a
  431 D1:D52D 28 12 -  -  	jr z, AddChainAnsNumber
  432 D1:D52F 3D -  -  -  	dec a
  433 D1:D530 28 4E -  -  	jr z, AddChainAnsVariable
  434 D1:D532 3D -  -  -  	dec a
  435 D1:D533 28 6B -  -  	jr z, AddChainAnsChainPush
  436 D1:D535 3D -  -  -  	dec a
  437 D1:D536 28 6C -  -  	jr z, AddChainAnsChainAns
  438 D1:D538 3D -  -  -  	dec a
  439 D1:D539 CA A8 D5 D1 	jp z, AddChainAnsFunction
  440 D1:D53D C3 CF AE D1 	jp AddError
  441 D1:D541 -  -  -  -  AddChainAnsNumber:
  442 D1:D541 B7 -  -  -  	or a
  443 D1:D542 ED 62 -  -  	sbc hl, hl
  444 D1:D544 EB -  -  -  	ex de, hl
  445 D1:D545 ED 52 -  -  	sbc hl, de
  446 D1:D547 C8 -  -  -  	ret z
  447 D1:D548 1E 06 -  -  	ld e, 6
  448 D1:D54A ED 52 -  -  	sbc hl, de
  449 D1:D54C 30 1C -  -  	jr nc, AddHLDE
  450 D1:D54E 19 -  -  -  	add hl, de
  451 D1:D54F 45 -  -  -  	ld b, l
  452 D1:D550 3A BA E9 D1 	ld a, (ExprOutput)
  453 D1:D554 B7 -  -  -  	or a
  454 D1:D555 28 09 -  -  	jr z, ++_
  455 D1:D557 3E 23 -  -  	ld a, 023h
  456 D1:D559 CD 0A AD D1 _:	call InsertA															; inc hl/de
  457 D1:D55D 10 FA -  -  	djnz -_
  458 D1:D55F C9 -  -  -  	ret
  459 D1:D560 3E 00 -  -  _:	ld a, OutputIsInDE
  460 D1:D562 32 BB E9 D1 	ld (ExprOutput2), a
  461 D1:D566 3E 13 -  -  	ld a, 013h
  462 D1:D568 18 EF -  -  	jr --_
  463 D1:D56A -  -  -  -  AddHLDE:
  464 D1:D56A 19 -  -  -  	add hl, de
  465 D1:D56B 3A BA E9 D1 	ld a, (ExprOutput)
  466 D1:D56F B7 -  -  -  	or a
  467 D1:D570 3E 11 -  -  	ld a, 011h
  468 D1:D572 20 02 -  -  	jr nz, +_
  469 D1:D574 3E 21 -  -  	ld a, 021h
  470 D1:D576 CD 48 AC D1 _:	call InsertAHL															; ld hl/de, *
  471 D1:D57A 3E 19 -  -  	ld a, 019h
  472 D1:D57C C3 0A AD D1 	jp InsertA																; add hl, de
  473 D1:D580 -  -  -  -  AddChainAnsVariable:
  474 D1:D580 26 17 -  -  	ld h, 017h
  475 D1:D582 16 03 -  -  	ld d, 3
  476 D1:D584 ED 5C -  -  	mlt de
  477 D1:D586 7B -  -  -  	ld a, e
  478 D1:D587 2E DD -  -  	ld l, 0DDh
  479 D1:D589 CD 70 1D 02 	call _SetHLUToA
  480 D1:D58D 3A BA E9 D1 	ld a, (ExprOutput)
  481 D1:D591 B7 -  -  -  	or a
  482 D1:D592 20 02 -  -  	jr nz, +_
  483 D1:D594 26 27 -  -  	ld h, 027h
  484 D1:D596 CD 4C AC D1 _:	call InsertHL															; ld hl/de, (ix+*)
  485 D1:D59A 3E 19 -  -  	ld a, 019h
  486 D1:D59C C3 0A AD D1 	jp InsertA																; add hl, de
  487 D1:D5A0 -  -  -  -  AddChainAnsChainPush:
  488 D1:D5A0 C3 70 AF D1 	jp UnknownError
  489 D1:D5A4 -  -  -  -  AddChainAnsChainAns:
  490 D1:D5A4 C3 70 AF D1 	jp UnknownError
  491 D1:D5A8 -  -  -  -  AddChainAnsFunction:
  492 D1:D5A8 3A BA E9 D1 	ld a, (ExprOutput)
  493 D1:D5AC 87 -  -  -  	add a, a
  494 D1:D5AD 87 -  -  -  	add a, a
  495 D1:D5AE 87 -  -  -  	add a, a
  496 D1:D5AF 87 -  -  -  	add a, a
  497 D1:D5B0 C6 D5 -  -  	add a, 0D5h
  498 D1:D5B2 CD 0A AD D1 	call InsertA															; push hl/de
  499 D1:D5B6 7B -  -  -  	ld a, e
  500 D1:D5B7 06 02 -  -  	ld b, OutputInHL
  501 D1:D5B9 CD 36 AD D1 	call GetFunction
  502 D1:D5BD 3E D1 -  -  	ld a, 0D1h
  503 D1:D5BF CD 0A AD D1 	call InsertA															; pop de
  504 D1:D5C3 3E 19 -  -  	ld a, 019h
  505 D1:D5C5 C3 0A AD D1 	jp InsertA																; add hl, de
  506 D1:D5C9 -  -  -  -  AddFunctionXXX:
  507 D1:D5C9 DD 7E FC -  	ld a, (ix-4)
  508 D1:D5CC B7 -  -  -  	or a
  509 D1:D5CD 28 10 -  -  	jr z, AddFunctionNumber
  510 D1:D5CF 3D -  -  -  	dec a
  511 D1:D5D0 28 18 -  -  	jr z, AddFunctionVariable
  512 D1:D5D2 3D -  -  -  	dec a
  513 D1:D5D3 28 20 -  -  	jr z, AddFunctionChainPush
  514 D1:D5D5 3D -  -  -  	dec a
  515 D1:D5D6 28 21 -  -  	jr z, AddFunctionChainAns
  516 D1:D5D8 3D -  -  -  	dec a
  517 D1:D5D9 28 3F -  -  	jr z, AddFunctionFunction
  518 D1:D5DB C3 CF AE D1 	jp AddError
  519 D1:D5DF -  -  -  -  AddFunctionNumber:
  520 D1:D5DF 79 -  -  -  	ld a, c
  521 D1:D5E0 06 02 -  -  	ld b, OutputInHL
  522 D1:D5E2 CD 36 AD D1 	call GetFunction
  523 D1:D5E6 C3 41 D5 D1 	jp AddChainAnsNumber
  524 D1:D5EA -  -  -  -  AddFunctionVariable:
  525 D1:D5EA 79 -  -  -  	ld a, c
  526 D1:D5EB 06 02 -  -  	ld b, OutputInHL
  527 D1:D5ED CD 36 AD D1 	call GetFunction
  528 D1:D5F1 C3 80 D5 D1 	jp AddChainAnsVariable
  529 D1:D5F5 -  -  -  -  AddFunctionChainPush:
  530 D1:D5F5 C3 70 AF D1 	jp UnknownError
  531 D1:D5F9 -  -  -  -  AddFunctionChainAns:
  532 D1:D5F9 3A BA E9 D1 	ld a, (ExprOutput)
  533 D1:D5FD 87 -  -  -  	add a, a
  534 D1:D5FE 87 -  -  -  	add a, a
  535 D1:D5FF 87 -  -  -  	add a, a
  536 D1:D600 87 -  -  -  	add a, a
  537 D1:D601 C6 D5 -  -  	add a, 0D5h
  538 D1:D603 CD 0A AD D1 	call InsertA															; push hl/de
  539 D1:D607 79 -  -  -  	ld a, c
  540 D1:D608 06 02 -  -  	ld b, OutputInHL
  541 D1:D60A CD 36 AD D1 	call GetFunction
  542 D1:D60E 3E D1 -  -  	ld a, 0D1h
  543 D1:D610 CD 0A AD D1 	call InsertA															; pop de
  544 D1:D614 3E 19 -  -  	ld a, 019h
  545 D1:D616 C3 0A AD D1 	jp InsertA																; add hl, de
  546 D1:D61A -  -  -  -  AddFunctionFunction:
  547 D1:D61A 7B -  -  -  	ld a, e
  548 D1:D61B 06 02 -  -  	ld b, OutputInHL
  549 D1:D61D CD 36 AD D1 	call GetFunction
  550 D1:D621 79 -  -  -  	ld a, c
  551 D1:D622 06 01 -  -  	ld b, OutputInDE
  552 D1:D624 FD CB C0 F6 	set need_push, (iy+fExpression1)
  553 D1:D628 CD 36 AD D1 	call GetFunction
  554 D1:D62C 3E 19 -  -  	ld a, 019h
  555 D1:D62E C3 0A AD D1 	jp InsertA																; add hl, de
  556 D1:D632 -  -  -  -  	
  557 D1:D632 -  -  -  -  DivNumberXXX:
  558 D1:D632 DD 7E FC -  	ld a, (ix-4)
  559 D1:D635 B7 -  -  -  	or a
  560 D1:D636 28 10 -  -  	jr z, DivNumberNumber
  561 D1:D638 3D -  -  -  	dec a
  562 D1:D639 28 1D -  -  	jr z, DivNumberVariable
  563 D1:D63B 3D -  -  -  	dec a
  564 D1:D63C 28 26 -  -  	jr z, DivNumberChainPush
  565 D1:D63E 3D -  -  -  	dec a
  566 D1:D63F 28 27 -  -  	jr z, DivNumberChainAns
  567 D1:D641 3D -  -  -  	dec a
  568 D1:D642 28 39 -  -  	jr z, DivNumberFunction
  569 D1:D644 C3 D3 AE D1 	jp DivError
  570 D1:D648 -  -  -  -  DivNumberNumber:
  571 D1:D648 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  572 D1:D64C C5 -  -  -  	push bc
  573 D1:D64D E1 -  -  -  	pop hl
  574 D1:D64E D5 -  -  -  	push de
  575 D1:D64F C1 -  -  -  	pop bc
  576 D1:D650 CD 44 01 00 	call __idvrmu
  577 D1:D654 DD 1F F9 -  	ld (ix-7), de
  578 D1:D657 C9 -  -  -  	ret
  579 D1:D658 -  -  -  -  DivNumberVariable:
  580 D1:D658 3E 21 -  -  	ld a, 021h
  581 D1:D65A C5 -  -  -  	push bc
  582 D1:D65B E1 -  -  -  	pop hl
  583 D1:D65C CD 48 AC D1 	call InsertAHL															; ld hl, *
  584 D1:D660 C3 90 D7 D1 	jp DivChainAnsVariable
  585 D1:D664 -  -  -  -  DivNumberChainPush:
  586 D1:D664 C3 70 AF D1 	jp UnknownError
  587 D1:D668 -  -  -  -  DivNumberChainAns:
  588 D1:D668 11 E5 C1 21 	ld de, 021C1E5h
  589 D1:D66C C5 -  -  -  	push bc
  590 D1:D66D E1 -  -  -  	pop hl
  591 D1:D66E 3A BA E9 D1 	ld a, (ExprOutput)
  592 D1:D672 B7 -  -  -  	or a
  593 D1:D673 20 02 -  -  	jr nz, +_
  594 D1:D675 1E D5 -  -  	ld e, 0D5h
  595 D1:D677 CD 8B AC D1 _:	call InsertDEHL															; push hl/de \ pop bc \ ld hl, *
  596 D1:D67B 18 74 -  -  	jr DivInsert
  597 D1:D67D -  -  -  -  DivNumberFunction:
  598 D1:D67D 7B -  -  -  	ld a, e
  599 D1:D67E C5 -  -  -  	push bc
  600 D1:D67F 06 00 -  -  		ld b, OutputInBC
  601 D1:D681 CD 36 AD D1 		call GetFunction
  602 D1:D685 3E 21 -  -  		ld a, 021h
  603 D1:D687 E1 -  -  -  	pop hl
  604 D1:D688 CD 48 AC D1 	call InsertAHL															; ld hl, *
  605 D1:D68C 18 63 -  -  	jr DivInsert
  606 D1:D68E -  -  -  -  DivVariableXXX:
  607 D1:D68E DD 7E FC -  	ld a, (ix-4)
  608 D1:D691 B7 -  -  -  	or a
  609 D1:D692 28 12 -  -  	jr z, DivVariableNumber
  610 D1:D694 3D -  -  -  	dec a
  611 D1:D695 28 17 -  -  	jr z, DivVariableVariable
  612 D1:D697 3D -  -  -  	dec a
  613 D1:D698 28 2E -  -  	jr z, DivVariableChainPush
  614 D1:D69A 3D -  -  -  	dec a
  615 D1:D69B 28 2F -  -  	jr z, DivVariableChainAns
  616 D1:D69D 3D -  -  -  	dec a
  617 D1:D69E CA E6 D6 D1 	jp z, DivVariableFunction
  618 D1:D6A2 C3 D3 AE D1 	jp DivError
  619 D1:D6A6 -  -  -  -  DivVariableNumber:
  620 D1:D6A6 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  621 D1:D6AA C3 62 D7 D1 	jp DivChainAnsNumber
  622 D1:D6AE -  -  -  -  DivVariableVariable:
  623 D1:D6AE 79 -  -  -  	ld a, c
  624 D1:D6AF BB -  -  -  	cp e
  625 D1:D6B0 20 0E -  -  	jr nz, +_
  626 D1:D6B2 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  627 D1:D6B6 36 00 -  -  	ld (hl), typeNumber
  628 D1:D6B8 11 01 00 00 	ld de, 1
  629 D1:D6BC 23 -  -  -  	inc hl
  630 D1:D6BD ED 1F -  -  	ld (hl), de
  631 D1:D6BF C9 -  -  -  	ret
  632 D1:D6C0 CD 61 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  633 D1:D6C4 C3 90 D7 D1 	jp DivChainAnsVariable
  634 D1:D6C8 -  -  -  -  DivVariableChainPush:
  635 D1:D6C8 C3 70 AF D1 	jp UnknownError
  636 D1:D6CC -  -  -  -  DivVariableChainAns:
  637 D1:D6CC 3A BA E9 D1 	ld a, (ExprOutput)
  638 D1:D6D0 87 -  -  -  	add a, a
  639 D1:D6D1 87 -  -  -  	add a, a
  640 D1:D6D2 87 -  -  -  	add a, a
  641 D1:D6D3 87 -  -  -  	add a, a
  642 D1:D6D4 C6 D5 -  -  	add a, 0D5h
  643 D1:D6D6 CD 0A AD D1 	call InsertA															; push hl/de
  644 D1:D6DA 3E C1 -  -  	ld a, 0C1h
  645 D1:D6DC CD 0A AD D1 	call InsertA															; pop bc
  646 D1:D6E0 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  647 D1:D6E4 18 0B -  -  	jr DivInsert
  648 D1:D6E6 -  -  -  -  DivVariableFunction:
  649 D1:D6E6 7B -  -  -  	ld a, e
  650 D1:D6E7 06 00 -  -  	ld b, OutputInBC
  651 D1:D6E9 CD 36 AD D1 	call GetFunction
  652 D1:D6ED CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  653 D1:D6F1 -  -  -  -  DivInsert:
  654 D1:D6F1 3E 00 -  -  	ld a, OutputIsInDE
  655 D1:D6F3 32 BB E9 D1 	ld (ExprOutput2), a
  656 D1:D6F7 3E CD -  -  	ld a, 0CDh
  657 D1:D6F9 21 44 01 00 	ld hl, __idvrmu
  658 D1:D6FD C3 48 AC D1 	jp InsertAHL															; call __idvrmu
  659 D1:D701 -  -  -  -  DivChainPushXXX:
  660 D1:D701 DD 7E FC -  	ld a, (ix-4)
  661 D1:D704 B7 -  -  -  	or a
  662 D1:D705 28 12 -  -  	jr z, DivChainPushNumber
  663 D1:D707 3D -  -  -  	dec a
  664 D1:D708 28 17 -  -  	jr z, DivChainPushVariable
  665 D1:D70A 3D -  -  -  	dec a
  666 D1:D70B 28 1C -  -  	jr z, DivChainPushChainPush
  667 D1:D70D 3D -  -  -  	dec a
  668 D1:D70E 28 1D -  -  	jr z, DivChainPushChainAns
  669 D1:D710 3D -  -  -  	dec a
  670 D1:D711 CA 42 D7 D1 	jp z, DivChainPushFunction
  671 D1:D715 C3 D3 AE D1 	jp DivError
  672 D1:D719 -  -  -  -  DivChainPushNumber:
  673 D1:D719 3E E1 -  -  	ld a, 0E1h
  674 D1:D71B CD 0A AD D1 	call InsertA															; pop hl
  675 D1:D71F 18 41 -  -  	jr DivChainAnsNumber
  676 D1:D721 -  -  -  -  DivChainPushVariable:
  677 D1:D721 3E E1 -  -  	ld a, 0E1h
  678 D1:D723 CD 0A AD D1 	call InsertA															; pop hl
  679 D1:D727 18 67 -  -  	jr DivChainAnsVariable
  680 D1:D729 -  -  -  -  DivChainPushChainPush:
  681 D1:D729 C3 70 AF D1 	jp UnknownError
  682 D1:D72D -  -  -  -  DivChainPushChainAns:
  683 D1:D72D 21 E5 C1 E1 	ld hl, 0E1C1E5h
  684 D1:D731 3A BA E9 D1 	ld a, (ExprOutput)
  685 D1:D735 87 -  -  -  	add a, a
  686 D1:D736 87 -  -  -  	add a, a
  687 D1:D737 87 -  -  -  	add a, a
  688 D1:D738 87 -  -  -  	add a, a
  689 D1:D739 C6 D5 -  -  	add a, 0D5h
  690 D1:D73B 6F -  -  -  	ld l, a
  691 D1:D73C CD 4C AC D1 	call InsertHL															; push hl/de \ pop bc \ pop hl
  692 D1:D740 18 AF -  -  _:	jr DivInsert
  693 D1:D742 -  -  -  -  DivChainPushFunction:
  694 D1:D742 3E E1 -  -  	ld a, 0E1h
  695 D1:D744 CD 0A AD D1 	call InsertA															; pop hl
  696 D1:D748 18 58 -  -  	jr DivChainAnsFunction
  697 D1:D74A -  -  -  -  DivChainAnsXXX:
  698 D1:D74A DD 7E FC -  	ld a, (ix-4)
  699 D1:D74D B7 -  -  -  	or a
  700 D1:D74E 28 12 -  -  	jr z, DivChainAnsNumber
  701 D1:D750 3D -  -  -  	dec a
  702 D1:D751 28 3D -  -  	jr z, DivChainAnsVariable
  703 D1:D753 3D -  -  -  	dec a
  704 D1:D754 28 44 -  -  	jr z, DivChainAnsChainPush
  705 D1:D756 3D -  -  -  	dec a
  706 D1:D757 28 45 -  -  	jr z, DivChainAnsChainAns
  707 D1:D759 3D -  -  -  	dec a
  708 D1:D75A CA A2 D7 D1 	jp z, DivChainAnsFunction
  709 D1:D75E C3 D3 AE D1 	jp DivError
  710 D1:D762 -  -  -  -  DivChainAnsNumber:
  711 D1:D762 CD B6 AC D1 	call MaybeChangeDEToHL
  712 D1:D766 3E 01 -  -  	ld a, 001h
  713 D1:D768 EB -  -  -  	ex de, hl
  714 D1:D769 11 00 01 00 	ld de, 256
  715 D1:D76D B7 -  -  -  	or a
  716 D1:D76E ED 52 -  -  	sbc hl, de
  717 D1:D770 30 17 -  -  	jr nc, +_
  718 D1:D772 19 -  -  -  	add hl, de
  719 D1:D773 4D -  -  -  	ld c, l
  720 D1:D774 3E 3E -  -  	ld a, 03Eh
  721 D1:D776 CD 0A AD D1 	call InsertA															; ld a, *
  722 D1:D77A 79 -  -  -  	ld a, c
  723 D1:D77B CD 0A AD D1 	call InsertA															; ld a, *
  724 D1:D77F 3E CD -  -  	ld a, 0CDh
  725 D1:D781 21 90 1D 02 	ld hl, _DivHLByA
  726 D1:D785 C3 48 AC D1 	jp InsertAHL															; call _DivHLByA
  727 D1:D789 19 -  -  -  _:	add hl, de
  728 D1:D78A CD 48 AC D1 	call InsertAHL															; ld bc, *
  729 D1:D78E 18 B0 -  -  _:	jr ---_
  730 D1:D790 -  -  -  -  DivChainAnsVariable:
  731 D1:D790 CD B6 AC D1 	call MaybeChangeDEToHL
  732 D1:D794 CD 79 AC D1 	call InsertIXC
  733 D1:D798 18 F4 -  -  	jr -_
  734 D1:D79A -  -  -  -  DivChainAnsChainPush:
  735 D1:D79A C3 70 AF D1 	jp UnknownError
  736 D1:D79E -  -  -  -  DivChainAnsChainAns:
  737 D1:D79E C3 70 AF D1 	jp UnknownError
  738 D1:D7A2 -  -  -  -  DivChainAnsFunction:
  739 D1:D7A2 3A BA E9 D1 	ld a, (ExprOutput)
  740 D1:D7A6 87 -  -  -  	add a, a
  741 D1:D7A7 87 -  -  -  	add a, a
  742 D1:D7A8 87 -  -  -  	add a, a
  743 D1:D7A9 87 -  -  -  	add a, a
  744 D1:D7AA C6 D5 -  -  	add a, 0D5h
  745 D1:D7AC CD 0A AD D1 	call InsertA															; push hl/de
  746 D1:D7B0 7B -  -  -  	ld a, e
  747 D1:D7B1 06 00 -  -  	ld b, OutputInBC
  748 D1:D7B3 CD 36 AD D1 	call GetFunction
  749 D1:D7B7 3E E1 -  -  	ld a, 0E1h
  750 D1:D7B9 CD 0A AD D1 	call InsertA															; pop hl
  751 D1:D7BD 18 CF -  -  _:	jr --_
  752 D1:D7BF -  -  -  -  DivFunctionXXX:
  753 D1:D7BF DD 7E FC -  	ld a, (ix-4)
  754 D1:D7C2 B7 -  -  -  	or a
  755 D1:D7C3 28 10 -  -  	jr z, DivFunctionNumber
  756 D1:D7C5 3D -  -  -  	dec a
  757 D1:D7C6 28 18 -  -  	jr z, DivFunctionVariable
  758 D1:D7C8 3D -  -  -  	dec a
  759 D1:D7C9 28 20 -  -  	jr z, DivFunctionChainPush
  760 D1:D7CB 3D -  -  -  	dec a
  761 D1:D7CC 28 21 -  -  	jr z, DivFunctionChainAns
  762 D1:D7CE 3D -  -  -  	dec a
  763 D1:D7CF 28 3B -  -  	jr z, DivFunctionFunction
  764 D1:D7D1 C3 D3 AE D1 	jp DivError
  765 D1:D7D5 -  -  -  -  DivFunctionNumber:
  766 D1:D7D5 79 -  -  -  	ld a, c
  767 D1:D7D6 06 02 -  -  	ld b, OutputInHL
  768 D1:D7D8 CD 36 AD D1 	call GetFunction
  769 D1:D7DC C3 62 D7 D1 	jp DivChainAnsNumber
  770 D1:D7E0 -  -  -  -  DivFunctionVariable:
  771 D1:D7E0 79 -  -  -  	ld a, c
  772 D1:D7E1 06 02 -  -  	ld b, OutputInHL
  773 D1:D7E3 CD 36 AD D1 	call GetFunction
  774 D1:D7E7 C3 90 D7 D1 	jp DivChainAnsVariable
  775 D1:D7EB -  -  -  -  DivFunctionChainPush:
  776 D1:D7EB C3 70 AF D1 	jp UnknownError
  777 D1:D7EF -  -  -  -  DivFunctionChainAns:
  778 D1:D7EF 3A BA E9 D1 	ld a, (ExprOutput)
  779 D1:D7F3 87 -  -  -  	add a, a
  780 D1:D7F4 87 -  -  -  	add a, a
  781 D1:D7F5 87 -  -  -  	add a, a
  782 D1:D7F6 87 -  -  -  	add a, a
  783 D1:D7F7 C6 D5 -  -  	add a, 0D5h
  784 D1:D7F9 CD 0A AD D1 	call InsertA															; push hl/de
  785 D1:D7FD 3E C1 -  -  	ld a, 0C1h
  786 D1:D7FF CD 0A AD D1 	call InsertA															; pop bc
  787 D1:D803 79 -  -  -  	ld a, c
  788 D1:D804 06 02 -  -  	ld b, OutputInHL
  789 D1:D806 CD 36 AD D1 	call GetFunction
  790 D1:D80A 18 B1 -  -  	jr -_
  791 D1:D80C -  -  -  -  DivFunctionFunction:
  792 D1:D80C 7B -  -  -  	ld a, e
  793 D1:D80D 06 00 -  -  	ld b, OutputInBC
  794 D1:D80F CD 36 AD D1 	call GetFunction
  795 D1:D813 79 -  -  -  	ld a, c
  796 D1:D814 06 02 -  -  	ld b, OutputInHL
  797 D1:D816 CD 36 AD D1 	call GetFunction
  798 D1:D81A 18 A1 -  -  	jr -_
  799 D1:D81C -  -  -  -  	
  800 D1:D81C -  -  -  -  MulNumberXXX:
  801 D1:D81C DD 7E FC -  	ld a, (ix-4)
  802 D1:D81F B7 -  -  -  	or a
  803 D1:D820 28 10 -  -  	jr z, MulNumberNumber
  804 D1:D822 3D -  -  -  	dec a
  805 D1:D823 28 1A -  -  	jr z, MulNumberVariable
  806 D1:D825 3D -  -  -  	dec a
  807 D1:D826 28 1E -  -  	jr z, MulNumberChainPush
  808 D1:D828 3D -  -  -  	dec a
  809 D1:D829 28 1F -  -  	jr z, MulNumberChainAns
  810 D1:D82B 3D -  -  -  	dec a
  811 D1:D82C 28 22 -  -  	jr z, MulNumberFunction
  812 D1:D82E C3 D7 AE D1 	jp MulError
  813 D1:D832 -  -  -  -  MulNumberNumber:
  814 D1:D832 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  815 D1:D836 EB -  -  -  	ex de, hl
  816 D1:D837 CD 54 01 00 	call __imulu
  817 D1:D83B DD 2F F9 -  	ld (ix-7), hl
  818 D1:D83E C9 -  -  -  	ret
  819 D1:D83F -  -  -  -  MulNumberVariable:
  820 D1:D83F C5 -  -  -  	push bc
  821 D1:D840 E1 -  -  -  	pop hl
  822 D1:D841 EB -  -  -  	ex de, hl
  823 D1:D842 E5 -  -  -  	push hl
  824 D1:D843 C1 -  -  -  	pop bc
  825 D1:D844 18 2B -  -  	jr MulVariableNumber
  826 D1:D846 -  -  -  -  MulNumberChainPush:
  827 D1:D846 C3 70 AF D1 	jp UnknownError
  828 D1:D84A -  -  -  -  MulNumberChainAns:
  829 D1:D84A C5 -  -  -  	push bc
  830 D1:D84B D1 -  -  -  	pop de
  831 D1:D84C C3 0C D9 D1 	jp MulChainAnsNumber
  832 D1:D850 -  -  -  -  MulNumberFunction:
  833 D1:D850 C5 -  -  -  	push bc
  834 D1:D851 E1 -  -  -  	pop hl
  835 D1:D852 EB -  -  -  	ex de, hl
  836 D1:D853 E5 -  -  -  	push hl
  837 D1:D854 C1 -  -  -  	pop bc
  838 D1:D855 C3 CB D9 D1 	jp MulFunctionNumber
  839 D1:D859 -  -  -  -  MulVariableXXX:
  840 D1:D859 DD 7E FC -  	ld a, (ix-4)
  841 D1:D85C B7 -  -  -  	or a
  842 D1:D85D 28 12 -  -  	jr z, MulVariableNumber
  843 D1:D85F 3D -  -  -  	dec a
  844 D1:D860 28 17 -  -  	jr z, MulVariableVariable
  845 D1:D862 3D -  -  -  	dec a
  846 D1:D863 28 1C -  -  	jr z, MulVariableChainPush
  847 D1:D865 3D -  -  -  	dec a
  848 D1:D866 28 24 -  -  	jr z, MulVariableChainAns
  849 D1:D868 3D -  -  -  	dec a
  850 D1:D869 CA 91 D8 D1 	jp z, MulVariableFunction
  851 D1:D86D C3 D7 AE D1 	jp MulError
  852 D1:D871 -  -  -  -  MulVariableNumber:
  853 D1:D871 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  854 D1:D875 C3 0C D9 D1 	jp MulChainAnsNumber
  855 D1:D879 -  -  -  -  MulVariableVariable:
  856 D1:D879 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
  857 D1:D87D C3 76 D9 D1 	jp MulChainAnsVariable
  858 D1:D881 -  -  -  -  MulVariableChainPush:
  859 D1:D881 3E E1 -  -  	ld a, 0E1h
  860 D1:D883 CD 0A AD D1 	call InsertA															; pop hl
  861 D1:D887 59 -  -  -  	ld e, c
  862 D1:D888 C3 76 D9 D1 	jp MulChainAnsVariable
  863 D1:D88C -  -  -  -  MulVariableChainAns:
  864 D1:D88C 59 -  -  -  	ld e, c
  865 D1:D88D C3 76 D9 D1 	jp MulChainAnsVariable
  866 D1:D891 -  -  -  -  MulVariableFunction:
  867 D1:D891 7B -  -  -  	ld a, e
  868 D1:D892 06 02 -  -  	ld b, OutputInHL
  869 D1:D894 CD 36 AD D1 	call GetFunction
  870 D1:D898 CD 79 AC D1 	call InsertIXC
  871 D1:D89C 21 54 01 00 	ld hl, __imulu
  872 D1:D8A0 C3 5D AC D1 	jp InsertCallHL															; call __imulu
  873 D1:D8A4 -  -  -  -  MulChainPushXXX:
  874 D1:D8A4 DD 7E FC -  	ld a, (ix-4)
  875 D1:D8A7 B7 -  -  -  	or a
  876 D1:D8A8 28 12 -  -  	jr z, MulChainPushNumber
  877 D1:D8AA 3D -  -  -  	dec a
  878 D1:D8AB 28 17 -  -  	jr z, MulChainPushVariable
  879 D1:D8AD 3D -  -  -  	dec a
  880 D1:D8AE 28 1E -  -  	jr z, MulChainPushChainPush
  881 D1:D8B0 3D -  -  -  	dec a
  882 D1:D8B1 28 1F -  -  	jr z, MulChainPushChainAns
  883 D1:D8B3 3D -  -  -  	dec a
  884 D1:D8B4 CA E6 D8 D1 	jp z, MulChainPushFunction
  885 D1:D8B8 C3 D7 AE D1 	jp MulError
  886 D1:D8BC -  -  -  -  MulChainPushNumber:
  887 D1:D8BC 3E E1 -  -  	ld a, 0E1h
  888 D1:D8BE CD 0A AD D1 	call InsertA															; pop hl
  889 D1:D8C2 18 48 -  -  	jr MulChainAnsNumber
  890 D1:D8C4 -  -  -  -  MulChainPushVariable:
  891 D1:D8C4 3E E1 -  -  	ld a, 0E1h
  892 D1:D8C6 CD 0A AD D1 	call InsertA															; pop hl
  893 D1:D8CA C3 76 D9 D1 	jp MulChainAnsVariable
  894 D1:D8CE -  -  -  -  MulChainPushChainPush:
  895 D1:D8CE C3 70 AF D1 	jp UnknownError
  896 D1:D8D2 -  -  -  -  MulChainPushChainAns:
  897 D1:D8D2 CD B6 AC D1 	call MaybeChangeDEToHL
  898 D1:D8D6 3E C1 -  -  	ld a, 0C1h
  899 D1:D8D8 CD 0A AD D1 	call InsertA															; pop bc
  900 D1:D8DC 3E CD -  -  	ld a, 0CDh
  901 D1:D8DE 21 54 01 00 	ld hl, __imulu
  902 D1:D8E2 C3 48 AC D1 	jp InsertAHL															; call __imulu
  903 D1:D8E6 -  -  -  -  MulChainPushFunction:
  904 D1:D8E6 3E E1 -  -  	ld a, 0E1h
  905 D1:D8E8 CD 0A AD D1 	call InsertA															; pop hl
  906 D1:D8EC C3 90 D9 D1 	jp MulChainAnsFunction
  907 D1:D8F0 -  -  -  -  MulChainAnsXXX:
  908 D1:D8F0 DD 7E FC -  	ld a, (ix-4)
  909 D1:D8F3 B7 -  -  -  	or a
  910 D1:D8F4 28 16 -  -  	jr z, MulChainAnsNumber
  911 D1:D8F6 3D -  -  -  	dec a
  912 D1:D8F7 28 7D -  -  	jr z, MulChainAnsVariable
  913 D1:D8F9 3D -  -  -  	dec a
  914 D1:D8FA CA 88 D9 D1 	jp z, MulChainAnsChainPush
  915 D1:D8FE 3D -  -  -  	dec a
  916 D1:D8FF CA 8C D9 D1 	jp z, MulChainAnsChainAns
  917 D1:D903 3D -  -  -  	dec a
  918 D1:D904 CA 90 D9 D1 	jp z, MulChainAnsFunction
  919 D1:D908 C3 D7 AE D1 	jp MulError
  920 D1:D90C -  -  -  -  MulChainAnsNumber:
  921 D1:D90C CD 4C 1D 02 	call _ChkDEIs0
  922 D1:D910 20 08 -  -  	jr nz, +_
  923 D1:D912 21 B7 ED 62 	ld hl, 062EDB7h
  924 D1:D916 C3 4C AC D1 	jp InsertHL																; or a \ sbc hl, hl
  925 D1:D91A CD B6 AC D1 _:	call MaybeChangeDEToHL
  926 D1:D91E 1B -  -  -  	dec de
  927 D1:D91F CD 4C 1D 02 	call _ChkDEIs0
  928 D1:D923 C8 -  -  -  	ret z
  929 D1:D924 13 -  -  -  	inc de
  930 D1:D925 EB -  -  -  	ex de, hl
  931 D1:D926 11 15 00 00 	ld de, 21
  932 D1:D92A B7 -  -  -  	or a
  933 D1:D92B ED 52 -  -  	sbc hl, de
  934 D1:D92D 30 16 -  -  	jr nc, ++_
  935 D1:D92F 19 -  -  -  	add hl, de
  936 D1:D930 2D -  -  -  	dec l
  937 D1:D931 2D -  -  -  	dec l
  938 D1:D932 26 0A -  -  	ld h, 10
  939 D1:D934 ED 6C -  -  	mlt hl
  940 D1:D936 11 97 EC D1 	ld de, MulTable
  941 D1:D93A 19 -  -  -  	add hl, de
  942 D1:D93B 46 -  -  -  	ld b, (hl)
  943 D1:D93C 23 -  -  -  _:	inc hl
  944 D1:D93D 7E -  -  -  	ld a, (hl)
  945 D1:D93E CD 0A AD D1 	call InsertA
  946 D1:D942 10 F8 -  -  	djnz -_
  947 D1:D944 C9 -  -  -  	ret
  948 D1:D945 19 -  -  -  _:	add hl, de
  949 D1:D946 11 00 01 00 	ld de, 256
  950 D1:D94A B7 -  -  -  	or a
  951 D1:D94B ED 52 -  -  	sbc hl, de
  952 D1:D94D 38 10 -  -  	jr c, +_
  953 D1:D94F 3E 01 -  -  	ld a, 001h
  954 D1:D951 CD 48 AC D1 	call InsertAHL															; ld bc, *
  955 D1:D955 3E CD -  -  	ld a, 0CDh
  956 D1:D957 21 54 01 00 	ld hl, __imulu
  957 D1:D95B C3 48 AC D1 	jp InsertAHL															; call __imulu
  958 D1:D95F 19 -  -  -  _:	add hl, de
  959 D1:D960 4D -  -  -  	ld c, l
  960 D1:D961 3E 3E -  -  	ld a, 03Eh
  961 D1:D963 CD 0A AD D1 	call InsertA															; ld a, *
  962 D1:D967 79 -  -  -  	ld a, c
  963 D1:D968 CD 0A AD D1 	call InsertA															; ld a, *
  964 D1:D96C 3E CD -  -  	ld a, 0CDh
  965 D1:D96E 21 50 01 00 	ld hl, __imul_b
  966 D1:D972 C3 48 AC D1 	jp InsertAHL															; call __imul_b
  967 D1:D976 -  -  -  -  MulChainAnsVariable:
  968 D1:D976 CD B6 AC D1 	call MaybeChangeDEToHL
  969 D1:D97A CD 79 AC D1 	call InsertIXC															; ld bc, (ix+*)
  970 D1:D97E 3E CD -  -  	ld a, 0CDh
  971 D1:D980 21 54 01 00 	ld hl, __imulu
  972 D1:D984 C3 48 AC D1 	jp InsertAHL															; call __imulu
  973 D1:D988 -  -  -  -  MulChainAnsChainPush:
  974 D1:D988 C3 70 AF D1 	jp UnknownError
  975 D1:D98C -  -  -  -  MulChainAnsChainAns:
  976 D1:D98C C3 70 AF D1 	jp UnknownError
  977 D1:D990 -  -  -  -  MulChainAnsFunction:
  978 D1:D990 3A BA E9 D1 	ld a, (ExprOutput)
  979 D1:D994 87 -  -  -  	add a, a
  980 D1:D995 87 -  -  -  	add a, a
  981 D1:D996 87 -  -  -  	add a, a
  982 D1:D997 87 -  -  -  	add a, a
  983 D1:D998 C6 D5 -  -  	add a, 0D5h
  984 D1:D99A CD 0A AD D1 	call InsertA															; push hl/de
  985 D1:D99E 7B -  -  -  	ld a, e
  986 D1:D99F 06 00 -  -  	ld b, OutputInBC
  987 D1:D9A1 CD 36 AD D1 	call GetFunction
  988 D1:D9A5 3E E1 -  -  	ld a, 0E1h
  989 D1:D9A7 CD 0A AD D1 	call InsertA															; pop hl
  990 D1:D9AB 3E CD -  -  	ld a, 0CDh
  991 D1:D9AD 21 54 01 00 	ld hl, __imulu
  992 D1:D9B1 C3 48 AC D1 	jp InsertAHL															; call __imulu
  993 D1:D9B5 -  -  -  -  MulFunctionXXX:
  994 D1:D9B5 DD 7E FC -  	ld a, (ix-4)
  995 D1:D9B8 B7 -  -  -  	or a
  996 D1:D9B9 28 10 -  -  	jr z, MulFunctionNumber
  997 D1:D9BB 3D -  -  -  	dec a
  998 D1:D9BC 28 18 -  -  	jr z, MulFunctionVariable
  999 D1:D9BE 3D -  -  -  	dec a
 1000 D1:D9BF 28 20 -  -  	jr z, MulFunctionChainPush
 1001 D1:D9C1 3D -  -  -  	dec a
 1002 D1:D9C2 28 21 -  -  	jr z, MulFunctionChainAns
 1003 D1:D9C4 3D -  -  -  	dec a
 1004 D1:D9C5 28 21 -  -  	jr z, MulFunctionFunction
 1005 D1:D9C7 C3 D7 AE D1 	jp MulError
 1006 D1:D9CB -  -  -  -  MulFunctionNumber:
 1007 D1:D9CB 79 -  -  -  	ld a, c
 1008 D1:D9CC 06 02 -  -  	ld b, OutputInHL
 1009 D1:D9CE CD 36 AD D1 	call GetFunction
 1010 D1:D9D2 C3 0C D9 D1 	jp MulChainAnsNumber
 1011 D1:D9D6 -  -  -  -  MulFunctionVariable:
 1012 D1:D9D6 79 -  -  -  	ld a, c
 1013 D1:D9D7 06 02 -  -  	ld b, OutputInHL
 1014 D1:D9D9 CD 36 AD D1 	call GetFunction
 1015 D1:D9DD C3 76 D9 D1 	jp MulChainAnsVariable
 1016 D1:D9E1 -  -  -  -  MulFunctionChainPush:
 1017 D1:D9E1 C3 70 AF D1 	jp UnknownError
 1018 D1:D9E5 -  -  -  -  MulFunctionChainAns:
 1019 D1:D9E5 59 -  -  -  	ld e, c
 1020 D1:D9E6 18 A8 -  -  	jr MulChainAnsFunction
 1021 D1:D9E8 -  -  -  -  MulFunctionFunction:
 1022 D1:D9E8 7B -  -  -  	ld a, e
 1023 D1:D9E9 06 00 -  -  	ld b, OutputInBC
 1024 D1:D9EB CD 36 AD D1 	call GetFunction
 1025 D1:D9EF 79 -  -  -  	ld a, c
 1026 D1:D9F0 06 02 -  -  	ld b, OutputInHL
 1027 D1:D9F2 CD 36 AD D1 	call GetFunction
 1028 D1:D9F6 3E CD -  -  	ld a, 0CDh
 1029 D1:D9F8 21 54 01 00 	ld hl, __imulu
 1030 D1:D9FC C3 48 AC D1 	jp InsertAHL															; call __imulu
 1031 D1:DA00 -  -  -  -  
 1032 D1:DA00 -  -  -  -  SwapLEToGE:
 1033 D1:DA00 3E 6E -  -  	ld a, tGE
 1034 D1:DA02 18 02 -  -  	jr $+4	
 1035 D1:DA04 -  -  -  -  SwapLTToGT:
 1036 D1:DA04 3E 6C -  -  	ld a, tGT
 1037 D1:DA06 C5 -  -  -  	push bc
 1038 D1:DA07 E1 -  -  -  	pop hl
 1039 D1:DA08 DD 4E FC -  	ld c, (ix-4)
 1040 D1:DA0B DD 46 F8 -  	ld b, (ix-8)
 1041 D1:DA0E DD 70 FC -  	ld (ix-4), b
 1042 D1:DA11 DD 71 F8 -  	ld (ix-8), c
 1043 D1:DA14 EB -  -  -  	ex de, hl
 1044 D1:DA15 E5 -  -  -  	push hl
 1045 D1:DA16 C1 -  -  -  	pop bc
 1046 D1:DA17 C9 -  -  -  	ret
 1047 D1:DA18 -  -  -  -  
 1048 D1:DA18 -  -  -  -  GLETNumberXXX:
 1049 D1:DA18 DD 7E FC -  	ld a, (ix-4)
 1050 D1:DA1B B7 -  -  -  	or a
 1051 D1:DA1C 28 10 -  -  	jr z, GLETNumberNumber
 1052 D1:DA1E 3D -  -  -  	dec a
 1053 D1:DA1F 28 25 -  -  	jr z, GLETNumberVariable
 1054 D1:DA21 3D -  -  -  	dec a
 1055 D1:DA22 28 2E -  -  	jr z, GLETNumberChainPush
 1056 D1:DA24 3D -  -  -  	dec a
 1057 D1:DA25 28 2F -  -  	jr z, GLETNumberChainAns
 1058 D1:DA27 3D -  -  -  	dec a
 1059 D1:DA28 28 3A -  -  	jr z, GLETNumberFunction
 1060 D1:DA2A C3 DB AE D1 	jp GLETError
 1061 D1:DA2E -  -  -  -  GLETNumberNumber:
 1062 D1:DA2E FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1063 D1:DA32 C5 -  -  -  	push bc
 1064 D1:DA33 E1 -  -  -  	pop hl
 1065 D1:DA34 3A 1F EA D0 	ld a, (tempToken)
 1066 D1:DA38 FE 6E -  -  	cp tGE
 1067 D1:DA3A 28 01 -  -  	jr z, +_
 1068 D1:DA3C 37 -  -  -  	scf
 1069 D1:DA3D ED 52 -  -  _:	sbc hl, de
 1070 D1:DA3F ED 62 -  -  	sbc hl, hl
 1071 D1:DA41 23 -  -  -  	inc hl
 1072 D1:DA42 DD 2F F9 -  	ld (ix-7), hl
 1073 D1:DA45 C9 -  -  -  	ret
 1074 D1:DA46 -  -  -  -  GLETNumberVariable:
 1075 D1:DA46 3E 21 -  -  	ld a, 021h
 1076 D1:DA48 C5 -  -  -  	push bc
 1077 D1:DA49 E1 -  -  -  	pop hl
 1078 D1:DA4A CD 48 AC D1 	call InsertAHL															; ld hl, *
 1079 D1:DA4E C3 62 DB D1 	jp GLETChainAnsVariable
 1080 D1:DA52 -  -  -  -  GLETNumberChainPush:
 1081 D1:DA52 C3 70 AF D1 	jp UnknownError
 1082 D1:DA56 -  -  -  -  GLETNumberChainAns:
 1083 D1:DA56 CD AC AC D1 	call MaybeChangeHLToDE
 1084 D1:DA5A 3E 21 -  -  	ld a, 021h
 1085 D1:DA5C C5 -  -  -  	push bc
 1086 D1:DA5D E1 -  -  -  	pop hl
 1087 D1:DA5E CD 48 AC D1 	call InsertAHL															; ld hl, *
 1088 D1:DA62 18 6F -  -  	jr GLETInsert
 1089 D1:DA64 -  -  -  -  GLETNumberFunction:
 1090 D1:DA64 7B -  -  -  	ld a, e
 1091 D1:DA65 C5 -  -  -  	push bc
 1092 D1:DA66 06 01 -  -  		ld b, OutputInDE
 1093 D1:DA68 CD 36 AD D1 		call GetFunction
 1094 D1:DA6C 3E 21 -  -  		ld a, 021h
 1095 D1:DA6E E1 -  -  -  	pop hl
 1096 D1:DA6F CD 48 AC D1 	call InsertAHL															; ld hl, *
 1097 D1:DA73 18 5E -  -  	jr GLETInsert
 1098 D1:DA75 -  -  -  -  GLETVariableXXX:
 1099 D1:DA75 DD 7E FC -  	ld a, (ix-4)
 1100 D1:DA78 B7 -  -  -  	or a
 1101 D1:DA79 28 12 -  -  	jr z, GLETVariableNumber
 1102 D1:DA7B 3D -  -  -  	dec a
 1103 D1:DA7C 28 17 -  -  	jr z, GLETVariableVariable
 1104 D1:DA7E 3D -  -  -  	dec a
 1105 D1:DA7F 28 39 -  -  	jr z, GLETVariableChainPush
 1106 D1:DA81 3D -  -  -  	dec a
 1107 D1:DA82 28 3A -  -  	jr z, GLETVariableChainAns
 1108 D1:DA84 3D -  -  -  	dec a
 1109 D1:DA85 CA C8 DA D1 	jp z, GLETVariableFunction
 1110 D1:DA89 C3 DB AE D1 	jp GLETError
 1111 D1:DA8D -  -  -  -  GLETVariableNumber:
 1112 D1:DA8D CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1113 D1:DA91 C3 48 DB D1 	jp GLETChainAnsNumber
 1114 D1:DA95 -  -  -  -  GLETVariableVariable:
 1115 D1:DA95 79 -  -  -  	ld a, c
 1116 D1:DA96 BB -  -  -  	cp e
 1117 D1:DA97 20 19 -  -  	jr nz, ++_
 1118 D1:DA99 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1119 D1:DA9D 3A 1F EA D0 	ld a, (tempToken)
 1120 D1:DAA1 D6 6C -  -  	sub tGT
 1121 D1:DAA3 28 02 -  -  	jr z, +_
 1122 D1:DAA5 3E 01 -  -  	ld a, 1
 1123 D1:DAA7 11 00 00 00 _:	ld de, 0
 1124 D1:DAAB 5F -  -  -  	ld e, a
 1125 D1:DAAC 36 00 -  -  	ld (hl), typeNumber
 1126 D1:DAAE 23 -  -  -  	inc hl
 1127 D1:DAAF ED 1F -  -  	ld (hl), de
 1128 D1:DAB1 C9 -  -  -  	ret
 1129 D1:DAB2 CD 61 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1130 D1:DAB6 C3 62 DB D1 	jp GLETChainAnsVariable
 1131 D1:DABA -  -  -  -  GLETVariableChainPush:
 1132 D1:DABA C3 70 AF D1 	jp UnknownError
 1133 D1:DABE -  -  -  -  GLETVariableChainAns:
 1134 D1:DABE CD AC AC D1 	call MaybeChangeHLToDE
 1135 D1:DAC2 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1136 D1:DAC6 18 0B -  -  	jr GLETInsert
 1137 D1:DAC8 -  -  -  -  GLETVariableFunction:
 1138 D1:DAC8 7B -  -  -  	ld a, e
 1139 D1:DAC9 06 01 -  -  	ld b, OutputInDE
 1140 D1:DACB CD 36 AD D1 	call GetFunction
 1141 D1:DACF CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1142 D1:DAD3 -  -  -  -  GLETInsert:
 1143 D1:DAD3 11 37 ED 52 	ld de, 052ED37h
 1144 D1:DAD7 21 ED 62 23 	ld hl, 02362EDh
 1145 D1:DADB 3A 1F EA D0 	ld a, (tempToken)
 1146 D1:DADF FE 6C -  -  	cp tGT
 1147 D1:DAE1 28 02 -  -  	jr z, +_
 1148 D1:DAE3 1E B7 -  -  	ld e, 0B7h
 1149 D1:DAE5 C3 8B AC D1 _:	jp InsertDEHL															; scf/or a \ sbc hl, de \ sbc hl, hl \ inc hl
 1150 D1:DAE9 -  -  -  -  GLETChainPushXXX:
 1151 D1:DAE9 DD 7E FC -  	ld a, (ix-4)
 1152 D1:DAEC B7 -  -  -  	or a
 1153 D1:DAED 28 12 -  -  	jr z, GLETChainPushNumber
 1154 D1:DAEF 3D -  -  -  	dec a
 1155 D1:DAF0 28 17 -  -  	jr z, GLETChainPushVariable
 1156 D1:DAF2 3D -  -  -  	dec a
 1157 D1:DAF3 28 1C -  -  	jr z, GLETChainPushChainPush
 1158 D1:DAF5 3D -  -  -  	dec a
 1159 D1:DAF6 28 1D -  -  	jr z, GLETChainPushChainAns
 1160 D1:DAF8 3D -  -  -  	dec a
 1161 D1:DAF9 CA 21 DB D1 	jp z, GLETChainPushFunction
 1162 D1:DAFD C3 DB AE D1 	jp GLETError
 1163 D1:DB01 -  -  -  -  GLETChainPushNumber:
 1164 D1:DB01 3E E1 -  -  	ld a, 0E1h
 1165 D1:DB03 CD 0A AD D1 	call InsertA															; pop hl
 1166 D1:DB07 18 3F -  -  	jr GLETChainAnsNumber
 1167 D1:DB09 -  -  -  -  GLETChainPushVariable:
 1168 D1:DB09 3E E1 -  -  	ld a, 0E1h
 1169 D1:DB0B CD 0A AD D1 	call InsertA															; pop hl
 1170 D1:DB0F 18 51 -  -  	jr GLETChainAnsVariable
 1171 D1:DB11 -  -  -  -  GLETChainPushChainPush:
 1172 D1:DB11 C3 70 AF D1 	jp UnknownError
 1173 D1:DB15 -  -  -  -  GLETChainPushChainAns:
 1174 D1:DB15 CD AC AC D1 	call MaybeChangeHLToDE
 1175 D1:DB19 3E E1 -  -  	ld a, 0E1h
 1176 D1:DB1B CD 0A AD D1 	call InsertA															; pop hl
 1177 D1:DB1F 18 B2 -  -  	jr GLETInsert
 1178 D1:DB21 -  -  -  -  GLETChainPushFunction:
 1179 D1:DB21 7B -  -  -  	ld a, e
 1180 D1:DB22 06 01 -  -  	ld b, OutputInDE
 1181 D1:DB24 CD 36 AD D1 	call GetFunction
 1182 D1:DB28 3E E1 -  -  	ld a, 0E1h
 1183 D1:DB2A CD 0A AD D1 	call InsertA															; pop hl
 1184 D1:DB2E 18 A3 -  -  _:	jr GLETInsert
 1185 D1:DB30 -  -  -  -  GLETChainAnsXXX:
 1186 D1:DB30 DD 7E FC -  	ld a, (ix-4)
 1187 D1:DB33 B7 -  -  -  	or a
 1188 D1:DB34 28 12 -  -  	jr z, GLETChainAnsNumber
 1189 D1:DB36 3D -  -  -  	dec a
 1190 D1:DB37 28 29 -  -  	jr z, GLETChainAnsVariable
 1191 D1:DB39 3D -  -  -  	dec a
 1192 D1:DB3A 28 30 -  -  	jr z, GLETChainAnsChainPush
 1193 D1:DB3C 3D -  -  -  	dec a
 1194 D1:DB3D 28 31 -  -  	jr z, GLETChainAnsChainAns
 1195 D1:DB3F 3D -  -  -  	dec a
 1196 D1:DB40 CA 74 DB D1 	jp z, GLETChainAnsFunction
 1197 D1:DB44 C3 DB AE D1 	jp GLETError
 1198 D1:DB48 -  -  -  -  GLETChainAnsNumber:
 1199 D1:DB48 CD B6 AC D1 	call MaybeChangeDEToHL
 1200 D1:DB4C 21 1F EA D0 	ld hl, tempToken
 1201 D1:DB50 7E -  -  -  	ld a, (hl)
 1202 D1:DB51 FE 6C -  -  	cp tGT
 1203 D1:DB53 20 04 -  -  	jr nz, +_
 1204 D1:DB55 13 -  -  -  	inc de
 1205 D1:DB56 3E 6E -  -  	ld a, tGE
 1206 D1:DB58 77 -  -  -  	ld (hl), a
 1207 D1:DB59 3E 11 -  -  _:	ld a, 011h
 1208 D1:DB5B EB -  -  -  	ex de, hl
 1209 D1:DB5C CD 48 AC D1 	call InsertAHL															; ld de, *
 1210 D1:DB60 18 CC -  -  	jr --_
 1211 D1:DB62 -  -  -  -  GLETChainAnsVariable:
 1212 D1:DB62 CD B6 AC D1 	call MaybeChangeDEToHL
 1213 D1:DB66 CD 6A AC D1 	call InsertIXE															; ld de, (ix+*)
 1214 D1:DB6A 18 C2 -  -  	jr --_
 1215 D1:DB6C -  -  -  -  GLETChainAnsChainPush:
 1216 D1:DB6C C3 70 AF D1 	jp UnknownError
 1217 D1:DB70 -  -  -  -  GLETChainAnsChainAns:
 1218 D1:DB70 C3 70 AF D1 	jp UnknownError
 1219 D1:DB74 -  -  -  -  GLETChainAnsFunction:
 1220 D1:DB74 3A BA E9 D1 	ld a, (ExprOutput)
 1221 D1:DB78 87 -  -  -  	add a, a
 1222 D1:DB79 87 -  -  -  	add a, a
 1223 D1:DB7A 87 -  -  -  	add a, a
 1224 D1:DB7B 87 -  -  -  	add a, a
 1225 D1:DB7C C6 D5 -  -  	add a, 0D5h
 1226 D1:DB7E CD 0A AD D1 	call InsertA															; push hl/de
 1227 D1:DB82 7B -  -  -  	ld a, e
 1228 D1:DB83 06 01 -  -  	ld b, OutputInDE
 1229 D1:DB85 CD 36 AD D1 	call GetFunction
 1230 D1:DB89 3E E1 -  -  	ld a, 0E1h
 1231 D1:DB8B CD 0A AD D1 	call InsertA															; pop hl
 1232 D1:DB8F 18 C8 -  -  _:	jr --_
 1233 D1:DB91 -  -  -  -  GLETFunctionXXX:
 1234 D1:DB91 DD 7E FC -  	ld a, (ix-4)
 1235 D1:DB94 B7 -  -  -  	or a
 1236 D1:DB95 28 10 -  -  	jr z, GLETFunctionNumber
 1237 D1:DB97 3D -  -  -  	dec a
 1238 D1:DB98 28 18 -  -  	jr z, GLETFunctionVariable
 1239 D1:DB9A 3D -  -  -  	dec a
 1240 D1:DB9B 28 20 -  -  	jr z, GLETFunctionChainPush
 1241 D1:DB9D 3D -  -  -  	dec a
 1242 D1:DB9E 28 21 -  -  	jr z, GLETFunctionChainAns
 1243 D1:DBA0 3D -  -  -  	dec a
 1244 D1:DBA1 28 3B -  -  	jr z, GLETFunctionFunction
 1245 D1:DBA3 C3 DB AE D1 	jp GLETError
 1246 D1:DBA7 -  -  -  -  GLETFunctionNumber:
 1247 D1:DBA7 79 -  -  -  	ld a, c
 1248 D1:DBA8 06 02 -  -  	ld b, OutputInHL
 1249 D1:DBAA CD 36 AD D1 	call GetFunction
 1250 D1:DBAE C3 48 DB D1 	jp GLETChainAnsNumber
 1251 D1:DBB2 -  -  -  -  GLETFunctionVariable:
 1252 D1:DBB2 79 -  -  -  	ld a, c
 1253 D1:DBB3 06 02 -  -  	ld b, OutputInHL
 1254 D1:DBB5 CD 36 AD D1 	call GetFunction
 1255 D1:DBB9 C3 62 DB D1 	jp GLETChainAnsVariable
 1256 D1:DBBD -  -  -  -  GLETFunctionChainPush:
 1257 D1:DBBD C3 70 AF D1 	jp UnknownError
 1258 D1:DBC1 -  -  -  -  GLETFunctionChainAns:
 1259 D1:DBC1 3A BA E9 D1 	ld a, (ExprOutput)
 1260 D1:DBC5 87 -  -  -  	add a, a
 1261 D1:DBC6 87 -  -  -  	add a, a
 1262 D1:DBC7 87 -  -  -  	add a, a
 1263 D1:DBC8 87 -  -  -  	add a, a
 1264 D1:DBC9 C6 D5 -  -  	add a, 0D5h
 1265 D1:DBCB CD 0A AD D1 	call InsertA															; push hl/de
 1266 D1:DBCF 79 -  -  -  	ld a, c
 1267 D1:DBD0 06 02 -  -  	ld b, OutputInHL
 1268 D1:DBD2 CD 36 AD D1 	call GetFunction
 1269 D1:DBD6 3E D1 -  -  	ld a, 0D1h
 1270 D1:DBD8 CD 0A AD D1 	call InsertA															; pop de
 1271 D1:DBDC 18 B1 -  -  	jr -_
 1272 D1:DBDE -  -  -  -  GLETFunctionFunction:
 1273 D1:DBDE 7B -  -  -  	ld a, e
 1274 D1:DBDF 06 01 -  -  	ld b, OutputInDE
 1275 D1:DBE1 CD 36 AD D1 	call GetFunction
 1276 D1:DBE5 79 -  -  -  	ld a, c
 1277 D1:DBE6 06 02 -  -  	ld b, OutputInHL
 1278 D1:DBE8 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1279 D1:DBEC CD 36 AD D1 	call GetFunction
 1280 D1:DBF0 18 9D -  -  	jr -_
 1281 D1:DBF2 -  -  -  -  	
 1282 D1:DBF2 -  -  -  -  NEQNumberXXX:
 1283 D1:DBF2 DD 7E FC -  	ld a, (ix-4)
 1284 D1:DBF5 B7 -  -  -  	or a
 1285 D1:DBF6 28 10 -  -  	jr z, NEQNumberNumber
 1286 D1:DBF8 3D -  -  -  	dec a
 1287 D1:DBF9 28 33 -  -  	jr z, NEQNumberVariable
 1288 D1:DBFB 3D -  -  -  	dec a
 1289 D1:DBFC 28 37 -  -  	jr z, NEQNumberChainPush
 1290 D1:DBFE 3D -  -  -  	dec a
 1291 D1:DBFF 28 38 -  -  	jr z, NEQNumberChainAns
 1292 D1:DC01 3D -  -  -  	dec a
 1293 D1:DC02 28 3B -  -  	jr z, NEQNumberFunction
 1294 D1:DC04 C3 F5 AE D1 	jp NEQError
 1295 D1:DC08 -  -  -  -  NEQNumberNumber:
 1296 D1:DC08 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1297 D1:DC0C EB -  -  -  	ex de, hl
 1298 D1:DC0D 3A 1F EA D0 	ld a, (tempToken)
 1299 D1:DC11 FE 6A -  -  	cp tEq
 1300 D1:DC13 28 0C -  -  	jr z, +_
 1301 D1:DC15 B7 -  -  -  	or a
 1302 D1:DC16 ED 42 -  -  	sbc hl, bc
 1303 D1:DC18 21 00 00 00 	ld hl, 0
 1304 D1:DC1C 28 01 -  -  	jr z, $+3
 1305 D1:DC1E 23 -  -  -  	inc hl
 1306 D1:DC1F 18 09 -  -  	jr ++_
 1307 D1:DC21 ED 42 -  -  _:	sbc hl, bc
 1308 D1:DC23 21 00 00 00 	ld hl, 0
 1309 D1:DC27 20 01 -  -  	jr nz, $+3
 1310 D1:DC29 23 -  -  -  	inc hl
 1311 D1:DC2A DD 2F F9 -  _:	ld (ix-7), hl
 1312 D1:DC2D C9 -  -  -  	ret
 1313 D1:DC2E -  -  -  -  NEQNumberVariable:
 1314 D1:DC2E C5 -  -  -  	push bc
 1315 D1:DC2F E1 -  -  -  	pop hl
 1316 D1:DC30 EB -  -  -  	ex de, hl
 1317 D1:DC31 E5 -  -  -  	push hl
 1318 D1:DC32 C1 -  -  -  	pop bc
 1319 D1:DC33 18 2B -  -  	jr NEQVariableNumber
 1320 D1:DC35 -  -  -  -  NEQNumberChainPush:
 1321 D1:DC35 C3 70 AF D1 	jp UnknownError
 1322 D1:DC39 -  -  -  -  NEQNumberChainAns:
 1323 D1:DC39 C5 -  -  -  	push bc
 1324 D1:DC3A D1 -  -  -  	pop de
 1325 D1:DC3B C3 25 DD D1 	jp NEQChainAnsNumber
 1326 D1:DC3F -  -  -  -  NEQNumberFunction:
 1327 D1:DC3F C5 -  -  -  	push bc
 1328 D1:DC40 E1 -  -  -  	pop hl
 1329 D1:DC41 EB -  -  -  	ex de, hl
 1330 D1:DC42 E5 -  -  -  	push hl
 1331 D1:DC43 C1 -  -  -  	pop bc
 1332 D1:DC44 C3 A2 DD D1 	jp NEQFunctionNumber
 1333 D1:DC48 -  -  -  -  NEQVariableXXX:
 1334 D1:DC48 DD 7E FC -  	ld a, (ix-4)
 1335 D1:DC4B B7 -  -  -  	or a
 1336 D1:DC4C 28 12 -  -  	jr z, NEQVariableNumber
 1337 D1:DC4E 3D -  -  -  	dec a
 1338 D1:DC4F 28 17 -  -  	jr z, NEQVariableVariable
 1339 D1:DC51 3D -  -  -  	dec a
 1340 D1:DC52 28 39 -  -  	jr z, NEQVariableChainPush
 1341 D1:DC54 3D -  -  -  	dec a
 1342 D1:DC55 28 3A -  -  	jr z, NEQVariableChainAns
 1343 D1:DC57 3D -  -  -  	dec a
 1344 D1:DC58 CA 96 DC D1 	jp z, NEQVariableFunction
 1345 D1:DC5C C3 F5 AE D1 	jp NEQError
 1346 D1:DC60 -  -  -  -  NEQVariableNumber:
 1347 D1:DC60 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1348 D1:DC64 C3 25 DD D1 	jp NEQChainAnsNumber
 1349 D1:DC68 -  -  -  -  NEQVariableVariable:
 1350 D1:DC68 79 -  -  -  	ld a, c
 1351 D1:DC69 BB -  -  -  	cp e
 1352 D1:DC6A 20 19 -  -  	jr nz, ++_
 1353 D1:DC6C FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1354 D1:DC70 3A 1F EA D0 	ld a, (tempToken)
 1355 D1:DC74 D6 6F -  -  	sub tNE
 1356 D1:DC76 28 02 -  -  	jr z, +_
 1357 D1:DC78 3E 01 -  -  	ld a, 1
 1358 D1:DC7A 11 00 00 00 _:	ld de, 0
 1359 D1:DC7E 5F -  -  -  	ld e, a
 1360 D1:DC7F 36 00 -  -  	ld (hl), typeNumber
 1361 D1:DC81 23 -  -  -  	inc hl
 1362 D1:DC82 ED 1F -  -  	ld (hl), de
 1363 D1:DC84 C9 -  -  -  	ret
 1364 D1:DC85 CD 61 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1365 D1:DC89 C3 49 DD D1 	jp NEQChainAnsVariable
 1366 D1:DC8D -  -  -  -  NEQVariableChainPush:
 1367 D1:DC8D C3 70 AF D1 	jp UnknownError
 1368 D1:DC91 -  -  -  -  NEQVariableChainAns:
 1369 D1:DC91 59 -  -  -  	ld e, c
 1370 D1:DC92 C3 49 DD D1 	jp NEQChainAnsVariable
 1371 D1:DC96 -  -  -  -  NEQVariableFunction:
 1372 D1:DC96 7B -  -  -  	ld a, e
 1373 D1:DC97 06 01 -  -  	ld b, OutputInDE
 1374 D1:DC99 CD 36 AD D1 	call GetFunction
 1375 D1:DC9D CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1376 D1:DCA1 -  -  -  -  NEQInsert:
 1377 D1:DCA1 21 B7 ED 52 	ld hl, 052EDB7h
 1378 D1:DCA5 CD 4C AC D1 	call InsertHL															; or a \ sbc hl, de
 1379 D1:DCA9 11 00 00 00 	ld de, 0
 1380 D1:DCAD 21 20 01 23 	ld hl, 0230120h
 1381 D1:DCB1 3A 1F EA D0 	ld a, (tempToken)
 1382 D1:DCB5 FE 6A -  -  	cp tEq
 1383 D1:DCB7 28 02 -  -  	jr z, +_
 1384 D1:DCB9 2E 28 -  -  	ld l, 028h
 1385 D1:DCBB 3E 21 -  -  _:	ld a, 021h
 1386 D1:DCBD C3 87 AC D1 	jp InsertADEHL															; ld hl, 0 \ jr [n]z, $+3 \ inc hl
 1387 D1:DCC1 -  -  -  -  NEQChainPushXXX:
 1388 D1:DCC1 DD 7E FC -  	ld a, (ix-4)
 1389 D1:DCC4 B7 -  -  -  	or a
 1390 D1:DCC5 28 12 -  -  	jr z, NEQChainPushNumber
 1391 D1:DCC7 3D -  -  -  	dec a
 1392 D1:DCC8 28 17 -  -  	jr z, NEQChainPushVariable
 1393 D1:DCCA 3D -  -  -  	dec a
 1394 D1:DCCB 28 1C -  -  	jr z, NEQChainPushChainPush
 1395 D1:DCCD 3D -  -  -  	dec a
 1396 D1:DCCE 28 1D -  -  	jr z, NEQChainPushChainAns
 1397 D1:DCD0 3D -  -  -  	dec a
 1398 D1:DCD1 CA FE DC D1 	jp z, NEQChainPushFunction
 1399 D1:DCD5 C3 F5 AE D1 	jp NEQError
 1400 D1:DCD9 -  -  -  -  NEQChainPushNumber:
 1401 D1:DCD9 3E E1 -  -  	ld a, 0E1h
 1402 D1:DCDB CD 0A AD D1 	call InsertA															; pop hl
 1403 D1:DCDF 18 44 -  -  	jr NEQChainAnsNumber
 1404 D1:DCE1 -  -  -  -  NEQChainPushVariable:
 1405 D1:DCE1 3E E1 -  -  	ld a, 0E1h
 1406 D1:DCE3 CD 0A AD D1 	call InsertA															; pop hl
 1407 D1:DCE7 18 60 -  -  	jr NEQChainAnsVariable
 1408 D1:DCE9 -  -  -  -  NEQChainPushChainPush:
 1409 D1:DCE9 C3 70 AF D1 	jp UnknownError
 1410 D1:DCED -  -  -  -  NEQChainPushChainAns:
 1411 D1:DCED 3A BA E9 D1 	ld a, (ExprOutput)
 1412 D1:DCF1 B7 -  -  -  	or a
 1413 D1:DCF2 3E D1 -  -  	ld a, 0D1h
 1414 D1:DCF4 20 02 -  -  	jr nz, +_
 1415 D1:DCF6 3E E1 -  -  	ld a, 0E1h
 1416 D1:DCF8 CD 0A AD D1 _:	call InsertA															; pop hl/de
 1417 D1:DCFC 18 A3 -  -  	jr NEQInsert
 1418 D1:DCFE -  -  -  -  NEQChainPushFunction:
 1419 D1:DCFE 7B -  -  -  	ld a, e
 1420 D1:DCFF 06 02 -  -  	ld b, OutputInHL
 1421 D1:DD01 CD 36 AD D1 	call GetFunction
 1422 D1:DD05 3E D1 -  -  	ld a, 0D1h
 1423 D1:DD07 CD 0A AD D1 	call InsertA															; pop de
 1424 D1:DD0B 18 94 -  -  _:	jr NEQInsert
 1425 D1:DD0D -  -  -  -  NEQChainAnsXXX:
 1426 D1:DD0D DD 7E FC -  	ld a, (ix-4)
 1427 D1:DD10 B7 -  -  -  	or a
 1428 D1:DD11 28 12 -  -  	jr z, NEQChainAnsNumber
 1429 D1:DD13 3D -  -  -  	dec a
 1430 D1:DD14 28 33 -  -  	jr z, NEQChainAnsVariable
 1431 D1:DD16 3D -  -  -  	dec a
 1432 D1:DD17 28 4C -  -  	jr z, NEQChainAnsChainPush
 1433 D1:DD19 3D -  -  -  	dec a
 1434 D1:DD1A 28 4D -  -  	jr z, NEQChainAnsChainAns
 1435 D1:DD1C 3D -  -  -  	dec a
 1436 D1:DD1D CA 6D DD D1 	jp z, NEQChainAnsFunction
 1437 D1:DD21 C3 F5 AE D1 	jp NEQError
 1438 D1:DD25 -  -  -  -  NEQChainAnsNumber:
 1439 D1:DD25 FD CB C0 5E 	bit op_is_last_one, (iy+fExpression1)
 1440 D1:DD29 28 0C -  -  	jr z, +_
 1441 D1:DD2B 3A 1F EA D0 	ld a, (tempToken)
 1442 D1:DD2F FE 6F -  -  	cp tNE
 1443 D1:DD31 20 04 -  -  	jr nz, +_
 1444 D1:DD33 FD CB C0 AE 	res ans_set_z_flag, (iy+fExpression1)
 1445 D1:DD37 3A BA E9 D1 _:	ld a, (ExprOutput)
 1446 D1:DD3B B7 -  -  -  	or a
 1447 D1:DD3C 3E 11 -  -  	ld a, 011h
 1448 D1:DD3E 20 02 -  -  	jr nz, $+4
 1449 D1:DD40 3E 21 -  -  	ld a, 021h
 1450 D1:DD42 EB -  -  -  	ex de, hl
 1451 D1:DD43 CD 48 AC D1 	call InsertAHL															; ld hl/de, *
 1452 D1:DD47 18 C2 -  -  	jr --_
 1453 D1:DD49 -  -  -  -  NEQChainAnsVariable:
 1454 D1:DD49 26 17 -  -  	ld h, 017h
 1455 D1:DD4B 16 03 -  -  	ld d, 3
 1456 D1:DD4D ED 5C -  -  	mlt de
 1457 D1:DD4F 7B -  -  -  	ld a, e
 1458 D1:DD50 2E DD -  -  	ld l, 0DDh
 1459 D1:DD52 CD 70 1D 02 	call _SetHLUToA
 1460 D1:DD56 3A BA E9 D1 	ld a, (ExprOutput)
 1461 D1:DD5A B7 -  -  -  	or a
 1462 D1:DD5B 20 02 -  -  	jr nz, $+4
 1463 D1:DD5D 26 27 -  -  	ld h, 027h
 1464 D1:DD5F CD 4C AC D1 	call InsertHL															; ld hl/de, (ix+*)
 1465 D1:DD63 18 A6 -  -  	jr --_
 1466 D1:DD65 -  -  -  -  NEQChainAnsChainPush:
 1467 D1:DD65 C3 70 AF D1 	jp UnknownError
 1468 D1:DD69 -  -  -  -  NEQChainAnsChainAns:
 1469 D1:DD69 C3 70 AF D1 	jp UnknownError
 1470 D1:DD6D -  -  -  -  NEQChainAnsFunction:
 1471 D1:DD6D 3A BA E9 D1 	ld a, (ExprOutput)
 1472 D1:DD71 87 -  -  -  	add a, a
 1473 D1:DD72 87 -  -  -  	add a, a
 1474 D1:DD73 87 -  -  -  	add a, a
 1475 D1:DD74 87 -  -  -  	add a, a
 1476 D1:DD75 C6 D5 -  -  	add a, 0D5h
 1477 D1:DD77 CD 0A AD D1 	call InsertA															; push hl/de
 1478 D1:DD7B 7B -  -  -  	ld a, e
 1479 D1:DD7C 06 02 -  -  	ld b, OutputInHL
 1480 D1:DD7E CD 36 AD D1 	call GetFunction
 1481 D1:DD82 3E D1 -  -  	ld a, 0D1h
 1482 D1:DD84 CD 0A AD D1 	call InsertA															; pop de
 1483 D1:DD88 C3 A1 DC D1 _:	jp NEQInsert
 1484 D1:DD8C -  -  -  -  NEQFunctionXXX:
 1485 D1:DD8C DD 7E FC -  	ld a, (ix-4)
 1486 D1:DD8F B7 -  -  -  	or a
 1487 D1:DD90 28 10 -  -  	jr z, NEQFunctionNumber
 1488 D1:DD92 3D -  -  -  	dec a
 1489 D1:DD93 28 18 -  -  	jr z, NEQFunctionVariable
 1490 D1:DD95 3D -  -  -  	dec a
 1491 D1:DD96 28 1C -  -  	jr z, NEQFunctionChainPush
 1492 D1:DD98 3D -  -  -  	dec a
 1493 D1:DD99 28 1D -  -  	jr z, NEQFunctionChainAns
 1494 D1:DD9B 3D -  -  -  	dec a
 1495 D1:DD9C 28 1D -  -  	jr z, NEQFunctionFunction
 1496 D1:DD9E C3 F5 AE D1 	jp NEQError
 1497 D1:DDA2 -  -  -  -  NEQFunctionNumber:
 1498 D1:DDA2 79 -  -  -  	ld a, c
 1499 D1:DDA3 06 02 -  -  	ld b, OutputInHL
 1500 D1:DDA5 CD 36 AD D1 	call GetFunction
 1501 D1:DDA9 C3 25 DD D1 	jp NEQChainAnsNumber
 1502 D1:DDAD -  -  -  -  NEQFunctionVariable:
 1503 D1:DDAD 79 -  -  -  	ld a, c
 1504 D1:DDAE 4B -  -  -  	ld c, e
 1505 D1:DDAF 5F -  -  -  	ld e, a
 1506 D1:DDB0 C3 96 DC D1 	jp NEQVariableFunction
 1507 D1:DDB4 -  -  -  -  NEQFunctionChainPush:
 1508 D1:DDB4 C3 70 AF D1 	jp UnknownError
 1509 D1:DDB8 -  -  -  -  NEQFunctionChainAns:
 1510 D1:DDB8 59 -  -  -  	ld e, c
 1511 D1:DDB9 18 B2 -  -  	jr NEQChainAnsFunction
 1512 D1:DDBB -  -  -  -  NEQFunctionFunction:
 1513 D1:DDBB 7B -  -  -  	ld a, e
 1514 D1:DDBC 06 01 -  -  	ld b, OutputInDE
 1515 D1:DDBE CD 36 AD D1 	call GetFunction
 1516 D1:DDC2 79 -  -  -  	ld a, c
 1517 D1:DDC3 06 02 -  -  	ld b, OutputInHL
 1518 D1:DDC5 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1519 D1:DDC9 CD 36 AD D1 	call GetFunction
 1520 D1:DDCD 18 B9 -  -  	jr -_
 1521 D1:DDCF -  -  -  -  
 1522 D1:DDCF -  -  -  -  XORANDNumberXXX:
 1523 D1:DDCF DD 7E FC -  	ld a, (ix-4)
 1524 D1:DDD2 B7 -  -  -  	or a
 1525 D1:DDD3 28 10 -  -  	jr z, XORANDNumberNumber
 1526 D1:DDD5 3D -  -  -  	dec a
 1527 D1:DDD6 28 59 -  -  	jr z, XORANDNumberVariable
 1528 D1:DDD8 3D -  -  -  	dec a
 1529 D1:DDD9 28 5D -  -  	jr z, XORANDNumberChainPush
 1530 D1:DDDB 3D -  -  -  	dec a
 1531 D1:DDDC 28 5E -  -  	jr z, XORANDNumberChainAns
 1532 D1:DDDE 3D -  -  -  	dec a
 1533 D1:DDDF 28 61 -  -  	jr z, XORANDNumberFunction
 1534 D1:DDE1 C3 03 AF D1 	jp XORANDError
 1535 D1:DDE5 -  -  -  -  XORANDNumberNumber:
 1536 D1:DDE5 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1537 D1:DDE9 B7 -  -  -  	or a
 1538 D1:DDEA ED 62 -  -  	sbc hl, hl
 1539 D1:DDEC 3A 1F EA D0 	ld a, (tempToken)
 1540 D1:DDF0 FE 3D -  -  	cp tXor
 1541 D1:DDF2 28 22 -  -  	jr z, ++_
 1542 D1:DDF4 FE 3C -  -  	cp tOr
 1543 D1:DDF6 28 0F -  -  	jr z, +_
 1544 D1:DDF8 CD 48 1D 02 	call _ChkBCIs0
 1545 D1:DDFC 28 2F -  -  	jr z, +++_
 1546 D1:DDFE CD 4C 1D 02 	call _ChkDEIs0
 1547 D1:DE02 28 29 -  -  	jr z, +++_
 1548 D1:DE04 23 -  -  -  	inc hl
 1549 D1:DE05 18 26 -  -  	jr +++_
 1550 D1:DE07 CD 48 1D 02 _:	call _ChkBCIs0
 1551 D1:DE0B 47 -  -  -  	ld b, a
 1552 D1:DE0C CD 4C 1D 02 	call _ChkDEIs0
 1553 D1:DE10 B0 -  -  -  	or a, b
 1554 D1:DE11 28 1A -  -  	jr z, ++_
 1555 D1:DE13 23 -  -  -  	inc hl
 1556 D1:DE14 18 17 -  -  	jr ++_
 1557 D1:DE16 CD 4C 1D 02 _:	call _ChkDEIs0
 1558 D1:DE1A 11 00 00 00 	ld de, 0
 1559 D1:DE1E 28 01 -  -  	jr z, $+3
 1560 D1:DE20 13 -  -  -  	inc de
 1561 D1:DE21 CD 48 1D 02 	call _ChkBCIs0
 1562 D1:DE25 3E 00 -  -  	ld a, 0
 1563 D1:DE27 28 01 -  -  	jr z, $+3
 1564 D1:DE29 3C -  -  -  	inc a
 1565 D1:DE2A AB -  -  -  	xor e
 1566 D1:DE2B 5F -  -  -  	ld e, a
 1567 D1:DE2C EB -  -  -  	ex de, hl
 1568 D1:DE2D DD 2F F9 -  _:	ld (ix-7), hl
 1569 D1:DE30 C9 -  -  -  	ret
 1570 D1:DE31 -  -  -  -  XORANDNumberVariable:
 1571 D1:DE31 C5 -  -  -  	push bc
 1572 D1:DE32 E1 -  -  -  	pop hl
 1573 D1:DE33 EB -  -  -  	ex de, hl
 1574 D1:DE34 E5 -  -  -  	push hl
 1575 D1:DE35 C1 -  -  -  	pop bc
 1576 D1:DE36 18 2B -  -  	jr XORANDVariableNumber
 1577 D1:DE38 -  -  -  -  XORANDNumberChainPush:
 1578 D1:DE38 C3 70 AF D1 	jp UnknownError
 1579 D1:DE3C -  -  -  -  XORANDNumberChainAns:
 1580 D1:DE3C C5 -  -  -  	push bc
 1581 D1:DE3D D1 -  -  -  	pop de
 1582 D1:DE3E C3 2B DF D1 	jp XORANDChainAnsNumber
 1583 D1:DE42 -  -  -  -  XORANDNumberFunction:
 1584 D1:DE42 C5 -  -  -  	push bc
 1585 D1:DE43 E1 -  -  -  	pop hl
 1586 D1:DE44 EB -  -  -  	ex de, hl
 1587 D1:DE45 E5 -  -  -  	push hl
 1588 D1:DE46 C1 -  -  -  	pop bc
 1589 D1:DE47 C3 94 DF D1 	jp XORANDFunctionNumber
 1590 D1:DE4B -  -  -  -  XORANDVariableXXX:
 1591 D1:DE4B DD 7E FC -  	ld a, (ix-4)
 1592 D1:DE4E B7 -  -  -  	or a
 1593 D1:DE4F 28 12 -  -  	jr z, XORANDVariableNumber
 1594 D1:DE51 3D -  -  -  	dec a
 1595 D1:DE52 28 17 -  -  	jr z, XORANDVariableVariable
 1596 D1:DE54 3D -  -  -  	dec a
 1597 D1:DE55 28 39 -  -  	jr z, XORANDVariableChainPush
 1598 D1:DE57 3D -  -  -  	dec a
 1599 D1:DE58 28 3A -  -  	jr z, XORANDVariableChainAns
 1600 D1:DE5A 3D -  -  -  	dec a
 1601 D1:DE5B CA 99 DE D1 	jp z, XORANDVariableFunction
 1602 D1:DE5F C3 03 AF D1 	jp XORANDError
 1603 D1:DE63 -  -  -  -  XORANDVariableNumber:
 1604 D1:DE63 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1605 D1:DE67 C3 2B DF D1 	jp XORANDChainAnsNumber
 1606 D1:DE6B -  -  -  -  XORANDVariableVariable:
 1607 D1:DE6B 79 -  -  -  	ld a, c
 1608 D1:DE6C BB -  -  -  	cp e
 1609 D1:DE6D 20 19 -  -  	jr nz, ++_
 1610 D1:DE6F FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1611 D1:DE73 3A 1F EA D0 	ld a, (tempToken)
 1612 D1:DE77 D6 6F -  -  	sub tNE
 1613 D1:DE79 28 02 -  -  	jr z, +_
 1614 D1:DE7B 3E 01 -  -  	ld a, 1
 1615 D1:DE7D 11 00 00 00 _:	ld de, 0
 1616 D1:DE81 5F -  -  -  	ld e, a
 1617 D1:DE82 36 00 -  -  	ld (hl), typeNumber
 1618 D1:DE84 23 -  -  -  	inc hl
 1619 D1:DE85 ED 1F -  -  	ld (hl), de
 1620 D1:DE87 C9 -  -  -  	ret
 1621 D1:DE88 CD 61 AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1622 D1:DE8C C3 3D DF D1 	jp XORANDChainAnsVariable
 1623 D1:DE90 -  -  -  -  XORANDVariableChainPush:
 1624 D1:DE90 C3 70 AF D1 	jp UnknownError
 1625 D1:DE94 -  -  -  -  XORANDVariableChainAns:
 1626 D1:DE94 59 -  -  -  	ld e, c
 1627 D1:DE95 C3 3D DF D1 	jp XORANDChainAnsVariable
 1628 D1:DE99 -  -  -  -  XORANDVariableFunction:
 1629 D1:DE99 7B -  -  -  	ld a, e
 1630 D1:DE9A 06 01 -  -  	ld b, OutputInDE
 1631 D1:DE9C CD 36 AD D1 	call GetFunction
 1632 D1:DEA0 CD 61 AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1633 D1:DEA4 -  -  -  -  XORANDInsert:
 1634 D1:DEA4 ED 5B 9A E9 
              D1 -  -  -  	ld de, (programPtr)
 1635 D1:DEA9 21 26 EE D1 	ld hl, XORANDData
 1636 D1:DEAD 06 A2 -  -  	ld b, 0A2h
 1637 D1:DEAF 3A 1F EA D0 	ld a, (tempToken)
 1638 D1:DEB3 FE 3D -  -  	cp tXor
 1639 D1:DEB5 20 02 -  -  	jr nz, +_
 1640 D1:DEB7 06 AA -  -  	ld b, 0AAh
 1641 D1:DEB9 FE 3C -  -  _:	cp tOr
 1642 D1:DEBB 20 02 -  -  	jr nz, +_
 1643 D1:DEBD 06 B2 -  -  	ld b, 0B2h
 1644 D1:DEBF 78 -  -  -  _:	ld a, b
 1645 D1:DEC0 32 30 EE D1 	ld (XORANDSMC), a
 1646 D1:DEC4 01 10 00 00 	ld bc, 16
 1647 D1:DEC8 ED B0 -  -  	ldir
 1648 D1:DECA ED 53 9A E9 
              D1 -  -  -  	ld (programPtr), de
 1649 D1:DECF C9 -  -  -  	ret
 1650 D1:DED0 -  -  -  -  XORANDChainPushXXX:
 1651 D1:DED0 DD 7E FC -  	ld a, (ix-4)
 1652 D1:DED3 B7 -  -  -  	or a
 1653 D1:DED4 28 12 -  -  	jr z, XORANDChainPushNumber
 1654 D1:DED6 3D -  -  -  	dec a
 1655 D1:DED7 28 17 -  -  	jr z, XORANDChainPushVariable
 1656 D1:DED9 3D -  -  -  	dec a
 1657 D1:DEDA 28 1C -  -  	jr z, XORANDChainPushChainPush
 1658 D1:DEDC 3D -  -  -  	dec a
 1659 D1:DEDD 28 1D -  -  	jr z, XORANDChainPushChainAns
 1660 D1:DEDF 3D -  -  -  	dec a
 1661 D1:DEE0 CA 04 DF D1 	jp z, XORANDChainPushFunction
 1662 D1:DEE4 C3 03 AF D1 	jp XORANDError
 1663 D1:DEE8 -  -  -  -  XORANDChainPushNumber:
 1664 D1:DEE8 3E E1 -  -  	ld a, 0E1h
 1665 D1:DEEA CD 0A AD D1 	call InsertA															; pop hl
 1666 D1:DEEE 18 3B -  -  	jr XORANDChainAnsNumber
 1667 D1:DEF0 -  -  -  -  XORANDChainPushVariable:
 1668 D1:DEF0 3E E1 -  -  	ld a, 0E1h
 1669 D1:DEF2 CD 0A AD D1 	call InsertA															; pop hl
 1670 D1:DEF6 18 45 -  -  	jr XORANDChainAnsVariable
 1671 D1:DEF8 -  -  -  -  XORANDChainPushChainPush:
 1672 D1:DEF8 C3 70 AF D1 	jp UnknownError
 1673 D1:DEFC -  -  -  -  XORANDChainPushChainAns:
 1674 D1:DEFC 3E D1 -  -  	ld a, 0D1h
 1675 D1:DEFE CD 0A AD D1 	call InsertA															; pop de
 1676 D1:DF02 18 A0 -  -  	jr XORANDInsert
 1677 D1:DF04 -  -  -  -  XORANDChainPushFunction:
 1678 D1:DF04 7B -  -  -  	ld a, e
 1679 D1:DF05 06 02 -  -  	ld b, OutputInHL
 1680 D1:DF07 CD 36 AD D1 	call GetFunction
 1681 D1:DF0B 3E D1 -  -  	ld a, 0D1h
 1682 D1:DF0D CD 0A AD D1 	call InsertA															; pop de
 1683 D1:DF11 18 91 -  -  _:	jr XORANDInsert
 1684 D1:DF13 -  -  -  -  XORANDChainAnsXXX:
 1685 D1:DF13 DD 7E FC -  	ld a, (ix-4)
 1686 D1:DF16 B7 -  -  -  	or a
 1687 D1:DF17 28 12 -  -  	jr z, XORANDChainAnsNumber
 1688 D1:DF19 3D -  -  -  	dec a
 1689 D1:DF1A 28 21 -  -  	jr z, XORANDChainAnsVariable
 1690 D1:DF1C 3D -  -  -  	dec a
 1691 D1:DF1D 28 3A -  -  	jr z, XORANDChainAnsChainPush
 1692 D1:DF1F 3D -  -  -  	dec a
 1693 D1:DF20 28 3B -  -  	jr z, XORANDChainAnsChainAns
 1694 D1:DF22 3D -  -  -  	dec a
 1695 D1:DF23 CA 61 DF D1 	jp z, XORANDChainAnsFunction
 1696 D1:DF27 C3 03 AF D1 	jp XORANDError
 1697 D1:DF2B -  -  -  -  XORANDChainAnsNumber:
 1698 D1:DF2B 3A BA E9 D1 	ld a, (ExprOutput)
 1699 D1:DF2F B7 -  -  -  	or a
 1700 D1:DF30 3E 11 -  -  	ld a, 011h
 1701 D1:DF32 20 02 -  -  	jr nz, +_
 1702 D1:DF34 3E 21 -  -  	ld a, 021h
 1703 D1:DF36 EB -  -  -  _:	ex de, hl
 1704 D1:DF37 CD 48 AC D1 	call InsertAHL															; ld hl/de, *
 1705 D1:DF3B 18 D4 -  -  	jr --_
 1706 D1:DF3D -  -  -  -  XORANDChainAnsVariable:
 1707 D1:DF3D 26 17 -  -  	ld h, 017h
 1708 D1:DF3F 16 03 -  -  	ld d, 3
 1709 D1:DF41 ED 5C -  -  	mlt de
 1710 D1:DF43 7B -  -  -  	ld a, e
 1711 D1:DF44 2E DD -  -  	ld l, 0DDh
 1712 D1:DF46 CD 70 1D 02 	call _SetHLUToA
 1713 D1:DF4A 3A BA E9 D1 	ld a, (ExprOutput)
 1714 D1:DF4E B7 -  -  -  	or a
 1715 D1:DF4F 20 02 -  -  	jr nz, $+4
 1716 D1:DF51 26 27 -  -  	ld h, 027h
 1717 D1:DF53 CD 4C AC D1 	call InsertHL															; ld hl/de, (ix+*)
 1718 D1:DF57 18 B8 -  -  	jr --_
 1719 D1:DF59 -  -  -  -  XORANDChainAnsChainPush:
 1720 D1:DF59 C3 70 AF D1 	jp UnknownError
 1721 D1:DF5D -  -  -  -  XORANDChainAnsChainAns:
 1722 D1:DF5D C3 70 AF D1 	jp UnknownError
 1723 D1:DF61 -  -  -  -  XORANDChainAnsFunction:
 1724 D1:DF61 3A BA E9 D1 	ld a, (ExprOutput)
 1725 D1:DF65 87 -  -  -  	add a, a
 1726 D1:DF66 87 -  -  -  	add a, a
 1727 D1:DF67 87 -  -  -  	add a, a
 1728 D1:DF68 87 -  -  -  	add a, a
 1729 D1:DF69 C6 D5 -  -  	add a, 0D5h
 1730 D1:DF6B CD 0A AD D1 	call InsertA															; push hl/de
 1731 D1:DF6F 7B -  -  -  	ld a, e
 1732 D1:DF70 06 02 -  -  	ld b, OutputInHL
 1733 D1:DF72 CD 36 AD D1 	call GetFunction
 1734 D1:DF76 3E D1 -  -  	ld a, 0D1h
 1735 D1:DF78 CD 0A AD D1 	call InsertA															; pop de
 1736 D1:DF7C 18 93 -  -  _:	jr ---_
 1737 D1:DF7E -  -  -  -  XORANDFunctionXXX:
 1738 D1:DF7E DD 7E FC -  	ld a, (ix-4)
 1739 D1:DF81 B7 -  -  -  	or a
 1740 D1:DF82 28 10 -  -  	jr z, XORANDFunctionNumber
 1741 D1:DF84 3D -  -  -  	dec a
 1742 D1:DF85 28 18 -  -  	jr z, XORANDFunctionVariable
 1743 D1:DF87 3D -  -  -  	dec a
 1744 D1:DF88 28 1C -  -  	jr z, XORANDFunctionChainPush
 1745 D1:DF8A 3D -  -  -  	dec a
 1746 D1:DF8B 28 1D -  -  	jr z, XORANDFunctionChainAns
 1747 D1:DF8D 3D -  -  -  	dec a
 1748 D1:DF8E 28 1D -  -  	jr z, XORANDFunctionFunction
 1749 D1:DF90 C3 03 AF D1 	jp XORANDError
 1750 D1:DF94 -  -  -  -  XORANDFunctionNumber:
 1751 D1:DF94 79 -  -  -  	ld a, c
 1752 D1:DF95 06 02 -  -  	ld b, OutputInHL
 1753 D1:DF97 CD 36 AD D1 	call GetFunction
 1754 D1:DF9B C3 2B DF D1 	jp XORANDChainAnsNumber
 1755 D1:DF9F -  -  -  -  XORANDFunctionVariable:
 1756 D1:DF9F 79 -  -  -  	ld a, c
 1757 D1:DFA0 4B -  -  -  	ld c, e
 1758 D1:DFA1 5F -  -  -  	ld e, a
 1759 D1:DFA2 C3 99 DE D1 	jp XORANDVariableFunction
 1760 D1:DFA6 -  -  -  -  XORANDFunctionChainPush:
 1761 D1:DFA6 C3 70 AF D1 	jp UnknownError
 1762 D1:DFAA -  -  -  -  XORANDFunctionChainAns:
 1763 D1:DFAA 59 -  -  -  	ld e, c
 1764 D1:DFAB 18 B4 -  -  	jr XORANDChainAnsFunction
 1765 D1:DFAD -  -  -  -  XORANDFunctionFunction:
 1766 D1:DFAD 7B -  -  -  	ld a, e
 1767 D1:DFAE 06 01 -  -  	ld b, OutputInDE
 1768 D1:DFB0 CD 36 AD D1 	call GetFunction
 1769 D1:DFB4 79 -  -  -  	ld a, c
 1770 D1:DFB5 06 02 -  -  	ld b, OutputInHL
 1771 D1:DFB7 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1772 D1:DFBB CD 36 AD D1 	call GetFunction
 1773 D1:DFBF 18 BB -  -  	jr -_
 1774 D1:DFC1 -  -  -  -  	
 1775 D1:DFC1 -  -  -  -  StoNumberXXX:
 1776 D1:DFC1 DD 7E FC -  	ld a, (ix-4)
 1777 D1:DFC4 FE 03 -  -  	cp typeChainAns
 1778 D1:DFC6 28 0A -  -  	jr z, +_
 1779 D1:DFC8 FE 01 -  -  	cp typeVariable
 1780 D1:DFCA CA F5 DF D1 	jp z, ++_
 1781 D1:DFCE C3 70 AF D1 	jp UnknownError
 1782 D1:DFD2 CD 48 E1 D1 _:	call StoTestStoToListElement
 1783 D1:DFD6 C2 70 AF D1 	jp nz, UnknownError
 1784 D1:DFDA 3E 11 -  -  	ld a, 011h
 1785 D1:DFDC C5 -  -  -  	push bc
 1786 D1:DFDD E1 -  -  -  	pop hl
 1787 D1:DFDE CD 48 AC D1 	call InsertAHL															; ld de, *
 1788 D1:DFE2 3E ED -  -  	ld a, 0EDh
 1789 D1:DFE4 CD 0A AD D1 	call InsertA															; ld (hl), de (1)
 1790 D1:DFE8 3E 1F -  -  	ld a, 01Fh
 1791 D1:DFEA CD 0A AD D1 	call InsertA															; ld (hl), de (2)
 1792 D1:DFEE 3E 00 -  -  	ld a, OutputIsInDE
 1793 D1:DFF0 32 BB E9 D1 	ld (ExprOutput2), a
 1794 D1:DFF4 C9 -  -  -  	ret
 1795 D1:DFF5 21 DD 2F 00 _:	ld hl, 0002FDDh
 1796 D1:DFF9 16 03 -  -  	ld d, 3
 1797 D1:DFFB ED 5C -  -  	mlt de
 1798 D1:DFFD 7B -  -  -  	ld a, e
 1799 D1:DFFE CD 70 1D 02 	call _SetHLUToA
 1800 D1:E002 C5 -  -  -  	push bc
 1801 D1:E003 D1 -  -  -  	pop de
 1802 D1:E004 CD 48 1D 02 	call _ChkBCIs0
 1803 D1:E008 3E 21 -  -  	ld a, 021h
 1804 D1:E00A 20 08 -  -  	jr nz, +_
 1805 D1:E00C 11 B7 ED 62 	ld de, 062EDB7h
 1806 D1:E010 C3 8B AC D1 	jp InsertDEHL															; or a \ sbc hl, hl \ ld (ix+*), hl
 1807 D1:E014 C3 87 AC D1 _:	jp InsertADEHL															; ld hl, * \ ld (ix+*), hl
 1808 D1:E018 -  -  -  -  StoVariableXXX:
 1809 D1:E018 DD 7E FC -  	ld a, (ix-4)
 1810 D1:E01B FE 03 -  -  	cp typeChainAns
 1811 D1:E01D 28 0A -  -  	jr z, +_
 1812 D1:E01F FE 01 -  -  	cp typeVariable
 1813 D1:E021 CA 49 E0 D1 	jp z, ++_
 1814 D1:E025 C3 70 AF D1 	jp UnknownError
 1815 D1:E029 CD 48 E1 D1 _:	call StoTestStoToListElement
 1816 D1:E02D C2 70 AF D1 	jp nz, UnknownError
 1817 D1:E031 59 -  -  -  	ld e, c
 1818 D1:E032 CD 6A AC D1 	call InsertIXE															; ld de, (ix+*)
 1819 D1:E036 3E ED -  -  	ld a, 0EDh
 1820 D1:E038 CD 0A AD D1 	call InsertA															; ld (hl), de (1)
 1821 D1:E03C 3E 1F -  -  	ld a, 01Fh
 1822 D1:E03E CD 0A AD D1 	call InsertA															; ld (hl), de (2)
 1823 D1:E042 3E 00 -  -  	ld a, OutputIsInDE
 1824 D1:E044 32 BB E9 D1 	ld (ExprOutput2), a
 1825 D1:E048 C9 -  -  -  	ret
 1826 D1:E049 CD 61 AC D1 _:	call InsertHIXC
 1827 D1:E04D 21 DD 2F 00 	ld hl, 0002FDDh
 1828 D1:E051 16 03 -  -  	ld d, 3
 1829 D1:E053 ED 5C -  -  	mlt de
 1830 D1:E055 7B -  -  -  	ld a, e
 1831 D1:E056 CD 70 1D 02 	call _SetHLUToA
 1832 D1:E05A C3 4C AC D1 	jp InsertHL																; ld ld (ix+*), hl
 1833 D1:E05E -  -  -  -  StoChainPushXXX:
 1834 D1:E05E DD 7E FC -  	ld a, (ix-4)
 1835 D1:E061 FE 03 -  -  	cp typeChainAns
 1836 D1:E063 C2 70 AF D1 _:	jp nz, UnknownError
 1837 D1:E067 CD 48 E1 D1 	call StoTestStoToListElement
 1838 D1:E06B 20 F6 -  -  	jr nz, -_
 1839 D1:E06D 21 D1 ED 1F 	ld hl, 01FEDD1h
 1840 D1:E071 CD 4C AC D1 	call InsertHL															; pop de \ ld (hl), de
 1841 D1:E075 3E 00 -  -  	ld a, OutputIsInDE
 1842 D1:E077 32 BB E9 D1 	ld (ExprOutput2), a
 1843 D1:E07B C9 -  -  -  	ret
 1844 D1:E07C -  -  -  -  StoChainAnsXXX:
 1845 D1:E07C DD 7E FC -  	ld a, (ix-4)
 1846 D1:E07F FE 01 -  -  	cp typeVariable
 1847 D1:E081 C2 17 AF D1 	jp nz, StoError
 1848 D1:E085 21 DD 2F 00 _:	ld hl, 0002FDDh
 1849 D1:E089 16 03 -  -  	ld d, 3
 1850 D1:E08B ED 5C -  -  	mlt de
 1851 D1:E08D 7B -  -  -  	ld a, e
 1852 D1:E08E CD 70 1D 02 	call _SetHLUToA
 1853 D1:E092 3A BA E9 D1 	ld a, (ExprOutput)
 1854 D1:E096 B7 -  -  -  	or a
 1855 D1:E097 20 02 -  -  	jr nz, $+4
 1856 D1:E099 26 1F -  -  	ld h, 01Fh
 1857 D1:E09B 32 BB E9 D1 	ld (ExprOutput2), a
 1858 D1:E09F C3 4C AC D1 	jp InsertHL																; ld (ix+*), hl/de
 1859 D1:E0A3 -  -  -  -  StoFunctionXXX:
 1860 D1:E0A3 DD 7E FC -  	ld a, (ix-4)
 1861 D1:E0A6 FE 03 -  -  	cp typeChainAns
 1862 D1:E0A8 28 0A -  -  	jr z, +_
 1863 D1:E0AA FE 01 -  -  	cp typeVariable
 1864 D1:E0AC CA DA E0 D1 	jp z, ++_
 1865 D1:E0B0 C3 70 AF D1 	jp UnknownError
 1866 D1:E0B4 CD 48 E1 D1 _:	call StoTestStoToListElement
 1867 D1:E0B8 C2 70 AF D1 	jp nz, UnknownError
 1868 D1:E0BC 79 -  -  -  	ld a, c
 1869 D1:E0BD 06 01 -  -  	ld b, OutputInDE
 1870 D1:E0BF FD CB C0 F6 	set need_push, (iy+fExpression1)
 1871 D1:E0C3 CD 36 AD D1 	call GetFunction
 1872 D1:E0C7 3E ED -  -  	ld a, 0EDh
 1873 D1:E0C9 CD 0A AD D1 	call InsertA															; ld (hl), de (1)
 1874 D1:E0CD 3E 1F -  -  	ld a, 01Fh
 1875 D1:E0CF CD 0A AD D1 	call InsertA															; ld (hl), de (2)
 1876 D1:E0D3 3E 00 -  -  	ld a, OutputIsInDE
 1877 D1:E0D5 32 BB E9 D1 	ld (ExprOutput2), a
 1878 D1:E0D9 C9 -  -  -  	ret
 1879 D1:E0DA 79 -  -  -  _:	ld a, c
 1880 D1:E0DB 06 02 -  -  	ld b, OutputInHL
 1881 D1:E0DD CD 36 AD D1 	call GetFunction
 1882 D1:E0E1 21 DD 2F 00 	ld hl, 0002FDDh
 1883 D1:E0E5 16 03 -  -  	ld d, 3
 1884 D1:E0E7 ED 5C -  -  	mlt de
 1885 D1:E0E9 7B -  -  -  	ld a, e
 1886 D1:E0EA CD 70 1D 02 	call _SetHLUToA
 1887 D1:E0EE C3 4C AC D1 	jp InsertHL																; ld (ix+*), hl
 1888 D1:E0F2 -  -  -  -  StoListXXX:
 1889 D1:E0F2 DD 7E FC -  	ld a, (ix-4)
 1890 D1:E0F5 FE 06 -  -  	cp typeOSList
 1891 D1:E0F7 C2 17 AF D1 	jp nz, StoError
 1892 D1:E0FB 3E 21 -  -  	ld a, 021h
 1893 D1:E0FD CD 0A AD D1 	call InsertA															; ld hl, *
 1894 D1:E101 CD 21 AD D1 	call InsertProgramPtrToDataOffset
 1895 D1:E105 2A AF E9 D1 	ld hl, (programDataDataPtr)
 1896 D1:E109 CD 4C AC D1 	call InsertHL															; ld hl, RANDOM
 1897 D1:E10D 3E 11 -  -  	ld a, 011h
 1898 D1:E10F D5 -  -  -  	push de
 1899 D1:E110 E1 -  -  -  	pop hl
 1900 D1:E111 CD 48 AC D1 	call InsertAHL															; ld de, OSList
 1901 D1:E115 3E 01 -  -  	ld a, 01h
 1902 D1:E117 CD 0A AD D1 	call InsertA															; ld bc, *
 1903 D1:E11B C5 -  -  -  	push bc
 1904 D1:E11C E1 -  -  -  	pop hl
 1905 D1:E11D 22 2F E1 D1 	ld (StartData), hl
 1906 D1:E121 ED 27 -  -  	ld hl, (hl)
 1907 D1:E123 E5 -  -  -  	push hl
 1908 D1:E124 C1 -  -  -  	pop bc
 1909 D1:E125 CD 4C AC D1 	call InsertHL															; ld bc, LENGTH
 1910 D1:E129 ED 5B AF E9 
              D1 -  -  -  	ld de, (programDataDataPtr)
 1911 D1:E12E -  -  -  -  StartData = $+1
 1912 D1:E12E 21 00 00 00 	ld hl, 0
 1913 D1:E132 23 -  -  -  	inc hl
 1914 D1:E133 23 -  -  -  	inc hl
 1915 D1:E134 23 -  -  -  	inc hl
 1916 D1:E135 ED B0 -  -  	ldir
 1917 D1:E137 ED 53 AF E9 
              D1 -  -  -  	ld (programDataDataPtr), de
 1918 D1:E13C 3E ED -  -  	ld a, 0EDh
 1919 D1:E13E CD 0A AD D1 	call InsertA															; ldir (1)
 1920 D1:E142 3E B0 -  -  	ld a, 0B0h
 1921 D1:E144 C3 0A AD D1 	jp InsertA																; ldir (2)
 1922 D1:E148 -  -  -  -  	
 1923 D1:E148 -  -  -  -  StoTestStoToListElement:
 1924 D1:E148 2A 9A E9 D1 	ld hl, (programPtr)
 1925 D1:E14C 2B -  -  -  	dec hl
 1926 D1:E14D 7E -  -  -  	ld a, (hl)
 1927 D1:E14E FE 27 -  -  	cp 027h
 1928 D1:E150 20 0B -  -  	jr nz, StoLastOpcodeNotHLHL
 1929 D1:E152 2B -  -  -  	dec hl
 1930 D1:E153 7E -  -  -  	ld a, (hl)
 1931 D1:E154 FE ED -  -  	cp 0EDh
 1932 D1:E156 20 05 -  -  	jr nz, StoLastOpcodeNotHLHL
 1933 D1:E158 22 9A E9 D1 	ld (programPtr), hl
 1934 D1:E15C C9 -  -  -  	ret
 1935 D1:E15D -  -  -  -  StoLastOpcodeNotHLHL:
 1936 D1:E15D 2A 9A E9 D1 	ld hl, (programPtr)
 1937 D1:E161 2B -  -  -  	dec hl
 1938 D1:E162 2B -  -  -  	dec hl
 1939 D1:E163 2B -  -  -  	dec hl
 1940 D1:E164 2B -  -  -  	dec hl
 1941 D1:E165 7E -  -  -  	ld a, (hl)
 1942 D1:E166 FE 2A -  -  	cp 02Ah
 1943 D1:E168 C0 -  -  -  	ret nz
 1944 D1:E169 36 21 -  -  	ld (hl), 021h
 1945 D1:E16B C9 -  -  -  	ret
 1946 D1:E16C 00 -  -  -  	nop
 1947 D1:E16D 00 -  -  -  	nop
 1948 D1:E16E 00 -  -  -  	nop
Listing for file "ICE.asm"
  447 D1:E16F -  -  -  -  #include "operators functions/function_for.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_for.asm"
    1 D1:E16F -  -  -  -  functionFor:
    2 D1:E16F 21 B7 E9 D1 	ld hl, amountOfEnds
    3 D1:E173 34 -  -  -  	inc (hl)
    4 D1:E174 3E 01 -  -  	ld a, 1
    5 D1:E176 32 B4 E9 D1 	ld (openedParensF), a
    6 D1:E17A FD 36 AF 00 	ld (iy+fFunction2), 0
    7 D1:E17E CD 28 10 02 	call _IncFetch
    8 D1:E182 D6 41 -  -  	sub tA
    9 D1:E184 DA F4 E3 D1 	jp c, functionForSmall
   10 D1:E188 FE 1B -  -  	cp ttheta+1-tA
   11 D1:E18A D2 F4 E3 D1 	jp nc, functionForSmall
   12 D1:E18E -  -  -  -  	; loop variable
   13 D1:E18E 47 -  -  -  	ld b, a
   14 D1:E18F 87 -  -  -  	add a, a
   15 D1:E190 80 -  -  -  	add a, b
   16 D1:E191 32 C9 E1 D1 	ld (ForVariable1), a
   17 D1:E195 6F -  -  -  	ld l, a
   18 D1:E196 E5 -  -  -  	push hl
   19 D1:E197 CD 28 10 02 		call _IncFetch
   20 D1:E19B DA 36 AF D1 _:		jp c, ErrorSyntax
   21 D1:E19F FE 2B -  -  		cp tComma
   22 D1:E1A1 C2 36 AF D1 		jp nz, ErrorSyntax
   23 D1:E1A5 CD 28 10 02 		call _IncFetch
   24 D1:E1A9 -  -  -  -  		; loop start point
   25 D1:E1A9 2A 9A E9 D1 		ld hl, (programPtr)
   26 D1:E1AD E5 -  -  -  		push hl
   27 D1:E1AE 21 C6 52 D0 			ld hl, tempArg1
   28 D1:E1B2 22 9A E9 D1 			ld (programPtr), hl
   29 D1:E1B6 CD B0 B2 D1 			call ParseExpression
   30 D1:E1BA FD CB BE 46 			bit triggered_a_comma, (iy+fExpression3)
   31 D1:E1BE FD CB BE 86 			res triggered_a_comma, (iy+fExpression3)
   32 D1:E1C2 CA 36 AF D1 			jp z, ErrorSyntax
   33 D1:E1C6 -  -  -  -  ForVariable1 = $+3
   34 D1:E1C6 21 DD 2F 00 			ld hl, 0002FDDh
   35 D1:E1CA CD 4C AC D1 			call InsertHL										; ld (ix+*), hl
   36 D1:E1CE CD 28 10 02 			call _IncFetch
   37 D1:E1D2 38 C7 -  -  			jr c, -_
   38 D1:E1D4 2A 9A E9 D1 			ld hl, (programPtr)
   39 D1:E1D8 11 C6 52 D0 			ld de, tempArg1
   40 D1:E1DC B7 -  -  -  			or a
   41 D1:E1DD ED 52 -  -  			sbc hl, de
   42 D1:E1DF EB -  -  -  			ex de, hl
   43 D1:E1E0 E1 -  -  -  		pop hl
   44 D1:E1E1 22 9A E9 D1 		ld (programPtr), hl
   45 D1:E1E5 D5 -  -  -  		push de
   46 D1:E1E6 -  -  -  -  			; loop end point
   47 D1:E1E6 CD B0 B2 D1 			call ParseExpression
   48 D1:E1EA FD CB C0 66 			bit output_is_number, (iy+fExpression1)
   49 D1:E1EE 20 14 -  -  			jr nz, ForEndPointIsNumber
   50 D1:E1F0 -  -  -  -  ForEndPointIsExpression:
   51 D1:E1F0 3E 22 -  -  			ld a, 022h
   52 D1:E1F2 CD 0A AD D1 			call InsertA										; ld (******), hl
   53 D1:E1F6 2A 9A E9 D1 			ld hl, (programPtr)
   54 D1:E1FA 22 EC E2 D1 			ld (ForEndPointExpression), hl
   55 D1:E1FE CD 4C AC D1 			call InsertHL										; ld (RANDOM), hl
   56 D1:E202 18 17 -  -  			jr ForGetStep
   57 D1:E204 -  -  -  -  ForEndPointIsNumber:
   58 D1:E204 FD CB AF D6 			set end_point_is_number, (iy+fFunction2)
   59 D1:E208 2A 9A E9 D1 			ld hl, (programPtr)
   60 D1:E20C 2B -  -  -  			dec hl
   61 D1:E20D 2B -  -  -  			dec hl
   62 D1:E20E 2B -  -  -  			dec hl
   63 D1:E20F ED 17 -  -  			ld de, (hl)
   64 D1:E211 2B -  -  -  			dec hl
   65 D1:E212 22 9A E9 D1 			ld (programPtr), hl
   66 D1:E216 ED 53 FA E2 
              D1 -  -  -  			ld (ForFixedEndPoint), de
   67 D1:E21B -  -  -  -  ForGetStep:
   68 D1:E21B FD CB BE 46 			bit triggered_a_comma, (iy+fExpression3)
   69 D1:E21F FD CB BE 86 			res triggered_a_comma, (iy+fExpression3)
   70 D1:E223 20 0B -  -  			jr nz, +_
   71 D1:E225 -  -  -  -  			; loop step
   72 D1:E225 FD CB AF CE 			set for_step_is_number, (iy+fFunction2)
   73 D1:E229 21 01 00 00 			ld hl, 1
   74 D1:E22D E5 -  -  -  			push hl
   75 D1:E22E 18 76 -  -  				jr ForStart
   76 D1:E230 CD 28 10 02 _:			call _IncFetch
   77 D1:E234 DA 36 AF D1 			jp c, ErrorSyntax
   78 D1:E238 FE B0 -  -  			cp tChs
   79 D1:E23A 20 0C -  -  			jr nz, +_
   80 D1:E23C FD CB AF C6 			set negative_for_step, (iy+fFunction2)
   81 D1:E240 CD 28 10 02 			call _IncFetch
   82 D1:E244 DA 36 AF D1 			jp c, ErrorSyntax
   83 D1:E248 FE 41 -  -  _:			cp tA
   84 D1:E24A 38 34 -  -  			jr c, ForGetStepNumber
   85 D1:E24C FE 5C -  -  			cp ttheta+1
   86 D1:E24E D2 80 E2 D1 			jp nc, ForGetStepNumber
   87 D1:E252 -  -  -  -  ForGetStepVariable:
   88 D1:E252 FD CB AF 8E 			res for_step_is_number, (iy+fFunction2)
   89 D1:E256 CD 2C 10 02 			call _CurFetch
   90 D1:E25A D6 41 -  -  			sub tA
   91 D1:E25C 4F -  -  -  			ld c, a
   92 D1:E25D CD 61 AC D1 			call InsertHIXC										; ld hl, (ix+*)
   93 D1:E261 CD C0 0F 02 			call _NxtFetch
   94 D1:E265 DA 36 AF D1 			jp c, ErrorSyntax
   95 D1:E269 FE 3F -  -  			cp tEnter
   96 D1:E26B C2 36 AF D1 			jp nz, ErrorSyntax
   97 D1:E26F 3E 22 -  -  			ld a, 022h
   98 D1:E271 CD 0A AD D1 			call InsertA										; ld (*), hl
   99 D1:E275 2A 9A E9 D1 			ld hl, (programPtr)
  100 D1:E279 E5 -  -  -  			push hl
  101 D1:E27A CD 4C AC D1 				call InsertHL									; ld (RANDOM), hl
  102 D1:E27E 18 26 -  -  				jr ForStart
  103 D1:E280 -  -  -  -  ForGetStepNumber:
  104 D1:E280 FD CB AF CE 			set for_step_is_number, (iy+fFunction2)
  105 D1:E284 CD B0 B2 D1 			call ParseExpression
  106 D1:E288 FD CB BE 46 			bit triggered_a_comma, (iy+fExpression3)
  107 D1:E28C 20 BA -  -  			jr nz, -_
  108 D1:E28E FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  109 D1:E292 CA 36 AF D1 			jp z, ErrorSyntax
  110 D1:E296 2A 9A E9 D1 			ld hl, (programPtr)
  111 D1:E29A 2B -  -  -  			dec hl
  112 D1:E29B 2B -  -  -  			dec hl
  113 D1:E29C 2B -  -  -  			dec hl
  114 D1:E29D 2B -  -  -  			dec hl
  115 D1:E29E 22 9A E9 D1 			ld (programPtr), hl
  116 D1:E2A2 23 -  -  -  			inc hl
  117 D1:E2A3 ED 27 -  -  			ld hl, (hl)
  118 D1:E2A5 E5 -  -  -  			push hl
  119 D1:E2A6 -  -  -  -  ForStart:
  120 D1:E2A6 E1 -  -  -  			pop hl
  121 D1:E2A7 D1 -  -  -  		pop de
  122 D1:E2A8 E5 -  -  -  		push hl
  123 D1:E2A9 2A 9A E9 D1 			ld hl, (programPtr)
  124 D1:E2AD 19 -  -  -  			add hl, de
  125 D1:E2AE E5 -  -  -  			push hl
  126 D1:E2AF D5 -  -  -  				push de
  127 D1:E2B0 C1 -  -  -  				pop bc
  128 D1:E2B1 ED 5B 9A E9 
              D1 -  -  -  				ld de, (programPtr)
  129 D1:E2B6 21 C6 52 D0 				ld hl, tempArg1
  130 D1:E2BA ED B0 -  -  				ldir
  131 D1:E2BC ED 53 9A E9 
              D1 -  -  -  				ld (programPtr), de
  132 D1:E2C1 FD CB AF 56 				bit end_point_is_number, (iy+fFunction2)
  133 D1:E2C5 20 30 -  -  				jr nz, ForInsertEndPointNumber
  134 D1:E2C7 -  -  -  -  ForInsertEndPointExpression:
  135 D1:E2C7 3E B7 -  -  				ld a, 0B7h
  136 D1:E2C9 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  137 D1:E2CD 20 08 -  -  				jr nz, +_
  138 D1:E2CF FD CB AF 56 				bit end_point_is_number, (iy+fFunction2)
  139 D1:E2D3 20 02 -  -  				jr nz, +_
  140 D1:E2D5 3E 37 -  -  				ld a, 037h
  141 D1:E2D7 32 09 E3 D1 _:				ld (ForSetCarryFlag), a
  142 D1:E2DB 3E 11 -  -  				ld a, 011h
  143 D1:E2DD CD 0A AD D1 				call InsertA										; ld de, *
  144 D1:E2E1 2A 9A E9 D1 				ld hl, (programPtr)
  145 D1:E2E5 11 81 7C FC 				ld de, UserMem-program
  146 D1:E2E9 19 -  -  -  				add hl, de
  147 D1:E2EA EB -  -  -  				ex de, hl
  148 D1:E2EB -  -  -  -  ForEndPointExpression = $+1
  149 D1:E2EB 21 00 00 00 				ld hl, 0
  150 D1:E2EF ED 1F -  -  				ld (hl), de
  151 D1:E2F1 CD 4C AC D1 				call InsertHL										; ld de, RANDOM
  152 D1:E2F5 18 11 -  -  				jr ForSkip
  153 D1:E2F7 -  -  -  -  ForInsertEndPointNumber:
  154 D1:E2F7 3E 11 -  -  				ld a, 011h
  155 D1:E2F9 -  -  -  -  ForFixedEndPoint = $+1
  156 D1:E2F9 21 00 00 00 				ld hl, 0
  157 D1:E2FD FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  158 D1:E301 20 01 -  -  				jr nz, +_
  159 D1:E303 23 -  -  -  				inc hl
  160 D1:E304 CD 48 AC D1 _:				call InsertAHL										; ld de, *
  161 D1:E308 -  -  -  -  ForSkip:
  162 D1:E308 -  -  -  -  ForSetCarryFlag = $+1
  163 D1:E308 21 B7 ED 52 				ld hl, 052EDB7h
  164 D1:E30C CD 4C AC D1 				call InsertHL										; or a \ sbc hl, de
  165 D1:E310 3E D2 -  -  				ld a, 0D2h
  166 D1:E312 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  167 D1:E316 28 02 -  -  				jr z, +_
  168 D1:E318 C6 08 -  -  				add a, 8
  169 D1:E31A CD 0A AD D1 _:				call InsertA										; jp [n]c, *
  170 D1:E31E 2A 9A E9 D1 				ld hl, (programPtr)
  171 D1:E322 E5 -  -  -  				push hl
  172 D1:E323 CD 4C AC D1 					call InsertHL									; jp [n]c, RANDOM
  173 D1:E327 FD 46 AF -  					ld b, (iy+fFunction2)
  174 D1:E32A C5 -  -  -  					push bc
  175 D1:E32B CD 95 AA D1 						call ParseProgramUntilEnd
  176 D1:E32F C1 -  -  -  					pop bc
  177 D1:E330 FD 70 AF -  					ld (iy+fFunction2), b
  178 D1:E333 FE D0 -  -  					cp tElse
  179 D1:E335 CA 36 AF D1 					jp z, ErrorSyntax
  180 D1:E339 DD 21 00 00 
              00 -  -  -  					ld ix, 0
  181 D1:E33E DD 39 -  -  					add ix, sp
  182 D1:E340 DD 7E 09 -  					ld a, (ix+9)
  183 D1:E343 21 DD 27 00 					ld hl, 00027DDh
  184 D1:E347 CD 70 1D 02 					call _SetHLUToA
  185 D1:E34B CD 4C AC D1 					call InsertHL									; ld hl, (ix+*)
  186 D1:E34F C1 -  -  -  				pop bc
  187 D1:E350 D1 -  -  -  			pop de
  188 D1:E351 E1 -  -  -  		pop hl
  189 D1:E352 D5 -  -  -  		push de
  190 D1:E353 C5 -  -  -  			push bc
  191 D1:E354 FD CB AF 4E 				bit for_step_is_number, (iy+fFunction2)
  192 D1:E358 28 19 -  -  				jr z, InsertVariableChange
  193 D1:E35A -  -  -  -  InsertNumberChange:
  194 D1:E35A EB -  -  -  				ex de, hl
  195 D1:E35B 3E 01 -  -  				ld a, 1
  196 D1:E35D 32 BA E9 D1 				ld (ExprOutput), a
  197 D1:E361 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  198 D1:E365 28 06 -  -  				jr z, $+8
  199 D1:E367 CD 79 D3 D1 				call SubChainAnsNumber
  200 D1:E36B 18 04 -  -  				jr $+6
  201 D1:E36D CD 41 D5 D1 				call AddChainAnsNumber
  202 D1:E371 18 29 -  -  				jr InsertStop
  203 D1:E373 -  -  -  -  InsertVariableChange:
  204 D1:E373 EB -  -  -  				ex de, hl
  205 D1:E374 3E 11 -  -  				ld a, 011h
  206 D1:E376 CD 0A AD D1 				call InsertA										; ld de, *
  207 D1:E37A 2A 9A E9 D1 				ld hl, (programPtr)
  208 D1:E37E 01 81 7C FC 				ld bc, UserMem-program
  209 D1:E382 09 -  -  -  				add hl, bc
  210 D1:E383 EB -  -  -  				ex de, hl
  211 D1:E384 ED 1F -  -  				ld (hl), de
  212 D1:E386 CD 4C AC D1 				call InsertHL										; ld de, RANDOM
  213 D1:E38A 3E 19 -  -  				ld a, 019h
  214 D1:E38C 21 B7 ED 52 				ld hl, 052EDB7h
  215 D1:E390 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  216 D1:E394 C4 4C AC D1 				call nz, InsertHL									; or a \ sbc hl, de
  217 D1:E398 CC 0A AD D1 				call z, InsertA										; add hl, de
  218 D1:E39C -  -  -  -  InsertStop:
  219 D1:E39C C1 -  -  -  			pop bc
  220 D1:E39D D1 -  -  -  		pop de
  221 D1:E39E E1 -  -  -  	pop hl
  222 D1:E39F 7D -  -  -  	ld a, l
  223 D1:E3A0 21 DD 2F 00 	ld hl, 0002FDDh
  224 D1:E3A4 CD 70 1D 02 	call _SetHLUToA
  225 D1:E3A8 CD 4C AC D1 	call InsertHL													; ld (ix+*), hl
  226 D1:E3AC B7 -  -  -  	or a
  227 D1:E3AD ED 52 -  -  	sbc hl, de
  228 D1:E3AF 7C -  -  -  	ld a, h
  229 D1:E3B0 B7 -  -  -  	or a
  230 D1:E3B1 20 07 -  -  	jr nz, ForBigLoop
  231 D1:E3B3 7D -  -  -  	ld a, l
  232 D1:E3B4 2F -  -  -  	cpl
  233 D1:E3B5 3D -  -  -  	dec a
  234 D1:E3B6 FE 80 -  -  	cp %10000000
  235 D1:E3B8 30 15 -  -  	jr nc, ForSmallLoop
  236 D1:E3BA -  -  -  -  ForBigLoop:
  237 D1:E3BA 3E C3 -  -  	ld a, 0C3h
  238 D1:E3BC FD CB AF 46 	bit negative_for_step, (iy+fFunction2)
  239 D1:E3C0 28 02 -  -  	jr z, $+4
  240 D1:E3C2 3E D2 -  -  	ld a, 0D2h
  241 D1:E3C4 21 81 7C FC 	ld hl, UserMem-program
  242 D1:E3C8 19 -  -  -  	add hl, de
  243 D1:E3C9 CD 48 AC D1 	call InsertAHL													; jp [nc], ******
  244 D1:E3CD 18 1A -  -  	jr ForLoopInsert
  245 D1:E3CF -  -  -  -  ForSmallLoop:
  246 D1:E3CF DD 6F -  -  	ld ixl, a
  247 D1:E3D1 3E 18 -  -  	ld a, 018h
  248 D1:E3D3 FD CB AF 46 	bit negative_for_step, (iy+fFunction2)
  249 D1:E3D7 28 02 -  -  	jr z, $+4
  250 D1:E3D9 3E 30 -  -  	ld a, 030h
  251 D1:E3DB CD 0A AD D1 	call InsertA													; jr [nc], **
  252 D1:E3DF DD 7D -  -  	ld a, ixl
  253 D1:E3E1 CD 0A AD D1 	call InsertA													; jr [nc], **
  254 D1:E3E5 2A 9A E9 D1 	ld hl, (programPtr)
  255 D1:E3E9 -  -  -  -  ForLoopInsert:
  256 D1:E3E9 11 81 7C FC 	ld de, UserMem-program
  257 D1:E3ED 19 -  -  -  	add hl, de
  258 D1:E3EE EB -  -  -  	ex de, hl
  259 D1:E3EF C5 -  -  -  	push bc
  260 D1:E3F0 E1 -  -  -  	pop hl
  261 D1:E3F1 ED 1F -  -  	ld (hl), de
  262 D1:E3F3 C9 -  -  -  	ret
  263 D1:E3F4 -  -  -  -  	
  264 D1:E3F4 -  -  -  -  functionForSmall:
  265 D1:E3F4 CD B0 B2 D1 	call ParseExpression
  266 D1:E3F8 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  267 D1:E3FC 28 10 -  -  	jr z, +_
  268 D1:E3FE 2A 9A E9 D1 	ld hl, (programPtr)
  269 D1:E402 2B -  -  -  	dec hl
  270 D1:E403 2B -  -  -  	dec hl
  271 D1:E404 22 9A E9 D1 	ld (programPtr), hl
  272 D1:E408 2B -  -  -  	dec hl
  273 D1:E409 2B -  -  -  	dec hl
  274 D1:E40A 36 06 -  -  	ld (hl), 06h													; ld b, *
  275 D1:E40C 18 06 -  -  	jr ++_
  276 D1:E40E 3E 45 -  -  _:	ld a, 045h
  277 D1:E410 CD 0A AD D1 	call InsertA													; ld b, l
  278 D1:E414 2A 9A E9 D1 _:	ld hl, (programPtr)
  279 D1:E418 E5 -  -  -  	push hl
  280 D1:E419 3E C5 -  -  		ld a, 0C5h
  281 D1:E41B CD 0A AD D1 		call InsertA												; push bc
  282 D1:E41F CD 95 AA D1 		call ParseProgramUntilEnd
  283 D1:E423 3E C1 -  -  		ld a, 0C1h
  284 D1:E425 CD 0A AD D1 		call InsertA												; pop bc
  285 D1:E429 D1 -  -  -  	pop de
  286 D1:E42A 2A 9A E9 D1 	ld hl, (programPtr)
  287 D1:E42E B7 -  -  -  	or a
  288 D1:E42F ED 52 -  -  	sbc hl, de
  289 D1:E431 7C -  -  -  	ld a, h
  290 D1:E432 B7 -  -  -  	or a
  291 D1:E433 C2 88 AF D1 _:	jp nz, ErrorTooLargeLoop
  292 D1:E437 7D -  -  -  	ld a, l
  293 D1:E438 2F -  -  -  	cpl
  294 D1:E439 3D -  -  -  	dec a
  295 D1:E43A FE 80 -  -  	cp %10000000
  296 D1:E43C DA 33 E4 D1 	jp c, -_
  297 D1:E440 47 -  -  -  	ld b, a
  298 D1:E441 3E 10 -  -  	ld a, 010h
  299 D1:E443 CD 0A AD D1 	call InsertA													; djnz *
  300 D1:E447 78 -  -  -  	ld a, b
  301 D1:E448 C3 0A AD D1 	jp InsertA														; djnz *
Listing for file "ICE.asm"
  448 D1:E44C -  -  -  -  #include "operators functions/function_C.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_C.asm"
    1 D1:E44C -  -  -  -  CFunction0Args:
    2 D1:E44C FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
    3 D1:E450 C2 36 AF D1 	jp nz, ErrorSyntax
    4 D1:E454 06 00 -  -  	ld b, 0
    5 D1:E456 -  -  -  -  CInsertCallPops:
    6 D1:E456 FD CB B0 CE 	set modified_iy, (iy+fAlways1)
    7 D1:E45A 21 C7 E9 D1 	ld hl, usedCroutines
    8 D1:E45E -  -  -  -  CFunctionArgsSMC = $+1
    9 D1:E45E 11 00 00 00 	ld de, 0
   10 D1:E462 7B -  -  -  	ld a, e
   11 D1:E463 B7 -  -  -  	or a
   12 D1:E464 20 0B -  -  	jr nz, +_
   13 D1:E466 E5 -  -  -  	push hl
   14 D1:E467 21 2E 27 E5 		ld hl, 0E5272Eh
   15 D1:E46B CD 4C AC D1 		call InsertHL														; ld l, lcdBpp8 \ push hl
   16 D1:E46F 04 -  -  -  		inc b
   17 D1:E470 E1 -  -  -  	pop hl
   18 D1:E471 19 -  -  -  _:	add hl, de
   19 D1:E472 5E -  -  -  	ld e, (hl)
   20 D1:E473 16 04 -  -  	ld d, 4
   21 D1:E475 ED 5C -  -  	mlt de
   22 D1:E477 21 F6 A8 D1 	ld hl, CData2-CData+UserMem-4
   23 D1:E47B 19 -  -  -  	add hl, de
   24 D1:E47C CD 5D AC D1 	call InsertCallHL														; call *
   25 D1:E480 78 -  -  -  	ld a, b
   26 D1:E481 B7 -  -  -  	or a
   27 D1:E482 C8 -  -  -  	ret z
   28 D1:E483 3E E1 -  -  	ld a, 0E1h
   29 D1:E485 CD 0A AD D1 _:	call InsertA
   30 D1:E489 10 FA -  -  	djnz -_
   31 D1:E48B C9 -  -  -  	ret																		; pop hl
   32 D1:E48C -  -  -  -  	
   33 D1:E48C -  -  -  -  CFunction1Arg:
   34 D1:E48C FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   35 D1:E490 CA 36 AF D1 	jp z, ErrorSyntax
   36 D1:E494 2A 9A E9 D1 	ld hl, (programPtr)
   37 D1:E498 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
   38 D1:E49C CD BE AC D1 	call CGetArgumentLast
   39 D1:E4A0 06 01 -  -  	ld b, 1
   40 D1:E4A2 18 B2 -  -  	jr CInsertCallPops
   41 D1:E4A4 -  -  -  -  		
   42 D1:E4A4 -  -  -  -  CFunction2Args:
   43 D1:E4A4 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   44 D1:E4A8 CA 36 AF D1 	jp z, ErrorSyntax
   45 D1:E4AC 2A 9A E9 D1 	ld hl, (programPtr)
   46 D1:E4B0 22 C2 E4 D1 	ld (CFunction2ArgsSMC2), hl
   47 D1:E4B4 21 C6 52 D0 	ld hl, tempArg1
   48 D1:E4B8 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
   49 D1:E4BC CD C2 AC D1 	call CGetArgument
   50 D1:E4C0 E5 -  -  -  	push hl
   51 D1:E4C1 -  -  -  -  CFunction2ArgsSMC2 = $+1
   52 D1:E4C1 21 00 00 00 		ld hl, 0
   53 D1:E4C5 FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
   54 D1:E4C9 CD BE AC D1 		call CGetArgumentLast
   55 D1:E4CD ED 5B 9A E9 
              D1 -  -  -  		ld de, (programPtr)
   56 D1:E4D2 E1 -  -  -  	pop hl
   57 D1:E4D3 01 C6 52 D0 	ld bc, tempArg1
   58 D1:E4D7 CD C5 E7 D1 	call CCheckIfPrevArgIsSame
   59 D1:E4DB CD 17 AD D1 	call CAddArgument
   60 D1:E4DF ED 53 9A E9 
              D1 -  -  -  	ld (programPtr), de
   61 D1:E4E4 06 02 -  -  	ld b, 2
   62 D1:E4E6 C3 56 E4 D1 	jp CInsertCallPops
   63 D1:E4EA -  -  -  -  	
   64 D1:E4EA -  -  -  -  CFunction3Args:
   65 D1:E4EA FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
   66 D1:E4EE CA 36 AF D1 	jp z, ErrorSyntax
   67 D1:E4F2 2A 9A E9 D1 	ld hl, (programPtr)
   68 D1:E4F6 22 1F E5 D1 	ld (CFunction3ArgsSMC2), hl
   69 D1:E4FA 21 C6 52 D0 	ld hl, tempArg1
   70 D1:E4FE FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
   71 D1:E502 CD C2 AC D1 	call CGetArgument
   72 D1:E506 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   73 D1:E50A F5 -  -  -  	push af
   74 D1:E50B FD CB C0 7E 		bit output_is_string, (iy+fExpression1)
   75 D1:E50F F5 -  -  -  		push af
   76 D1:E510 E5 -  -  -  			push hl
   77 D1:E511 21 AE 56 D0 				ld hl, tempArg2
   78 D1:E515 FD CB B0 5E 				bit arg2_is_small, (iy+fFunction1)
   79 D1:E519 CD C2 AC D1 				call CGetArgument
   80 D1:E51D E5 -  -  -  				push hl
   81 D1:E51E -  -  -  -  CFunction3ArgsSMC2 = $+1
   82 D1:E51E 21 00 00 00 					ld hl, 0
   83 D1:E522 FD CB B0 56 					bit arg3_is_small, (iy+fFunction1)
   84 D1:E526 CD BE AC D1 					call CGetArgumentLast
   85 D1:E52A ED 5B 9A E9 
              D1 -  -  -  					ld de, (programPtr)
   86 D1:E52F E1 -  -  -  				pop hl
   87 D1:E530 01 AE 56 D0 				ld bc, tempArg2
   88 D1:E534 CD C5 E7 D1 				call CCheckIfPrevArgIsSame
   89 D1:E538 CD 17 AD D1 				call CAddArgument
   90 D1:E53C E1 -  -  -  			pop hl
   91 D1:E53D 01 C6 52 D0 			ld bc, tempArg1
   92 D1:E541 CD C5 E7 D1 			call CCheckIfPrevArgIsSame
   93 D1:E545 B7 -  -  -  			or a
   94 D1:E546 ED 42 -  -  			sbc hl, bc
   95 D1:E548 E5 -  -  -  			push hl
   96 D1:E549 C1 -  -  -  			pop bc
   97 D1:E54A 21 C6 52 D0 			ld hl, tempArg1
   98 D1:E54E ED A0 -  -  			ldi
   99 D1:E550 F1 -  -  -  		pop af
  100 D1:E551 28 0B -  -  		jr z, +_
  101 D1:E553 E5 -  -  -  		push hl
  102 D1:E554 2A A6 E9 D1 			ld hl, (programDataOffsetPtr)
  103 D1:E558 2B -  -  -  			dec hl
  104 D1:E559 2B -  -  -  			dec hl
  105 D1:E55A 2B -  -  -  			dec hl
  106 D1:E55B ED 1F -  -  			ld (hl), de
  107 D1:E55D E1 -  -  -  		pop hl
  108 D1:E55E ED B0 -  -  _:		ldir
  109 D1:E560 ED 53 9A E9 
              D1 -  -  -  		ld (programPtr), de
  110 D1:E565 06 03 -  -  		ld b, 3
  111 D1:E567 CD 56 E4 D1 		call CInsertCallPops
  112 D1:E56B 3A 5F E4 D1 		ld a, (CFunctionArgsSMC)
  113 D1:E56F FE 3B -  -  		cp 59
  114 D1:E571 28 0C -  -  		jr z, CInsertSprite
  115 D1:E573 FE 3C -  -  		cp 60
  116 D1:E575 28 08 -  -  		jr z, CInsertSprite
  117 D1:E577 F1 -  -  -  	pop af
  118 D1:E578 C9 -  -  -  	ret
  119 D1:E579 -  -  -  -  	
  120 D1:E579 -  -  -  -  CInsertSpriteScaled:
  121 D1:E579 01 F3 FF FF 		ld bc, -13
  122 D1:E57D 18 04 -  -  		jr +_
  123 D1:E57F -  -  -  -  CInsertSprite:
  124 D1:E57F 01 F5 FF FF 		ld bc, -11
  125 D1:E583 F1 -  -  -  _:	pop af
  126 D1:E584 2A 9A E9 D1 	ld hl, (programPtr)
  127 D1:E588 28 1B -  -  	jr z, +_
  128 D1:E58A 09 -  -  -  	add hl, bc
  129 D1:E58B E5 -  -  -  	push hl
  130 D1:E58C ED 27 -  -  		ld hl, (hl)
  131 D1:E58E E5 -  -  -  		push hl
  132 D1:E58F D1 -  -  -  		pop de
  133 D1:E590 29 -  -  -  		add hl, hl
  134 D1:E591 19 -  -  -  		add hl, de
  135 D1:E592 ED 5B 30 EA 
              D0 -  -  -  		ld de, (PrevProgramPtr)
  136 D1:E597 19 -  -  -  		add hl, de
  137 D1:E598 11 81 7C FC 		ld de, UserMem - program
  138 D1:E59C 19 -  -  -  		add hl, de
  139 D1:E59D EB -  -  -  		ex de, hl
  140 D1:E59E E1 -  -  -  	pop hl
  141 D1:E59F ED 1F -  -  	ld (hl), de
  142 D1:E5A1 2B -  -  -  	dec hl
  143 D1:E5A2 36 2A -  -  	ld (hl), 02Ah															; ld hl, (XXXXXX)
  144 D1:E5A4 C9 -  -  -  	ret
  145 D1:E5A5 03 -  -  -  _:	inc bc
  146 D1:E5A6 03 -  -  -  	inc bc
  147 D1:E5A7 03 -  -  -  	inc bc
  148 D1:E5A8 09 -  -  -  	add hl, bc
  149 D1:E5A9 22 9A E9 D1 	ld (programPtr), hl
  150 D1:E5AD 23 -  -  -  	inc hl
  151 D1:E5AE 23 -  -  -  	inc hl
  152 D1:E5AF ED 27 -  -  	ld hl, (hl)
  153 D1:E5B1 E5 -  -  -  	push hl
  154 D1:E5B2 3E E5 -  -  		ld a, 0E5h
  155 D1:E5B4 CD 0A AD D1 		call InsertA														; push hl
  156 D1:E5B8 3E D1 -  -  		ld a, 0D1h
  157 D1:E5BA 21 29 19 11 		ld hl, 0111929h
  158 D1:E5BE CD 48 AC D1 		call InsertAHL														; pop de \ add hl, hl \ add hl, de \ ld de, ******
  159 D1:E5C2 2A 30 EA D0 		ld hl, (PrevProgramPtr)
  160 D1:E5C6 11 81 7C FC 		ld de, UserMem - program
  161 D1:E5CA 19 -  -  -  		add hl, de
  162 D1:E5CB CD 4C AC D1 		call InsertHL														; ld de, XXXXXX
  163 D1:E5CF 3E 19 -  -  		ld a, 019h
  164 D1:E5D1 21 ED 27 E5 		ld hl, 0E527EDh
  165 D1:E5D5 CD 48 AC D1 		call InsertAHL														; add hl, de \ ld hl, (hl) \ push hl
  166 D1:E5D9 E1 -  -  -  	pop hl
  167 D1:E5DA CD 5D AC D1 	call InsertCallHL														; call ******
  168 D1:E5DE 21 E1 E1 E1 	ld hl, 0E1E1E1h
  169 D1:E5E2 CD 4C AC D1 	call InsertHL															; pop hl \ pop hl \ pop hl
  170 D1:E5E6 3A 5F E4 D1 	ld a, (CFunctionArgsSMC)
  171 D1:E5EA FE 3E -  -  	cp 62
  172 D1:E5EC D8 -  -  -  	ret c
  173 D1:E5ED 3E E1 -  -  	ld a, 0E1h
  174 D1:E5EF CD 0A AD D1 	call InsertA															; pop hl
  175 D1:E5F3 C3 0A AD D1 	jp InsertA																; pop hl
  176 D1:E5F7 -  -  -  -  	
  177 D1:E5F7 -  -  -  -  CFunction4Args:
  178 D1:E5F7 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
  179 D1:E5FB CA 36 AF D1 	jp z, ErrorSyntax
  180 D1:E5FF 2A 9A E9 D1 	ld hl, (programPtr)
  181 D1:E603 22 2F E6 D1 	ld (CFunction4ArgsSMC2), hl
  182 D1:E607 21 C6 52 D0 	ld hl, tempArg1
  183 D1:E60B FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  184 D1:E60F CD C2 AC D1 	call CGetArgument
  185 D1:E613 E5 -  -  -  	push hl
  186 D1:E614 21 AE 56 D0 		ld hl, tempArg2
  187 D1:E618 FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
  188 D1:E61C CD C2 AC D1 		call CGetArgument
  189 D1:E620 E5 -  -  -  		push hl
  190 D1:E621 21 96 5A D0 			ld hl, tempArg3
  191 D1:E625 FD CB B0 56 			bit arg3_is_small, (iy+fFunction1)
  192 D1:E629 CD C2 AC D1 			call CGetArgument
  193 D1:E62D E5 -  -  -  			push hl
  194 D1:E62E -  -  -  -  CFunction4ArgsSMC2 = $+1
  195 D1:E62E 21 00 00 00 				ld hl, 0
  196 D1:E632 FD CB B0 4E 				bit arg4_is_small, (iy+fFunction1)
  197 D1:E636 CD BE AC D1 				call CGetArgumentLast
  198 D1:E63A ED 5B 9A E9 
              D1 -  -  -  				ld de, (programPtr)
  199 D1:E63F E1 -  -  -  			pop hl
  200 D1:E640 01 96 5A D0 			ld bc, tempArg3
  201 D1:E644 CD C5 E7 D1 			call CCheckIfPrevArgIsSame
  202 D1:E648 CD 17 AD D1 			call CAddArgument
  203 D1:E64C E1 -  -  -  		pop hl
  204 D1:E64D 01 AE 56 D0 		ld bc, tempArg2
  205 D1:E651 CD C5 E7 D1 		call CCheckIfPrevArgIsSame
  206 D1:E655 CD 17 AD D1 		call CAddArgument
  207 D1:E659 E1 -  -  -  	pop hl
  208 D1:E65A 01 C6 52 D0 	ld bc, tempArg1
  209 D1:E65E CD C5 E7 D1 	call CCheckIfPrevArgIsSame
  210 D1:E662 CD 17 AD D1 	call CAddArgument
  211 D1:E666 ED 53 9A E9 
              D1 -  -  -  	ld (programPtr), de
  212 D1:E66B 06 04 -  -  	ld b, 4
  213 D1:E66D C3 56 E4 D1 	jp CInsertCallPops
  214 D1:E671 -  -  -  -  	
  215 D1:E671 -  -  -  -  CFunction5Args:
  216 D1:E671 FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
  217 D1:E675 CA 36 AF D1 	jp z, ErrorSyntax
  218 D1:E679 2A 9A E9 D1 	ld hl, (programPtr)
  219 D1:E67D 22 BB E6 D1 	ld (CFunction5ArgsSMC2), hl
  220 D1:E681 21 C6 52 D0 	ld hl, tempArg1
  221 D1:E685 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  222 D1:E689 CD C2 AC D1 	call CGetArgument
  223 D1:E68D FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  224 D1:E691 F5 -  -  -  	push af
  225 D1:E692 E5 -  -  -  		push hl
  226 D1:E693 21 AE 56 D0 			ld hl, tempArg2
  227 D1:E697 FD CB B0 5E 			bit arg2_is_small, (iy+fFunction1)
  228 D1:E69B CD C2 AC D1 			call CGetArgument
  229 D1:E69F E5 -  -  -  			push hl
  230 D1:E6A0 21 96 5A D0 				ld hl, tempArg3
  231 D1:E6A4 FD CB B0 56 				bit arg3_is_small, (iy+fFunction1)
  232 D1:E6A8 CD C2 AC D1 				call CGetArgument
  233 D1:E6AC E5 -  -  -  				push hl
  234 D1:E6AD 21 7E 5E D0 					ld hl, tempArg4
  235 D1:E6B1 FD CB B0 4E 					bit arg4_is_small, (iy+fFunction1)
  236 D1:E6B5 CD C2 AC D1 					call CGetArgument
  237 D1:E6B9 E5 -  -  -  					push hl
  238 D1:E6BA -  -  -  -  CFunction5ArgsSMC2 = $+1
  239 D1:E6BA 21 00 00 00 						ld hl, 0
  240 D1:E6BE FD CB B0 46 						bit arg5_is_small, (iy+fFunction1)
  241 D1:E6C2 CD BE AC D1 						call CGetArgumentLast
  242 D1:E6C6 ED 5B 9A E9 
              D1 -  -  -  						ld de, (programPtr)
  243 D1:E6CB E1 -  -  -  					pop hl
  244 D1:E6CC 01 7E 5E D0 					ld bc, tempArg4
  245 D1:E6D0 CD C5 E7 D1 					call CCheckIfPrevArgIsSame
  246 D1:E6D4 CD 17 AD D1 					call CAddArgument
  247 D1:E6D8 E1 -  -  -  				pop hl
  248 D1:E6D9 01 96 5A D0 				ld bc, tempArg3
  249 D1:E6DD CD C5 E7 D1 				call CCheckIfPrevArgIsSame
  250 D1:E6E1 CD 17 AD D1 				call CAddArgument
  251 D1:E6E5 E1 -  -  -  			pop hl
  252 D1:E6E6 01 AE 56 D0 			ld bc, tempArg2
  253 D1:E6EA CD C5 E7 D1 			call CCheckIfPrevArgIsSame
  254 D1:E6EE CD 17 AD D1 			call CAddArgument
  255 D1:E6F2 E1 -  -  -  		pop hl
  256 D1:E6F3 01 C6 52 D0 		ld bc, tempArg1
  257 D1:E6F7 CD C5 E7 D1 		call CCheckIfPrevArgIsSame
  258 D1:E6FB CD 17 AD D1 		call CAddArgument
  259 D1:E6FF ED 53 9A E9 
              D1 -  -  -  		ld (programPtr), de
  260 D1:E704 06 05 -  -  		ld b, 5
  261 D1:E706 CD 56 E4 D1 		call CInsertCallPops
  262 D1:E70A 3A 5F E4 D1 		ld a, (CFunctionArgsSMC)
  263 D1:E70E FE 3E -  -  		cp 62
  264 D1:E710 CA 79 E5 D1 _:		jp z, CInsertSpriteScaled
  265 D1:E714 FE 3F -  -  		cp 63
  266 D1:E716 28 F8 -  -  		jr z, -_
  267 D1:E718 F1 -  -  -  	pop af
  268 D1:E719 C9 -  -  -  	ret
  269 D1:E71A -  -  -  -  	
  270 D1:E71A -  -  -  -  CFunction6Args:
  271 D1:E71A FD CB BE 46 	bit triggered_a_comma, (iy+fExpression3)
  272 D1:E71E CA 36 AF D1 	jp z, ErrorSyntax
  273 D1:E722 2A 9A E9 D1 	ld hl, (programPtr)
  274 D1:E726 22 6C E7 D1 	ld (CFunction6ArgsSMC2), hl
  275 D1:E72A 21 C6 52 D0 	ld hl, tempArg1
  276 D1:E72E FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  277 D1:E732 CD C2 AC D1 	call CGetArgument
  278 D1:E736 E5 -  -  -  	push hl
  279 D1:E737 21 AE 56 D0 		ld hl, tempArg2
  280 D1:E73B FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
  281 D1:E73F CD C2 AC D1 		call CGetArgument
  282 D1:E743 E5 -  -  -  		push hl
  283 D1:E744 21 96 5A D0 			ld hl, tempArg3
  284 D1:E748 FD CB B0 56 			bit arg3_is_small, (iy+fFunction1)
  285 D1:E74C CD C2 AC D1 			call CGetArgument
  286 D1:E750 E5 -  -  -  			push hl
  287 D1:E751 21 7E 5E D0 				ld hl, tempArg4
  288 D1:E755 FD CB B0 4E 				bit arg4_is_small, (iy+fFunction1)
  289 D1:E759 CD C2 AC D1 				call CGetArgument
  290 D1:E75D E5 -  -  -  				push hl
  291 D1:E75E 21 66 62 D0 					ld hl, tempArg5
  292 D1:E762 FD CB B0 46 					bit arg5_is_small, (iy+fFunction1)
  293 D1:E766 CD C2 AC D1 					call CGetArgument
  294 D1:E76A E5 -  -  -  					push hl
  295 D1:E76B -  -  -  -  CFunction6ArgsSMC2 = $+1
  296 D1:E76B 21 00 00 00 						ld hl, 0
  297 D1:E76F BF -  -  -  						cp a												; reset zero flag
  298 D1:E770 CD BE AC D1 						call CGetArgumentLast
  299 D1:E774 ED 5B 9A E9 
              D1 -  -  -  						ld de, (programPtr)
  300 D1:E779 E1 -  -  -  					pop hl
  301 D1:E77A 01 66 62 D0 					ld bc, tempArg5
  302 D1:E77E CD C5 E7 D1 					call CCheckIfPrevArgIsSame
  303 D1:E782 CD 17 AD D1 					call CAddArgument
  304 D1:E786 E1 -  -  -  				pop hl
  305 D1:E787 01 7E 5E D0 				ld bc, tempArg4
  306 D1:E78B CD C5 E7 D1 				call CCheckIfPrevArgIsSame
  307 D1:E78F CD 17 AD D1 				call CAddArgument
  308 D1:E793 E1 -  -  -  			pop hl
  309 D1:E794 01 96 5A D0 			ld bc, tempArg3
  310 D1:E798 CD C5 E7 D1 			call CCheckIfPrevArgIsSame
  311 D1:E79C CD 17 AD D1 			call CAddArgument
  312 D1:E7A0 E1 -  -  -  		pop hl
  313 D1:E7A1 01 AE 56 D0 		ld bc, tempArg2
  314 D1:E7A5 CD C5 E7 D1 		call CCheckIfPrevArgIsSame
  315 D1:E7A9 CD 17 AD D1 		call CAddArgument
  316 D1:E7AD E1 -  -  -  	pop hl
  317 D1:E7AE 01 C6 52 D0 	ld bc, tempArg1
  318 D1:E7B2 CD C5 E7 D1 	call CCheckIfPrevArgIsSame
  319 D1:E7B6 CD 17 AD D1 	call CAddArgument
  320 D1:E7BA ED 53 9A E9 
              D1 -  -  -  	ld (programPtr), de
  321 D1:E7BF 06 06 -  -  	ld b, 6
  322 D1:E7C1 C3 56 E4 D1 	jp CInsertCallPops
  323 D1:E7C5 -  -  -  -  	
  324 D1:E7C5 -  -  -  -  CCheckIfPrevArgIsSame:
  325 D1:E7C5 E5 -  -  -  	push hl
  326 D1:E7C6 D5 -  -  -  		push de
  327 D1:E7C7 C5 -  -  -  			push bc
  328 D1:E7C8 B7 -  -  -  				or a
  329 D1:E7C9 ED 42 -  -  				sbc hl, bc
  330 D1:E7CB EB -  -  -  				ex de, hl
  331 D1:E7CC ED 52 -  -  				sbc hl, de
  332 D1:E7CE D1 -  -  -  			pop de
  333 D1:E7CF 1A -  -  -  _:			ld a, (de)
  334 D1:E7D0 BE -  -  -  			cp a, (hl)
  335 D1:E7D1 23 -  -  -  			inc hl
  336 D1:E7D2 13 -  -  -  			inc de
  337 D1:E7D3 28 FA -  -  			jr z, -_
  338 D1:E7D5 D1 -  -  -  		pop de
  339 D1:E7D6 E1 -  -  -  	pop hl
  340 D1:E7D7 C0 -  -  -  	ret nz
  341 D1:E7D8 E5 -  -  -  	push hl
  342 D1:E7D9 C1 -  -  -  	pop bc
  343 D1:E7DA 0B -  -  -  	dec bc
  344 D1:E7DB C9 -  -  -  	ret
Listing for file "ICE.asm"
  449 D1:E7DC -  -  -  -  #include "clibs/graphics.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\clibs\graphics.asm"
    1 D1:E7DC -  -  -  -  ; Byte: . . . . . . . .
    2 D1:E7DC -  -  -  -  ;       <---> <------->
    3 D1:E7DC -  -  -  -  ;       Args  1 = that argument is small (0-255)
    4 D1:E7DC -  -  -  -  ;       1 1 1:
    5 D1:E7DC -  -  -  -  ;    	bit   1 reset = not implemented
    6 D1:E7DC -  -  -  -  ;		bit   0 set   = special function (none yet)
    7 D1:E7DC -  -  -  -  
    8 D1:E7DC -  -  -  -  CFunctionsArguments:
    9 D1:E7DC 00 -  -  -  Begin:									.db 000000000b
   10 D1:E7DD 00 -  -  -  End_:									.db 000000000b
   11 D1:E7DE 30 -  -  -  SetColor:								.db 000110000b
   12 D1:E7DF 00 -  -  -  SetDefaultPalette:						.db 000000000b
   13 D1:E7E0 E0 -  -  -  SetPalette:								.db 011100000b
   14 D1:E7E1 30 -  -  -  FillScreen:								.db 000110000b
   15 D1:E7E2 48 -  -  -  SetPixel:								.db 001001000b
   16 D1:E7E3 E0 -  -  -  GetPixel:								.db 011100000b
   17 D1:E7E4 E0 -  -  -  GetDraw:								.db 011100000b
   18 D1:E7E5 30 -  -  -  SetDraw:								.db 000110000b
   19 D1:E7E6 00 -  -  -  SwapDraw:								.db 000000000b
   20 D1:E7E7 30 -  -  -  Blit:									.db 000110000b
   21 D1:E7E8 7C -  -  -  BlitLines:								.db 001111100b
   22 D1:E7E9 B5 -  -  -  BlitArea:								.db 010110101b
   23 D1:E7EA 30 -  -  -  PrintChar:								.db 000110000b
   24 D1:E7EB 48 -  -  -  PrintInt:								.db 001001000b
   25 D1:E7EC 48 -  -  -  PrintUInt:								.db 001001000b
   26 D1:E7ED 20 -  -  -  PrintString_:							.db 000100000b
   27 D1:E7EE 60 -  -  -  PrintStringXY:							.db 001100000b
   28 D1:E7EF 48 -  -  -  SetTextXY:								.db 001001000b
   29 D1:E7F0 30 -  -  -  SetTextBGColor:							.db 000110000b
   30 D1:E7F1 30 -  -  -  SetTextFGColor:							.db 000110000b
   31 D1:E7F2 30 -  -  -  SetTextTransparentColor:				.db 000110000b
   32 D1:E7F3 E0 -  -  -  SetCustomFontData:						.db 011100000b
   33 D1:E7F4 E0 -  -  -  SetCustomFontSpacing:					.db 011100000b
   34 D1:E7F5 30 -  -  -  SetMonospaceFont:						.db 000110000b
   35 D1:E7F6 E0 -  -  -  GetStringWidth:							.db 011100000b
   36 D1:E7F7 E0 -  -  -  GetCharWidth:							.db 011100000b
   37 D1:E7F8 E0 -  -  -  GetTextX:								.db 011100000b
   38 D1:E7F9 E0 -  -  -  GetTextY:								.db 011100000b
   39 D1:E7FA 80 -  -  -  Line:									.db 010000000b
   40 D1:E7FB 60 -  -  -  HorizLine:								.db 001100000b
   41 D1:E7FC 60 -  -  -  VertLine:								.db 001100000b
   42 D1:E7FD 60 -  -  -  Circle:									.db 001100000b
   43 D1:E7FE 60 -  -  -  FillCircle:								.db 001100000b
   44 D1:E7FF 80 -  -  -  Rectangle:								.db 010000000b
   45 D1:E800 80 -  -  -  FillRectangle:							.db 010000000b
   46 D1:E801 80 -  -  -  LineNoClip:								.db 010000000b
   47 D1:E802 60 -  -  -  HorizLineNoClip:						.db 001100000b
   48 D1:E803 60 -  -  -  VertLineNoClip:							.db 001100000b
   49 D1:E804 60 -  -  -  FillCircleNoClip:						.db 001100000b
   50 D1:E805 80 -  -  -  RectangleNoClip:						.db 010000000b
   51 D1:E806 80 -  -  -  FillRectangleNoClip:					.db 010000000b
   52 D1:E807 82 -  -  -  SetClipRegion:							.db 010000010b
   53 D1:E808 E0 -  -  -  GetClipRegion:							.db 011100000b
   54 D1:E809 20 -  -  -  ShiftDown:								.db 000100000b
   55 D1:E80A 20 -  -  -  ShiftUp:								.db 000100000b
   56 D1:E80B 20 -  -  -  ShiftLeft:								.db 000100000b
   57 D1:E80C 20 -  -  -  ShiftRight:								.db 000100000b
   58 D1:E80D E0 -  -  -  Tilemap:								.db 011100000b
   59 D1:E80E E0 -  -  -  TilemapNoClip:							.db 011100000b
   60 D1:E80F E0 -  -  -  TransparentTilemap:						.db 011100000b
   61 D1:E810 E0 -  -  -  TransparentTilemapNoClip:				.db 011100000b
   62 D1:E811 E0 -  -  -  TilePtr:								.db 011100000b
   63 D1:E812 E0 -  -  -  TilePtrMapped:							.db 011100000b
   64 D1:E813 E0 -  -  -  LZDecompress:							.db 011100000b
   65 D1:E814 E0 -  -  -  AllocSprite:							.db 011100000b
   66 D1:E815 E0 -  -  -  Sprite:									.db 011100000b
   67 D1:E816 E0 -  -  -  TransparentSprite:						.db 011100000b
   68 D1:E817 64 -  -  -  SpriteNoClip:							.db 001100100b
   69 D1:E818 64 -  -  -  TransparentSpriteNoClip:				.db 001100100b
   70 D1:E819 E0 -  -  -  GetSpriteNoClip:						.db 011100000b
   71 D1:E81A A7 -  -  -  ScaledSpriteNoClip:						.db 010100111b
   72 D1:E81B A7 -  -  -  ScaledTransparentSpriteNoClip:			.db 010100111b
   73 D1:E81C E0 -  -  -  FlipSpriteY:							.db 011100000b
   74 D1:E81D E0 -  -  -  FlipSpriteX:							.db 011100000b
   75 D1:E81E E0 -  -  -  RotateSpriteC:							.db 011100000b
   76 D1:E81F E0 -  -  -  RotateSpriteCC:							.db 011100000b
   77 D1:E820 E0 -  -  -  RotateSpriteHalf:						.db 011100000b
   78 D1:E821 E0 -  -  -  Polygon:								.db 011100000b
   79 D1:E822 E0 -  -  -  PolygonNoClip:							.db 011100000b
   80 D1:E823 C0 -  -  -  FillTriangle:							.db 011000000b
   81 D1:E824 C0 -  -  -  FillTriangleNoClip:						.db 011000000b
   82 D1:E825 E0 -  -  -  LZDecompressSprite:						.db 011100000b
   83 D1:E826 58 -  -  -  SetTextScale:							.db 001011000b
   84 D1:E827 30 -  -  -  SetTransparentColor:					.db 000110000b
   85 D1:E828 00 -  -  -  ZeroScreen:								.db 000000000b
   86 D1:E829 30 -  -  -  SetTextConfig:							.db 000110000b
   87 D1:E82A E0 -  -  -  GetSpriteChar:							.db 011100000b
Listing for file "ICE.asm"
  450 D1:E82B -  -  -  -  #include "data.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\data.asm"
    1 D1:E82B -  -  -  -  operators_booleans:
    2 D1:E82B 04 40 3D 3C 
              6A 6B 6C 6D 
              6E 6F 82 83 
              70 71 00 -  	.db tStore, tAnd, tXor, tOr, tEQ, tLT, tGT, tLE, tGE, tNE, tMul, tDiv, tAdd, tSub, 0			; 0 = temp +
    3 D1:E83A -  -  -  -  	;		7	6		6	6		4	5	5	5		5	4	3		2	1	0
    4 D1:E83A -  -  -  -  operators_special:
    5 D1:E83A 00 01 02 03 
              04 05 05 05 
              05 04 06 06 
              06 07 -  -  	.db 0, 1, 2, 3, 4, 5, 5, 5, 5, 4, 6, 6, 6, 7
    6 D1:E848 -  -  -  -  	
    7 D1:E848 -  -  -  -  FunctionsWithReturnValue:
    8 D1:E848 AD AB 10 -  	.db tGetKey, trand, tLParen
    9 D1:E84B -  -  -  -  FunctionsWithReturnValueArguments:
   10 D1:E84B 21 1A 19 B8 
              EF 0D -  -  	.db tMean, tMin, tMax, tNot, tExtTok, tSqr
   11 D1:E851 -  -  -  -  FunctionsWithReturnValueEnd:
   12 D1:E851 -  -  -  -  
   13 D1:E851 -  -  -  -  FunctionsWithReturnValueStart:
   14 D1:E851 95 CF D1 00 
              CC D1 8E CB 
              D1 8D CD D1 
              91 CD D1 89 
              CD D1 -  -  	.dl functionSqrt, functionCE, functionNot, functionMax, functionMin, functionMean
   15 D1:E863 -  -  -  -  
   16 D1:E863 -  -  -  -  FunctionsSingle:
   17 D1:E863 E0 DC E1 D8 
              CE D1 D2 DE 
              D3 D5 62 D6 
              D7 2C B3 5F 	.db tOutput, tInput, tClLCD, tPause, tIf, tWhile, tRepeat, tDisp, tFor, tReturn, tVarOut, tLbl, tGoto, tii, tDet, tProg
   18 D1:E873 -  -  -  -  FunctionsSingleEnd:
   19 D1:E873 -  -  -  -  
   20 D1:E873 -  -  -  -  FunctionsSingleStart:
   21 D1:E873 6E C5 D1 FE 
              CF D1 B0 C6 
              D1 CF C6 D1 
              95 C6 D1 5B 
              D0 D1 F6 C6 
              D1 6F E1 D1 	.dl functionPrgm, functionC, functionSkipLine, functionGoto, functionLbl, functionCustom, functionReturn, functionFor
   22 D1:E88B 42 C6 D1 26 
              C7 D1 1C C9 
              D1 2D C8 D1 
              FF C9 D1 E3 
              C9 D1 C5 CA 
              D1 B9 C5 D1 	.dl functionDisp, functionRepeat, functionWhile, functionIf, functionPause, functionClrHome, functionInput, functionOutput
   23 D1:E8A3 -  -  -  -  	
   24 D1:E8A3 -  -  -  -  operator_start:
   25 D1:E8A3 68 D2 D1 BE 
              D2 D1 1F D3 
              D1 61 D3 D1 
              F3 D3 D1 CB 
              AE D1 -  -  	.dl SubNumberXXX, SubVariableXXX, SubChainPushXXX, SubChainAnsXXX, SubFunctionXXX, SubError
   26 D1:E8B5 5C D4 D1 96 
              D4 D1 E0 D4 
              D1 29 D5 D1 
              C9 D5 D1 CF 
              AE D1 -  -  	.dl AddNumberXXX, AddVariableXXX, AddChainPushXXX, AddChainAnsXXX, AddFunctionXXX, AddError
   27 D1:E8C7 32 D6 D1 8E 
              D6 D1 01 D7 
              D1 4A D7 D1 
              BF D7 D1 D3 
              AE D1 -  -  	.dl DivNumberXXX, DivVariableXXX, DivChainPushXXX, DivChainAnsXXX, DivFunctionXXX, DivError
   28 D1:E8D9 1C D8 D1 59 
              D8 D1 A4 D8 
              D1 F0 D8 D1 
              B5 D9 D1 D7 
              AE D1 -  -  	.dl MulNumberXXX, MulVariableXXX, MulChainPushXXX, MulChainAnsXXX, MulFunctionXXX, MulError
   29 D1:E8EB F2 DB D1 48 
              DC D1 C1 DC 
              D1 0D DD D1 
              8C DD D1 F5 
              AE D1 -  -  	.dl NEQNumberXXX, NEQVariableXXX, NEQChainPushXXX, NEQChainAnsXXX, NEQFunctionXXX, NEQError
   30 D1:E8FD 18 DA D1 75 
              DA D1 E9 DA 
              D1 30 DB D1 
              91 DB D1 DB 
              AE D1 -  -  	.dl GLETNumberXXX, GLETVariableXXX, GLETChainPushXXX, GLETChainAnsXXX, GLETFunctionXXX, GLETError
   31 D1:E90F CF DD D1 4B 
              DE D1 D0 DE 
              D1 13 DF D1 
              7E DF D1 03 
              AF D1 -  -  	.dl XORANDNumberXXX, XORANDVariableXXX, XORANDChainPushXXX, XORANDChainAnsXXX, XORANDFunctionXXX, XORANDError
   32 D1:E921 C1 DF D1 18 
              E0 D1 5E E0 
              D1 7C E0 D1 
              A3 E0 D1 F2 
              E0 D1 -  -  	.dl StoNumberXXX, StoVariableXXX, StoChainPushXXX, StoChainAnsXXX, StoFunctionXXX, StoListXXX
   33 D1:E933 -  -  -  -  	
   34 D1:E933 -  -  -  -  CArguments:
   35 D1:E933 4C E4 D1 8C 
              E4 D1 A4 E4 
              D1 EA E4 D1 
              F7 E5 D1 71 
              E6 D1 1A E7 
              D1 -  -  -  	.dl CFunction0Args, CFunction1Arg, CFunction2Args, CFunction3Args, CFunction4Args, CFunction5Args, CFunction6Args
   36 D1:E948 -  -  -  -  	
   37 D1:E948 -  -  -  -  functionCustomStart:
   38 D1:E948 78 D0 D1 B2 
              D0 D1 CB C6 
              D1 32 D1 D1 	.dl functionExecHex, functionDefineSprite, functionCall, functionCompilePrgm
   39 D1:E954 -  -  -  -  	
   40 D1:E954 07 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 00 -  precedence:	 .db 7, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  0
   41 D1:E963 -  -  -  -  	         ;   t+ - + / * ≠ ≥ ≤ > < = or xor and →
   42 D1:E963 00 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 06 -  precedence2: .db 0, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  6
   43 D1:E972 -  -  -  -  
   44 D1:E972 -  -  -  -  lists:
   45 D1:E972 1F EA D0 96 
              73 D0 C6 52 
              D0 66 94 D0 
              F6 31 D0 2F 
              11 D1 -  -  	.dl L1, L2, L3, L4, L5, L6
   46 D1:E984 -  -  -  -  	
   47 D1:E984 -  -  -  -  hexadecimals:
   48 D1:E984 46 45 44 43 
              42 41 39 38 
              37 36 35 34 
              33 32 31 30 	.db tF, tE, tD, tC, tB, tA, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0
   49 D1:E994 -  -  -  -  	
   50 D1:E994 83 EA D0 -  stackPtr:				.dl stack
   51 D1:E997 6B EE D0 -  outputPtr:				.dl output
   52 D1:E99A 00 2C D5 -  programPtr:				.dl program
   53 D1:E99D D7 F5 D0 -  programNamesPtr:		.dl programNamesStack
   54 D1:E9A0 D7 F5 D0 -  labelPtr:				.dl labelStack
   55 D1:E9A3 BF F9 D0 -  gotoPtr:				.dl gotoStack
   56 D1:E9A6 A7 FD D0 -  programDataOffsetPtr:	.dl programDataOffsetStack
   57 D1:E9A9 83 03 D1 -  tempStringsPtr:			.dl tempStringsStack
   58 D1:E9AC 5F 09 D1 -  tempListsPtr:			.dl tempListsStack
   59 D1:E9AF 17 15 D1 -  programDataDataPtr:		.dl programDataData
   60 D1:E9B2 00 -  -  -  amountOfPrograms		.db 0
   61 D1:E9B3 00 -  -  -  openedParensE			.db 0
   62 D1:E9B4 00 -  -  -  openedParensF			.db 0
   63 D1:E9B5 00 -  -  -  amountOfArguments		.db 0
   64 D1:E9B6 00 -  -  -  amountOfCRoutines		.db 0
   65 D1:E9B7 00 -  -  -  amountOfEnds			.db 0
   66 D1:E9B8 00 -  -  -  amountOfInput			.db 0
   67 D1:E9B9 00 -  -  -  amountOfPause			.db 0
   68 D1:E9BA 00 -  -  -  ExprOutput				.db 0
   69 D1:E9BB 00 -  -  -  ExprOutput2				.db 0
   70 D1:E9BC 00 -  -  -  AmountOfSubPrograms		.db 0
   71 D1:E9BD -  -  -  -  
   72 D1:E9BD -  -  -  -  varname:
   73 D1:E9BD 06 00 00 00 
              00 00 00 00 
              00 00 -  -  	.db ProtProgObj, 0,0,0,0,0,0,0,0,0
   74 D1:E9C7 -  -  -  -  	
   75 D1:E9C7 -  -  -  -  usedCroutines:
   76 D1:E9C7 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  .fill AMOUNT_OF_C_FUNCTIONS, 0
   77 D1:EA16 -  -  -  -  
   78 D1:EA16 -  -  -  -  ICEAppvar:
   79 D1:EA16 15 49 43 45 
              41 50 50 56 
              00 -  -  -  	.db AppVarObj, "ICEAPPV", 0
   80 D1:EA1F -  -  -  -  ICEProgram:
   81 D1:EA1F 06 49 43 45 
              00 -  -  -  	.db ProtProgObj, "ICE", 0
   82 D1:EA24 -  -  -  -  	
   83 D1:EA24 -  -  -  -  ErrorMessageStandard:
   84 D1:EA24 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 66 6F 
              72 20 27 00 	.db "Invalid arguments for '", 0
   85 D1:EA3C -  -  -  -  EndErrorMessage:
   86 D1:EA3C 54 6F 6F 20 
              6D 61 6E 79 
              20 45 6E 64 
              73 21 00 -  	.db "Too many Ends!", 0
   87 D1:EA4B -  -  -  -  GoodCompileMessage:
   88 D1:EA4B 53 75 63 63 
              65 73 66 75 
              6C 6C 79 20 
              63 6F 6D 70 
              69 6C 65 64 
              21 00 -  -  	.db "Succesfully compiled!", 0
   89 D1:EA61 -  -  -  -  NoProgramsMessage:
   90 D1:EA61 4E 6F 20 70 
              72 6F 67 72 
              61 6D 73 20 
              66 6F 75 6E 
              64 21 00 -  	.db "No programs found!", 0
   91 D1:EA74 -  -  -  -  InvalidTokenMessage:
   92 D1:EA74 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              74 6F 6B 65 
              6E 21 00 -  	.db "Unsupported token!", 0
   93 D1:EA87 -  -  -  -  InvalidListArgumentMessage:
   94 D1:EA87 4F 6E 6C 79 
              20 69 6E 74 
              65 67 65 72 
              73 20 69 6E 
              20 6C 69 73 
              74 73 20 73 
              75 70 70 6F 
              72 74 65 64 
              21 00 -  -  	.db "Only integers in lists supported!", 0
   95 D1:EAA9 -  -  -  -  InvalidNameLengthMessage:
   96 D1:EAA9 50 72 6F 67 
              72 61 6D 20 
              6E 61 6D 65 
              20 74 6F 6F 
              20 6C 6F 6E 
              67 21 00 -  	.db "Program name too long!", 0
   97 D1:EAC0 -  -  -  -  SameNameMessage:
   98 D1:EAC0 4F 75 74 70 
              75 74 20 6E 
              61 6D 65 20 
              69 73 20 74 
              68 65 20 73 
              61 6D 65 20 
              61 73 20 69 
              6E 70 75 74 
              20 6E 61 6D 
              65 21 00 -  	.db "Output name is the same as input name!", 0
   99 D1:EAE7 -  -  -  -  WrongSpriteDataMessgae:
  100 D1:EAE7 49 6E 76 61 
              6C 69 64 20 
              73 70 72 69 
              74 65 20 64 
              61 74 61 21 
              00 -  -  -  	.db "Invalid sprite data!", 0
  101 D1:EAFC -  -  -  -  FunctionFunctionMessage:
  102 D1:EAFC 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 61 20 
              66 75 6E 63 
              74 69 6F 6E 
              20 69 6E 20 
              61 20 66 75 
              6E 63 74 69 
              6F 6E 21 00 	.db "You can't use a function in a function!", 0
  103 D1:EB24 -  -  -  -  NotFoundMessage:
  104 D1:EB24 50 72 6F 67 
              72 61 6D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 21 00 -  	.db "Program not found!", 0
  105 D1:EB37 -  -  -  -  ImplementMessage:
  106 D1:EB37 54 68 69 73 
              20 66 75 6E 
              63 74 69 6F 
              6E 20 68 61 
              73 20 6E 6F 
              74 20 62 65 
              65 6E 20 69 
              6D 70 6C 65 
              6D 65 6E 74 
              65 64 20 79 
              65 74 21 00 	.db "This function has not been implemented yet!", 0
  107 D1:EB63 -  -  -  -  SyntaxErrorMessage:
  108 D1:EB63 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 65 6E 
              74 65 72 65 
              64 21 00 -  	.db "Invalid arguments entered!", 0
  109 D1:EB7E -  -  -  -  TooLargeLoopMessage:
  110 D1:EB7E 54 6F 6F 20 
              6C 61 72 67 
              65 20 61 6E 
              6F 6E 79 6D 
              6F 75 73 20 
              6C 6F 6F 70 
              21 00 -  -  	.db "Too large anonymous loop!", 0
  111 D1:EB98 -  -  -  -  UsedCodeMessage:
  112 D1:EB98 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 63 6F 
              64 65 20 62 
              65 66 6F 72 
              65 20 44 65 
              66 69 6E 65 
              53 70 72 69 
              74 65 28 29 
              21 00 -  -  	.db "You can't use code before DefineSprite()!", 0
  113 D1:EBC2 -  -  -  -  LineNumber:
  114 D1:EBC2 45 72 72 6F 
              72 20 6F 6E 
              20 6C 69 6E 
              65 20 00 -  	.db "Error on line ", 0
  115 D1:EBD1 -  -  -  -  MismatchErrorMessage:
  116 D1:EBD1 4D 69 73 6D 
              61 74 63 68 
              65 64 20 70 
              61 72 65 6E 
              74 68 65 73 
              69 73 21 00 	.db "Mismatched parenthesis!", 0
  117 D1:EBE9 -  -  -  -  UnknownMessage:
  118 D1:EBE9 53 6F 6D 65 
              74 68 69 6E 
              67 20 77 65 
              6E 74 20 77 
              72 6F 6E 67 
              21 20 50 6C 
              65 61 73 65 
              20 72 65 70 
              6F 72 74 20 
              69 74 21 00 	.db "Something went wrong! Please report it!", 0
  119 D1:EC11 -  -  -  -  NotEnoughMem:
  120 D1:EC11 4E 6F 74 20 
              65 6E 6F 75 
              67 68 20 66 
              72 65 65 20 
              52 41 4D 21 
              00 -  -  -  	.db "Not enough free RAM!", 0
  121 D1:EC26 -  -  -  -  LabelErrorMessage:
  122 D1:EC26 43 61 6E 27 
              74 20 66 69 
              6E 64 20 73 
              70 65 63 69 
              66 69 63 20 
              6C 61 62 65 
              6C 21 00 -  	.db "Can't find specific label!", 0
  123 D1:EC41 -  -  -  -  StartParseMessage:
  124 D1:EC41 43 6F 6D 70 
              69 6C 69 6E 
              67 20 70 72 
              6F 67 72 61 
              6D 20 00 -  	.db "Compiling program ", 0
  125 D1:EC54 -  -  -  -  ICEName:
  126 D1:EC54 49 43 45 20 
              43 6F 6D 70 
              69 6C 65 72 
              20 76 31 2E 
              35 20 2D 20 
              42 79 20 50 
              65 74 65 72 
              20 22 50 54 
              5F 22 20 54 
              69 6C 6C 65 
              6D 61 00 -  	.db "ICE Compiler v1.5 - By Peter \"PT_\" Tillema", 0
  127 D1:EC7F -  -  -  -  PressKey:
  128 D1:EC7F 5B 50 72 65 
              73 73 20 61 
              6E 79 20 6B 
              65 79 20 74 
              6F 20 65 78 
              69 74 5D 00 	.db "[Press any key to exit]", 0
  129 D1:EC97 -  -  -  -  	
  130 D1:EC97 -  -  -  -  MulTable:
  131 D1:EC97 01 29 00 00 
              00 00 00 00 
              00 00 -  -  	.db 1 \ add hl, hl \ .db 0,0,0,0,0,0,0,0
  132 D1:ECA1 04 E5 D1 29 
              19 00 00 00 
              00 00 -  -  	.db 4 \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0,0
  133 D1:ECAB 02 29 29 00 
              00 00 00 00 
              00 00 -  -  	.db 2 \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0,0
  134 D1:ECB5 05 E5 D1 29 
              29 19 00 00 
              00 00 -  -  	.db 5 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0,0
  135 D1:ECBF 05 29 E5 D1 
              29 19 00 00 
              00 00 -  -  	.db 5 \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0
  136 D1:ECC9 06 E5 D1 29 
              19 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0,0
  137 D1:ECD3 03 29 29 29 
              00 00 00 00 
              00 00 -  -  	.db 3 \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0
  138 D1:ECDD 06 E5 D1 29 
              29 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0
  139 D1:ECE7 06 E5 D1 29 
              29 19 29 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0,0
  140 D1:ECF1 07 E5 D1 29 
              29 19 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0
  141 D1:ECFB 06 29 29 E5 
              D1 29 19 00 
              00 00 -  -  	.db 6 \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0
  142 D1:ED05 09 E5 C1 29 
              29 E5 D1 29 
              19 09 -  -  	.db 9 \ push hl \ pop bc \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, bc
  143 D1:ED0F 07 E5 D1 29 
              19 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0
  144 D1:ED19 09 E5 D1 29 
              29 29 29 B7 
              ED 52 -  -  	.db 9 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ or a \ sbc hl, de
  145 D1:ED23 04 29 29 29 
              29 00 00 00 
              00 00 -  -  	.db 4 \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0
  146 D1:ED2D 07 E5 D1 29 
              29 29 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0
  147 D1:ED37 07 E5 D1 29 
              29 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0
  148 D1:ED41 08 01 13 00 
              00 CD 54 01 
              00 00 -  -  	.db 8 \ ld bc, 19 \ call __imulu \ .db 0
  149 D1:ED4B 07 E5 D1 29 
              29 19 29 29 
              00 -  -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ .db 0
  150 D1:ED54 -  -  -  -  	
  151 D1:ED54 -  -  -  -  InputRoutine:
  152 D1:ED54 CD 14 08 02 	call _ClrScrn
  153 D1:ED58 CD 28 08 02 	call _HomeUp
  154 D1:ED5C AF -  -  -  	xor	a, a
  155 D1:ED5D 32 79 08 D0 	ld (ioPrompt), a
  156 D1:ED61 32 99 05 D0 	ld	(curUnder), a
  157 D1:ED65 CD 20 13 02 	call _GetStringInput
  158 D1:ED69 2A 4E 24 D0 	ld	hl, (editSym)
  159 D1:ED6D CD E8 0A 02 	call _VarNameToOP1HL
  160 D1:ED71 CD 0C 05 02 	call _ChkFindSym
  161 D1:ED75 1A -  -  -  	ld a, (de)
  162 D1:ED76 13 -  -  -  	inc de
  163 D1:ED77 13 -  -  -  	inc de
  164 D1:ED78 47 -  -  -  	ld b, a
  165 D1:ED79 ED 62 -  -  	sbc hl, hl
  166 D1:ED7B C5 -  -  -  _:	push bc
  167 D1:ED7C 29 -  -  -  		add hl, hl
  168 D1:ED7D E5 -  -  -  		push hl
  169 D1:ED7E C1 -  -  -  		pop bc
  170 D1:ED7F 29 -  -  -  		add hl, hl
  171 D1:ED80 29 -  -  -  		add hl, hl
  172 D1:ED81 09 -  -  -  		add hl, bc
  173 D1:ED82 1A -  -  -  		ld a, (de)
  174 D1:ED83 D6 30 -  -  		sub t0
  175 D1:ED85 01 00 00 00 		ld bc, 0
  176 D1:ED89 4F -  -  -  		ld c, a
  177 D1:ED8A 09 -  -  -  		add hl, bc
  178 D1:ED8B 13 -  -  -  		inc de
  179 D1:ED8C C1 -  -  -  	pop bc
  180 D1:ED8D 10 EC -  -  	djnz -_
  181 D1:ED8F -  -  -  -  InputOffset = $+2
  182 D1:ED8F DD 2F 00 -  	ld (ix+0), hl
  183 D1:ED92 C3 78 15 02 	jp _DeleteTempEditEqu
  184 D1:ED96 -  -  -  -  InputRoutineEnd:
  185 D1:ED96 -  -  -  -  
  186 D1:ED96 -  -  -  -  RandRoutine:
  187 D1:ED96 DD 27 51 -  	ld hl, (ix+rand1)
  188 D1:ED99 DD 17 54 -  	ld de, (ix+rand1+3)
  189 D1:ED9C 44 -  -  -  	ld b, h
  190 D1:ED9D 4D -  -  -  	ld c, l
  191 D1:ED9E 29 -  -  -  	add hl, hl
  192 D1:ED9F CB 13 -  -  	rl e
  193 D1:EDA1 CB 12 -  -  	rl d
  194 D1:EDA3 29 -  -  -  	add hl, hl
  195 D1:EDA4 CB 13 -  -  	rl e
  196 D1:EDA6 CB 12 -  -  	rl d
  197 D1:EDA8 2C -  -  -  	inc l
  198 D1:EDA9 09 -  -  -  	add hl, bc
  199 D1:EDAA DD 2F 51 -  	ld (ix+rand1), hl
  200 D1:EDAD ED 5A -  -  	adc hl, de
  201 D1:EDAF DD 2F 54 -  	ld (ix+rand1+3), hl
  202 D1:EDB2 EB -  -  -  	ex de, hl
  203 D1:EDB3 DD 27 57 -  	ld hl, (ix+rand1+6)
  204 D1:EDB6 DD 07 5A -  	ld bc, (ix+rand1+9)
  205 D1:EDB9 29 -  -  -  	add hl, hl
  206 D1:EDBA CB 11 -  -  	rl c
  207 D1:EDBC CB 10 -  -  	rl b
  208 D1:EDBE DD 0F 5A -  	ld (ix+rand1+9), bc
  209 D1:EDC1 9F -  -  -  	sbc a, a
  210 D1:EDC2 E6 C5 -  -  	and %11000101
  211 D1:EDC4 AD -  -  -  	xor l
  212 D1:EDC5 6F -  -  -  	ld l, a
  213 D1:EDC6 DD 2F 57 -  	ld (ix+rand1+6), hl
  214 D1:EDC9 EB -  -  -  	ex de, hl
  215 D1:EDCA 09 -  -  -  	add hl, bc
  216 D1:EDCB C9 -  -  -  	ret
  217 D1:EDCC -  -  -  -  RandRoutineEnd:
  218 D1:EDCC -  -  -  -  
  219 D1:EDCC -  -  -  -  DispNumberRoutine:
  220 D1:EDCC 3E 12 -  -  	ld a, 18
  221 D1:EDCE 32 96 05 D0 	ld (curCol), a
  222 D1:EDD2 CD E0 1E 02 	call _DispHL
  223 D1:EDD6 CD F0 07 02 	call _NewLine
  224 D1:EDDA -  -  -  -  	
  225 D1:EDDA -  -  -  -  DispStringRoutine:
  226 D1:EDDA AF -  -  -  	xor a
  227 D1:EDDB 32 96 05 D0 	ld (curCol), a
  228 D1:EDDF CD C0 07 02 	call _PutS
  229 D1:EDE3 CD F0 07 02 	call _NewLine
  230 D1:EDE7 -  -  -  -  
  231 D1:EDE7 -  -  -  -  PauseRoutine:
  232 D1:EDE7 2B -  -  -  	dec hl
  233 D1:EDE8 -  -  -  -  PauseRoutine2:
  234 D1:EDE8 0E 6E -  -  	ld c, 110
  235 D1:EDEA 06 20 -  -  _:	ld b, 32
  236 D1:EDEC 10 FE -  -  	djnz $
  237 D1:EDEE 0D -  -  -  	dec c
  238 D1:EDEF 20 F9 -  -  	jr nz, -_
  239 D1:EDF1 B7 -  -  -  	or a
  240 D1:EDF2 11 FF FF FF 	ld de, -1
  241 D1:EDF6 19 -  -  -  	add hl, de
  242 D1:EDF7 38 EF -  -  	jr c, PauseRoutine2
  243 D1:EDF9 C9 -  -  -  	ret
  244 D1:EDFA -  -  -  -  PauseRoutineEnd:
  245 D1:EDFA -  -  -  -  
  246 D1:EDFA -  -  -  -  MeanRoutine:
  247 D1:EDFA DD 21 00 00 
              00 -  -  -  	ld ix, 0
  248 D1:EDFF DD 39 -  -  	add ix, sp
  249 D1:EE01 19 -  -  -  	add hl, de
  250 D1:EE02 E5 -  -  -  	push hl
  251 D1:EE03 DD CB FF 1E 		rr (ix-1)
  252 D1:EE07 E1 -  -  -  	pop hl
  253 D1:EE08 CB 1C -  -  	rr h
  254 D1:EE0A CB 1D -  -  	rr l
  255 D1:EE0C DD 21 3F 38 
              D1 -  -  -  	ld ix, L1+20000
  256 D1:EE11 C9 -  -  -  	ret
  257 D1:EE12 -  -  -  -  MeanRoutineEnd:
  258 D1:EE12 -  -  -  -  
  259 D1:EE12 -  -  -  -  KeypadRoutine:
  260 D1:EE12 F3 -  -  -  	di
  261 D1:EE13 21 00 00 F5 	ld hl, 0F50000h
  262 D1:EE17 36 02 -  -  	ld (hl), 2
  263 D1:EE19 AF -  -  -  	xor a
  264 D1:EE1A BE -  -  -  _:	cp a, (hl)
  265 D1:EE1B 20 FD -  -  	jr nz, -_
  266 D1:EE1D FB -  -  -  	ei
  267 D1:EE1E 68 -  -  -  	ld l, b
  268 D1:EE1F 7E -  -  -  	ld a, (hl)
  269 D1:EE20 ED 62 -  -  	sbc hl, hl
  270 D1:EE22 A1 -  -  -  	and c
  271 D1:EE23 C8 -  -  -  	ret z
  272 D1:EE24 2C -  -  -  	inc l
  273 D1:EE25 C9 -  -  -  	ret
  274 D1:EE26 -  -  -  -  KeypadRoutineEnd:
  275 D1:EE26 -  -  -  -  
  276 D1:EE26 -  -  -  -  XORANDData:
  277 D1:EE26 01 FF FF FF 	ld bc, -1
  278 D1:EE2A 09 -  -  -  	add hl, bc
  279 D1:EE2B 9F -  -  -  	sbc a, a
  280 D1:EE2C EB -  -  -  	ex de, hl
  281 D1:EE2D 57 -  -  -  	ld d, a
  282 D1:EE2E 09 -  -  -  	add hl, bc
  283 D1:EE2F 9F -  -  -  	sbc a, a
  284 D1:EE30 -  -  -  -  XORANDSMC:
  285 D1:EE30 A2 -  -  -  	and a, d
  286 D1:EE31 ED 62 -  -  	sbc hl, hl
  287 D1:EE33 E6 01 -  -  	and 1
  288 D1:EE35 6F -  -  -  	ld l, a
  289 D1:EE36 -  -  -  -  
  290 D1:EE36 -  -  -  -  CData:
  291 D1:EE36 DD 21 3F 38 
              D1 -  -  -  	ld ix, L1+20000
  292 D1:EE3B 21 DA A8 D1 	ld hl, LibLoadAppVar - CData + UserMem
  293 D1:EE3F CD 20 03 02 	call _Mov9ToOP1
  294 D1:EE43 3E 15 -  -  	ld a, AppVarObj
  295 D1:EE45 32 F8 05 D0 	ld (OP1), a
  296 D1:EE49 CD 0C 05 02 _:	call _ChkFindSym
  297 D1:EE4D 38 24 -  -  	jr c, NotFound
  298 D1:EE4F CD 98 1F 02 	call _ChkInRAM
  299 D1:EE53 20 0E -  -  	jr nz, InArc
  300 D1:EE55 CD 28 06 02 	call _PushOP1
  301 D1:EE59 CD 48 14 02 	call _Arc_UnArc
  302 D1:EE5D CD C4 05 02 	call _PopOP1
  303 D1:EE61 18 E6 -  -  	jr -_
  304 D1:EE63 -  -  -  -  InArc:
  305 D1:EE63 EB -  -  -  	ex de, hl
  306 D1:EE64 11 09 00 00 	ld de, 9
  307 D1:EE68 19 -  -  -  	add hl, de
  308 D1:EE69 5E -  -  -  	ld e, (hl)
  309 D1:EE6A 19 -  -  -  	add hl, de
  310 D1:EE6B 23 -  -  -  	inc hl
  311 D1:EE6C 23 -  -  -  	inc hl
  312 D1:EE6D 23 -  -  -  	inc hl
  313 D1:EE6E 11 F1 A8 D1 	ld de, RelocationStart - CData + UserMem
  314 D1:EE72 E9 -  -  -  	jp (hl)
  315 D1:EE73 -  -  -  -  NotFound:
  316 D1:EE73 CD 14 08 02 	call _ClrScrn
  317 D1:EE77 CD 28 08 02 	call _HomeUp
  318 D1:EE7B 21 D6 A8 D1 	ld hl, MissingAppVar - CData + UserMem
  319 D1:EE7F CD C0 07 02 	call _PutS
  320 D1:EE83 CD F0 07 02 	call _NewLine
  321 D1:EE87 C3 C0 07 02 	jp _PutS
  322 D1:EE8B -  -  -  -  MissingAppVar:
  323 D1:EE8B 4E 65 65 64 	.db "Need"
  324 D1:EE8F -  -  -  -  LibLoadAppVar:
  325 D1:EE8F 20 4C 69 62 
              4C 6F 61 64 
              00 -  -  -  	.db " LibLoad", 0
  326 D1:EE98 74 69 6E 79 
              2E 63 63 2F 
              63 6C 69 62 
              73 00 -  -  	.db "tiny.cc/clibs", 0
  327 D1:EEA6 -  -  -  -  RelocationStart:
  328 D1:EEA6 C0 47 52 41 
              50 48 58 00 
              04 -  -  -  	.db 0C0h, "GRAPHX", 0, 4
  329 D1:EEAF -  -  -  -  CData2:
Listing for file "ICE.asm"
  451 D1:EEAF -  -  -  -  
  452 D1:EEAF -  -  -  -  stop:
  453 D1:EEAF -  -  -  -  
  454 D1:EEAF -  -  -  -  .echo stop-start+14
