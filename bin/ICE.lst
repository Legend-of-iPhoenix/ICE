    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\ti84pce.inc"
Listing for file "ice.asm"
    2 00:0000 -  -  -  -  #include "defines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\defines.asm"
    1 00:0000 -  -  -  -  tempToken		.equ	saveSScreen+00
    2 00:0000 -  -  -  -  tempToken2		.equ	saveSScreen+01
    3 00:0000 -  -  -  -  InputStartData		.equ	saveSScreen+02
    4 00:0000 -  -  -  -  RandStartData		.equ	saveSScreen+05
    5 00:0000 -  -  -  -  PauseStartData		.equ	saveSScreen+08
    6 00:0000 -  -  -  -  MeanStartData		.equ	saveSScreen+11
    7 00:0000 -  -  -  -  KeypadStartData		.equ	saveSScreen+14
    8 00:0000 -  -  -  -  RootStartData		.equ	saveSScreen+17
    9 00:0000 -  -  -  -  PrevProgramPtr		.equ	saveSScreen+20
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  stack			.equ	saveSScreen+00100
   12 00:0000 -  -  -  -  output			.equ	saveSScreen+01100
   13 00:0000 -  -  -  -  programNamesStack	.equ	saveSScreen+03000
   14 00:0000 -  -  -  -  labelStack		.equ	saveSScreen+03000
   15 00:0000 -  -  -  -  gotoStack		.equ	saveSScreen+04000
   16 00:0000 -  -  -  -  programDataOffsetStack	.equ	saveSScreen+05000
   17 00:0000 -  -  -  -  tempStringsStack	.equ	saveSScreen+06500
   18 00:0000 -  -  -  -  tempListsStack		.equ	saveSScreen+08000
   19 00:0000 -  -  -  -  programDataData		.equ	saveSScreen+11000
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  tempArg1		.equ	pixelShadow2+0000
   22 00:0000 -  -  -  -  tempArg2		.equ	pixelShadow2+1000
   23 00:0000 -  -  -  -  tempArg3		.equ	pixelShadow2+2000
   24 00:0000 -  -  -  -  tempArg4		.equ	pixelShadow2+3000
   25 00:0000 -  -  -  -  tempArg5		.equ	pixelShadow2+4000
   26 00:0000 -  -  -  -  tempArg6		.equ	pixelShadow2+5000
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  startTab		.equ	saveSScreen
   29 00:0000 -  -  -  -  
   30 00:0000 -  -  -  -  program			.equ	vRAM+(320*240)
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  fProgram1		.equ	-30h
   33 00:0000 -  -  -  -  comp_with_libs		.equ	0						;	used if compile with C libs
   34 00:0000 -  -  -  -  good_compilation	.equ	1						;	used if compilation is succesfull
   35 00:0000 -  -  -  -  has_already_input	.equ	2						;	only once the "Input" routine
   36 00:0000 -  -  -  -  has_already_rand	.equ	3						;	only once the "rand" routine
   37 00:0000 -  -  -  -  has_already_pause	.equ	4						;	only once the "Pause" routine
   38 00:0000 -  -  -  -  has_already_mean	.equ	5						;	only once the "mean()" routine
   39 00:0000 -  -  -  -  has_already_keypad	.equ	6						;	only once the scanning the keypad
   40 00:0000 -  -  -  -  used_code		.equ	7						;	DefineSprite( must be in front of all the code
   41 00:0000 -  -  -  -  
   42 00:0000 -  -  -  -  fProgram2		.equ	-31h
   43 00:0000 -  -  -  -  has_already_root	.equ	0						;	only once the "Sqrt(" routine
   44 00:0000 -  -  -  -  
   45 00:0000 -  -  -  -  fExpression1		.equ	-40h
   46 00:0000 -  -  -  -  prev_is_number		.equ	0						;	used if a number consists of more digits
   47 00:0000 -  -  -  -  chain_operators		.equ	1						;	used if the calculation is needed for another calculation
   48 00:0000 -  -  -  -  last_token_is_ret	.equ	2						;	used if last token is "Return"
   49 00:0000 -  -  -  -  op_is_last_one		.equ	3						;	used if the operator is the last of that line
   50 00:0000 -  -  -  -  output_is_number	.equ	4						;	used if the calculation is only a single number, loop-statements can be 
   51 00:0000 -  -  -  -  ans_set_z_flag		.equ	5						;	used if the previous calculation sets the zero flag, useful for loop/conditions
   52 00:0000 -  -  -  -  need_push		.equ	6						;	used if Ans may not be overwritten
   53 00:0000 -  -  -  -  output_is_string	.equ	7						;	used for strings
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  fExpression2		.equ	-41h
   56 00:0000 -  -  -  -  use_mean_routine	.equ	0						;	used if the function is mean()
   57 00:0000 -  -  -  -  last_token_was_not	.equ	1						;	used if the last token is "not(", which can be optimized at If/Repeat/While
   58 00:0000 -  -  -  -  
   59 00:0000 -  -  -  -  fExpression3		.equ	-42h
   60 00:0000 -  -  -  -  triggered_a_comma	.equ	0						;	used if a comma is entered outside parens, used by functions
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  fFunction1		.equ	-50h
   63 00:0000 -  -  -  -  arg1_is_small		.equ	4						;	used in C functions
   64 00:0000 -  -  -  -  function_implemented	.equ	4						;	used if C function is implemented
   65 00:0000 -  -  -  -  arg2_is_small		.equ	3						;	used in C functions
   66 00:0000 -  -  -  -  arg3_is_small		.equ	2						;	used in C functions
   67 00:0000 -  -  -  -  arg4_is_small		.equ	1						;	used in C functions
   68 00:0000 -  -  -  -  arg5_is_small		.equ	0						;	used in C functions
   69 00:0000 -  -  -  -  
   70 00:0000 -  -  -  -  fFunction2		.equ	-51h
   71 00:0000 -  -  -  -  negative_for_step	.equ	0						;	used for the step in a For loop
   72 00:0000 -  -  -  -  for_step_is_number	.equ	1						;	used for the step in a For loop
   73 00:0000 -  -  -  -  end_point_is_number	.equ	2						;	used for the end point in a For loop
   74 00:0000 -  -  -  -  
   75 00:0000 -  -  -  -  fAlways1		.equ	-50h
   76 00:0000 -  -  -  -  displayed_det		.equ	0						;	used if the text of a det( function is displayed in the statusbar
   77 00:0000 -  -  -  -  modified_iy		.equ	1						;	used if iy is modified by a C routine
   78 00:0000 -  -  -  -  
   79 00:0000 -  -  -  -  typeNumber		.equ	0
   80 00:0000 -  -  -  -  typeVariable		.equ	1
   81 00:0000 -  -  -  -  typeChainPush		.equ	2
   82 00:0000 -  -  -  -  typeChainAns		.equ	3
   83 00:0000 -  -  -  -  typeReturnValue		.equ	4						;	getKey, rand
   84 00:0000 -  -  -  -  typeList		.equ	5
   85 00:0000 -  -  -  -  typeOSList		.equ	6
   86 00:0000 -  -  -  -  typeString		.equ	7
   87 00:0000 -  -  -  -  typeFunction		.equ	00111111b
   88 00:0000 -  -  -  -  typeOperator		.equ	00011111b
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  ChainPush		.equ	0
   91 00:0000 -  -  -  -  ChainAns		.equ	1
   92 00:0000 -  -  -  -  ChainListPush		.equ	2
   93 00:0000 -  -  -  -  ChainListAns		.equ	3
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  OutputInBC		.equ	0
   96 00:0000 -  -  -  -  OutputInDE		.equ	1
   97 00:0000 -  -  -  -  OutputInHL		.equ	2
   98 00:0000 -  -  -  -  
   99 00:0000 -  -  -  -  OutputIsInDE		.equ	0
  100 00:0000 -  -  -  -  OutputIsInHL		.equ	1
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ;---------------------------;
  103 00:0000 -  -  -  -  ;----- User Variables ------;
  104 00:0000 -  -  -  -  ;---------------------------;
  105 00:0000 -  -  -  -  Str0			.equ	saveSScreen+15500
  106 00:0000 -  -  -  -  Str1			.equ	saveSScreen+16000
  107 00:0000 -  -  -  -  Str2			.equ	saveSScreen+16500
  108 00:0000 -  -  -  -  Str3			.equ	saveSScreen+17000
  109 00:0000 -  -  -  -  Str4			.equ	saveSScreen+17500
  110 00:0000 -  -  -  -  Str5			.equ	saveSScreen+18000
  111 00:0000 -  -  -  -  Str6			.equ	saveSScreen+18500
  112 00:0000 -  -  -  -  Str7			.equ	saveSScreen+19000
  113 00:0000 -  -  -  -  Str8			.equ	saveSScreen+19500
  114 00:0000 -  -  -  -  Str9			.equ	saveSScreen+20000
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  L1			.equ	saveSScreen
  117 00:0000 -  -  -  -  L2			.equ	cmdPixelShadow
  118 00:0000 -  -  -  -  L3			.equ	pixelShadow2
  119 00:0000 -  -  -  -  L4			.equ	plotSScreen
  120 00:0000 -  -  -  -  L5			.equ	pixelShadow
  121 00:0000 -  -  -  -  L6			.equ	L1+10000
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ; IX offsets
  124 00:0000 -  -  -  -  vA			.equ	0
  125 00:0000 -  -  -  -  vB			.equ	3
  126 00:0000 -  -  -  -  vC			.equ	6
  127 00:0000 -  -  -  -  vD			.equ	9
  128 00:0000 -  -  -  -  vE			.equ	12
  129 00:0000 -  -  -  -  vF			.equ	15
  130 00:0000 -  -  -  -  vG			.equ	18
  131 00:0000 -  -  -  -  vH			.equ	21
  132 00:0000 -  -  -  -  vI			.equ	24
  133 00:0000 -  -  -  -  vJ			.equ	27
  134 00:0000 -  -  -  -  vK			.equ	30
  135 00:0000 -  -  -  -  vL			.equ	33
  136 00:0000 -  -  -  -  vM			.equ	36
  137 00:0000 -  -  -  -  vN			.equ	39
  138 00:0000 -  -  -  -  vO			.equ	42
  139 00:0000 -  -  -  -  vP			.equ	45
  140 00:0000 -  -  -  -  vQ			.equ	48
  141 00:0000 -  -  -  -  vR			.equ	51
  142 00:0000 -  -  -  -  vS			.equ	54
  143 00:0000 -  -  -  -  vT			.equ	57
  144 00:0000 -  -  -  -  vU			.equ	60
  145 00:0000 -  -  -  -  vV			.equ	63
  146 00:0000 -  -  -  -  vW			.equ	66
  147 00:0000 -  -  -  -  vX			.equ	69
  148 00:0000 -  -  -  -  vY			.equ	72
  149 00:0000 -  -  -  -  vZ			.equ	75
  150 00:0000 -  -  -  -  vtheta			.equ	78
  151 00:0000 -  -  -  -  
  152 00:0000 -  -  -  -  rand1			.equ	81
  153 00:0000 -  -  -  -  rand2			.equ	84
Listing for file "ice.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 EF 7B -  -  .db tExtTok, tAsm84CeCmp
    5 00:0002 -  -  -  -  .org UserMem
    6 D1:A881 -  -  -  -  
    7 D1:A881 -  -  -  -  start:
    8 D1:A881 ED 73 21 B0 
              D1 -  -  -  	ld	(backupSP), sp
    9 D1:A886 2A 17 23 D0 	ld	hl, (begPC)
   10 D1:A88A 22 25 B0 D1 	ld	(backupBegPC), hl
   11 D1:A88E 2A 1A 23 D0 	ld	hl, (curPC)
   12 D1:A892 22 2D B0 D1 	ld	(backupCurPC), hl
   13 D1:A896 2A 1D 23 D0 	ld	hl, (endPC)
   14 D1:A89A 22 35 B0 D1 	ld	(backupEndPC), hl
   15 D1:A89E CD 48 08 02 	call	_RunIndicOff
   16 D1:A8A2 CD 59 BC D1 	call	InstallHooks
   17 D1:A8A6 -  -  -  -  GUI:
   18 D1:A8A6 3E 27 -  -  	ld	a, lcdBpp8
   19 D1:A8A8 32 18 00 E3 	ld	(mpLcdCtrl), a
   20 D1:A8AC 21 00 02 E3 	ld	hl, mpLcdPalette
   21 D1:A8B0 06 00 -  -  	ld	b, 0
   22 D1:A8B2 50 -  -  -  _:	ld	d, b
   23 D1:A8B3 78 -  -  -  	ld	a, b
   24 D1:A8B4 E6 C0 -  -  	and	011000000b
   25 D1:A8B6 CB 3A -  -  	srl	d
   26 D1:A8B8 1F -  -  -  	rra
   27 D1:A8B9 5F -  -  -  	ld	e, a
   28 D1:A8BA 3E 1F -  -  	ld	a, 000011111b
   29 D1:A8BC A0 -  -  -  	and	b
   30 D1:A8BD B3 -  -  -  	or	a, e
   31 D1:A8BE 77 -  -  -  	ld	(hl), a
   32 D1:A8BF 23 -  -  -  	inc	hl
   33 D1:A8C0 72 -  -  -  	ld	(hl), d
   34 D1:A8C1 23 -  -  -  	inc	hl
   35 D1:A8C2 04 -  -  -  	inc	b
   36 D1:A8C3 20 ED -  -  	jr	nz, -_
   37 D1:A8C5 21 00 00 D4 	ld	hl, vRAM
   38 D1:A8C9 36 BD -  -  	ld	(hl), 189
   39 D1:A8CB E5 -  -  -  	push	hl
   40 D1:A8CC D1 -  -  -  	pop	de
   41 D1:A8CD 13 -  -  -  	inc	de
   42 D1:A8CE 01 80 0C 00 	ld	bc, 320*10
   43 D1:A8D2 ED B0 -  -  	ldir
   44 D1:A8D4 36 00 -  -  	ld	(hl), 0
   45 D1:A8D6 01 40 01 00 	ld	bc, 320
   46 D1:A8DA ED B0 -  -  	ldir
   47 D1:A8DC 36 FF -  -  	ld	(hl), 255
   48 D1:A8DE 01 3F 1E 01 	ld	bc, 320*229-1
   49 D1:A8E2 ED B0 -  -  	ldir
   50 D1:A8E4 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
   51 D1:A8E8 FD CB B0 8E 	res	modified_iy, (iy+fAlways1)
   52 D1:A8EC 21 DA EC D1 	ld	hl, ICEName
   53 D1:A8F0 3E 01 -  -  	ld	a, 1
   54 D1:A8F2 32 F5 B7 D1 	ld	(TextYPos_ASM), a
   55 D1:A8F6 C6 14 -  -  	add	a, 20
   56 D1:A8F8 32 C4 B7 D1 	ld	(TextXPos_ASM), a
   57 D1:A8FC CD 85 B0 D1 	call	PrintString
   58 D1:A900 21 F5 B7 D1 	ld	hl, TextYPos_ASM
   59 D1:A904 34 -  -  -  	inc	(hl)
   60 D1:A905 34 -  -  -  	inc	(hl)
   61 D1:A906 2A 9D 25 D0 	ld	hl, (progPtr)
   62 D1:A90A -  -  -  -  FindPrograms:
   63 D1:A90A CD F3 BB D1 	call	FindNextGoodVar
   64 D1:A90E 20 34 -  -  	jr	nz, StopFindingPrograms
   65 D1:A910 E5 -  -  -  	push	hl
   66 D1:A911 3A F5 B7 D1 		ld	a, (TextYPos_ASM)
   67 D1:A915 C6 0A -  -  		add	a, 10
   68 D1:A917 38 28 -  -  		jr	c, +_
   69 D1:A919 32 F5 B7 D1 		ld	(TextYPos_ASM), a
   70 D1:A91D 21 0A 00 00 		ld	hl, 10
   71 D1:A921 22 C4 B7 D1 		ld	(TextXPos_ASM), hl
   72 D1:A925 21 32 EA D1 		ld	hl, AmountOfPrograms
   73 D1:A929 34 -  -  -  		inc	(hl)
   74 D1:A92A CD 98 1F 02 		call	_ChkInRAM
   75 D1:A92E 3E 23 -  -  		ld	a, '#'
   76 D1:A930 DC C2 B7 D1 		call	c, _PrintChar_ASM
   77 D1:A934 2A 1D EA D1 		ld	hl, (ProgramNamesPtr)
   78 D1:A938 11 F8 FF FF 		ld	de, -8
   79 D1:A93C 19 -  -  -  		add	hl, de
   80 D1:A93D CD 85 B0 D1 		call	PrintString
   81 D1:A941 E1 -  -  -  _:	pop	hl
   82 D1:A942 18 C6 -  -  	jr	FindPrograms
   83 D1:A944 -  -  -  -  StopFindingPrograms:
   84 D1:A944 3E 0D -  -  	ld	a, 13
   85 D1:A946 32 F5 B7 D1 	ld	(TextYPos_ASM), a
   86 D1:A94A 21 01 00 00 	ld	hl, 1
   87 D1:A94E 22 C4 B7 D1 	ld	(TextXPos_ASM), hl
   88 D1:A952 3A 32 EA D1 	ld	a, (AmountOfPrograms)
   89 D1:A956 B7 -  -  -  	or	a, a
   90 D1:A957 CA 45 AF D1 	jp	z, NoProgramsError
   91 D1:A95B 32 C4 A9 D1 	ld	(AmountPrograms), a
   92 D1:A95F 2E 01 -  -  	ld	l, 1
   93 D1:A961 -  -  -  -  PrintCursor:
   94 D1:A961 5D -  -  -  	ld	e, l
   95 D1:A962 16 0A -  -  	ld	d, 10
   96 D1:A964 ED 5C -  -  	mlt	de
   97 D1:A966 1C -  -  -  	inc	e
   98 D1:A967 1C -  -  -  	inc	e
   99 D1:A968 1C -  -  -  	inc	e
  100 D1:A969 7B -  -  -  	ld	a, e
  101 D1:A96A 32 F5 B7 D1 	ld	(TextYPos_ASM), a
  102 D1:A96E AF -  -  -  	xor	a, a
  103 D1:A96F 32 1A B8 D1 	ld	(color), a
  104 D1:A973 3C -  -  -  	inc	a
  105 D1:A974 32 C4 B7 D1 	ld	(TextXPos_ASM), a
  106 D1:A978 3E 3E -  -  	ld	a, '>'
  107 D1:A97A CD C2 B7 D1 	call	_PrintChar_ASM
  108 D1:A97E 3E FF -  -  	ld	a, 255
  109 D1:A980 32 1A B8 D1 	ld	(color), a
  110 D1:A984 3E 01 -  -  	ld	a, 1
  111 D1:A986 32 C4 B7 D1 	ld	(TextXPos_ASM), a
  112 D1:A98A E5 -  -  -  _:	push	hl
  113 D1:A98B CD 4C 01 02 		call	_GetCSC
  114 D1:A98F E1 -  -  -  	pop	hl
  115 D1:A990 B7 -  -  -  	or	a, a
  116 D1:A991 28 F7 -  -  	jr	z, -_
  117 D1:A993 FE 04 -  -  	cp	a, skUp
  118 D1:A995 28 1E -  -  	jr	z, PressedUp
  119 D1:A997 FE 01 -  -  	cp	a, skDown
  120 D1:A999 28 27 -  -  	jr	z, PressedDown
  121 D1:A99B FE 0F -  -  	cp	a, skClear
  122 D1:A99D CA 10 B0 D1 	jp	z, StopProgram
  123 D1:A9A1 FE 09 -  -  	cp	a, skEnter
  124 D1:A9A3 20 E5 -  -  	jr	nz, -_
  125 D1:A9A5 -  -  -  -  PressedEnter:
  126 D1:A9A5 2D -  -  -  	dec	l
  127 D1:A9A6 26 08 -  -  	ld	h, 8
  128 D1:A9A8 ED 6C -  -  	mlt	hl
  129 D1:A9AA 11 D6 F5 D0 	ld	de, ProgramNamesStack-1
  130 D1:A9AE 19 -  -  -  	add	hl, de
  131 D1:A9AF CD 20 03 02 	call	_Mov9ToOP1
  132 D1:A9B3 18 1B -  -  	jr	StartParsing
  133 D1:A9B5 -  -  -  -  PressedUp:
  134 D1:A9B5 7D -  -  -  	ld	a, l
  135 D1:A9B6 3D -  -  -  	dec	a
  136 D1:A9B7 28 D1 -  -  	jr	z, -_
  137 D1:A9B9 2D -  -  -  	dec	l
  138 D1:A9BA 3E 17 -  -  	ld	a, 23
  139 D1:A9BC CD C2 B7 D1 	call	_PrintChar_ASM
  140 D1:A9C0 18 9F -  -  	jr	PrintCursor
  141 D1:A9C2 -  -  -  -  PressedDown:
  142 D1:A9C2 7D -  -  -  	ld	a, l
  143 D1:A9C3 -  -  -  -  AmountPrograms = $+1
  144 D1:A9C3 FE 00 -  -  	cp	a, 0
  145 D1:A9C5 28 C3 -  -  	jr	z, -_
  146 D1:A9C7 2C -  -  -  	inc	l
  147 D1:A9C8 3E 17 -  -  	ld	a, 23
  148 D1:A9CA CD C2 B7 D1 	call	_PrintChar_ASM
  149 D1:A9CE 18 91 -  -  	jr	PrintCursor
  150 D1:A9D0 -  -  -  -  StartParsing:
  151 D1:A9D0 3E 05 -  -  	ld	a, ProgObj
  152 D1:A9D2 32 F8 05 D0 	ld	(OP1), a
  153 D1:A9D6 CD 0C 05 02 _:	call	_ChkFindSym
  154 D1:A9DA 30 07 -  -  	jr	nc, +_
  155 D1:A9DC 21 F8 05 D0 	ld	hl, OP1
  156 D1:A9E0 34 -  -  -  	inc	(hl)
  157 D1:A9E1 18 F3 -  -  	jr	-_
  158 D1:A9E3 CD 98 1F 02 _:	call	_ChkInRAM
  159 D1:A9E7 30 0A -  -  	jr	nc, +_
  160 D1:A9E9 EB -  -  -  	ex	de, hl
  161 D1:A9EA 11 09 00 00 	ld	de, 9
  162 D1:A9EE 19 -  -  -  	add	hl, de
  163 D1:A9EF 5E -  -  -  	ld	e, (hl)
  164 D1:A9F0 19 -  -  -  	add	hl, de
  165 D1:A9F1 23 -  -  -  	inc	hl
  166 D1:A9F2 EB -  -  -  	ex	de, hl
  167 D1:A9F3 01 00 00 00 _:	ld	bc, 0
  168 D1:A9F7 EB -  -  -  	ex	de, hl
  169 D1:A9F8 4E -  -  -  	ld	c, (hl)																;	BC = program length
  170 D1:A9F9 23 -  -  -  	inc	hl
  171 D1:A9FA 46 -  -  -  	ld	b, (hl)
  172 D1:A9FB 23 -  -  -  	inc	hl
  173 D1:A9FC 22 1A 23 D0 	ld	(curPC), hl
  174 D1:AA00 22 17 23 D0 	ld	(begPC), hl
  175 D1:AA04 09 -  -  -  	add	hl, bc
  176 D1:AA05 2B -  -  -  	dec	hl
  177 D1:AA06 22 1D 23 D0 	ld	(endPC), hl
  178 D1:AA0A CD 70 B0 D1 	call	PrintCompilingProgram
  179 D1:AA0E FD 36 D0 01 	ld	(iy+fProgram1), 1
  180 D1:AA12 FD 36 CF 00 	ld	(iy+fProgram2), 0
  181 D1:AA16 21 2C EE D1 	ld	hl, CData
  182 D1:AA1A ED 5B 1A EA 
              D1 -  -  -  	ld	de, (programPtr)
  183 D1:AA1F 01 79 00 00 	ld	bc, CData2 - CData
  184 D1:AA23 ED B0 -  -  	ldir
  185 D1:AA25 ED 53 1A EA 
              D1 -  -  -  	ld	(programPtr), de
  186 D1:AA2A CD 8F B0 D1 	call	PreScanPrograms
  187 D1:AA2E 3E CD -  -  	ld	a, 0CDh
  188 D1:AA30 21 48 08 02 	ld	hl, _RunIndicOff
  189 D1:AA34 CD 4C AC D1 	call	InsertAHL															;	call _RunIndicOff
  190 D1:AA38 2A 1A EA D1 	ld	hl, (programPtr)
  191 D1:AA3C 11 8E 7C FC 	ld	de, 4+4+5+UserMem-program
  192 D1:AA40 19 -  -  -  	add	hl, de
  193 D1:AA41 CD 4C AC D1 	call	InsertAHL															;	call *
  194 D1:AA45 01 FD 21 80 	ld	bc, 08021FDh
  195 D1:AA49 11 00 D0 C3 	ld	de, 0C3D000h
  196 D1:AA4D 21 3C 1A 02 	ld	hl, _DrawStatusBar
  197 D1:AA51 CD 8E AC D1 	call	InsertBCDEHL														;	ld iy, flags \ jp _DrawStatusBar
  198 D1:AA55 2A 1A EA D1 	ld	hl, (programPtr)
  199 D1:AA59 22 33 EA D0 	ld	(PrevProgramPtr), hl
  200 D1:AA5D 3A 36 EA D1 	ld	a, (amountOfCRoutines)
  201 D1:AA61 B7 -  -  -  	or	a, a
  202 D1:AA62 20 0C -  -  	jr	nz, CompileProgramFull
  203 D1:AA64 FD CB D0 86 	res	comp_with_libs, (iy+fProgram1)
  204 D1:AA68 21 05 2C D5 	ld	hl, program+5
  205 D1:AA6C 22 1A EA D1 	ld	(programPtr), hl
  206 D1:AA70 -  -  -  -  CompileProgramFull:
  207 D1:AA70 3A 3D EA D1 	ld	a, (AmountOfSubPrograms)
  208 D1:AA74 B7 -  -  -  	or	a, a
  209 D1:AA75 20 22 -  -  	jr	nz, SkipGetProgramName
  210 D1:AA77 21 3E EA D1 	ld	hl, varname
  211 D1:AA7B CD A7 B1 D1 	call	GetProgramName
  212 D1:AA7F 21 F9 05 D0 	ld	hl, OP1+1
  213 D1:AA83 11 3F EA D1 	ld	de, varname+1
  214 D1:AA87 06 08 -  -  	ld	b, 8
  215 D1:AA89 -  -  -  -  CheckNames:
  216 D1:AA89 1A -  -  -  	ld	a, (de)
  217 D1:AA8A B7 -  -  -  	or	a, a
  218 D1:AA8B 28 07 -  -  	jr	z, CheckNamesSameLength
  219 D1:AA8D BE -  -  -  	cp	a, (hl)
  220 D1:AA8E 20 09 -  -  	jr	nz, GoodProgramName
  221 D1:AA90 23 -  -  -  	inc	hl
  222 D1:AA91 13 -  -  -  	inc	de
  223 D1:AA92 10 F5 -  -  	djnz	CheckNames
  224 D1:AA94 -  -  -  -  CheckNamesSameLength:
  225 D1:AA94 BE -  -  -  	cp	a, (hl)
  226 D1:AA95 CA 67 AF D1 	jp	z, SameNameError
  227 D1:AA99 -  -  -  -  GoodProgramName:
  228 D1:AA99 -  -  -  -  SkipGetProgramName:
  229 D1:AA99 -  -  -  -  
  230 D1:AA99 -  -  -  -  ParseProgramUntilEnd:
  231 D1:AA99 -  -  -  -  CompileLoop:
  232 D1:AA99 AF -  -  -  	xor	a, a
  233 D1:AA9A FD 77 C0 -  	ld	(iy+fExpression1), a
  234 D1:AA9D FD 77 BF -  	ld	(iy+fExpression2), a
  235 D1:AAA0 FD 77 BE -  	ld	(iy+fExpression3), a
  236 D1:AAA3 FD 77 B0 -  	ld	(iy+fFunction1), a
  237 D1:AAA6 FD 77 AF -  	ld	(iy+fFunction2), a
  238 D1:AAA9 32 33 EA D1 	ld	(openedParensE), a
  239 D1:AAAD 32 34 EA D1 	ld	(openedParensF), a
  240 D1:AAB1 CD 28 10 02 	call	_IncFetch
  241 D1:AAB5 32 1F EA D0 	ld	(tempToken), a
  242 D1:AAB9 38 58 -  -  	jr	c, FindGotos
  243 D1:AABB FE D4 -  -  	cp	a, tEnd
  244 D1:AABD 20 10 -  -  	jr	nz, ++_
  245 D1:AABF 21 37 EA D1 _:	ld	hl, amountOfEnds
  246 D1:AAC3 7E -  -  -  	ld	a, (hl)
  247 D1:AAC4 35 -  -  -  	dec	(hl)
  248 D1:AAC5 B7 -  -  -  	or	a, a
  249 D1:AAC6 CA 85 AF D1 	jp	z, EndError
  250 D1:AACA 3A 1F EA D0 	ld	a, (tempToken)
  251 D1:AACE C9 -  -  -  	ret
  252 D1:AACF FE D0 -  -  _:	cp	a, tElse
  253 D1:AAD1 28 EC -  -  	jr	z, --_
  254 D1:AAD3 CD F0 B1 D1 	call	ParseLine
  255 D1:AAD7 2A 1A 23 D0 	ld	hl, (curPC)
  256 D1:AADB ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  257 D1:AAE0 B7 -  -  -  	or	a, a
  258 D1:AAE1 ED 52 -  -  	sbc	hl, de
  259 D1:AAE3 01 40 01 00 	ld	bc, 320
  260 D1:AAE7 CD 54 01 00 	call	__imulu
  261 D1:AAEB E5 -  -  -  	push	hl
  262 D1:AAEC 2A 1D 23 D0 		ld	hl, (endPC)
  263 D1:AAF0 B7 -  -  -  		or	a, a
  264 D1:AAF1 ED 52 -  -  		sbc	hl, de
  265 D1:AAF3 23 -  -  -  		inc	hl
  266 D1:AAF4 E5 -  -  -  		push	hl
  267 D1:AAF5 C1 -  -  -  		pop	bc
  268 D1:AAF6 E1 -  -  -  	pop	hl
  269 D1:AAF7 CD 40 01 00 	call	__idivu
  270 D1:AAFB E5 -  -  -  	push	hl
  271 D1:AAFC C1 -  -  -  	pop	bc
  272 D1:AAFD 78 -  -  -  	ld	a, b
  273 D1:AAFE B1 -  -  -  	or	a, c
  274 D1:AAFF 28 10 -  -  	jr	z, +_
  275 D1:AB01 21 40 1F D4 	ld	hl, vRAM+(320*25)
  276 D1:AB05 36 00 -  -  	ld	(hl), 0
  277 D1:AB07 E5 -  -  -  	push	hl
  278 D1:AB08 D1 -  -  -  	pop	de
  279 D1:AB09 13 -  -  -  	inc	de
  280 D1:AB0A 0B -  -  -  	dec	bc
  281 D1:AB0B 78 -  -  -  	ld	a, b
  282 D1:AB0C B1 -  -  -  	or	a, c
  283 D1:AB0D 28 8A -  -  	jr	z, CompileLoop
  284 D1:AB0F ED B0 -  -  	ldir
  285 D1:AB11 18 86 -  -  _:	jr	CompileLoop
  286 D1:AB13 -  -  -  -  FindGotos:
  287 D1:AB13 21 37 EA D1 	ld	hl, amountOfEnds
  288 D1:AB17 7E -  -  -  	ld	a, (hl)
  289 D1:AB18 B7 -  -  -  	or	a, a
  290 D1:AB19 28 02 -  -  	jr	z, +_
  291 D1:AB1B 35 -  -  -  	dec	(hl)
  292 D1:AB1C C9 -  -  -  	ret
  293 D1:AB1D 21 3D EA D1 _:	ld	hl, AmountOfSubPrograms
  294 D1:AB21 7E -  -  -  	ld	a, (hl)
  295 D1:AB22 35 -  -  -  	dec	(hl)
  296 D1:AB23 B7 -  -  -  	or	a, a
  297 D1:AB24 C0 -  -  -  	ret	nz
  298 D1:AB25 -  -  -  -  FindGotosLoop:
  299 D1:AB25 2A 23 EA D1 	ld	hl, (gotoPtr)
  300 D1:AB29 11 BF F9 D0 	ld	de, gotoStack
  301 D1:AB2D B7 -  -  -  	or	a, a
  302 D1:AB2E ED 52 -  -  	sbc	hl, de
  303 D1:AB30 28 4F -  -  	jr	z, AddDataToProgramData												;	have we finished all the Goto's?
  304 D1:AB32 19 -  -  -  	add	hl, de
  305 D1:AB33 2B -  -  -  	dec	hl
  306 D1:AB34 2B -  -  -  	dec	hl
  307 D1:AB35 2B -  -  -  	dec	hl
  308 D1:AB36 E5 -  -  -  	push	hl
  309 D1:AB37 ED 27 -  -  		ld	hl, (hl)
  310 D1:AB39 EB -  -  -  		ex	de, hl															;	de = pointer to goto data
  311 D1:AB3A 2A 20 EA D1 		ld	hl, (labelPtr)
  312 D1:AB3E -  -  -  -  FindLabels:
  313 D1:AB3E 01 D7 F5 D0 		ld	bc, labelStack
  314 D1:AB42 B7 -  -  -  		or	a, a
  315 D1:AB43 ED 42 -  -  		sbc	hl, bc
  316 D1:AB45 CA 91 AF D1 		jp	z, LabelError				;	have we finished all the Lbl's?
  317 D1:AB49 09 -  -  -  		add	hl, bc
  318 D1:AB4A 2B -  -  -  		dec	hl
  319 D1:AB4B 2B -  -  -  		dec	hl
  320 D1:AB4C 2B -  -  -  		dec	hl																;	hl = pointer to label
  321 D1:AB4D -  -  -  -  FindLabel:
  322 D1:AB4D E5 -  -  -  		push	hl
  323 D1:AB4E D5 -  -  -  			push	de
  324 D1:AB4F ED 27 -  -  				ld	hl, (hl)													;	hl = pointer to label data
  325 D1:AB51 CD C4 AE D1 				call	CompareStrings		;	is it the right label?
  326 D1:AB55 D1 -  -  -  			pop	de
  327 D1:AB56 E1 -  -  -  		pop	hl
  328 D1:AB57 20 22 -  -  		jr	nz, LabelNotRightOne
  329 D1:AB59 -  -  -  -  RightLabel:
  330 D1:AB59 2B -  -  -  		dec	hl
  331 D1:AB5A 2B -  -  -  		dec	hl
  332 D1:AB5B 2B -  -  -  		dec	hl
  333 D1:AB5C ED 27 -  -  		ld	hl, (hl)
  334 D1:AB5E 11 81 7C FC 		ld	de, UserMem-program
  335 D1:AB62 19 -  -  -  		add	hl, de
  336 D1:AB63 EB -  -  -  		ex	de, hl															;	de points to label memory
  337 D1:AB64 E1 -  -  -  	pop	hl																	;	hl = pointer to goto
  338 D1:AB65 2B -  -  -  	dec	hl
  339 D1:AB66 2B -  -  -  	dec	hl
  340 D1:AB67 2B -  -  -  	dec	hl
  341 D1:AB68 ED 27 -  -  	ld	hl, (hl)																;	hl = pointer to jump to
  342 D1:AB6A ED 1F -  -  	ld	(hl), de
  343 D1:AB6C 2A 23 EA D1 	ld	hl, (gotoPtr)
  344 D1:AB70 11 FA FF FF 	ld	de, -6
  345 D1:AB74 19 -  -  -  	add	hl, de																;	get next Goto
  346 D1:AB75 22 23 EA D1 	ld	(gotoPtr), hl
  347 D1:AB79 18 AA -  -  	jr	FindGotosLoop
  348 D1:AB7B -  -  -  -  LabelNotRightOne:
  349 D1:AB7B 2B -  -  -  		dec	hl
  350 D1:AB7C 2B -  -  -  		dec	hl
  351 D1:AB7D 2B -  -  -  		dec	hl
  352 D1:AB7E 18 BE -  -  		jr	FindLabels
  353 D1:AB80 -  -  -  -  StopFindLabels:
  354 D1:AB80 E1 -  -  -  	pop	hl
  355 D1:AB81 -  -  -  -  AddDataToProgramData:
  356 D1:AB81 FD CB C0 56 	bit	last_token_is_ret, (iy+fExpression1)
  357 D1:AB85 20 06 -  -  	jr	nz, +_
  358 D1:AB87 3E C9 -  -  	ld	a, 0C9h
  359 D1:AB89 CD 18 AD D1 	call	InsertA															;	ret
  360 D1:AB8D 2A 2F EA D1 _:	ld	hl, (programDataDataPtr)
  361 D1:AB91 01 17 15 D1 	ld	bc, programDataData
  362 D1:AB95 B7 -  -  -  	or	a, a
  363 D1:AB96 ED 42 -  -  	sbc	hl, bc
  364 D1:AB98 E5 -  -  -  	push	hl
  365 D1:AB99 C1 -  -  -  	pop	bc																	;	bc = data length
  366 D1:AB9A 28 3D -  -  	jr	z, CreateProgram														;	check IF there is data
  367 D1:AB9C ED 5B 1A EA 
              D1 -  -  -  	ld	de, (programPtr)
  368 D1:ABA1 21 17 15 D1 	ld	hl, programDataData
  369 D1:ABA5 B7 -  -  -  	or	a, a
  370 D1:ABA6 ED 52 -  -  	sbc	hl, de
  371 D1:ABA8 E5 -  -  -  	push	hl
  372 D1:ABA9 19 -  -  -  		add	hl, de
  373 D1:ABAA ED B0 -  -  		ldir																;	move the data to the end of the program
  374 D1:ABAC ED 53 1A EA 
              D1 -  -  -  		ld	(programPtr), de
  375 D1:ABB1 D1 -  -  -  	pop	de
  376 D1:ABB2 2A 26 EA D1 	ld	hl, (programDataOffsetPtr)
  377 D1:ABB6 -  -  -  -  AddDataLoop:																;	update all the pointers pointing to data
  378 D1:ABB6 01 A7 FD D0 	ld	bc, programDataOffsetStack
  379 D1:ABBA B7 -  -  -  	or	a, a
  380 D1:ABBB ED 42 -  -  	sbc	hl, bc
  381 D1:ABBD 28 1A -  -  	jr	z, CreateProgram														;	no more pointers left
  382 D1:ABBF 09 -  -  -  	add	hl, bc
  383 D1:ABC0 2B -  -  -  	dec	hl
  384 D1:ABC1 2B -  -  -  	dec	hl
  385 D1:ABC2 2B -  -  -  	dec	hl
  386 D1:ABC3 E5 -  -  -  	push	hl
  387 D1:ABC4 ED 27 -  -  		ld	hl, (hl)															;	complicated stuff XD
  388 D1:ABC6 E5 -  -  -  		push	hl
  389 D1:ABC7 ED 27 -  -  			ld	hl, (hl)
  390 D1:ABC9 B7 -  -  -  			or	a, a
  391 D1:ABCA ED 52 -  -  			sbc	hl, de
  392 D1:ABCC 01 81 7C FC 			ld	bc, UserMem-program
  393 D1:ABD0 09 -  -  -  			add	hl, bc
  394 D1:ABD1 E5 -  -  -  			push	hl
  395 D1:ABD2 C1 -  -  -  			pop	bc
  396 D1:ABD3 E1 -  -  -  		pop	hl
  397 D1:ABD4 ED 0F -  -  		ld	(hl), bc															;	ld (XXXXXX), hl
  398 D1:ABD6 E1 -  -  -  	pop	hl
  399 D1:ABD7 18 DD -  -  	jr	AddDataLoop
  400 D1:ABD9 -  -  -  -  CreateProgram:
  401 D1:ABD9 21 3E EA D1 	ld	hl, varname
  402 D1:ABDD CD 20 03 02 	call	_Mov9ToOP1
  403 D1:ABE1 CD 0C 05 02 	call	_ChkFindSym
  404 D1:ABE5 38 13 -  -  	jr	c, ++_
  405 D1:ABE7 CD 98 1F 02 	call	_ChkInRAM
  406 D1:ABEB 30 09 -  -  	jr	nc, +_
  407 D1:ABED CD 48 14 02 	call	_Arc_Unarc
  408 D1:ABF1 01 05 00 00 	ld	bc, 5
  409 D1:ABF5 09 -  -  -  	add	hl, bc
  410 D1:ABF6 CD 88 05 02 _:	call	_DelVar
  411 D1:ABFA 2A 1A EA D1 _:	ld	hl, (programPtr)
  412 D1:ABFE 01 00 2C D5 	ld	bc, program
  413 D1:AC02 B7 -  -  -  	or	a, a
  414 D1:AC03 ED 42 -  -  	sbc	hl, bc
  415 D1:AC05 E5 -  -  -  	push	hl
  416 D1:AC06 01 11 00 00 		ld	bc, 17
  417 D1:AC0A 09 -  -  -  		add	hl, bc
  418 D1:AC0B E5 -  -  -  		push	hl
  419 D1:AC0C CD 1C 05 02 			call	_EnoughMem
  420 D1:AC10 21 97 EC D1 			ld	hl, NotEnoughMem
  421 D1:AC14 DA 95 AF D1 			jp	c, DispFinalString
  422 D1:AC18 E1 -  -  -  		pop	hl
  423 D1:AC19 01 F1 FF FF 		ld	bc, -15
  424 D1:AC1D 09 -  -  -  		add	hl, bc
  425 D1:AC1E CD 34 13 02 		call	_CreateProtProg
  426 D1:AC22 C1 -  -  -  	pop	bc
  427 D1:AC23 13 -  -  -  	inc	de
  428 D1:AC24 13 -  -  -  	inc	de
  429 D1:AC25 21 00 2C D5 	ld	hl, program
  430 D1:AC29 EB -  -  -  	ex	de, hl
  431 D1:AC2A 36 EF -  -  	ld	(hl), tExtTok														;	insert header
  432 D1:AC2C 23 -  -  -  	inc	hl
  433 D1:AC2D 36 7B -  -  	ld	(hl), tAsm84CeCmp
  434 D1:AC2F 23 -  -  -  	inc	hl
  435 D1:AC30 EB -  -  -  	ex	de, hl
  436 D1:AC31 ED B0 -  -  	ldir																	;	insert the program data
  437 D1:AC33 21 D1 EA D1 	ld	hl, GoodCompileMessage
  438 D1:AC37 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
  439 D1:AC3B C3 95 AF D1 	jp	DispFinalString														;	DONE :D :D :D
  440 D1:AC3F -  -  -  -  
  441 D1:AC3F -  -  -  -  #include "routines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\routines.asm"
    1 D1:AC3F -  -  -  -  InsertBCDEAHL:
    2 D1:AC3F E5 -  -  -  	push	hl
    3 D1:AC40 C5 -  -  -  		push	bc
    4 D1:AC41 E1 -  -  -  		pop	hl
    5 D1:AC42 CD 50 AC D1 		call	InsertHL
    6 D1:AC46 EB -  -  -  		ex	de, hl
    7 D1:AC47 CD 50 AC D1 		call	InsertHL
    8 D1:AC4B E1 -  -  -  	pop	hl
    9 D1:AC4C -  -  -  -  InsertAHL:
   10 D1:AC4C CD 18 AD D1 	call	InsertA
   11 D1:AC50 -  -  -  -  InsertHL:
   12 D1:AC50 D5 -  -  -  	push	de
   13 D1:AC51 EB -  -  -  		ex	de, hl
   14 D1:AC52 2A 1A EA D1 		ld	hl, (programPtr)
   15 D1:AC56 ED 1F -  -  		ld	(hl), de
   16 D1:AC58 23 -  -  -  		inc	hl
   17 D1:AC59 23 -  -  -  		inc	hl
   18 D1:AC5A 23 -  -  -  		inc	hl
   19 D1:AC5B 22 1A EA D1 		ld	(programPtr), hl
   20 D1:AC5F D1 -  -  -  	pop	de
   21 D1:AC60 C9 -  -  -  	ret
   22 D1:AC61 -  -  -  -  	
   23 D1:AC61 -  -  -  -  InsertBC:
   24 D1:AC61 2A 1A EA D1 	ld hl, (programPtr)
   25 D1:AC65 70 -  -  -  	ld (hl), b
   26 D1:AC66 23 -  -  -  	inc hl
   27 D1:AC67 71 -  -  -  	ld (hl), c
   28 D1:AC68 23 -  -  -  	inc hl
   29 D1:AC69 22 1A EA D1 	ld (programPtr), hl
   30 D1:AC6D C9 -  -  -  	ret
   31 D1:AC6E -  -  -  -  	
   32 D1:AC6E -  -  -  -  InsertCallHL:
   33 D1:AC6E 3E CD -  -  	ld	a, 0CDh
   34 D1:AC70 18 DA -  -  	jr	InsertAHL
   35 D1:AC72 -  -  -  -  	
   36 D1:AC72 -  -  -  -  InsertHIXC:
   37 D1:AC72 26 27 -  -  	ld	h, 027h
   38 D1:AC74 06 03 -  -  	ld	b, 3
   39 D1:AC76 ED 4C -  -  	mlt	bc
   40 D1:AC78 79 -  -  -  	ld	a, c
   41 D1:AC79 18 07 -  -  	jr	InsertFinalIX
   42 D1:AC7B -  -  -  -  InsertIXE:
   43 D1:AC7B 26 17 -  -  	ld	h, 017h
   44 D1:AC7D -  -  -  -  InsertIX:
   45 D1:AC7D 16 03 -  -  	ld	d, 3
   46 D1:AC7F ED 5C -  -  	mlt	de
   47 D1:AC81 7B -  -  -  	ld	a, e
   48 D1:AC82 -  -  -  -  InsertFinalIX:
   49 D1:AC82 2E DD -  -  	ld	l, 0DDh
   50 D1:AC84 CD 70 1D 02 	call	_SetHLUToA
   51 D1:AC88 18 C6 -  -  	jr	InsertHL								; ld hl/de/bc, (ix+*)
   52 D1:AC8A -  -  -  -  InsertIXC:
   53 D1:AC8A 26 07 -  -  	ld	h, 007h
   54 D1:AC8C 18 EF -  -  	jr	InsertIX
   55 D1:AC8E -  -  -  -  
   56 D1:AC8E -  -  -  -  InsertBCDEHL:
   57 D1:AC8E E5 -  -  -  	push	hl
   58 D1:AC8F C5 -  -  -  		push	bc
   59 D1:AC90 E1 -  -  -  		pop	hl
   60 D1:AC91 CD 50 AC D1 		call	InsertHL
   61 D1:AC95 E1 -  -  -  	pop	hl
   62 D1:AC96 18 04 -  -  	jr	InsertDEHL
   63 D1:AC98 -  -  -  -  InsertADEHL:
   64 D1:AC98 CD 18 AD D1 	call	InsertA
   65 D1:AC9C -  -  -  -  InsertDEHL:
   66 D1:AC9C EB -  -  -  	ex	de, hl
   67 D1:AC9D CD 50 AC D1 	call	InsertHL
   68 D1:ACA1 EB -  -  -  	ex	de, hl
   69 D1:ACA2 18 AC -  -  	jr	InsertHL
   70 D1:ACA4 -  -  -  -  	
   71 D1:ACA4 -  -  -  -  MaybeInsertIYFlags:
   72 D1:ACA4 FD CB B0 4E 	bit	modified_iy, (iy+fAlways1)
   73 D1:ACA8 C8 -  -  -  	ret	z
   74 D1:ACA9 FD CB B0 8E 	res	modified_iy, (iy+fAlways1)
   75 D1:ACAD 3E FD -  -  	ld	a, 0FDh
   76 D1:ACAF CD 18 AD D1 	call	InsertA									; ld iy, flags
   77 D1:ACB3 3E 21 -  -  	ld	a, 021h
   78 D1:ACB5 21 80 00 D0 	ld	hl, flags
   79 D1:ACB9 C3 4C AC D1 	jp	InsertAHL								; ld iy, flags
   80 D1:ACBD -  -  -  -  	
   81 D1:ACBD -  -  -  -  MaybeChangeHLToDE:
   82 D1:ACBD 3A 3B EA D1 	ld	a, (ExprOutput)
   83 D1:ACC1 B7 -  -  -  _:	or	a, a
   84 D1:ACC2 C8 -  -  -  	ret	z
   85 D1:ACC3 3E EB -  -  	ld	a, 0EBh
   86 D1:ACC5 18 51 -  -  	jr	InsertA									; ex de, hl
   87 D1:ACC7 -  -  -  -  	
   88 D1:ACC7 -  -  -  -  MaybeChangeDEToHL:
   89 D1:ACC7 3A 3B EA D1 	ld	a, (ExprOutput)
   90 D1:ACCB EE 01 -  -  	xor	a, 1
   91 D1:ACCD 18 F2 -  -  	jr	-_
   92 D1:ACCF -  -  -  -  	
   93 D1:ACCF -  -  -  -  CGetArgumentLast:
   94 D1:ACCF 3E C2 -  -  	ld	a, 0C2h
   95 D1:ACD1 18 02 -  -  	jr	+_
   96 D1:ACD3 -  -  -  -  CGetArgument:
   97 D1:ACD3 3E CA -  -  	ld	a, 0CAh
   98 D1:ACD5 32 EA AC D1 _:	ld	(CGetArgumentLastOrNot), a
   99 D1:ACD9 22 1A EA D1 	ld	(programPtr), hl
  100 D1:ACDD F5 -  -  -  	push	af
  101 D1:ACDE CD 28 10 02 		call	_IncFetch
  102 D1:ACE2 CD 3E B2 D1 		call	ParseExpression
  103 D1:ACE6 FD CB BE 46 		bit	triggered_a_comma, (iy+fExpression3)
  104 D1:ACEA -  -  -  -  CGetArgumentLastOrNot:
  105 D1:ACEA CA 39 AF D1 		jp	z, ErrorSyntax
  106 D1:ACEE 2A 1A EA D1 		ld	hl, (programPtr)
  107 D1:ACF2 F1 -  -  -  	pop	af
  108 D1:ACF3 28 14 -  -  	jr	z, InsertPushHLDE
  109 D1:ACF5 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  110 D1:ACF9 28 0E -  -  	jr	z, InsertPushHLDE
  111 D1:ACFB 2B -  -  -  	dec	hl
  112 D1:ACFC 2B -  -  -  	dec	hl
  113 D1:ACFD 22 1A EA D1 	ld	(programPtr), hl
  114 D1:AD01 2B -  -  -  	dec	hl
  115 D1:AD02 2B -  -  -  	dec	hl
  116 D1:AD03 36 2E -  -  	ld	(hl), 02Eh								; ld l, *
  117 D1:AD05 23 -  -  -  	inc	hl
  118 D1:AD06 ED 17 -  -  	ld	de, (hl)
  119 D1:AD08 73 -  -  -  	ld	(hl), e
  120 D1:AD09 -  -  -  -  InsertPushHLDE:
  121 D1:AD09 3A 3C EA D1 	ld	a, (ExprOutput2)
  122 D1:AD0D -  -  -  -  	;or	a, a
  123 D1:AD0D -  -  -  -  	;jr	nz, +_
  124 D1:AD0D -  -  -  -  	;ld	hl, (programPtr)
  125 D1:AD0D -  -  -  -  	;dec	hl
  126 D1:AD0D -  -  -  -  	;ld	(programPtr), hl
  127 D1:AD0D 87 -  -  -  _:	add	a, a
  128 D1:AD0E 87 -  -  -  	add	a, a
  129 D1:AD0F 87 -  -  -  	add	a, a
  130 D1:AD10 87 -  -  -  	add	a, a
  131 D1:AD11 C6 D5 -  -  	add	a, 0D5h
  132 D1:AD13 2A 1A EA D1 	ld	hl, (programPtr)
  133 D1:AD17 23 -  -  -  	inc	hl
  134 D1:AD18 -  -  -  -  InsertA:
  135 D1:AD18 E5 -  -  -  	push	hl
  136 D1:AD19 2A 1A EA D1 		ld	hl, (programPtr)
  137 D1:AD1D 77 -  -  -  		ld	(hl), a
  138 D1:AD1E 23 -  -  -  		inc	hl
  139 D1:AD1F 22 1A EA D1 		ld	(programPtr), hl
  140 D1:AD23 E1 -  -  -  	pop	hl
  141 D1:AD24 C9 -  -  -  	ret
  142 D1:AD25 -  -  -  -  
  143 D1:AD25 -  -  -  -  CAddArgument:
  144 D1:AD25 C5 -  -  -  	push	bc
  145 D1:AD26 B7 -  -  -  		or	a, a
  146 D1:AD27 ED 42 -  -  		sbc	hl, bc
  147 D1:AD29 E5 -  -  -  		push	hl
  148 D1:AD2A C1 -  -  -  		pop	bc
  149 D1:AD2B E1 -  -  -  	pop	hl
  150 D1:AD2C ED B0 -  -  	ldir
  151 D1:AD2E C9 -  -  -  	ret
  152 D1:AD2F -  -  -  -  	
  153 D1:AD2F -  -  -  -  InsertProgramPtrToDataOffset:
  154 D1:AD2F D5 -  -  -  	push	de
  155 D1:AD30 2A 26 EA D1 		ld	hl, (programDataOffsetPtr)
  156 D1:AD34 ED 5B 1A EA 
              D1 -  -  -  		ld	de, (programPtr)
  157 D1:AD39 ED 1F -  -  		ld	(hl), de
  158 D1:AD3B 23 -  -  -  		inc	hl
  159 D1:AD3C 23 -  -  -  		inc	hl
  160 D1:AD3D 23 -  -  -  		inc	hl
  161 D1:AD3E 22 26 EA D1 		ld	(programDataOffsetPtr), hl
  162 D1:AD42 D1 -  -  -  	pop	de
  163 D1:AD43 C9 -  -  -  	ret
  164 D1:AD44 -  -  -  -  	
  165 D1:AD44 -  -  -  -  GetFunction:
  166 D1:AD44 C5 -  -  -  	push	bc
  167 D1:AD45 D5 -  -  -  		push	de
  168 D1:AD46 CD 4D AD D1 			call	GetRightFunction
  169 D1:AD4A D1 -  -  -  		pop	de
  170 D1:AD4B C1 -  -  -  	pop	bc
  171 D1:AD4C C9 -  -  -  	ret
  172 D1:AD4D -  -  -  -  	
  173 D1:AD4D -  -  -  -  GetRightFunction:
  174 D1:AD4D 05 -  -  -  	dec	b
  175 D1:AD4E CA 92 AD D1 	jp	z, GetFunctionWithOutputInDE
  176 D1:AD52 05 -  -  -  	dec	b
  177 D1:AD53 C2 FA AD D1 	jp	nz, GetFunctionWithOutputInBC
  178 D1:AD57 -  -  -  -  GetFunctionWithOutputInHL:
  179 D1:AD57 FE AD -  -  	cp	a, tGetKey
  180 D1:AD59 20 12 -  -  	jr	nz, FunctionHLNotGetKey
  181 D1:AD5B 21 4C 01 02 	ld	hl, _GetCSC
  182 D1:AD5F CD 6E AC D1 	call	InsertCallHL								; call _GetCSC
  183 D1:AD63 3E B7 -  -  	ld	a, 0B7h
  184 D1:AD65 21 ED 62 6F 	ld	hl, 06F62EDh
  185 D1:AD69 C3 4C AC D1 	jp	InsertAHL								; or a \ sbc hl, hl \ ld l, a
  186 D1:AD6D -  -  -  -  FunctionHLNotGetKey:
  187 D1:AD6D FE AB -  -  	cp	a, trand
  188 D1:AD6F 20 19 -  -  	jr	nz, FunctionHLGetKeyFast
  189 D1:AD71 3E D5 -  -  	ld	a, 0D5h
  190 D1:AD73 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  191 D1:AD77 C4 18 AD D1 	call	nz, InsertA								; push de
  192 D1:AD7B CD 8C AE D1 	call	InsertRandRoutine
  193 D1:AD7F FD CB C0 76 	bit	need_push, (iy+fExpression1)
  194 D1:AD83 C8 -  -  -  	ret	z
  195 D1:AD84 3E D1 -  -  	ld	a, 0D1h
  196 D1:AD86 C3 18 AD D1 	jp	InsertA									; pop de
  197 D1:AD8A -  -  -  -  FunctionHLGetKeyFast:
  198 D1:AD8A CD 2F AE D1 	call	InsertKeypadRoutine1
  199 D1:AD8E C3 54 AE D1 	jp	InsertKeypadRoutine2
  200 D1:AD92 -  -  -  -  GetFunctionWithOutputInDE:
  201 D1:AD92 FE AD -  -  	cp	a, tGetKey
  202 D1:AD94 20 2D -  -  	jr	nz, FunctionDENotGetKey
  203 D1:AD96 3E E5 -  -  	ld	a, 0E5h
  204 D1:AD98 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  205 D1:AD9C C4 18 AD D1 	call	nz, InsertA								; push hl
  206 D1:ADA0 21 4C 01 02 	ld	hl, _GetCSC
  207 D1:ADA4 CD 6E AC D1 	call	InsertCallHL								; call _GetCSC
  208 D1:ADA8 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  209 D1:ADAC 28 06 -  -  	jr	z, $+8
  210 D1:ADAE 3E E1 -  -  	ld	a, 0E1h
  211 D1:ADB0 CD 18 AD D1 	call	InsertA									; pop hl
  212 D1:ADB4 3E 11 -  -  	ld	a, 011h
  213 D1:ADB6 CD 18 AD D1 	call	InsertA									; ld de, *
  214 D1:ADBA AF -  -  -  	xor	a, a
  215 D1:ADBB 21 00 00 5F 	ld	hl, 05F0000h
  216 D1:ADBF C3 4C AC D1 	jp	InsertAHL								; ld de, 0 \ ld e, a
  217 D1:ADC3 -  -  -  -  FunctionDENotGetKey:
  218 D1:ADC3 FE AB -  -  	cp	a, trand
  219 D1:ADC5 20 1F -  -  	jr	nz, FunctionDEGetKeyFast
  220 D1:ADC7 3E E5 -  -  	ld	a, 0E5h
  221 D1:ADC9 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  222 D1:ADCD C4 18 AD D1 	call	nz, InsertA								; push hl
  223 D1:ADD1 CD 8C AE D1 	call	InsertRandRoutine
  224 D1:ADD5 -  -  -  -  FunctionDEGetKeyEnd:
  225 D1:ADD5 3E EB -  -  	ld	a, 0EBh
  226 D1:ADD7 CD 18 AD D1 	call	InsertA									; ex de, hl
  227 D1:ADDB FD CB C0 76 	bit	need_push, (iy+fExpression1)
  228 D1:ADDF C8 -  -  -  	ret	z
  229 D1:ADE0 3E E1 -  -  	ld	a, 0E1h
  230 D1:ADE2 C3 18 AD D1 	jp	InsertA									; pop hl
  231 D1:ADE6 -  -  -  -  FunctionDEGetKeyFast:
  232 D1:ADE6 CD 2F AE D1 	call	InsertKeypadRoutine1
  233 D1:ADEA 3E E5 -  -  	ld	a, 0E5h
  234 D1:ADEC FD CB C0 76 	bit	need_push, (iy+fExpression1)
  235 D1:ADF0 C4 18 AD D1 	call	nz, InsertA								; push hl
  236 D1:ADF4 CD 54 AE D1 	call	InsertKeypadRoutine2
  237 D1:ADF8 18 DB -  -  	jr	FunctionDEGetKeyEnd
  238 D1:ADFA -  -  -  -  GetFunctionWithOutputInBC:
  239 D1:ADFA FE AD -  -  	cp	a, tGetKey
  240 D1:ADFC 20 17 -  -  	jr	nz, FunctionBCNotGetKey
  241 D1:ADFE 21 4C 01 02 	ld	hl, _GetCSC
  242 D1:AE02 CD 6E AC D1 	call	InsertCallHL								; call _GetCSC
  243 D1:AE06 3E 01 -  -  	ld	a, 001h
  244 D1:AE08 CD 18 AD D1 	call	InsertA									; ld bc, *
  245 D1:AE0C AF -  -  -  	xor	a, a
  246 D1:AE0D 21 00 00 4F 	ld	hl, 04F0000h
  247 D1:AE11 C3 4C AC D1 	jp	InsertAHL								; ld bc, 0 \ ld c, a
  248 D1:AE15 -  -  -  -  FunctionBCNotGetKey:
  249 D1:AE15 FE AB -  -  	cp	a, trand
  250 D1:AE17 20 0C -  -  	jr	nz, FunctionBCGetKeyFast
  251 D1:AE19 CD 8C AE D1 	call	InsertRandRoutine
  252 D1:AE1D -  -  -  -  FunctionBCHLToBC:
  253 D1:AE1D 06 E5 -  -  	ld	b, 0E5h
  254 D1:AE1F 0E C1 -  -  	ld	c, 0C1h
  255 D1:AE21 C3 61 AC D1 	jp	InsertBC								; push hl \ pop bc
  256 D1:AE25 -  -  -  -  FunctionBCGetKeyFast:
  257 D1:AE25 CD 2F AE D1 	call	InsertKeypadRoutine1
  258 D1:AE29 CD 54 AE D1 	call	InsertKeypadRoutine2
  259 D1:AE2D 18 EE -  -  	jr	FunctionBCHLToBC
  260 D1:AE2F -  -  -  -  	
  261 D1:AE2F -  -  -  -  InsertKeypadRoutine1:
  262 D1:AE2F 47 -  -  -  	ld	b, a
  263 D1:AE30 3E 06 -  -  	ld	a, 006h
  264 D1:AE32 CD 18 AD D1 	call	InsertA									; ld b, *
  265 D1:AE36 78 -  -  -  	ld	a, b									; A = ((A >> 3) & 7) << 1
  266 D1:AE37 3D -  -  -  	dec	a									; A = (A >> 2) & 7 << 1
  267 D1:AE38 0F -  -  -  	rrca										; A = (A >> 2) & 14
  268 D1:AE39 0F -  -  -  	rrca
  269 D1:AE3A E6 0E -  -  	and	a, 00001110b
  270 D1:AE3C 4F -  -  -  	ld	c, a
  271 D1:AE3D 3E 1E -  -  	ld	a, (keyData + 14) & 0FFh
  272 D1:AE3F 91 -  -  -  	sub	a, c
  273 D1:AE40 47 -  -  -  	ld	b, a
  274 D1:AE41 0E 0E -  -  	ld	c, 00Eh
  275 D1:AE43 CD 61 AC D1 	call	InsertBC								; ld b, X \ ld c, *
  276 D1:AE47 78 -  -  -  	ld	a, b
  277 D1:AE48 E6 07 -  -  	and	a, 000000111b
  278 D1:AE4A 47 -  -  -  	ld	b, a
  279 D1:AE4B AF -  -  -  	xor	a, a
  280 D1:AE4C 37 -  -  -  	scf
  281 D1:AE4D 17 -  -  -  _:	rla
  282 D1:AE4E 10 FD -  -  	djnz	-_
  283 D1:AE50 C3 18 AD D1 	jp	InsertA									; ld c, X
  284 D1:AE54 -  -  -  -  	
  285 D1:AE54 -  -  -  -  InsertKeypadRoutine2:
  286 D1:AE54 3E CD -  -  	ld	a, 0CDh
  287 D1:AE56 CD 18 AD D1 	call	InsertA									; call *
  288 D1:AE5A CD 2F AD D1 	call	InsertProgramPtrToDataOffset
  289 D1:AE5E 2A 2D EA D0 	ld	hl, (KeypadStartData)
  290 D1:AE62 FD CB D0 76 	bit	has_already_keypad, (iy+fProgram1)
  291 D1:AE66 C2 50 AC D1 	jp	nz, InsertHL								; call XXXXXX
  292 D1:AE6A 2A 2F EA D1 	ld	hl, (programDataDataPtr)
  293 D1:AE6E 22 2D EA D0 	ld	(KeypadStartData), hl
  294 D1:AE72 E5 -  -  -  	push	hl
  295 D1:AE73 D1 -  -  -  	pop	de
  296 D1:AE74 CD 50 AC D1 	call	InsertHL								; call *
  297 D1:AE78 21 DB ED D1 	ld	hl, KeypadRoutine
  298 D1:AE7C 01 14 00 00 	ld	bc, KeypadRoutineEnd - KeypadRoutine
  299 D1:AE80 ED B0 -  -  	ldir
  300 D1:AE82 ED 53 2F EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
  301 D1:AE87 FD CB D0 F6 	set	has_already_keypad, (iy+fProgram1)
  302 D1:AE8B C9 -  -  -  	ret
  303 D1:AE8C -  -  -  -  	
  304 D1:AE8C -  -  -  -  InsertRandRoutine:
  305 D1:AE8C 3E CD -  -  	ld	a, 0CDh
  306 D1:AE8E CD 18 AD D1 	call	InsertA									; call *
  307 D1:AE92 CD 2F AD D1 	call	InsertProgramPtrToDataOffset
  308 D1:AE96 2A 24 EA D0 	ld	hl, (RandStartData)
  309 D1:AE9A FD CB D0 5E 	bit	has_already_rand, (iy+fProgram1)
  310 D1:AE9E C2 50 AC D1 	jp	nz, InsertHL								; call XXXXXX
  311 D1:AEA2 2A 2F EA D1 	ld	hl, (programDataDataPtr)
  312 D1:AEA6 22 24 EA D0 	ld	(RandStartData), hl
  313 D1:AEAA E5 -  -  -  	push	hl
  314 D1:AEAB D1 -  -  -  	pop	de
  315 D1:AEAC CD 50 AC D1 	call	InsertHL								; call XXXXXX
  316 D1:AEB0 21 5F ED D1 	ld	hl, RandRoutine
  317 D1:AEB4 01 36 00 00 	ld	bc, RandRoutineEnd - RandRoutine
  318 D1:AEB8 ED B0 -  -  	ldir
  319 D1:AEBA ED 53 2F EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
  320 D1:AEBF FD CB D0 DE 	set	has_already_rand, (iy+fProgram1)
  321 D1:AEC3 C9 -  -  -  	ret
  322 D1:AEC4 -  -  -  -  	
  323 D1:AEC4 -  -  -  -  CompareStrings:
  324 D1:AEC4 1A -  -  -  	ld	a, (de)
  325 D1:AEC5 FE 3F -  -  	cp	a, tEnter
  326 D1:AEC7 C8 -  -  -  	ret	z
  327 D1:AEC8 BE -  -  -  	cp	a, (hl)
  328 D1:AEC9 23 -  -  -  	inc	hl
  329 D1:AECA 13 -  -  -  	inc	de
  330 D1:AECB C0 -  -  -  	ret	nz
  331 D1:AECC 18 F6 -  -  	jr	CompareStrings
  332 D1:AECE -  -  -  -  	
  333 D1:AECE -  -  -  -  SubError:
  334 D1:AECE 3E 2D -  -  	ld	a, '-'
  335 D1:AED0 18 4D -  -  	jr	DispOperatorErrorString
  336 D1:AED2 -  -  -  -  AddError:
  337 D1:AED2 3E 2B -  -  	ld	a, '+'
  338 D1:AED4 18 49 -  -  	jr	DispOperatorErrorString
  339 D1:AED6 -  -  -  -  DivError:
  340 D1:AED6 3E 2F -  -  	ld	a, '/'
  341 D1:AED8 18 45 -  -  	jr	DispOperatorErrorString
  342 D1:AEDA -  -  -  -  MulError:
  343 D1:AEDA 3E 2A -  -  	ld	a, '*'
  344 D1:AEDC 18 41 -  -  	jr	DispOperatorErrorString
  345 D1:AEDE -  -  -  -  	
  346 D1:AEDE -  -  -  -  GLETError:
  347 D1:AEDE 3A 20 EA D0 	ld	a, (tempToken2)
  348 D1:AEE2 FE 6E -  -  	cp	a, tGE
  349 D1:AEE4 0E 19 -  -  	ld	c, 019h
  350 D1:AEE6 28 36 -  -  	jr	z, DispOperatorErrorString2
  351 D1:AEE8 FE 6D -  -  	cp	a, tLE
  352 D1:AEEA 0E 17 -  -  	ld	c, 017h
  353 D1:AEEC 28 30 -  -  	jr	z, DispOperatorErrorString2
  354 D1:AEEE FE 6C -  -  	cp	a, tGT
  355 D1:AEF0 0E 3E -  -  	ld	c, '>'
  356 D1:AEF2 28 2A -  -  	jr	z, DispOperatorErrorString2
  357 D1:AEF4 3E 3C -  -  	ld	a, '<'
  358 D1:AEF6 18 27 -  -  	jr	DispOperatorErrorString
  359 D1:AEF8 -  -  -  -  
  360 D1:AEF8 -  -  -  -  NEQError:
  361 D1:AEF8 3A 20 EA D0 	ld	a, (tempToken2)
  362 D1:AEFC FE 6A -  -  	cp	a, tEq
  363 D1:AEFE 3E 3D -  -  	ld	a, '='
  364 D1:AF00 28 1D -  -  	jr	z, DispOperatorErrorString
  365 D1:AF02 3E 18 -  -  	ld	a, 018h
  366 D1:AF04 18 19 -  -  	jr	DispOperatorErrorString
  367 D1:AF06 -  -  -  -  XORANDError:
  368 D1:AF06 3A 20 EA D0 	ld	a, (tempToken2)
  369 D1:AF0A FE 3C -  -  	cp	a, tOr
  370 D1:AF0C 0E 7C -  -  	ld	c, '|'
  371 D1:AF0E 28 0E -  -  	jr	z, DispOperatorErrorString2
  372 D1:AF10 FE 3D -  -  	cp	a, tXor
  373 D1:AF12 0E 5E -  -  	ld	c, '^'
  374 D1:AF14 28 08 -  -  	jr	z, DispOperatorErrorString2
  375 D1:AF16 3E 26 -  -  	ld	a, '&'
  376 D1:AF18 18 05 -  -  	jr	DispOperatorErrorString
  377 D1:AF1A -  -  -  -  StoError:
  378 D1:AF1A 3E 1C -  -  	ld	a, 01Ch
  379 D1:AF1C 18 01 -  -  	jr	DispOperatorErrorString
  380 D1:AF1E -  -  -  -  	
  381 D1:AF1E -  -  -  -  DispOperatorErrorString2:
  382 D1:AF1E 79 -  -  -  	ld	a, c
  383 D1:AF1F -  -  -  -  DispOperatorErrorString:
  384 D1:AF1F F5 -  -  -  	push	af
  385 D1:AF20 CD 4F B0 D1 		call	ClearScreen
  386 D1:AF24 21 AA EA D1 		ld	hl, ErrorMessageStandard
  387 D1:AF28 CD 85 B0 D1 		call	PrintString
  388 D1:AF2C F1 -  -  -  	pop	af
  389 D1:AF2D CD C2 B7 D1 	call	_PrintChar_ASM
  390 D1:AF31 3E 27 -  -  	ld	a, '\''
  391 D1:AF33 CD C2 B7 D1 	call	_PrintChar_ASM
  392 D1:AF37 18 66 -  -  	jr	ReturnToOS
  393 D1:AF39 -  -  -  -  	
  394 D1:AF39 -  -  -  -  ErrorSyntax:
  395 D1:AF39 21 E9 EB D1 	ld	hl, SyntaxErrorMessage
  396 D1:AF3D 18 56 -  -  	jr	DispFinalString
  397 D1:AF3F -  -  -  -  MismatchError:
  398 D1:AF3F 21 57 EC D1 	ld	hl, MismatchErrorMessage
  399 D1:AF43 18 50 -  -  	jr	DispFinalString
  400 D1:AF45 -  -  -  -  NoProgramsError:
  401 D1:AF45 21 E7 EA D1 	ld	hl, NoProgramsMessage
  402 D1:AF49 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
  403 D1:AF4D 18 46 -  -  	jr	DispFinalString
  404 D1:AF4F -  -  -  -  InvalidTokenError:
  405 D1:AF4F 21 FA EA D1 	ld	hl, InvalidTokenMessage
  406 D1:AF53 18 40 -  -  	jr	DispFinalString
  407 D1:AF55 -  -  -  -  InvalidNameLength:
  408 D1:AF55 21 2F EB D1 	ld	hl, InvalidNameLengthMessage
  409 D1:AF59 18 3A -  -  	jr	DispFinalString
  410 D1:AF5B -  -  -  -  ErrorNotFound:
  411 D1:AF5B 21 AA EB D1 	ld	hl, NotFoundMessage
  412 D1:AF5F 18 34 -  -  	jr	DispFinalString
  413 D1:AF61 -  -  -  -  ErrorUsedCode:
  414 D1:AF61 21 1E EC D1 	ld	hl, UsedCodeMessage
  415 D1:AF65 18 2E -  -  	jr	DispFinalString
  416 D1:AF67 -  -  -  -  SameNameError:
  417 D1:AF67 21 46 EB D1 	ld	hl, SameNameMessage
  418 D1:AF6B 18 28 -  -  	jr	DispFinalString
  419 D1:AF6D -  -  -  -  FunctionError:
  420 D1:AF6D 21 82 EB D1 	ld	hl, FunctionFunctionMessage
  421 D1:AF71 18 22 -  -  	jr	DispFinalString
  422 D1:AF73 -  -  -  -  UnknownError:
  423 D1:AF73 21 6F EC D1 	ld	hl, UnknownMessage
  424 D1:AF77 18 1C -  -  	jr	DispFinalString
  425 D1:AF79 -  -  -  -  WrongSpriteDataError:
  426 D1:AF79 21 6D EB D1 	ld	hl, WrongSpriteDataMessgae
  427 D1:AF7D 18 16 -  -  	jr	DispFinalString
  428 D1:AF7F -  -  -  -  ImplementError:
  429 D1:AF7F 21 BD EB D1 	ld	hl, ImplementMessage
  430 D1:AF83 18 10 -  -  	jr	DispFinalString
  431 D1:AF85 -  -  -  -  EndError:
  432 D1:AF85 21 C2 EA D1 	ld	hl, EndErrorMessage
  433 D1:AF89 18 0A -  -  	jr	DispFinalString
  434 D1:AF8B -  -  -  -  ErrorTooLargeLoop:
  435 D1:AF8B 21 04 EC D1 	ld	hl, TooLargeLoopMessage
  436 D1:AF8F 18 04 -  -  	jr	DispFinalString
  437 D1:AF91 -  -  -  -  LabelError:
  438 D1:AF91 21 AC EC D1 	ld	hl, LabelErrorMessage
  439 D1:AF95 -  -  -  -  DispFinalString:
  440 D1:AF95 E5 -  -  -  	push	hl
  441 D1:AF96 CD 4F B0 D1 		call	ClearScreen
  442 D1:AF9A E1 -  -  -  	pop	hl
  443 D1:AF9B CD 85 B0 D1 	call	PrintString
  444 D1:AF9F -  -  -  -  ReturnToOS:
  445 D1:AF9F FD CB D0 4E 	bit	good_compilation, (iy+fProgram1)
  446 D1:AFA3 20 51 -  -  	jr	nz, SkipDisplayLineNumber
  447 D1:AFA5 3E 15 -  -  	ld	a, 21
  448 D1:AFA7 32 F5 B7 D1 	ld	(TextYPos_ASM), a
  449 D1:AFAB 21 01 00 00 	ld	hl, 1
  450 D1:AFAF 22 C4 B7 D1 	ld	(TextXPos_ASM), hl
  451 D1:AFB3 21 48 EC D1 	ld	hl, LineNumber
  452 D1:AFB7 CD 85 B0 D1 	call	PrintString
  453 D1:AFBB 2A 1A 23 D0 	ld	hl, (curPC)
  454 D1:AFBF ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  455 D1:AFC4 B7 -  -  -  	or	a, a
  456 D1:AFC5 ED 52 -  -  	sbc	hl, de
  457 D1:AFC7 E5 -  -  -  	push	hl
  458 D1:AFC8 C1 -  -  -  	pop	bc
  459 D1:AFC9 ED 62 -  -  	sbc	hl, hl
  460 D1:AFCB 23 -  -  -  	inc	hl
  461 D1:AFCC EB -  -  -  	ex	de, hl
  462 D1:AFCD -  -  -  -  GetAmountOfLines:
  463 D1:AFCD 78 -  -  -  	ld	a, b
  464 D1:AFCE B1 -  -  -  	or	a, c
  465 D1:AFCF 28 09 -  -  	jr	z, GetAmountOfLinesStop
  466 D1:AFD1 3E 3F -  -  	ld	a, tEnter
  467 D1:AFD3 ED B1 -  -  	cpir
  468 D1:AFD5 20 03 -  -  	jr	nz, GetAmountOfLinesStop
  469 D1:AFD7 13 -  -  -  	inc	de
  470 D1:AFD8 18 F3 -  -  	jr	GetAmountOfLines
  471 D1:AFDA -  -  -  -  GetAmountOfLinesStop:
  472 D1:AFDA EB -  -  -  	ex	de, hl
  473 D1:AFDB AF -  -  -  	xor	a
  474 D1:AFDC 11 18 06 D0 	ld	de, OP3+10
  475 D1:AFE0 12 -  -  -  	ld	(de), a
  476 D1:AFE1 -  -  -  -  NumberToStringLoop:
  477 D1:AFE1 3E 0A -  -  	ld	a, 10
  478 D1:AFE3 CD 90 1D 02 	call	_DivHLByA
  479 D1:AFE7 C6 30 -  -  	add	a, t0
  480 D1:AFE9 1B -  -  -  	dec	de
  481 D1:AFEA 12 -  -  -  	ld	(de), a
  482 D1:AFEB 19 -  -  -  	add	hl, de
  483 D1:AFEC B7 -  -  -  	or	a, a
  484 D1:AFED ED 52 -  -  	sbc	hl, de
  485 D1:AFEF 20 F0 -  -  	jr	nz, NumberToStringLoop
  486 D1:AFF1 EB -  -  -  	ex	de, hl
  487 D1:AFF2 CD 85 B0 D1 	call	PrintString
  488 D1:AFF6 -  -  -  -  SkipDisplayLineNumber:
  489 D1:AFF6 3E E6 -  -  	ld	a, 230
  490 D1:AFF8 32 F5 B7 D1 	ld	(TextYPos_ASM), a
  491 D1:AFFC 21 55 00 00 	ld	hl, 85
  492 D1:B000 22 C4 B7 D1 	ld	(TextXPos_ASM), hl
  493 D1:B004 21 05 ED D1 	ld	hl, PressKey
  494 D1:B008 CD 85 B0 D1 	call	PrintString
  495 D1:B00C CD 8C 0D 02 	call	_GetKey
  496 D1:B010 -  -  -  -  StopProgram:
  497 D1:B010 2A 1A 23 D0 	ld	hl, (curPC)
  498 D1:B014 ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  499 D1:B019 37 -  -  -  	scf
  500 D1:B01A ED 52 -  -  	sbc	hl, de
  501 D1:B01C 40 22 E3 08 	ld.sis	(errOffset - 0D00000h), hl
  502 D1:B020 -  -  -  -  backupSP = $+1
  503 D1:B020 31 00 00 00 	ld	sp, 0
  504 D1:B024 -  -  -  -  backupBegPC = $+1
  505 D1:B024 21 00 00 00 	ld	hl, 0
  506 D1:B028 22 17 23 D0 	ld	(begPC), hl
  507 D1:B02C -  -  -  -  backupCurPC = $+1
  508 D1:B02C 21 00 00 00 	ld	hl, 0
  509 D1:B030 22 1A 23 D0 	ld	(curPC), hl
  510 D1:B034 -  -  -  -  backupEndPC = $+1
  511 D1:B034 21 00 00 00 	ld	hl, 0
  512 D1:B038 22 1D 23 D0 	ld	(endPC), hl
  513 D1:B03C CD 08 08 02 	call	_ClrLCDFull
  514 D1:B040 CD 28 08 02 	call	_HomeUp
  515 D1:B044 3E 2D -  -  	ld	a, lcdBpp16
  516 D1:B046 32 18 00 E3 	ld	(mpLcdCtrl), a
  517 D1:B04A CD 3C 1A 02 	call	_DrawStatusBar
  518 D1:B04E C9 -  -  -  	ret
  519 D1:B04F -  -  -  -  ;	bit	good_compilation, (iy+fProgram1)
  520 D1:B04F -  -  -  -  ;	ret	nz
  521 D1:B04F -  -  -  -  ;#include "editor.asm"
  522 D1:B04F -  -  -  -  	
  523 D1:B04F -  -  -  -  ClearScreen:
  524 D1:B04F 21 00 0F D4 	ld	hl, vRAM+(320*12)
  525 D1:B053 36 FF -  -  	ld	(hl), 255
  526 D1:B055 E5 -  -  -  	push	hl
  527 D1:B056 D1 -  -  -  	pop	de
  528 D1:B057 13 -  -  -  	inc	de
  529 D1:B058 01 FF 1C 01 	ld	bc, 320*228-1
  530 D1:B05C ED B0 -  -  	ldir
  531 D1:B05E 03 -  -  -  	inc	bc
  532 D1:B05F ED 43 C4 B7 
              D1 -  -  -  	ld	(TextXPos_ASM), bc
  533 D1:B064 3E 0C -  -  	ld	a, 12
  534 D1:B066 32 F5 B7 D1 	ld	(TextYPos_ASM), a
  535 D1:B06A AF -  -  -  	xor	a, a
  536 D1:B06B 32 1A B8 D1 	ld	(color), a
  537 D1:B06F C9 -  -  -  	ret
  538 D1:B070 -  -  -  -  	
  539 D1:B070 -  -  -  -  PrintCompilingProgram:
  540 D1:B070 AF -  -  -  	xor	a, a
  541 D1:B071 32 01 06 D0 	ld	(OP1+9), a
  542 D1:B075 CD 4F B0 D1 	call	ClearScreen
  543 D1:B079 21 C7 EC D1 	ld	hl, StartParseMessage
  544 D1:B07D CD 85 B0 D1 	call	PrintString
  545 D1:B081 21 F9 05 D0 	ld	hl, OP1+1
  546 D1:B085 -  -  -  -  	
  547 D1:B085 -  -  -  -  PrintString:
  548 D1:B085 7E -  -  -  	ld	a, (hl)
  549 D1:B086 23 -  -  -  	inc	hl
  550 D1:B087 B7 -  -  -  	or	a, a
  551 D1:B088 C4 C2 B7 D1 	call	nz, _PrintChar_ASM
  552 D1:B08C 20 F7 -  -  	jr	nz, PrintString
  553 D1:B08E C9 -  -  -  	ret
  554 D1:B08F -  -  -  -  	
  555 D1:B08F -  -  -  -  PreScanPrograms:
  556 D1:B08F 2A 1D 23 D0 	ld	hl, (endPC)
  557 D1:B093 ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  558 D1:B098 B7 -  -  -  	or	a, a
  559 D1:B099 ED 52 -  -  	sbc	hl, de
  560 D1:B09B 23 -  -  -  	inc	hl
  561 D1:B09C E5 -  -  -  	push	hl
  562 D1:B09D C1 -  -  -  	pop	bc
  563 D1:B09E 2A 1A 23 D0 	ld	hl, (curPC)
  564 D1:B0A2 -  -  -  -  ScanLoop:
  565 D1:B0A2 78 -  -  -  	ld	a, b
  566 D1:B0A3 B1 -  -  -  	or	a, c
  567 D1:B0A4 C8 -  -  -  	ret	z
  568 D1:B0A5 7E -  -  -  	ld	a, (hl)
  569 D1:B0A6 CD AC 04 02 	call	_IsA2ByteTok
  570 D1:B0AA 20 02 -  -  	jr	nz, +_
  571 D1:B0AC 23 -  -  -  	inc	hl
  572 D1:B0AD 0B -  -  -  	dec	bc
  573 D1:B0AE 23 -  -  -  _:	inc	hl
  574 D1:B0AF 0B -  -  -  	dec	bc
  575 D1:B0B0 FE B3 -  -  	cp	a, tDet
  576 D1:B0B2 28 2D -  -  	jr	z, ScanFoundDet
  577 D1:B0B4 FE D8 -  -  	cp	a, tPause
  578 D1:B0B6 28 13 -  -  	jr	z, ScanFoundPause
  579 D1:B0B8 FE BC -  -  	cp	a, tSqrt
  580 D1:B0BA 28 1A -  -  	jr	z, ScanFoundRoot
  581 D1:B0BC FE DC -  -  	cp	a, tInput
  582 D1:B0BE 20 E2 -  -  	jr	nz, ScanLoop
  583 D1:B0C0 -  -  -  -  ScanFoundInput:
  584 D1:B0C0 3A 38 EA D1 	ld	a, (amountOfInput)
  585 D1:B0C4 3C -  -  -  	inc	a
  586 D1:B0C5 32 38 EA D1 	ld	(amountOfInput), a
  587 D1:B0C9 18 D7 -  -  	jr	ScanLoop
  588 D1:B0CB -  -  -  -  ScanFoundPause:
  589 D1:B0CB 3A 39 EA D1 	ld	a, (amountOfPause)
  590 D1:B0CF 3C -  -  -  	inc	a
  591 D1:B0D0 32 39 EA D1 	ld	(amountOfPause), a
  592 D1:B0D4 18 CC -  -  	jr	ScanLoop
  593 D1:B0D6 -  -  -  -  ScanFoundRoot:
  594 D1:B0D6 3A 3A EA D1 	ld	a, (amountOfRoot)
  595 D1:B0DA 3C -  -  -  	inc	a
  596 D1:B0DB 32 3A EA D1 	ld	(amountOfRoot), a
  597 D1:B0DF 18 C1 -  -  	jr	ScanLoop
  598 D1:B0E1 -  -  -  -  ScanFoundDet:
  599 D1:B0E1 7E -  -  -  	ld	a, (hl)
  600 D1:B0E2 D6 30 -  -  	sub	a, t0
  601 D1:B0E4 38 BC -  -  	jr	c, ScanLoop
  602 D1:B0E6 FE 0A -  -  	cp	a, t9-t0+1
  603 D1:B0E8 30 B8 -  -  	jr	nc, ScanLoop
  604 D1:B0EA 11 00 00 00 	ld	de, 0
  605 D1:B0EE 5F -  -  -  	ld	e, a
  606 D1:B0EF 23 -  -  -  	inc	hl
  607 D1:B0F0 0B -  -  -  	dec	bc
  608 D1:B0F1 78 -  -  -  	ld	a, b
  609 D1:B0F2 B1 -  -  -  	or	a, c
  610 D1:B0F3 28 21 -  -  	jr	z, FoundRightCFunction
  611 D1:B0F5 7E -  -  -  	ld	a, (hl)
  612 D1:B0F6 FE 2B -  -  	cp	a, tComma
  613 D1:B0F8 28 1C -  -  	jr	z, FoundRightCFunction
  614 D1:B0FA FE 3F -  -  	cp	a, tEnter
  615 D1:B0FC 28 18 -  -  	jr	z, FoundRightCFunction
  616 D1:B0FE D6 30 -  -  	sub	a, t0
  617 D1:B100 38 14 -  -  	jr	c, FoundRightCFunction
  618 D1:B102 FE 0A -  -  	cp	a, t9-t0+1
  619 D1:B104 30 10 -  -  	jr	nc, FoundRightCFunction
  620 D1:B106 E5 -  -  -  	push	hl
  621 D1:B107 EB -  -  -  		ex	de, hl
  622 D1:B108 29 -  -  -  		add	hl, hl
  623 D1:B109 E5 -  -  -  		push	hl
  624 D1:B10A D1 -  -  -  		pop	de
  625 D1:B10B 29 -  -  -  		add	hl, hl
  626 D1:B10C 29 -  -  -  		add	hl, hl
  627 D1:B10D 19 -  -  -  		add	hl, de
  628 D1:B10E 11 00 00 00 		ld	de, 0
  629 D1:B112 5F -  -  -  		ld	e, a
  630 D1:B113 19 -  -  -  		add	hl, de
  631 D1:B114 EB -  -  -  		ex	de, hl
  632 D1:B115 E1 -  -  -  	pop	hl
  633 D1:B116 -  -  -  -  FoundRightCFunction:
  634 D1:B116 E5 -  -  -  	push	hl
  635 D1:B117 EB -  -  -  		ex	de, hl
  636 D1:B118 11 54 00 00 		ld	de, AMOUNT_OF_C_FUNCTIONS
  637 D1:B11C B7 -  -  -  		or	a, a
  638 D1:B11D ED 52 -  -  		sbc	hl, de
  639 D1:B11F 30 1F -  -  		jr	nc,  WrongCFunction
  640 D1:B121 19 -  -  -  		add	hl, de
  641 D1:B122 EB -  -  -  		ex	de, hl
  642 D1:B123 21 48 EA D1 		ld	hl, usedCroutines
  643 D1:B127 19 -  -  -  		add	hl, de
  644 D1:B128 7E -  -  -  		ld	a, (hl)
  645 D1:B129 B7 -  -  -  		or	a
  646 D1:B12A 20 14 -  -  		jr	nz, FunctionAlreadyInProgram
  647 D1:B12C -  -  -  -  AddCFunctionToProgram:
  648 D1:B12C 3A 36 EA D1 		ld	a, (amountOfCRoutines)
  649 D1:B130 3C -  -  -  		inc	a
  650 D1:B131 77 -  -  -  		ld	(hl), a
  651 D1:B132 32 36 EA D1 		ld	(amountOfCRoutines), a
  652 D1:B136 3E C3 -  -  		ld	a, 0C3h
  653 D1:B138 D5 -  -  -  		push	de
  654 D1:B139 E1 -  -  -  		pop	hl
  655 D1:B13A 29 -  -  -  		add	hl, hl
  656 D1:B13B 19 -  -  -  		add	hl, de
  657 D1:B13C CD 4C AC D1 		call	InsertAHL																; jp *
  658 D1:B140 -  -  -  -  FunctionAlreadyInProgram:
  659 D1:B140 -  -  -  -  WrongCFunction:
  660 D1:B140 E1 -  -  -  	pop	hl
  661 D1:B141 C3 A2 B0 D1 	jp	ScanLoop
  662 D1:B145 -  -  -  -  
  663 D1:B145 -  -  -  -  GetSpriteData:
  664 D1:B145 B7 -  -  -  	or	a, a
  665 D1:B146 ED 52 -  -  	sbc	hl, de
  666 D1:B148 C8 -  -  -  	ret	z
  667 D1:B149 19 -  -  -  	add	hl, de
  668 D1:B14A 1A -  -  -  	ld	a, (de)
  669 D1:B14B D6 30 -  -  	sub	a, t0
  670 D1:B14D DA 79 AF D1 	jp	c, WrongSpriteDataError
  671 D1:B151 FE 11 -  -  	cp	a, tA-t0
  672 D1:B153 38 0A -  -  	jr	c, +_
  673 D1:B155 D6 11 -  -  	sub	a, tA-t0
  674 D1:B157 FE 06 -  -  	cp	a, tG-tA
  675 D1:B159 D2 79 AF D1 	jp	nc, WrongSpriteDataError
  676 D1:B15D C6 0A -  -  	add	a, 10
  677 D1:B15F 87 -  -  -  _:	add	a, a
  678 D1:B160 87 -  -  -  	add	a, a
  679 D1:B161 87 -  -  -  	add	a, a
  680 D1:B162 87 -  -  -  	add	a, a
  681 D1:B163 DD 67 -  -  	ld	ixh, a
  682 D1:B165 13 -  -  -  	inc	de
  683 D1:B166 B7 -  -  -  	or	a
  684 D1:B167 ED 52 -  -  	sbc	hl, de
  685 D1:B169 CA 39 AF D1 	jp	z, ErrorSyntax
  686 D1:B16D 19 -  -  -  	add	hl, de
  687 D1:B16E 1A -  -  -  	ld	a, (de)
  688 D1:B16F D6 30 -  -  	sub	t0
  689 D1:B171 DA 79 AF D1 	jp	c, WrongSpriteDataError
  690 D1:B175 FE 11 -  -  	cp	a, tA-t0
  691 D1:B177 38 0A -  -  	jr	c, +_
  692 D1:B179 D6 11 -  -  	sub	a, tA-t0
  693 D1:B17B FE 06 -  -  	cp	a, tG-tA
  694 D1:B17D D2 79 AF D1 	jp	nc, WrongSpriteDataError
  695 D1:B181 C6 0A -  -  	add	a, 10
  696 D1:B183 DD B4 -  -  _:	or	a, ixh
  697 D1:B185 02 -  -  -  	ld	(bc), a
  698 D1:B186 03 -  -  -  	inc	bc
  699 D1:B187 13 -  -  -  	inc	de
  700 D1:B188 18 BB -  -  	jr	GetSpriteData
  701 D1:B18A -  -  -  -  	
  702 D1:B18A -  -  -  -  UpdateSpritePointers:
  703 D1:B18A C5 -  -  -  	push	bc
  704 D1:B18B 2A 1A EA D1 		ld	hl, (programPtr)
  705 D1:B18F ED 5B 33 EA 
              D0 -  -  -  		ld	de, (PrevProgramPtr)
  706 D1:B194 B7 -  -  -  		or	a, a
  707 D1:B195 ED 52 -  -  		sbc	hl, de
  708 D1:B197 EB -  -  -  		ex	de, hl
  709 D1:B198 01 F4 FF FF 		ld	bc, -12
  710 D1:B19C 09 -  -  -  		add	hl, bc
  711 D1:B19D E5 -  -  -  		push	hl
  712 D1:B19E ED 27 -  -  			ld	hl, (hl)
  713 D1:B1A0 19 -  -  -  			add	hl, de
  714 D1:B1A1 EB -  -  -  			ex	de, hl
  715 D1:B1A2 E1 -  -  -  		pop	hl
  716 D1:B1A3 ED 1F -  -  		ld	(hl), de
  717 D1:B1A5 C1 -  -  -  	pop	bc
  718 D1:B1A6 C9 -  -  -  	ret
  719 D1:B1A7 -  -  -  -  	
  720 D1:B1A7 -  -  -  -  GetProgramName:
  721 D1:B1A7 E5 -  -  -  	push	hl
  722 D1:B1A8 CD 28 10 02 		call	_IncFetch
  723 D1:B1AC E1 -  -  -  	pop	hl
  724 D1:B1AD DA 55 AF D1 	jp	c, InvalidNameLength
  725 D1:B1B1 23 -  -  -  	inc	hl
  726 D1:B1B2 FE 3F -  -  	cp	a, tEnter
  727 D1:B1B4 CA 55 AF D1 	jp	z, InvalidNameLength
  728 D1:B1B8 FE 41 -  -  	cp	a, tA
  729 D1:B1BA DA 4F AF D1 	jp	c, InvalidTokenError
  730 D1:B1BE FE 5C -  -  	cp	a, ttheta+1
  731 D1:B1C0 D2 4F AF D1 	jp	nc, InvalidTokenError
  732 D1:B1C4 77 -  -  -  	ld	(hl), a
  733 D1:B1C5 1E 08 -  -  	ld	e, 8
  734 D1:B1C7 -  -  -  -  GetProgramNameLoop:
  735 D1:B1C7 E5 -  -  -  	push	hl
  736 D1:B1C8 CD 28 10 02 		call	_IncFetch
  737 D1:B1CC E1 -  -  -  	pop	hl
  738 D1:B1CD 23 -  -  -  	inc	hl
  739 D1:B1CE 36 00 -  -  	ld	(hl), 0
  740 D1:B1D0 D8 -  -  -  	ret	c
  741 D1:B1D1 FE 3F -  -  	cp	a, tEnter
  742 D1:B1D3 C8 -  -  -  	ret	z
  743 D1:B1D4 FE 30 -  -  	cp	a, t0
  744 D1:B1D6 DA 4F AF D1 _:	jp	c, InvalidTokenError
  745 D1:B1DA FE 3A -  -  	cp	a, t9+1
  746 D1:B1DC 38 0A -  -  	jr	c, +_
  747 D1:B1DE FE 41 -  -  	cp	a, tA
  748 D1:B1E0 38 F4 -  -  	jr	c, -_
  749 D1:B1E2 FE 5C -  -  	cp	a, ttheta+1
  750 D1:B1E4 D2 4F AF D1 	jp	nc, InvalidTokenError
  751 D1:B1E8 77 -  -  -  _:	ld	(hl), a
  752 D1:B1E9 1D -  -  -  	dec	e
  753 D1:B1EA 20 DB -  -  	jr	nz, GetProgramNameLoop
  754 D1:B1EC C3 55 AF D1 	jp	InvalidNameLength
Listing for file "ice.asm"
  442 D1:B1F0 -  -  -  -  #include "parse.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
    1 D1:B1F0 -  -  -  -  ParseLine:
    2 D1:B1F0 CD 2C 10 02 	call	_CurFetch
    3 D1:B1F4 FE 3F -  -  	cp	a, tEnter
    4 D1:B1F6 C8 -  -  -  	ret	z
    5 D1:B1F7 21 E3 E8 D1 	ld	hl, FunctionsSingle
    6 D1:B1FB 01 10 00 00 	ld	bc, FunctionsSingleEnd - FunctionsSingle
    7 D1:B1FF ED B1 -  -  	cpir
    8 D1:B201 20 2F -  -  	jr	nz, ParseExpression2
    9 D1:B203 FE 62 -  -  	cp	a, tVarOut
   10 D1:B205 28 10 -  -  	jr	z, +_
   11 D1:B207 FE 2C -  -  	cp	a, tii
   12 D1:B209 28 0C -  -  	jr	z, +_
   13 D1:B20B FD CB D0 7E 	bit	used_code, (iy+fProgram1)
   14 D1:B20F FD CB D0 FE 	set	used_code, (iy+fProgram1)
   15 D1:B213 CC 8A B1 D1 	call	z, UpdateSpritePointers
   16 D1:B217 3A 34 EA D1 _:	ld	a, (openedParensF)
   17 D1:B21B B7 -  -  -  	or	a, a
   18 D1:B21C C2 6D AF D1 	jp	nz, FunctionError
   19 D1:B220 FD 77 B0 -  	ld	(iy+fFunction1), a
   20 D1:B223 FD 77 AF -  	ld	(iy+fFunction2), a
   21 D1:B226 06 03 -  -  	ld	b, 3
   22 D1:B228 ED 4C -  -  	mlt	bc
   23 D1:B22A 21 F3 E8 D1 	ld	hl, FunctionsSingleStart
   24 D1:B22E 09 -  -  -  	add	hl, bc
   25 D1:B22F ED 27 -  -  	ld	hl, (hl)
   26 D1:B231 E9 -  -  -  	jp	(hl)
   27 D1:B232 -  -  -  -  	
   28 D1:B232 -  -  -  -  ParseExpression2:
   29 D1:B232 FD CB D0 7E 	bit	used_code, (iy+fProgram1)
   30 D1:B236 FD CB D0 FE 	set	used_code, (iy+fProgram1)
   31 D1:B23A CC 8A B1 D1 	call	z, UpdateSpritePointers
   32 D1:B23E -  -  -  -  ParseExpression:
   33 D1:B23E 21 83 EA D0 	ld	hl, stack
   34 D1:B242 22 14 EA D1 	ld	(stackPtr), hl
   35 D1:B246 21 6B EE D0 	ld	hl, output
   36 D1:B24A 22 17 EA D1 	ld	(outputPtr), hl
   37 D1:B24E AF -  -  -  	xor	a, a
   38 D1:B24F 32 33 EA D1 	ld	(openedParensE), a
   39 D1:B253 FD 77 C0 -  	ld	(iy+fExpression1), a
   40 D1:B256 FD 77 BF -  	ld	(iy+fExpression2), a
   41 D1:B259 FD 77 BE -  	ld	(iy+fExpression3), a
   42 D1:B25C CD 2C 10 02 	call	_CurFetch
   43 D1:B260 -  -  -  -  MainLoopResCarryFlag:
   44 D1:B260 B7 -  -  -  	or	a, a	
   45 D1:B261 -  -  -  -  MainLoop:
   46 D1:B261 32 1F EA D0 	ld	(tempToken), a
   47 D1:B265 DA F4 B5 D1 	jp	c, StopParsing
   48 D1:B269 FE 30 -  -  	cp	a, t0
   49 D1:B26B 38 45 -  -  	jr	c, NotANumber
   50 D1:B26D FE 3A -  -  	cp	a, t9+1
   51 D1:B26F 30 41 -  -  	jr	nc, NotANumber
   52 D1:B271 -  -  -  -  ANumber:
   53 D1:B271 -  -  -  -  #include "number.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\number.asm"
    1 D1:B271 2A 17 EA D1 	ld	hl, (outputPtr)
    2 D1:B275 FD CB C0 46 	bit	prev_is_number, (iy+fExpression1)
    3 D1:B279 FD CB C0 C6 	set	prev_is_number, (iy+fExpression1)
    4 D1:B27D 28 1A -  -  	jr	z, AddNumberToStack
    5 D1:B27F -  -  -  -  ChangeLastNumberFromStack:
    6 D1:B27F 2B -  -  -  	dec	hl
    7 D1:B280 2B -  -  -  	dec	hl
    8 D1:B281 2B -  -  -  	dec	hl
    9 D1:B282 E5 -  -  -  	push	hl
   10 D1:B283 ED 27 -  -  		ld	hl, (hl)
   11 D1:B285 29 -  -  -  		add	hl, hl											;	HL * 10
   12 D1:B286 E5 -  -  -  		push	hl
   13 D1:B287 D1 -  -  -  		pop	de
   14 D1:B288 29 -  -  -  		add	hl, hl
   15 D1:B289 29 -  -  -  		add	hl, hl
   16 D1:B28A 19 -  -  -  		add	hl, de
   17 D1:B28B D6 30 -  -  		sub	a, t0											;	HL + <number>
   18 D1:B28D 11 00 00 00 		ld	de, 0
   19 D1:B291 5F -  -  -  		ld	e, a
   20 D1:B292 19 -  -  -  		add	hl, de
   21 D1:B293 D1 -  -  -  	pop	de
   22 D1:B294 EB -  -  -  	ex	de, hl
   23 D1:B295 ED 1F -  -  	ld	(hl), de
   24 D1:B297 18 13 -  -  	jr	NumberStop
   25 D1:B299 -  -  -  -  AddNumberToStack:
   26 D1:B299 36 00 -  -  	ld	(hl), typeNumber
   27 D1:B29B 23 -  -  -  	inc	hl
   28 D1:B29C D6 30 -  -  	sub	a, t0												;	new number
   29 D1:B29E -  -  -  -  InsertAndUpdatePointer
   30 D1:B29E 11 00 00 00 	ld	de, 0
   31 D1:B2A2 5F -  -  -  	ld	e, a
   32 D1:B2A3 ED 1F -  -  	ld	(hl), de
   33 D1:B2A5 -  -  -  -  UpdatePointer:
   34 D1:B2A5 23 -  -  -  	inc	hl
   35 D1:B2A6 23 -  -  -  	inc	hl
   36 D1:B2A7 23 -  -  -  	inc	hl
   37 D1:B2A8 22 17 EA D1 	ld	(outputPtr), hl
   38 D1:B2AC -  -  -  -  NumberStop:
   39 D1:B2AC CD 28 10 02 	call	_IncFetch
   40 D1:B2B0 18 AF -  -  	jr	MainLoop
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   54 D1:B2B2 -  -  -  -  
   55 D1:B2B2 -  -  -  -  NotANumber:
   56 D1:B2B2 FD CB C0 86 	res	prev_is_number, (iy+fExpression1)
   57 D1:B2B6 FE 41 -  -  	cp	a, tA
   58 D1:B2B8 38 0F -  -  	jr	c, NotAVariable
   59 D1:B2BA FE 5C -  -  	cp	a, ttheta+1
   60 D1:B2BC 30 0B -  -  	jr	nc, NotAVariable
   61 D1:B2BE -  -  -  -  AVariable:
   62 D1:B2BE 2A 17 EA D1 	ld	hl, (outputPtr)
   63 D1:B2C2 36 01 -  -  	ld	(hl), typeVariable
   64 D1:B2C4 23 -  -  -  	inc	hl
   65 D1:B2C5 D6 41 -  -  	sub	a, tA
   66 D1:B2C7 18 D5 -  -  	jr	InsertAndUpdatePointer
   67 D1:B2C9 -  -  -  -  NotAVariable:
   68 D1:B2C9 21 A7 E8 D1 	ld	hl, operators_booleans
   69 D1:B2CD 01 0F 00 00 	ld	bc, 15
   70 D1:B2D1 ED B1 -  -  	cpir
   71 D1:B2D3 20 75 -  -  	jr	nz, NotABoolean
   72 D1:B2D5 -  -  -  -  ABoolean:
   73 D1:B2D5 -  -  -  -  #include "operator.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operator.asm"
    1 D1:B2D5 21 D4 E9 D1 	ld	hl, precedence
    2 D1:B2D9 09 -  -  -  	add	hl, bc
    3 D1:B2DA 5E -  -  -  	ld	e, (hl)										;	e = precedence of current token
    4 D1:B2DB FE 04 -  -  	cp	a, tStore
    5 D1:B2DD CC 8D B7 D1 	call	z, MoveStackEntryToOutput
    6 D1:B2E1 -  -  -  -  CheckOperator:
    7 D1:B2E1 2A 14 EA D1 	ld	hl, (stackPtr)
    8 D1:B2E5 01 83 EA D0 	ld	bc, stack
    9 D1:B2E9 B7 -  -  -  	or	a, a
   10 D1:B2EA ED 42 -  -  	sbc	hl, bc
   11 D1:B2EC 28 41 -  -  	jr	z, InsertBoolean
   12 D1:B2EE 09 -  -  -  	add	hl, bc
   13 D1:B2EF 2B -  -  -  	dec	hl
   14 D1:B2F0 2B -  -  -  	dec	hl
   15 D1:B2F1 2B -  -  -  	dec	hl
   16 D1:B2F2 2B -  -  -  	dec	hl
   17 D1:B2F3 7E -  -  -  	ld	a, (hl)
   18 D1:B2F4 FE 1F -  -  	cp	a, typeOperator
   19 D1:B2F6 20 37 -  -  	jr	nz, InsertBoolean
   20 D1:B2F8 23 -  -  -  	inc	hl
   21 D1:B2F9 7E -  -  -  	ld	a, (hl)
   22 D1:B2FA 21 A7 E8 D1 	ld	hl, operators_booleans
   23 D1:B2FE 01 0F 00 00 	ld	bc, 15
   24 D1:B302 ED B1 -  -  	cpir
   25 D1:B304 21 E3 E9 D1 	ld	hl, precedence2
   26 D1:B308 09 -  -  -  	add	hl, bc
   27 D1:B309 7E -  -  -  	ld	a, (hl)										;	a = precedence of last token on stack
   28 D1:B30A BB -  -  -  	cp	a, e											;	if a <= e then move
   29 D1:B30B 38 22 -  -  	jr	c, InsertBoolean
   30 D1:B30D -  -  -  -  MoveBooleanFromStackToOutput:
   31 D1:B30D 7B -  -  -  	ld	a, e											;	save for the precedence of current token
   32 D1:B30E ED 5B 17 EA 
              D1 -  -  -  	ld	de, (outputPtr)
   33 D1:B313 2A 14 EA D1 	ld	hl, (stackPtr)
   34 D1:B317 2B -  -  -  	dec	hl
   35 D1:B318 2B -  -  -  	dec	hl
   36 D1:B319 2B -  -  -  	dec	hl
   37 D1:B31A 2B -  -  -  	dec	hl
   38 D1:B31B 22 14 EA D1 	ld	(stackPtr), hl
   39 D1:B31F ED A0 -  -  	ldi
   40 D1:B321 ED A0 -  -  	ldi
   41 D1:B323 ED A0 -  -  	ldi
   42 D1:B325 ED A0 -  -  	ldi
   43 D1:B327 ED 53 17 EA 
              D1 -  -  -  	ld	(outputPtr), de
   44 D1:B32C 5F -  -  -  	ld	e, a
   45 D1:B32D 18 B2 -  -  	jr	CheckOperator
   46 D1:B32F -  -  -  -  InsertBoolean:
   47 D1:B32F 2A 14 EA D1 	ld	hl, (stackPtr)
   48 D1:B333 36 1F -  -  	ld	(hl), typeOperator
   49 D1:B335 23 -  -  -  	inc	hl
   50 D1:B336 3A 1F EA D0 	ld	a, (tempToken)
   51 D1:B33A 77 -  -  -  	ld	(hl), a
   52 D1:B33B 23 -  -  -  	inc	hl
   53 D1:B33C 23 -  -  -  	inc	hl
   54 D1:B33D 23 -  -  -  	inc	hl
   55 D1:B33E 22 14 EA D1 	ld	(stackPtr), hl
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   74 D1:B342 -  -  -  -  
   75 D1:B342 -  -  -  -  ReturnToLoop:
   76 D1:B342 CD 28 10 02 	call	_IncFetch
   77 D1:B346 C3 61 B2 D1 	jp	MainLoop
   78 D1:B34A -  -  -  -  NotABoolean:
   79 D1:B34A FE 2B -  -  	cp	a, tComma
   80 D1:B34C 28 06 -  -  	jr	z, CloseArgument
   81 D1:B34E FE 11 -  -  	cp	a, tRParen
   82 D1:B350 C2 E3 B3 D1 	jp	nz, NotACommaOrRParen
   83 D1:B354 -  -  -  -  CloseArgument:
   84 D1:B354 -  -  -  -  #include "closing.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\closing.asm"
    1 D1:B354 21 33 EA D1 	ld	hl, openedParensE
    2 D1:B358 47 -  -  -  	ld	b, a
    3 D1:B359 7E -  -  -  	ld	a, (hl)
    4 D1:B35A B7 -  -  -  	or	a, a
    5 D1:B35B 28 6D -  -  	jr	z, MismatchedParens
    6 D1:B35D 78 -  -  -  	ld	a, b
    7 D1:B35E FE 2B -  -  	cp	a, tComma
    8 D1:B360 28 01 -  -  	jr	z, +_
    9 D1:B362 35 -  -  -  	dec	(hl)
   10 D1:B363 2A 14 EA D1 _:	ld	hl, (stackPtr)
   11 D1:B367 01 83 EA D0 	ld	bc, stack
   12 D1:B36B B7 -  -  -  	or	a, a
   13 D1:B36C ED 42 -  -  	sbc	hl, bc
   14 D1:B36E 28 52 -  -  	jr	z, StopMovingForArgument2
   15 D1:B370 09 -  -  -  	add	hl, bc
   16 D1:B371 2B -  -  -  	dec	hl
   17 D1:B372 2B -  -  -  	dec	hl
   18 D1:B373 2B -  -  -  	dec	hl
   19 D1:B374 2B -  -  -  	dec	hl
   20 D1:B375 7E -  -  -  	ld	a, (hl)
   21 D1:B376 FE 3F -  -  	cp	a, typeFunction
   22 D1:B378 28 23 -  -  	jr	z, StopMovingForArgument
   23 D1:B37A FE 1F -  -  	cp	a, typeOperator
   24 D1:B37C 20 06 -  -  	jr	nz, +_
   25 D1:B37E 23 -  -  -  	inc	hl
   26 D1:B37F 7E -  -  -  	ld	a, (hl)
   27 D1:B380 2B -  -  -  	dec	hl
   28 D1:B381 B7 -  -  -  	or	a, a
   29 D1:B382 28 19 -  -  	jr	z, StopMovingForArgument
   30 D1:B384 22 14 EA D1 _:	ld	(stackPtr), hl
   31 D1:B388 ED 5B 17 EA 
              D1 -  -  -  	ld	de, (outputPtr)
   32 D1:B38D ED A0 -  -  	ldi
   33 D1:B38F ED A0 -  -  	ldi
   34 D1:B391 ED A0 -  -  	ldi
   35 D1:B393 ED A0 -  -  	ldi
   36 D1:B395 ED 53 17 EA 
              D1 -  -  -  	ld	(outputPtr), de
   37 D1:B39A 18 C7 -  -  	jr	--_
   38 D1:B39C 09 -  -  -  _:	add	hl, bc
   39 D1:B39D -  -  -  -  StopMovingForArgument:
   40 D1:B39D 3A 1F EA D0 	ld	a, (tempToken)
   41 D1:B3A1 FE 2B -  -  	cp	a, tComma
   42 D1:B3A3 28 1D -  -  	jr	z, StopMovingForArgument2
   43 D1:B3A5 22 14 EA D1 	ld	(stackPtr), hl
   44 D1:B3A9 23 -  -  -  	inc	hl
   45 D1:B3AA 7E -  -  -  	ld	a, (hl)
   46 D1:B3AB FE 10 -  -  	cp	a, tLParen
   47 D1:B3AD 28 13 -  -  	jr	z, StopMovingForArgument2
   48 D1:B3AF 2B -  -  -  	dec	hl
   49 D1:B3B0 ED 5B 17 EA 
              D1 -  -  -  	ld	de, (outputPtr)
   50 D1:B3B5 ED A0 -  -  	ldi
   51 D1:B3B7 ED A0 -  -  	ldi
   52 D1:B3B9 ED A0 -  -  	ldi
   53 D1:B3BB ED A0 -  -  	ldi
   54 D1:B3BD ED 53 17 EA 
              D1 -  -  -  	ld	(outputPtr), de
   55 D1:B3C2 -  -  -  -  StopMovingForArgument2:
   56 D1:B3C2 CD 28 10 02 	call	_IncFetch
   57 D1:B3C6 C3 61 B2 D1 	jp	MainLoop
   58 D1:B3CA -  -  -  -  MismatchedParens:
   59 D1:B3CA 3A 34 EA D1 	ld	a, (openedParensF)
   60 D1:B3CE B7 -  -  -  	or	a, a
   61 D1:B3CF CA 3F AF D1 	jp	z, MismatchError
   62 D1:B3D3 3A 1F EA D0 	ld	a, (tempToken)
   63 D1:B3D7 FE 2B -  -  	cp	a, tComma
   64 D1:B3D9 20 04 -  -  	jr	nz, +_
   65 D1:B3DB FD CB BE C6 	set	triggered_a_comma, (iy+fExpression3)
   66 D1:B3DF C3 F4 B5 D1 _:	jp	StopParsing
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   85 D1:B3E3 -  -  -  -  
   86 D1:B3E3 -  -  -  -  NotACommaOrRParen:
   87 D1:B3E3 FE 08 -  -  	cp	a, tLBrace
   88 D1:B3E5 C2 75 B4 D1 	jp	nz, NotAList
   89 D1:B3E9 -  -  -  -  AList:
   90 D1:B3E9 -  -  -  -  #include "list.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\list.asm"
    1 D1:B3E9 2A 17 EA D1 	ld	hl, (outputPtr)
    2 D1:B3ED 36 05 -  -  	ld	(hl), typeList
    3 D1:B3EF 23 -  -  -  	inc	hl
    4 D1:B3F0 ED 5B 2C EA 
              D1 -  -  -  	ld	de, (tempListsPtr)
    5 D1:B3F5 ED 1F -  -  	ld	(hl), de
    6 D1:B3F7 ED 53 57 B4 
              D1 -  -  -  	ld	(ListLengthSMC), de
    7 D1:B3FC 23 -  -  -  	inc	hl
    8 D1:B3FD 23 -  -  -  	inc	hl
    9 D1:B3FE 23 -  -  -  	inc	hl
   10 D1:B3FF 22 17 EA D1 	ld	(outputPtr), hl
   11 D1:B403 EB -  -  -  	ex	de, hl
   12 D1:B404 23 -  -  -  	inc	hl
   13 D1:B405 23 -  -  -  	inc	hl
   14 D1:B406 23 -  -  -  	inc	hl
   15 D1:B407 22 2C EA D1 	ld	(tempListsPtr), hl
   16 D1:B40B -  -  -  -  ListStart:
   17 D1:B40B B7 -  -  -  	or	a, a
   18 D1:B40C ED 62 -  -  	sbc	hl, hl
   19 D1:B40E -  -  -  -  ListLoop:
   20 D1:B40E E5 -  -  -  	push	hl
   21 D1:B40F CD 28 10 02 		call	_IncFetch
   22 D1:B413 E1 -  -  -  	pop	hl
   23 D1:B414 FE 30 -  -  	cp	a, t0
   24 D1:B416 38 14 -  -  	jr	c, ListNotNumber
   25 D1:B418 FE 3A -  -  	cp	a, t9+1
   26 D1:B41A 30 10 -  -  	jr	nc, ListNotNumber
   27 D1:B41C D6 30 -  -  	sub	a, t0
   28 D1:B41E 29 -  -  -  	add	hl, hl
   29 D1:B41F E5 -  -  -  	push	hl
   30 D1:B420 D1 -  -  -  	pop	de
   31 D1:B421 29 -  -  -  	add	hl, hl
   32 D1:B422 29 -  -  -  	add	hl, hl
   33 D1:B423 19 -  -  -  	add	hl, de
   34 D1:B424 11 00 00 00 	ld	de, 0
   35 D1:B428 5F -  -  -  	ld	e, a
   36 D1:B429 19 -  -  -  	add	hl, de
   37 D1:B42A 18 E2 -  -  	jr	ListLoop
   38 D1:B42C -  -  -  -  ListNotNumber:
   39 D1:B42C FE 2B -  -  	cp	a, tComma
   40 D1:B42E 20 10 -  -  	jr	nz, ListNotNumberOrComma
   41 D1:B430 EB -  -  -  	ex	de, hl
   42 D1:B431 2A 2C EA D1 	ld	hl, (tempListsPtr)
   43 D1:B435 ED 1F -  -  	ld	(hl), de
   44 D1:B437 23 -  -  -  	inc	hl
   45 D1:B438 23 -  -  -  	inc	hl
   46 D1:B439 23 -  -  -  	inc	hl
   47 D1:B43A 22 2C EA D1 	ld	(tempListsPtr), hl
   48 D1:B43E 18 CB -  -  	jr	ListStart
   49 D1:B440 -  -  -  -  ListNotNumberOrComma:
   50 D1:B440 FE 09 -  -  	cp	a, tRBrace
   51 D1:B442 28 04 -  -  	jr	z, ListStop
   52 D1:B444 FE 04 -  -  	cp	a, tStore
   53 D1:B446 20 25 -  -  	jr	nz, ListError
   54 D1:B448 -  -  -  -  ListStop:
   55 D1:B448 EB -  -  -  	ex	de, hl
   56 D1:B449 2A 2C EA D1 	ld	hl, (tempListsPtr)
   57 D1:B44D ED 1F -  -  	ld	(hl), de
   58 D1:B44F 23 -  -  -  	inc	hl
   59 D1:B450 23 -  -  -  	inc	hl
   60 D1:B451 23 -  -  -  	inc	hl
   61 D1:B452 22 2C EA D1 	ld	(tempListsPtr),  hl
   62 D1:B456 -  -  -  -  ListLengthSMC = $+1
   63 D1:B456 11 00 00 00 	ld	de, 0
   64 D1:B45A 2B -  -  -  	dec	hl
   65 D1:B45B 2B -  -  -  	dec	hl
   66 D1:B45C 2B -  -  -  	dec	hl
   67 D1:B45D B7 -  -  -  	or	a, a
   68 D1:B45E ED 52 -  -  	sbc	hl, de
   69 D1:B460 EB -  -  -  	ex	de, hl
   70 D1:B461 ED 1F -  -  	ld	(hl), de
   71 D1:B463 FE 04 -  -  	cp	a, tStore
   72 D1:B465 C4 28 10 02 	call	nz, _IncFetch
   73 D1:B469 C3 61 B2 D1 	jp	MainLoop
   74 D1:B46D -  -  -  -  ListError:
   75 D1:B46D 21 0D EB D1 	ld	hl, InvalidListArgumentMessage
   76 D1:B471 C3 95 AF D1 	jp	DispFinalString
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   91 D1:B475 -  -  -  -  
   92 D1:B475 -  -  -  -  NotAList:
   93 D1:B475 FE 5D -  -  	cp	a, tVarLst
   94 D1:B477 20 4E -  -  	jr	nz, NotAnOSList
   95 D1:B479 -  -  -  -  AnOSList:
   96 D1:B479 CD 28 10 02 	call	_IncFetch
   97 D1:B47D FE 06 -  -  	cp	a, 6
   98 D1:B47F D2 4F AF D1 	jp	nc, InvalidTokenError
   99 D1:B483 4F -  -  -  	ld	c, a
  100 D1:B484 06 03 -  -  	ld	b, 3
  101 D1:B486 ED 4C -  -  	mlt	bc
  102 D1:B488 21 F2 E9 D1 	ld	hl, lists
  103 D1:B48C 09 -  -  -  	add	hl, bc
  104 D1:B48D ED 27 -  -  	ld	hl, (hl)
  105 D1:B48F EB -  -  -  	ex	de, hl
  106 D1:B490 2A 17 EA D1 	ld	hl, (outputPtr)
  107 D1:B494 36 06 -  -  	ld	(hl), typeOSList
  108 D1:B496 23 -  -  -  	inc	hl
  109 D1:B497 ED 1F -  -  	ld	(hl), de
  110 D1:B499 23 -  -  -  	inc	hl
  111 D1:B49A 23 -  -  -  	inc	hl
  112 D1:B49B 23 -  -  -  	inc	hl
  113 D1:B49C 22 17 EA D1 	ld	(outputPtr), hl
  114 D1:B4A0 CD 28 10 02 	call	_IncFetch
  115 D1:B4A4 FE 10 -  -  	cp	a, tLParen
  116 D1:B4A6 C2 60 B2 D1 	jp	nz, MainLoopResCarryFlag
  117 D1:B4AA 21 33 EA D1 	ld	hl, openedParensE
  118 D1:B4AE 34 -  -  -  	inc	(hl)
  119 D1:B4AF 2A 14 EA D1 	ld	hl, (stackPtr)
  120 D1:B4B3 36 1F -  -  	ld	(hl), typeOperator
  121 D1:B4B5 23 -  -  -  	inc	hl
  122 D1:B4B6 36 00 -  -  	ld	(hl), 0
  123 D1:B4B8 23 -  -  -  	inc	hl
  124 D1:B4B9 23 -  -  -  	inc	hl
  125 D1:B4BA 23 -  -  -  	inc	hl
  126 D1:B4BB 22 14 EA D1 	ld	(stackPtr), hl
  127 D1:B4BF CD 28 10 02 	call	_IncFetch
  128 D1:B4C3 C3 61 B2 D1 	jp	MainLoop
  129 D1:B4C7 -  -  -  -  NotAnOSList:
  130 D1:B4C7 FE 2A -  -  	cp	a, tString
  131 D1:B4C9 20 53 -  -  	jr	nz, NotAString
  132 D1:B4CB -  -  -  -  AString:
  133 D1:B4CB 2A 17 EA D1 	ld	hl, (outputPtr)
  134 D1:B4CF 36 07 -  -  	ld	(hl), typeString
  135 D1:B4D1 23 -  -  -  	inc	hl
  136 D1:B4D2 ED 5B 29 EA 
              D1 -  -  -  	ld	de, (tempStringsPtr)
  137 D1:B4D7 ED 1F -  -  	ld	(hl), de
  138 D1:B4D9 23 -  -  -  	inc	hl
  139 D1:B4DA 23 -  -  -  	inc	hl
  140 D1:B4DB 23 -  -  -  	inc	hl
  141 D1:B4DC 22 17 EA D1 	ld	(outputPtr), hl
  142 D1:B4E0 -  -  -  -  StringLoop:
  143 D1:B4E0 CD 28 10 02 	call	_IncFetch
  144 D1:B4E4 38 2C -  -  	jr	c, StringStop2
  145 D1:B4E6 FE 3F -  -  	cp	a, tEnter
  146 D1:B4E8 28 28 -  -  	jr	z, StringStop2
  147 D1:B4EA FE 2A -  -  	cp	a, tString
  148 D1:B4EC 28 1E -  -  	jr	z, StringStop
  149 D1:B4EE FE 04 -  -  	cp	a, tStore
  150 D1:B4F0 28 1A -  -  	jr	z, StringStop
  151 D1:B4F2 CD AC 04 02 	call	_IsA2ByteTok
  152 D1:B4F6 20 06 -  -  	jr	nz, +_
  153 D1:B4F8 23 -  -  -  	inc	hl
  154 D1:B4F9 22 1A 23 D0 	ld	(curPC), hl
  155 D1:B4FD 2B -  -  -  	dec	hl
  156 D1:B4FE D5 -  -  -  _:	push	de
  157 D1:B4FF CD 70 08 02 		call	_Get_Tok_Strng
  158 D1:B503 D1 -  -  -  	pop	de
  159 D1:B504 21 0E 06 D0 	ld	hl, OP3
  160 D1:B508 ED B0 -  -  	ldir
  161 D1:B50A 18 D4 -  -  	jr	StringLoop
  162 D1:B50C -  -  -  -  StringStop:
  163 D1:B50C FE 3F -  -  	cp	a, tEnter
  164 D1:B50E C4 28 10 02 	call	nz, _IncFetch
  165 D1:B512 -  -  -  -  StringStop2:
  166 D1:B512 EB -  -  -  	ex	de, hl
  167 D1:B513 36 00 -  -  	ld	(hl), 0
  168 D1:B515 23 -  -  -  	inc	hl
  169 D1:B516 22 29 EA D1 	ld	(tempStringsPtr), hl
  170 D1:B51A C3 61 B2 D1 	jp	MainLoop
  171 D1:B51E -  -  -  -  NotAString:
  172 D1:B51E FE 3F -  -  	cp	a, tEnter
  173 D1:B520 CA F4 B5 D1 	jp	z, StopParsing
  174 D1:B524 21 C4 E8 D1 	ld	hl, FunctionsWithReturnValue
  175 D1:B528 01 0A 00 00 	ld	bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValue
  176 D1:B52C ED B1 -  -  	cpir
  177 D1:B52E C2 4F AF D1 	jp	nz, InvalidTokenError
  178 D1:B532 FE AD -  -  	cp	a, tGetKey
  179 D1:B534 28 0A -  -  	jr	z, AddFunctionToOutput
  180 D1:B536 FE 0D -  -  	cp	a, tSqr
  181 D1:B538 28 06 -  -  	jr	z, AddFunctionToOutput
  182 D1:B53A FE AB -  -  	cp	a, trand
  183 D1:B53C C2 CE B5 D1 	jp	nz, AddFunctionToStack
  184 D1:B540 -  -  -  -  AddFunctionToOutput:
  185 D1:B540 2A 17 EA D1 	ld	hl, (outputPtr)
  186 D1:B544 1E 04 -  -  	ld	e, typeReturnValue
  187 D1:B546 FE 0D -  -  	cp	a, tSqr
  188 D1:B548 20 02 -  -  	jr	nz, +_
  189 D1:B54A 1E 3F -  -  	ld	e, typeFunction
  190 D1:B54C 73 -  -  -  _:	ld	(hl), e
  191 D1:B54D 23 -  -  -  	inc	hl
  192 D1:B54E 77 -  -  -  	ld	(hl), a
  193 D1:B54F 23 -  -  -  	inc	hl
  194 D1:B550 23 -  -  -  	inc	hl
  195 D1:B551 23 -  -  -  	inc	hl
  196 D1:B552 22 17 EA D1 	ld	(outputPtr), hl
  197 D1:B556 FE AD -  -  	cp	a, tGetKey
  198 D1:B558 C2 42 B3 D1 	jp	nz, ReturnToLoop
  199 D1:B55C CD 28 10 02 	call	_IncFetch
  200 D1:B560 DA 61 B2 D1 	jp	c, MainLoop
  201 D1:B564 FE 10 -  -  	cp	a, tLParen
  202 D1:B566 C2 60 B2 D1 	jp	nz, MainLoopResCarryFlag
  203 D1:B56A CD 28 10 02 	call	_IncFetch
  204 D1:B56E DA 39 AF D1 _:	jp	c, ErrorSyntax
  205 D1:B572 FE 3F -  -  	cp	a, tEnter
  206 D1:B574 CA 39 AF D1 	jp	z, ErrorSyntax
  207 D1:B578 D6 30 -  -  	sub	a, t0
  208 D1:B57A 38 F2 -  -  	jr	c, -_
  209 D1:B57C FE 0A -  -  	cp	a, t9-t0+1
  210 D1:B57E D2 39 AF D1 _:	jp	nc, ErrorSyntax
  211 D1:B582 11 00 00 00 	ld	de, 0
  212 D1:B586 5F -  -  -  	ld	e, a
  213 D1:B587 CD 28 10 02 	call	_IncFetch
  214 D1:B58B 38 35 -  -  	jr	c, AddGetKeyDirect
  215 D1:B58D FE 3F -  -  	cp	a, tEnter
  216 D1:B58F 28 31 -  -  	jr	z, AddGetKeyDirect
  217 D1:B591 FE 11 -  -  	cp	a, tRParen
  218 D1:B593 28 29 -  -  	jr	z, +_
  219 D1:B595 FE 04 -  -  	cp	a, tStore
  220 D1:B597 28 29 -  -  	jr	z, AddGetKeyDirect
  221 D1:B599 D6 30 -  -  	sub	a, t0
  222 D1:B59B 38 D1 -  -  	jr	c, --_
  223 D1:B59D FE 0A -  -  	cp	a, t9-t0+1
  224 D1:B59F 30 DD -  -  	jr	nc, -_
  225 D1:B5A1 D5 -  -  -  	push	de
  226 D1:B5A2 E1 -  -  -  	pop	hl
  227 D1:B5A3 29 -  -  -  	add	hl, hl
  228 D1:B5A4 29 -  -  -  	add	hl, hl
  229 D1:B5A5 19 -  -  -  	add	hl, de
  230 D1:B5A6 29 -  -  -  	add	hl, hl
  231 D1:B5A7 5F -  -  -  	ld	e, a
  232 D1:B5A8 19 -  -  -  	add	hl, de
  233 D1:B5A9 EB -  -  -  	ex	de, hl
  234 D1:B5AA CD 28 10 02 	call	_IncFetch
  235 D1:B5AE 38 12 -  -  	jr	c, AddGetKeyDirect
  236 D1:B5B0 FE 3F -  -  	cp	a, tEnter
  237 D1:B5B2 28 0E -  -  	jr	z, AddGetKeyDirect
  238 D1:B5B4 FE 04 -  -  	cp	a, tStore
  239 D1:B5B6 28 0A -  -  	jr	z, AddGetKeyDirect
  240 D1:B5B8 FE 11 -  -  	cp	a, tRParen
  241 D1:B5BA C2 39 AF D1 	jp	nz, ErrorSyntax
  242 D1:B5BE CD 28 10 02 _:	call	_IncFetch
  243 D1:B5C2 -  -  -  -  AddGetKeyDirect:
  244 D1:B5C2 2A 17 EA D1 	ld	hl, (outputPtr)
  245 D1:B5C6 2B -  -  -  	dec	hl
  246 D1:B5C7 2B -  -  -  	dec	hl
  247 D1:B5C8 2B -  -  -  	dec	hl
  248 D1:B5C9 73 -  -  -  	ld	(hl), e
  249 D1:B5CA C3 61 B2 D1 	jp	MainLoop
  250 D1:B5CE -  -  -  -  AddFunctionToStack:
  251 D1:B5CE 21 33 EA D1 	ld	hl, openedParensE
  252 D1:B5D2 34 -  -  -  	inc	(hl)
  253 D1:B5D3 CD AC 04 02 	call	_IsA2ByteTok
  254 D1:B5D7 CC 28 10 02 	call	z, _IncFetch
  255 D1:B5DB 47 -  -  -  	ld	b, a
  256 D1:B5DC 2A 14 EA D1 	ld	hl, (stackPtr)
  257 D1:B5E0 3A 1F EA D0 	ld	a, (tempToken)
  258 D1:B5E4 36 3F -  -  	ld	(hl), typeFunction
  259 D1:B5E6 23 -  -  -  	inc	hl
  260 D1:B5E7 77 -  -  -  	ld	(hl), a
  261 D1:B5E8 23 -  -  -  	inc	hl
  262 D1:B5E9 70 -  -  -  	ld	(hl), b
  263 D1:B5EA 23 -  -  -  	inc	hl
  264 D1:B5EB 23 -  -  -  	inc	hl
  265 D1:B5EC 22 14 EA D1 	ld	(stackPtr), hl
  266 D1:B5F0 C3 42 B3 D1 	jp	ReturnToLoop
  267 D1:B5F4 -  -  -  -  StopParsing:																;	move stack to output
  268 D1:B5F4 CD 8D B7 D1 	call	MoveStackEntryToOutput
  269 D1:B5F8 2A 17 EA D1 	ld	hl, (outputPtr)
  270 D1:B5FC 11 6B EE D0 	ld	de, output
  271 D1:B600 B7 -  -  -  	or	a, a
  272 D1:B601 ED 52 -  -  	sbc	hl, de
  273 D1:B603 E5 -  -  -  	push	hl
  274 D1:B604 C1 -  -  -  	pop	bc																	;	BC / 4 is amount of elements in the stack
  275 D1:B605 D5 -  -  -  	push	de
  276 D1:B606 E1 -  -  -  	pop	hl
  277 D1:B607 3E 01 -  -  	ld	a, OutputIsInHL
  278 D1:B609 32 3B EA D1 	ld	(ExprOutput), a
  279 D1:B60D 32 3C EA D1 	ld	(ExprOutput2), a
  280 D1:B611 78 -  -  -  	ld	a, b
  281 D1:B612 B1 -  -  -  	or	a, c
  282 D1:B613 FE 04 -  -  	cp	a, 4
  283 D1:B615 D8 -  -  -  	ret	c
  284 D1:B616 CA 25 B7 D1 	jp	z, ParseSingleArgument
  285 D1:B61A -  -  -  -  Loop:
  286 D1:B61A AF -  -  -  	xor	a, a
  287 D1:B61B FD 77 C0 -  	ld	(iy+fExpression1), a
  288 D1:B61E FD 77 BF -  	ld	(iy+fExpression2), a
  289 D1:B621 ED 42 -  -  	sbc	hl, bc
  290 D1:B623 11 6B EE D0 	ld	de, output
  291 D1:B627 ED 52 -  -  	sbc	hl, de
  292 D1:B629 CA 39 AF D1 	jp	z, ErrorSyntax
  293 D1:B62D 19 -  -  -  	add	hl, de
  294 D1:B62E 09 -  -  -  	add	hl, bc
  295 D1:B62F E5 -  -  -  	push	hl
  296 D1:B630 21 0C 00 00 		ld	hl, 12
  297 D1:B634 B7 -  -  -  		or	a, a
  298 D1:B635 ED 42 -  -  		sbc	hl, bc
  299 D1:B637 20 04 -  -  		jr	nz, +_
  300 D1:B639 FD CB C0 DE 		set	op_is_last_one, (iy+fExpression1)
  301 D1:B63D E1 -  -  -  _:	pop	hl
  302 D1:B63E 78 -  -  -  	ld	a, b
  303 D1:B63F B1 -  -  -  	or	a, c
  304 D1:B640 FE 04 -  -  	cp	a, 4
  305 D1:B642 CA 1B B7 D1 	jp	z, StopParseExpression
  306 D1:B646 7E -  -  -  	ld	a, (hl)
  307 D1:B647 FE 1F -  -  	cp	a, typeOperator
  308 D1:B649 28 5B -  -  	jr	z, ExpressOperator
  309 D1:B64B FE 3F -  -  	cp	a, typeFunction
  310 D1:B64D 28 06 -  -  	jr	z, ExpressFunction
  311 D1:B64F 23 -  -  -  	inc	hl
  312 D1:B650 23 -  -  -  	inc	hl
  313 D1:B651 23 -  -  -  	inc	hl
  314 D1:B652 23 -  -  -  	inc	hl
  315 D1:B653 18 C5 -  -  	jr	Loop
  316 D1:B655 -  -  -  -  ExpressFunction:
  317 D1:B655 23 -  -  -  	inc	hl																	;	function = a
  318 D1:B656 7E -  -  -  	ld	a, (hl)
  319 D1:B657 2B -  -  -  	dec	hl
  320 D1:B658 C5 -  -  -  	push	bc
  321 D1:B659 E5 -  -  -  		push	hl
  322 D1:B65A CD 20 C5 D1 			call	ExecuteFunction
  323 D1:B65E D1 -  -  -  		pop	de
  324 D1:B65F D5 -  -  -  		push	de
  325 D1:B660 E1 -  -  -  		pop	hl
  326 D1:B661 23 -  -  -  		inc	hl
  327 D1:B662 23 -  -  -  		inc	hl
  328 D1:B663 23 -  -  -  		inc	hl
  329 D1:B664 23 -  -  -  		inc	hl
  330 D1:B665 3A 35 EA D1 		ld	a, (amountOfArguments)
  331 D1:B669 3D -  -  -  		dec	a
  332 D1:B66A 28 07 -  -  		jr	z, ++_
  333 D1:B66C 47 -  -  -  		ld	b, a
  334 D1:B66D 1B -  -  -  _:		dec	de
  335 D1:B66E 1B -  -  -  		dec	de
  336 D1:B66F 1B -  -  -  		dec	de
  337 D1:B670 1B -  -  -  		dec	de
  338 D1:B671 10 FA -  -  		djnz	-_
  339 D1:B673 C1 -  -  -  _:	pop	bc
  340 D1:B674 D5 -  -  -  	push	de
  341 D1:B675 C5 -  -  -  		push	bc
  342 D1:B676 E5 -  -  -  			push	hl
  343 D1:B677 ED B0 -  -  				ldir
  344 D1:B679 E1 -  -  -  			pop	hl
  345 D1:B67A C1 -  -  -  		pop	bc
  346 D1:B67B D1 -  -  -  	pop	de
  347 D1:B67C EB -  -  -  	ex	de, hl
  348 D1:B67D 09 -  -  -  	add	hl, bc
  349 D1:B67E B7 -  -  -  	or	a, a
  350 D1:B67F ED 52 -  -  	sbc	hl, de
  351 D1:B681 E5 -  -  -  	push	hl
  352 D1:B682 C1 -  -  -  	pop	bc																	;	BC = BC+DE-HL
  353 D1:B683 78 -  -  -  	ld	a, b
  354 D1:B684 B1 -  -  -  	or	a, c
  355 D1:B685 FE 04 -  -  	cp	a, 4
  356 D1:B687 20 0F -  -  	jr	nz, +_
  357 D1:B689 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  358 D1:B68D CA 1B B7 D1 	jp	z, StopParseExpression
  359 D1:B691 DD 27 FD -  	ld	hl, (ix-3)
  360 D1:B694 C3 30 B7 D1 	jp	ParseSingleArgument2
  361 D1:B698 EB -  -  -  _:	ex	de, hl
  362 D1:B699 3A 35 EA D1 	ld	a, (amountOfArguments)
  363 D1:B69D 47 -  -  -  	ld	b, a
  364 D1:B69E 2B -  -  -  _:	dec	hl
  365 D1:B69F 2B -  -  -  	dec	hl
  366 D1:B6A0 2B -  -  -  	dec	hl
  367 D1:B6A1 2B -  -  -  	dec	hl
  368 D1:B6A2 10 FA -  -  	djnz	-_
  369 D1:B6A4 18 4E -  -  	jr	AddChain
  370 D1:B6A6 -  -  -  -  ExpressOperator:
  371 D1:B6A6 23 -  -  -  	inc	hl
  372 D1:B6A7 7E -  -  -  	ld	a, (hl)
  373 D1:B6A8 2B -  -  -  	dec	hl
  374 D1:B6A9 C5 -  -  -  	push	bc
  375 D1:B6AA E5 -  -  -  		push	hl
  376 D1:B6AB DD E1 -  -  		pop	ix
  377 D1:B6AD DD 17 FD -  		ld	de, (ix-3)
  378 D1:B6B0 DD 07 F9 -  		ld	bc, (ix-7)
  379 D1:B6B3 CD 28 D2 D1 		call	ExecuteOperator
  380 D1:B6B7 3A 3C EA D1 		ld	a, (ExprOutput2)
  381 D1:B6BB 32 3B EA D1 		ld	(ExprOutput), a
  382 D1:B6BF ED 12 FC -  		lea	de, ix-4
  383 D1:B6C2 C1 -  -  -  	pop	bc
  384 D1:B6C3 21 08 00 00 	ld	hl, 8
  385 D1:B6C7 19 -  -  -  	add	hl, de
  386 D1:B6C8 D5 -  -  -  	push	de
  387 D1:B6C9 C5 -  -  -  		push	bc
  388 D1:B6CA ED B0 -  -  			ldir
  389 D1:B6CC C1 -  -  -  		pop	bc
  390 D1:B6CD 21 F4 FF FF 		ld	hl, -12
  391 D1:B6D1 09 -  -  -  		add	hl, bc
  392 D1:B6D2 19 -  -  -  		add	hl, de
  393 D1:B6D3 B7 -  -  -  		or	a
  394 D1:B6D4 ED 52 -  -  		sbc	hl, de
  395 D1:B6D6 E5 -  -  -  		push	hl
  396 D1:B6D7 C1 -  -  -  		pop	bc
  397 D1:B6D8 E1 -  -  -  	pop	hl
  398 D1:B6D9 20 0D -  -  	jr	nz, +_
  399 D1:B6DB FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  400 D1:B6DF CA 1B B7 D1 	jp	z, StopParseExpression
  401 D1:B6E3 DD 27 F9 -  	ld	hl, (ix-7)
  402 D1:B6E6 18 48 -  -  	jr	ParseSingleArgument2
  403 D1:B6E8 03 -  -  -  _:	inc	bc
  404 D1:B6E9 03 -  -  -  	inc	bc
  405 D1:B6EA 03 -  -  -  	inc	bc
  406 D1:B6EB 03 -  -  -  	inc	bc
  407 D1:B6EC FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  408 D1:B6F0 C2 1A B6 D1 	jp	nz, Loop
  409 D1:B6F4 -  -  -  -  AddChain:
  410 D1:B6F4 1E 03 -  -  	ld	e, typeChainAns
  411 D1:B6F6 7E -  -  -  	ld	a, (hl)
  412 D1:B6F7 FE 1F -  -  	cp	a, typeOperator
  413 D1:B6F9 30 15 -  -  	jr	nc, ChainAns2
  414 D1:B6FB 23 -  -  -  	inc	hl
  415 D1:B6FC 23 -  -  -  	inc	hl
  416 D1:B6FD 23 -  -  -  	inc	hl
  417 D1:B6FE 23 -  -  -  	inc	hl
  418 D1:B6FF B6 -  -  -  	or	a, (hl)
  419 D1:B700 2B -  -  -  	dec	hl
  420 D1:B701 2B -  -  -  	dec	hl
  421 D1:B702 2B -  -  -  	dec	hl
  422 D1:B703 2B -  -  -  	dec	hl
  423 D1:B704 FE 1F -  -  	cp	a, typeOperator
  424 D1:B706 28 08 -  -  	jr	z, ChainAns2
  425 D1:B708 -  -  -  -  ChainPush2:
  426 D1:B708 E5 -  -  -  	push	hl
  427 D1:B709 CD 09 AD D1 		call	InsertPushHLDE
  428 D1:B70D E1 -  -  -  	pop	hl
  429 D1:B70E 1E 02 -  -  	ld	e, typeChainPush
  430 D1:B710 -  -  -  -  ChainAns2:
  431 D1:B710 E5 -  -  -  	push	hl
  432 D1:B711 2B -  -  -  		dec	hl
  433 D1:B712 2B -  -  -  		dec	hl
  434 D1:B713 2B -  -  -  		dec	hl
  435 D1:B714 2B -  -  -  		dec	hl
  436 D1:B715 73 -  -  -  		ld	(hl), e
  437 D1:B716 E1 -  -  -  	pop	hl
  438 D1:B717 C3 1A B6 D1 	jp	Loop
  439 D1:B71B -  -  -  -  	
  440 D1:B71B -  -  -  -  StopParseExpression:
  441 D1:B71B 3A 34 EA D1 	ld	a, (openedParensF)
  442 D1:B71F B7 -  -  -  	or	a, a
  443 D1:B720 C2 C7 AC D1 	jp	nz, MaybeChangeDEToHL
  444 D1:B724 C9 -  -  -  	ret
  445 D1:B725 -  -  -  -  	
  446 D1:B725 -  -  -  -  ParseSingleArgument:
  447 D1:B725 7E -  -  -  	ld	a, (hl)
  448 D1:B726 B7 -  -  -  	or	a, a
  449 D1:B727 20 0D -  -  	jr	nz, ParseSingleNotNumber
  450 D1:B729 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  451 D1:B72D 23 -  -  -  	inc	hl
  452 D1:B72E ED 27 -  -  	ld	hl, (hl)
  453 D1:B730 -  -  -  -  ParseSingleArgument2:
  454 D1:B730 3E 21 -  -  	ld	a, 021h
  455 D1:B732 C3 4C AC D1 	jp	InsertAHL															;	ld hl, *
  456 D1:B736 -  -  -  -  ParseSingleNotNumber:
  457 D1:B736 3D -  -  -  	dec	a
  458 D1:B737 20 06 -  -  	jr	nz, ParseSingleNotVariable
  459 D1:B739 23 -  -  -  	inc	hl
  460 D1:B73A 4E -  -  -  	ld	c, (hl)
  461 D1:B73B C3 72 AC D1 	jp	InsertHIXC
  462 D1:B73F -  -  -  -  ParseSingleNotVariable:
  463 D1:B73F D6 03 -  -  	sub	a, 3
  464 D1:B741 20 0C -  -  	jr	nz, ParseSingleNotFunction
  465 D1:B743 23 -  -  -  	inc	hl
  466 D1:B744 7E -  -  -  	ld	a, (hl)
  467 D1:B745 06 02 -  -  	ld	b, OutputInHL
  468 D1:B747 FD CB C0 B6 	res	need_push, (iy+fExpression1)
  469 D1:B74B C3 44 AD D1 	jp	GetFunction
  470 D1:B74F -  -  -  -  ParseSingleNotFunction:
  471 D1:B74F D6 03 -  -  	sub	a, 3
  472 D1:B751 C2 39 AF D1 	jp	nz, ErrorSyntax
  473 D1:B755 FD CB C0 FE 	set	output_is_string, (iy+fExpression1)
  474 D1:B759 E5 -  -  -  	push	hl
  475 D1:B75A 3E 21 -  -  		ld	a, 021h
  476 D1:B75C CD 18 AD D1 		call	InsertA														;	ld hl, *
  477 D1:B760 CD 2F AD D1 		call	InsertProgramPtrToDataOffset
  478 D1:B764 2A 2F EA D1 		ld	hl, (programDataDataPtr)
  479 D1:B768 CD 50 AC D1 		call	InsertHL														;	ld hl, XXXXXXX
  480 D1:B76C E1 -  -  -  	pop	hl
  481 D1:B76D 23 -  -  -  	inc	hl
  482 D1:B76E ED 17 -  -  	ld	de, (hl)																;	hl points to string in string stack
  483 D1:B770 ED 27 -  -  	ld	hl, (hl)
  484 D1:B772 01 FF FF FF 	ld	bc, -1
  485 D1:B776 AF -  -  -  	xor	a, a
  486 D1:B777 ED B1 -  -  	cpir
  487 D1:B779 ED 52 -  -  	sbc	hl, de
  488 D1:B77B E5 -  -  -  	push	hl
  489 D1:B77C C1 -  -  -  	pop	bc																	;	bc = length of string
  490 D1:B77D EB -  -  -  	ex	de, hl
  491 D1:B77E ED 5B 2F EA 
              D1 -  -  -  	ld	de, (programDataDataPtr)
  492 D1:B783 D5 -  -  -  	push	de
  493 D1:B784 ED B0 -  -  		ldir
  494 D1:B786 ED 53 2F EA 
              D1 -  -  -  		ld	(programDataDataPtr), de
  495 D1:B78B E1 -  -  -  	pop	hl
  496 D1:B78C C9 -  -  -  	ret
  497 D1:B78D -  -  -  -  	
  498 D1:B78D -  -  -  -  MoveStackEntryToOutput:
  499 D1:B78D 2A 14 EA D1 	ld	hl, (stackPtr)
  500 D1:B791 11 83 EA D0 	ld	de, stack
  501 D1:B795 B7 -  -  -  	or	a, a
  502 D1:B796 ED 52 -  -  	sbc	hl, de
  503 D1:B798 C8 -  -  -  	ret	z
  504 D1:B799 19 -  -  -  	add	hl, de
  505 D1:B79A 2B -  -  -  	dec	hl
  506 D1:B79B 2B -  -  -  	dec	hl
  507 D1:B79C 2B -  -  -  	dec	hl
  508 D1:B79D 2B -  -  -  	dec	hl
  509 D1:B79E 22 14 EA D1 	ld	(stackPtr), hl
  510 D1:B7A2 ED 5B 17 EA 
              D1 -  -  -  	ld	de, (outputPtr)
  511 D1:B7A7 7E -  -  -  	ld	a, (hl)
  512 D1:B7A8 FE 3F -  -  	cp	a, typeFunction
  513 D1:B7AA 20 07 -  -  	jr	nz, +_
  514 D1:B7AC 23 -  -  -  	inc	hl
  515 D1:B7AD 7E -  -  -  	ld	a, (hl)
  516 D1:B7AE 2B -  -  -  	dec	hl
  517 D1:B7AF FE 10 -  -  	cp	a, tLParen
  518 D1:B7B1 28 DA -  -  	jr	z, MoveStackEntryToOutput
  519 D1:B7B3 ED A0 -  -  _:	ldi
  520 D1:B7B5 ED A0 -  -  	ldi
  521 D1:B7B7 ED A0 -  -  	ldi
  522 D1:B7B9 ED A0 -  -  	ldi
  523 D1:B7BB ED 53 17 EA 
              D1 -  -  -  	ld	(outputPtr), de
  524 D1:B7C0 18 CB -  -  	jr	MoveStackEntryToOutput
Listing for file "ice.asm"
  443 D1:B7C2 -  -  -  -  #include "putchar.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\putchar.asm"
    1 D1:B7C2 -  -  -  -  _PrintChar_ASM:
    2 D1:B7C2 E5 -  -  -  	push	hl
    3 D1:B7C3 -  -  -  -  TextXPos_ASM = $+1
    4 D1:B7C3 01 00 00 00 		ld	bc,	0
    5 D1:B7C7 F5 -  -  -  		push	af
    6 D1:B7C8 F5 -  -  -  			push	af
    7 D1:B7C9 C5 -  -  -  				push	bc
    8 D1:B7CA B7 -  -  -  					or	a,a
    9 D1:B7CB ED 62 -  -  					sbc	hl,hl
   10 D1:B7CD 6F -  -  -  					ld	l,a
   11 D1:B7CE 11 30 B8 D1 					ld	de,	DefaultCharSpacing_ASM
   12 D1:B7D2 19 -  -  -  					add	hl,de
   13 D1:B7D3 7E -  -  -  					ld	a,(hl)
   14 D1:B7D4 32 17 B8 D1 					ld	(charwidth),a
   15 D1:B7D8 B7 -  -  -  					or	a,a
   16 D1:B7D9 ED 62 -  -  					sbc	hl,hl
   17 D1:B7DB 6F -  -  -  					ld	l,a
   18 D1:B7DC ED 44 -  -  					neg
   19 D1:B7DE 32 E8 B7 D1 					ld	(CharWidthDelta_ASM),a
   20 D1:B7E2 09 -  -  -  					add	hl,bc
   21 D1:B7E3 22 C4 B7 D1 					ld	(TextXPos_ASM),hl
   22 D1:B7E7 -  -  -  -  CharWidthDelta_ASM	=$+1
   23 D1:B7E7 11 FF FF FF 					ld	de,$FFFFFF
   24 D1:B7EB 21 40 01 00 					ld	hl,lcdWidth
   25 D1:B7EF 19 -  -  -  					add	hl,de
   26 D1:B7F0 22 24 B8 D1 					ld	(line_change),hl
   27 D1:B7F4 -  -  -  -  TextYPos_ASM	= $+1
   28 D1:B7F4 2E 00 -  -  					ld	l,0
   29 D1:B7F6 26 A0 -  -  					ld	h,160
   30 D1:B7F8 ED 6C -  -  					mlt	hl
   31 D1:B7FA 29 -  -  -  					add	hl,hl
   32 D1:B7FB 11 00 00 D4 					ld	de,vRAM
   33 D1:B7FF 19 -  -  -  					add	hl,de
   34 D1:B800 D1 -  -  -  				pop	de
   35 D1:B801 19 -  -  -  				add	hl,de
   36 D1:B802 F1 -  -  -  			pop	af
   37 D1:B803 EB -  -  -  			ex	de,hl
   38 D1:B804 B7 -  -  -  			or	a,a
   39 D1:B805 ED 62 -  -  			sbc	hl,hl
   40 D1:B807 D6 17 -  -  			sub	a, 23
   41 D1:B809 6F -  -  -  			ld	l,a
   42 D1:B80A 29 -  -  -  			add	hl,hl
   43 D1:B80B 29 -  -  -  			add	hl,hl
   44 D1:B80C 29 -  -  -  			add	hl,hl
   45 D1:B80D 01 AB B8 D1 			ld	bc,	DefaultTextData_ASM
   46 D1:B811 09 -  -  -  			add	hl,bc
   47 D1:B812 06 08 -  -  			ld	b,8
   48 D1:B814 C5 -  -  -  iloop:		push	bc
   49 D1:B815 4E -  -  -  				ld	c,(hl)
   50 D1:B816 -  -  -  -  charwidth =$+1
   51 D1:B816 06 00 -  -  				ld	b,0
   52 D1:B818 EB -  -  -  				ex	de,hl
   53 D1:B819 -  -  -  -  color = $+1
   54 D1:B819 3E 00 -  -  				ld	a, 0
   55 D1:B81B CB 21 -  -  cloop:			sla	c
   56 D1:B81D 30 01 -  -  				jr	nc,+_
   57 D1:B81F 77 -  -  -  				ld	(hl), a
   58 D1:B820 23 -  -  -  _:				inc	hl
   59 D1:B821 10 F8 -  -  				djnz	cloop
   60 D1:B823 -  -  -  -  line_change =$+1
   61 D1:B823 01 00 00 00 				ld	bc,0
   62 D1:B827 09 -  -  -  				add	hl,bc
   63 D1:B828 EB -  -  -  				ex	de,hl
   64 D1:B829 23 -  -  -  				inc	hl
   65 D1:B82A C1 -  -  -  			pop	bc
   66 D1:B82B 10 E7 -  -  			djnz	iloop
   67 D1:B82D F1 -  -  -  		pop	af
   68 D1:B82E E1 -  -  -  	pop	hl
   69 D1:B82F C9 -  -  -  	ret
   70 D1:B830 -  -  -  -  
   71 D1:B830 -  -  -  -  DefaultCharSpacing_ASM:
   72 D1:B830 -  -  -  -  	;	  0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
   73 D1:B830 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 02 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8	;	0
   74 D1:B840 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	;	1
   75 D1:B850 03 04 06 08 
              08 08 08 05 
              05 05 08 07 
              04 07 03 08 	.db	3,4,6,8,8,8,8,5,5,5,8,7,4,7,3,8	;	2
   76 D1:B860 08 07 08 08 
              08 08 08 08 
              08 08 03 04 
              06 07 06 07 	.db	8,7,8,8,8,8,8,8,8,8,3,4,6,7,6,7	;	3
   77 D1:B870 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	;	4
   78 D1:B880 08 08 08 08 
              08 08 08 08 
              08 08 08 05 
              08 05 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,5,8,5,8,8	;	5
   79 D1:B890 04 08 08 08 
              08 08 08 08 
              08 05 08 08 
              05 08 08 08 	.db	4,8,8,8,8,8,8,8,8,5,8,8,5,8,8,8	;	6
   80 D1:B8A0 08 08 08 08 
              07 08 08 08 
              08 08 08 -  	.db	8,8,8,8,7,8,8,8,8,8,8			;	7
   81 D1:B8AB -  -  -  -   
   82 D1:B8AB -  -  -  -  ;-------------------------------------------------------------------------------
   83 D1:B8AB -  -  -  -  DefaultTextData_ASM:
   84 D1:B8AB FF FF FF FF 
              FF FF FF FF Char000: .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF	;	_
   85 D1:B8B3 18 3C 7E 18 
              18 18 18 00 Char024: .db $18,$3C,$7E,$18,$18,$18,$18,$00	;	.
   86 D1:B8BB 18 18 18 18 
              7E 3C 18 00 Char025: .db $18,$18,$18,$18,$7E,$3C,$18,$00	;	.
   87 D1:B8C3 00 18 0C FE 
              0C 18 00 00 Char026: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	;	.
   88 D1:B8CB 00 30 60 FE 
              60 30 00 00 Char027: .db $00,$30,$60,$FE,$60,$30,$00,$00	;	.
   89 D1:B8D3 00 18 0C FE 
              0C 18 00 00 Char028: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	;	->
   90 D1:B8DB 00 24 66 FF 
              66 24 00 00 Char029: .db $00,$24,$66,$FF,$66,$24,$00,$00	;	.
   91 D1:B8E3 00 18 3C 7E 
              FF FF 00 00 Char030: .db $00,$18,$3C,$7E,$FF,$FF,$00,$00	;	.
   92 D1:B8EB 00 FF FF 7E 
              3C 18 00 00 Char031: .db $00,$FF,$FF,$7E,$3C,$18,$00,$00	;	.
   93 D1:B8F3 00 00 00 00 
              00 00 00 00 Char032: .db $00,$00,$00,$00,$00,$00,$00,$00	;	 
   94 D1:B8FB C0 C0 C0 C0 
              C0 00 C0 00 Char033: .db $C0,$C0,$C0,$C0,$C0,$00,$C0,$00	;	!
   95 D1:B903 D8 D8 D8 00 
              00 00 00 00 Char034: .db $D8,$D8,$D8,$00,$00,$00,$00,$00	;	"
   96 D1:B90B 6C 6C FE 6C 
              FE 6C 6C 00 Char035: .db $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	;	#
   97 D1:B913 18 7E C0 7C 
              06 FC 18 00 Char036: .db $18,$7E,$C0,$7C,$06,$FC,$18,$00	;	$
   98 D1:B91B 00 C6 CC 18 
              30 66 C6 00 Char037: .db $00,$C6,$CC,$18,$30,$66,$C6,$00	;	%
   99 D1:B923 38 6C 38 76 
              DC CC 76 00 Char038: .db $38,$6C,$38,$76,$DC,$CC,$76,$00	;	&
  100 D1:B92B 30 30 60 00 
              00 00 00 00 Char039: .db $30,$30,$60,$00,$00,$00,$00,$00	;	'
  101 D1:B933 30 60 C0 C0 
              C0 60 30 00 Char040: .db $30,$60,$C0,$C0,$C0,$60,$30,$00	;	(
  102 D1:B93B C0 60 30 30 
              30 60 C0 00 Char041: .db $C0,$60,$30,$30,$30,$60,$C0,$00	;	)
  103 D1:B943 00 66 3C FF 
              3C 66 00 00 Char042: .db $00,$66,$3C,$FF,$3C,$66,$00,$00	;	*
  104 D1:B94B 00 30 30 FC 
              FC 30 30 00 Char043: .db $00,$30,$30,$FC,$FC,$30,$30,$00	;	+
  105 D1:B953 00 00 00 00 
              00 60 60 C0 Char044: .db $00,$00,$00,$00,$00,$60,$60,$C0	;	,
  106 D1:B95B 00 00 00 FC 
              00 00 00 00 Char045: .db $00,$00,$00,$FC,$00,$00,$00,$00	;	-
  107 D1:B963 00 00 00 00 
              00 C0 C0 00 Char046: .db $00,$00,$00,$00,$00,$C0,$C0,$00	;	.
  108 D1:B96B 06 0C 18 30 
              60 C0 80 00 Char047: .db $06,$0C,$18,$30,$60,$C0,$80,$00	;	/
  109 D1:B973 7C CE DE F6 
              E6 C6 7C 00 Char048: .db $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00	;	0
  110 D1:B97B 30 70 30 30 
              30 30 FC 00 Char049: .db $30,$70,$30,$30,$30,$30,$FC,$00	;	1
  111 D1:B983 7C C6 06 7C 
              C0 C0 FE 00 Char050: .db $7C,$C6,$06,$7C,$C0,$C0,$FE,$00	;	2
  112 D1:B98B FC 06 06 3C 
              06 06 FC 00 Char051: .db $FC,$06,$06,$3C,$06,$06,$FC,$00	;	3
  113 D1:B993 0C CC CC CC 
              FE 0C 0C 00 Char052: .db $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00	;	4
  114 D1:B99B FE C0 FC 06 
              06 C6 7C 00 Char053: .db $FE,$C0,$FC,$06,$06,$C6,$7C,$00	;	5
  115 D1:B9A3 7C C0 C0 FC 
              C6 C6 7C 00 Char054: .db $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00	;	6
  116 D1:B9AB FE 06 06 0C 
              18 30 30 00 Char055: .db $FE,$06,$06,$0C,$18,$30,$30,$00	;	7
  117 D1:B9B3 7C C6 C6 7C 
              C6 C6 7C 00 Char056: .db $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00	;	8
  118 D1:B9BB 7C C6 C6 7E 
              06 06 7C 00 Char057: .db $7C,$C6,$C6,$7E,$06,$06,$7C,$00	;	9
  119 D1:B9C3 00 C0 C0 00 
              00 C0 C0 00 Char058: .db $00,$C0,$C0,$00,$00,$C0,$C0,$00	;	:
  120 D1:B9CB 00 60 60 00 
              00 60 60 C0 Char059: .db $00,$60,$60,$00,$00,$60,$60,$C0	;	;
  121 D1:B9D3 18 30 60 C0 
              60 30 18 00 Char060: .db $18,$30,$60,$C0,$60,$30,$18,$00	;	<
  122 D1:B9DB 00 00 FC 00 
              FC 00 00 00 Char061: .db $00,$00,$FC,$00,$FC,$00,$00,$00	;	=
  123 D1:B9E3 C0 60 30 18 
              30 60 C0 00 Char062: .db $C0,$60,$30,$18,$30,$60,$C0,$00	;	>
  124 D1:B9EB 78 CC 18 30 
              30 00 30 00 Char063: .db $78,$CC,$18,$30,$30,$00,$30,$00	;	?
  125 D1:B9F3 7C C6 DE DE 
              DE C0 7E 00 Char064: .db $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00	;	@
  126 D1:B9FB 38 6C C6 C6 
              FE C6 C6 00 Char065: .db $38,$6C,$C6,$C6,$FE,$C6,$C6,$00	;	A
  127 D1:BA03 FC C6 C6 FC 
              C6 C6 FC 00 Char066: .db $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00	;	B
  128 D1:BA0B 7C C6 C0 C0 
              C0 C6 7C 00 Char067: .db $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00	;	C
  129 D1:BA13 F8 CC C6 C6 
              C6 CC F8 00 Char068: .db $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00	;	D
  130 D1:BA1B FE C0 C0 F8 
              C0 C0 FE 00 Char069: .db $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00	;	E
  131 D1:BA23 FE C0 C0 F8 
              C0 C0 C0 00 Char070: .db $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00	;	F
  132 D1:BA2B 7C C6 C0 C0 
              CE C6 7C 00 Char071: .db $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00	;	G
  133 D1:BA33 C6 C6 C6 FE 
              C6 C6 C6 00 Char072: .db $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00	;	H
  134 D1:BA3B 7E 18 18 18 
              18 18 7E 00 Char073: .db $7E,$18,$18,$18,$18,$18,$7E,$00	;	I
  135 D1:BA43 06 06 06 06 
              06 C6 7C 00 Char074: .db $06,$06,$06,$06,$06,$C6,$7C,$00	;	J
  136 D1:BA4B C6 CC D8 F0 
              D8 CC C6 00 Char075: .db $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	;	K
  137 D1:BA53 C0 C0 C0 C0 
              C0 C0 FE 00 Char076: .db $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00	;	L
  138 D1:BA5B C6 EE FE FE 
              D6 C6 C6 00 Char077: .db $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00	;	M
  139 D1:BA63 C6 E6 F6 DE 
              CE C6 C6 00 Char078: .db $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	;	N
  140 D1:BA6B 7C C6 C6 C6 
              C6 C6 7C 00 Char079: .db $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00	;	O
  141 D1:BA73 FC C6 C6 FC 
              C0 C0 C0 00 Char080: .db $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00	;	P
  142 D1:BA7B 7C C6 C6 C6 
              D6 DE 7C 06 Char081: .db $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06	;	Q
  143 D1:BA83 FC C6 C6 FC 
              D8 CC C6 00 Char082: .db $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00	;	R
  144 D1:BA8B 7C C6 C0 7C 
              06 C6 7C 00 Char083: .db $7C,$C6,$C0,$7C,$06,$C6,$7C,$00	;	S
  145 D1:BA93 FF 18 18 18 
              18 18 18 00 Char084: .db $FF,$18,$18,$18,$18,$18,$18,$00	;	T
  146 D1:BA9B C6 C6 C6 C6 
              C6 C6 FE 00 Char085: .db $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00	;	U
  147 D1:BAA3 C6 C6 C6 C6 
              C6 7C 38 00 Char086: .db $C6,$C6,$C6,$C6,$C6,$7C,$38,$00	;	V
  148 D1:BAAB C6 C6 C6 C6 
              D6 FE 6C 00 Char087: .db $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00	;	W
  149 D1:BAB3 C6 C6 6C 38 
              6C C6 C6 00 Char088: .db $C6,$C6,$6C,$38,$6C,$C6,$C6,$00	;	X
  150 D1:BABB C6 C6 C6 7C 
              18 30 E0 00 Char089: .db $C6,$C6,$C6,$7C,$18,$30,$E0,$00	;	Y
  151 D1:BAC3 FE 06 0C 18 
              30 60 FE 00 Char090: .db $FE,$06,$0C,$18,$30,$60,$FE,$00	;	Z
  152 D1:BACB F0 C0 C0 C0 
              C0 C0 F0 00 Char091: .db $F0,$C0,$C0,$C0,$C0,$C0,$F0,$00	;	[
  153 D1:BAD3 C0 60 30 18 
              0C 06 02 00 Char092: .db $C0,$60,$30,$18,$0C,$06,$02,$00	;	\
  154 D1:BADB F0 30 30 30 
              30 30 F0 00 Char093: .db $F0,$30,$30,$30,$30,$30,$F0,$00	;	]
  155 D1:BAE3 10 38 6C C6 
              00 00 00 00 Char094: .db $10,$38,$6C,$C6,$00,$00,$00,$00	;	^
  156 D1:BAEB 00 00 00 00 
              00 00 00 FF Char095: .db $00,$00,$00,$00,$00,$00,$00,$FF	;	_
  157 D1:BAF3 C0 C0 60 00 
              00 00 00 00 Char096: .db $C0,$C0,$60,$00,$00,$00,$00,$00	;	`
  158 D1:BAFB 00 00 7C 06 
              7E C6 7E 00 Char097: .db $00,$00,$7C,$06,$7E,$C6,$7E,$00	;	a
  159 D1:BB03 C0 C0 C0 FC 
              C6 C6 FC 00 Char098: .db $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00	;	b
  160 D1:BB0B 00 00 7C C6 
              C0 C6 7C 00 Char099: .db $00,$00,$7C,$C6,$C0,$C6,$7C,$00	;	c
  161 D1:BB13 06 06 06 7E 
              C6 C6 7E 00 Char100: .db $06,$06,$06,$7E,$C6,$C6,$7E,$00	;	d
  162 D1:BB1B 00 00 7C C6 
              FE C0 7C 00 Char101: .db $00,$00,$7C,$C6,$FE,$C0,$7C,$00	;	e
  163 D1:BB23 1C 36 30 78 
              30 30 78 00 Char102: .db $1C,$36,$30,$78,$30,$30,$78,$00	;	f
  164 D1:BB2B 00 00 7E C6 
              C6 7E 06 FC Char103: .db $00,$00,$7E,$C6,$C6,$7E,$06,$FC	;	g
  165 D1:BB33 C0 C0 FC C6 
              C6 C6 C6 00 Char104: .db $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00	;	h
  166 D1:BB3B 60 00 E0 60 
              60 60 F0 00 Char105: .db $60,$00,$E0,$60,$60,$60,$F0,$00	;	i
  167 D1:BB43 06 00 06 06 
              06 06 C6 7C Char106: .db $06,$00,$06,$06,$06,$06,$C6,$7C	;	j
  168 D1:BB4B C0 C0 CC D8 
              F8 CC C6 00 Char107: .db $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00	;	k
  169 D1:BB53 E0 60 60 60 
              60 60 F0 00 Char108: .db $E0,$60,$60,$60,$60,$60,$F0,$00	;	l
  170 D1:BB5B 00 00 CC FE 
              FE D6 D6 00 Char109: .db $00,$00,$CC,$FE,$FE,$D6,$D6,$00	;	m
  171 D1:BB63 00 00 FC C6 
              C6 C6 C6 00 Char110: .db $00,$00,$FC,$C6,$C6,$C6,$C6,$00	;	n
  172 D1:BB6B 00 00 7C C6 
              C6 C6 7C 00 Char111: .db $00,$00,$7C,$C6,$C6,$C6,$7C,$00	;	o
  173 D1:BB73 00 00 FC C6 
              C6 FC C0 C0 Char112: .db $00,$00,$FC,$C6,$C6,$FC,$C0,$C0	;	p
  174 D1:BB7B 00 00 7E C6 
              C6 7E 06 06 Char113: .db $00,$00,$7E,$C6,$C6,$7E,$06,$06	;	q
  175 D1:BB83 00 00 FC C6 
              C0 C0 C0 00 Char114: .db $00,$00,$FC,$C6,$C0,$C0,$C0,$00	;	r
  176 D1:BB8B 00 00 7E C0 
              7C 06 FC 00 Char115: .db $00,$00,$7E,$C0,$7C,$06,$FC,$00	;	s
  177 D1:BB93 30 30 FC 30 
              30 30 1C 00 Char116: .db $30,$30,$FC,$30,$30,$30,$1C,$00	;	t
  178 D1:BB9B 00 00 C6 C6 
              C6 C6 7E 00 Char117: .db $00,$00,$C6,$C6,$C6,$C6,$7E,$00	;	u
  179 D1:BBA3 00 00 C6 C6 
              C6 7C 38 00 Char118: .db $00,$00,$C6,$C6,$C6,$7C,$38,$00	;	v
  180 D1:BBAB 00 00 C6 C6 
              D6 FE 6C 00 Char119: .db $00,$00,$C6,$C6,$D6,$FE,$6C,$00	;	w
  181 D1:BBB3 00 00 C6 6C 
              38 6C C6 00 Char120: .db $00,$00,$C6,$6C,$38,$6C,$C6,$00	;	x
  182 D1:BBBB 00 00 C6 C6 
              C6 7E 06 FC Char121: .db $00,$00,$C6,$C6,$C6,$7E,$06,$FC	;	y
  183 D1:BBC3 00 00 FE 0C 
              38 60 FE 00 Char122: .db $00,$00,$FE,$0C,$38,$60,$FE,$00	;	z
  184 D1:BBCB 1C 30 30 E0 
              30 30 1C 00 Char123: .db $1C,$30,$30,$E0,$30,$30,$1C,$00	;	{
  185 D1:BBD3 C0 C0 C0 00 
              C0 C0 C0 00 Char124: .db $C0,$C0,$C0,$00,$C0,$C0,$C0,$00	;	|
  186 D1:BBDB E0 30 30 1C 
              30 30 E0 00 Char125: .db $E0,$30,$30,$1C,$30,$30,$E0,$00	;	}
  187 D1:BBE3 76 DC 00 00 
              00 00 00 00 Char126: .db $76,$DC,$00,$00,$00,$00,$00,$00	;	~
  188 D1:BBEB 00 10 38 6C 
              C6 C6 FE 00 Char127: .db $00,$10,$38,$6C,$C6,$C6,$FE,$00	;	.
Listing for file "ice.asm"
  444 D1:BBF3 -  -  -  -  #include "programs.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\programs.asm"
    1 D1:BBF3 -  -  -  -  FindNextGoodVar:
    2 D1:BBF3 ED 5B 9A 25 
              D0 -  -  -  	ld	de, (pTemp)
    3 D1:BBF8 CD 3C 01 02 	call	_CpHLDE
    4 D1:BBFC 20 02 -  -  	jr	nz, FindContinue
    5 D1:BBFE 3C -  -  -  	inc	a									;	return nz
    6 D1:BBFF C9 -  -  -  	ret
    7 D1:BC00 -  -  -  -  FindContinue:
    8 D1:BC00 7E -  -  -  	ld	a, (hl)
    9 D1:BC01 2B -  -  -  	dec	hl
   10 D1:BC02 2B -  -  -  	dec	hl
   11 D1:BC03 2B -  -  -  	dec	hl
   12 D1:BC04 FE 05 -  -  	cp	a, ProgObj
   13 D1:BC06 28 04 -  -  	jr	z, FindGoodProgram
   14 D1:BC08 FE 06 -  -  	cp	a, ProtProgObj
   15 D1:BC0A 20 43 -  -  	jr	nz, FindWrongProgram
   16 D1:BC0C -  -  -  -  FindGoodProgram:
   17 D1:BC0C 5E -  -  -  	ld	e, (hl)
   18 D1:BC0D 2B -  -  -  	dec	hl
   19 D1:BC0E 56 -  -  -  	ld	d, (hl)
   20 D1:BC0F 2B -  -  -  	dec	hl
   21 D1:BC10 7E -  -  -  	ld	a, (hl)
   22 D1:BC11 CD 68 1D 02 	call	_SetDEUToA
   23 D1:BC15 FE D0 -  -  	cp	a, 0D0h
   24 D1:BC17 30 0C -  -  	jr	nc, +_
   25 D1:BC19 E5 -  -  -  	push	hl
   26 D1:BC1A EB -  -  -  		ex	de, hl
   27 D1:BC1B 11 09 00 00 		ld	de, 9
   28 D1:BC1F 19 -  -  -  		add	hl, de
   29 D1:BC20 5E -  -  -  		ld	e, (hl)
   30 D1:BC21 1C -  -  -  		inc	e
   31 D1:BC22 19 -  -  -  		add	hl, de
   32 D1:BC23 EB -  -  -  		ex	de, hl
   33 D1:BC24 E1 -  -  -  	pop	hl
   34 D1:BC25 13 -  -  -  _:	inc	de
   35 D1:BC26 13 -  -  -  	inc	de
   36 D1:BC27 1A -  -  -  	ld	a, (de)
   37 D1:BC28 FE 2C -  -  	cp	a, tii
   38 D1:BC2A 20 25 -  -  	jr	nz, FindWrongProgram2
   39 D1:BC2C 2B -  -  -  	dec	hl
   40 D1:BC2D D5 -  -  -  	push	de
   41 D1:BC2E E5 -  -  -  		push	hl
   42 D1:BC2F 2A 1D EA D1 			ld	hl, (ProgramNamesPtr)
   43 D1:BC33 11 08 00 00 			ld	de, 8
   44 D1:BC37 19 -  -  -  			add	hl, de
   45 D1:BC38 22 1D EA D1 			ld	(ProgramNamesPtr), hl
   46 D1:BC3C B7 -  -  -  			or	a, a
   47 D1:BC3D ED 52 -  -  			sbc	hl, de
   48 D1:BC3F EB -  -  -  			ex	de, hl
   49 D1:BC40 E1 -  -  -  		pop	hl
   50 D1:BC41 46 -  -  -  		ld	b, (hl)
   51 D1:BC42 48 -  -  -  		ld	c, b
   52 D1:BC43 2B -  -  -  		dec	hl
   53 D1:BC44 -  -  -  -  FindCopyProgName:
   54 D1:BC44 7E -  -  -  		ld	a, (hl)
   55 D1:BC45 12 -  -  -  		ld	(de), a
   56 D1:BC46 2B -  -  -  		dec	hl
   57 D1:BC47 13 -  -  -  		inc	de
   58 D1:BC48 10 FA -  -  		djnz	FindCopyProgName
   59 D1:BC4A AF -  -  -  		xor	a, a
   60 D1:BC4B 12 -  -  -  		ld	(de), a
   61 D1:BC4C D1 -  -  -  	pop	de
   62 D1:BC4D BF -  -  -  	cp	a, a
   63 D1:BC4E C9 -  -  -  	ret
   64 D1:BC4F -  -  -  -  FindWrongProgram:
   65 D1:BC4F 2B -  -  -  	dec	hl
   66 D1:BC50 2B -  -  -  	dec	hl
   67 D1:BC51 -  -  -  -  FindWrongProgram2:
   68 D1:BC51 2B -  -  -  	dec	hl
   69 D1:BC52 46 -  -  -  	ld	b, (hl)
   70 D1:BC53 2B -  -  -  	dec	hl
   71 D1:BC54 -  -  -  -  FindSkipProgramName:
   72 D1:BC54 2B -  -  -  	dec	hl
   73 D1:BC55 10 FD -  -  	djnz	FindSkipProgramName
   74 D1:BC57 18 9A -  -  	jr	FindNextGoodVar
Listing for file "ice.asm"
  445 D1:BC59 -  -  -  -  #include "hooks.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\hooks.asm"
    1 D1:BC59 -  -  -  -  InstallHooks:
    2 D1:BC59 21 9C EA D1 	ld	hl, ICEAppvar
    3 D1:BC5D CD 20 03 02 	call	_Mov9ToOP1
    4 D1:BC61 CD 0C 05 02 	call	_ChkFindSym
    5 D1:BC65 38 13 -  -  	jr	c, ++_
    6 D1:BC67 CD 98 1F 02 	call	_ChkInRAM
    7 D1:BC6B 30 09 -  -  	jr	nc, +_
    8 D1:BC6D CD 48 14 02 	call	_Arc_Unarc
    9 D1:BC71 01 05 00 00 	ld	bc, 5
   10 D1:BC75 09 -  -  -  	add	hl, bc
   11 D1:BC76 CD 88 05 02 _:	call	_DelVar
   12 D1:BC7A 21 6B 08 00 _:	ld	hl, Hooks_end - KeyHook_start
   13 D1:BC7E CD 30 13 02 	call	_CreateAppVar
   14 D1:BC82 13 -  -  -  	inc	de
   15 D1:BC83 13 -  -  -  	inc	de
   16 D1:BC84 21 B5 BC D1 	ld	hl, KeyHook_start
   17 D1:BC88 01 6B 08 00 	ld	bc, Hooks_end - KeyHook_start
   18 D1:BC8C ED B0 -  -  	ldir
   19 D1:BC8E CD C8 02 02 	call	_OP4ToOP1
   20 D1:BC92 CD 48 14 02 	call	_Arc_Unarc
   21 D1:BC96 CD 0C 05 02 	call	_ChkFindSym
   22 D1:BC9A 21 13 00 00 	ld	hl, 19														;	archived program header+VAT entry
   23 D1:BC9E 19 -  -  -  	add	hl, de
   24 D1:BC9F CD CC 13 02 	call	_SetGetKeyHook
   25 D1:BCA3 -  -  -  -  	
   26 D1:BCA3 11 92 07 00 	ld	de, KeyHook_end - KeyHook_start
   27 D1:BCA7 19 -  -  -  	add	hl, de
   28 D1:BCA8 CD F8 13 02 	call	_SetTokenHook
   29 D1:BCAC -  -  -  -  	
   30 D1:BCAC 11 2B 00 00 	ld	de, TokenHook_end - TokenHook_start
   31 D1:BCB0 19 -  -  -  	add	hl, de
   32 D1:BCB1 C3 C4 13 02 	jp	_SetCursorhook
   33 D1:BCB5 -  -  -  -  	
   34 D1:BCB5 -  -  -  -  KeyHook_start:
   35 D1:BCB5 83 -  -  -  	.db	83h
   36 D1:BCB6 B7 -  -  -  	or	a, a
   37 D1:BCB7 C8 -  -  -  	ret	z
   38 D1:BCB8 47 -  -  -  	ld	b, a
   39 D1:BCB9 3A E0 07 D0 	ld	a, (cxCurApp)
   40 D1:BCBD FE 46 -  -  	cp	a, cxPrgmEdit
   41 D1:BCBF 78 -  -  -  	ld	a, b
   42 D1:BCC0 C0 -  -  -  	ret	nz
   43 D1:BCC1 F5 -  -  -  	push	af
   44 D1:BCC2 CD A0 20 02 		call	_os_ClearStatusBarLow
   45 D1:BCC6 FD CB B0 86 		res	displayed_det, (iy+fAlways1)
   46 D1:BCCA F1 -  -  -  	pop	af
   47 D1:BCCB FE 5A -  -  	cp	a, kTrace
   48 D1:BCCD C0 -  -  -  	ret	nz
   49 D1:BCCE -  -  -  -  DisplayCustomTokensAndCFunctions:
   50 D1:BCCE CD A8 08 02 	call	_CursorOff
   51 D1:BCD2 16 00 -  -  	ld	d, 0
   52 D1:BCD4 -  -  -  -  DisplayTabWithTokens:
   53 D1:BCD4 D5 -  -  -  	push	de
   54 D1:BCD5 CD 08 08 02 		call	_ClrLCDFull
   55 D1:BCD9 D1 -  -  -  	pop	de
   56 D1:BCDA 21 1E 00 00 	ld	hl, 30
   57 D1:BCDE 22 D5 08 D0 	ld	(penRow), hl
   58 D1:BCE2 21 0C 00 00 	ld	hl, 12
   59 D1:BCE6 22 D2 08 D0 	ld	(penCol), hl
   60 D1:BCEA 06 00 -  -  	ld	b, 0
   61 D1:BCEC 7A -  -  -  	ld	a, d
   62 D1:BCED 1E 03 -  -  	ld	e, 3
   63 D1:BCEF ED 5C -  -  	mlt	de
   64 D1:BCF1 21 4D 06 00 	ld	hl, TabData - KeyHook_start
   65 D1:BCF5 19 -  -  -  	add	hl, de
   66 D1:BCF6 ED 5B DB 25 
              D0 -  -  -  	ld	de, (rawKeyHookPtr)
   67 D1:BCFB 19 -  -  -  	add	hl, de
   68 D1:BCFC ED 27 -  -  	ld	hl, (hl)
   69 D1:BCFE 19 -  -  -  	add	hl, de
   70 D1:BCFF 57 -  -  -  	ld	d, a
   71 D1:BD00 1E 00 -  -  	ld	e, 0
   72 D1:BD02 18 0F -  -  	jr	DisplayTokensLoop
   73 D1:BD04 -  -  -  -  KeyIsLeft:
   74 D1:BD04 7A -  -  -  	ld	a, d
   75 D1:BD05 B7 -  -  -  	or	a, a
   76 D1:BD06 28 61 -  -  	jr	z, KeyLoop
   77 D1:BD08 15 -  -  -  	dec	d
   78 D1:BD09 18 C9 -  -  	jr	DisplayTabWithTokens
   79 D1:BD0B -  -  -  -  KeyIsRight:
   80 D1:BD0B 7A -  -  -  	ld	a, d
   81 D1:BD0C FE 05 -  -  	cp	a, 5
   82 D1:BD0E 28 59 -  -  	jr	z, KeyLoop
   83 D1:BD10 14 -  -  -  	inc	d
   84 D1:BD11 18 C1 -  -  	jr	DisplayTabWithTokens
   85 D1:BD13 -  -  -  -  DisplayTokensLoop:
   86 D1:BD13 78 -  -  -  	ld	a, b
   87 D1:BD14 FE 10 -  -  	cp	a, 16
   88 D1:BD16 28 22 -  -  	jr	z, StopDisplayingTokens
   89 D1:BD18 04 -  -  -  	inc	b
   90 D1:BD19 CD 34 08 02 	call	_VPutS
   91 D1:BD1D E5 -  -  -  	push	hl
   92 D1:BD1E D5 -  -  -  		push	de
   93 D1:BD1F 2A D5 08 D0 			ld	hl, (penRow)
   94 D1:BD23 11 0D 00 00 			ld	de, 13
   95 D1:BD27 19 -  -  -  			add	hl, de
   96 D1:BD28 22 D5 08 D0 			ld	(penRow), hl
   97 D1:BD2C 21 0C 00 00 			ld	hl, 12
   98 D1:BD30 22 D2 08 D0 			ld	(penCol), hl
   99 D1:BD34 D1 -  -  -  		pop	de
  100 D1:BD35 E1 -  -  -  	pop	hl
  101 D1:BD36 7E -  -  -  	ld	a, (hl)
  102 D1:BD37 B7 -  -  -  	or	a, a
  103 D1:BD38 20 D9 -  -  	jr	nz, DisplayTokensLoop
  104 D1:BD3A -  -  -  -  StopDisplayingTokens:
  105 D1:BD3A 21 01 00 00 	ld	hl, 1
  106 D1:BD3E 22 D2 08 D0 	ld	(penCol), hl
  107 D1:BD42 -  -  -  -  GetRightCustomToken:
  108 D1:BD42 7B -  -  -  	ld	a, e
  109 D1:BD43 42 -  -  -  	ld	b, d
  110 D1:BD44 16 0D -  -  	ld	d, 13
  111 D1:BD46 ED 5C -  -  	mlt	de
  112 D1:BD48 21 1E 00 00 	ld	hl, 30
  113 D1:BD4C 19 -  -  -  	add	hl, de
  114 D1:BD4D 50 -  -  -  	ld	d, b
  115 D1:BD4E 5F -  -  -  	ld	e, a
  116 D1:BD4F 22 D5 08 D0 	ld	(penRow), hl
  117 D1:BD53 21 01 00 00 	ld	hl, 1
  118 D1:BD57 22 D2 08 D0 	ld	(penCol), hl
  119 D1:BD5B E5 -  -  -  	push	hl
  120 D1:BD5C D5 -  -  -  		push	de
  121 D1:BD5D 3E 3E -  -  			ld	a, '>'
  122 D1:BD5F CD 30 08 02 			call	_VPutMap
  123 D1:BD63 D1 -  -  -  		pop	de
  124 D1:BD64 E1 -  -  -  	pop	hl
  125 D1:BD65 22 D2 08 D0 	ld	(penCol), hl
  126 D1:BD69 -  -  -  -  KeyLoop:
  127 D1:BD69 CD 4C 01 02 	call	_GetCSC
  128 D1:BD6D B7 -  -  -  	or	a, a
  129 D1:BD6E 28 F9 -  -  	jr	z, KeyLoop
  130 D1:BD70 FE 02 -  -  	cp	a, skLeft
  131 D1:BD72 28 90 -  -  	jr	z, KeyIsLeft
  132 D1:BD74 FE 03 -  -  	cp	a, skRight
  133 D1:BD76 28 93 -  -  	jr	z, KeyIsRight
  134 D1:BD78 FE 04 -  -  	cp	a, skUp
  135 D1:BD7A 20 1B -  -  	jr	nz, KeyNotUp
  136 D1:BD7C 7B -  -  -  	ld	a, e
  137 D1:BD7D B7 -  -  -  	or	a, a
  138 D1:BD7E 28 E9 -  -  	jr	z, KeyLoop
  139 D1:BD80 1D -  -  -  	dec	e
  140 D1:BD81 -  -  -  -  EraseCursor:
  141 D1:BD81 D5 -  -  -  	push	de
  142 D1:BD82 3E 20 -  -  		ld	a, ' '
  143 D1:BD84 CD 30 08 02 		call	_VPutMap
  144 D1:BD88 3E 20 -  -  		ld	a, ' '
  145 D1:BD8A CD 30 08 02 		call	_VPutMap
  146 D1:BD8E 3E 20 -  -  		ld	a, ' '
  147 D1:BD90 CD 30 08 02 		call	_VPutMap
  148 D1:BD94 D1 -  -  -  	pop	de
  149 D1:BD95 18 AB -  -  	jr	GetRightCustomToken
  150 D1:BD97 -  -  -  -  KeyNotUp:
  151 D1:BD97 FE 01 -  -  	cp	a, skDown
  152 D1:BD99 20 12 -  -  	jr	nz, KeyNotDown
  153 D1:BD9B 7A -  -  -  	ld	a, d
  154 D1:BD9C FE 05 -  -  	cp	a, 5
  155 D1:BD9E 7B -  -  -  	ld	a, e
  156 D1:BD9F 20 04 -  -  	jr	nz, +_
  157 D1:BDA1 FE 07 -  -  	cp	a, (AMOUNT_OF_C_FUNCTIONS + AMOUNT_OF_CUSTOM_TOKENS)%16 - 1
  158 D1:BDA3 28 C4 -  -  	jr	z, KeyLoop
  159 D1:BDA5 7B -  -  -  _:	ld	a, e
  160 D1:BDA6 FE 0F -  -  	cp	a, 16-1
  161 D1:BDA8 28 BF -  -  	jr	z, KeyLoop
  162 D1:BDAA 1C -  -  -  	inc	e
  163 D1:BDAB 18 D4 -  -  	jr	EraseCursor
  164 D1:BDAD -  -  -  -  KeyNotDown:
  165 D1:BDAD FE 0F -  -  	cp	a, skClear
  166 D1:BDAF 28 75 -  -  	jr	z, KeyIsClear
  167 D1:BDB1 FE 09 -  -  	cp	a, skEnter
  168 D1:BDB3 20 B4 -  -  	jr	nz, KeyLoop
  169 D1:BDB5 7B -  -  -  	ld	a, e
  170 D1:BDB6 1E 10 -  -  	ld	e, 16
  171 D1:BDB8 ED 5C -  -  	mlt	de
  172 D1:BDBA 83 -  -  -  	add	a, e
  173 D1:BDBB D6 04 -  -  	sub	a, AMOUNT_OF_CUSTOM_TOKENS
  174 D1:BDBD 38 4F -  -  	jr	c, InsertCustomToken
  175 D1:BDBF 21 1F EA D0 	ld	hl, saveSScreen
  176 D1:BDC3 36 B3 -  -  	ld	(hl), tDet
  177 D1:BDC5 23 -  -  -  	inc	hl
  178 D1:BDC6 FE 0A -  -  	cp	a, 10
  179 D1:BDC8 38 17 -  -  	jr	c, +_
  180 D1:BDCA 57 -  -  -  	ld	d, a
  181 D1:BDCB 1E 0A -  -  	ld	e, 10
  182 D1:BDCD AF -  -  -  	xor	a, a
  183 D1:BDCE 06 08 -  -  	ld	b, 8
  184 D1:BDD0 -  -  -  -  _loop:
  185 D1:BDD0 CB 22 -  -  	sla	d
  186 D1:BDD2 17 -  -  -  	rla
  187 D1:BDD3 BB -  -  -  	cp	a, e
  188 D1:BDD4 38 02 -  -  	jr	c, $+4
  189 D1:BDD6 93 -  -  -  	sub	a, e
  190 D1:BDD7 14 -  -  -  	inc	d
  191 D1:BDD8 10 F6 -  -  	djnz	_loop
  192 D1:BDDA 5F -  -  -  	ld	e, a
  193 D1:BDDB 7A -  -  -  	ld	a, d
  194 D1:BDDC C6 30 -  -  	add	a, t0
  195 D1:BDDE 77 -  -  -  	ld	(hl), a
  196 D1:BDDF 23 -  -  -  	inc	hl
  197 D1:BDE0 7B -  -  -  	ld	a, e
  198 D1:BDE1 C6 30 -  -  _:	add	a, t0
  199 D1:BDE3 77 -  -  -  	ld	(hl), a
  200 D1:BDE4 23 -  -  -  	inc	hl
  201 D1:BDE5 36 00 -  -  	ld	(hl), 0
  202 D1:BDE7 21 1F EA D0 	ld	hl, saveSScreen
  203 D1:BDEB -  -  -  -  InsertCFunctionLoop:
  204 D1:BDEB 7E -  -  -  	ld	a, (hl)
  205 D1:BDEC B7 -  -  -  	or	a, a
  206 D1:BDED 28 37 -  -  	jr	z, BufferSearch
  207 D1:BDEF ED 5B 3D 24 
              D0 -  -  -  	ld	de, (editTail)
  208 D1:BDF4 1A -  -  -  	ld	a, (de)
  209 D1:BDF5 FE 3F -  -  	cp	a, tEnter
  210 D1:BDF7 16 00 -  -  	ld	d, 0
  211 D1:BDF9 5E -  -  -  	ld	e, (hl)
  212 D1:BDFA 28 09 -  -  	jr	z, +_
  213 D1:BDFC E5 -  -  -  	push	hl
  214 D1:BDFD CD 08 0D 02 		call	_BufReplace
  215 D1:BE01 E1 -  -  -  	pop	hl
  216 D1:BE02 23 -  -  -  	inc	hl
  217 D1:BE03 18 E6 -  -  	jr	InsertCFunctionLoop
  218 D1:BE05 E5 -  -  -  _:	push	hl
  219 D1:BE06 CD 00 0D 02 		call	_BufInsert
  220 D1:BE0A E1 -  -  -  	pop	hl
  221 D1:BE0B 23 -  -  -  	inc	hl
  222 D1:BE0C 18 DD -  -  	jr	InsertCFunctionLoop
  223 D1:BE0E -  -  -  -  InsertCustomToken:
  224 D1:BE0E C6 0E -  -  	add	a, 10+AMOUNT_OF_CUSTOM_TOKENS
  225 D1:BE10 5F -  -  -  	ld	e, a
  226 D1:BE11 16 62 -  -  	ld	d, tVarOut
  227 D1:BE13 2A 3A 24 D0 	ld	hl, (editCursor)
  228 D1:BE17 7E -  -  -  	ld	a, (hl)
  229 D1:BE18 FE 3F -  -  	cp	a, tEnter
  230 D1:BE1A 28 06 -  -  	jr	z, +_
  231 D1:BE1C CD 08 0D 02 	call	_BufReplace
  232 D1:BE20 18 04 -  -  	jr	BufferSearch
  233 D1:BE22 CD 00 0D 02 _:	call	_BufInsert
  234 D1:BE26 -  -  -  -  KeyIsClear:
  235 D1:BE26 -  -  -  -  BufferSearch:
  236 D1:BE26 01 00 00 00 	ld	bc, 0
  237 D1:BE2A CD F8 0C 02 _:	call	_BufLeft
  238 D1:BE2E 28 0C -  -  	jr	z, BufferFound
  239 D1:BE30 7B -  -  -  	ld	a, e
  240 D1:BE31 FE 3F -  -  	cp	a, tEnter
  241 D1:BE33 28 03 -  -  	jr	z, +_
  242 D1:BE35 03 -  -  -  	inc	bc
  243 D1:BE36 18 F2 -  -  	jr	-_
  244 D1:BE38 CD FC 0C 02 _:	call	_BufRight
  245 D1:BE3C -  -  -  -  BufferFound:
  246 D1:BE3C C5 -  -  -  	push	bc
  247 D1:BE3D CD 08 08 02 		call	_ClrLCDFull
  248 D1:BE41 CD 18 08 02 		call	_ClrTxtShd
  249 D1:BE45 11 89 07 00 		ld	de, CustomTokensProgramText - KeyHook_start
  250 D1:BE49 2A DB 25 D0 		ld	hl, (rawKeyHookPtr)
  251 D1:BE4D 19 -  -  -  		add	hl, de
  252 D1:BE4E AF -  -  -  		xor	a, a
  253 D1:BE4F 32 96 05 D0 		ld	(curCol), a
  254 D1:BE53 32 95 05 D0 		ld	(curRow), a
  255 D1:BE57 CD C0 07 02 		call	_PutS
  256 D1:BE5B 21 5B 06 D0 		ld	hl, progToEdit
  257 D1:BE5F 06 08 -  -  		ld	b, 8
  258 D1:BE61 7E -  -  -  _:		ld	a, (hl)
  259 D1:BE62 B7 -  -  -  		or	a, a
  260 D1:BE63 28 07 -  -  		jr	z, +_
  261 D1:BE65 CD B8 07 02 		call	_PutC
  262 D1:BE69 23 -  -  -  		inc	hl
  263 D1:BE6A 10 F5 -  -  		djnz	-_
  264 D1:BE6C CD F0 07 02 _:		call	_NewLine
  265 D1:BE70 3E 3A -  -  		ld	a, ':'
  266 D1:BE72 CD B8 07 02 		call	_PutC
  267 D1:BE76 CD 68 0D 02 		call	_DispEOW
  268 D1:BE7A C1 -  -  -  	pop	bc
  269 D1:BE7B -  -  -  -  MoveCursorOnce:
  270 D1:BE7B 78 -  -  -  	ld	a, b
  271 D1:BE7C B1 -  -  -  	or	a, c
  272 D1:BE7D 28 07 -  -  	jr	z, ReturnToEditor
  273 D1:BE7F CD 4C 0D 02 	call	_CursorRight
  274 D1:BE83 0B -  -  -  	dec	bc
  275 D1:BE84 18 F5 -  -  	jr	MoveCursorOnce
  276 D1:BE86 -  -  -  -  ReturnToEditor:
  277 D1:BE86 CD B0 08 02 	call	_CursorOn
  278 D1:BE8A 3C -  -  -  	inc	a																	;	reset zero flag
  279 D1:BE8B 3E 00 -  -  	ld	a, 0
  280 D1:BE8D C9 -  -  -  	ret
  281 D1:BE8E -  -  -  -  CustomTokensData:
  282 D1:BE8E -  -  -  -  Tab1:
  283 D1:BE8E 45 78 65 63 
              48 65 78 28 
              00 -  -  -  C1:		.db	"ExecHex(", 0
  284 D1:BE97 44 65 66 69 
              6E 65 53 70 
              72 69 74 65 
              28 00 -  -  C2:		.db	"DefineSprite(", 0
  285 D1:BEA5 43 61 6C 6C 
              20 00 -  -  C3:		.db	"Call ", 0
  286 D1:BEAB 43 6F 6D 70 
              69 6C 65 50 
              72 67 6D 28 
              00 -  -  -  C4:		.db	"CompilePrgm(", 0
  287 D1:BEB8 -  -  -  -  
  288 D1:BEB8 -  -  -  -  #define AMOUNT_OF_C_FUNCTIONS 84
  289 D1:BEB8 -  -  -  -  
  290 D1:BEB8 42 65 67 69 
              6E 00 -  -  C6:		.db	"Begin", 0
  291 D1:BEBE 45 6E 64 00 C7:		.db	"End", 0
  292 D1:BEC2 53 65 74 43 
              6F 6C 6F 72 
              00 -  -  -  C8:		.db	"SetColor", 0
  293 D1:BECB 53 65 74 44 
              65 66 61 75 
              6C 74 50 61 
              6C 65 74 74 
              65 00 -  -  C9:		.db	"SetDefaultPalette", 0
  294 D1:BEDD 53 65 74 50 
              61 6C 65 74 
              74 65 00 -  C10:	.db	"SetPalette", 0
  295 D1:BEE8 46 69 6C 6C 
              53 63 72 65 
              65 6E 00 -  C11:	.db	"FillScreen", 0
  296 D1:BEF3 53 65 74 50 
              69 78 65 6C 
              00 -  -  -  C12:	.db	"SetPixel", 0
  297 D1:BEFC 47 65 74 50 
              69 78 65 6C 
              00 -  -  -  C13:	.db	"GetPixel", 0
  298 D1:BF05 47 65 74 44 
              72 61 77 00 C14:	.db	"GetDraw", 0
  299 D1:BF0D 53 65 74 44 
              72 61 77 00 C15:	.db	"SetDraw", 0
  300 D1:BF15 53 77 61 70 
              44 72 61 77 
              00 -  -  -  C16:	.db	"SwapDraw", 0
  301 D1:BF1E 42 6C 69 74 
              00 -  -  -  C17:	.db	"Blit", 0
  302 D1:BF23 -  -  -  -  Tab2:
  303 D1:BF23 42 6C 69 74 
              4C 69 6E 65 
              73 00 -  -  C18:	.db	"BlitLines", 0
  304 D1:BF2D 42 6C 69 74 
              41 72 65 61 
              00 -  -  -  C19:	.db	"BlitArea", 0
  305 D1:BF36 50 72 69 6E 
              74 43 68 61 
              72 00 -  -  C20:	.db	"PrintChar", 0
  306 D1:BF40 50 72 69 6E 
              74 49 6E 74 
              00 -  -  -  C21:	.db	"PrintInt", 0
  307 D1:BF49 50 72 69 6E 
              74 55 49 6E 
              74 00 -  -  C22:	.db	"PrintUInt", 0
  308 D1:BF53 50 72 69 6E 
              74 53 74 72 
              69 6E 67 00 C23:	.db	"PrintString", 0
  309 D1:BF5F 50 72 69 6E 
              74 53 74 72 
              69 6E 67 58 
              59 00 -  -  C24:	.db	"PrintStringXY", 0
  310 D1:BF6D 53 65 74 54 
              65 78 74 58 
              59 00 -  -  C25:	.db	"SetTextXY", 0
  311 D1:BF77 53 65 74 54 
              65 78 74 42 
              47 43 6F 6C 
              6F 72 00 -  C26:	.db	"SetTextBGColor", 0
  312 D1:BF86 53 65 74 54 
              65 78 74 46 
              47 43 6F 6C 
              6F 72 00 -  C27:	.db	"SetTextFGColor", 0
  313 D1:BF95 53 65 74 54 
              65 78 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C28:	.db	"SetTextTransparentColor", 0
  314 D1:BFAD 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 44 61 74 
              61 00 -  -  C29:	.db	"SetCustomFontData", 0
  315 D1:BFBF 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 53 70 61 
              63 69 6E 67 
              00 -  -  -  C30:	.db	"SetCustomFontSpacing", 0
  316 D1:BFD4 53 65 74 4D 
              6F 6E 6F 73 
              70 61 63 65 
              46 6F 6E 74 
              00 -  -  -  C31:	.db	"SetMonospaceFont", 0
  317 D1:BFE5 47 65 74 53 
              74 72 69 6E 
              67 57 69 64 
              74 68 00 -  C32:	.db	"GetStringWidth", 0
  318 D1:BFF4 47 65 74 43 
              68 61 72 57 
              69 64 74 68 
              00 -  -  -  C33:	.db	"GetCharWidth", 0
  319 D1:C001 -  -  -  -  Tab3:
  320 D1:C001 47 65 74 54 
              65 78 74 58 
              00 -  -  -  C34:	.db	"GetTextX", 0
  321 D1:C00A 47 65 74 54 
              65 78 74 59 
              00 -  -  -  C35:	.db	"GetTextY", 0
  322 D1:C013 4C 69 6E 65 
              00 -  -  -  C36:	.db	"Line", 0
  323 D1:C018 48 6F 72 69 
              7A 4C 69 6E 
              65 00 -  -  C37:	.db	"HorizLine", 0
  324 D1:C022 56 65 72 74 
              4C 69 6E 65 
              00 -  -  -  C38:	.db	"VertLine", 0
  325 D1:C02B 43 69 72 63 
              6C 65 00 -  C39:	.db	"Circle", 0
  326 D1:C032 46 69 6C 6C 
              43 69 72 63 
              6C 65 00 -  C40:	.db	"FillCircle", 0
  327 D1:C03D 52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C41:	.db	"Rectangle", 0
  328 D1:C047 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C42:	.db	"FillRectangle", 0
  329 D1:C055 4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C43:	.db	"Line_NoClip", 0
  330 D1:C061 48 6F 72 69 
              7A 4C 69 6E 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C44:	.db	"HorizLine_NoClip", 0
  331 D1:C072 56 65 72 74 
              4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C45:	.db	"VertLine_NoClip", 0
  332 D1:C082 46 69 6C 6C 
              43 69 72 63 
              6C 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C46:	.db	"FillCircle_NoClip", 0
  333 D1:C094 52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C47:	.db	"Rectangle_NoClip", 0
  334 D1:C0A5 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C48:	.db	"FillRectangle_NoClip", 0
  335 D1:C0BA 53 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C49:	.db	"SetClipRegion", 0
  336 D1:C0C8 -  -  -  -  Tab4:
  337 D1:C0C8 47 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C50:	.db	"GetClipRegion", 0
  338 D1:C0D6 53 68 69 66 
              74 44 6F 77 
              6E 00 -  -  C51:	.db	"ShiftDown", 0
  339 D1:C0E0 53 68 69 66 
              74 55 70 00 C52:	.db	"ShiftUp", 0
  340 D1:C0E8 53 68 69 66 
              74 4C 65 66 
              74 00 -  -  C53:	.db	"ShiftLeft", 0
  341 D1:C0F2 53 68 69 66 
              74 52 69 67 
              68 74 00 -  C54:	.db	"ShiftRight", 0
  342 D1:C0FD 54 69 6C 65 
              6D 61 70 00 C55:	.db	"Tilemap", 0
  343 D1:C105 54 69 6C 65 
              6D 61 70 5F 
              4E 6F 43 6C 
              69 70 00 -  C56:	.db	"Tilemap_NoClip", 0
  344 D1:C114 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 00 -  C57:	.db	"TransparentTilemap", 0
  345 D1:C127 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C58:	.db	"TransparentTilemap_NoClip", 0
  346 D1:C141 54 69 6C 65 
              50 74 72 00 C59:	.db	"TilePtr", 0
  347 D1:C149 54 69 6C 65 
              50 74 72 4D 
              61 70 70 65 
              64 00 -  -  C60:	.db	"TilePtrMapped", 0
  348 D1:C157 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              00 -  -  -  C61:	.db	"LZDecompress", 0
  349 D1:C164 41 6C 6C 6F 
              63 53 70 72 
              69 74 65 00 C62:	.db	"AllocSprite", 0
  350 D1:C170 53 70 72 69 
              74 65 00 -  C63:	.db	"Sprite", 0
  351 D1:C177 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 00 -  -  C64:	.db	"TransparentSprite", 0
  352 D1:C189 53 70 72 69 
              74 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C65:	.db	"Sprite_NoClip", 0
  353 D1:C197 -  -  -  -  Tab5:
  354 D1:C197 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C66:	.db	"TransparentSprite_NoClip", 0
  355 D1:C1B0 47 65 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C67:	.db	"GetSprite_NoClip", 0
  356 D1:C1C1 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              5F 4E 6F 43 
              6C 69 70 00 C68:	.db	"ScaledSprite_NoClip", 0
  357 D1:C1D5 53 63 61 6C 
              65 64 54 72 
              61 6E 73 70 
              61 72 65 6E 
              74 53 70 72 
              69 74 65 5F 
              4E 6F 43 6C 
              69 70 00 -  C69:	.db	"ScaledTransparentSprite_NoClip", 0
  358 D1:C1F4 46 6C 69 70 
              53 70 72 69 
              74 65 59 00 C70:	.db	"FlipSpriteY", 0
  359 D1:C200 46 6C 69 70 
              53 70 72 69 
              74 65 58 00 C71:	.db	"FlipSpriteX", 0
  360 D1:C20C 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 00 -  -  C72:	.db	"RotateSpriteC", 0
  361 D1:C21A 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 43 00 -  C73:	.db	"RotateSpriteCC", 0
  362 D1:C229 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              48 61 6C 66 
              00 -  -  -  C74:	.db	"RotateSpriteHalf", 0
  363 D1:C23A 50 6F 6C 79 
              67 6F 6E 00 C75:	.db	"Polygon", 0
  364 D1:C242 50 6F 6C 79 
              67 6F 6E 5F 
              4E 6F 43 6C 
              69 70 00 -  C76:	.db	"Polygon_NoClip", 0
  365 D1:C251 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              00 -  -  -  C77:	.db	"FillTriangle", 0
  366 D1:C25E 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              5F 4E 6F 43 
              6C 69 70 00 C78:	.db	"FillTriangle_NoClip", 0
  367 D1:C272 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              53 70 72 69 
              74 65 00 -  C79:	.db	"LZDecompressSprite", 0
  368 D1:C285 53 65 74 54 
              65 78 74 53 
              63 61 6C 65 
              00 -  -  -  C80:	.db	"SetTextScale", 0
  369 D1:C292 53 65 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C81:	.db	"SetTransparentColor", 0
  370 D1:C2A6 -  -  -  -  Tab6:
  371 D1:C2A6 5A 65 72 6F 
              53 63 72 65 
              65 6E 00 -  C82:	.db	"ZeroScreen", 0
  372 D1:C2B1 53 65 74 54 
              65 78 74 43 
              6F 6E 66 69 
              67 00 -  -  C83:	.db	"SetTextConfig", 0
  373 D1:C2BF 47 65 74 53 
              70 72 69 74 
              65 43 68 61 
              72 00 -  -  C84:	.db	"GetSpriteChar", 0
  374 D1:C2CD 4C 69 67 68 
              74 65 6E 00 C85:	.db	"Lighten", 0
  375 D1:C2D5 44 61 72 6B 
              65 6E 00 -  C86	.db	"Darken", 0
  376 D1:C2DC 53 65 74 46 
              6F 6E 74 48 
              65 69 67 68 
              74 00 -  -  C87:	.db	"SetFontHeight", 0
  377 D1:C2EA 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              00 -  -  -  C88:	.db	"ScaledSprite", 0
  378 D1:C2F7 46 6C 6F 6F 
              64 46 69 6C 
              6C 00 -  -  C89:	.db	"FloodFill", 0
  379 D1:C301 00 -  -  -  	.db	0
  380 D1:C302 -  -  -  -  TabData:
  381 D1:C302 D9 01 00 -  	.dl	Tab1 - KeyHook_start
  382 D1:C305 6E 02 00 -  	.dl	Tab2 - KeyHook_start
  383 D1:C308 4C 03 00 -  	.dl	Tab3 - KeyHook_start
  384 D1:C30B 13 04 00 -  	.dl	Tab4 - KeyHook_start
  385 D1:C30E E2 04 00 -  	.dl	Tab5 - KeyHook_start
  386 D1:C311 F1 05 00 -  	.dl	Tab6 - KeyHook_start
  387 D1:C314 -  -  -  -  	
  388 D1:C314 -  -  -  -  CData5:
  389 D1:C314 03 02 00 -  	.dl	C6 - KeyHook_start
  390 D1:C317 09 02 00 -  	.dl	C7 - KeyHook_start
  391 D1:C31A 0D 02 00 -  	.dl	C8 - KeyHook_start
  392 D1:C31D 16 02 00 -  	.dl	C9 - KeyHook_start
  393 D1:C320 28 02 00 -  	.dl	C10 - KeyHook_start
  394 D1:C323 33 02 00 -  	.dl	C11 - KeyHook_start
  395 D1:C326 3E 02 00 -  	.dl	C12 - KeyHook_start
  396 D1:C329 47 02 00 -  	.dl	C13 - KeyHook_start
  397 D1:C32C 50 02 00 -  	.dl	C14 - KeyHook_start
  398 D1:C32F 58 02 00 -  	.dl	C15 - KeyHook_start
  399 D1:C332 60 02 00 -  	.dl	C16 - KeyHook_start
  400 D1:C335 69 02 00 -  	.dl	C17 - KeyHook_start
  401 D1:C338 6E 02 00 -  	.dl	C18 - KeyHook_start
  402 D1:C33B 78 02 00 -  	.dl	C19 - KeyHook_start
  403 D1:C33E 81 02 00 -  	.dl	C20 - KeyHook_start
  404 D1:C341 8B 02 00 -  	.dl	C21 - KeyHook_start
  405 D1:C344 94 02 00 -  	.dl	C22 - KeyHook_start
  406 D1:C347 9E 02 00 -  	.dl	C23 - KeyHook_start
  407 D1:C34A AA 02 00 -  	.dl	C24 - KeyHook_start
  408 D1:C34D B8 02 00 -  	.dl	C25 - KeyHook_start
  409 D1:C350 C2 02 00 -  	.dl	C26 - KeyHook_start
  410 D1:C353 D1 02 00 -  	.dl	C27 - KeyHook_start
  411 D1:C356 E0 02 00 -  	.dl	C28 - KeyHook_start
  412 D1:C359 F8 02 00 -  	.dl	C29 - KeyHook_start
  413 D1:C35C 0A 03 00 -  	.dl	C30 - KeyHook_start
  414 D1:C35F 1F 03 00 -  	.dl	C31 - KeyHook_start
  415 D1:C362 30 03 00 -  	.dl	C32 - KeyHook_start
  416 D1:C365 3F 03 00 -  	.dl	C33 - KeyHook_start
  417 D1:C368 4C 03 00 -  	.dl	C34 - KeyHook_start
  418 D1:C36B 55 03 00 -  	.dl	C35 - KeyHook_start
  419 D1:C36E 5E 03 00 -  	.dl	C36 - KeyHook_start
  420 D1:C371 63 03 00 -  	.dl	C37 - KeyHook_start
  421 D1:C374 6D 03 00 -  	.dl	C38 - KeyHook_start
  422 D1:C377 76 03 00 -  	.dl	C39 - KeyHook_start
  423 D1:C37A 7D 03 00 -  	.dl	C40 - KeyHook_start
  424 D1:C37D 88 03 00 -  	.dl	C41 - KeyHook_start
  425 D1:C380 92 03 00 -  	.dl	C42 - KeyHook_start
  426 D1:C383 A0 03 00 -  	.dl	C43 - KeyHook_start
  427 D1:C386 AC 03 00 -  	.dl	C44 - KeyHook_start
  428 D1:C389 BD 03 00 -  	.dl	C45 - KeyHook_start
  429 D1:C38C CD 03 00 -  	.dl	C46 - KeyHook_start
  430 D1:C38F DF 03 00 -  	.dl	C47 - KeyHook_start
  431 D1:C392 F0 03 00 -  	.dl	C48 - KeyHook_start
  432 D1:C395 05 04 00 -  	.dl	C49 - KeyHook_start
  433 D1:C398 13 04 00 -  	.dl	C50 - KeyHook_start
  434 D1:C39B 21 04 00 -  	.dl	C51 - KeyHook_start
  435 D1:C39E 2B 04 00 -  	.dl	C52 - KeyHook_start
  436 D1:C3A1 33 04 00 -  	.dl	C53 - KeyHook_start
  437 D1:C3A4 3D 04 00 -  	.dl	C54 - KeyHook_start
  438 D1:C3A7 48 04 00 -  	.dl	C55 - KeyHook_start
  439 D1:C3AA 50 04 00 -  	.dl	C56 - KeyHook_start
  440 D1:C3AD 5F 04 00 -  	.dl	C57 - KeyHook_start
  441 D1:C3B0 72 04 00 -  	.dl	C58 - KeyHook_start
  442 D1:C3B3 8C 04 00 -  	.dl	C59 - KeyHook_start
  443 D1:C3B6 94 04 00 -  	.dl	C60 - KeyHook_start
  444 D1:C3B9 A2 04 00 -  	.dl	C61 - KeyHook_start
  445 D1:C3BC AF 04 00 -  	.dl	C62 - KeyHook_start
  446 D1:C3BF BB 04 00 -  	.dl	C63 - KeyHook_start
  447 D1:C3C2 C2 04 00 -  	.dl	C64 - KeyHook_start
  448 D1:C3C5 D4 04 00 -  	.dl	C65 - KeyHook_start
  449 D1:C3C8 E2 04 00 -  	.dl	C66 - KeyHook_start
  450 D1:C3CB FB 04 00 -  	.dl	C67 - KeyHook_start
  451 D1:C3CE 0C 05 00 -  	.dl	C68 - KeyHook_start
  452 D1:C3D1 20 05 00 -  	.dl	C69 - KeyHook_start
  453 D1:C3D4 3F 05 00 -  	.dl	C70 - KeyHook_start
  454 D1:C3D7 4B 05 00 -  	.dl	C71 - KeyHook_start
  455 D1:C3DA 57 05 00 -  	.dl	C72 - KeyHook_start
  456 D1:C3DD 65 05 00 -  	.dl	C73 - KeyHook_start
  457 D1:C3E0 74 05 00 -  	.dl	C74 - KeyHook_start
  458 D1:C3E3 85 05 00 -  	.dl	C75 - KeyHook_start
  459 D1:C3E6 8D 05 00 -  	.dl	C76 - KeyHook_start
  460 D1:C3E9 9C 05 00 -  	.dl	C77 - KeyHook_start
  461 D1:C3EC A9 05 00 -  	.dl	C78 - KeyHook_start
  462 D1:C3EF BD 05 00 -  	.dl	C79 - KeyHook_start
  463 D1:C3F2 D0 05 00 -  	.dl	C80 - KeyHook_start
  464 D1:C3F5 DD 05 00 -  	.dl	C81 - KeyHook_start
  465 D1:C3F8 F1 05 00 -  	.dl	C82 - KeyHook_start
  466 D1:C3FB FC 05 00 -  	.dl	C83 - KeyHook_start
  467 D1:C3FE 0A 06 00 -  	.dl	C84 - KeyHook_start
  468 D1:C401 18 06 00 -  	.dl	C85 - KeyHook_start
  469 D1:C404 20 06 00 -  	.dl	C86 - KeyHook_start
  470 D1:C407 27 06 00 -  	.dl	C87 - KeyHook_start
  471 D1:C40A 35 06 00 -  	.dl	C88 - KeyHook_start
  472 D1:C40D 42 06 00 -  	.dl	C89 - KeyHook_start
  473 D1:C410 -  -  -  -  	
  474 D1:C410 -  -  -  -  #define	AMOUNT_OF_CUSTOM_TOKENS 4
  475 D1:C410 08 45 78 65 
              63 48 65 78 
              28 00 -  -  Token1: .db 8,  "ExecHex(", 0
  476 D1:C41A 0D 44 65 66 
              69 6E 65 53 
              70 72 69 74 
              65 28 00 -  Token2: .db 13, "DefineSprite(", 0
  477 D1:C429 05 43 61 6C 
              6C 20 00 -  Token3: .db 5,  "Call ", 0
  478 D1:C430 0C 43 6F 6D 
              70 69 6C 65 
              50 72 67 6D 
              28 00 -  -  Token4: .db 12, "CompilePrgm(", 0
  479 D1:C43E -  -  -  -  CustomTokensProgramText:
  480 D1:C43E 50 52 4F 47 
              52 41 4D 3A 
              00 -  -  -  	.db	"PROGRAM:", 0
  481 D1:C447 -  -  -  -  KeyHook_end:
  482 D1:C447 -  -  -  -  
  483 D1:C447 -  -  -  -  TokenHook_start:
  484 D1:C447 83 -  -  -  	.db	83h
  485 D1:C448 7A -  -  -  	ld	a, d
  486 D1:C449 FE 04 -  -  	cp	a, 4
  487 D1:C44B C0 -  -  -  	ret	nz
  488 D1:C44C 7B -  -  -  	ld	a, e
  489 D1:C44D FE 14 -  -  	cp	a, 5+3+(AMOUNT_OF_CUSTOM_TOKENS*3)
  490 D1:C44F D0 -  -  -  	ret	nc
  491 D1:C450 D6 05 -  -  	sub	a, 5
  492 D1:C452 ED 5B DB 25 
              D0 -  -  -  	ld	de, (rawKeyHookPtr)
  493 D1:C457 21 B1 07 00 	ld	hl, TokenHook_data - KeyHook_start
  494 D1:C45B 19 -  -  -  	add	hl, de
  495 D1:C45C 01 00 00 00 	ld	bc, 0
  496 D1:C460 4F -  -  -  	ld	c, a
  497 D1:C461 09 -  -  -  	add	hl, bc
  498 D1:C462 ED 27 -  -  	ld	hl, (hl)
  499 D1:C464 19 -  -  -  	add	hl, de
  500 D1:C465 C9 -  -  -  	ret
  501 D1:C466 -  -  -  -  TokenHook_data:
  502 D1:C466 5A 07 00 -  	.dl	Token1 - KeyHook_start - 1
  503 D1:C469 64 07 00 -  	.dl	Token2 - KeyHook_start - 1
  504 D1:C46C 73 07 00 -  	.dl	Token3 - KeyHook_start - 1
  505 D1:C46F 7A 07 00 -  	.dl	Token4 - KeyHook_start - 1
  506 D1:C472 -  -  -  -  TokenHook_end:
  507 D1:C472 -  -  -  -  
  508 D1:C472 -  -  -  -  CursorHook_start:
  509 D1:C472 83 -  -  -  	.db	83h
  510 D1:C473 FE 24 -  -  	cp	a, 24h
  511 D1:C475 20 06 -  -  	jr	nz, +_
  512 D1:C477 3C -  -  -  	inc	a
  513 D1:C478 3A 99 05 D0 	ld	a, (curUnder)
  514 D1:C47C C9 -  -  -  	ret
  515 D1:C47D FE 22 -  -  _:	cp	a, 22h
  516 D1:C47F C0 -  -  -  	ret	nz
  517 D1:C480 3A E0 07 D0 	ld	a, (cxCurApp)
  518 D1:C484 FE 46 -  -  	cp	a, cxPrgmEdit
  519 D1:C486 C0 -  -  -  	ret	nz
  520 D1:C487 2A 3A 24 D0 	ld	hl, (editCursor)
  521 D1:C48B 7E -  -  -  	ld	a, (hl)
  522 D1:C48C FE B3 -  -  	cp	a, tDet
  523 D1:C48E C0 -  -  -  	ret	nz
  524 D1:C48F -  -  -  -  DrawDetText:
  525 D1:C48F FD CB B0 46 	bit	displayed_det, (iy+fAlways1)
  526 D1:C493 C0 -  -  -  	ret	nz
  527 D1:C494 2A 3D 24 D0 	ld	hl, (editTail)
  528 D1:C498 23 -  -  -  	inc	hl
  529 D1:C499 7E -  -  -  	ld	a, (hl)
  530 D1:C49A D6 30 -  -  	sub	a, t0
  531 D1:C49C D8 -  -  -  	ret	c
  532 D1:C49D FE 0A -  -  	cp	a, t9-t0+1
  533 D1:C49F ED 4B 40 24 
              D0 -  -  -  	ld	bc, (editBtm)
  534 D1:C4A4 11 00 00 00 	ld	de, 0
  535 D1:C4A8 5F -  -  -  	ld	e, a
  536 D1:C4A9 38 02 -  -  	jr	c, GetDetValueLoop
  537 D1:C4AB -  -  -  -  WrongDetValue:
  538 D1:C4AB 3C -  -  -  	inc	a
  539 D1:C4AC C9 -  -  -  	ret
  540 D1:C4AD -  -  -  -  GetDetValueLoop:
  541 D1:C4AD 23 -  -  -  	inc	hl
  542 D1:C4AE B7 -  -  -  	or	a, a
  543 D1:C4AF ED 42 -  -  	sbc	hl, bc
  544 D1:C4B1 28 1C -  -  	jr	z, GetDetValueStop
  545 D1:C4B3 09 -  -  -  	add	hl, bc
  546 D1:C4B4 7E -  -  -  	ld	a, (hl)
  547 D1:C4B5 D6 30 -  -  	sub	a, t0
  548 D1:C4B7 38 16 -  -  	jr	c, GetDetValueStop
  549 D1:C4B9 FE 0A -  -  	cp	a, t9-t0+1
  550 D1:C4BB 30 12 -  -  	jr	nc, GetDetValueStop
  551 D1:C4BD E5 -  -  -  	push	hl
  552 D1:C4BE EB -  -  -  		ex	de, hl
  553 D1:C4BF 29 -  -  -  		add	hl, hl
  554 D1:C4C0 E5 -  -  -  		push	hl
  555 D1:C4C1 D1 -  -  -  		pop	de
  556 D1:C4C2 29 -  -  -  		add	hl, hl
  557 D1:C4C3 29 -  -  -  		add	hl, hl
  558 D1:C4C4 19 -  -  -  		add	hl, de
  559 D1:C4C5 11 00 00 00 		ld	de, 0
  560 D1:C4C9 5F -  -  -  		ld	e, a
  561 D1:C4CA 19 -  -  -  		add	hl, de
  562 D1:C4CB EB -  -  -  		ex	de, hl
  563 D1:C4CC E1 -  -  -  	pop	hl
  564 D1:C4CD 18 DE -  -  	jr	GetDetValueLoop
  565 D1:C4CF -  -  -  -  GetDetValueStop:
  566 D1:C4CF EB -  -  -  	ex	de, hl
  567 D1:C4D0 11 54 00 00 	ld	de, AMOUNT_OF_C_FUNCTIONS
  568 D1:C4D4 B7 -  -  -  	or	a, a
  569 D1:C4D5 ED 52 -  -  	sbc	hl, de
  570 D1:C4D7 30 D2 -  -  	jr	nc, WrongDetValue
  571 D1:C4D9 19 -  -  -  	add	hl, de
  572 D1:C4DA 26 03 -  -  	ld	h, 3
  573 D1:C4DC ED 6C -  -  	mlt	hl
  574 D1:C4DE 11 5F 06 00 	ld	de, CData5 - KeyHook_start
  575 D1:C4E2 19 -  -  -  	add	hl, de
  576 D1:C4E3 ED 5B DB 25 
              D0 -  -  -  	ld	de, (rawKeyHookPtr)
  577 D1:C4E8 19 -  -  -  	add	hl, de
  578 D1:C4E9 ED 27 -  -  	ld	hl, (hl)
  579 D1:C4EB 19 -  -  -  	add	hl, de
  580 D1:C4EC 11 1C E7 00 	ld	de, 000E71Ch
  581 D1:C4F0 40 ED 53 AC 
              26 -  -  -  	ld.sis	(drawFGColor - 0D00000h), de
  582 D1:C4F5 40 ED 5B CC 
              2A -  -  -  	ld.sis	de, (statusBarBGColor - 0D00000h)
  583 D1:C4FA 40 ED 53 AA 
              26 -  -  -  	ld.sis	(drawBGColor - 0D00000h), de
  584 D1:C4FF 3E 0E -  -  	ld	a, 14
  585 D1:C501 32 D5 08 D0 	ld	(penRow),a
  586 D1:C505 11 02 00 00 	ld	de, 2
  587 D1:C509 40 ED 53 D2 
              08 -  -  -  	ld.sis	(penCol - 0D00000h), de
  588 D1:C50E CD 34 08 02 	call	_VPutS
  589 D1:C512 11 FF FF 00 	ld	de, $FFFF
  590 D1:C516 40 ED 53 AA 
              26 -  -  -  	ld.sis	(drawBGColor - 0D00000h), de
  591 D1:C51B FD CB B0 C6 	set	displayed_det, (iy+fAlways1)
  592 D1:C51F C9 -  -  -  	ret
  593 D1:C520 -  -  -  -  CursorHook_end:
  594 D1:C520 -  -  -  -  
  595 D1:C520 -  -  -  -  Hooks_end:
Listing for file "ice.asm"
  446 D1:C520 -  -  -  -  #include "operators functions/functions.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\functions.asm"
    1 D1:C520 -  -  -  -  ExecuteFunction:
    2 D1:C520 E5 -  -  -  	push	hl
    3 D1:C521 21 C7 E8 D1 		ld	hl, FunctionsWithReturnValueArguments
    4 D1:C525 01 07 00 00 		ld	bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValueArguments
    5 D1:C529 ED B1 -  -  		cpir
    6 D1:C52B 06 03 -  -  		ld	b, 3
    7 D1:C52D ED 4C -  -  		mlt	bc
    8 D1:C52F 21 CE E8 D1 		ld	hl, FunctionsWithReturnValueStart
    9 D1:C533 09 -  -  -  		add	hl, bc
   10 D1:C534 ED 27 -  -  		ld	hl, (hl)
   11 D1:C536 22 3C C5 D1 		ld	(JumpFunction), hl
   12 D1:C53A E1 -  -  -  	pop	hl
   13 D1:C53B -  -  -  -  JumpFunction = $+1
   14 D1:C53B C3 00 00 00 	jp	0
   15 D1:C53F -  -  -  -  	
   16 D1:C53F -  -  -  -  functionPrgm:
   17 D1:C53F CD A4 AC D1 	call	MaybeInsertIYFlags
   18 D1:C543 3E 21 -  -  	ld	a, 021h
   19 D1:C545 CD 18 AD D1 	call	InsertA															;	ld hl, *
   20 D1:C549 CD 2F AD D1 	call	InsertProgramPtrToDataOffset
   21 D1:C54D 2A 2F EA D1 	ld	hl, (programDataDataPtr)
   22 D1:C551 E5 -  -  -  	push	hl
   23 D1:C552 CD 50 AC D1 		call	InsertHL														;	ld hl, programname
   24 D1:C556 E1 -  -  -  	pop	hl
   25 D1:C557 36 05 -  -  	ld	(hl), ProgObj
   26 D1:C559 CD A7 B1 D1 	call	GetProgramName
   27 D1:C55D 23 -  -  -  	inc	hl
   28 D1:C55E 22 2F EA D1 	ld	(programDataDataPtr), hl
   29 D1:C562 3E CD -  -  	ld	a, 0CDh
   30 D1:C564 21 20 03 02 	ld	hl, _Mov9ToOP1
   31 D1:C568 CD 4C AC D1 	call	InsertAHL															;	call _Mov9ToOP1
   32 D1:C56C 3E FD -  -  	ld	a, 0FDh
   33 D1:C56E 21 CB 08 CE 	ld	hl, 0CE08CBh
   34 D1:C572 CD 4C AC D1 	call	InsertAHL															;	set 1, (iy+8)
   35 D1:C576 3E CD -  -  	ld	a, 0CDh
   36 D1:C578 21 00 0F 02 	ld	hl, _ParseInp
   37 D1:C57C CD 4C AC D1 	call	InsertAHL															;	call _ParseInp
   38 D1:C580 3E FD -  -  	ld	a, 0FDh
   39 D1:C582 21 CB 08 8E 	ld	hl, 08E08CBh
   40 D1:C586 C3 4C AC D1 	jp	InsertAHL															;	res 1, (iy+8)
   41 D1:C58A -  -  -  -  	
   42 D1:C58A -  -  -  -  
   43 D1:C58A -  -  -  -  functionOutput:
   44 D1:C58A CD A4 AC D1 	call	MaybeInsertIYFlags
   45 D1:C58E 3E 01 -  -  	ld	a, 1
   46 D1:C590 32 34 EA D1 	ld	(openedParensF), a
   47 D1:C594 CD 28 10 02 	call	_IncFetch
   48 D1:C598 CD 3E B2 D1 	call	ParseExpression
   49 D1:C59C FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   50 D1:C5A0 FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   51 D1:C5A4 CA 39 AF D1 	jp	z, ErrorSyntax
   52 D1:C5A8 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   53 D1:C5AC 20 08 -  -  	jr	nz, OutputRowIsNumber
   54 D1:C5AE -  -  -  -  OutputRowIsVariable:
   55 D1:C5AE 3E 7D -  -  	ld	a, 07Dh
   56 D1:C5B0 CD 18 AD D1 	call	InsertA															;	ld a, l
   57 D1:C5B4 18 0E -  -  	jr	+_
   58 D1:C5B6 -  -  -  -  OutputRowIsNumber:
   59 D1:C5B6 2A 1A EA D1 	ld	hl, (programPtr)
   60 D1:C5BA 2B -  -  -  	dec	hl
   61 D1:C5BB 2B -  -  -  	dec	hl
   62 D1:C5BC 22 1A EA D1 	ld	(programPtr), hl
   63 D1:C5C0 2B -  -  -  	dec	hl
   64 D1:C5C1 2B -  -  -  	dec	hl
   65 D1:C5C2 36 3E -  -  	ld	(hl), 03Eh															;	ld a, *
   66 D1:C5C4 3E 32 -  -  _:	ld	a, 032h
   67 D1:C5C6 21 95 05 D0 	ld	hl, curRow
   68 D1:C5CA CD 4C AC D1 	call	InsertAHL															;	ld (curRow), a
   69 D1:C5CE CD 28 10 02 	call	_IncFetch
   70 D1:C5D2 CD 3E B2 D1 	call	ParseExpression
   71 D1:C5D6 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   72 D1:C5DA FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   73 D1:C5DE CA 39 AF D1 	jp	z, ErrorSyntax
   74 D1:C5E2 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   75 D1:C5E6 20 08 -  -  	jr	nz, OutputColumnIsNumber
   76 D1:C5E8 -  -  -  -  OutputColumnIsVariable:
   77 D1:C5E8 3E 7D -  -  	ld	a, 07Dh
   78 D1:C5EA CD 18 AD D1 	call	InsertA															;	ld a, l
   79 D1:C5EE 18 0E -  -  	jr	+_
   80 D1:C5F0 -  -  -  -  OutputColumnIsNumber:
   81 D1:C5F0 2A 1A EA D1 	ld	hl, (programPtr)
   82 D1:C5F4 2B -  -  -  	dec	hl
   83 D1:C5F5 2B -  -  -  	dec	hl
   84 D1:C5F6 22 1A EA D1 	ld	(programPtr), hl
   85 D1:C5FA 2B -  -  -  	dec	hl
   86 D1:C5FB 2B -  -  -  	dec	hl
   87 D1:C5FC 36 3E -  -  	ld	(hl), 03Eh															;	ld a, *
   88 D1:C5FE 3E 32 -  -  _:	ld	a, 032h
   89 D1:C600 21 96 05 D0 	ld	hl, curCol
   90 D1:C604 CD 4C AC D1 	call	InsertAHL															;	ld (curCol), a
   91 D1:C608 F6 01 -  -  	or	a, 1																	;	rest zero flag
   92 D1:C60A CD 25 C6 D1 	call	DisplayNumberOrString
   93 D1:C60E C2 39 AF D1 	jp	nz, ErrorSyntax
   94 D1:C612 C9 -  -  -  	ret
   95 D1:C613 -  -  -  -  	
   96 D1:C613 -  -  -  -  functionDisp:
   97 D1:C613 CD A4 AC D1 	call	MaybeInsertIYFlags
   98 D1:C617 3E 01 -  -  	ld	a, 1
   99 D1:C619 32 34 EA D1 	ld	(openedParensF), a
  100 D1:C61D 3D -  -  -  	dec	a																	;	set zero flag
  101 D1:C61E CD 25 C6 D1 	call	DisplayNumberOrString
  102 D1:C622 C8 -  -  -  	ret	z
  103 D1:C623 18 EE -  -  	jr	functionDisp
  104 D1:C625 -  -  -  -  	
  105 D1:C625 -  -  -  -  DisplayNumberOrString:
  106 D1:C625 F5 -  -  -  	push	af
  107 D1:C626 CD 28 10 02 		call	_IncFetch
  108 D1:C62A CD 3E B2 D1 		call	ParseExpression
  109 D1:C62E ED 5B 1A EA 
              D1 -  -  -  		ld	de, (programPtr)
  110 D1:C633 01 0E 00 00 		ld	bc, 14
  111 D1:C637 FD CB C0 7E 		bit	output_is_string, (iy+fExpression1)
  112 D1:C63B 20 0F -  -  		jr	nz, DispString
  113 D1:C63D 21 95 ED D1 		ld	hl, DispNumberRoutine
  114 D1:C641 F1 -  -  -  	pop	af
  115 D1:C642 28 16 -  -  	jr	z, +_
  116 D1:C644 21 8F ED D1 	ld	hl, DispNumberRoutine-6
  117 D1:C648 0E 08 -  -  	ld	c, 8
  118 D1:C64A 18 0E -  -  	jr	+_
  119 D1:C64C -  -  -  -  DispString:
  120 D1:C64C 21 A3 ED D1 		ld	hl, DispStringRoutine
  121 D1:C650 0B -  -  -  		dec	bc
  122 D1:C651 F1 -  -  -  	pop	af
  123 D1:C652 28 06 -  -  	jr	z, +_
  124 D1:C654 21 A8 ED D1 	ld	hl, DispStringRoutine+5
  125 D1:C658 0E 08 -  -  	ld	c, 8
  126 D1:C65A ED B0 -  -  _:	ldir
  127 D1:C65C ED 53 1A EA 
              D1 -  -  -  	ld	(programPtr), de
  128 D1:C661 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  129 D1:C665 C9 -  -  -  	ret
  130 D1:C666 -  -  -  -  	
  131 D1:C666 -  -  -  -  	
  132 D1:C666 -  -  -  -  functionLbl:
  133 D1:C666 DD 2A 20 EA 
              D1 -  -  -  	ld	ix, (labelPtr)
  134 D1:C66B 2A 1A EA D1 	ld	hl, (programPtr)
  135 D1:C66F DD 2F 00 -  	ld	(ix), hl
  136 D1:C672 2A 1A 23 D0 	ld	hl, (curPC)
  137 D1:C676 23 -  -  -  	inc	hl
  138 D1:C677 DD 2F 03 -  	ld	(ix+3), hl
  139 D1:C67A ED 22 06 -  	lea	hl, ix+6
  140 D1:C67D 22 20 EA D1 	ld	(labelPtr), hl
  141 D1:C681 -  -  -  -  functionSkipLine:
  142 D1:C681 2A 1D 23 D0 	ld	hl, (endPC)
  143 D1:C685 ED 5B 1A 23 
              D0 -  -  -  	ld	de, (curPC)
  144 D1:C68A B7 -  -  -  	or	a
  145 D1:C68B ED 52 -  -  	sbc	hl, de
  146 D1:C68D D8 -  -  -  	ret	c
  147 D1:C68E 23 -  -  -  	inc	hl
  148 D1:C68F E5 -  -  -  	push	hl
  149 D1:C690 C1 -  -  -  	pop	bc
  150 D1:C691 EB -  -  -  	ex	de, hl
  151 D1:C692 3E 3F -  -  	ld	a, tEnter
  152 D1:C694 ED B1 -  -  	cpir
  153 D1:C696 2B -  -  -  	dec	hl
  154 D1:C697 22 1A 23 D0 	ld	(curPC), hl
  155 D1:C69B C9 -  -  -  	ret
  156 D1:C69C -  -  -  -  	
  157 D1:C69C -  -  -  -  functionCall:
  158 D1:C69C 3E CD -  -  	ld	a, 0CDh
  159 D1:C69E 18 02 -  -  	jr	$+4
  160 D1:C6A0 -  -  -  -  functionGoto:
  161 D1:C6A0 3E C3 -  -  	ld	a, 0C3h
  162 D1:C6A2 CD 18 AD D1 	call	InsertA															;	jp/call ******
  163 D1:C6A6 DD 2A 23 EA 
              D1 -  -  -  	ld	ix, (gotoPtr)
  164 D1:C6AB 2A 1A EA D1 	ld	hl, (programPtr)
  165 D1:C6AF DD 2F 00 -  	ld	(ix), hl
  166 D1:C6B2 2A 1A 23 D0 	ld	hl, (curPC)
  167 D1:C6B6 23 -  -  -  	inc	hl
  168 D1:C6B7 DD 2F 03 -  	ld	(ix+3), hl
  169 D1:C6BA ED 22 06 -  	lea	hl, ix+6
  170 D1:C6BD 22 23 EA D1 	ld	(gotoPtr), hl
  171 D1:C6C1 CD 50 AC D1 	call	InsertHL															;	jp/call RANDOM
  172 D1:C6C5 18 BA -  -  	jr	functionSkipLine
  173 D1:C6C7 -  -  -  -  	
  174 D1:C6C7 -  -  -  -  functionReturn:
  175 D1:C6C7 CD C0 0F 02 	call	_NxtFetch
  176 D1:C6CB 30 04 -  -  	jr	nc, +_
  177 D1:C6CD FD CB C0 D6 	set	last_token_is_ret, (iy+fExpression1)
  178 D1:C6D1 FE CE -  -  _:	cp	tIf
  179 D1:C6D3 20 1C -  -  	jr	nz, +_
  180 D1:C6D5 CD 28 10 02 	call	_IncFetch
  181 D1:C6D9 CD 28 10 02 	call	_IncFetch
  182 D1:C6DD CD 3E B2 D1 	call	ParseExpression
  183 D1:C6E1 3E 19 -  -  	ld	a, 019h
  184 D1:C6E3 CD 18 AD D1 	call	InsertA															;	add hl, de
  185 D1:C6E7 3E B7 -  -  	ld	a, 0B7h
  186 D1:C6E9 21 ED 52 C0 	ld	hl, 0C052EDh
  187 D1:C6ED C3 4C AC D1 	jp	InsertAHL															;	or a \ sbc hl, de \ ret nz
  188 D1:C6F1 3E C9 -  -  _:	ld	a, 0C9h
  189 D1:C6F3 C3 18 AD D1 	jp	InsertA																;	ret
  190 D1:C6F7 -  -  -  -  		
  191 D1:C6F7 -  -  -  -  functionRepeat:
  192 D1:C6F7 21 37 EA D1 	ld	hl, amountOfEnds
  193 D1:C6FB 34 -  -  -  	inc	(hl)
  194 D1:C6FC 2A 1A EA D1 	ld	hl, (programPtr)
  195 D1:C700 11 81 7C FC 	ld	de, UserMem - program
  196 D1:C704 19 -  -  -  	add	hl, de
  197 D1:C705 E5 -  -  -  	push	hl
  198 D1:C706 2A 1A 23 D0 		ld	hl, (curPC)
  199 D1:C70A 23 -  -  -  		inc	hl
  200 D1:C70B E5 -  -  -  		push	hl
  201 D1:C70C CD 28 10 02 _:			call	_IncFetch
  202 D1:C710 DA 39 AF D1 			jp	c, ErrorSyntax
  203 D1:C714 FE 3F -  -  			cp	tEnter
  204 D1:C716 20 F4 -  -  			jr	nz, -_
  205 D1:C718 CD 99 AA D1 			call	ParseProgramUntilEnd
  206 D1:C71C FE D0 -  -  			cp	tElse
  207 D1:C71E CA 39 AF D1 			jp	z, ErrorSyntax
  208 D1:C722 ED 5B 1A 23 
              D0 -  -  -  			ld	de, (curPC)
  209 D1:C727 E1 -  -  -  		pop	hl
  210 D1:C728 22 1A 23 D0 		ld	(curPC), hl
  211 D1:C72C D5 -  -  -  		push	de
  212 D1:C72D CD 3E B2 D1 			call	ParseExpression
  213 D1:C731 D1 -  -  -  		pop	de
  214 D1:C732 ED 53 1A 23 
              D0 -  -  -  		ld	(curPC), de
  215 D1:C737 FD CB C0 66 		bit	output_is_number, (iy+fExpression1)
  216 D1:C73B C2 C1 C7 D1 		jp	nz, functionRepeatInfinite
  217 D1:C73F FD CB C0 6E 		bit	ans_set_z_flag, (iy+fExpression1)
  218 D1:C743 28 14 -  -  		jr	z, +_
  219 D1:C745 2A 1A EA D1 		ld	hl, (programPtr)
  220 D1:C749 2B -  -  -  		dec	hl
  221 D1:C74A 2B -  -  -  		dec	hl
  222 D1:C74B 2B -  -  -  		dec	hl
  223 D1:C74C 7E -  -  -  		ld	a, (hl)
  224 D1:C74D DD 67 -  -  		ld	ixh, a
  225 D1:C74F 2B -  -  -  		dec	hl
  226 D1:C750 2B -  -  -  		dec	hl
  227 D1:C751 2B -  -  -  		dec	hl
  228 D1:C752 2B -  -  -  		dec	hl
  229 D1:C753 22 1A EA D1 		ld	(programPtr), hl
  230 D1:C757 18 1D -  -  		jr	functionRepeatInsert
  231 D1:C759 FD CB BF 4E _:		bit	last_token_was_not, (iy+fExpression2)
  232 D1:C75D 28 0D -  -  		jr	z, InsertNormalRepeat2
  233 D1:C75F 2A 1A EA D1 		ld	hl, (programPtr)
  234 D1:C763 11 F8 FF FF 		ld	de, -8
  235 D1:C767 19 -  -  -  		add	hl, de
  236 D1:C768 22 1A EA D1 		ld	(programPtr), hl
  237 D1:C76C -  -  -  -  InsertNormalRepeat2:
  238 D1:C76C 3E 19 -  -  		ld	a, 019h
  239 D1:C76E 21 B7 ED 52 		ld	hl, 052EDB7h
  240 D1:C772 CD 4C AC D1 		call	InsertAHL														;	add hl, de \ or a \ sbc hl, de
  241 D1:C776 -  -  -  -  functionRepeatInsert:
  242 D1:C776 01 81 7C FC 		ld	bc, UserMem - program
  243 D1:C77A 09 -  -  -  		add	hl, bc
  244 D1:C77B D1 -  -  -  	pop	de
  245 D1:C77C B7 -  -  -  	or	a
  246 D1:C77D ED 52 -  -  	sbc	hl, de
  247 D1:C77F 7C -  -  -  	ld	a, h
  248 D1:C780 B7 -  -  -  	or	a
  249 D1:C781 20 23 -  -  	jr	nz, functionRepeatLarge
  250 D1:C783 7D -  -  -  	ld	a, l
  251 D1:C784 2F -  -  -  	cpl
  252 D1:C785 3D -  -  -  	dec	a
  253 D1:C786 FE 80 -  -  	cp	%10000000
  254 D1:C788 38 1C -  -  	jr	c, functionRepeatLarge
  255 D1:C78A -  -  -  -  functionRepeatSmall:
  256 D1:C78A 47 -  -  -  	ld	b, a
  257 D1:C78B 3E 28 -  -  	ld	a, 028h
  258 D1:C78D FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  259 D1:C791 28 02 -  -  	jr	z, +_
  260 D1:C793 DD 7C -  -  	ld	a, ixh
  261 D1:C795 FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  262 D1:C799 28 02 -  -  	jr	z, $+4
  263 D1:C79B EE 08 -  -  	xor	8
  264 D1:C79D CD 18 AD D1 	call	InsertA															;	jr [n]z, *
  265 D1:C7A1 78 -  -  -  	ld	a, b
  266 D1:C7A2 C3 18 AD D1 	jp	InsertA																;	jr [n]z, *
  267 D1:C7A6 -  -  -  -  functionRepeatLarge:
  268 D1:C7A6 EB -  -  -  	ex	de, hl
  269 D1:C7A7 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  270 D1:C7AB 28 06 -  -  	jr	z, +_
  271 D1:C7AD DD 7C -  -  	ld	a, ixh
  272 D1:C7AF C6 A2 -  -  	add	a, 0A2h
  273 D1:C7B1 18 02 -  -  	jr	++_
  274 D1:C7B3 3E CA -  -  _:	ld	a, 0CAh
  275 D1:C7B5 FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  276 D1:C7B9 28 02 -  -  	jr	z, $+4
  277 D1:C7BB EE 08 -  -  	xor	8
  278 D1:C7BD C3 4C AC D1 	jp	InsertAHL															;	jp [n]z, XXXXXX
  279 D1:C7C1 -  -  -  -  functionRepeatInfinite:
  280 D1:C7C1 2A 1A EA D1 		ld	hl, (programPtr)
  281 D1:C7C5 2B -  -  -  		dec	hl
  282 D1:C7C6 2B -  -  -  		dec	hl
  283 D1:C7C7 2B -  -  -  		dec	hl
  284 D1:C7C8 2B -  -  -  		dec	hl
  285 D1:C7C9 22 1A EA D1 		ld	(programPtr), hl
  286 D1:C7CD E5 -  -  -  		push	hl
  287 D1:C7CE 23 -  -  -  			inc	hl
  288 D1:C7CF ED 27 -  -  			ld	hl, (hl)
  289 D1:C7D1 19 -  -  -  			add	hl, de
  290 D1:C7D2 B7 -  -  -  			or	a
  291 D1:C7D3 ED 52 -  -  			sbc	hl, de
  292 D1:C7D5 E1 -  -  -  		pop	hl
  293 D1:C7D6 C0 -  -  -  		ret	nz
  294 D1:C7D7 11 81 7C FC 		ld	de, UserMem - program
  295 D1:C7DB 19 -  -  -  		add	hl, de
  296 D1:C7DC D1 -  -  -  	pop	de
  297 D1:C7DD B7 -  -  -  	or	a
  298 D1:C7DE ED 52 -  -  	sbc	hl, de
  299 D1:C7E0 7C -  -  -  	ld	a, h
  300 D1:C7E1 B7 -  -  -  	or	a
  301 D1:C7E2 20 13 -  -  	jr	nz, functionRepeatInfiniteLarge
  302 D1:C7E4 7D -  -  -  	ld	a, l
  303 D1:C7E5 2F -  -  -  	cpl
  304 D1:C7E6 3D -  -  -  	dec	a
  305 D1:C7E7 FE 80 -  -  	cp	%10000000
  306 D1:C7E9 38 0C -  -  	jr	c, functionRepeatInfiniteLarge
  307 D1:C7EB -  -  -  -  functionRepeatInfiniteSmall:
  308 D1:C7EB 47 -  -  -  	ld	b, a
  309 D1:C7EC 3E 18 -  -  	ld	a, 018h
  310 D1:C7EE CD 18 AD D1 	call	InsertA															;	jr *
  311 D1:C7F2 78 -  -  -  	ld	a, b
  312 D1:C7F3 C3 18 AD D1 	jp	InsertA																;	jr *
  313 D1:C7F7 -  -  -  -  functionRepeatInfiniteLarge:
  314 D1:C7F7 EB -  -  -  	ex	de, hl
  315 D1:C7F8 3E C3 -  -  	ld	a, 0C3h
  316 D1:C7FA C3 4C AC D1 	jp	InsertAHL															;	jp XXXXXX
  317 D1:C7FE -  -  -  -  
  318 D1:C7FE -  -  -  -  functionIf:
  319 D1:C7FE 21 37 EA D1 	ld	hl, amountOfEnds
  320 D1:C802 34 -  -  -  	inc	(hl)
  321 D1:C803 CD 28 10 02 	call	_IncFetch
  322 D1:C807 CD 3E B2 D1 	call	ParseExpression
  323 D1:C80B FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  324 D1:C80F C2 A0 C8 D1 	jp	nz, functionIfInfinite
  325 D1:C813 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  326 D1:C817 28 14 -  -  	jr	z, InsertNormalIf
  327 D1:C819 2A 1A EA D1 	ld	hl, (programPtr)
  328 D1:C81D 2B -  -  -  	dec	hl
  329 D1:C81E 2B -  -  -  	dec	hl
  330 D1:C81F 2B -  -  -  	dec	hl
  331 D1:C820 7E -  -  -  	ld	a, (hl)
  332 D1:C821 C6 A2 -  -  	add	a, 0A2h
  333 D1:C823 2B -  -  -  	dec	hl
  334 D1:C824 2B -  -  -  	dec	hl
  335 D1:C825 2B -  -  -  	dec	hl
  336 D1:C826 2B -  -  -  	dec	hl
  337 D1:C827 22 1A EA D1 	ld	(programPtr), hl
  338 D1:C82B 18 27 -  -  	jr	InsertIf
  339 D1:C82D -  -  -  -  InsertNormalIf:
  340 D1:C82D FD CB BF 4E 	bit	last_token_was_not, (iy+fExpression2)
  341 D1:C831 28 0D -  -  	jr	z, InsertNormalIf2
  342 D1:C833 2A 1A EA D1 	ld	hl, (programPtr)
  343 D1:C837 11 F8 FF FF 	ld	de, -8
  344 D1:C83B 19 -  -  -  	add	hl, de
  345 D1:C83C 22 1A EA D1 	ld	(programPtr), hl
  346 D1:C840 -  -  -  -  InsertNormalIf2:
  347 D1:C840 3E 19 -  -  	ld	a, 019h
  348 D1:C842 21 B7 ED 52 	ld	hl, 052EDB7h
  349 D1:C846 CD 4C AC D1 	call	InsertAHL															;	add hl, de \ or a \ sbc hl, de
  350 D1:C84A 3E CA -  -  	ld	a, 0CAh
  351 D1:C84C FD CB BF 4E 	bit	last_token_was_not, (iy+fExpression2)
  352 D1:C850 28 02 -  -  	jr	z, InsertIf
  353 D1:C852 3E C2 -  -  	ld	a, 0C2h
  354 D1:C854 -  -  -  -  InsertIf:
  355 D1:C854 CD 18 AD D1 	call	InsertA															;	jp z, ******
  356 D1:C858 2A 1A EA D1 	ld	hl, (programPtr)
  357 D1:C85C E5 -  -  -  	push	hl
  358 D1:C85D CD 50 AC D1 		call	InsertHL														;	jp z, XXXXXX
  359 D1:C861 CD 99 AA D1 		call	ParseProgramUntilEnd
  360 D1:C865 FE D0 -  -  		cp	tElse
  361 D1:C867 20 29 -  -  		jr	nz, +_
  362 D1:C869 21 37 EA D1 		ld	hl, amountOfEnds
  363 D1:C86D 34 -  -  -  		inc	(hl)
  364 D1:C86E 3E C3 -  -  		ld	a, 0C3h
  365 D1:C870 CD 18 AD D1 		call	InsertA														;	jp ******
  366 D1:C874 ED 5B 1A EA 
              D1 -  -  -  		ld	de, (programPtr)
  367 D1:C879 CD 50 AC D1 		call	InsertHL														;	jp XXXXXX
  368 D1:C87D 01 81 7C FC 		ld	bc, UserMem - program
  369 D1:C881 09 -  -  -  		add	hl, bc
  370 D1:C882 E5 -  -  -  		push	hl
  371 D1:C883 C1 -  -  -  		pop	bc
  372 D1:C884 E1 -  -  -  	pop	hl
  373 D1:C885 ED 0F -  -  	ld	(hl), bc
  374 D1:C887 D5 -  -  -  	push	de
  375 D1:C888 CD 99 AA D1 		call	ParseProgramUntilEnd
  376 D1:C88C FE D0 -  -  		cp	tElse
  377 D1:C88E CA 39 AF D1 		jp	z, ErrorSyntax
  378 D1:C892 2A 1A EA D1 _:		ld	hl, (programPtr)
  379 D1:C896 11 81 7C FC 		ld	de, UserMem - program
  380 D1:C89A 19 -  -  -  		add	hl, de
  381 D1:C89B EB -  -  -  		ex	de, hl
  382 D1:C89C E1 -  -  -  	pop	hl
  383 D1:C89D ED 1F -  -  	ld	(hl), de
  384 D1:C89F C9 -  -  -  	ret
  385 D1:C8A0 -  -  -  -  functionIfInfinite:
  386 D1:C8A0 2A 1A EA D1 	ld	hl, (programPtr)
  387 D1:C8A4 2B -  -  -  	dec	hl
  388 D1:C8A5 2B -  -  -  	dec	hl
  389 D1:C8A6 2B -  -  -  	dec	hl
  390 D1:C8A7 2B -  -  -  	dec	hl
  391 D1:C8A8 22 1A EA D1 	ld	(programPtr), hl
  392 D1:C8AC 23 -  -  -  	inc	hl
  393 D1:C8AD ED 27 -  -  	ld	hl, (hl)
  394 D1:C8AF 19 -  -  -  	add	hl, de
  395 D1:C8B0 B7 -  -  -  	or	a
  396 D1:C8B1 ED 52 -  -  	sbc	hl, de
  397 D1:C8B3 28 1C -  -  	jr	z, functionIfInfiniteFalse
  398 D1:C8B5 CD 99 AA D1 	call	ParseProgramUntilEnd
  399 D1:C8B9 FE D0 -  -  	cp	tElse
  400 D1:C8BB C0 -  -  -  	ret	nz
  401 D1:C8BC 2A 1A EA D1 	ld	hl, (programPtr)
  402 D1:C8C0 E5 -  -  -  	push	hl
  403 D1:C8C1 CD 99 AA D1 		call	ParseProgramUntilEnd
  404 D1:C8C5 FE D0 -  -  		cp	tElse
  405 D1:C8C7 CA 39 AF D1 		jp	z, ErrorSyntax
  406 D1:C8CB E1 -  -  -  	pop	hl
  407 D1:C8CC 22 1A EA D1 	ld	(programPtr), hl
  408 D1:C8D0 C9 -  -  -  	ret
  409 D1:C8D1 -  -  -  -  functionIfInfiniteFalse:
  410 D1:C8D1 2A 1A EA D1 	ld	hl, (programPtr)
  411 D1:C8D5 E5 -  -  -  	push	hl
  412 D1:C8D6 CD 99 AA D1 		call	ParseProgramUntilEnd
  413 D1:C8DA E1 -  -  -  	pop	hl
  414 D1:C8DB 22 1A EA D1 	ld	(programPtr), hl
  415 D1:C8DF FE D0 -  -  	cp	tElse
  416 D1:C8E1 C0 -  -  -  	ret	nz
  417 D1:C8E2 CD 99 AA D1 	call	ParseProgramUntilEnd
  418 D1:C8E6 FE D0 -  -  	cp	tElse
  419 D1:C8E8 CA 39 AF D1 	jp	z, ErrorSyntax
  420 D1:C8EC C9 -  -  -  	ret
  421 D1:C8ED -  -  -  -  	
  422 D1:C8ED -  -  -  -  functionWhile:
  423 D1:C8ED 21 37 EA D1 	ld	hl, amountOfEnds
  424 D1:C8F1 34 -  -  -  	inc	(hl)
  425 D1:C8F2 CD 28 10 02 	call	_IncFetch
  426 D1:C8F6 DA 39 AF D1 	jp	c, ErrorSyntax
  427 D1:C8FA FE 3F -  -  	cp	tEnter
  428 D1:C8FC CA 39 AF D1 	jp	z, ErrorSyntax
  429 D1:C900 2A 1A EA D1 	ld	hl, (programPtr)
  430 D1:C904 E5 -  -  -  	push	hl
  431 D1:C905 CD 3E B2 D1 		call	ParseExpression
  432 D1:C909 FD CB C0 66 		bit	output_is_number, (iy+fExpression1)
  433 D1:C90D 20 6A -  -  		jr	nz, functionWhileInfinite
  434 D1:C90F FD CB C0 6E 		bit	ans_set_z_flag, (iy+fExpression1)
  435 D1:C913 28 14 -  -  		jr	z, +_
  436 D1:C915 2A 1A EA D1 		ld	hl, (programPtr)
  437 D1:C919 2B -  -  -  		dec	hl
  438 D1:C91A 2B -  -  -  		dec	hl
  439 D1:C91B 2B -  -  -  		dec	hl
  440 D1:C91C 7E -  -  -  		ld	a, (hl)
  441 D1:C91D C6 A2 -  -  		add	a, 0A2h
  442 D1:C91F 2B -  -  -  		dec	hl
  443 D1:C920 2B -  -  -  		dec	hl
  444 D1:C921 2B -  -  -  		dec	hl
  445 D1:C922 2B -  -  -  		dec	hl
  446 D1:C923 22 1A EA D1 		ld	(programPtr), hl
  447 D1:C927 18 1F -  -  		jr	InsertNormalWhile
  448 D1:C929 FD CB BF 4E _:		bit	last_token_was_not, (iy+fExpression2)
  449 D1:C92D 28 0D -  -  		jr	z, InsertNormalWhile2
  450 D1:C92F 2A 1A EA D1 		ld	hl, (programPtr)
  451 D1:C933 11 F8 FF FF 		ld	de, -8
  452 D1:C937 19 -  -  -  		add	hl, de
  453 D1:C938 22 1A EA D1 		ld	(programPtr), hl
  454 D1:C93C -  -  -  -  InsertNormalWhile2:
  455 D1:C93C 3E 19 -  -  		ld	a, 019h
  456 D1:C93E 21 B7 ED 52 		ld	hl, 052EDB7h
  457 D1:C942 CD 4C AC D1 		call	InsertAHL														;	add hl, de \ or a \ sbc hl, de
  458 D1:C946 3E CA -  -  		ld	a, 0CAh
  459 D1:C948 -  -  -  -  InsertNormalWhile:
  460 D1:C948 FD CB BF 4E 		bit	last_token_was_not, (iy+fExpression2)
  461 D1:C94C 28 02 -  -  		jr	z, $+4
  462 D1:C94E EE 08 -  -  		xor	8
  463 D1:C950 CD 18 AD D1 		call	InsertA														;	jp z, ******
  464 D1:C954 2A 1A EA D1 		ld	hl, (programPtr)
  465 D1:C958 E5 -  -  -  		push	hl
  466 D1:C959 CD 50 AC D1 			call	InsertHL													;	jp z, ******
  467 D1:C95D CD 99 AA D1 			call	ParseProgramUntilEnd
  468 D1:C961 FE D0 -  -  			cp	tElse
  469 D1:C963 CA 39 AF D1 			jp	z, ErrorSyntax
  470 D1:C967 3E C3 -  -  			ld	a, 0C3h
  471 D1:C969 D1 -  -  -  		pop	de
  472 D1:C96A E1 -  -  -  	pop	hl
  473 D1:C96B 01 81 7C FC 	ld	bc, UserMem - program
  474 D1:C96F 09 -  -  -  	add	hl, bc
  475 D1:C970 CD 4C AC D1 	call	InsertAHL															;	jp XXXXXX
  476 D1:C974 09 -  -  -  	add	hl, bc
  477 D1:C975 EB -  -  -  	ex	de, hl
  478 D1:C976 ED 1F -  -  	ld	(hl), de
  479 D1:C978 C9 -  -  -  	ret
  480 D1:C979 -  -  -  -  functionWhileInfinite:
  481 D1:C979 2A 1A EA D1 		ld	hl, (programPtr)
  482 D1:C97D 2B -  -  -  		dec	hl
  483 D1:C97E 2B -  -  -  		dec	hl
  484 D1:C97F 2B -  -  -  		dec	hl
  485 D1:C980 2B -  -  -  		dec	hl
  486 D1:C981 22 1A EA D1 		ld	(programPtr), hl
  487 D1:C985 23 -  -  -  		inc	hl
  488 D1:C986 ED 27 -  -  		ld	hl, (hl)
  489 D1:C988 19 -  -  -  		add	hl, de
  490 D1:C989 B7 -  -  -  		or	a
  491 D1:C98A ED 52 -  -  		sbc	hl, de
  492 D1:C98C 28 16 -  -  		jr	z, +_
  493 D1:C98E CD 99 AA D1 		call	ParseProgramUntilEnd
  494 D1:C992 FE D0 -  -  		cp	tElse
  495 D1:C994 CA 39 AF D1 		jp	z, ErrorSyntax
  496 D1:C998 3E C3 -  -  		ld	a, 0C3h
  497 D1:C99A E1 -  -  -  	pop	hl
  498 D1:C99B 01 81 7C FC 	ld	bc, UserMem - program
  499 D1:C99F 09 -  -  -  	add	hl, bc
  500 D1:C9A0 C3 4C AC D1 	jp	InsertAHL															;	jp XXXXXX
  501 D1:C9A4 CD 99 AA D1 _:		call	ParseProgramUntilEnd
  502 D1:C9A8 FE D0 -  -  		cp	tElse
  503 D1:C9AA CA 39 AF D1 		jp	z, ErrorSyntax
  504 D1:C9AE E1 -  -  -  	pop	hl
  505 D1:C9AF 22 1A EA D1 	ld	(programPtr), hl
  506 D1:C9B3 C9 -  -  -  	ret
  507 D1:C9B4 -  -  -  -  	
  508 D1:C9B4 -  -  -  -  functionClrHome:
  509 D1:C9B4 CD C0 0F 02 	call	_NxtFetch
  510 D1:C9B8 38 06 -  -  	jr	c, +_
  511 D1:C9BA FE 3F -  -  	cp	tEnter
  512 D1:C9BC C2 39 AF D1 	jp	nz, ErrorSyntax
  513 D1:C9C0 21 28 08 02 _:	ld	hl, _HomeUp
  514 D1:C9C4 CD 6E AC D1 	call	InsertCallHL														;	call _HomeUp
  515 D1:C9C8 21 08 08 02 	ld	hl, _ClrLCDFull
  516 D1:C9CC C3 4C AC D1 	jp	InsertAHL															;	call _ClrLCDFull
  517 D1:C9D0 -  -  -  -  	
  518 D1:C9D0 -  -  -  -  functionPause:
  519 D1:C9D0 CD 28 10 02 	call	_IncFetch
  520 D1:C9D4 38 59 -  -  	jr	c, ++_
  521 D1:C9D6 FE 3F -  -  	cp	tEnter
  522 D1:C9D8 28 55 -  -  	jr	z, ++_
  523 D1:C9DA CD 3E B2 D1 	call	ParseExpression
  524 D1:C9DE 3A 39 EA D1 	ld	a, (amountOfPause)
  525 D1:C9E2 3D -  -  -  	dec	a
  526 D1:C9E3 CA 69 CA D1 	jp	z, functionPauseOnce
  527 D1:C9E7 FD CB D0 66 	bit	has_already_pause, (iy+fProgram1)
  528 D1:C9EB 20 54 -  -  	jr	nz, AddPause
  529 D1:C9ED 3E CD -  -  	ld	a, 0CDh
  530 D1:C9EF CD 18 AD D1 	call	InsertA															;	call *
  531 D1:C9F3 CD 2F AD D1 	call	InsertProgramPtrToDataOffset
  532 D1:C9F7 2A 2F EA D1 	ld	hl, (programDataDataPtr)
  533 D1:C9FB 22 27 EA D0 	ld	(PauseStartData), hl
  534 D1:C9FF E5 -  -  -  	push	hl
  535 D1:CA00 D1 -  -  -  	pop	de
  536 D1:CA01 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  537 D1:CA05 28 10 -  -  	jr	z, +_
  538 D1:CA07 E5 -  -  -  	push	hl
  539 D1:CA08 2A 1A EA D1 		ld	hl, (programPtr)
  540 D1:CA0C 2B -  -  -  		dec	hl
  541 D1:CA0D 2B -  -  -  		dec	hl
  542 D1:CA0E 2B -  -  -  		dec	hl
  543 D1:CA0F 2B -  -  -  		dec	hl
  544 D1:CA10 ED 07 -  -  		ld	bc, (hl)
  545 D1:CA12 0B -  -  -  		dec	bc
  546 D1:CA13 ED 0F -  -  		ld	(hl), bc
  547 D1:CA15 E1 -  -  -  	pop	hl
  548 D1:CA16 23 -  -  -  	inc	hl
  549 D1:CA17 CD 50 AC D1 _:	call	InsertHL															;	call *
  550 D1:CA1B 21 B0 ED D1 	ld	hl, PauseRoutine
  551 D1:CA1F 01 13 00 00 	ld	bc, PauseRoutineEnd - PauseRoutine
  552 D1:CA23 ED B0 -  -  	ldir
  553 D1:CA25 ED 53 2F EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
  554 D1:CA2A FD CB D0 E6 	set	has_already_pause, (iy+fProgram1)
  555 D1:CA2E C9 -  -  -  	ret
  556 D1:CA2F 21 4C 01 02 _:	ld	hl, _GetCSC
  557 D1:CA33 CD 6E AC D1 	call	InsertCallHL														;	call _GetCSC
  558 D1:CA37 3E FE -  -  	ld	a, 0FEh
  559 D1:CA39 21 09 20 F8 	ld	hl, 0F82009h
  560 D1:CA3D C3 4C AC D1 	jp	InsertAHL															;	cp tEnter \ jr nz, $-9
  561 D1:CA41 -  -  -  -  AddPause:
  562 D1:CA41 3E CD -  -  	ld	a, 0CDh
  563 D1:CA43 CD 18 AD D1 	call	InsertA															;	call ******
  564 D1:CA47 CD 2F AD D1 	call	InsertProgramPtrToDataOffset
  565 D1:CA4B 2A 27 EA D0 	ld	hl, (PauseStartData)
  566 D1:CA4F FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  567 D1:CA53 28 10 -  -  	jr	z, +_
  568 D1:CA55 E5 -  -  -  	push	hl
  569 D1:CA56 2A 1A EA D1 		ld	hl, (programPtr)
  570 D1:CA5A 2B -  -  -  		dec	hl
  571 D1:CA5B 2B -  -  -  		dec	hl
  572 D1:CA5C 2B -  -  -  		dec	hl
  573 D1:CA5D 2B -  -  -  		dec	hl
  574 D1:CA5E ED 17 -  -  		ld	de, (hl)
  575 D1:CA60 1B -  -  -  		dec	de
  576 D1:CA61 ED 1F -  -  		ld	(hl), de
  577 D1:CA63 E1 -  -  -  	pop	hl
  578 D1:CA64 23 -  -  -  	inc	hl
  579 D1:CA65 C3 50 AC D1 _:	jp	InsertHL																;	call XXXXXX
  580 D1:CA69 -  -  -  -  functionPauseOnce:
  581 D1:CA69 ED 5B 1A EA 
              D1 -  -  -  	ld	de, (programPtr)
  582 D1:CA6E 21 B0 ED D1 	ld	hl, PauseRoutine
  583 D1:CA72 01 13 00 00 	ld	bc, PauseRoutineEnd - PauseRoutine
  584 D1:CA76 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  585 D1:CA7A 28 11 -  -  	jr	z, +_
  586 D1:CA7C DD 2A 1A EA 
              D1 -  -  -  	ld	ix, (programPtr)
  587 D1:CA81 DD 17 FD -  	ld	de, (ix-3)
  588 D1:CA84 1B -  -  -  	dec	de
  589 D1:CA85 DD 1F FD -  	ld	(ix-3), de
  590 D1:CA88 ED 12 00 -  	lea	de, ix
  591 D1:CA8B 23 -  -  -  	inc	hl
  592 D1:CA8C 0B -  -  -  	dec	bc
  593 D1:CA8D ED B0 -  -  _:	ldir
  594 D1:CA8F 1B -  -  -  	dec	de
  595 D1:CA90 ED 53 1A EA 
              D1 -  -  -  	ld	(programPtr), de
  596 D1:CA95 C9 -  -  -  	ret
  597 D1:CA96 -  -  -  -  	
  598 D1:CA96 -  -  -  -  functionInput:
  599 D1:CA96 CD A4 AC D1 	call	MaybeInsertIYFlags
  600 D1:CA9A CD 28 10 02 	call	_IncFetch
  601 D1:CA9E FE 41 -  -  	cp	tA
  602 D1:CAA0 DA 39 AF D1 	jp	c, ErrorSyntax
  603 D1:CAA4 FE 5C -  -  	cp	ttheta+1
  604 D1:CAA6 D2 39 AF D1 	jp	nc, ErrorSyntax
  605 D1:CAAA CD C0 0F 02 	call	_NxtFetch
  606 D1:CAAE 38 06 -  -  	jr	c, +_
  607 D1:CAB0 FE 3F -  -  	cp	tEnter
  608 D1:CAB2 C2 39 AF D1 	jp	nz, ErrorSyntax
  609 D1:CAB6 3A 38 EA D1 _:	ld	a, (amountOfInput)
  610 D1:CABA 3D -  -  -  	dec	a
  611 D1:CABB 28 79 -  -  	jr	z, functionInputOnce
  612 D1:CABD 3E 3E -  -  	ld	a, 03Eh
  613 D1:CABF CD 18 AD D1 	call	InsertA															;	ld a, **
  614 D1:CAC3 CD 2C 10 02 	call	_CurFetch
  615 D1:CAC7 D6 41 -  -  	sub	tA
  616 D1:CAC9 47 -  -  -  	ld	b, a
  617 D1:CACA 87 -  -  -  	add	a, a
  618 D1:CACB 80 -  -  -  	add	a, b
  619 D1:CACC CD 18 AD D1 	call	InsertA															;	ld a, XX
  620 D1:CAD0 3E 32 -  -  	ld	a, 032h
  621 D1:CAD2 CD 18 AD D1 	call	InsertA															;	ld (******), a
  622 D1:CAD6 CD 2F AD D1 	call	InsertProgramPtrToDataOffset
  623 D1:CADA FD CB D0 56 	bit	has_already_input, (iy+fProgram1)
  624 D1:CADE 20 39 -  -  	jr	nz, AddPointerToInput
  625 D1:CAE0 2A 2F EA D1 	ld	hl, (programDataDataPtr)
  626 D1:CAE4 22 21 EA D0 	ld	(InputStartData), hl
  627 D1:CAE8 01 3D 00 00 	ld	bc, InputOffset-InputRoutine
  628 D1:CAEC 09 -  -  -  	add	hl, bc
  629 D1:CAED CD 50 AC D1 	call	InsertHL															;	ld (XXXXXX), a
  630 D1:CAF1 3E CD -  -  	ld	a, 0CDh
  631 D1:CAF3 CD 18 AD D1 	call	InsertA															;	call ******
  632 D1:CAF7 CD 2F AD D1 	call	InsertProgramPtrToDataOffset
  633 D1:CAFB 2A 2F EA D1 	ld	hl, (programDataDataPtr)
  634 D1:CAFF E5 -  -  -  	push	hl
  635 D1:CB00 D1 -  -  -  	pop	de
  636 D1:CB01 CD 50 AC D1 	call	InsertHL															;	call XXXXXX
  637 D1:CB05 21 1D ED D1 _:	ld	hl, InputRoutine
  638 D1:CB09 01 42 00 00 	ld	bc, InputRoutineEnd-InputRoutine
  639 D1:CB0D ED B0 -  -  	ldir
  640 D1:CB0F ED 53 2F EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
  641 D1:CB14 FD CB D0 D6 	set	has_already_input, (iy+fProgram1)
  642 D1:CB18 C9 -  -  -  	ret
  643 D1:CB19 -  -  -  -  AddPointerToInput:
  644 D1:CB19 2A 21 EA D0 	ld	hl, (InputStartData)
  645 D1:CB1D E5 -  -  -  	push	hl
  646 D1:CB1E 01 3D 00 00 		ld	bc, InputOffset-InputRoutine
  647 D1:CB22 09 -  -  -  		add	hl, bc
  648 D1:CB23 CD 50 AC D1 		call	InsertHL														;	ld (XXXXXX), a
  649 D1:CB27 3E CD -  -  		ld	a, 0CDh
  650 D1:CB29 CD 18 AD D1 		call	InsertA														;	call ******
  651 D1:CB2D CD 2F AD D1 		call	InsertProgramPtrToDataOffset
  652 D1:CB31 E1 -  -  -  	pop	hl
  653 D1:CB32 C3 50 AC D1 	jp	InsertHL																;	call XXXXXX
  654 D1:CB36 -  -  -  -  functionInputOnce:
  655 D1:CB36 CD 2C 10 02 	call	_CurFetch
  656 D1:CB3A D6 41 -  -  	sub	tA
  657 D1:CB3C 47 -  -  -  	ld	b, a
  658 D1:CB3D 87 -  -  -  	add	a, a
  659 D1:CB3E 80 -  -  -  	add	a, b
  660 D1:CB3F 32 5A ED D1 	ld	(InputOffset), a
  661 D1:CB43 ED 5B 1A EA 
              D1 -  -  -  	ld	de, (programPtr)
  662 D1:CB48 21 1D ED D1 	ld	hl, InputRoutine
  663 D1:CB4C 01 42 00 00 	ld	bc, InputRoutineEnd - InputRoutine
  664 D1:CB50 ED B0 -  -  	ldir
  665 D1:CB52 D5 -  -  -  	push	de
  666 D1:CB53 DD E1 -  -  	pop	ix
  667 D1:CB55 DD 36 FC CD 	ld	(ix-4), 0CDh
  668 D1:CB59 ED 53 1A EA 
              D1 -  -  -  	ld	(programPtr), de
  669 D1:CB5E C9 -  -  -  	ret
  670 D1:CB5F -  -  -  -  	
  671 D1:CB5F -  -  -  -  functionNot:
  672 D1:CB5F 3E 01 -  -  	ld	a, 1
  673 D1:CB61 32 35 EA D1 	ld	(amountOfArguments), a
  674 D1:CB65 FD CB BF CE 	set	last_token_was_not, (iy+fExpression2)
  675 D1:CB69 E5 -  -  -  	push	hl
  676 D1:CB6A DD E1 -  -  	pop	ix
  677 D1:CB6C DD 7E FC -  	ld	a, (ix-4)
  678 D1:CB6F B7 -  -  -  	or	a
  679 D1:CB70 28 10 -  -  	jr	z, NotNumber
  680 D1:CB72 3D -  -  -  	dec	a
  681 D1:CB73 28 23 -  -  	jr	z, NotVariable
  682 D1:CB75 3D -  -  -  	dec	a
  683 D1:CB76 28 36 -  -  	jr	z, NotChainPush
  684 D1:CB78 3D -  -  -  	dec	a
  685 D1:CB79 28 37 -  -  	jr	z, NotChainAns
  686 D1:CB7B 3D -  -  -  	dec	a
  687 D1:CB7C 28 48 -  -  	jr	z, NotFunction
  688 D1:CB7E C3 39 AF D1 	jp	ErrorSyntax
  689 D1:CB82 -  -  -  -  NotNumber:
  690 D1:CB82 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  691 D1:CB86 DD 27 FD -  	ld	hl, (ix-3)
  692 D1:CB89 19 -  -  -  	add	hl, de
  693 D1:CB8A B7 -  -  -  	or	a
  694 D1:CB8B ED 52 -  -  	sbc	hl, de
  695 D1:CB8D 21 00 00 00 	ld	hl, 0
  696 D1:CB91 20 01 -  -  	jr	nz, +_
  697 D1:CB93 23 -  -  -  	inc	hl
  698 D1:CB94 DD 2F FD -  _:	ld	(ix-3), hl
  699 D1:CB97 C9 -  -  -  	ret
  700 D1:CB98 -  -  -  -  NotVariable:
  701 D1:CB98 DD 4E FD -  	ld	c, (ix-3)
  702 D1:CB9B 06 03 -  -  	ld	b, 3
  703 D1:CB9D ED 4C -  -  	mlt	bc
  704 D1:CB9F 79 -  -  -  	ld	a, c
  705 D1:CBA0 21 DD 27 00 	ld	hl, 00027DDh
  706 D1:CBA4 CD 70 1D 02 	call	_SetHLUToA
  707 D1:CBA8 CD 50 AC D1 	call	InsertHL															;	ld hl, (ix+*)
  708 D1:CBAC 18 04 -  -  	jr	NotChainAns
  709 D1:CBAE -  -  -  -  NotChainPush:
  710 D1:CBAE C3 73 AF D1 	jp	UnknownError
  711 D1:CBB2 -  -  -  -  NotChainAns:
  712 D1:CBB2 3E 11 -  -  	ld	a, 011h
  713 D1:CBB4 CD 18 AD D1 	call	InsertA															;	ld de, *
  714 D1:CBB8 3E FF -  -  	ld	a, 0FFh
  715 D1:CBBA 11 FF FF 19 	ld	de, 019FFFFh
  716 D1:CBBE 21 ED 62 23 	ld	hl, 02362EDh
  717 D1:CBC2 C3 98 AC D1 	jp	InsertADEHL															;	ld de, -1 \ add hl, de \ sbc hl, hl \ inc hl
  718 D1:CBC6 -  -  -  -  NotFunction:
  719 D1:CBC6 DD 7E FD -  	ld	a, (ix-3)
  720 D1:CBC9 06 02 -  -  	ld	b, OutputInHL
  721 D1:CBCB CD 44 AD D1 	call	GetFunction
  722 D1:CBCF 18 E1 -  -  	jr	NotChainAns
  723 D1:CBD1 -  -  -  -  	
  724 D1:CBD1 -  -  -  -  functionCE:
  725 D1:CBD1 23 -  -  -  	inc	hl
  726 D1:CBD2 23 -  -  -  	inc	hl
  727 D1:CBD3 7E -  -  -  	ld	a, (hl)
  728 D1:CBD4 FE 32 -  -  	cp	tRemainder
  729 D1:CBD6 C2 39 AF D1 	jp	nz, ErrorSyntax
  730 D1:CBDA 11 F6 FF FF 	ld	de, -10
  731 D1:CBDE 19 -  -  -  	add	hl, de
  732 D1:CBDF -  -  -  -  		
  733 D1:CBDF -  -  -  -  functionRemainder:
  734 D1:CBDF 3E 02 -  -  	ld	a, 2
  735 D1:CBE1 32 35 EA D1 	ld	(amountOfArguments), a
  736 D1:CBE5 7E -  -  -  	ld	a, (hl)
  737 D1:CBE6 DD 67 -  -  	ld	ixh, a
  738 D1:CBE8 23 -  -  -  	inc	hl
  739 D1:CBE9 E5 -  -  -  	push	hl
  740 D1:CBEA ED 07 -  -  		ld	bc, (hl)
  741 D1:CBEC 23 -  -  -  		inc	hl
  742 D1:CBED 23 -  -  -  		inc	hl
  743 D1:CBEE 23 -  -  -  		inc	hl
  744 D1:CBEF 7E -  -  -  		ld	a, (hl)
  745 D1:CBF0 DD 6F -  -  		ld	ixl, a
  746 D1:CBF2 23 -  -  -  		inc	hl
  747 D1:CBF3 ED 17 -  -  		ld	de, (hl)
  748 D1:CBF5 E1 -  -  -  	pop	hl
  749 D1:CBF6 DD 7C -  -  	ld	a, ixh
  750 D1:CBF8 B7 -  -  -  	or	a
  751 D1:CBF9 28 18 -  -  	jr	z, RemainderNumberXXX
  752 D1:CBFB 3D -  -  -  	dec	a
  753 D1:CBFC CA 73 CC D1 	jp	z, RemainderVariableXXX
  754 D1:CC00 3D -  -  -  	dec	a
  755 D1:CC01 CA B9 CC D1 	jp	z, RemainderChainPushXXX
  756 D1:CC05 3D -  -  -  	dec	a
  757 D1:CC06 CA CB CC D1 	jp	z, RemainderChainAnsXXX
  758 D1:CC0A 3D -  -  -  	dec	a
  759 D1:CC0B CA 0A CD D1 	jp	z, RemainderFunctionXXX
  760 D1:CC0F C3 39 AF D1 	jp	ErrorSyntax
  761 D1:CC13 -  -  -  -  RemainderNumberXXX:
  762 D1:CC13 DD 7D -  -  	ld	a, ixl
  763 D1:CC15 B7 -  -  -  	or	a
  764 D1:CC16 28 10 -  -  	jr	z, RemainderNumberNumber
  765 D1:CC18 3D -  -  -  	dec	a
  766 D1:CC19 28 1F -  -  	jr	z, RemainderNumberVariable
  767 D1:CC1B 3D -  -  -  	dec	a
  768 D1:CC1C 28 28 -  -  	jr	z, RemainderNumberChainPush
  769 D1:CC1E 3D -  -  -  	dec	a
  770 D1:CC1F 28 29 -  -  	jr	z, RemainderNumberChainAns
  771 D1:CC21 3D -  -  -  	dec	a
  772 D1:CC22 28 38 -  -  	jr	z, RemainderNumberFunction
  773 D1:CC24 C3 39 AF D1 	jp	ErrorSyntax
  774 D1:CC28 -  -  -  -  RemainderNumberNumber:
  775 D1:CC28 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  776 D1:CC2C E5 -  -  -  	push	hl
  777 D1:CC2D C5 -  -  -  		push	bc
  778 D1:CC2E E1 -  -  -  		pop	hl
  779 D1:CC2F D5 -  -  -  		push	de
  780 D1:CC30 C1 -  -  -  		pop	bc
  781 D1:CC31 CD 44 01 00 		call	__idvrmu
  782 D1:CC35 EB -  -  -  		ex	de, hl
  783 D1:CC36 E1 -  -  -  	pop	hl
  784 D1:CC37 ED 1F -  -  	ld	(hl), de
  785 D1:CC39 C9 -  -  -  	ret
  786 D1:CC3A -  -  -  -  RemainderNumberVariable:
  787 D1:CC3A 3E 21 -  -  	ld	a, 021h
  788 D1:CC3C C5 -  -  -  	push	bc
  789 D1:CC3D E1 -  -  -  	pop	hl
  790 D1:CC3E CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  791 D1:CC42 C3 EF CC D1 	jp	RemainderChainAnsVariable
  792 D1:CC46 -  -  -  -  RemainderNumberChainPush:
  793 D1:CC46 C3 73 AF D1 	jp	UnknownError
  794 D1:CC4A -  -  -  -  RemainderNumberChainAns:
  795 D1:CC4A 11 E5 C1 21 	ld	de, 021C1E5h
  796 D1:CC4E C5 -  -  -  	push	bc
  797 D1:CC4F E1 -  -  -  	pop	hl
  798 D1:CC50 CD 9C AC D1 	call	InsertDEHL															;	push hl \ pop bc \ ld hl, *
  799 D1:CC54 21 44 01 00 	ld	hl, __idvrmu
  800 D1:CC58 C3 6E AC D1 	jp	InsertCallHL															;	call __idvrmu
  801 D1:CC5C -  -  -  -  RemainderNumberFunction:
  802 D1:CC5C 7B -  -  -  	ld	a, e
  803 D1:CC5D C5 -  -  -  	push	bc
  804 D1:CC5E 06 00 -  -  		ld	b, OutputInBC
  805 D1:CC60 CD 44 AD D1 		call	GetFunction
  806 D1:CC64 E1 -  -  -  	pop	hl
  807 D1:CC65 3E 21 -  -  	ld	a, 021h
  808 D1:CC67 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  809 D1:CC6B 21 44 01 00 	ld	hl, __idvrmu
  810 D1:CC6F C3 6E AC D1 	jp	InsertCallHL															;	call __idvrmu
  811 D1:CC73 -  -  -  -  RemainderVariableXXX:
  812 D1:CC73 DD 7D -  -  	ld	a, ixl
  813 D1:CC75 B7 -  -  -  	or	a
  814 D1:CC76 28 10 -  -  	jr	z, RemainderVariableNumber
  815 D1:CC78 3D -  -  -  	dec	a
  816 D1:CC79 28 13 -  -  	jr	z, RemainderVariableVariable
  817 D1:CC7B 3D -  -  -  	dec	a
  818 D1:CC7C 28 16 -  -  	jr	z, RemainderVariableChainPush
  819 D1:CC7E 3D -  -  -  	dec	a
  820 D1:CC7F 28 17 -  -  	jr	z, RemainderVariableChainAns
  821 D1:CC81 3D -  -  -  	dec	a
  822 D1:CC82 28 2C -  -  	jr	z, RemainderVariableFunction
  823 D1:CC84 C3 39 AF D1 	jp	ErrorSyntax
  824 D1:CC88 -  -  -  -  RemainderVariableNumber:
  825 D1:CC88 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  826 D1:CC8C 18 52 -  -  	jr	RemainderChainAnsNumber
  827 D1:CC8E -  -  -  -  RemainderVariableVariable
  828 D1:CC8E CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  829 D1:CC92 18 5B -  -  	jr	RemainderChainAnsVariable
  830 D1:CC94 -  -  -  -  RemainderVariableChainPush:
  831 D1:CC94 C3 73 AF D1 	jp	UnknownError
  832 D1:CC98 -  -  -  -  RemainderVariableChainAns:
  833 D1:CC98 3E E5 -  -  	ld	a, 0E5h
  834 D1:CC9A CD 18 AD D1 	call	InsertA															;	push hl
  835 D1:CC9E 3E C1 -  -  	ld	a, 0C1h
  836 D1:CCA0 CD 18 AD D1 	call	InsertA															;	pop bc
  837 D1:CCA4 CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  838 D1:CCA8 21 44 01 00 	ld	hl, __idvrmu
  839 D1:CCAC C3 6E AC D1 	jp	InsertCallHL															;	call __idvrmu
  840 D1:CCB0 -  -  -  -  RemainderVariableFunction:
  841 D1:CCB0 7B -  -  -  	ld	a, e
  842 D1:CCB1 06 00 -  -  	ld	b, OutputInBC
  843 D1:CCB3 CD 44 AD D1 	call	GetFunction
  844 D1:CCB7 18 EB -  -  	jr	-_
  845 D1:CCB9 -  -  -  -  RemainderChainPushXXX:
  846 D1:CCB9 DD 7D -  -  	ld	a, ixl
  847 D1:CCBB FE 03 -  -  	cp	typeChainAns
  848 D1:CCBD C2 73 AF D1 	jp	nz, UnknownError
  849 D1:CCC1 21 E5 C1 E1 	ld	hl, 0E1C1E5h
  850 D1:CCC5 CD 4C AC D1 	call	InsertAHL															;	push hl \ pop bc \ pop hl
  851 D1:CCC9 18 1C -  -  	jr	+_
  852 D1:CCCB -  -  -  -  RemainderChainAnsXXX:
  853 D1:CCCB DD 7D -  -  	ld	a, ixl
  854 D1:CCCD B7 -  -  -  	or	a
  855 D1:CCCE 28 10 -  -  	jr	z, RemainderChainAnsNumber
  856 D1:CCD0 3D -  -  -  	dec	a
  857 D1:CCD1 28 1C -  -  	jr	z, RemainderChainAnsVariable
  858 D1:CCD3 3D -  -  -  	dec	a
  859 D1:CCD4 28 1F -  -  	jr	z, RemainderChainAnsChainPush
  860 D1:CCD6 3D -  -  -  	dec	a
  861 D1:CCD7 28 20 -  -  	jr	z, RemainderChainAnsChainAns
  862 D1:CCD9 3D -  -  -  	dec	a
  863 D1:CCDA 28 21 -  -  	jr	z, RemainderChainAnsFunction
  864 D1:CCDC C3 39 AF D1 	jp	ErrorSyntax
  865 D1:CCE0 -  -  -  -  RemainderChainAnsNumber:
  866 D1:CCE0 EB -  -  -  	ex	de, hl
  867 D1:CCE1 3E 01 -  -  	ld	a, 001h
  868 D1:CCE3 CD 4C AC D1 	call	InsertAHL															;	ld bc, *
  869 D1:CCE7 21 44 01 00 _:	ld	hl, __idvrmu
  870 D1:CCEB C3 6E AC D1 	jp	InsertCallHL															;	call __idvrmu
  871 D1:CCEF -  -  -  -  RemainderChainAnsVariable:
  872 D1:CCEF CD 8A AC D1 	call	InsertIXC															;	ld bc, (ix+*)
  873 D1:CCF3 18 F2 -  -  	jr	-_
  874 D1:CCF5 -  -  -  -  RemainderChainAnsChainPush:
  875 D1:CCF5 C3 73 AF D1 	jp	UnknownError
  876 D1:CCF9 -  -  -  -  RemainderChainAnsChainAns:
  877 D1:CCF9 C3 73 AF D1 	jp	UnknownError
  878 D1:CCFD -  -  -  -  RemainderChainAnsFunction:
  879 D1:CCFD 7B -  -  -  	ld	a, e
  880 D1:CCFE 06 00 -  -  	ld	b, OutputInBC
  881 D1:CD00 FD CB C0 F6 	set	need_push, (iy+fExpression1)
  882 D1:CD04 CD 44 AD D1 	call	GetFunction
  883 D1:CD08 18 DD -  -  	jr	-_
  884 D1:CD0A -  -  -  -  RemainderFunctionXXX:
  885 D1:CD0A DD 7D -  -  	ld	a, ixl
  886 D1:CD0C B7 -  -  -  	or	a
  887 D1:CD0D 28 10 -  -  	jr	z, RemainderFunctionNumber
  888 D1:CD0F 3D -  -  -  	dec	a
  889 D1:CD10 28 16 -  -  	jr	z, RemainderFunctionVariable
  890 D1:CD12 3D -  -  -  	dec	a
  891 D1:CD13 28 1C -  -  	jr	z, RemainderFunctionChainPush
  892 D1:CD15 3D -  -  -  	dec	a
  893 D1:CD16 28 1D -  -  	jr	z, RemainderFunctionChainAns
  894 D1:CD18 3D -  -  -  	dec	a
  895 D1:CD19 28 2F -  -  	jr	z, RemainderFunctionFunction
  896 D1:CD1B C3 39 AF D1 	jp	ErrorSyntax
  897 D1:CD1F -  -  -  -  RemainderFunctionNumber:
  898 D1:CD1F 79 -  -  -  	ld	a, c
  899 D1:CD20 06 02 -  -  	ld	b, OutputInHL
  900 D1:CD22 CD 44 AD D1 	call	GetFunction
  901 D1:CD26 18 B8 -  -  	jr	RemainderChainAnsNumber
  902 D1:CD28 -  -  -  -  RemainderFunctionVariable:
  903 D1:CD28 79 -  -  -  	ld	a, c
  904 D1:CD29 06 02 -  -  	ld	b, OutputInHL
  905 D1:CD2B CD 44 AD D1 	call	GetFunction
  906 D1:CD2F 18 BE -  -  	jr	RemainderChainAnsVariable
  907 D1:CD31 -  -  -  -  RemainderFunctionChainPush:
  908 D1:CD31 C3 73 AF D1 	jp	UnknownError
  909 D1:CD35 -  -  -  -  RemainderFunctionChainAns:
  910 D1:CD35 3E E5 -  -  	ld	a, 0E5h
  911 D1:CD37 CD 18 AD D1 	call	InsertA														;	push hl
  912 D1:CD3B 3E C1 -  -  	ld	a, 0C1h
  913 D1:CD3D CD 18 AD D1 	call	InsertA														;	pop bc
  914 D1:CD41 79 -  -  -  	ld	a, c
  915 D1:CD42 06 02 -  -  	ld	b, OutputInHL
  916 D1:CD44 CD 44 AD D1 	call	GetFunction
  917 D1:CD48 18 9D -  -  	jr	-_
  918 D1:CD4A -  -  -  -  RemainderFunctionFunction:
  919 D1:CD4A 7B -  -  -  	ld	a, e
  920 D1:CD4B 06 00 -  -  	ld	b, OutputInBC
  921 D1:CD4D CD 44 AD D1 	call	GetFunction
  922 D1:CD51 79 -  -  -  	ld	a, c
  923 D1:CD52 06 02 -  -  	ld	b, OutputInHL
  924 D1:CD54 CD 44 AD D1 	call	GetFunction
  925 D1:CD58 18 8D -  -  	jr	-_
  926 D1:CD5A -  -  -  -  	
  927 D1:CD5A -  -  -  -  functionMean:
  928 D1:CD5A FD CB BF C6 	set	use_mean_routine, (iy+fExpression2)
  929 D1:CD5E -  -  -  -  functionMax:
  930 D1:CD5E 3E 30 -  -  	ld	a, 030h
  931 D1:CD60 18 02 -  -  	jr	+_
  932 D1:CD62 -  -  -  -  functionMin:
  933 D1:CD62 3E 38 -  -  	ld	a, 038h
  934 D1:CD64 32 A1 CE D1 _:	ld	(MaxMinMeanInsertSMC), a
  935 D1:CD68 3E 02 -  -  	ld	a, 2
  936 D1:CD6A 32 35 EA D1 	ld	(amountOfArguments), a
  937 D1:CD6E 2B -  -  -  	dec	hl
  938 D1:CD6F 2B -  -  -  	dec	hl
  939 D1:CD70 2B -  -  -  	dec	hl
  940 D1:CD71 ED 17 -  -  	ld	de, (hl)
  941 D1:CD73 2B -  -  -  	dec	hl
  942 D1:CD74 7E -  -  -  	ld	a, (hl)
  943 D1:CD75 DD 6F -  -  	ld	ixl, a
  944 D1:CD77 2B -  -  -  	dec	hl
  945 D1:CD78 2B -  -  -  	dec	hl
  946 D1:CD79 2B -  -  -  	dec	hl
  947 D1:CD7A ED 07 -  -  	ld	bc, (hl)
  948 D1:CD7C 2B -  -  -  	dec	hl
  949 D1:CD7D 7E -  -  -  	ld	a, (hl)
  950 D1:CD7E 23 -  -  -  	inc	hl
  951 D1:CD7F B7 -  -  -  	or	a
  952 D1:CD80 28 18 -  -  	jr	z, MaxMinMeanNumberXXX
  953 D1:CD82 3D -  -  -  	dec	a
  954 D1:CD83 CA 09 CE D1 	jp	z, MaxMinMeanVariableXXX
  955 D1:CD87 3D -  -  -  	dec	a
  956 D1:CD88 CA 52 CE D1 	jp	z, MaxMinMeanChainPushXXX
  957 D1:CD8C 3D -  -  -  	dec	a
  958 D1:CD8D CA 76 CE D1 	jp	z, MaxMinMeanChainAnsXXX
  959 D1:CD91 3D -  -  -  	dec	a
  960 D1:CD92 CA C3 CE D1 	jp	z, MaxMinMeanFunctionXXX
  961 D1:CD96 C3 39 AF D1 	jp	ErrorSyntax
  962 D1:CD9A -  -  -  -  MaxMinMeanNumberXXX:
  963 D1:CD9A DD 7D -  -  	ld	a, ixl
  964 D1:CD9C B7 -  -  -  	or	a
  965 D1:CD9D 28 10 -  -  	jr	z, MaxMinMeanNumberNumber
  966 D1:CD9F 3D -  -  -  	dec	a
  967 D1:CDA0 28 4B -  -  	jr	z, MaxMinMeanNumberVariable
  968 D1:CDA2 3D -  -  -  	dec	a
  969 D1:CDA3 28 4F -  -  	jr	z, MaxMinMeanNumberChainPush
  970 D1:CDA5 3D -  -  -  	dec	a
  971 D1:CDA6 28 50 -  -  	jr	z, MaxMinMeanNumberChainAns
  972 D1:CDA8 3D -  -  -  	dec	a
  973 D1:CDA9 28 51 -  -  	jr	z, MaxMinMeanNumberFunction
  974 D1:CDAB C3 39 AF D1 	jp	ErrorSyntax
  975 D1:CDAF -  -  -  -  MaxMinMeanNumberNumber:
  976 D1:CDAF FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  977 D1:CDB3 E5 -  -  -  	push	hl
  978 D1:CDB4 FD CB BF 46 		bit	use_mean_routine, (iy+fExpression2)
  979 D1:CDB8 20 1C -  -  		jr	nz, ++_
  980 D1:CDBA 3A A1 CE D1 		ld	a, (MaxMinMeanInsertSMC)
  981 D1:CDBE C5 -  -  -  		push	bc
  982 D1:CDBF E1 -  -  -  		pop	hl
  983 D1:CDC0 FE 30 -  -  		cp	030h
  984 D1:CDC2 28 09 -  -  		jr	z, +_
  985 D1:CDC4 B7 -  -  -  		or	a
  986 D1:CDC5 ED 52 -  -  		sbc	hl, de
  987 D1:CDC7 19 -  -  -  		add	hl, de
  988 D1:CDC8 30 01 -  -  		jr	nc, $+3
  989 D1:CDCA EB -  -  -  		ex	de, hl
  990 D1:CDCB 18 1C -  -  		jr	+++_
  991 D1:CDCD B7 -  -  -  _:		or	a
  992 D1:CDCE ED 52 -  -  		sbc	hl, de
  993 D1:CDD0 19 -  -  -  		add	hl, de
  994 D1:CDD1 38 01 -  -  		jr	c, $+3
  995 D1:CDD3 EB -  -  -  		ex	de, hl
  996 D1:CDD4 18 13 -  -  		jr	++_
  997 D1:CDD6 EB -  -  -  _:		ex	de, hl
  998 D1:CDD7 DD 21 00 00 
              00 -  -  -  		ld	ix, 0
  999 D1:CDDC DD 39 -  -  		add	ix, sp
 1000 D1:CDDE 09 -  -  -  		add	hl, bc
 1001 D1:CDDF E5 -  -  -  		push	hl
 1002 D1:CDE0 DD CB FF 1E 			rr	(ix-1)
 1003 D1:CDE4 D1 -  -  -  		pop	de
 1004 D1:CDE5 CB 1A -  -  		rr	d
 1005 D1:CDE7 CB 1B -  -  		rr	e
 1006 D1:CDE9 E1 -  -  -  _:	pop	hl
 1007 D1:CDEA ED 1F -  -  	ld	(hl), de
 1008 D1:CDEC C9 -  -  -  	ret
 1009 D1:CDED -  -  -  -  MaxMinMeanNumberVariable:
 1010 D1:CDED C5 -  -  -  	push	bc
 1011 D1:CDEE E1 -  -  -  	pop	hl
 1012 D1:CDEF EB -  -  -  	ex	de, hl
 1013 D1:CDF0 E5 -  -  -  	push	hl
 1014 D1:CDF1 C1 -  -  -  	pop	bc
 1015 D1:CDF2 18 2A -  -  	jr	MaxMinMeanVariableNumber
 1016 D1:CDF4 -  -  -  -  MaxMinMeanNumberChainPush:
 1017 D1:CDF4 C3 73 AF D1 	jp	UnknownError
 1018 D1:CDF8 -  -  -  -  MaxMinMeanNumberChainAns:
 1019 D1:CDF8 C5 -  -  -  	push	bc
 1020 D1:CDF9 D1 -  -  -  	pop	de
 1021 D1:CDFA 18 09 -  -  	jr	+_
 1022 D1:CDFC -  -  -  -  MaxMinMeanNumberFunction:
 1023 D1:CDFC 7B -  -  -  	ld	a, e
 1024 D1:CDFD C5 -  -  -  	push	bc
 1025 D1:CDFE 06 02 -  -  		ld	b, OutputInHL
 1026 D1:CE00 CD 44 AD D1 		call	GetFunction
 1027 D1:CE04 D1 -  -  -  	pop	de
 1028 D1:CE05 C3 8B CE D1 _:	jp	MaxMinMeanChainAnsNumber
 1029 D1:CE09 -  -  -  -  MaxMinMeanVariableXXX:
 1030 D1:CE09 DD 7D -  -  	ld	a, ixl
 1031 D1:CE0B B7 -  -  -  	or	a
 1032 D1:CE0C 28 10 -  -  	jr	z, MaxMinMeanVariableNumber
 1033 D1:CE0E 3D -  -  -  	dec	a
 1034 D1:CE0F 28 13 -  -  	jr	z, MaxMinMeanVariableVariable
 1035 D1:CE11 3D -  -  -  	dec	a
 1036 D1:CE12 28 18 -  -  	jr	z, MaxMinMeanVariableChainPush
 1037 D1:CE14 3D -  -  -  	dec	a
 1038 D1:CE15 28 2B -  -  	jr	z, MaxMinMeanVariableChainAns
 1039 D1:CE17 3D -  -  -  	dec	a
 1040 D1:CE18 28 2F -  -  	jr	z, MaxMinMeanVariableFunction
 1041 D1:CE1A C3 39 AF D1 	jp	ErrorSyntax
 1042 D1:CE1E -  -  -  -  MaxMinMeanVariableNumber:
 1043 D1:CE1E CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1044 D1:CE22 18 67 -  -  	jr	MaxMinMeanChainAnsNumber
 1045 D1:CE24 -  -  -  -  MaxMinMeanVariableVariable
 1046 D1:CE24 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1047 D1:CE28 C3 A8 CE D1 	jp	MaxMinMeanChainAnsVariable
 1048 D1:CE2C -  -  -  -  MaxMinMeanVariableChainPush:
 1049 D1:CE2C 2A 1A EA D1 	ld	hl, (programPtr)
 1050 D1:CE30 2B -  -  -  	dec	hl
 1051 D1:CE31 7E -  -  -  	ld	a, (hl)
 1052 D1:CE32 FE E5 -  -  	cp	0E5h
 1053 D1:CE34 28 03 -  -  	jr	z, +_
 1054 D1:CE36 36 E1 -  -  	ld	(hl), 0E1h
 1055 D1:CE38 23 -  -  -  	inc	hl
 1056 D1:CE39 22 1A EA D1 _:	ld	(programPtr), hl
 1057 D1:CE3D 59 -  -  -  	ld	e, c
 1058 D1:CE3E C3 A8 CE D1 	jp	MaxMinMeanChainAnsVariable
 1059 D1:CE42 -  -  -  -  MaxMinMeanVariableChainAns:
 1060 D1:CE42 59 -  -  -  _:	ld	e, c
 1061 D1:CE43 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1062 D1:CE47 18 49 -  -  	jr	MaxMinMeanInsert
 1063 D1:CE49 -  -  -  -  MaxMinMeanVariableFunction:
 1064 D1:CE49 7B -  -  -  	ld	a, e
 1065 D1:CE4A 06 02 -  -  	ld	b, OutputInHL
 1066 D1:CE4C CD 44 AD D1 	call	GetFunction
 1067 D1:CE50 18 F0 -  -  	jr	-_
 1068 D1:CE52 -  -  -  -  MaxMinMeanChainPushXXX:
 1069 D1:CE52 DD 7D -  -  	ld	a, ixl
 1070 D1:CE54 FE 03 -  -  	cp	typeChainAns
 1071 D1:CE56 C2 73 AF D1 	jp	nz, UnknownError
 1072 D1:CE5A FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1073 D1:CE5E 20 0E -  -  	jr	nz, +_
 1074 D1:CE60 3E EB -  -  	ld	a, 0EBh
 1075 D1:CE62 CD 18 AD D1 	call	InsertA															;	ex de, hl
 1076 D1:CE66 3E E1 -  -  	ld	a, 0E1h
 1077 D1:CE68 CD 18 AD D1 	call	InsertA															;	pop hl
 1078 D1:CE6C 18 24 -  -  	jr	MaxMinMeanInsert
 1079 D1:CE6E 3E D1 -  -  _:	ld	a, 0D1h
 1080 D1:CE70 CD 18 AD D1 	call	InsertA															;	pop de
 1081 D1:CE74 18 1C -  -  	jr	MaxMinMeanInsert
 1082 D1:CE76 -  -  -  -  MaxMinMeanChainAnsXXX:
 1083 D1:CE76 DD 7D -  -  	ld	a, ixl
 1084 D1:CE78 B7 -  -  -  	or	a
 1085 D1:CE79 28 10 -  -  	jr	z, MaxMinMeanChainAnsNumber
 1086 D1:CE7B 3D -  -  -  	dec	a
 1087 D1:CE7C 28 2A -  -  	jr	z, MaxMinMeanChainAnsVariable
 1088 D1:CE7E 3D -  -  -  	dec	a
 1089 D1:CE7F 28 2D -  -  	jr	z, MaxMinMeanChainAnsChainPush
 1090 D1:CE81 3D -  -  -  	dec	a
 1091 D1:CE82 28 2E -  -  	jr	z, MaxMinMeanChainAnsChainAns
 1092 D1:CE84 3D -  -  -  	dec	a
 1093 D1:CE85 28 2F -  -  	jr	z, MaxMinMeanChainAnsFunction
 1094 D1:CE87 C3 39 AF D1 	jp	ErrorSyntax
 1095 D1:CE8B -  -  -  -  MaxMinMeanChainAnsNumber:
 1096 D1:CE8B EB -  -  -  	ex	de, hl
 1097 D1:CE8C 3E 11 -  -  	ld	a, 011h
 1098 D1:CE8E CD 4C AC D1 	call	InsertAHL															;	ld de, *
 1099 D1:CE92 -  -  -  -  MaxMinMeanInsert:
 1100 D1:CE92 FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1101 D1:CE96 C2 22 CF D1 	jp	nz, MeanInsert
 1102 D1:CE9A 3E B7 -  -  	ld	a, 0B7h
 1103 D1:CE9C 11 ED 52 19 	ld	de, 01952EDh
 1104 D1:CEA0 -  -  -  -  MaxMinMeanInsertSMC = $+1
 1105 D1:CEA0 21 30 01 EB 	ld	hl, 0EB0130h
 1106 D1:CEA4 C3 98 AC D1 	jp	InsertADEHL															;	or a \ sbc hl, de \ add hl, de \ jr [n]c, $+3 \ add hl, de
 1107 D1:CEA8 -  -  -  -  MaxMinMeanChainAnsVariable:
 1108 D1:CEA8 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1109 D1:CEAC 18 E4 -  -  	jr	MaxMinMeanInsert
 1110 D1:CEAE -  -  -  -  MaxMinMeanChainAnsChainPush:
 1111 D1:CEAE C3 73 AF D1 	jp	UnknownError
 1112 D1:CEB2 -  -  -  -  MaxMinMeanChainAnsChainAns:
 1113 D1:CEB2 C3 73 AF D1 	jp	UnknownError
 1114 D1:CEB6 -  -  -  -  MaxMinMeanChainAnsFunction:
 1115 D1:CEB6 7B -  -  -  	ld	a, e
 1116 D1:CEB7 06 01 -  -  	ld	b, OutputInDE
 1117 D1:CEB9 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1118 D1:CEBD CD 44 AD D1 	call	GetFunction
 1119 D1:CEC1 18 CF -  -  _:	jr	MaxMinMeanInsert
 1120 D1:CEC3 -  -  -  -  MaxMinMeanFunctionXXX:
 1121 D1:CEC3 DD 7D -  -  	ld	a, ixl
 1122 D1:CEC5 B7 -  -  -  	or	a
 1123 D1:CEC6 28 10 -  -  	jr	z, MaxMinMeanFunctionNumber
 1124 D1:CEC8 3D -  -  -  	dec	a
 1125 D1:CEC9 28 16 -  -  	jr	z, MaxMinMeanFunctionVariable
 1126 D1:CECB 3D -  -  -  	dec	a
 1127 D1:CECC 28 1C -  -  	jr	z, MaxMinMeanFunctionChainPush
 1128 D1:CECE 3D -  -  -  	dec	a
 1129 D1:CECF 28 1D -  -  	jr	z, MaxMinMeanFunctionChainAns
 1130 D1:CED1 3D -  -  -  	dec	a
 1131 D1:CED2 28 38 -  -  	jr	z, MaxMinMeanFunctionFunction
 1132 D1:CED4 C3 39 AF D1 	jp	ErrorSyntax
 1133 D1:CED8 -  -  -  -  MaxMinMeanFunctionNumber:
 1134 D1:CED8 79 -  -  -  	ld	a, c
 1135 D1:CED9 06 02 -  -  	ld	b, OutputInHL
 1136 D1:CEDB CD 44 AD D1 	call	GetFunction
 1137 D1:CEDF 18 AA -  -  	jr	MaxMinMeanChainAnsNumber
 1138 D1:CEE1 -  -  -  -  MaxMinMeanFunctionVariable:
 1139 D1:CEE1 79 -  -  -  	ld	a, c
 1140 D1:CEE2 06 02 -  -  	ld	b, OutputInHL
 1141 D1:CEE4 CD 44 AD D1 	call	GetFunction
 1142 D1:CEE8 18 BE -  -  	jr	MaxMinMeanChainAnsVariable
 1143 D1:CEEA -  -  -  -  MaxMinMeanFunctionChainPush:
 1144 D1:CEEA C3 73 AF D1 	jp	UnknownError
 1145 D1:CEEE -  -  -  -  MaxMinMeanFunctionChainAns:
 1146 D1:CEEE FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1147 D1:CEF2 20 13 -  -  	jr	nz, ++_
 1148 D1:CEF4 3E EB -  -  	ld	a, 0EBh
 1149 D1:CEF6 CD 18 AD D1 	call	InsertA															;	ex de, hl
 1150 D1:CEFA 79 -  -  -  	ld	a, c
 1151 D1:CEFB 06 02 -  -  	ld	b, OutputInHL
 1152 D1:CEFD FD CB C0 F6 _:	set	need_push, (iy+fExpression1)
 1153 D1:CF01 CD 44 AD D1 	call	GetFunction
 1154 D1:CF05 18 8B -  -  	jr	MaxMinMeanInsert
 1155 D1:CF07 79 -  -  -  _:	ld	a, c
 1156 D1:CF08 06 01 -  -  	ld	b, OutputInDE
 1157 D1:CF0A 18 F1 -  -  	jr	--_
 1158 D1:CF0C -  -  -  -  MaxMinMeanFunctionFunction:
 1159 D1:CF0C 7B -  -  -  	ld	a, e
 1160 D1:CF0D 06 01 -  -  	ld	b, OutputInDE
 1161 D1:CF0F CD 44 AD D1 	call	GetFunction
 1162 D1:CF13 79 -  -  -  	ld	a, c
 1163 D1:CF14 06 02 -  -  	ld	b, OutputInHL
 1164 D1:CF16 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1165 D1:CF1A CD 44 AD D1 	call	GetFunction
 1166 D1:CF1E C3 92 CE D1 	jp	MaxMinMeanInsert
 1167 D1:CF22 -  -  -  -  MeanInsert:
 1168 D1:CF22 FD CB D0 6E 	bit	has_already_mean, (iy+fProgram1)
 1169 D1:CF26 20 2C -  -  	jr	nz, +_
 1170 D1:CF28 3E CD -  -  	ld	a, 0CDh
 1171 D1:CF2A CD 18 AD D1 	call	InsertA															;	call *
 1172 D1:CF2E CD 2F AD D1 	call	InsertProgramPtrToDataOffset
 1173 D1:CF32 2A 2F EA D1 	ld	hl, (programDataDataPtr)
 1174 D1:CF36 22 2A EA D0 	ld	(MeanStartData), hl
 1175 D1:CF3A E5 -  -  -  	push	hl
 1176 D1:CF3B D1 -  -  -  	pop	de
 1177 D1:CF3C CD 50 AC D1 	call	InsertHL															;	call *
 1178 D1:CF40 21 C3 ED D1 	ld	hl, MeanRoutine
 1179 D1:CF44 01 18 00 00 	ld	bc, MeanRoutineEnd - MeanRoutine
 1180 D1:CF48 ED B0 -  -  	ldir
 1181 D1:CF4A ED 53 2F EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1182 D1:CF4F FD CB D0 EE 	set	has_already_mean, (iy+fProgram1)
 1183 D1:CF53 C9 -  -  -  	ret
 1184 D1:CF54 3E CD -  -  _:	ld	a, 0CDh
 1185 D1:CF56 CD 18 AD D1 	call	InsertA															;	call ******
 1186 D1:CF5A CD 2F AD D1 	call	InsertProgramPtrToDataOffset
 1187 D1:CF5E 2A 2A EA D0 	ld	hl, (MeanStartData)
 1188 D1:CF62 C3 50 AC D1 	jp	InsertHL																;	call XXXXXX
 1189 D1:CF66 -  -  -  -  	
 1190 D1:CF66 -  -  -  -  functionSqrt:
 1191 D1:CF66 3E 01 -  -  	ld	a, 1
 1192 D1:CF68 32 35 EA D1 	ld	(amountOfArguments), a
 1193 D1:CF6C FD CB BF CE 	set	last_token_was_not, (iy+fExpression2)
 1194 D1:CF70 E5 -  -  -  	push	hl
 1195 D1:CF71 DD E1 -  -  	pop	ix
 1196 D1:CF73 DD 7E FC -  	ld	a, (ix-4)
 1197 D1:CF76 B7 -  -  -  	or	a
 1198 D1:CF77 28 10 -  -  	jr	z, SqrtNumber
 1199 D1:CF79 3D -  -  -  	dec	a
 1200 D1:CF7A 28 1E -  -  	jr	z, SqrtVariable
 1201 D1:CF7C 3D -  -  -  	dec	a
 1202 D1:CF7D 28 31 -  -  	jr	z, SqrtChainPush
 1203 D1:CF7F 3D -  -  -  	dec	a
 1204 D1:CF80 28 32 -  -  	jr	z, SqrtChainAns
 1205 D1:CF82 3D -  -  -  	dec	a
 1206 D1:CF83 28 3F -  -  	jr	z, SqrtFunction
 1207 D1:CF85 C3 39 AF D1 	jp	ErrorSyntax
 1208 D1:CF89 -  -  -  -  SqrtNumber:
 1209 D1:CF89 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1210 D1:CF8D DD 27 FD -  	ld	hl, (ix-3)
 1211 D1:CF90 E5 -  -  -  	push	hl
 1212 D1:CF91 C1 -  -  -  	pop	bc
 1213 D1:CF92 CD 54 01 00 	call	__imulu
 1214 D1:CF96 DD 2F FD -  	ld	(ix-3), hl
 1215 D1:CF99 C9 -  -  -  	ret
 1216 D1:CF9A -  -  -  -  SqrtVariable:
 1217 D1:CF9A DD 4E FD -  	ld	c, (ix-3)
 1218 D1:CF9D 06 03 -  -  	ld	b, 3
 1219 D1:CF9F ED 4C -  -  	mlt	bc
 1220 D1:CFA1 79 -  -  -  	ld	a, c
 1221 D1:CFA2 21 DD 27 00 	ld	hl, 00027DDh
 1222 D1:CFA6 CD 70 1D 02 	call	_SetHLUToA
 1223 D1:CFAA CD 50 AC D1 	call	InsertHL															;	ld hl, (ix+*)
 1224 D1:CFAE 18 08 -  -  	jr	SqrtChainAns2
 1225 D1:CFB0 -  -  -  -  SqrtChainPush:
 1226 D1:CFB0 C3 73 AF D1 	jp	UnknownError
 1227 D1:CFB4 -  -  -  -  SqrtChainAns:
 1228 D1:CFB4 CD C7 AC D1 	call	MaybeChangeDEToHL
 1229 D1:CFB8 -  -  -  -  SqrtChainAns2:
 1230 D1:CFB8 11 E5 C1 CD 	ld	de, 0CDC1E5h
 1231 D1:CFBC 21 58 01 00 	ld	hl, __imuls
 1232 D1:CFC0 C3 9C AC D1 	jp	InsertDEHL															;	push hl \ pop bc \ call __imuls
 1233 D1:CFC4 -  -  -  -  SqrtFunction:
 1234 D1:CFC4 DD 7E FD -  	ld	a, (ix-3)
 1235 D1:CFC7 06 02 -  -  	ld	b, OutputInHL
 1236 D1:CFC9 CD 44 AD D1 	call	GetFunction
 1237 D1:CFCD 18 E9 -  -  	jr	SqrtChainAns2
 1238 D1:CFCF -  -  -  -  	
 1239 D1:CFCF -  -  -  -  functionC:
 1240 D1:CFCF 3E 01 -  -  	ld	a, 1
 1241 D1:CFD1 32 34 EA D1 	ld	(openedParensF), a
 1242 D1:CFD5 CD 28 10 02 	call	_IncFetch
 1243 D1:CFD9 CD 3E B2 D1 	call	ParseExpression
 1244 D1:CFDD FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
 1245 D1:CFE1 CA 39 AF D1 	jp	z, ErrorSyntax
 1246 D1:CFE5 2A 1A EA D1 	ld	hl, (programPtr)
 1247 D1:CFE9 2B -  -  -  	dec	hl
 1248 D1:CFEA 2B -  -  -  	dec	hl
 1249 D1:CFEB 2B -  -  -  	dec	hl
 1250 D1:CFEC 2B -  -  -  	dec	hl
 1251 D1:CFED 22 1A EA D1 	ld	(programPtr), hl
 1252 D1:CFF1 23 -  -  -  	inc	hl
 1253 D1:CFF2 ED 27 -  -  	ld	hl, (hl)
 1254 D1:CFF4 11 54 00 00 	ld	de, AMOUNT_OF_C_FUNCTIONS
 1255 D1:CFF8 B7 -  -  -  	or	a
 1256 D1:CFF9 ED 52 -  -  	sbc	hl, de
 1257 D1:CFFB D2 39 AF D1 	jp	nc, ErrorSyntax
 1258 D1:CFFF 19 -  -  -  	add	hl, de
 1259 D1:D000 7D -  -  -  	ld	a, l
 1260 D1:D001 B7 -  -  -  	or	a
 1261 D1:D002 ED 62 -  -  	sbc	hl, hl
 1262 D1:D004 6F -  -  -  	ld	l, a
 1263 D1:D005 11 53 E8 D1 	ld	de, CFunctionsArguments
 1264 D1:D009 19 -  -  -  	add	hl, de
 1265 D1:D00A 47 -  -  -  	ld	b, a
 1266 D1:D00B 7E -  -  -  	ld	a, (hl)
 1267 D1:D00C FE E0 -  -  	cp	%11100000
 1268 D1:D00E CA 7F AF D1 	jp	z, ImplementError
 1269 D1:D012 FD 77 B0 -  	ld	(iy+fFunction1), a
 1270 D1:D015 07 -  -  -  	rlca
 1271 D1:D016 07 -  -  -  	rlca
 1272 D1:D017 07 -  -  -  	rlca
 1273 D1:D018 E6 07 -  -  	and	000000111b
 1274 D1:D01A 4F -  -  -  	ld	c, a
 1275 D1:D01B 78 -  -  -  	ld	a, b
 1276 D1:D01C 06 03 -  -  	ld	b, 3
 1277 D1:D01E ED 4C -  -  	mlt	bc
 1278 D1:D020 21 B3 E9 D1 	ld	hl, CArguments
 1279 D1:D024 09 -  -  -  	add	hl, bc
 1280 D1:D025 ED 27 -  -  	ld	hl, (hl)
 1281 D1:D027 32 D6 E4 D1 	ld	(CFunctionArgsSMC), a
 1282 D1:D02B E9 -  -  -  	jp	(hl)
 1283 D1:D02C -  -  -  -  
 1284 D1:D02C -  -  -  -  functionCustom:
 1285 D1:D02C CD 28 10 02 	call	_IncFetch
 1286 D1:D030 D6 0A -  -  	sub	10
 1287 D1:D032 DA 39 AF D1 	jp	c, ErrorSyntax
 1288 D1:D036 FE 05 -  -  	cp	AMOUNT_OF_CUSTOM_TOKENS + 1
 1289 D1:D038 D2 39 AF D1 	jp	nc, ErrorSyntax
 1290 D1:D03C 4F -  -  -  	ld	c, a
 1291 D1:D03D 06 03 -  -  	ld	b, 3
 1292 D1:D03F ED 4C -  -  	mlt	bc
 1293 D1:D041 21 C8 E9 D1 	ld	hl, functionCustomStart
 1294 D1:D045 09 -  -  -  	add	hl, bc
 1295 D1:D046 ED 27 -  -  	ld	hl, (hl)
 1296 D1:D048 E9 -  -  -  	jp	(hl)
 1297 D1:D049 -  -  -  -  	
 1298 D1:D049 -  -  -  -  functionExecHex:
 1299 D1:D049 CD 28 10 02 	call	_IncFetch
 1300 D1:D04D D8 -  -  -  	ret	c
 1301 D1:D04E FE 3F -  -  	cp	tEnter
 1302 D1:D050 C8 -  -  -  	ret	z
 1303 D1:D051 FE 2A -  -  	cp	tString
 1304 D1:D053 C8 -  -  -  	ret	z
 1305 D1:D054 21 04 EA D1 	ld	hl, hexadecimals
 1306 D1:D058 01 10 00 00 	ld	bc, 16
 1307 D1:D05C ED B1 -  -  	cpir
 1308 D1:D05E C2 39 AF D1 _:	jp	nz, ErrorSyntax
 1309 D1:D062 51 -  -  -  	ld	d, c
 1310 D1:D063 CD 28 10 02 	call	_IncFetch
 1311 D1:D067 DA 39 AF D1 	jp	c, ErrorSyntax
 1312 D1:D06B 21 04 EA D1 	ld	hl, hexadecimals
 1313 D1:D06F 01 10 00 00 	ld	bc, 16
 1314 D1:D073 ED B1 -  -  	cpir
 1315 D1:D075 20 E7 -  -  	jr	nz, -_
 1316 D1:D077 7A -  -  -  	ld	a, d
 1317 D1:D078 87 -  -  -  	add	a, a
 1318 D1:D079 87 -  -  -  	add	a, a
 1319 D1:D07A 87 -  -  -  	add	a, a
 1320 D1:D07B 87 -  -  -  	add	a, a
 1321 D1:D07C 81 -  -  -  	add	a, c
 1322 D1:D07D CD 18 AD D1 	call	InsertA
 1323 D1:D081 18 C6 -  -  	jr	functionExecHex
 1324 D1:D083 -  -  -  -  	
 1325 D1:D083 -  -  -  -  functionRoot:
 1326 D1:D083 3E 01 -  -  	ld	a, 1
 1327 D1:D085 32 35 EA D1 	ld	(amountOfArguments), a
 1328 D1:D089 E5 -  -  -  	push	hl
 1329 D1:D08A DD E1 -  -  	pop	ix
 1330 D1:D08C DD 7E FC -  	ld	a, (ix-4)
 1331 D1:D08F B7 -  -  -  	or	a
 1332 D1:D090 28 10 -  -  	jr	z, RootNumber
 1333 D1:D092 3D -  -  -  	dec	a
 1334 D1:D093 28 20 -  -  	jr	z, RootVariable
 1335 D1:D095 3D -  -  -  	dec	a
 1336 D1:D096 28 33 -  -  	jr	z, RootChainPush
 1337 D1:D098 3D -  -  -  	dec	a
 1338 D1:D099 28 34 -  -  	jr	z, RootChainAns
 1339 D1:D09B 3D -  -  -  	dec	a
 1340 D1:D09C 28 6A -  -  	jr	z, RootFunction
 1341 D1:D09E C3 39 AF D1 	jp	ErrorSyntax
 1342 D1:D0A2 -  -  -  -  RootNumber:
 1343 D1:D0A2 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1344 D1:D0A6 DD 27 FD -  	ld	hl, (ix-3)
 1345 D1:D0A9 FD E5 -  -  	push	iy
 1346 D1:D0AB CD EF ED D1 		call	RootRoutine
 1347 D1:D0AF FD E1 -  -  	pop	iy
 1348 D1:D0B1 DD 2F FD -  	ld	(ix-3), hl
 1349 D1:D0B4 C9 -  -  -  	ret
 1350 D1:D0B5 -  -  -  -  RootVariable:
 1351 D1:D0B5 DD 4E FD -  	ld	c, (ix-3)
 1352 D1:D0B8 06 03 -  -  	ld	b, 3
 1353 D1:D0BA ED 4C -  -  	mlt	bc
 1354 D1:D0BC 79 -  -  -  	ld	a, c
 1355 D1:D0BD 21 DD 27 00 	ld	hl, 00027DDh
 1356 D1:D0C1 CD 70 1D 02 	call	_SetHLUToA
 1357 D1:D0C5 CD 50 AC D1 	call	InsertHL															;	ld hl, (ix+*)
 1358 D1:D0C9 18 04 -  -  	jr	RootChainAns
 1359 D1:D0CB -  -  -  -  RootChainPush:
 1360 D1:D0CB C3 73 AF D1 	jp	UnknownError
 1361 D1:D0CF -  -  -  -  RootChainAns:
 1362 D1:D0CF FD CB CF 46 	bit	has_already_root, (iy+fProgram2)
 1363 D1:D0D3 FD CB CF C6 	set	has_already_root, (iy+fProgram2)
 1364 D1:D0D7 20 1D -  -  	jr	nz, RootChainAnsRecallRoutine
 1365 D1:D0D9 -  -  -  -  RootChainAnsAddRoutine:
 1366 D1:D0D9 FD CB B0 CE 	set	modified_iy, (iy+fAlways1)
 1367 D1:D0DD ED 5B 2F EA 
              D1 -  -  -  	ld	de, (programDataDataPtr)
 1368 D1:D0E2 ED 53 30 EA 
              D0 -  -  -  	ld	(RootStartData), de
 1369 D1:D0E7 21 EF ED D1 	ld	hl, RootRoutine
 1370 D1:D0EB 01 2D 00 00 	ld	bc, RootRoutineEnd - RootRoutine
 1371 D1:D0EF ED B0 -  -  	ldir
 1372 D1:D0F1 ED 53 2F EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1373 D1:D0F6 -  -  -  -  RootChainAnsRecallRoutine:
 1374 D1:D0F6 3E CD -  -  	ld	a, 0CDh
 1375 D1:D0F8 CD 18 AD D1 	call	InsertA															;	call *
 1376 D1:D0FC CD 2F AD D1 	call	InsertProgramPtrToDataOffset
 1377 D1:D100 2A 30 EA D0 	ld	hl, (RootStartData)
 1378 D1:D104 C3 50 AC D1 	jp	InsertHL																;	call *
 1379 D1:D108 -  -  -  -  RootFunction:
 1380 D1:D108 DD 7E FD -  	ld	a, (ix-3)
 1381 D1:D10B 06 02 -  -  	ld	b, OutputInHL
 1382 D1:D10D CD 44 AD D1 	call	GetFunction
 1383 D1:D111 18 BC -  -  	jr	RootChainAns
 1384 D1:D113 -  -  -  -  	
 1385 D1:D113 -  -  -  -  	
 1386 D1:D113 -  -  -  -  	
 1387 D1:D113 -  -  -  -  	
 1388 D1:D113 -  -  -  -  	
 1389 D1:D113 -  -  -  -  	
 1390 D1:D113 -  -  -  -  	
 1391 D1:D113 -  -  -  -  functionDefineSprite:
 1392 D1:D113 FD CB D0 7E 	bit	used_code, (iy+fProgram1)
 1393 D1:D117 C2 61 AF D1 	jp	nz, ErrorUsedCode
 1394 D1:D11B 3E 01 -  -  	ld	a, 1
 1395 D1:D11D 32 34 EA D1 	ld	(openedParensF), a
 1396 D1:D121 CD 2F AD D1 	call	InsertProgramPtrToDataOffset
 1397 D1:D125 2A 2F EA D1 	ld	hl, (programDataDataPtr)
 1398 D1:D129 E5 -  -  -  	push	hl
 1399 D1:D12A D1 -  -  -  	pop	de
 1400 D1:D12B CD 50 AC D1 	call	InsertHL
 1401 D1:D12F 06 02 -  -  	ld	b, 2
 1402 D1:D131 D5 -  -  -  _:	push	de
 1403 D1:D132 C5 -  -  -  		push	bc
 1404 D1:D133 CD 28 10 02 			call	_IncFetch
 1405 D1:D137 CD 3E B2 D1 			call	ParseExpression
 1406 D1:D13B FD CB C0 66 			bit	output_is_number, (iy+fExpression1)
 1407 D1:D13F CA 39 AF D1 			jp	z, ErrorSyntax
 1408 D1:D143 FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
 1409 D1:D147 CA 39 AF D1 			jp	z, ErrorSyntax
 1410 D1:D14B 2A 1A EA D1 			ld	hl, (programPtr)
 1411 D1:D14F 2B -  -  -  			dec	hl
 1412 D1:D150 2B -  -  -  			dec	hl
 1413 D1:D151 2B -  -  -  			dec	hl
 1414 D1:D152 2B -  -  -  			dec	hl
 1415 D1:D153 22 1A EA D1 			ld	(programPtr), hl
 1416 D1:D157 23 -  -  -  			inc	hl
 1417 D1:D158 7E -  -  -  			ld	a, (hl)
 1418 D1:D159 C1 -  -  -  		pop	bc
 1419 D1:D15A D1 -  -  -  	pop	de
 1420 D1:D15B 12 -  -  -  	ld	(de), a
 1421 D1:D15C 13 -  -  -  	inc	de
 1422 D1:D15D 10 D2 -  -  	djnz	-_
 1423 D1:D15F 2A 1A EA D1 	ld	hl, (programPtr)
 1424 D1:D163 E5 -  -  -  	push	hl
 1425 D1:D164 ED 53 1A EA 
              D1 -  -  -  		ld	(programPtr), de
 1426 D1:D169 CD 28 10 02 		call	_IncFetch
 1427 D1:D16D FE 2A -  -  		cp	tString
 1428 D1:D16F C2 39 AF D1 		jp	nz, ErrorSyntax
 1429 D1:D173 CD C0 0F 02 		call	_NxtFetch
 1430 D1:D177 DA 39 AF D1 		jp	c, ErrorSyntax
 1431 D1:D17B FE 3F -  -  		cp	tEnter
 1432 D1:D17D CA 39 AF D1 		jp	z, ErrorSyntax
 1433 D1:D181 CD 49 D0 D1 		call	functionExecHex
 1434 D1:D185 2A 1A EA D1 		ld	hl, (programPtr)
 1435 D1:D189 22 2F EA D1 		ld	(programDataDataPtr), hl
 1436 D1:D18D E1 -  -  -  	pop	hl
 1437 D1:D18E 22 1A EA D1 	ld	(programPtr), hl
 1438 D1:D192 C9 -  -  -  	ret
 1439 D1:D193 -  -  -  -  	
 1440 D1:D193 -  -  -  -  functionCompilePrgm:
 1441 D1:D193 21 F8 05 D0 	ld	hl, OP1
 1442 D1:D197 CD A7 B1 D1 	call	GetProgramName
 1443 D1:D19B 3E 05 -  -  	ld	a, ProgObj
 1444 D1:D19D 32 F8 05 D0 	ld	(OP1), a
 1445 D1:D1A1 CD 0C 05 02 	call	_ChkFindSym
 1446 D1:D1A5 30 0D -  -  	jr	nc, +_
 1447 D1:D1A7 21 F8 05 D0 	ld	hl, OP1
 1448 D1:D1AB 34 -  -  -  	inc	(hl)
 1449 D1:D1AC CD 0C 05 02 	call	_ChkFindSym
 1450 D1:D1B0 DA 5B AF D1 	jp	c, ErrorNotFound
 1451 D1:D1B4 CD 98 1F 02 _:	call	_ChkInRAM
 1452 D1:D1B8 30 0A -  -  	jr	nc, +_
 1453 D1:D1BA EB -  -  -  	ex	de, hl
 1454 D1:D1BB 11 09 00 00 	ld	de, 9
 1455 D1:D1BF 19 -  -  -  	add	hl, de
 1456 D1:D1C0 5E -  -  -  	ld	e, (hl)
 1457 D1:D1C1 19 -  -  -  	add	hl, de
 1458 D1:D1C2 23 -  -  -  	inc	hl
 1459 D1:D1C3 EB -  -  -  	ex	de, hl
 1460 D1:D1C4 2A F8 05 D0 _:	ld	hl, (OP1)
 1461 D1:D1C8 E5 -  -  -  	push	hl
 1462 D1:D1C9 2A FB 05 D0 		ld	hl, (OP1+3)
 1463 D1:D1CD E5 -  -  -  		push	hl
 1464 D1:D1CE 2A FE 05 D0 			ld	hl, (OP1+6)
 1465 D1:D1D2 E5 -  -  -  			push	hl
 1466 D1:D1D3 2A 17 23 D0 				ld	hl, (begPC)
 1467 D1:D1D7 E5 -  -  -  				push	hl
 1468 D1:D1D8 2A 1A 23 D0 					ld	hl, (curPC)
 1469 D1:D1DC E5 -  -  -  					push	hl
 1470 D1:D1DD 2A 1D 23 D0 						ld	hl, (endPC)
 1471 D1:D1E1 E5 -  -  -  						push	hl
 1472 D1:D1E2 EB -  -  -  							ex	de, hl
 1473 D1:D1E3 01 00 00 00 							ld	bc, 0
 1474 D1:D1E7 4E -  -  -  							ld	c, (hl)
 1475 D1:D1E8 23 -  -  -  							inc	hl
 1476 D1:D1E9 22 1A 23 D0 							ld	(curPC), hl
 1477 D1:D1ED 46 -  -  -  							ld	b, (hl)
 1478 D1:D1EE 23 -  -  -  							inc	hl
 1479 D1:D1EF 22 17 23 D0 							ld	(begPC), hl
 1480 D1:D1F3 09 -  -  -  							add	hl, bc
 1481 D1:D1F4 2B -  -  -  							dec	hl
 1482 D1:D1F5 22 1D 23 D0 							ld	(endPC), hl
 1483 D1:D1F9 CD 70 B0 D1 							call	PrintCompilingProgram
 1484 D1:D1FD 21 3D EA D1 							ld	hl, AmountOfSubPrograms
 1485 D1:D201 34 -  -  -  							inc	(hl)
 1486 D1:D202 CD 70 AA D1 							call	CompileProgramFull
 1487 D1:D206 E1 -  -  -  						pop	hl
 1488 D1:D207 22 1D 23 D0 						ld	(endPC), hl
 1489 D1:D20B E1 -  -  -  					pop	hl
 1490 D1:D20C 22 1A 23 D0 					ld	(curPC), hl
 1491 D1:D210 E1 -  -  -  				pop	hl
 1492 D1:D211 22 17 23 D0 				ld	(begPC), hl
 1493 D1:D215 E1 -  -  -  			pop	hl
 1494 D1:D216 22 FE 05 D0 			ld	(OP1+6), hl
 1495 D1:D21A E1 -  -  -  		pop	hl
 1496 D1:D21B 22 FB 05 D0 		ld	(OP1+3), hl
 1497 D1:D21F E1 -  -  -  	pop	hl
 1498 D1:D220 22 F8 05 D0 	ld	(OP1), hl
 1499 D1:D224 C3 70 B0 D1 	jp	PrintCompilingProgram
Listing for file "ice.asm"
  447 D1:D228 -  -  -  -  #include "operators functions/operators.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\operators.asm"
    1 D1:D228 -  -  -  -  ExecuteOperator:
    2 D1:D228 32 20 EA D0 	ld	(tempToken2), a
    3 D1:D22C 21 3C EA D1 	ld	hl, ExprOutput2
    4 D1:D230 36 01 -  -  	ld	(hl), OutputIsInHL
    5 D1:D232 B7 -  -  -  	or	a
    6 D1:D233 CA 7D D2 D1 	jp	z, ListElementXXX
    7 D1:D237 FE 6D -  -  	cp	tLE
    8 D1:D239 CC 77 DA D1 	call	z, SwapLEToGE
    9 D1:D23D FE 6B -  -  	cp	tLT
   10 D1:D23F CC 7B DA D1 	call	z, SwapLTToGT
   11 D1:D243 32 1F EA D0 	ld	(tempToken), a
   12 D1:D247 C5 -  -  -  	push	bc
   13 D1:D248 21 A7 E8 D1 		ld	hl, operators_booleans
   14 D1:D24C 01 0E 00 00 		ld	bc, 14
   15 D1:D250 ED B1 -  -  		cpir
   16 D1:D252 21 B6 E8 D1 		ld	hl, operators_special
   17 D1:D256 09 -  -  -  		add	hl, bc
   18 D1:D257 4E -  -  -  		ld	c, (hl)
   19 D1:D258 79 -  -  -  		ld	a, c
   20 D1:D259 FE 04 -  -  		cp	4
   21 D1:D25B 20 04 -  -  		jr	nz, +_
   22 D1:D25D FD CB C0 EE 		set	ans_set_z_flag, (iy+fExpression1)
   23 D1:D261 06 12 -  -  _:		ld	b, 18
   24 D1:D263 ED 4C -  -  		mlt	bc
   25 D1:D265 21 23 E9 D1 		ld	hl, operator_start											;	start of bunch jumps
   26 D1:D269 09 -  -  -  		add	hl, bc														;	start of right operator
   27 D1:D26A DD 7E F8 -  		ld	a, (ix-8)
   28 D1:D26D 4F -  -  -  		ld	c, a
   29 D1:D26E FE 06 -  -  		cp	6
   30 D1:D270 D2 39 AF D1 		jp	nc, ErrorSyntax
   31 D1:D274 06 03 -  -  		ld	b, 3
   32 D1:D276 ED 4C -  -  		mlt	bc
   33 D1:D278 09 -  -  -  		add	hl, bc														;	start of right subelement
   34 D1:D279 ED 27 -  -  		ld	hl, (hl)
   35 D1:D27B C1 -  -  -  	pop	bc
   36 D1:D27C E9 -  -  -  	jp	(hl)
   37 D1:D27D -  -  -  -  	
   38 D1:D27D -  -  -  -  ListElementXXX:
   39 D1:D27D DD 7E FC -  	ld	a, (ix-4)
   40 D1:D280 B7 -  -  -  	or	a
   41 D1:D281 28 0C -  -  	jr	z, ListElementNumber
   42 D1:D283 3D -  -  -  	dec	a
   43 D1:D284 28 14 -  -  	jr	z, ListElementVariable
   44 D1:D286 3D -  -  -  	dec	a
   45 D1:D287 28 17 -  -  	jr	z, ListElementChainPush
   46 D1:D289 3D -  -  -  	dec	a
   47 D1:D28A 28 18 -  -  	jr	z, ListElementChainAns
   48 D1:D28C 3D -  -  -  	dec	a
   49 D1:D28D 28 31 -  -  	jr	z, ListElementFunction
   50 D1:D28F -  -  -  -  ListElementNumber:
   51 D1:D28F 3E 2A -  -  	ld	a, 02Ah
   52 D1:D291 C5 -  -  -  	push	bc
   53 D1:D292 E1 -  -  -  	pop	hl
   54 D1:D293 19 -  -  -  	add	hl, de
   55 D1:D294 19 -  -  -  	add	hl, de
   56 D1:D295 19 -  -  -  	add	hl, de
   57 D1:D296 C3 4C AC D1 	jp	InsertAHL															;	ld hl, (*)
   58 D1:D29A -  -  -  -  ListElementVariable:
   59 D1:D29A CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
   60 D1:D29E 18 08 -  -  	jr	+_
   61 D1:D2A0 -  -  -  -  ListElementChainPush:
   62 D1:D2A0 C3 73 AF D1 	jp	UnknownError
   63 D1:D2A4 -  -  -  -  ListElementChainAns:
   64 D1:D2A4 CD BD AC D1 	call	MaybeChangeHLToDE
   65 D1:D2A8 3E 21 -  -  _:	ld	a, 021h
   66 D1:D2AA C5 -  -  -  	push	bc
   67 D1:D2AB D1 -  -  -  	pop	de
   68 D1:D2AC 21 19 19 19 	ld	hl, 0191919h
   69 D1:D2B0 CD 98 AC D1 	call	InsertADEHL														;	ld hl, * \ add hl, de \ add hl, de \ add hl, de
   70 D1:D2B4 3E ED -  -  	ld	a, 0EDh
   71 D1:D2B6 CD 18 AD D1 	call	InsertA															;	ld hl, (hl) (1)
   72 D1:D2BA 3E 27 -  -  	ld	a, 027h
   73 D1:D2BC C3 18 AD D1 	jp	InsertA																;	ld hl, (hl) (2)
   74 D1:D2C0 -  -  -  -  ListElementFunction:
   75 D1:D2C0 7B -  -  -  	ld	a, e
   76 D1:D2C1 06 01 -  -  	ld	b, OutputInDE
   77 D1:D2C3 CD 44 AD D1 	call	GetFunction
   78 D1:D2C7 18 DF -  -  	jr	-_
   79 D1:D2C9 -  -  -  -  	
   80 D1:D2C9 -  -  -  -  SubNumberXXX:
   81 D1:D2C9 DD 7E FC -  	ld	a, (ix-4)
   82 D1:D2CC B7 -  -  -  	or	a
   83 D1:D2CD 28 10 -  -  	jr	z, SubNumberNumber
   84 D1:D2CF 3D -  -  -  	dec	a
   85 D1:D2D0 28 1A -  -  	jr	z, SubNumberVariable
   86 D1:D2D2 3D -  -  -  	dec	a
   87 D1:D2D3 28 23 -  -  	jr	z, SubNumberChainPush
   88 D1:D2D5 3D -  -  -  	dec	a
   89 D1:D2D6 28 24 -  -  	jr	z, SubNumberChainAns
   90 D1:D2D8 3D -  -  -  	dec	a
   91 D1:D2D9 28 31 -  -  	jr	z, SubNumberFunction
   92 D1:D2DB C3 CE AE D1 	jp	SubError
   93 D1:D2DF -  -  -  -  SubNumberNumber:
   94 D1:D2DF FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
   95 D1:D2E3 C5 -  -  -  	push	bc
   96 D1:D2E4 E1 -  -  -  	pop	hl
   97 D1:D2E5 B7 -  -  -  	or	a
   98 D1:D2E6 ED 52 -  -  	sbc	hl, de
   99 D1:D2E8 DD 2F F9 -  	ld	(ix-7), hl
  100 D1:D2EB C9 -  -  -  	ret
  101 D1:D2EC -  -  -  -  SubNumberVariable:
  102 D1:D2EC 3E 21 -  -  	ld	a, 021h
  103 D1:D2EE C5 -  -  -  	push	bc
  104 D1:D2EF E1 -  -  -  	pop	hl
  105 D1:D2F0 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  106 D1:D2F4 C3 1D D4 D1 	jp	SubChainAnsVariable
  107 D1:D2F8 -  -  -  -  SubNumberChainPush:
  108 D1:D2F8 C3 73 AF D1 	jp	UnknownError
  109 D1:D2FC -  -  -  -  SubNumberChainAns:
  110 D1:D2FC CD BD AC D1 	call	MaybeChangeHLToDE
  111 D1:D300 3E 21 -  -  	ld	a, 021h
  112 D1:D302 C5 -  -  -  	push	bc
  113 D1:D303 D1 -  -  -  	pop	de
  114 D1:D304 21 B7 ED 52 	ld	hl, 052EDB7h
  115 D1:D308 C3 98 AC D1 	jp	InsertADEHL															;	ld hl, * \ or a \ sbc hl, de
  116 D1:D30C -  -  -  -  SubNumberFunction:
  117 D1:D30C 7B -  -  -  	ld	a, e
  118 D1:D30D C5 -  -  -  	push	bc
  119 D1:D30E 06 01 -  -  		ld	b, OutputInDE
  120 D1:D310 CD 44 AD D1 		call	GetFunction
  121 D1:D314 3E 21 -  -  		ld	a, 021h
  122 D1:D316 D1 -  -  -  	pop	de
  123 D1:D317 21 B7 ED 52 	ld	hl, 052EDB7h
  124 D1:D31B C3 98 AC D1 	jp	InsertADEHL															;	ld hl, * \ or a \ sbc hl, de
  125 D1:D31F -  -  -  -  SubVariableXXX:
  126 D1:D31F DD 7E FC -  	ld	a, (ix-4)
  127 D1:D322 B7 -  -  -  	or	a
  128 D1:D323 28 12 -  -  	jr	z, SubVariableNumber
  129 D1:D325 3D -  -  -  	dec	a
  130 D1:D326 28 17 -  -  	jr	z, SubVariableVariable
  131 D1:D328 3D -  -  -  	dec	a
  132 D1:D329 28 2E -  -  	jr	z, SubVariableChainPush
  133 D1:D32B 3D -  -  -  	dec	a
  134 D1:D32C 28 2F -  -  	jr	z, SubVariableChainAns
  135 D1:D32E 3D -  -  -  	dec	a
  136 D1:D32F CA 6D D3 D1 	jp	z, SubVariableFunction
  137 D1:D333 C3 CE AE D1 	jp	SubError
  138 D1:D337 -  -  -  -  SubVariableNumber:
  139 D1:D337 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  140 D1:D33B C3 DA D3 D1 	jp	SubChainAnsNumber
  141 D1:D33F -  -  -  -  SubVariableVariable:
  142 D1:D33F 79 -  -  -  	ld	a, c
  143 D1:D340 BB -  -  -  	cp	e
  144 D1:D341 20 0E -  -  	jr	nz, +_
  145 D1:D343 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  146 D1:D347 36 00 -  -  	ld	(hl), typeNumber
  147 D1:D349 11 00 00 00 	ld	de, 0
  148 D1:D34D 23 -  -  -  	inc	hl
  149 D1:D34E ED 1F -  -  	ld	(hl), de
  150 D1:D350 C9 -  -  -  	ret
  151 D1:D351 CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  152 D1:D355 C3 1D D4 D1 	jp	SubChainAnsVariable
  153 D1:D359 -  -  -  -  SubVariableChainPush:
  154 D1:D359 C3 73 AF D1 	jp	UnknownError
  155 D1:D35D -  -  -  -  SubVariableChainAns:
  156 D1:D35D CD BD AC D1 	call	MaybeChangeHLToDE
  157 D1:D361 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  158 D1:D365 21 B7 ED 52 	ld	hl, 052EDB7h
  159 D1:D369 C3 50 AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  160 D1:D36D -  -  -  -  SubVariableFunction:
  161 D1:D36D 7B -  -  -  	ld	a, e
  162 D1:D36E 06 01 -  -  	ld	b, OutputInDE
  163 D1:D370 CD 44 AD D1 	call	GetFunction
  164 D1:D374 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  165 D1:D378 21 B7 ED 52 	ld	hl, 052EDB7h
  166 D1:D37C C3 50 AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  167 D1:D380 -  -  -  -  SubChainPushXXX:
  168 D1:D380 DD 7E FC -  	ld	a, (ix-4)
  169 D1:D383 B7 -  -  -  	or	a
  170 D1:D384 28 12 -  -  	jr	z, SubChainPushNumber
  171 D1:D386 3D -  -  -  	dec	a
  172 D1:D387 28 17 -  -  	jr	z, SubChainPushVariable
  173 D1:D389 3D -  -  -  	dec	a
  174 D1:D38A 28 1C -  -  	jr	z, SubChainPushChainPush
  175 D1:D38C 3D -  -  -  	dec	a
  176 D1:D38D 28 1D -  -  	jr	z, SubChainPushChainAns
  177 D1:D38F 3D -  -  -  	dec	a
  178 D1:D390 CA BA D3 D1 	jp	z, SubChainPushFunction
  179 D1:D394 C3 CE AE D1 	jp	SubError
  180 D1:D398 -  -  -  -  SubChainPushNumber:
  181 D1:D398 3E E1 -  -  	ld	a, 0E1h
  182 D1:D39A CD 18 AD D1 	call	InsertA															;	pop hl
  183 D1:D39E 18 3A -  -  	jr	SubChainAnsNumber
  184 D1:D3A0 -  -  -  -  SubChainPushVariable:
  185 D1:D3A0 3E E1 -  -  	ld	a, 0E1h
  186 D1:D3A2 CD 18 AD D1 	call	InsertA															;	pop hl
  187 D1:D3A6 18 75 -  -  	jr	SubChainAnsVariable
  188 D1:D3A8 -  -  -  -  SubChainPushChainPush:
  189 D1:D3A8 C3 73 AF D1 	jp	UnknownError
  190 D1:D3AC -  -  -  -  SubChainPushChainAns:
  191 D1:D3AC CD BD AC D1 	call	MaybeChangeHLToDE
  192 D1:D3B0 3E E1 -  -  	ld	a, 0E1h
  193 D1:D3B2 21 B7 ED 52 	ld	hl, 052EDB7h
  194 D1:D3B6 C3 4C AC D1 	jp	InsertAHL															;	pop hl \ or a \ sbc hl, de
  195 D1:D3BA -  -  -  -  SubChainPushFunction:
  196 D1:D3BA 3E E1 -  -  	ld	a, 0E1h
  197 D1:D3BC CD 18 AD D1 	call	InsertA															;	pop hl
  198 D1:D3C0 18 73 -  -  	jr	SubChainAnsFunction
  199 D1:D3C2 -  -  -  -  SubChainAnsXXX:
  200 D1:D3C2 DD 7E FC -  	ld	a, (ix-4)
  201 D1:D3C5 B7 -  -  -  	or	a
  202 D1:D3C6 28 12 -  -  	jr	z, SubChainAnsNumber
  203 D1:D3C8 3D -  -  -  	dec	a
  204 D1:D3C9 28 52 -  -  	jr	z, SubChainAnsVariable
  205 D1:D3CB 3D -  -  -  	dec	a
  206 D1:D3CC 28 5F -  -  	jr	z, SubChainAnsChainPush
  207 D1:D3CE 3D -  -  -  	dec	a
  208 D1:D3CF 28 60 -  -  	jr	z, SubChainAnsChainAns
  209 D1:D3D1 3D -  -  -  	dec	a
  210 D1:D3D2 CA 35 D4 D1 	jp	z, SubChainAnsFunction
  211 D1:D3D6 C3 CE AE D1 	jp	SubError
  212 D1:D3DA -  -  -  -  SubChainAnsNumber:
  213 D1:D3DA B7 -  -  -  	or	a
  214 D1:D3DB ED 62 -  -  	sbc	hl, hl
  215 D1:D3DD EB -  -  -  	ex	de, hl
  216 D1:D3DE ED 52 -  -  	sbc	hl, de
  217 D1:D3E0 C8 -  -  -  	ret	z
  218 D1:D3E1 1E 07 -  -  	ld	e, 7
  219 D1:D3E3 ED 52 -  -  	sbc	hl, de
  220 D1:D3E5 30 1C -  -  	jr	nc, SubHLDE
  221 D1:D3E7 19 -  -  -  	add	hl, de
  222 D1:D3E8 45 -  -  -  	ld	b, l
  223 D1:D3E9 3A 3B EA D1 	ld	a, (ExprOutput)
  224 D1:D3ED B7 -  -  -  	or	a
  225 D1:D3EE 28 09 -  -  	jr	z, ++_
  226 D1:D3F0 3E 2B -  -  	ld	a, 02Bh
  227 D1:D3F2 CD 18 AD D1 _:	call	InsertA															;	dec hl/de
  228 D1:D3F6 10 FA -  -  	djnz	-_
  229 D1:D3F8 C9 -  -  -  	ret
  230 D1:D3F9 3E 00 -  -  _:	ld	a, OutputIsInDE
  231 D1:D3FB 32 3C EA D1 	ld	(ExprOutput2), a
  232 D1:D3FF 3E 1B -  -  	ld	a, 01Bh
  233 D1:D401 18 EF -  -  	jr	--_
  234 D1:D403 -  -  -  -  SubHLDE:
  235 D1:D403 19 -  -  -  	add	hl, de
  236 D1:D404 CD 60 01 00 	call	__ineg
  237 D1:D408 3A 3B EA D1 	ld	a, (ExprOutput)
  238 D1:D40C B7 -  -  -  	or	a
  239 D1:D40D 3E 11 -  -  	ld	a, 011h
  240 D1:D40F 20 02 -  -  	jr	nz, +_
  241 D1:D411 3E 21 -  -  	ld	a, 021h
  242 D1:D413 CD 4C AC D1 _:	call	InsertAHL															;	ld hl/de, 16777215-*
  243 D1:D417 3E 19 -  -  	ld	a, 019h
  244 D1:D419 C3 18 AD D1 	jp	InsertA																;	add hl, de
  245 D1:D41D -  -  -  -  SubChainAnsVariable:
  246 D1:D41D CD C7 AC D1 	call	MaybeChangeDEToHL
  247 D1:D421 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
  248 D1:D425 21 B7 ED 52 	ld	hl, 052EDB7h
  249 D1:D429 C3 50 AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  250 D1:D42D -  -  -  -  SubChainAnsChainPush:
  251 D1:D42D C3 73 AF D1 	jp	UnknownError
  252 D1:D431 -  -  -  -  SubChainAnsChainAns:
  253 D1:D431 C3 73 AF D1 	jp	UnknownError
  254 D1:D435 -  -  -  -  SubChainAnsFunction:
  255 D1:D435 3A 3B EA D1 	ld	a, (ExprOutput)
  256 D1:D439 87 -  -  -  	add	a, a
  257 D1:D43A 87 -  -  -  	add	a, a
  258 D1:D43B 87 -  -  -  	add	a, a
  259 D1:D43C 87 -  -  -  	add	a, a
  260 D1:D43D C6 D5 -  -  	add	a, 0D5h
  261 D1:D43F CD 18 AD D1 	call	InsertA															;	push hl/de
  262 D1:D443 7B -  -  -  	ld	a, e
  263 D1:D444 06 01 -  -  	ld	b, OutputInDE
  264 D1:D446 CD 44 AD D1 	call	GetFunction
  265 D1:D44A 3E E1 -  -  	ld	a, 0E1h
  266 D1:D44C 21 B7 ED 52 	ld	hl, 052EDB7h
  267 D1:D450 C3 4C AC D1 	jp	InsertAHL															;	pop hl \ or a \ sbc hl, de
  268 D1:D454 -  -  -  -  SubFunctionXXX:
  269 D1:D454 DD 7E FC -  	ld	a, (ix-4)
  270 D1:D457 B7 -  -  -  	or	a
  271 D1:D458 28 10 -  -  	jr	z, SubFunctionNumber
  272 D1:D45A 3D -  -  -  	dec	a
  273 D1:D45B 28 18 -  -  	jr	z, SubFunctionVariable
  274 D1:D45D 3D -  -  -  	dec	a
  275 D1:D45E 28 20 -  -  	jr	z, SubFunctionChainPush
  276 D1:D460 3D -  -  -  	dec	a
  277 D1:D461 28 21 -  -  	jr	z, SubFunctionChainAns
  278 D1:D463 3D -  -  -  	dec	a
  279 D1:D464 28 3D -  -  	jr	z, SubFunctionFunction
  280 D1:D466 C3 CE AE D1 	jp	SubError
  281 D1:D46A -  -  -  -  SubFunctionNumber:
  282 D1:D46A 79 -  -  -  	ld	a, c
  283 D1:D46B 06 02 -  -  	ld	b, OutputInHL
  284 D1:D46D CD 44 AD D1 	call	GetFunction
  285 D1:D471 C3 DA D3 D1 	jp	SubChainAnsNumber
  286 D1:D475 -  -  -  -  SubFunctionVariable:
  287 D1:D475 79 -  -  -  	ld	a, c
  288 D1:D476 06 02 -  -  	ld	b, OutputInHL
  289 D1:D478 CD 44 AD D1 	call	GetFunction
  290 D1:D47C C3 1D D4 D1 	jp	SubChainAnsVariable
  291 D1:D480 -  -  -  -  SubFunctionChainPush:
  292 D1:D480 C3 73 AF D1 	jp	UnknownError
  293 D1:D484 -  -  -  -  SubFunctionChainAns:
  294 D1:D484 3A 3B EA D1 	ld	a, (ExprOutput)
  295 D1:D488 87 -  -  -  	add	a, a
  296 D1:D489 87 -  -  -  	add	a, a
  297 D1:D48A 87 -  -  -  	add	a, a
  298 D1:D48B 87 -  -  -  	add	a, a
  299 D1:D48C C6 D5 -  -  	add	a, 0D5h
  300 D1:D48E CD 18 AD D1 	call	InsertA															;	push hl/de
  301 D1:D492 79 -  -  -  	ld	a, c
  302 D1:D493 06 02 -  -  	ld	b, OutputInHL
  303 D1:D495 CD 44 AD D1 	call	GetFunction
  304 D1:D499 3E E1 -  -  	ld	a, 0E1h
  305 D1:D49B 21 B7 ED 52 	ld	hl, 052EDB7h
  306 D1:D49F C3 4C AC D1 	jp	InsertAHL															;	pop de \ or a \ sbc hl, de
  307 D1:D4A3 -  -  -  -  SubFunctionFunction:
  308 D1:D4A3 7B -  -  -  	ld	a, e
  309 D1:D4A4 06 02 -  -  	ld	b, OutputInHL
  310 D1:D4A6 CD 44 AD D1 	call	GetFunction
  311 D1:D4AA 79 -  -  -  	ld	a, c
  312 D1:D4AB 06 01 -  -  	ld	b, OutputInDE
  313 D1:D4AD FD CB C0 F6 	set	need_push, (iy+fExpression1)
  314 D1:D4B1 CD 44 AD D1 	call	GetFunction
  315 D1:D4B5 21 B7 ED 52 	ld	hl, 052EDB7h
  316 D1:D4B9 C3 50 AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  317 D1:D4BD -  -  -  -  
  318 D1:D4BD -  -  -  -  AddNumberXXX:
  319 D1:D4BD DD 7E FC -  	ld	a, (ix-4)
  320 D1:D4C0 B7 -  -  -  	or	a
  321 D1:D4C1 28 10 -  -  	jr	z, AddNumberNumber
  322 D1:D4C3 3D -  -  -  	dec	a
  323 D1:D4C4 28 17 -  -  	jr	z, AddNumberVariable
  324 D1:D4C6 3D -  -  -  	dec	a
  325 D1:D4C7 28 1B -  -  	jr	z, AddNumberChainPush
  326 D1:D4C9 3D -  -  -  	dec	a
  327 D1:D4CA 28 1C -  -  	jr	z, AddNumberChainAns
  328 D1:D4CC 3D -  -  -  	dec	a
  329 D1:D4CD 28 1F -  -  	jr	z, AddNumberFunction
  330 D1:D4CF C3 D2 AE D1 	jp	AddError
  331 D1:D4D3 -  -  -  -  AddNumberNumber:
  332 D1:D4D3 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  333 D1:D4D7 EB -  -  -  	ex	de, hl
  334 D1:D4D8 09 -  -  -  	add	hl, bc
  335 D1:D4D9 DD 2F F9 -  	ld	(ix-7), hl
  336 D1:D4DC C9 -  -  -  	ret
  337 D1:D4DD -  -  -  -  AddNumberVariable:
  338 D1:D4DD C5 -  -  -  	push	bc
  339 D1:D4DE E1 -  -  -  	pop	hl
  340 D1:D4DF EB -  -  -  	ex	de, hl
  341 D1:D4E0 E5 -  -  -  	push	hl
  342 D1:D4E1 C1 -  -  -  	pop	bc
  343 D1:D4E2 18 2B -  -  	jr	AddVariableNumber
  344 D1:D4E4 -  -  -  -  AddNumberChainPush:
  345 D1:D4E4 C3 73 AF D1 	jp	UnknownError
  346 D1:D4E8 -  -  -  -  AddNumberChainAns:
  347 D1:D4E8 C5 -  -  -  	push	bc
  348 D1:D4E9 D1 -  -  -  	pop	de
  349 D1:D4EA C3 A2 D5 D1 	jp	AddChainAnsNumber
  350 D1:D4EE -  -  -  -  AddNumberFunction:
  351 D1:D4EE C5 -  -  -  	push	bc
  352 D1:D4EF E1 -  -  -  	pop	hl
  353 D1:D4F0 EB -  -  -  	ex	de, hl
  354 D1:D4F1 E5 -  -  -  	push	hl
  355 D1:D4F2 C1 -  -  -  	pop	bc
  356 D1:D4F3 C3 40 D6 D1 	jp	AddFunctionNumber
  357 D1:D4F7 -  -  -  -  AddVariableXXX:
  358 D1:D4F7 DD 7E FC -  	ld	a, (ix-4)
  359 D1:D4FA B7 -  -  -  	or	a
  360 D1:D4FB 28 12 -  -  	jr	z, AddVariableNumber
  361 D1:D4FD 3D -  -  -  	dec	a
  362 D1:D4FE 28 17 -  -  	jr	z, AddVariableVariable
  363 D1:D500 3D -  -  -  	dec	a
  364 D1:D501 28 1C -  -  	jr	z, AddVariableChainPush
  365 D1:D503 3D -  -  -  	dec	a
  366 D1:D504 28 24 -  -  	jr	z, AddVariableChainAns
  367 D1:D506 3D -  -  -  	dec	a
  368 D1:D507 CA 2F D5 D1 	jp	z, AddVariableFunction
  369 D1:D50B C3 D2 AE D1 	jp	AddError
  370 D1:D50F -  -  -  -  AddVariableNumber:
  371 D1:D50F CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  372 D1:D513 C3 A2 D5 D1 	jp	AddChainAnsNumber
  373 D1:D517 -  -  -  -  AddVariableVariable:
  374 D1:D517 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  375 D1:D51B C3 E1 D5 D1 	jp	AddChainAnsVariable
  376 D1:D51F -  -  -  -  AddVariableChainPush:
  377 D1:D51F 3E E1 -  -  	ld	a, 0E1h
  378 D1:D521 CD 18 AD D1 	call	InsertA															;	pop hl
  379 D1:D525 59 -  -  -  	ld	e, c
  380 D1:D526 C3 E1 D5 D1 	jp	AddChainAnsVariable
  381 D1:D52A -  -  -  -  AddVariableChainAns:
  382 D1:D52A 59 -  -  -  	ld	e, c
  383 D1:D52B C3 E1 D5 D1 	jp	AddChainAnsVariable
  384 D1:D52F -  -  -  -  AddVariableFunction:
  385 D1:D52F 7B -  -  -  	ld	a, e
  386 D1:D530 06 02 -  -  	ld	b, OutputInHL
  387 D1:D532 CD 44 AD D1 	call	GetFunction
  388 D1:D536 59 -  -  -  	ld	e, c
  389 D1:D537 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
  390 D1:D53B 3E 19 -  -  	ld	a, 019h
  391 D1:D53D C3 18 AD D1 	jp	InsertA																;	add hl, de
  392 D1:D541 -  -  -  -  AddChainPushXXX:
  393 D1:D541 DD 7E FC -  	ld	a, (ix-4)
  394 D1:D544 B7 -  -  -  	or	a
  395 D1:D545 28 12 -  -  	jr	z, AddChainPushNumber
  396 D1:D547 3D -  -  -  	dec	a
  397 D1:D548 28 17 -  -  	jr	z, AddChainPushVariable
  398 D1:D54A 3D -  -  -  	dec	a
  399 D1:D54B 28 1C -  -  	jr	z, AddChainPushChainPush
  400 D1:D54D 3D -  -  -  	dec	a
  401 D1:D54E 28 1D -  -  	jr	z, AddChainPushChainAns
  402 D1:D550 3D -  -  -  	dec	a
  403 D1:D551 CA 82 D5 D1 	jp	z, AddChainPushFunction
  404 D1:D555 C3 D2 AE D1 	jp	AddError
  405 D1:D559 -  -  -  -  AddChainPushNumber:
  406 D1:D559 3E E1 -  -  	ld	a, 0E1h
  407 D1:D55B CD 18 AD D1 	call	InsertA															;	pop hl
  408 D1:D55F 18 41 -  -  	jr	AddChainAnsNumber
  409 D1:D561 -  -  -  -  AddChainPushVariable:
  410 D1:D561 3E E1 -  -  	ld	a, 0E1h
  411 D1:D563 CD 18 AD D1 	call	InsertA															;	pop hl
  412 D1:D567 18 78 -  -  	jr	AddChainAnsVariable
  413 D1:D569 -  -  -  -  AddChainPushChainPush:
  414 D1:D569 C3 73 AF D1 	jp	UnknownError
  415 D1:D56D -  -  -  -  AddChainPushChainAns:
  416 D1:D56D 3A 3B EA D1 	ld	a, (ExprOutput)
  417 D1:D571 B7 -  -  -  	or	a
  418 D1:D572 3E D1 -  -  	ld	a, 0D1h
  419 D1:D574 20 02 -  -  	jr	nz, +_
  420 D1:D576 3E E1 -  -  	ld	a, 0E1h
  421 D1:D578 CD 18 AD D1 _:	call	InsertA															;	pop hl/de
  422 D1:D57C 3E 19 -  -  	ld	a, 019h
  423 D1:D57E C3 18 AD D1 	jp	InsertA																;	add hl, de
  424 D1:D582 -  -  -  -  AddChainPushFunction:
  425 D1:D582 3E E1 -  -  	ld	a, 0E1h
  426 D1:D584 CD 18 AD D1 	call	InsertA															;	pop hl
  427 D1:D588 18 7F -  -  	jr	AddChainAnsFunction
  428 D1:D58A -  -  -  -  AddChainAnsXXX:
  429 D1:D58A DD 7E FC -  	ld	a, (ix-4)
  430 D1:D58D B7 -  -  -  	or	a
  431 D1:D58E 28 12 -  -  	jr	z, AddChainAnsNumber
  432 D1:D590 3D -  -  -  	dec	a
  433 D1:D591 28 4E -  -  	jr	z, AddChainAnsVariable
  434 D1:D593 3D -  -  -  	dec	a
  435 D1:D594 28 6B -  -  	jr	z, AddChainAnsChainPush
  436 D1:D596 3D -  -  -  	dec	a
  437 D1:D597 28 6C -  -  	jr	z, AddChainAnsChainAns
  438 D1:D599 3D -  -  -  	dec	a
  439 D1:D59A CA 09 D6 D1 	jp	z, AddChainAnsFunction
  440 D1:D59E C3 D2 AE D1 	jp	AddError
  441 D1:D5A2 -  -  -  -  AddChainAnsNumber:
  442 D1:D5A2 B7 -  -  -  	or	a
  443 D1:D5A3 ED 62 -  -  	sbc	hl, hl
  444 D1:D5A5 EB -  -  -  	ex	de, hl
  445 D1:D5A6 ED 52 -  -  	sbc	hl, de
  446 D1:D5A8 C8 -  -  -  	ret	z
  447 D1:D5A9 1E 06 -  -  	ld	e, 6
  448 D1:D5AB ED 52 -  -  	sbc	hl, de
  449 D1:D5AD 30 1C -  -  	jr	nc, AddHLDE
  450 D1:D5AF 19 -  -  -  	add	hl, de
  451 D1:D5B0 45 -  -  -  	ld	b, l
  452 D1:D5B1 3A 3B EA D1 	ld	a, (ExprOutput)
  453 D1:D5B5 B7 -  -  -  	or	a
  454 D1:D5B6 28 09 -  -  	jr	z, ++_
  455 D1:D5B8 3E 23 -  -  	ld	a, 023h
  456 D1:D5BA CD 18 AD D1 _:	call	InsertA															;	inc hl/de
  457 D1:D5BE 10 FA -  -  	djnz	-_
  458 D1:D5C0 C9 -  -  -  	ret
  459 D1:D5C1 3E 00 -  -  _:	ld	a, OutputIsInDE
  460 D1:D5C3 32 3C EA D1 	ld	(ExprOutput2), a
  461 D1:D5C7 3E 13 -  -  	ld	a, 013h
  462 D1:D5C9 18 EF -  -  	jr	--_
  463 D1:D5CB -  -  -  -  AddHLDE:
  464 D1:D5CB 19 -  -  -  	add	hl, de
  465 D1:D5CC 3A 3B EA D1 	ld	a, (ExprOutput)
  466 D1:D5D0 B7 -  -  -  	or	a
  467 D1:D5D1 3E 11 -  -  	ld	a, 011h
  468 D1:D5D3 20 02 -  -  	jr	nz, +_
  469 D1:D5D5 3E 21 -  -  	ld	a, 021h
  470 D1:D5D7 CD 4C AC D1 _:	call	InsertAHL															;	ld hl/de, *
  471 D1:D5DB 3E 19 -  -  	ld	a, 019h
  472 D1:D5DD C3 18 AD D1 	jp	InsertA																;	add hl, de
  473 D1:D5E1 -  -  -  -  AddChainAnsVariable:
  474 D1:D5E1 26 17 -  -  	ld	h, 017h
  475 D1:D5E3 16 03 -  -  	ld	d, 3
  476 D1:D5E5 ED 5C -  -  	mlt	de
  477 D1:D5E7 7B -  -  -  	ld	a, e
  478 D1:D5E8 2E DD -  -  	ld	l, 0DDh
  479 D1:D5EA CD 70 1D 02 	call	_SetHLUToA
  480 D1:D5EE 3A 3B EA D1 	ld	a, (ExprOutput)
  481 D1:D5F2 B7 -  -  -  	or	a
  482 D1:D5F3 20 02 -  -  	jr	nz, +_
  483 D1:D5F5 26 27 -  -  	ld	h, 027h
  484 D1:D5F7 CD 50 AC D1 _:	call	InsertHL															;	ld hl/de, (ix+*)
  485 D1:D5FB 3E 19 -  -  	ld	a, 019h
  486 D1:D5FD C3 18 AD D1 	jp	InsertA																;	add hl, de
  487 D1:D601 -  -  -  -  AddChainAnsChainPush:
  488 D1:D601 C3 73 AF D1 	jp	UnknownError
  489 D1:D605 -  -  -  -  AddChainAnsChainAns:
  490 D1:D605 C3 73 AF D1 	jp	UnknownError
  491 D1:D609 -  -  -  -  AddChainAnsFunction:
  492 D1:D609 3A 3B EA D1 	ld	a, (ExprOutput)
  493 D1:D60D 87 -  -  -  	add	a, a
  494 D1:D60E 87 -  -  -  	add	a, a
  495 D1:D60F 87 -  -  -  	add	a, a
  496 D1:D610 87 -  -  -  	add	a, a
  497 D1:D611 C6 D5 -  -  	add	a, 0D5h
  498 D1:D613 CD 18 AD D1 	call	InsertA															;	push hl/de
  499 D1:D617 7B -  -  -  	ld	a, e
  500 D1:D618 06 02 -  -  	ld	b, OutputInHL
  501 D1:D61A CD 44 AD D1 	call	GetFunction
  502 D1:D61E 3E D1 -  -  	ld	a, 0D1h
  503 D1:D620 CD 18 AD D1 	call	InsertA															;	pop de
  504 D1:D624 3E 19 -  -  	ld	a, 019h
  505 D1:D626 C3 18 AD D1 	jp	InsertA																;	add hl, de
  506 D1:D62A -  -  -  -  AddFunctionXXX:
  507 D1:D62A DD 7E FC -  	ld	a, (ix-4)
  508 D1:D62D B7 -  -  -  	or	a
  509 D1:D62E 28 10 -  -  	jr	z, AddFunctionNumber
  510 D1:D630 3D -  -  -  	dec	a
  511 D1:D631 28 18 -  -  	jr	z, AddFunctionVariable
  512 D1:D633 3D -  -  -  	dec	a
  513 D1:D634 28 20 -  -  	jr	z, AddFunctionChainPush
  514 D1:D636 3D -  -  -  	dec	a
  515 D1:D637 28 21 -  -  	jr	z, AddFunctionChainAns
  516 D1:D639 3D -  -  -  	dec	a
  517 D1:D63A 28 3F -  -  	jr	z, AddFunctionFunction
  518 D1:D63C C3 D2 AE D1 	jp	AddError
  519 D1:D640 -  -  -  -  AddFunctionNumber:
  520 D1:D640 79 -  -  -  	ld	a, c
  521 D1:D641 06 02 -  -  	ld	b, OutputInHL
  522 D1:D643 CD 44 AD D1 	call	GetFunction
  523 D1:D647 C3 A2 D5 D1 	jp	AddChainAnsNumber
  524 D1:D64B -  -  -  -  AddFunctionVariable:
  525 D1:D64B 79 -  -  -  	ld	a, c
  526 D1:D64C 06 02 -  -  	ld	b, OutputInHL
  527 D1:D64E CD 44 AD D1 	call	GetFunction
  528 D1:D652 C3 E1 D5 D1 	jp	AddChainAnsVariable
  529 D1:D656 -  -  -  -  AddFunctionChainPush:
  530 D1:D656 C3 73 AF D1 	jp	UnknownError
  531 D1:D65A -  -  -  -  AddFunctionChainAns:
  532 D1:D65A 3A 3B EA D1 	ld	a, (ExprOutput)
  533 D1:D65E 87 -  -  -  	add	a, a
  534 D1:D65F 87 -  -  -  	add	a, a
  535 D1:D660 87 -  -  -  	add	a, a
  536 D1:D661 87 -  -  -  	add	a, a
  537 D1:D662 C6 D5 -  -  	add	a, 0D5h
  538 D1:D664 CD 18 AD D1 	call	InsertA															;	push hl/de
  539 D1:D668 79 -  -  -  	ld	a, c
  540 D1:D669 06 02 -  -  	ld	b, OutputInHL
  541 D1:D66B CD 44 AD D1 	call	GetFunction
  542 D1:D66F 3E D1 -  -  	ld	a, 0D1h
  543 D1:D671 CD 18 AD D1 	call	InsertA															;	pop de
  544 D1:D675 3E 19 -  -  	ld	a, 019h
  545 D1:D677 C3 18 AD D1 	jp	InsertA																;	add hl, de
  546 D1:D67B -  -  -  -  AddFunctionFunction:
  547 D1:D67B 7B -  -  -  	ld	a, e
  548 D1:D67C 06 02 -  -  	ld	b, OutputInHL
  549 D1:D67E CD 44 AD D1 	call	GetFunction
  550 D1:D682 79 -  -  -  	ld	a, c
  551 D1:D683 06 01 -  -  	ld	b, OutputInDE
  552 D1:D685 FD CB C0 F6 	set	need_push, (iy+fExpression1)
  553 D1:D689 CD 44 AD D1 	call	GetFunction
  554 D1:D68D 3E 19 -  -  	ld	a, 019h
  555 D1:D68F C3 18 AD D1 	jp	InsertA																;	add hl, de
  556 D1:D693 -  -  -  -  	
  557 D1:D693 -  -  -  -  DivNumberXXX:
  558 D1:D693 DD 7E FC -  	ld	a, (ix-4)
  559 D1:D696 B7 -  -  -  	or	a
  560 D1:D697 28 10 -  -  	jr	z, DivNumberNumber
  561 D1:D699 3D -  -  -  	dec	a
  562 D1:D69A 28 1D -  -  	jr	z, DivNumberVariable
  563 D1:D69C 3D -  -  -  	dec	a
  564 D1:D69D 28 26 -  -  	jr	z, DivNumberChainPush
  565 D1:D69F 3D -  -  -  	dec	a
  566 D1:D6A0 28 27 -  -  	jr	z, DivNumberChainAns
  567 D1:D6A2 3D -  -  -  	dec	a
  568 D1:D6A3 28 39 -  -  	jr	z, DivNumberFunction
  569 D1:D6A5 C3 D6 AE D1 	jp	DivError
  570 D1:D6A9 -  -  -  -  DivNumberNumber:
  571 D1:D6A9 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  572 D1:D6AD C5 -  -  -  	push	bc
  573 D1:D6AE E1 -  -  -  	pop	hl
  574 D1:D6AF D5 -  -  -  	push	de
  575 D1:D6B0 C1 -  -  -  	pop	bc
  576 D1:D6B1 CD 44 01 00 	call	__idvrmu
  577 D1:D6B5 DD 1F F9 -  	ld	(ix-7), de
  578 D1:D6B8 C9 -  -  -  	ret
  579 D1:D6B9 -  -  -  -  DivNumberVariable:
  580 D1:D6B9 3E 21 -  -  	ld	a, 021h
  581 D1:D6BB C5 -  -  -  	push	bc
  582 D1:D6BC E1 -  -  -  	pop	hl
  583 D1:D6BD CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  584 D1:D6C1 C3 F1 D7 D1 	jp	DivChainAnsVariable
  585 D1:D6C5 -  -  -  -  DivNumberChainPush:
  586 D1:D6C5 C3 73 AF D1 	jp	UnknownError
  587 D1:D6C9 -  -  -  -  DivNumberChainAns:
  588 D1:D6C9 11 E5 C1 21 	ld	de, 021C1E5h
  589 D1:D6CD C5 -  -  -  	push	bc
  590 D1:D6CE E1 -  -  -  	pop	hl
  591 D1:D6CF 3A 3B EA D1 	ld	a, (ExprOutput)
  592 D1:D6D3 B7 -  -  -  	or	a
  593 D1:D6D4 20 02 -  -  	jr	nz, +_
  594 D1:D6D6 1E D5 -  -  	ld	e, 0D5h
  595 D1:D6D8 CD 9C AC D1 _:	call	InsertDEHL															;	push hl/de \ pop bc \ ld hl, *
  596 D1:D6DC 18 74 -  -  	jr	DivInsert
  597 D1:D6DE -  -  -  -  DivNumberFunction:
  598 D1:D6DE 7B -  -  -  	ld	a, e
  599 D1:D6DF C5 -  -  -  	push	bc
  600 D1:D6E0 06 00 -  -  		ld	b, OutputInBC
  601 D1:D6E2 CD 44 AD D1 		call	GetFunction
  602 D1:D6E6 3E 21 -  -  		ld	a, 021h
  603 D1:D6E8 E1 -  -  -  	pop	hl
  604 D1:D6E9 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
  605 D1:D6ED 18 63 -  -  	jr	DivInsert
  606 D1:D6EF -  -  -  -  DivVariableXXX:
  607 D1:D6EF DD 7E FC -  	ld	a, (ix-4)
  608 D1:D6F2 B7 -  -  -  	or	a
  609 D1:D6F3 28 12 -  -  	jr	z, DivVariableNumber
  610 D1:D6F5 3D -  -  -  	dec	a
  611 D1:D6F6 28 17 -  -  	jr	z, DivVariableVariable
  612 D1:D6F8 3D -  -  -  	dec	a
  613 D1:D6F9 28 2E -  -  	jr	z, DivVariableChainPush
  614 D1:D6FB 3D -  -  -  	dec	a
  615 D1:D6FC 28 2F -  -  	jr	z, DivVariableChainAns
  616 D1:D6FE 3D -  -  -  	dec	a
  617 D1:D6FF CA 47 D7 D1 	jp	z, DivVariableFunction
  618 D1:D703 C3 D6 AE D1 	jp	DivError
  619 D1:D707 -  -  -  -  DivVariableNumber:
  620 D1:D707 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  621 D1:D70B C3 C3 D7 D1 	jp	DivChainAnsNumber
  622 D1:D70F -  -  -  -  DivVariableVariable:
  623 D1:D70F 79 -  -  -  	ld	a, c
  624 D1:D710 BB -  -  -  	cp	e
  625 D1:D711 20 0E -  -  	jr	nz, +_
  626 D1:D713 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  627 D1:D717 36 00 -  -  	ld	(hl), typeNumber
  628 D1:D719 11 01 00 00 	ld	de, 1
  629 D1:D71D 23 -  -  -  	inc	hl
  630 D1:D71E ED 1F -  -  	ld	(hl), de
  631 D1:D720 C9 -  -  -  	ret
  632 D1:D721 CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  633 D1:D725 C3 F1 D7 D1 	jp	DivChainAnsVariable
  634 D1:D729 -  -  -  -  DivVariableChainPush:
  635 D1:D729 C3 73 AF D1 	jp	UnknownError
  636 D1:D72D -  -  -  -  DivVariableChainAns:
  637 D1:D72D 3A 3B EA D1 	ld	a, (ExprOutput)
  638 D1:D731 87 -  -  -  	add	a, a
  639 D1:D732 87 -  -  -  	add	a, a
  640 D1:D733 87 -  -  -  	add	a, a
  641 D1:D734 87 -  -  -  	add	a, a
  642 D1:D735 C6 D5 -  -  	add	a, 0D5h
  643 D1:D737 CD 18 AD D1 	call	InsertA															;	push hl/de
  644 D1:D73B 3E C1 -  -  	ld	a, 0C1h
  645 D1:D73D CD 18 AD D1 	call	InsertA															;	pop bc
  646 D1:D741 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  647 D1:D745 18 0B -  -  	jr	DivInsert
  648 D1:D747 -  -  -  -  DivVariableFunction:
  649 D1:D747 7B -  -  -  	ld	a, e
  650 D1:D748 06 00 -  -  	ld	b, OutputInBC
  651 D1:D74A CD 44 AD D1 	call	GetFunction
  652 D1:D74E CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  653 D1:D752 -  -  -  -  DivInsert:
  654 D1:D752 3E 00 -  -  	ld	a, OutputIsInDE
  655 D1:D754 32 3C EA D1 	ld	(ExprOutput2), a
  656 D1:D758 3E CD -  -  	ld	a, 0CDh
  657 D1:D75A 21 44 01 00 	ld	hl, __idvrmu
  658 D1:D75E C3 4C AC D1 	jp	InsertAHL															;	call __idvrmu
  659 D1:D762 -  -  -  -  DivChainPushXXX:
  660 D1:D762 DD 7E FC -  	ld	a, (ix-4)
  661 D1:D765 B7 -  -  -  	or	a
  662 D1:D766 28 12 -  -  	jr	z, DivChainPushNumber
  663 D1:D768 3D -  -  -  	dec	a
  664 D1:D769 28 17 -  -  	jr	z, DivChainPushVariable
  665 D1:D76B 3D -  -  -  	dec	a
  666 D1:D76C 28 1C -  -  	jr	z, DivChainPushChainPush
  667 D1:D76E 3D -  -  -  	dec	a
  668 D1:D76F 28 1D -  -  	jr	z, DivChainPushChainAns
  669 D1:D771 3D -  -  -  	dec	a
  670 D1:D772 CA A3 D7 D1 	jp	z, DivChainPushFunction
  671 D1:D776 C3 D6 AE D1 	jp	DivError
  672 D1:D77A -  -  -  -  DivChainPushNumber:
  673 D1:D77A 3E E1 -  -  	ld	a, 0E1h
  674 D1:D77C CD 18 AD D1 	call	InsertA															;	pop hl
  675 D1:D780 18 41 -  -  	jr	DivChainAnsNumber
  676 D1:D782 -  -  -  -  DivChainPushVariable:
  677 D1:D782 3E E1 -  -  	ld	a, 0E1h
  678 D1:D784 CD 18 AD D1 	call	InsertA															;	pop hl
  679 D1:D788 18 67 -  -  	jr	DivChainAnsVariable
  680 D1:D78A -  -  -  -  DivChainPushChainPush:
  681 D1:D78A C3 73 AF D1 	jp	UnknownError
  682 D1:D78E -  -  -  -  DivChainPushChainAns:
  683 D1:D78E 21 E5 C1 E1 	ld	hl, 0E1C1E5h
  684 D1:D792 3A 3B EA D1 	ld	a, (ExprOutput)
  685 D1:D796 87 -  -  -  	add	a, a
  686 D1:D797 87 -  -  -  	add	a, a
  687 D1:D798 87 -  -  -  	add	a, a
  688 D1:D799 87 -  -  -  	add	a, a
  689 D1:D79A C6 D5 -  -  	add	a, 0D5h
  690 D1:D79C 6F -  -  -  	ld	l, a
  691 D1:D79D CD 50 AC D1 	call	InsertHL															;	push hl/de \ pop bc \ pop hl
  692 D1:D7A1 18 AF -  -  _:	jr	DivInsert
  693 D1:D7A3 -  -  -  -  DivChainPushFunction:
  694 D1:D7A3 3E E1 -  -  	ld	a, 0E1h
  695 D1:D7A5 CD 18 AD D1 	call	InsertA															;	pop hl
  696 D1:D7A9 18 58 -  -  	jr	DivChainAnsFunction
  697 D1:D7AB -  -  -  -  DivChainAnsXXX:
  698 D1:D7AB DD 7E FC -  	ld	a, (ix-4)
  699 D1:D7AE B7 -  -  -  	or	a
  700 D1:D7AF 28 12 -  -  	jr	z, DivChainAnsNumber
  701 D1:D7B1 3D -  -  -  	dec	a
  702 D1:D7B2 28 3D -  -  	jr	z, DivChainAnsVariable
  703 D1:D7B4 3D -  -  -  	dec	a
  704 D1:D7B5 28 44 -  -  	jr	z, DivChainAnsChainPush
  705 D1:D7B7 3D -  -  -  	dec	a
  706 D1:D7B8 28 45 -  -  	jr	z, DivChainAnsChainAns
  707 D1:D7BA 3D -  -  -  	dec	a
  708 D1:D7BB CA 03 D8 D1 	jp	z, DivChainAnsFunction
  709 D1:D7BF C3 D6 AE D1 	jp	DivError
  710 D1:D7C3 -  -  -  -  DivChainAnsNumber:
  711 D1:D7C3 CD C7 AC D1 	call	MaybeChangeDEToHL
  712 D1:D7C7 3E 01 -  -  	ld	a, 001h
  713 D1:D7C9 EB -  -  -  	ex	de, hl
  714 D1:D7CA 11 00 01 00 	ld	de, 256
  715 D1:D7CE B7 -  -  -  	or	a
  716 D1:D7CF ED 52 -  -  	sbc	hl, de
  717 D1:D7D1 30 17 -  -  	jr	nc, +_
  718 D1:D7D3 19 -  -  -  	add	hl, de
  719 D1:D7D4 4D -  -  -  	ld	c, l
  720 D1:D7D5 3E 3E -  -  	ld	a, 03Eh
  721 D1:D7D7 CD 18 AD D1 	call	InsertA															;	ld a, *
  722 D1:D7DB 79 -  -  -  	ld	a, c
  723 D1:D7DC CD 18 AD D1 	call	InsertA															;	ld a, *
  724 D1:D7E0 3E CD -  -  	ld	a, 0CDh
  725 D1:D7E2 21 90 1D 02 	ld	hl, _DivHLByA
  726 D1:D7E6 C3 4C AC D1 	jp	InsertAHL															;	call _DivHLByA
  727 D1:D7EA 19 -  -  -  _:	add	hl, de
  728 D1:D7EB CD 4C AC D1 	call	InsertAHL															;	ld bc, *
  729 D1:D7EF 18 B0 -  -  _:	jr	---_
  730 D1:D7F1 -  -  -  -  DivChainAnsVariable:
  731 D1:D7F1 CD C7 AC D1 	call	MaybeChangeDEToHL
  732 D1:D7F5 CD 8A AC D1 	call	InsertIXC
  733 D1:D7F9 18 F4 -  -  	jr	-_
  734 D1:D7FB -  -  -  -  DivChainAnsChainPush:
  735 D1:D7FB C3 73 AF D1 	jp	UnknownError
  736 D1:D7FF -  -  -  -  DivChainAnsChainAns:
  737 D1:D7FF C3 73 AF D1 	jp	UnknownError
  738 D1:D803 -  -  -  -  DivChainAnsFunction:
  739 D1:D803 3A 3B EA D1 	ld	a, (ExprOutput)
  740 D1:D807 87 -  -  -  	add	a, a
  741 D1:D808 87 -  -  -  	add	a, a
  742 D1:D809 87 -  -  -  	add	a, a
  743 D1:D80A 87 -  -  -  	add	a, a
  744 D1:D80B C6 D5 -  -  	add	a, 0D5h
  745 D1:D80D CD 18 AD D1 	call	InsertA															;	push hl/de
  746 D1:D811 7B -  -  -  	ld	a, e
  747 D1:D812 06 00 -  -  	ld	b, OutputInBC
  748 D1:D814 CD 44 AD D1 	call	GetFunction
  749 D1:D818 3E E1 -  -  	ld	a, 0E1h
  750 D1:D81A CD 18 AD D1 	call	InsertA															;	pop hl
  751 D1:D81E 18 CF -  -  _:	jr	--_
  752 D1:D820 -  -  -  -  DivFunctionXXX:
  753 D1:D820 DD 7E FC -  	ld	a, (ix-4)
  754 D1:D823 B7 -  -  -  	or	a
  755 D1:D824 28 10 -  -  	jr	z, DivFunctionNumber
  756 D1:D826 3D -  -  -  	dec	a
  757 D1:D827 28 18 -  -  	jr	z, DivFunctionVariable
  758 D1:D829 3D -  -  -  	dec	a
  759 D1:D82A 28 20 -  -  	jr	z, DivFunctionChainPush
  760 D1:D82C 3D -  -  -  	dec	a
  761 D1:D82D 28 21 -  -  	jr	z, DivFunctionChainAns
  762 D1:D82F 3D -  -  -  	dec	a
  763 D1:D830 28 3B -  -  	jr	z, DivFunctionFunction
  764 D1:D832 C3 D6 AE D1 	jp	DivError
  765 D1:D836 -  -  -  -  DivFunctionNumber:
  766 D1:D836 79 -  -  -  	ld	a, c
  767 D1:D837 06 02 -  -  	ld	b, OutputInHL
  768 D1:D839 CD 44 AD D1 	call	GetFunction
  769 D1:D83D C3 C3 D7 D1 	jp	DivChainAnsNumber
  770 D1:D841 -  -  -  -  DivFunctionVariable:
  771 D1:D841 79 -  -  -  	ld	a, c
  772 D1:D842 06 02 -  -  	ld	b, OutputInHL
  773 D1:D844 CD 44 AD D1 	call	GetFunction
  774 D1:D848 C3 F1 D7 D1 	jp	DivChainAnsVariable
  775 D1:D84C -  -  -  -  DivFunctionChainPush:
  776 D1:D84C C3 73 AF D1 	jp	UnknownError
  777 D1:D850 -  -  -  -  DivFunctionChainAns:
  778 D1:D850 3A 3B EA D1 	ld	a, (ExprOutput)
  779 D1:D854 87 -  -  -  	add	a, a
  780 D1:D855 87 -  -  -  	add	a, a
  781 D1:D856 87 -  -  -  	add	a, a
  782 D1:D857 87 -  -  -  	add	a, a
  783 D1:D858 C6 D5 -  -  	add	a, 0D5h
  784 D1:D85A CD 18 AD D1 	call	InsertA															;	push hl/de
  785 D1:D85E 3E C1 -  -  	ld	a, 0C1h
  786 D1:D860 CD 18 AD D1 	call	InsertA															;	pop bc
  787 D1:D864 79 -  -  -  	ld	a, c
  788 D1:D865 06 02 -  -  	ld	b, OutputInHL
  789 D1:D867 CD 44 AD D1 	call	GetFunction
  790 D1:D86B 18 B1 -  -  	jr	-_
  791 D1:D86D -  -  -  -  DivFunctionFunction:
  792 D1:D86D 7B -  -  -  	ld	a, e
  793 D1:D86E 06 00 -  -  	ld	b, OutputInBC
  794 D1:D870 CD 44 AD D1 	call	GetFunction
  795 D1:D874 79 -  -  -  	ld	a, c
  796 D1:D875 06 02 -  -  	ld	b, OutputInHL
  797 D1:D877 CD 44 AD D1 	call	GetFunction
  798 D1:D87B 18 A1 -  -  	jr	-_
  799 D1:D87D -  -  -  -  	
  800 D1:D87D -  -  -  -  MulNumberXXX:
  801 D1:D87D DD 7E FC -  	ld	a, (ix-4)
  802 D1:D880 B7 -  -  -  	or	a
  803 D1:D881 28 10 -  -  	jr	z, MulNumberNumber
  804 D1:D883 3D -  -  -  	dec	a
  805 D1:D884 28 1A -  -  	jr	z, MulNumberVariable
  806 D1:D886 3D -  -  -  	dec	a
  807 D1:D887 28 1E -  -  	jr	z, MulNumberChainPush
  808 D1:D889 3D -  -  -  	dec	a
  809 D1:D88A 28 1F -  -  	jr	z, MulNumberChainAns
  810 D1:D88C 3D -  -  -  	dec	a
  811 D1:D88D 28 22 -  -  	jr	z, MulNumberFunction
  812 D1:D88F C3 DA AE D1 	jp	MulError
  813 D1:D893 -  -  -  -  MulNumberNumber:
  814 D1:D893 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  815 D1:D897 EB -  -  -  	ex	de, hl
  816 D1:D898 CD 54 01 00 	call	__imulu
  817 D1:D89C DD 2F F9 -  	ld	(ix-7), hl
  818 D1:D89F C9 -  -  -  	ret
  819 D1:D8A0 -  -  -  -  MulNumberVariable:
  820 D1:D8A0 C5 -  -  -  	push	bc
  821 D1:D8A1 E1 -  -  -  	pop	hl
  822 D1:D8A2 EB -  -  -  	ex	de, hl
  823 D1:D8A3 E5 -  -  -  	push	hl
  824 D1:D8A4 C1 -  -  -  	pop	bc
  825 D1:D8A5 18 2B -  -  	jr	MulVariableNumber
  826 D1:D8A7 -  -  -  -  MulNumberChainPush:
  827 D1:D8A7 C3 73 AF D1 	jp	UnknownError
  828 D1:D8AB -  -  -  -  MulNumberChainAns:
  829 D1:D8AB C5 -  -  -  	push	bc
  830 D1:D8AC D1 -  -  -  	pop	de
  831 D1:D8AD C3 6F D9 D1 	jp	MulChainAnsNumber
  832 D1:D8B1 -  -  -  -  MulNumberFunction:
  833 D1:D8B1 C5 -  -  -  	push	bc
  834 D1:D8B2 E1 -  -  -  	pop	hl
  835 D1:D8B3 EB -  -  -  	ex	de, hl
  836 D1:D8B4 E5 -  -  -  	push	hl
  837 D1:D8B5 C1 -  -  -  	pop	bc
  838 D1:D8B6 C3 42 DA D1 	jp	MulFunctionNumber
  839 D1:D8BA -  -  -  -  MulVariableXXX:
  840 D1:D8BA DD 7E FC -  	ld	a, (ix-4)
  841 D1:D8BD B7 -  -  -  	or	a
  842 D1:D8BE 28 12 -  -  	jr	z, MulVariableNumber
  843 D1:D8C0 3D -  -  -  	dec	a
  844 D1:D8C1 28 17 -  -  	jr	z, MulVariableVariable
  845 D1:D8C3 3D -  -  -  	dec	a
  846 D1:D8C4 28 1C -  -  	jr	z, MulVariableChainPush
  847 D1:D8C6 3D -  -  -  	dec	a
  848 D1:D8C7 28 24 -  -  	jr	z, MulVariableChainAns
  849 D1:D8C9 3D -  -  -  	dec	a
  850 D1:D8CA CA F2 D8 D1 	jp	z, MulVariableFunction
  851 D1:D8CE C3 DA AE D1 	jp	MulError
  852 D1:D8D2 -  -  -  -  MulVariableNumber:
  853 D1:D8D2 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  854 D1:D8D6 C3 6F D9 D1 	jp	MulChainAnsNumber
  855 D1:D8DA -  -  -  -  MulVariableVariable:
  856 D1:D8DA CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  857 D1:D8DE C3 ED D9 D1 	jp	MulChainAnsVariable
  858 D1:D8E2 -  -  -  -  MulVariableChainPush:
  859 D1:D8E2 3E E1 -  -  	ld	a, 0E1h
  860 D1:D8E4 CD 18 AD D1 	call	InsertA															;	pop hl
  861 D1:D8E8 59 -  -  -  	ld	e, c
  862 D1:D8E9 C3 ED D9 D1 	jp	MulChainAnsVariable
  863 D1:D8ED -  -  -  -  MulVariableChainAns:
  864 D1:D8ED 59 -  -  -  	ld	e, c
  865 D1:D8EE C3 ED D9 D1 	jp	MulChainAnsVariable
  866 D1:D8F2 -  -  -  -  MulVariableFunction:
  867 D1:D8F2 7B -  -  -  	ld	a, e
  868 D1:D8F3 06 02 -  -  	ld	b, OutputInHL
  869 D1:D8F5 CD 44 AD D1 	call	GetFunction
  870 D1:D8F9 CD 8A AC D1 	call	InsertIXC
  871 D1:D8FD 21 54 01 00 	ld	hl, __imulu
  872 D1:D901 C3 6E AC D1 	jp	InsertCallHL															;	call __imulu
  873 D1:D905 -  -  -  -  MulChainPushXXX:
  874 D1:D905 DD 7E FC -  	ld	a, (ix-4)
  875 D1:D908 B7 -  -  -  	or	a
  876 D1:D909 28 12 -  -  	jr	z, MulChainPushNumber
  877 D1:D90B 3D -  -  -  	dec	a
  878 D1:D90C 28 17 -  -  	jr	z, MulChainPushVariable
  879 D1:D90E 3D -  -  -  	dec	a
  880 D1:D90F 28 1E -  -  	jr	z, MulChainPushChainPush
  881 D1:D911 3D -  -  -  	dec	a
  882 D1:D912 28 1F -  -  	jr	z, MulChainPushChainAns
  883 D1:D914 3D -  -  -  	dec	a
  884 D1:D915 CA 47 D9 D1 	jp	z, MulChainPushFunction
  885 D1:D919 C3 DA AE D1 	jp	MulError
  886 D1:D91D -  -  -  -  MulChainPushNumber:
  887 D1:D91D 3E E1 -  -  	ld	a, 0E1h
  888 D1:D91F CD 18 AD D1 	call	InsertA															;	pop hl
  889 D1:D923 18 4A -  -  	jr	MulChainAnsNumber
  890 D1:D925 -  -  -  -  MulChainPushVariable:
  891 D1:D925 3E E1 -  -  	ld	a, 0E1h
  892 D1:D927 CD 18 AD D1 	call	InsertA															;	pop hl
  893 D1:D92B C3 ED D9 D1 	jp	MulChainAnsVariable
  894 D1:D92F -  -  -  -  MulChainPushChainPush:
  895 D1:D92F C3 73 AF D1 	jp	UnknownError
  896 D1:D933 -  -  -  -  MulChainPushChainAns:
  897 D1:D933 CD C7 AC D1 	call	MaybeChangeDEToHL
  898 D1:D937 3E C1 -  -  	ld	a, 0C1h
  899 D1:D939 CD 18 AD D1 	call	InsertA															;	pop bc
  900 D1:D93D 3E CD -  -  	ld	a, 0CDh
  901 D1:D93F 21 54 01 00 	ld	hl, __imulu
  902 D1:D943 C3 4C AC D1 	jp	InsertAHL															;	call __imulu
  903 D1:D947 -  -  -  -  MulChainPushFunction:
  904 D1:D947 3E E1 -  -  	ld	a, 0E1h
  905 D1:D949 CD 18 AD D1 	call	InsertA															;	pop hl
  906 D1:D94D C3 07 DA D1 	jp	MulChainAnsFunction
  907 D1:D951 -  -  -  -  MulChainAnsXXX:
  908 D1:D951 DD 7E FC -  	ld	a, (ix-4)
  909 D1:D954 B7 -  -  -  	or	a, a
  910 D1:D955 28 18 -  -  	jr	z, MulChainAnsNumber
  911 D1:D957 3D -  -  -  	dec	a
  912 D1:D958 CA ED D9 D1 	jp	z, MulChainAnsVariable
  913 D1:D95C 3D -  -  -  	dec	a
  914 D1:D95D CA FF D9 D1 	jp	z, MulChainAnsChainPush
  915 D1:D961 3D -  -  -  	dec	a
  916 D1:D962 CA 03 DA D1 	jp	z, MulChainAnsChainAns
  917 D1:D966 3D -  -  -  	dec	a
  918 D1:D967 CA 07 DA D1 	jp	z, MulChainAnsFunction
  919 D1:D96B C3 DA AE D1 	jp	MulError
  920 D1:D96F -  -  -  -  MulChainAnsNumber:
  921 D1:D96F CD 4C 1D 02 	call	_ChkDEIs0
  922 D1:D973 20 08 -  -  	jr	nz, +_
  923 D1:D975 21 B7 ED 62 	ld	hl, 062EDB7h
  924 D1:D979 C3 50 AC D1 	jp	InsertHL
  925 D1:D97D D5 -  -  -  _:	push	de
  926 D1:D97E E1 -  -  -  	pop	hl
  927 D1:D97F 06 00 -  -  	ld	b, 0
  928 D1:D981 3E 1A -  -  	ld	a, 26
  929 D1:D983 3D -  -  -  _:	dec	a
  930 D1:D984 29 -  -  -  	add	hl, hl
  931 D1:D985 30 FC -  -  	jr	nc, -_
  932 D1:D987 88 -  -  -  _:	adc	a, b
  933 D1:D988 ED 6A -  -  	adc	hl, hl
  934 D1:D98A 20 FB -  -  	jr	nz, -_
  935 D1:D98C CB 10 -  -  	rl	b
  936 D1:D98E 20 02 -  -  	jr	nz, +_
  937 D1:D990 D6 03 -  -  	sub	a, 3
  938 D1:D992 FE 0A -  -  _:	cp	a, 10
  939 D1:D994 38 28 -  -  	jr	c, ++_
  940 D1:D996 CD C7 AC D1 	call	MaybeChangeDEToHL
  941 D1:D99A 21 00 FF FF 	ld	hl, -256
  942 D1:D99E 19 -  -  -  	add	hl, de
  943 D1:D99F 38 0E -  -  	jr	c, +_
  944 D1:D9A1 21 3E 00 CD 	ld	hl, 0CD003Eh
  945 D1:D9A5 63 -  -  -  	ld	h, e
  946 D1:D9A6 11 50 01 00 	ld	de, __imul_b
  947 D1:D9AA EB -  -  -  	ex	de, hl
  948 D1:D9AB C3 9C AC D1 	jp	InsertDEHL
  949 D1:D9AF 3E 01 -  -  _:	ld	a, 001h
  950 D1:D9B1 EB -  -  -  	ex	de, hl
  951 D1:D9B2 CD 4C AC D1 	call	InsertAHL
  952 D1:D9B6 21 54 01 00 	ld	hl, __imulu
  953 D1:D9BA C3 6E AC D1 	jp	InsertCallHL
  954 D1:D9BE 10 15 -  -  _:	djnz	+_
  955 D1:D9C0 3A 3B EA D1 	ld	a, (ExprOutput)
  956 D1:D9C4 0F -  -  -  	rrca
  957 D1:D9C5 3F -  -  -  	ccf
  958 D1:D9C6 9F -  -  -  	sbc	a, a
  959 D1:D9C7 E6 F0 -  -  	and	a, 0D5h - 0E5h
  960 D1:D9C9 C6 E5 -  -  	add	a, 0E5h
  961 D1:D9CB CD 18 AD D1 	call	InsertA
  962 D1:D9CF EE 34 -  -  	xor	a, 0E5h ^ 0D1h 										; == 0D5h ^ 0E1h
  963 D1:D9D1 CD 18 AD D1 	call	InsertA
  964 D1:D9D5 EB -  -  -  _:	ex	de, hl
  965 D1:D9D6 37 -  -  -  	scf
  966 D1:D9D7 ED 6A -  -  _:	adc	hl, hl
  967 D1:D9D9 30 FC -  -  	jr	nc, -_
  968 D1:D9DB B7 -  -  -  _:	or	a, a
  969 D1:D9DC ED 6A -  -  	adc	hl, hl
  970 D1:D9DE C8 -  -  -  	ret	z
  971 D1:D9DF 3E 29 -  -  	ld	a, 029h
  972 D1:D9E1 CD 18 AD D1 	call	InsertA
  973 D1:D9E5 3E 19 -  -  	ld	a, 019h
  974 D1:D9E7 DC 18 AD D1 	call	c, InsertA
  975 D1:D9EB 18 EE -  -  	jr	-_
  976 D1:D9ED -  -  -  -  MulChainAnsVariable:
  977 D1:D9ED CD C7 AC D1 	call	MaybeChangeDEToHL
  978 D1:D9F1 CD 8A AC D1 	call	InsertIXC															;	ld bc, (ix+*)
  979 D1:D9F5 3E CD -  -  	ld	a, 0CDh
  980 D1:D9F7 21 54 01 00 	ld	hl, __imulu
  981 D1:D9FB C3 4C AC D1 	jp	InsertAHL															;	call __imulu
  982 D1:D9FF -  -  -  -  MulChainAnsChainPush:
  983 D1:D9FF C3 73 AF D1 	jp	UnknownError
  984 D1:DA03 -  -  -  -  MulChainAnsChainAns:
  985 D1:DA03 C3 73 AF D1 	jp	UnknownError
  986 D1:DA07 -  -  -  -  MulChainAnsFunction:
  987 D1:DA07 3A 3B EA D1 	ld	a, (ExprOutput)
  988 D1:DA0B 87 -  -  -  	add	a, a
  989 D1:DA0C 87 -  -  -  	add	a, a
  990 D1:DA0D 87 -  -  -  	add	a, a
  991 D1:DA0E 87 -  -  -  	add	a, a
  992 D1:DA0F C6 D5 -  -  	add	a, 0D5h
  993 D1:DA11 CD 18 AD D1 	call	InsertA															;	push hl/de
  994 D1:DA15 7B -  -  -  	ld	a, e
  995 D1:DA16 06 00 -  -  	ld	b, OutputInBC
  996 D1:DA18 CD 44 AD D1 	call	GetFunction
  997 D1:DA1C 3E E1 -  -  	ld	a, 0E1h
  998 D1:DA1E CD 18 AD D1 	call	InsertA															;	pop hl
  999 D1:DA22 3E CD -  -  	ld	a, 0CDh
 1000 D1:DA24 21 54 01 00 	ld	hl, __imulu
 1001 D1:DA28 C3 4C AC D1 	jp	InsertAHL															;	call __imulu
 1002 D1:DA2C -  -  -  -  MulFunctionXXX:
 1003 D1:DA2C DD 7E FC -  	ld	a, (ix-4)
 1004 D1:DA2F B7 -  -  -  	or	a
 1005 D1:DA30 28 10 -  -  	jr	z, MulFunctionNumber
 1006 D1:DA32 3D -  -  -  	dec	a
 1007 D1:DA33 28 18 -  -  	jr	z, MulFunctionVariable
 1008 D1:DA35 3D -  -  -  	dec	a
 1009 D1:DA36 28 20 -  -  	jr	z, MulFunctionChainPush
 1010 D1:DA38 3D -  -  -  	dec	a
 1011 D1:DA39 28 21 -  -  	jr	z, MulFunctionChainAns
 1012 D1:DA3B 3D -  -  -  	dec	a
 1013 D1:DA3C 28 21 -  -  	jr	z, MulFunctionFunction
 1014 D1:DA3E C3 DA AE D1 	jp	MulError
 1015 D1:DA42 -  -  -  -  MulFunctionNumber:
 1016 D1:DA42 79 -  -  -  	ld	a, c
 1017 D1:DA43 06 02 -  -  	ld	b, OutputInHL
 1018 D1:DA45 CD 44 AD D1 	call	GetFunction
 1019 D1:DA49 C3 6F D9 D1 	jp	MulChainAnsNumber
 1020 D1:DA4D -  -  -  -  MulFunctionVariable:
 1021 D1:DA4D 79 -  -  -  	ld	a, c
 1022 D1:DA4E 06 02 -  -  	ld	b, OutputInHL
 1023 D1:DA50 CD 44 AD D1 	call	GetFunction
 1024 D1:DA54 C3 ED D9 D1 	jp	MulChainAnsVariable
 1025 D1:DA58 -  -  -  -  MulFunctionChainPush:
 1026 D1:DA58 C3 73 AF D1 	jp	UnknownError
 1027 D1:DA5C -  -  -  -  MulFunctionChainAns:
 1028 D1:DA5C 59 -  -  -  	ld	e, c
 1029 D1:DA5D 18 A8 -  -  	jr	MulChainAnsFunction
 1030 D1:DA5F -  -  -  -  MulFunctionFunction:
 1031 D1:DA5F 7B -  -  -  	ld	a, e
 1032 D1:DA60 06 00 -  -  	ld	b, OutputInBC
 1033 D1:DA62 CD 44 AD D1 	call	GetFunction
 1034 D1:DA66 79 -  -  -  	ld	a, c
 1035 D1:DA67 06 02 -  -  	ld	b, OutputInHL
 1036 D1:DA69 CD 44 AD D1 	call	GetFunction
 1037 D1:DA6D 3E CD -  -  	ld	a, 0CDh
 1038 D1:DA6F 21 54 01 00 	ld	hl, __imulu
 1039 D1:DA73 C3 4C AC D1 	jp	InsertAHL															;	call __imulu
 1040 D1:DA77 -  -  -  -  
 1041 D1:DA77 -  -  -  -  SwapLEToGE:
 1042 D1:DA77 3E 6E -  -  	ld	a, tGE
 1043 D1:DA79 18 02 -  -  	jr	$+4	
 1044 D1:DA7B -  -  -  -  SwapLTToGT:
 1045 D1:DA7B 3E 6C -  -  	ld	a, tGT
 1046 D1:DA7D C5 -  -  -  	push	bc
 1047 D1:DA7E E1 -  -  -  	pop	hl
 1048 D1:DA7F DD 4E FC -  	ld	c, (ix-4)
 1049 D1:DA82 DD 46 F8 -  	ld	b, (ix-8)
 1050 D1:DA85 DD 70 FC -  	ld	(ix-4), b
 1051 D1:DA88 DD 71 F8 -  	ld	(ix-8), c
 1052 D1:DA8B EB -  -  -  	ex	de, hl
 1053 D1:DA8C E5 -  -  -  	push	hl
 1054 D1:DA8D C1 -  -  -  	pop	bc
 1055 D1:DA8E C9 -  -  -  	ret
 1056 D1:DA8F -  -  -  -  
 1057 D1:DA8F -  -  -  -  GLETNumberXXX:
 1058 D1:DA8F DD 7E FC -  	ld	a, (ix-4)
 1059 D1:DA92 B7 -  -  -  	or	a
 1060 D1:DA93 28 10 -  -  	jr	z, GLETNumberNumber
 1061 D1:DA95 3D -  -  -  	dec	a
 1062 D1:DA96 28 25 -  -  	jr	z, GLETNumberVariable
 1063 D1:DA98 3D -  -  -  	dec	a
 1064 D1:DA99 28 2E -  -  	jr	z, GLETNumberChainPush
 1065 D1:DA9B 3D -  -  -  	dec	a
 1066 D1:DA9C 28 2F -  -  	jr	z, GLETNumberChainAns
 1067 D1:DA9E 3D -  -  -  	dec	a
 1068 D1:DA9F 28 3A -  -  	jr	z, GLETNumberFunction
 1069 D1:DAA1 C3 DE AE D1 	jp	GLETError
 1070 D1:DAA5 -  -  -  -  GLETNumberNumber:
 1071 D1:DAA5 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1072 D1:DAA9 C5 -  -  -  	push	bc
 1073 D1:DAAA E1 -  -  -  	pop	hl
 1074 D1:DAAB 3A 1F EA D0 	ld	a, (tempToken)
 1075 D1:DAAF FE 6E -  -  	cp	tGE
 1076 D1:DAB1 28 01 -  -  	jr	z, +_
 1077 D1:DAB3 37 -  -  -  	scf
 1078 D1:DAB4 ED 52 -  -  _:	sbc	hl, de
 1079 D1:DAB6 ED 62 -  -  	sbc	hl, hl
 1080 D1:DAB8 23 -  -  -  	inc	hl
 1081 D1:DAB9 DD 2F F9 -  	ld	(ix-7), hl
 1082 D1:DABC C9 -  -  -  	ret
 1083 D1:DABD -  -  -  -  GLETNumberVariable:
 1084 D1:DABD 3E 21 -  -  	ld	a, 021h
 1085 D1:DABF C5 -  -  -  	push	bc
 1086 D1:DAC0 E1 -  -  -  	pop	hl
 1087 D1:DAC1 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
 1088 D1:DAC5 C3 D9 DB D1 	jp	GLETChainAnsVariable
 1089 D1:DAC9 -  -  -  -  GLETNumberChainPush:
 1090 D1:DAC9 C3 73 AF D1 	jp	UnknownError
 1091 D1:DACD -  -  -  -  GLETNumberChainAns:
 1092 D1:DACD CD BD AC D1 	call	MaybeChangeHLToDE
 1093 D1:DAD1 3E 21 -  -  	ld	a, 021h
 1094 D1:DAD3 C5 -  -  -  	push	bc
 1095 D1:DAD4 E1 -  -  -  	pop	hl
 1096 D1:DAD5 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
 1097 D1:DAD9 18 6F -  -  	jr	GLETInsert
 1098 D1:DADB -  -  -  -  GLETNumberFunction:
 1099 D1:DADB 7B -  -  -  	ld	a, e
 1100 D1:DADC C5 -  -  -  	push	bc
 1101 D1:DADD 06 01 -  -  		ld	b, OutputInDE
 1102 D1:DADF CD 44 AD D1 		call	GetFunction
 1103 D1:DAE3 3E 21 -  -  		ld	a, 021h
 1104 D1:DAE5 E1 -  -  -  	pop	hl
 1105 D1:DAE6 CD 4C AC D1 	call	InsertAHL															;	ld hl, *
 1106 D1:DAEA 18 5E -  -  	jr	GLETInsert
 1107 D1:DAEC -  -  -  -  GLETVariableXXX:
 1108 D1:DAEC DD 7E FC -  	ld	a, (ix-4)
 1109 D1:DAEF B7 -  -  -  	or	a
 1110 D1:DAF0 28 12 -  -  	jr	z, GLETVariableNumber
 1111 D1:DAF2 3D -  -  -  	dec	a
 1112 D1:DAF3 28 17 -  -  	jr	z, GLETVariableVariable
 1113 D1:DAF5 3D -  -  -  	dec	a
 1114 D1:DAF6 28 39 -  -  	jr	z, GLETVariableChainPush
 1115 D1:DAF8 3D -  -  -  	dec	a
 1116 D1:DAF9 28 3A -  -  	jr	z, GLETVariableChainAns
 1117 D1:DAFB 3D -  -  -  	dec	a
 1118 D1:DAFC CA 3F DB D1 	jp	z, GLETVariableFunction
 1119 D1:DB00 C3 DE AE D1 	jp	GLETError
 1120 D1:DB04 -  -  -  -  GLETVariableNumber:
 1121 D1:DB04 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1122 D1:DB08 C3 BF DB D1 	jp	GLETChainAnsNumber
 1123 D1:DB0C -  -  -  -  GLETVariableVariable:
 1124 D1:DB0C 79 -  -  -  	ld	a, c
 1125 D1:DB0D BB -  -  -  	cp	e
 1126 D1:DB0E 20 19 -  -  	jr	nz, ++_
 1127 D1:DB10 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1128 D1:DB14 3A 1F EA D0 	ld	a, (tempToken)
 1129 D1:DB18 D6 6C -  -  	sub	tGT
 1130 D1:DB1A 28 02 -  -  	jr	z, +_
 1131 D1:DB1C 3E 01 -  -  	ld	a, 1
 1132 D1:DB1E 11 00 00 00 _:	ld	de, 0
 1133 D1:DB22 5F -  -  -  	ld	e, a
 1134 D1:DB23 36 00 -  -  	ld	(hl), typeNumber
 1135 D1:DB25 23 -  -  -  	inc	hl
 1136 D1:DB26 ED 1F -  -  	ld	(hl), de
 1137 D1:DB28 C9 -  -  -  	ret
 1138 D1:DB29 CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1139 D1:DB2D C3 D9 DB D1 	jp	GLETChainAnsVariable
 1140 D1:DB31 -  -  -  -  GLETVariableChainPush:
 1141 D1:DB31 C3 73 AF D1 	jp	UnknownError
 1142 D1:DB35 -  -  -  -  GLETVariableChainAns:
 1143 D1:DB35 CD BD AC D1 	call	MaybeChangeHLToDE
 1144 D1:DB39 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1145 D1:DB3D 18 0B -  -  	jr	GLETInsert
 1146 D1:DB3F -  -  -  -  GLETVariableFunction:
 1147 D1:DB3F 7B -  -  -  	ld	a, e
 1148 D1:DB40 06 01 -  -  	ld	b, OutputInDE
 1149 D1:DB42 CD 44 AD D1 	call	GetFunction
 1150 D1:DB46 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1151 D1:DB4A -  -  -  -  GLETInsert:
 1152 D1:DB4A 11 37 ED 52 	ld	de, 052ED37h
 1153 D1:DB4E 21 ED 62 23 	ld	hl, 02362EDh
 1154 D1:DB52 3A 1F EA D0 	ld	a, (tempToken)
 1155 D1:DB56 FE 6C -  -  	cp	tGT
 1156 D1:DB58 28 02 -  -  	jr	z, +_
 1157 D1:DB5A 1E B7 -  -  	ld	e, 0B7h
 1158 D1:DB5C C3 9C AC D1 _:	jp	InsertDEHL															;	scf/or a \ sbc hl, de \ sbc hl, hl \ inc hl
 1159 D1:DB60 -  -  -  -  GLETChainPushXXX:
 1160 D1:DB60 DD 7E FC -  	ld	a, (ix-4)
 1161 D1:DB63 B7 -  -  -  	or	a
 1162 D1:DB64 28 12 -  -  	jr	z, GLETChainPushNumber
 1163 D1:DB66 3D -  -  -  	dec	a
 1164 D1:DB67 28 17 -  -  	jr	z, GLETChainPushVariable
 1165 D1:DB69 3D -  -  -  	dec	a
 1166 D1:DB6A 28 1C -  -  	jr	z, GLETChainPushChainPush
 1167 D1:DB6C 3D -  -  -  	dec	a
 1168 D1:DB6D 28 1D -  -  	jr	z, GLETChainPushChainAns
 1169 D1:DB6F 3D -  -  -  	dec	a
 1170 D1:DB70 CA 98 DB D1 	jp	z, GLETChainPushFunction
 1171 D1:DB74 C3 DE AE D1 	jp	GLETError
 1172 D1:DB78 -  -  -  -  GLETChainPushNumber:
 1173 D1:DB78 3E E1 -  -  	ld	a, 0E1h
 1174 D1:DB7A CD 18 AD D1 	call	InsertA															;	pop hl
 1175 D1:DB7E 18 3F -  -  	jr	GLETChainAnsNumber
 1176 D1:DB80 -  -  -  -  GLETChainPushVariable:
 1177 D1:DB80 3E E1 -  -  	ld	a, 0E1h
 1178 D1:DB82 CD 18 AD D1 	call	InsertA															;	pop hl
 1179 D1:DB86 18 51 -  -  	jr	GLETChainAnsVariable
 1180 D1:DB88 -  -  -  -  GLETChainPushChainPush:
 1181 D1:DB88 C3 73 AF D1 	jp	UnknownError
 1182 D1:DB8C -  -  -  -  GLETChainPushChainAns:
 1183 D1:DB8C CD BD AC D1 	call	MaybeChangeHLToDE
 1184 D1:DB90 3E E1 -  -  	ld	a, 0E1h
 1185 D1:DB92 CD 18 AD D1 	call	InsertA															;	pop hl
 1186 D1:DB96 18 B2 -  -  	jr	GLETInsert
 1187 D1:DB98 -  -  -  -  GLETChainPushFunction:
 1188 D1:DB98 7B -  -  -  	ld	a, e
 1189 D1:DB99 06 01 -  -  	ld	b, OutputInDE
 1190 D1:DB9B CD 44 AD D1 	call	GetFunction
 1191 D1:DB9F 3E E1 -  -  	ld	a, 0E1h
 1192 D1:DBA1 CD 18 AD D1 	call	InsertA															;	pop hl
 1193 D1:DBA5 18 A3 -  -  _:	jr	GLETInsert
 1194 D1:DBA7 -  -  -  -  GLETChainAnsXXX:
 1195 D1:DBA7 DD 7E FC -  	ld	a, (ix-4)
 1196 D1:DBAA B7 -  -  -  	or	a
 1197 D1:DBAB 28 12 -  -  	jr	z, GLETChainAnsNumber
 1198 D1:DBAD 3D -  -  -  	dec	a
 1199 D1:DBAE 28 29 -  -  	jr	z, GLETChainAnsVariable
 1200 D1:DBB0 3D -  -  -  	dec	a
 1201 D1:DBB1 28 30 -  -  	jr	z, GLETChainAnsChainPush
 1202 D1:DBB3 3D -  -  -  	dec	a
 1203 D1:DBB4 28 31 -  -  	jr	z, GLETChainAnsChainAns
 1204 D1:DBB6 3D -  -  -  	dec	a
 1205 D1:DBB7 CA EB DB D1 	jp	z, GLETChainAnsFunction
 1206 D1:DBBB C3 DE AE D1 	jp	GLETError
 1207 D1:DBBF -  -  -  -  GLETChainAnsNumber:
 1208 D1:DBBF CD C7 AC D1 	call	MaybeChangeDEToHL
 1209 D1:DBC3 21 1F EA D0 	ld	hl, tempToken
 1210 D1:DBC7 7E -  -  -  	ld	a, (hl)
 1211 D1:DBC8 FE 6C -  -  	cp	tGT
 1212 D1:DBCA 20 04 -  -  	jr	nz, +_
 1213 D1:DBCC 13 -  -  -  	inc	de
 1214 D1:DBCD 3E 6E -  -  	ld	a, tGE
 1215 D1:DBCF 77 -  -  -  	ld	(hl), a
 1216 D1:DBD0 3E 11 -  -  _:	ld	a, 011h
 1217 D1:DBD2 EB -  -  -  	ex	de, hl
 1218 D1:DBD3 CD 4C AC D1 	call	InsertAHL															;	ld de, *
 1219 D1:DBD7 18 CC -  -  	jr	--_
 1220 D1:DBD9 -  -  -  -  GLETChainAnsVariable:
 1221 D1:DBD9 CD C7 AC D1 	call	MaybeChangeDEToHL
 1222 D1:DBDD CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1223 D1:DBE1 18 C2 -  -  	jr	--_
 1224 D1:DBE3 -  -  -  -  GLETChainAnsChainPush:
 1225 D1:DBE3 C3 73 AF D1 	jp	UnknownError
 1226 D1:DBE7 -  -  -  -  GLETChainAnsChainAns:
 1227 D1:DBE7 C3 73 AF D1 	jp	UnknownError
 1228 D1:DBEB -  -  -  -  GLETChainAnsFunction:
 1229 D1:DBEB 3A 3B EA D1 	ld	a, (ExprOutput)
 1230 D1:DBEF 87 -  -  -  	add	a, a
 1231 D1:DBF0 87 -  -  -  	add	a, a
 1232 D1:DBF1 87 -  -  -  	add	a, a
 1233 D1:DBF2 87 -  -  -  	add	a, a
 1234 D1:DBF3 C6 D5 -  -  	add	a, 0D5h
 1235 D1:DBF5 CD 18 AD D1 	call	InsertA															;	push hl/de
 1236 D1:DBF9 7B -  -  -  	ld	a, e
 1237 D1:DBFA 06 01 -  -  	ld	b, OutputInDE
 1238 D1:DBFC CD 44 AD D1 	call	GetFunction
 1239 D1:DC00 3E E1 -  -  	ld	a, 0E1h
 1240 D1:DC02 CD 18 AD D1 	call	InsertA															;	pop hl
 1241 D1:DC06 18 C8 -  -  _:	jr	--_
 1242 D1:DC08 -  -  -  -  GLETFunctionXXX:
 1243 D1:DC08 DD 7E FC -  	ld	a, (ix-4)
 1244 D1:DC0B B7 -  -  -  	or	a
 1245 D1:DC0C 28 10 -  -  	jr	z, GLETFunctionNumber
 1246 D1:DC0E 3D -  -  -  	dec	a
 1247 D1:DC0F 28 18 -  -  	jr	z, GLETFunctionVariable
 1248 D1:DC11 3D -  -  -  	dec	a
 1249 D1:DC12 28 20 -  -  	jr	z, GLETFunctionChainPush
 1250 D1:DC14 3D -  -  -  	dec	a
 1251 D1:DC15 28 21 -  -  	jr	z, GLETFunctionChainAns
 1252 D1:DC17 3D -  -  -  	dec	a
 1253 D1:DC18 28 3B -  -  	jr	z, GLETFunctionFunction
 1254 D1:DC1A C3 DE AE D1 	jp	GLETError
 1255 D1:DC1E -  -  -  -  GLETFunctionNumber:
 1256 D1:DC1E 79 -  -  -  	ld	a, c
 1257 D1:DC1F 06 02 -  -  	ld	b, OutputInHL
 1258 D1:DC21 CD 44 AD D1 	call	GetFunction
 1259 D1:DC25 C3 BF DB D1 	jp	GLETChainAnsNumber
 1260 D1:DC29 -  -  -  -  GLETFunctionVariable:
 1261 D1:DC29 79 -  -  -  	ld	a, c
 1262 D1:DC2A 06 02 -  -  	ld	b, OutputInHL
 1263 D1:DC2C CD 44 AD D1 	call	GetFunction
 1264 D1:DC30 C3 D9 DB D1 	jp	GLETChainAnsVariable
 1265 D1:DC34 -  -  -  -  GLETFunctionChainPush:
 1266 D1:DC34 C3 73 AF D1 	jp	UnknownError
 1267 D1:DC38 -  -  -  -  GLETFunctionChainAns:
 1268 D1:DC38 3A 3B EA D1 	ld	a, (ExprOutput)
 1269 D1:DC3C 87 -  -  -  	add	a, a
 1270 D1:DC3D 87 -  -  -  	add	a, a
 1271 D1:DC3E 87 -  -  -  	add	a, a
 1272 D1:DC3F 87 -  -  -  	add	a, a
 1273 D1:DC40 C6 D5 -  -  	add	a, 0D5h
 1274 D1:DC42 CD 18 AD D1 	call	InsertA															;	push hl/de
 1275 D1:DC46 79 -  -  -  	ld	a, c
 1276 D1:DC47 06 02 -  -  	ld	b, OutputInHL
 1277 D1:DC49 CD 44 AD D1 	call	GetFunction
 1278 D1:DC4D 3E D1 -  -  	ld	a, 0D1h
 1279 D1:DC4F CD 18 AD D1 	call	InsertA															;	pop de
 1280 D1:DC53 18 B1 -  -  	jr	-_
 1281 D1:DC55 -  -  -  -  GLETFunctionFunction:
 1282 D1:DC55 7B -  -  -  	ld	a, e
 1283 D1:DC56 06 01 -  -  	ld	b, OutputInDE
 1284 D1:DC58 CD 44 AD D1 	call	GetFunction
 1285 D1:DC5C 79 -  -  -  	ld	a, c
 1286 D1:DC5D 06 02 -  -  	ld	b, OutputInHL
 1287 D1:DC5F FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1288 D1:DC63 CD 44 AD D1 	call	GetFunction
 1289 D1:DC67 18 9D -  -  	jr	-_
 1290 D1:DC69 -  -  -  -  	
 1291 D1:DC69 -  -  -  -  NEQNumberXXX:
 1292 D1:DC69 DD 7E FC -  	ld	a, (ix-4)
 1293 D1:DC6C B7 -  -  -  	or	a
 1294 D1:DC6D 28 10 -  -  	jr	z, NEQNumberNumber
 1295 D1:DC6F 3D -  -  -  	dec	a
 1296 D1:DC70 28 33 -  -  	jr	z, NEQNumberVariable
 1297 D1:DC72 3D -  -  -  	dec	a
 1298 D1:DC73 28 37 -  -  	jr	z, NEQNumberChainPush
 1299 D1:DC75 3D -  -  -  	dec	a
 1300 D1:DC76 28 38 -  -  	jr	z, NEQNumberChainAns
 1301 D1:DC78 3D -  -  -  	dec	a
 1302 D1:DC79 28 3B -  -  	jr	z, NEQNumberFunction
 1303 D1:DC7B C3 F8 AE D1 	jp	NEQError
 1304 D1:DC7F -  -  -  -  NEQNumberNumber:
 1305 D1:DC7F FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1306 D1:DC83 EB -  -  -  	ex	de, hl
 1307 D1:DC84 3A 1F EA D0 	ld	a, (tempToken)
 1308 D1:DC88 FE 6A -  -  	cp	tEq
 1309 D1:DC8A 28 0C -  -  	jr	z, +_
 1310 D1:DC8C B7 -  -  -  	or	a
 1311 D1:DC8D ED 42 -  -  	sbc	hl, bc
 1312 D1:DC8F 21 00 00 00 	ld	hl, 0
 1313 D1:DC93 28 01 -  -  	jr	z, $+3
 1314 D1:DC95 23 -  -  -  	inc	hl
 1315 D1:DC96 18 09 -  -  	jr	++_
 1316 D1:DC98 ED 42 -  -  _:	sbc	hl, bc
 1317 D1:DC9A 21 00 00 00 	ld	hl, 0
 1318 D1:DC9E 20 01 -  -  	jr	nz, $+3
 1319 D1:DCA0 23 -  -  -  	inc	hl
 1320 D1:DCA1 DD 2F F9 -  _:	ld	(ix-7), hl
 1321 D1:DCA4 C9 -  -  -  	ret
 1322 D1:DCA5 -  -  -  -  NEQNumberVariable:
 1323 D1:DCA5 C5 -  -  -  	push	bc
 1324 D1:DCA6 E1 -  -  -  	pop	hl
 1325 D1:DCA7 EB -  -  -  	ex	de, hl
 1326 D1:DCA8 E5 -  -  -  	push	hl
 1327 D1:DCA9 C1 -  -  -  	pop	bc
 1328 D1:DCAA 18 2B -  -  	jr	NEQVariableNumber
 1329 D1:DCAC -  -  -  -  NEQNumberChainPush:
 1330 D1:DCAC C3 73 AF D1 	jp	UnknownError
 1331 D1:DCB0 -  -  -  -  NEQNumberChainAns:
 1332 D1:DCB0 C5 -  -  -  	push	bc
 1333 D1:DCB1 D1 -  -  -  	pop	de
 1334 D1:DCB2 C3 9C DD D1 	jp	NEQChainAnsNumber
 1335 D1:DCB6 -  -  -  -  NEQNumberFunction:
 1336 D1:DCB6 C5 -  -  -  	push	bc
 1337 D1:DCB7 E1 -  -  -  	pop	hl
 1338 D1:DCB8 EB -  -  -  	ex	de, hl
 1339 D1:DCB9 E5 -  -  -  	push	hl
 1340 D1:DCBA C1 -  -  -  	pop	bc
 1341 D1:DCBB C3 19 DE D1 	jp	NEQFunctionNumber
 1342 D1:DCBF -  -  -  -  NEQVariableXXX:
 1343 D1:DCBF DD 7E FC -  	ld	a, (ix-4)
 1344 D1:DCC2 B7 -  -  -  	or	a
 1345 D1:DCC3 28 12 -  -  	jr	z, NEQVariableNumber
 1346 D1:DCC5 3D -  -  -  	dec	a
 1347 D1:DCC6 28 17 -  -  	jr	z, NEQVariableVariable
 1348 D1:DCC8 3D -  -  -  	dec	a
 1349 D1:DCC9 28 39 -  -  	jr	z, NEQVariableChainPush
 1350 D1:DCCB 3D -  -  -  	dec	a
 1351 D1:DCCC 28 3A -  -  	jr	z, NEQVariableChainAns
 1352 D1:DCCE 3D -  -  -  	dec	a
 1353 D1:DCCF CA 0D DD D1 	jp	z, NEQVariableFunction
 1354 D1:DCD3 C3 F8 AE D1 	jp	NEQError
 1355 D1:DCD7 -  -  -  -  NEQVariableNumber:
 1356 D1:DCD7 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1357 D1:DCDB C3 9C DD D1 	jp	NEQChainAnsNumber
 1358 D1:DCDF -  -  -  -  NEQVariableVariable:
 1359 D1:DCDF 79 -  -  -  	ld	a, c
 1360 D1:DCE0 BB -  -  -  	cp	e
 1361 D1:DCE1 20 19 -  -  	jr	nz, ++_
 1362 D1:DCE3 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1363 D1:DCE7 3A 1F EA D0 	ld	a, (tempToken)
 1364 D1:DCEB D6 6F -  -  	sub	tNE
 1365 D1:DCED 28 02 -  -  	jr	z, +_
 1366 D1:DCEF 3E 01 -  -  	ld	a, 1
 1367 D1:DCF1 11 00 00 00 _:	ld	de, 0
 1368 D1:DCF5 5F -  -  -  	ld	e, a
 1369 D1:DCF6 36 00 -  -  	ld	(hl), typeNumber
 1370 D1:DCF8 23 -  -  -  	inc	hl
 1371 D1:DCF9 ED 1F -  -  	ld	(hl), de
 1372 D1:DCFB C9 -  -  -  	ret
 1373 D1:DCFC CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1374 D1:DD00 C3 C0 DD D1 	jp	NEQChainAnsVariable
 1375 D1:DD04 -  -  -  -  NEQVariableChainPush:
 1376 D1:DD04 C3 73 AF D1 	jp	UnknownError
 1377 D1:DD08 -  -  -  -  NEQVariableChainAns:
 1378 D1:DD08 59 -  -  -  	ld	e, c
 1379 D1:DD09 C3 C0 DD D1 	jp	NEQChainAnsVariable
 1380 D1:DD0D -  -  -  -  NEQVariableFunction:
 1381 D1:DD0D 7B -  -  -  	ld	a, e
 1382 D1:DD0E 06 01 -  -  	ld	b, OutputInDE
 1383 D1:DD10 CD 44 AD D1 	call	GetFunction
 1384 D1:DD14 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1385 D1:DD18 -  -  -  -  NEQInsert:
 1386 D1:DD18 21 B7 ED 52 	ld	hl, 052EDB7h
 1387 D1:DD1C CD 50 AC D1 	call	InsertHL															;	or a \ sbc hl, de
 1388 D1:DD20 11 00 00 00 	ld	de, 0
 1389 D1:DD24 21 20 01 23 	ld	hl, 0230120h
 1390 D1:DD28 3A 1F EA D0 	ld	a, (tempToken)
 1391 D1:DD2C FE 6A -  -  	cp	tEq
 1392 D1:DD2E 28 02 -  -  	jr	z, +_
 1393 D1:DD30 2E 28 -  -  	ld	l, 028h
 1394 D1:DD32 3E 21 -  -  _:	ld	a, 021h
 1395 D1:DD34 C3 98 AC D1 	jp	InsertADEHL															;	ld hl, 0 \ jr [n]z, $+3 \ inc hl
 1396 D1:DD38 -  -  -  -  NEQChainPushXXX:
 1397 D1:DD38 DD 7E FC -  	ld	a, (ix-4)
 1398 D1:DD3B B7 -  -  -  	or	a
 1399 D1:DD3C 28 12 -  -  	jr	z, NEQChainPushNumber
 1400 D1:DD3E 3D -  -  -  	dec	a
 1401 D1:DD3F 28 17 -  -  	jr	z, NEQChainPushVariable
 1402 D1:DD41 3D -  -  -  	dec	a
 1403 D1:DD42 28 1C -  -  	jr	z, NEQChainPushChainPush
 1404 D1:DD44 3D -  -  -  	dec	a
 1405 D1:DD45 28 1D -  -  	jr	z, NEQChainPushChainAns
 1406 D1:DD47 3D -  -  -  	dec	a
 1407 D1:DD48 CA 75 DD D1 	jp	z, NEQChainPushFunction
 1408 D1:DD4C C3 F8 AE D1 	jp	NEQError
 1409 D1:DD50 -  -  -  -  NEQChainPushNumber:
 1410 D1:DD50 3E E1 -  -  	ld	a, 0E1h
 1411 D1:DD52 CD 18 AD D1 	call	InsertA															;	pop hl
 1412 D1:DD56 18 44 -  -  	jr	NEQChainAnsNumber
 1413 D1:DD58 -  -  -  -  NEQChainPushVariable:
 1414 D1:DD58 3E E1 -  -  	ld	a, 0E1h
 1415 D1:DD5A CD 18 AD D1 	call	InsertA															;	pop hl
 1416 D1:DD5E 18 60 -  -  	jr	NEQChainAnsVariable
 1417 D1:DD60 -  -  -  -  NEQChainPushChainPush:
 1418 D1:DD60 C3 73 AF D1 	jp	UnknownError
 1419 D1:DD64 -  -  -  -  NEQChainPushChainAns:
 1420 D1:DD64 3A 3B EA D1 	ld	a, (ExprOutput)
 1421 D1:DD68 B7 -  -  -  	or	a
 1422 D1:DD69 3E D1 -  -  	ld	a, 0D1h
 1423 D1:DD6B 20 02 -  -  	jr	nz, +_
 1424 D1:DD6D 3E E1 -  -  	ld	a, 0E1h
 1425 D1:DD6F CD 18 AD D1 _:	call	InsertA															;	pop hl/de
 1426 D1:DD73 18 A3 -  -  	jr	NEQInsert
 1427 D1:DD75 -  -  -  -  NEQChainPushFunction:
 1428 D1:DD75 7B -  -  -  	ld	a, e
 1429 D1:DD76 06 02 -  -  	ld	b, OutputInHL
 1430 D1:DD78 CD 44 AD D1 	call	GetFunction
 1431 D1:DD7C 3E D1 -  -  	ld	a, 0D1h
 1432 D1:DD7E CD 18 AD D1 	call	InsertA															;	pop de
 1433 D1:DD82 18 94 -  -  _:	jr	NEQInsert
 1434 D1:DD84 -  -  -  -  NEQChainAnsXXX:
 1435 D1:DD84 DD 7E FC -  	ld	a, (ix-4)
 1436 D1:DD87 B7 -  -  -  	or	a
 1437 D1:DD88 28 12 -  -  	jr	z, NEQChainAnsNumber
 1438 D1:DD8A 3D -  -  -  	dec	a
 1439 D1:DD8B 28 33 -  -  	jr	z, NEQChainAnsVariable
 1440 D1:DD8D 3D -  -  -  	dec	a
 1441 D1:DD8E 28 4C -  -  	jr	z, NEQChainAnsChainPush
 1442 D1:DD90 3D -  -  -  	dec	a
 1443 D1:DD91 28 4D -  -  	jr	z, NEQChainAnsChainAns
 1444 D1:DD93 3D -  -  -  	dec	a
 1445 D1:DD94 CA E4 DD D1 	jp	z, NEQChainAnsFunction
 1446 D1:DD98 C3 F8 AE D1 	jp	NEQError
 1447 D1:DD9C -  -  -  -  NEQChainAnsNumber:
 1448 D1:DD9C FD CB C0 5E 	bit	op_is_last_one, (iy+fExpression1)
 1449 D1:DDA0 28 0C -  -  	jr	z, +_
 1450 D1:DDA2 3A 1F EA D0 	ld	a, (tempToken)
 1451 D1:DDA6 FE 6F -  -  	cp	tNE
 1452 D1:DDA8 20 04 -  -  	jr	nz, +_
 1453 D1:DDAA FD CB C0 AE 	res	ans_set_z_flag, (iy+fExpression1)
 1454 D1:DDAE 3A 3B EA D1 _:	ld	a, (ExprOutput)
 1455 D1:DDB2 B7 -  -  -  	or	a
 1456 D1:DDB3 3E 11 -  -  	ld	a, 011h
 1457 D1:DDB5 20 02 -  -  	jr	nz, $+4
 1458 D1:DDB7 3E 21 -  -  	ld	a, 021h
 1459 D1:DDB9 EB -  -  -  	ex	de, hl
 1460 D1:DDBA CD 4C AC D1 	call	InsertAHL															;	ld hl/de, *
 1461 D1:DDBE 18 C2 -  -  	jr	--_
 1462 D1:DDC0 -  -  -  -  NEQChainAnsVariable:
 1463 D1:DDC0 26 17 -  -  	ld	h, 017h
 1464 D1:DDC2 16 03 -  -  	ld	d, 3
 1465 D1:DDC4 ED 5C -  -  	mlt	de
 1466 D1:DDC6 7B -  -  -  	ld	a, e
 1467 D1:DDC7 2E DD -  -  	ld	l, 0DDh
 1468 D1:DDC9 CD 70 1D 02 	call	_SetHLUToA
 1469 D1:DDCD 3A 3B EA D1 	ld	a, (ExprOutput)
 1470 D1:DDD1 B7 -  -  -  	or	a
 1471 D1:DDD2 20 02 -  -  	jr	nz, $+4
 1472 D1:DDD4 26 27 -  -  	ld	h, 027h
 1473 D1:DDD6 CD 50 AC D1 	call	InsertHL															;	ld hl/de, (ix+*)
 1474 D1:DDDA 18 A6 -  -  	jr	--_
 1475 D1:DDDC -  -  -  -  NEQChainAnsChainPush:
 1476 D1:DDDC C3 73 AF D1 	jp	UnknownError
 1477 D1:DDE0 -  -  -  -  NEQChainAnsChainAns:
 1478 D1:DDE0 C3 73 AF D1 	jp	UnknownError
 1479 D1:DDE4 -  -  -  -  NEQChainAnsFunction:
 1480 D1:DDE4 3A 3B EA D1 	ld	a, (ExprOutput)
 1481 D1:DDE8 87 -  -  -  	add	a, a
 1482 D1:DDE9 87 -  -  -  	add	a, a
 1483 D1:DDEA 87 -  -  -  	add	a, a
 1484 D1:DDEB 87 -  -  -  	add	a, a
 1485 D1:DDEC C6 D5 -  -  	add	a, 0D5h
 1486 D1:DDEE CD 18 AD D1 	call	InsertA															;	push hl/de
 1487 D1:DDF2 7B -  -  -  	ld	a, e
 1488 D1:DDF3 06 02 -  -  	ld	b, OutputInHL
 1489 D1:DDF5 CD 44 AD D1 	call	GetFunction
 1490 D1:DDF9 3E D1 -  -  	ld	a, 0D1h
 1491 D1:DDFB CD 18 AD D1 	call	InsertA															;	pop de
 1492 D1:DDFF C3 18 DD D1 _:	jp	NEQInsert
 1493 D1:DE03 -  -  -  -  NEQFunctionXXX:
 1494 D1:DE03 DD 7E FC -  	ld	a, (ix-4)
 1495 D1:DE06 B7 -  -  -  	or	a
 1496 D1:DE07 28 10 -  -  	jr	z, NEQFunctionNumber
 1497 D1:DE09 3D -  -  -  	dec	a
 1498 D1:DE0A 28 18 -  -  	jr	z, NEQFunctionVariable
 1499 D1:DE0C 3D -  -  -  	dec	a
 1500 D1:DE0D 28 1C -  -  	jr	z, NEQFunctionChainPush
 1501 D1:DE0F 3D -  -  -  	dec	a
 1502 D1:DE10 28 1D -  -  	jr	z, NEQFunctionChainAns
 1503 D1:DE12 3D -  -  -  	dec	a
 1504 D1:DE13 28 1D -  -  	jr	z, NEQFunctionFunction
 1505 D1:DE15 C3 F8 AE D1 	jp	NEQError
 1506 D1:DE19 -  -  -  -  NEQFunctionNumber:
 1507 D1:DE19 79 -  -  -  	ld	a, c
 1508 D1:DE1A 06 02 -  -  	ld	b, OutputInHL
 1509 D1:DE1C CD 44 AD D1 	call	GetFunction
 1510 D1:DE20 C3 9C DD D1 	jp	NEQChainAnsNumber
 1511 D1:DE24 -  -  -  -  NEQFunctionVariable:
 1512 D1:DE24 79 -  -  -  	ld	a, c
 1513 D1:DE25 4B -  -  -  	ld	c, e
 1514 D1:DE26 5F -  -  -  	ld	e, a
 1515 D1:DE27 C3 0D DD D1 	jp	NEQVariableFunction
 1516 D1:DE2B -  -  -  -  NEQFunctionChainPush:
 1517 D1:DE2B C3 73 AF D1 	jp	UnknownError
 1518 D1:DE2F -  -  -  -  NEQFunctionChainAns:
 1519 D1:DE2F 59 -  -  -  	ld	e, c
 1520 D1:DE30 18 B2 -  -  	jr	NEQChainAnsFunction
 1521 D1:DE32 -  -  -  -  NEQFunctionFunction:
 1522 D1:DE32 7B -  -  -  	ld	a, e
 1523 D1:DE33 06 01 -  -  	ld	b, OutputInDE
 1524 D1:DE35 CD 44 AD D1 	call	GetFunction
 1525 D1:DE39 79 -  -  -  	ld	a, c
 1526 D1:DE3A 06 02 -  -  	ld	b, OutputInHL
 1527 D1:DE3C FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1528 D1:DE40 CD 44 AD D1 	call	GetFunction
 1529 D1:DE44 18 B9 -  -  	jr	-_
 1530 D1:DE46 -  -  -  -  
 1531 D1:DE46 -  -  -  -  XORANDNumberXXX:
 1532 D1:DE46 DD 7E FC -  	ld	a, (ix-4)
 1533 D1:DE49 B7 -  -  -  	or	a
 1534 D1:DE4A 28 10 -  -  	jr	z, XORANDNumberNumber
 1535 D1:DE4C 3D -  -  -  	dec	a
 1536 D1:DE4D 28 59 -  -  	jr	z, XORANDNumberVariable
 1537 D1:DE4F 3D -  -  -  	dec	a
 1538 D1:DE50 28 5D -  -  	jr	z, XORANDNumberChainPush
 1539 D1:DE52 3D -  -  -  	dec	a
 1540 D1:DE53 28 5E -  -  	jr	z, XORANDNumberChainAns
 1541 D1:DE55 3D -  -  -  	dec	a
 1542 D1:DE56 28 61 -  -  	jr	z, XORANDNumberFunction
 1543 D1:DE58 C3 06 AF D1 	jp	XORANDError
 1544 D1:DE5C -  -  -  -  XORANDNumberNumber:
 1545 D1:DE5C FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1546 D1:DE60 B7 -  -  -  	or	a
 1547 D1:DE61 ED 62 -  -  	sbc	hl, hl
 1548 D1:DE63 3A 1F EA D0 	ld	a, (tempToken)
 1549 D1:DE67 FE 3D -  -  	cp	tXor
 1550 D1:DE69 28 22 -  -  	jr	z, ++_
 1551 D1:DE6B FE 3C -  -  	cp	tOr
 1552 D1:DE6D 28 0F -  -  	jr	z, +_
 1553 D1:DE6F CD 48 1D 02 	call	_ChkBCIs0
 1554 D1:DE73 28 2F -  -  	jr	z, +++_
 1555 D1:DE75 CD 4C 1D 02 	call	_ChkDEIs0
 1556 D1:DE79 28 29 -  -  	jr	z, +++_
 1557 D1:DE7B 23 -  -  -  	inc	hl
 1558 D1:DE7C 18 26 -  -  	jr	+++_
 1559 D1:DE7E CD 48 1D 02 _:	call	_ChkBCIs0
 1560 D1:DE82 47 -  -  -  	ld	b, a
 1561 D1:DE83 CD 4C 1D 02 	call	_ChkDEIs0
 1562 D1:DE87 B0 -  -  -  	or	a, b
 1563 D1:DE88 28 1A -  -  	jr	z, ++_
 1564 D1:DE8A 23 -  -  -  	inc	hl
 1565 D1:DE8B 18 17 -  -  	jr	++_
 1566 D1:DE8D CD 4C 1D 02 _:	call	_ChkDEIs0
 1567 D1:DE91 11 00 00 00 	ld	de, 0
 1568 D1:DE95 28 01 -  -  	jr	z, $+3
 1569 D1:DE97 13 -  -  -  	inc	de
 1570 D1:DE98 CD 48 1D 02 	call	_ChkBCIs0
 1571 D1:DE9C 3E 00 -  -  	ld	a, 0
 1572 D1:DE9E 28 01 -  -  	jr	z, $+3
 1573 D1:DEA0 3C -  -  -  	inc	a
 1574 D1:DEA1 AB -  -  -  	xor	e
 1575 D1:DEA2 5F -  -  -  	ld	e, a
 1576 D1:DEA3 EB -  -  -  	ex	de, hl
 1577 D1:DEA4 DD 2F F9 -  _:	ld	(ix-7), hl
 1578 D1:DEA7 C9 -  -  -  	ret
 1579 D1:DEA8 -  -  -  -  XORANDNumberVariable:
 1580 D1:DEA8 C5 -  -  -  	push	bc
 1581 D1:DEA9 E1 -  -  -  	pop	hl
 1582 D1:DEAA EB -  -  -  	ex	de, hl
 1583 D1:DEAB E5 -  -  -  	push	hl
 1584 D1:DEAC C1 -  -  -  	pop	bc
 1585 D1:DEAD 18 2B -  -  	jr	XORANDVariableNumber
 1586 D1:DEAF -  -  -  -  XORANDNumberChainPush:
 1587 D1:DEAF C3 73 AF D1 	jp	UnknownError
 1588 D1:DEB3 -  -  -  -  XORANDNumberChainAns:
 1589 D1:DEB3 C5 -  -  -  	push	bc
 1590 D1:DEB4 D1 -  -  -  	pop	de
 1591 D1:DEB5 C3 A2 DF D1 	jp	XORANDChainAnsNumber
 1592 D1:DEB9 -  -  -  -  XORANDNumberFunction:
 1593 D1:DEB9 C5 -  -  -  	push	bc
 1594 D1:DEBA E1 -  -  -  	pop	hl
 1595 D1:DEBB EB -  -  -  	ex	de, hl
 1596 D1:DEBC E5 -  -  -  	push	hl
 1597 D1:DEBD C1 -  -  -  	pop	bc
 1598 D1:DEBE C3 0B E0 D1 	jp	XORANDFunctionNumber
 1599 D1:DEC2 -  -  -  -  XORANDVariableXXX:
 1600 D1:DEC2 DD 7E FC -  	ld	a, (ix-4)
 1601 D1:DEC5 B7 -  -  -  	or	a
 1602 D1:DEC6 28 12 -  -  	jr	z, XORANDVariableNumber
 1603 D1:DEC8 3D -  -  -  	dec	a
 1604 D1:DEC9 28 17 -  -  	jr	z, XORANDVariableVariable
 1605 D1:DECB 3D -  -  -  	dec	a
 1606 D1:DECC 28 39 -  -  	jr	z, XORANDVariableChainPush
 1607 D1:DECE 3D -  -  -  	dec	a
 1608 D1:DECF 28 3A -  -  	jr	z, XORANDVariableChainAns
 1609 D1:DED1 3D -  -  -  	dec	a
 1610 D1:DED2 CA 10 DF D1 	jp	z, XORANDVariableFunction
 1611 D1:DED6 C3 06 AF D1 	jp	XORANDError
 1612 D1:DEDA -  -  -  -  XORANDVariableNumber:
 1613 D1:DEDA CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1614 D1:DEDE C3 A2 DF D1 	jp	XORANDChainAnsNumber
 1615 D1:DEE2 -  -  -  -  XORANDVariableVariable:
 1616 D1:DEE2 79 -  -  -  	ld	a, c
 1617 D1:DEE3 BB -  -  -  	cp	e
 1618 D1:DEE4 20 19 -  -  	jr	nz, ++_
 1619 D1:DEE6 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1620 D1:DEEA 3A 1F EA D0 	ld	a, (tempToken)
 1621 D1:DEEE D6 6F -  -  	sub	tNE
 1622 D1:DEF0 28 02 -  -  	jr	z, +_
 1623 D1:DEF2 3E 01 -  -  	ld	a, 1
 1624 D1:DEF4 11 00 00 00 _:	ld	de, 0
 1625 D1:DEF8 5F -  -  -  	ld	e, a
 1626 D1:DEF9 36 00 -  -  	ld	(hl), typeNumber
 1627 D1:DEFB 23 -  -  -  	inc	hl
 1628 D1:DEFC ED 1F -  -  	ld	(hl), de
 1629 D1:DEFE C9 -  -  -  	ret
 1630 D1:DEFF CD 72 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1631 D1:DF03 C3 B4 DF D1 	jp	XORANDChainAnsVariable
 1632 D1:DF07 -  -  -  -  XORANDVariableChainPush:
 1633 D1:DF07 C3 73 AF D1 	jp	UnknownError
 1634 D1:DF0B -  -  -  -  XORANDVariableChainAns:
 1635 D1:DF0B 59 -  -  -  	ld	e, c
 1636 D1:DF0C C3 B4 DF D1 	jp	XORANDChainAnsVariable
 1637 D1:DF10 -  -  -  -  XORANDVariableFunction:
 1638 D1:DF10 7B -  -  -  	ld	a, e
 1639 D1:DF11 06 01 -  -  	ld	b, OutputInDE
 1640 D1:DF13 CD 44 AD D1 	call	GetFunction
 1641 D1:DF17 CD 72 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1642 D1:DF1B -  -  -  -  XORANDInsert:
 1643 D1:DF1B ED 5B 1A EA 
              D1 -  -  -  	ld	de, (programPtr)
 1644 D1:DF20 21 1C EE D1 	ld	hl, XORANDData
 1645 D1:DF24 06 A2 -  -  	ld	b, 0A2h
 1646 D1:DF26 3A 1F EA D0 	ld	a, (tempToken)
 1647 D1:DF2A FE 3D -  -  	cp	tXor
 1648 D1:DF2C 20 02 -  -  	jr	nz, +_
 1649 D1:DF2E 06 AA -  -  	ld	b, 0AAh
 1650 D1:DF30 FE 3C -  -  _:	cp	tOr
 1651 D1:DF32 20 02 -  -  	jr	nz, +_
 1652 D1:DF34 06 B2 -  -  	ld	b, 0B2h
 1653 D1:DF36 78 -  -  -  _:	ld	a, b
 1654 D1:DF37 32 26 EE D1 	ld	(XORANDSMC), a
 1655 D1:DF3B 01 10 00 00 	ld	bc, 16
 1656 D1:DF3F ED B0 -  -  	ldir
 1657 D1:DF41 ED 53 1A EA 
              D1 -  -  -  	ld	(programPtr), de
 1658 D1:DF46 C9 -  -  -  	ret
 1659 D1:DF47 -  -  -  -  XORANDChainPushXXX:
 1660 D1:DF47 DD 7E FC -  	ld	a, (ix-4)
 1661 D1:DF4A B7 -  -  -  	or	a
 1662 D1:DF4B 28 12 -  -  	jr	z, XORANDChainPushNumber
 1663 D1:DF4D 3D -  -  -  	dec	a
 1664 D1:DF4E 28 17 -  -  	jr	z, XORANDChainPushVariable
 1665 D1:DF50 3D -  -  -  	dec	a
 1666 D1:DF51 28 1C -  -  	jr	z, XORANDChainPushChainPush
 1667 D1:DF53 3D -  -  -  	dec	a
 1668 D1:DF54 28 1D -  -  	jr	z, XORANDChainPushChainAns
 1669 D1:DF56 3D -  -  -  	dec	a
 1670 D1:DF57 CA 7B DF D1 	jp	z, XORANDChainPushFunction
 1671 D1:DF5B C3 06 AF D1 	jp	XORANDError
 1672 D1:DF5F -  -  -  -  XORANDChainPushNumber:
 1673 D1:DF5F 3E E1 -  -  	ld	a, 0E1h
 1674 D1:DF61 CD 18 AD D1 	call	InsertA															;	pop hl
 1675 D1:DF65 18 3B -  -  	jr	XORANDChainAnsNumber
 1676 D1:DF67 -  -  -  -  XORANDChainPushVariable:
 1677 D1:DF67 3E E1 -  -  	ld	a, 0E1h
 1678 D1:DF69 CD 18 AD D1 	call	InsertA															;	pop hl
 1679 D1:DF6D 18 45 -  -  	jr	XORANDChainAnsVariable
 1680 D1:DF6F -  -  -  -  XORANDChainPushChainPush:
 1681 D1:DF6F C3 73 AF D1 	jp	UnknownError
 1682 D1:DF73 -  -  -  -  XORANDChainPushChainAns:
 1683 D1:DF73 3E D1 -  -  	ld	a, 0D1h
 1684 D1:DF75 CD 18 AD D1 	call	InsertA															;	pop de
 1685 D1:DF79 18 A0 -  -  	jr	XORANDInsert
 1686 D1:DF7B -  -  -  -  XORANDChainPushFunction:
 1687 D1:DF7B 7B -  -  -  	ld	a, e
 1688 D1:DF7C 06 02 -  -  	ld	b, OutputInHL
 1689 D1:DF7E CD 44 AD D1 	call	GetFunction
 1690 D1:DF82 3E D1 -  -  	ld	a, 0D1h
 1691 D1:DF84 CD 18 AD D1 	call	InsertA															;	pop de
 1692 D1:DF88 18 91 -  -  _:	jr	XORANDInsert
 1693 D1:DF8A -  -  -  -  XORANDChainAnsXXX:
 1694 D1:DF8A DD 7E FC -  	ld	a, (ix-4)
 1695 D1:DF8D B7 -  -  -  	or	a
 1696 D1:DF8E 28 12 -  -  	jr	z, XORANDChainAnsNumber
 1697 D1:DF90 3D -  -  -  	dec	a
 1698 D1:DF91 28 21 -  -  	jr	z, XORANDChainAnsVariable
 1699 D1:DF93 3D -  -  -  	dec	a
 1700 D1:DF94 28 3A -  -  	jr	z, XORANDChainAnsChainPush
 1701 D1:DF96 3D -  -  -  	dec	a
 1702 D1:DF97 28 3B -  -  	jr	z, XORANDChainAnsChainAns
 1703 D1:DF99 3D -  -  -  	dec	a
 1704 D1:DF9A CA D8 DF D1 	jp	z, XORANDChainAnsFunction
 1705 D1:DF9E C3 06 AF D1 	jp	XORANDError
 1706 D1:DFA2 -  -  -  -  XORANDChainAnsNumber:
 1707 D1:DFA2 3A 3B EA D1 	ld	a, (ExprOutput)
 1708 D1:DFA6 B7 -  -  -  	or	a
 1709 D1:DFA7 3E 11 -  -  	ld	a, 011h
 1710 D1:DFA9 20 02 -  -  	jr	nz, +_
 1711 D1:DFAB 3E 21 -  -  	ld	a, 021h
 1712 D1:DFAD EB -  -  -  _:	ex	de, hl
 1713 D1:DFAE CD 4C AC D1 	call	InsertAHL															;	ld hl/de, *
 1714 D1:DFB2 18 D4 -  -  	jr	--_
 1715 D1:DFB4 -  -  -  -  XORANDChainAnsVariable:
 1716 D1:DFB4 26 17 -  -  	ld	h, 017h
 1717 D1:DFB6 16 03 -  -  	ld	d, 3
 1718 D1:DFB8 ED 5C -  -  	mlt	de
 1719 D1:DFBA 7B -  -  -  	ld	a, e
 1720 D1:DFBB 2E DD -  -  	ld	l, 0DDh
 1721 D1:DFBD CD 70 1D 02 	call	_SetHLUToA
 1722 D1:DFC1 3A 3B EA D1 	ld	a, (ExprOutput)
 1723 D1:DFC5 B7 -  -  -  	or	a
 1724 D1:DFC6 20 02 -  -  	jr	nz, $+4
 1725 D1:DFC8 26 27 -  -  	ld	h, 027h
 1726 D1:DFCA CD 50 AC D1 	call	InsertHL															;	ld hl/de, (ix+*)
 1727 D1:DFCE 18 B8 -  -  	jr	--_
 1728 D1:DFD0 -  -  -  -  XORANDChainAnsChainPush:
 1729 D1:DFD0 C3 73 AF D1 	jp	UnknownError
 1730 D1:DFD4 -  -  -  -  XORANDChainAnsChainAns:
 1731 D1:DFD4 C3 73 AF D1 	jp	UnknownError
 1732 D1:DFD8 -  -  -  -  XORANDChainAnsFunction:
 1733 D1:DFD8 3A 3B EA D1 	ld	a, (ExprOutput)
 1734 D1:DFDC 87 -  -  -  	add	a, a
 1735 D1:DFDD 87 -  -  -  	add	a, a
 1736 D1:DFDE 87 -  -  -  	add	a, a
 1737 D1:DFDF 87 -  -  -  	add	a, a
 1738 D1:DFE0 C6 D5 -  -  	add	a, 0D5h
 1739 D1:DFE2 CD 18 AD D1 	call	InsertA															;	push hl/de
 1740 D1:DFE6 7B -  -  -  	ld	a, e
 1741 D1:DFE7 06 02 -  -  	ld	b, OutputInHL
 1742 D1:DFE9 CD 44 AD D1 	call	GetFunction
 1743 D1:DFED 3E D1 -  -  	ld	a, 0D1h
 1744 D1:DFEF CD 18 AD D1 	call	InsertA															;	pop de
 1745 D1:DFF3 18 93 -  -  _:	jr	---_
 1746 D1:DFF5 -  -  -  -  XORANDFunctionXXX:
 1747 D1:DFF5 DD 7E FC -  	ld	a, (ix-4)
 1748 D1:DFF8 B7 -  -  -  	or	a
 1749 D1:DFF9 28 10 -  -  	jr	z, XORANDFunctionNumber
 1750 D1:DFFB 3D -  -  -  	dec	a
 1751 D1:DFFC 28 18 -  -  	jr	z, XORANDFunctionVariable
 1752 D1:DFFE 3D -  -  -  	dec	a
 1753 D1:DFFF 28 1C -  -  	jr	z, XORANDFunctionChainPush
 1754 D1:E001 3D -  -  -  	dec	a
 1755 D1:E002 28 1D -  -  	jr	z, XORANDFunctionChainAns
 1756 D1:E004 3D -  -  -  	dec	a
 1757 D1:E005 28 1D -  -  	jr	z, XORANDFunctionFunction
 1758 D1:E007 C3 06 AF D1 	jp	XORANDError
 1759 D1:E00B -  -  -  -  XORANDFunctionNumber:
 1760 D1:E00B 79 -  -  -  	ld	a, c
 1761 D1:E00C 06 02 -  -  	ld	b, OutputInHL
 1762 D1:E00E CD 44 AD D1 	call	GetFunction
 1763 D1:E012 C3 A2 DF D1 	jp	XORANDChainAnsNumber
 1764 D1:E016 -  -  -  -  XORANDFunctionVariable:
 1765 D1:E016 79 -  -  -  	ld	a, c
 1766 D1:E017 4B -  -  -  	ld	c, e
 1767 D1:E018 5F -  -  -  	ld	e, a
 1768 D1:E019 C3 10 DF D1 	jp	XORANDVariableFunction
 1769 D1:E01D -  -  -  -  XORANDFunctionChainPush:
 1770 D1:E01D C3 73 AF D1 	jp	UnknownError
 1771 D1:E021 -  -  -  -  XORANDFunctionChainAns:
 1772 D1:E021 59 -  -  -  	ld	e, c
 1773 D1:E022 18 B4 -  -  	jr	XORANDChainAnsFunction
 1774 D1:E024 -  -  -  -  XORANDFunctionFunction:
 1775 D1:E024 7B -  -  -  	ld	a, e
 1776 D1:E025 06 01 -  -  	ld	b, OutputInDE
 1777 D1:E027 CD 44 AD D1 	call	GetFunction
 1778 D1:E02B 79 -  -  -  	ld	a, c
 1779 D1:E02C 06 02 -  -  	ld	b, OutputInHL
 1780 D1:E02E FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1781 D1:E032 CD 44 AD D1 	call	GetFunction
 1782 D1:E036 18 BB -  -  	jr	-_
 1783 D1:E038 -  -  -  -  	
 1784 D1:E038 -  -  -  -  StoNumberXXX:
 1785 D1:E038 DD 7E FC -  	ld	a, (ix-4)
 1786 D1:E03B FE 03 -  -  	cp	typeChainAns
 1787 D1:E03D 28 0A -  -  	jr	z, +_
 1788 D1:E03F FE 01 -  -  	cp	typeVariable
 1789 D1:E041 CA 6C E0 D1 	jp	z, ++_
 1790 D1:E045 C3 73 AF D1 	jp	UnknownError
 1791 D1:E049 CD BF E1 D1 _:	call	StoTestStoToListElement
 1792 D1:E04D C2 73 AF D1 	jp	nz, UnknownError
 1793 D1:E051 3E 11 -  -  	ld	a, 011h
 1794 D1:E053 C5 -  -  -  	push	bc
 1795 D1:E054 E1 -  -  -  	pop	hl
 1796 D1:E055 CD 4C AC D1 	call	InsertAHL															;	ld de, *
 1797 D1:E059 3E ED -  -  	ld	a, 0EDh
 1798 D1:E05B CD 18 AD D1 	call	InsertA															;	ld (hl), de (1)
 1799 D1:E05F 3E 1F -  -  	ld	a, 01Fh
 1800 D1:E061 CD 18 AD D1 	call	InsertA															;	ld (hl), de (2)
 1801 D1:E065 3E 00 -  -  	ld	a, OutputIsInDE
 1802 D1:E067 32 3C EA D1 	ld	(ExprOutput2), a
 1803 D1:E06B C9 -  -  -  	ret
 1804 D1:E06C 21 DD 2F 00 _:	ld	hl, 0002FDDh
 1805 D1:E070 16 03 -  -  	ld	d, 3
 1806 D1:E072 ED 5C -  -  	mlt	de
 1807 D1:E074 7B -  -  -  	ld	a, e
 1808 D1:E075 CD 70 1D 02 	call	_SetHLUToA
 1809 D1:E079 C5 -  -  -  	push	bc
 1810 D1:E07A D1 -  -  -  	pop	de
 1811 D1:E07B CD 48 1D 02 	call	_ChkBCIs0
 1812 D1:E07F 3E 21 -  -  	ld	a, 021h
 1813 D1:E081 20 08 -  -  	jr	nz, +_
 1814 D1:E083 11 B7 ED 62 	ld	de, 062EDB7h
 1815 D1:E087 C3 9C AC D1 	jp	InsertDEHL															;	or a \ sbc hl, hl \ ld (ix+*), hl
 1816 D1:E08B C3 98 AC D1 _:	jp	InsertADEHL															;	ld hl, * \ ld (ix+*), hl
 1817 D1:E08F -  -  -  -  StoVariableXXX:
 1818 D1:E08F DD 7E FC -  	ld	a, (ix-4)
 1819 D1:E092 FE 03 -  -  	cp	typeChainAns
 1820 D1:E094 28 0A -  -  	jr	z, +_
 1821 D1:E096 FE 01 -  -  	cp	typeVariable
 1822 D1:E098 CA C0 E0 D1 	jp	z, ++_
 1823 D1:E09C C3 73 AF D1 	jp	UnknownError
 1824 D1:E0A0 CD BF E1 D1 _:	call	StoTestStoToListElement
 1825 D1:E0A4 C2 73 AF D1 	jp	nz, UnknownError
 1826 D1:E0A8 59 -  -  -  	ld	e, c
 1827 D1:E0A9 CD 7B AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1828 D1:E0AD 3E ED -  -  	ld	a, 0EDh
 1829 D1:E0AF CD 18 AD D1 	call	InsertA															;	ld (hl), de (1)
 1830 D1:E0B3 3E 1F -  -  	ld	a, 01Fh
 1831 D1:E0B5 CD 18 AD D1 	call	InsertA															;	ld (hl), de (2)
 1832 D1:E0B9 3E 00 -  -  	ld	a, OutputIsInDE
 1833 D1:E0BB 32 3C EA D1 	ld	(ExprOutput2), a
 1834 D1:E0BF C9 -  -  -  	ret
 1835 D1:E0C0 CD 72 AC D1 _:	call	InsertHIXC
 1836 D1:E0C4 21 DD 2F 00 	ld	hl, 0002FDDh
 1837 D1:E0C8 16 03 -  -  	ld	d, 3
 1838 D1:E0CA ED 5C -  -  	mlt	de
 1839 D1:E0CC 7B -  -  -  	ld	a, e
 1840 D1:E0CD CD 70 1D 02 	call	_SetHLUToA
 1841 D1:E0D1 C3 50 AC D1 	jp	InsertHL																;	ld ld (ix+*), hl
 1842 D1:E0D5 -  -  -  -  StoChainPushXXX:
 1843 D1:E0D5 DD 7E FC -  	ld	a, (ix-4)
 1844 D1:E0D8 FE 03 -  -  	cp	typeChainAns
 1845 D1:E0DA C2 73 AF D1 _:	jp	nz, UnknownError
 1846 D1:E0DE CD BF E1 D1 	call	StoTestStoToListElement
 1847 D1:E0E2 20 F6 -  -  	jr	nz, -_
 1848 D1:E0E4 21 D1 ED 1F 	ld	hl, 01FEDD1h
 1849 D1:E0E8 CD 50 AC D1 	call	InsertHL															;	pop de \ ld (hl), de
 1850 D1:E0EC 3E 00 -  -  	ld	a, OutputIsInDE
 1851 D1:E0EE 32 3C EA D1 	ld	(ExprOutput2), a
 1852 D1:E0F2 C9 -  -  -  	ret
 1853 D1:E0F3 -  -  -  -  StoChainAnsXXX:
 1854 D1:E0F3 DD 7E FC -  	ld	a, (ix-4)
 1855 D1:E0F6 FE 01 -  -  	cp	typeVariable
 1856 D1:E0F8 C2 1A AF D1 	jp	nz, StoError
 1857 D1:E0FC 21 DD 2F 00 _:	ld	hl, 0002FDDh
 1858 D1:E100 16 03 -  -  	ld	d, 3
 1859 D1:E102 ED 5C -  -  	mlt	de
 1860 D1:E104 7B -  -  -  	ld	a, e
 1861 D1:E105 CD 70 1D 02 	call	_SetHLUToA
 1862 D1:E109 3A 3B EA D1 	ld	a, (ExprOutput)
 1863 D1:E10D B7 -  -  -  	or	a
 1864 D1:E10E 20 02 -  -  	jr	nz, $+4
 1865 D1:E110 26 1F -  -  	ld	h, 01Fh
 1866 D1:E112 32 3C EA D1 	ld	(ExprOutput2), a
 1867 D1:E116 C3 50 AC D1 	jp	InsertHL																;	ld (ix+*), hl/de
 1868 D1:E11A -  -  -  -  StoFunctionXXX:
 1869 D1:E11A DD 7E FC -  	ld	a, (ix-4)
 1870 D1:E11D FE 03 -  -  	cp	typeChainAns
 1871 D1:E11F 28 0A -  -  	jr	z, +_
 1872 D1:E121 FE 01 -  -  	cp	typeVariable
 1873 D1:E123 CA 51 E1 D1 	jp	z, ++_
 1874 D1:E127 C3 73 AF D1 	jp	UnknownError
 1875 D1:E12B CD BF E1 D1 _:	call	StoTestStoToListElement
 1876 D1:E12F C2 73 AF D1 	jp	nz, UnknownError
 1877 D1:E133 79 -  -  -  	ld	a, c
 1878 D1:E134 06 01 -  -  	ld	b, OutputInDE
 1879 D1:E136 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1880 D1:E13A CD 44 AD D1 	call	GetFunction
 1881 D1:E13E 3E ED -  -  	ld	a, 0EDh
 1882 D1:E140 CD 18 AD D1 	call	InsertA															;	ld (hl), de (1)
 1883 D1:E144 3E 1F -  -  	ld	a, 01Fh
 1884 D1:E146 CD 18 AD D1 	call	InsertA															;	ld (hl), de (2)
 1885 D1:E14A 3E 00 -  -  	ld	a, OutputIsInDE
 1886 D1:E14C 32 3C EA D1 	ld	(ExprOutput2), a
 1887 D1:E150 C9 -  -  -  	ret
 1888 D1:E151 79 -  -  -  _:	ld	a, c
 1889 D1:E152 06 02 -  -  	ld	b, OutputInHL
 1890 D1:E154 CD 44 AD D1 	call	GetFunction
 1891 D1:E158 21 DD 2F 00 	ld	hl, 0002FDDh
 1892 D1:E15C 16 03 -  -  	ld	d, 3
 1893 D1:E15E ED 5C -  -  	mlt	de
 1894 D1:E160 7B -  -  -  	ld	a, e
 1895 D1:E161 CD 70 1D 02 	call	_SetHLUToA
 1896 D1:E165 C3 50 AC D1 	jp	InsertHL																;	ld (ix+*), hl
 1897 D1:E169 -  -  -  -  StoListXXX:
 1898 D1:E169 DD 7E FC -  	ld	a, (ix-4)
 1899 D1:E16C FE 06 -  -  	cp	typeOSList
 1900 D1:E16E C2 1A AF D1 	jp	nz, StoError
 1901 D1:E172 3E 21 -  -  	ld	a, 021h
 1902 D1:E174 CD 18 AD D1 	call	InsertA															;	ld hl, *
 1903 D1:E178 CD 2F AD D1 	call	InsertProgramPtrToDataOffset
 1904 D1:E17C 2A 2F EA D1 	ld	hl, (programDataDataPtr)
 1905 D1:E180 CD 50 AC D1 	call	InsertHL															;	ld hl, RANDOM
 1906 D1:E184 3E 11 -  -  	ld	a, 011h
 1907 D1:E186 D5 -  -  -  	push	de
 1908 D1:E187 E1 -  -  -  	pop	hl
 1909 D1:E188 CD 4C AC D1 	call	InsertAHL															;	ld de, OSList
 1910 D1:E18C 3E 01 -  -  	ld	a, 01h
 1911 D1:E18E CD 18 AD D1 	call	InsertA															;	ld bc, *
 1912 D1:E192 C5 -  -  -  	push	bc
 1913 D1:E193 E1 -  -  -  	pop	hl
 1914 D1:E194 22 A6 E1 D1 	ld	(StartData), hl
 1915 D1:E198 ED 27 -  -  	ld	hl, (hl)
 1916 D1:E19A E5 -  -  -  	push	hl
 1917 D1:E19B C1 -  -  -  	pop	bc
 1918 D1:E19C CD 50 AC D1 	call	InsertHL															;	ld bc, LENGTH
 1919 D1:E1A0 ED 5B 2F EA 
              D1 -  -  -  	ld	de, (programDataDataPtr)
 1920 D1:E1A5 -  -  -  -  StartData = $+1
 1921 D1:E1A5 21 00 00 00 	ld	hl, 0
 1922 D1:E1A9 23 -  -  -  	inc	hl
 1923 D1:E1AA 23 -  -  -  	inc	hl
 1924 D1:E1AB 23 -  -  -  	inc	hl
 1925 D1:E1AC ED B0 -  -  	ldir
 1926 D1:E1AE ED 53 2F EA 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1927 D1:E1B3 3E ED -  -  	ld	a, 0EDh
 1928 D1:E1B5 CD 18 AD D1 	call	InsertA															;	ldir (1)
 1929 D1:E1B9 3E B0 -  -  	ld	a, 0B0h
 1930 D1:E1BB C3 18 AD D1 	jp	InsertA																;	ldir (2)
 1931 D1:E1BF -  -  -  -  	
 1932 D1:E1BF -  -  -  -  StoTestStoToListElement:
 1933 D1:E1BF 2A 1A EA D1 	ld	hl, (programPtr)
 1934 D1:E1C3 2B -  -  -  	dec	hl
 1935 D1:E1C4 7E -  -  -  	ld	a, (hl)
 1936 D1:E1C5 FE 27 -  -  	cp	027h
 1937 D1:E1C7 20 0B -  -  	jr	nz, StoLastOpcodeNotHLHL
 1938 D1:E1C9 2B -  -  -  	dec	hl
 1939 D1:E1CA 7E -  -  -  	ld	a, (hl)
 1940 D1:E1CB FE ED -  -  	cp	0EDh
 1941 D1:E1CD 20 05 -  -  	jr	nz, StoLastOpcodeNotHLHL
 1942 D1:E1CF 22 1A EA D1 	ld	(programPtr), hl
 1943 D1:E1D3 C9 -  -  -  	ret
 1944 D1:E1D4 -  -  -  -  StoLastOpcodeNotHLHL:
 1945 D1:E1D4 2A 1A EA D1 	ld	hl, (programPtr)
 1946 D1:E1D8 2B -  -  -  	dec	hl
 1947 D1:E1D9 2B -  -  -  	dec	hl
 1948 D1:E1DA 2B -  -  -  	dec	hl
 1949 D1:E1DB 2B -  -  -  	dec	hl
 1950 D1:E1DC 7E -  -  -  	ld	a, (hl)
 1951 D1:E1DD FE 2A -  -  	cp	02Ah
 1952 D1:E1DF C0 -  -  -  	ret	nz
 1953 D1:E1E0 36 21 -  -  	ld	(hl), 021h
 1954 D1:E1E2 C9 -  -  -  	ret
 1955 D1:E1E3 00 -  -  -  	nop
 1956 D1:E1E4 00 -  -  -  	nop
 1957 D1:E1E5 00 -  -  -  	nop
Listing for file "ice.asm"
  448 D1:E1E6 -  -  -  -  #include "operators functions/function_for.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_for.asm"
    1 D1:E1E6 -  -  -  -  functionFor:
    2 D1:E1E6 21 37 EA D1 	ld	hl, amountOfEnds
    3 D1:E1EA 34 -  -  -  	inc	(hl)
    4 D1:E1EB 3E 01 -  -  	ld	a, 1
    5 D1:E1ED 32 34 EA D1 	ld	(openedParensF), a
    6 D1:E1F1 FD 36 AF 00 	ld	(iy+fFunction2), 0
    7 D1:E1F5 CD 28 10 02 	call	_IncFetch
    8 D1:E1F9 D6 41 -  -  	sub	tA
    9 D1:E1FB DA 6B E4 D1 	jp	c, functionForSmall
   10 D1:E1FF FE 1B -  -  	cp	ttheta+1-tA
   11 D1:E201 D2 6B E4 D1 	jp	nc, functionForSmall
   12 D1:E205 -  -  -  -  	;	loop variable
   13 D1:E205 47 -  -  -  	ld	b, a
   14 D1:E206 87 -  -  -  	add	a, a
   15 D1:E207 80 -  -  -  	add	a, b
   16 D1:E208 32 40 E2 D1 	ld	(ForVariable1), a
   17 D1:E20C 6F -  -  -  	ld	l, a
   18 D1:E20D E5 -  -  -  	push	hl
   19 D1:E20E CD 28 10 02 		call	_IncFetch
   20 D1:E212 DA 39 AF D1 _:		jp	c, ErrorSyntax
   21 D1:E216 FE 2B -  -  		cp	tComma
   22 D1:E218 C2 39 AF D1 		jp	nz, ErrorSyntax
   23 D1:E21C CD 28 10 02 		call	_IncFetch
   24 D1:E220 -  -  -  -  		;	loop start point
   25 D1:E220 2A 1A EA D1 		ld	hl, (programPtr)
   26 D1:E224 E5 -  -  -  		push	hl
   27 D1:E225 21 C6 52 D0 			ld	hl, tempArg1
   28 D1:E229 22 1A EA D1 			ld	(programPtr), hl
   29 D1:E22D CD 3E B2 D1 			call	ParseExpression
   30 D1:E231 FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
   31 D1:E235 FD CB BE 86 			res	triggered_a_comma, (iy+fExpression3)
   32 D1:E239 CA 39 AF D1 			jp	z, ErrorSyntax
   33 D1:E23D -  -  -  -  ForVariable1 = $+3
   34 D1:E23D 21 DD 2F 00 			ld	hl, 0002FDDh
   35 D1:E241 CD 50 AC D1 			call	InsertHL										;	ld (ix+*), hl
   36 D1:E245 CD 28 10 02 			call	_IncFetch
   37 D1:E249 38 C7 -  -  			jr	c, -_
   38 D1:E24B 2A 1A EA D1 			ld	hl, (programPtr)
   39 D1:E24F 11 C6 52 D0 			ld	de, tempArg1
   40 D1:E253 B7 -  -  -  			or	a
   41 D1:E254 ED 52 -  -  			sbc	hl, de
   42 D1:E256 EB -  -  -  			ex	de, hl
   43 D1:E257 E1 -  -  -  		pop	hl
   44 D1:E258 22 1A EA D1 		ld	(programPtr), hl
   45 D1:E25C D5 -  -  -  		push	de
   46 D1:E25D -  -  -  -  			;	loop end point
   47 D1:E25D CD 3E B2 D1 			call	ParseExpression
   48 D1:E261 FD CB C0 66 			bit	output_is_number, (iy+fExpression1)
   49 D1:E265 20 14 -  -  			jr	nz, ForEndPointIsNumber
   50 D1:E267 -  -  -  -  ForEndPointIsExpression:
   51 D1:E267 3E 22 -  -  			ld	a, 022h
   52 D1:E269 CD 18 AD D1 			call	InsertA										;	ld (******), hl
   53 D1:E26D 2A 1A EA D1 			ld	hl, (programPtr)
   54 D1:E271 22 63 E3 D1 			ld	(ForEndPointExpression), hl
   55 D1:E275 CD 50 AC D1 			call	InsertHL										;	ld (RANDOM), hl
   56 D1:E279 18 17 -  -  			jr	ForGetStep
   57 D1:E27B -  -  -  -  ForEndPointIsNumber:
   58 D1:E27B FD CB AF D6 			set	end_point_is_number, (iy+fFunction2)
   59 D1:E27F 2A 1A EA D1 			ld	hl, (programPtr)
   60 D1:E283 2B -  -  -  			dec	hl
   61 D1:E284 2B -  -  -  			dec	hl
   62 D1:E285 2B -  -  -  			dec	hl
   63 D1:E286 ED 17 -  -  			ld	de, (hl)
   64 D1:E288 2B -  -  -  			dec	hl
   65 D1:E289 22 1A EA D1 			ld	(programPtr), hl
   66 D1:E28D ED 53 71 E3 
              D1 -  -  -  			ld	(ForFixedEndPoint), de
   67 D1:E292 -  -  -  -  ForGetStep:
   68 D1:E292 FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
   69 D1:E296 FD CB BE 86 			res	triggered_a_comma, (iy+fExpression3)
   70 D1:E29A 20 0B -  -  			jr	nz, +_
   71 D1:E29C -  -  -  -  			;	loop step
   72 D1:E29C FD CB AF CE 			set	for_step_is_number, (iy+fFunction2)
   73 D1:E2A0 21 01 00 00 			ld	hl, 1
   74 D1:E2A4 E5 -  -  -  			push	hl
   75 D1:E2A5 18 76 -  -  				jr	ForStart
   76 D1:E2A7 CD 28 10 02 _:			call	_IncFetch
   77 D1:E2AB DA 39 AF D1 			jp	c, ErrorSyntax
   78 D1:E2AF FE B0 -  -  			cp	tChs
   79 D1:E2B1 20 0C -  -  			jr	nz, +_
   80 D1:E2B3 FD CB AF C6 			set	negative_for_step, (iy+fFunction2)
   81 D1:E2B7 CD 28 10 02 			call	_IncFetch
   82 D1:E2BB DA 39 AF D1 			jp	c, ErrorSyntax
   83 D1:E2BF FE 41 -  -  _:			cp	tA
   84 D1:E2C1 38 34 -  -  			jr	c, ForGetStepNumber
   85 D1:E2C3 FE 5C -  -  			cp	ttheta+1
   86 D1:E2C5 D2 F7 E2 D1 			jp	nc, ForGetStepNumber
   87 D1:E2C9 -  -  -  -  ForGetStepVariable:
   88 D1:E2C9 FD CB AF 8E 			res	for_step_is_number, (iy+fFunction2)
   89 D1:E2CD CD 2C 10 02 			call	_CurFetch
   90 D1:E2D1 D6 41 -  -  			sub	tA
   91 D1:E2D3 4F -  -  -  			ld	c, a
   92 D1:E2D4 CD 72 AC D1 			call	InsertHIXC										;	ld hl, (ix+*)
   93 D1:E2D8 CD C0 0F 02 			call	_NxtFetch
   94 D1:E2DC DA 39 AF D1 			jp	c, ErrorSyntax
   95 D1:E2E0 FE 3F -  -  			cp	tEnter
   96 D1:E2E2 C2 39 AF D1 			jp	nz, ErrorSyntax
   97 D1:E2E6 3E 22 -  -  			ld	a, 022h
   98 D1:E2E8 CD 18 AD D1 			call	InsertA										;	ld (*), hl
   99 D1:E2EC 2A 1A EA D1 			ld	hl, (programPtr)
  100 D1:E2F0 E5 -  -  -  			push	hl
  101 D1:E2F1 CD 50 AC D1 				call	InsertHL									;	ld (RANDOM), hl
  102 D1:E2F5 18 26 -  -  				jr	ForStart
  103 D1:E2F7 -  -  -  -  ForGetStepNumber:
  104 D1:E2F7 FD CB AF CE 			set	for_step_is_number, (iy+fFunction2)
  105 D1:E2FB CD 3E B2 D1 			call	ParseExpression
  106 D1:E2FF FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
  107 D1:E303 20 BA -  -  			jr	nz, -_
  108 D1:E305 FD CB C0 66 			bit	output_is_number, (iy+fExpression1)
  109 D1:E309 CA 39 AF D1 			jp	z, ErrorSyntax
  110 D1:E30D 2A 1A EA D1 			ld	hl, (programPtr)
  111 D1:E311 2B -  -  -  			dec	hl
  112 D1:E312 2B -  -  -  			dec	hl
  113 D1:E313 2B -  -  -  			dec	hl
  114 D1:E314 2B -  -  -  			dec	hl
  115 D1:E315 22 1A EA D1 			ld	(programPtr), hl
  116 D1:E319 23 -  -  -  			inc	hl
  117 D1:E31A ED 27 -  -  			ld	hl, (hl)
  118 D1:E31C E5 -  -  -  			push	hl
  119 D1:E31D -  -  -  -  ForStart:
  120 D1:E31D E1 -  -  -  			pop	hl
  121 D1:E31E D1 -  -  -  		pop	de
  122 D1:E31F E5 -  -  -  		push	hl
  123 D1:E320 2A 1A EA D1 			ld	hl, (programPtr)
  124 D1:E324 19 -  -  -  			add	hl, de
  125 D1:E325 E5 -  -  -  			push	hl
  126 D1:E326 D5 -  -  -  				push	de
  127 D1:E327 C1 -  -  -  				pop	bc
  128 D1:E328 ED 5B 1A EA 
              D1 -  -  -  				ld	de, (programPtr)
  129 D1:E32D 21 C6 52 D0 				ld	hl, tempArg1
  130 D1:E331 ED B0 -  -  				ldir
  131 D1:E333 ED 53 1A EA 
              D1 -  -  -  				ld	(programPtr), de
  132 D1:E338 FD CB AF 56 				bit	end_point_is_number, (iy+fFunction2)
  133 D1:E33C 20 30 -  -  				jr	nz, ForInsertEndPointNumber
  134 D1:E33E -  -  -  -  ForInsertEndPointExpression:
  135 D1:E33E 3E B7 -  -  				ld	a, 0B7h
  136 D1:E340 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  137 D1:E344 20 08 -  -  				jr	nz, +_
  138 D1:E346 FD CB AF 56 				bit	end_point_is_number, (iy+fFunction2)
  139 D1:E34A 20 02 -  -  				jr	nz, +_
  140 D1:E34C 3E 37 -  -  				ld	a, 037h
  141 D1:E34E 32 80 E3 D1 _:				ld	(ForSetCarryFlag), a
  142 D1:E352 3E 11 -  -  				ld	a, 011h
  143 D1:E354 CD 18 AD D1 				call	InsertA										;	ld de, *
  144 D1:E358 2A 1A EA D1 				ld	hl, (programPtr)
  145 D1:E35C 11 81 7C FC 				ld	de, UserMem-program
  146 D1:E360 19 -  -  -  				add	hl, de
  147 D1:E361 EB -  -  -  				ex	de, hl
  148 D1:E362 -  -  -  -  ForEndPointExpression = $+1
  149 D1:E362 21 00 00 00 				ld	hl, 0
  150 D1:E366 ED 1F -  -  				ld	(hl), de
  151 D1:E368 CD 50 AC D1 				call	InsertHL										;	ld de, RANDOM
  152 D1:E36C 18 11 -  -  				jr	ForSkip
  153 D1:E36E -  -  -  -  ForInsertEndPointNumber:
  154 D1:E36E 3E 11 -  -  				ld	a, 011h
  155 D1:E370 -  -  -  -  ForFixedEndPoint = $+1
  156 D1:E370 21 00 00 00 				ld	hl, 0
  157 D1:E374 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  158 D1:E378 20 01 -  -  				jr	nz, +_
  159 D1:E37A 23 -  -  -  				inc	hl
  160 D1:E37B CD 4C AC D1 _:				call	InsertAHL										;	ld de, *
  161 D1:E37F -  -  -  -  ForSkip:
  162 D1:E37F -  -  -  -  ForSetCarryFlag = $+1
  163 D1:E37F 21 B7 ED 52 				ld	hl, 052EDB7h
  164 D1:E383 CD 50 AC D1 				call	InsertHL										;	or a \ sbc hl, de
  165 D1:E387 3E D2 -  -  				ld	a, 0D2h
  166 D1:E389 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  167 D1:E38D 28 02 -  -  				jr	z, +_
  168 D1:E38F C6 08 -  -  				add	a, 8
  169 D1:E391 CD 18 AD D1 _:				call	InsertA										;	jp [n]c, *
  170 D1:E395 2A 1A EA D1 				ld	hl, (programPtr)
  171 D1:E399 E5 -  -  -  				push	hl
  172 D1:E39A CD 50 AC D1 					call	InsertHL									;	jp [n]c, RANDOM
  173 D1:E39E FD 46 AF -  					ld	b, (iy+fFunction2)
  174 D1:E3A1 C5 -  -  -  					push	bc
  175 D1:E3A2 CD 99 AA D1 						call	ParseProgramUntilEnd
  176 D1:E3A6 C1 -  -  -  					pop	bc
  177 D1:E3A7 FD 70 AF -  					ld	(iy+fFunction2), b
  178 D1:E3AA FE D0 -  -  					cp	tElse
  179 D1:E3AC CA 39 AF D1 					jp	z, ErrorSyntax
  180 D1:E3B0 DD 21 00 00 
              00 -  -  -  					ld	ix, 0
  181 D1:E3B5 DD 39 -  -  					add	ix, sp
  182 D1:E3B7 DD 7E 09 -  					ld	a, (ix+9)
  183 D1:E3BA 21 DD 27 00 					ld	hl, 00027DDh
  184 D1:E3BE CD 70 1D 02 					call	_SetHLUToA
  185 D1:E3C2 CD 50 AC D1 					call	InsertHL									;	ld hl, (ix+*)
  186 D1:E3C6 C1 -  -  -  				pop	bc
  187 D1:E3C7 D1 -  -  -  			pop	de
  188 D1:E3C8 E1 -  -  -  		pop	hl
  189 D1:E3C9 D5 -  -  -  		push	de
  190 D1:E3CA C5 -  -  -  			push	bc
  191 D1:E3CB FD CB AF 4E 				bit	for_step_is_number, (iy+fFunction2)
  192 D1:E3CF 28 19 -  -  				jr	z, InsertVariableChange
  193 D1:E3D1 -  -  -  -  InsertNumberChange:
  194 D1:E3D1 EB -  -  -  				ex	de, hl
  195 D1:E3D2 3E 01 -  -  				ld	a, 1
  196 D1:E3D4 32 3B EA D1 				ld	(ExprOutput), a
  197 D1:E3D8 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  198 D1:E3DC 28 06 -  -  				jr	z, $+8
  199 D1:E3DE CD DA D3 D1 				call	SubChainAnsNumber
  200 D1:E3E2 18 04 -  -  				jr	$+6
  201 D1:E3E4 CD A2 D5 D1 				call	AddChainAnsNumber
  202 D1:E3E8 18 29 -  -  				jr	InsertStop
  203 D1:E3EA -  -  -  -  InsertVariableChange:
  204 D1:E3EA EB -  -  -  				ex	de, hl
  205 D1:E3EB 3E 11 -  -  				ld	a, 011h
  206 D1:E3ED CD 18 AD D1 				call	InsertA										;	ld de, *
  207 D1:E3F1 2A 1A EA D1 				ld	hl, (programPtr)
  208 D1:E3F5 01 81 7C FC 				ld	bc, UserMem-program
  209 D1:E3F9 09 -  -  -  				add	hl, bc
  210 D1:E3FA EB -  -  -  				ex	de, hl
  211 D1:E3FB ED 1F -  -  				ld	(hl), de
  212 D1:E3FD CD 50 AC D1 				call	InsertHL										;	ld de, RANDOM
  213 D1:E401 3E 19 -  -  				ld	a, 019h
  214 D1:E403 21 B7 ED 52 				ld	hl, 052EDB7h
  215 D1:E407 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  216 D1:E40B C4 50 AC D1 				call	nz, InsertHL									;	or a \ sbc hl, de
  217 D1:E40F CC 18 AD D1 				call	z, InsertA										;	add hl, de
  218 D1:E413 -  -  -  -  InsertStop:
  219 D1:E413 C1 -  -  -  			pop	bc
  220 D1:E414 D1 -  -  -  		pop	de
  221 D1:E415 E1 -  -  -  	pop	hl
  222 D1:E416 7D -  -  -  	ld	a, l
  223 D1:E417 21 DD 2F 00 	ld	hl, 0002FDDh
  224 D1:E41B CD 70 1D 02 	call	_SetHLUToA
  225 D1:E41F CD 50 AC D1 	call	InsertHL													;	ld (ix+*), hl
  226 D1:E423 B7 -  -  -  	or	a
  227 D1:E424 ED 52 -  -  	sbc	hl, de
  228 D1:E426 7C -  -  -  	ld	a, h
  229 D1:E427 B7 -  -  -  	or	a
  230 D1:E428 20 07 -  -  	jr	nz, ForBigLoop
  231 D1:E42A 7D -  -  -  	ld	a, l
  232 D1:E42B 2F -  -  -  	cpl
  233 D1:E42C 3D -  -  -  	dec	a
  234 D1:E42D FE 80 -  -  	cp	%10000000
  235 D1:E42F 30 15 -  -  	jr	nc, ForSmallLoop
  236 D1:E431 -  -  -  -  ForBigLoop:
  237 D1:E431 3E C3 -  -  	ld	a, 0C3h
  238 D1:E433 FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  239 D1:E437 28 02 -  -  	jr	z, $+4
  240 D1:E439 3E D2 -  -  	ld	a, 0D2h
  241 D1:E43B 21 81 7C FC 	ld	hl, UserMem-program
  242 D1:E43F 19 -  -  -  	add	hl, de
  243 D1:E440 CD 4C AC D1 	call	InsertAHL													;	jp [nc], ******
  244 D1:E444 18 1A -  -  	jr	ForLoopInsert
  245 D1:E446 -  -  -  -  ForSmallLoop:
  246 D1:E446 DD 6F -  -  	ld	ixl, a
  247 D1:E448 3E 18 -  -  	ld	a, 018h
  248 D1:E44A FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  249 D1:E44E 28 02 -  -  	jr	z, $+4
  250 D1:E450 3E 30 -  -  	ld	a, 030h
  251 D1:E452 CD 18 AD D1 	call	InsertA													;	jr [nc], **
  252 D1:E456 DD 7D -  -  	ld	a, ixl
  253 D1:E458 CD 18 AD D1 	call	InsertA													;	jr [nc], **
  254 D1:E45C 2A 1A EA D1 	ld	hl, (programPtr)
  255 D1:E460 -  -  -  -  ForLoopInsert:
  256 D1:E460 11 81 7C FC 	ld	de, UserMem-program
  257 D1:E464 19 -  -  -  	add	hl, de
  258 D1:E465 EB -  -  -  	ex	de, hl
  259 D1:E466 C5 -  -  -  	push	bc
  260 D1:E467 E1 -  -  -  	pop	hl
  261 D1:E468 ED 1F -  -  	ld	(hl), de
  262 D1:E46A C9 -  -  -  	ret
  263 D1:E46B -  -  -  -  	
  264 D1:E46B -  -  -  -  functionForSmall:
  265 D1:E46B CD 3E B2 D1 	call	ParseExpression
  266 D1:E46F FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  267 D1:E473 28 10 -  -  	jr	z, +_
  268 D1:E475 2A 1A EA D1 	ld	hl, (programPtr)
  269 D1:E479 2B -  -  -  	dec	hl
  270 D1:E47A 2B -  -  -  	dec	hl
  271 D1:E47B 22 1A EA D1 	ld	(programPtr), hl
  272 D1:E47F 2B -  -  -  	dec	hl
  273 D1:E480 2B -  -  -  	dec	hl
  274 D1:E481 36 06 -  -  	ld	(hl), 06h													;	ld b, *
  275 D1:E483 18 06 -  -  	jr	++_
  276 D1:E485 3E 45 -  -  _:	ld	a, 045h
  277 D1:E487 CD 18 AD D1 	call	InsertA													;	ld b, l
  278 D1:E48B 2A 1A EA D1 _:	ld	hl, (programPtr)
  279 D1:E48F E5 -  -  -  	push	hl
  280 D1:E490 3E C5 -  -  		ld	a, 0C5h
  281 D1:E492 CD 18 AD D1 		call	InsertA												;	push bc
  282 D1:E496 CD 99 AA D1 		call	ParseProgramUntilEnd
  283 D1:E49A 3E C1 -  -  		ld	a, 0C1h
  284 D1:E49C CD 18 AD D1 		call	InsertA												;	pop bc
  285 D1:E4A0 D1 -  -  -  	pop	de
  286 D1:E4A1 2A 1A EA D1 	ld	hl, (programPtr)
  287 D1:E4A5 B7 -  -  -  	or	a
  288 D1:E4A6 ED 52 -  -  	sbc	hl, de
  289 D1:E4A8 7C -  -  -  	ld	a, h
  290 D1:E4A9 B7 -  -  -  	or	a
  291 D1:E4AA C2 8B AF D1 _:	jp	nz, ErrorTooLargeLoop
  292 D1:E4AE 7D -  -  -  	ld	a, l
  293 D1:E4AF 2F -  -  -  	cpl
  294 D1:E4B0 3D -  -  -  	dec	a
  295 D1:E4B1 FE 80 -  -  	cp	%10000000
  296 D1:E4B3 DA AA E4 D1 	jp	c, -_
  297 D1:E4B7 47 -  -  -  	ld	b, a
  298 D1:E4B8 3E 10 -  -  	ld	a, 010h
  299 D1:E4BA CD 18 AD D1 	call	InsertA													;	djnz *
  300 D1:E4BE 78 -  -  -  	ld	a, b
  301 D1:E4BF C3 18 AD D1 	jp	InsertA														;	djnz *
Listing for file "ice.asm"
  449 D1:E4C3 -  -  -  -  #include "operators functions/function_C.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_C.asm"
    1 D1:E4C3 -  -  -  -  CFunction0Args:
    2 D1:E4C3 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
    3 D1:E4C7 C2 39 AF D1 	jp	nz, ErrorSyntax
    4 D1:E4CB 06 00 -  -  	ld	b, 0
    5 D1:E4CD -  -  -  -  CInsertCallPops:
    6 D1:E4CD FD CB B0 CE 	set	modified_iy, (iy+fAlways1)
    7 D1:E4D1 21 48 EA D1 	ld	hl, usedCroutines
    8 D1:E4D5 -  -  -  -  CFunctionArgsSMC = $+1
    9 D1:E4D5 11 00 00 00 	ld	de, 0
   10 D1:E4D9 7B -  -  -  	ld	a, e
   11 D1:E4DA B7 -  -  -  	or	a, a
   12 D1:E4DB 20 0B -  -  	jr	nz, +_
   13 D1:E4DD E5 -  -  -  	push	hl
   14 D1:E4DE 21 2E 27 E5 		ld	hl, 0E5272Eh
   15 D1:E4E2 CD 50 AC D1 		call	InsertHL								; ld l, lcdBpp8 \ push hl
   16 D1:E4E6 04 -  -  -  		inc	b
   17 D1:E4E7 E1 -  -  -  	pop	hl
   18 D1:E4E8 19 -  -  -  _:	add	hl, de
   19 D1:E4E9 5E -  -  -  	ld	e, (hl)
   20 D1:E4EA 16 04 -  -  	ld	d, 4
   21 D1:E4EC ED 5C -  -  	mlt	de
   22 D1:E4EE 21 F6 A8 D1 	ld	hl, CData2-CData+UserMem-4
   23 D1:E4F2 19 -  -  -  	add	hl, de
   24 D1:E4F3 CD 6E AC D1 	call	InsertCallHL									; call *
   25 D1:E4F7 78 -  -  -  	ld	a, b
   26 D1:E4F8 B7 -  -  -  	or	a
   27 D1:E4F9 C8 -  -  -  	ret	z
   28 D1:E4FA 3E E1 -  -  	ld	a, 0E1h
   29 D1:E4FC CD 18 AD D1 _:	call	InsertA
   30 D1:E500 10 FA -  -  	djnz	-_
   31 D1:E502 C9 -  -  -  	ret											; pop hl
   32 D1:E503 -  -  -  -  	
   33 D1:E503 -  -  -  -  CFunction1Arg:
   34 D1:E503 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   35 D1:E507 CA 39 AF D1 	jp	z, ErrorSyntax
   36 D1:E50B 2A 1A EA D1 	ld	hl, (programPtr)
   37 D1:E50F FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   38 D1:E513 CD CF AC D1 	call	CGetArgumentLast
   39 D1:E517 06 01 -  -  	ld	b, 1
   40 D1:E519 18 B2 -  -  	jr	CInsertCallPops
   41 D1:E51B -  -  -  -  		
   42 D1:E51B -  -  -  -  CFunction2Args:
   43 D1:E51B FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   44 D1:E51F CA 39 AF D1 	jp	z, ErrorSyntax
   45 D1:E523 2A 1A EA D1 	ld	hl, (programPtr)
   46 D1:E527 22 39 E5 D1 	ld	(CFunction2ArgsSMC2), hl
   47 D1:E52B 21 C6 52 D0 	ld	hl, tempArg1
   48 D1:E52F FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   49 D1:E533 CD D3 AC D1 	call	CGetArgument
   50 D1:E537 E5 -  -  -  	push	hl
   51 D1:E538 -  -  -  -  CFunction2ArgsSMC2 = $+1
   52 D1:E538 21 00 00 00 		ld	hl, 0
   53 D1:E53C FD CB B0 5E 		bit	arg2_is_small, (iy+fFunction1)
   54 D1:E540 CD CF AC D1 		call	CGetArgumentLast
   55 D1:E544 ED 5B 1A EA 
              D1 -  -  -  		ld	de, (programPtr)
   56 D1:E549 E1 -  -  -  	pop	hl
   57 D1:E54A 01 C6 52 D0 	ld	bc, tempArg1
   58 D1:E54E CD 3C E8 D1 	call	CCheckIfPrevArgIsSame
   59 D1:E552 CD 25 AD D1 	call	CAddArgument
   60 D1:E556 ED 53 1A EA 
              D1 -  -  -  	ld	(programPtr), de
   61 D1:E55B 06 02 -  -  	ld	b, 2
   62 D1:E55D C3 CD E4 D1 	jp	CInsertCallPops
   63 D1:E561 -  -  -  -  	
   64 D1:E561 -  -  -  -  CFunction3Args:
   65 D1:E561 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   66 D1:E565 CA 39 AF D1 	jp	z, ErrorSyntax
   67 D1:E569 2A 1A EA D1 	ld	hl, (programPtr)
   68 D1:E56D 22 96 E5 D1 	ld	(CFunction3ArgsSMC2), hl
   69 D1:E571 21 C6 52 D0 	ld	hl, tempArg1
   70 D1:E575 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   71 D1:E579 CD D3 AC D1 	call	CGetArgument
   72 D1:E57D FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   73 D1:E581 F5 -  -  -  	push	af
   74 D1:E582 FD CB C0 7E 		bit	output_is_string, (iy+fExpression1)
   75 D1:E586 F5 -  -  -  		push	af
   76 D1:E587 E5 -  -  -  			push	hl
   77 D1:E588 21 AE 56 D0 				ld	hl, tempArg2
   78 D1:E58C FD CB B0 5E 				bit	arg2_is_small, (iy+fFunction1)
   79 D1:E590 CD D3 AC D1 				call	CGetArgument
   80 D1:E594 E5 -  -  -  				push	hl
   81 D1:E595 -  -  -  -  CFunction3ArgsSMC2 = $+1
   82 D1:E595 21 00 00 00 					ld	hl, 0
   83 D1:E599 FD CB B0 56 					bit	arg3_is_small, (iy+fFunction1)
   84 D1:E59D CD CF AC D1 					call	CGetArgumentLast
   85 D1:E5A1 ED 5B 1A EA 
              D1 -  -  -  					ld	de, (programPtr)
   86 D1:E5A6 E1 -  -  -  				pop	hl
   87 D1:E5A7 01 AE 56 D0 				ld	bc, tempArg2
   88 D1:E5AB CD 3C E8 D1 				call	CCheckIfPrevArgIsSame
   89 D1:E5AF CD 25 AD D1 				call	CAddArgument
   90 D1:E5B3 E1 -  -  -  			pop	hl
   91 D1:E5B4 01 C6 52 D0 			ld	bc, tempArg1
   92 D1:E5B8 CD 3C E8 D1 			call	CCheckIfPrevArgIsSame
   93 D1:E5BC B7 -  -  -  			or	a
   94 D1:E5BD ED 42 -  -  			sbc	hl, bc
   95 D1:E5BF E5 -  -  -  			push	hl
   96 D1:E5C0 C1 -  -  -  			pop	bc
   97 D1:E5C1 21 C6 52 D0 			ld	hl, tempArg1
   98 D1:E5C5 ED A0 -  -  			ldi
   99 D1:E5C7 F1 -  -  -  		pop	af
  100 D1:E5C8 28 0B -  -  		jr	z, +_
  101 D1:E5CA E5 -  -  -  		push	hl
  102 D1:E5CB 2A 26 EA D1 			ld	hl, (programDataOffsetPtr)
  103 D1:E5CF 2B -  -  -  			dec	hl
  104 D1:E5D0 2B -  -  -  			dec	hl
  105 D1:E5D1 2B -  -  -  			dec	hl
  106 D1:E5D2 ED 1F -  -  			ld	(hl), de
  107 D1:E5D4 E1 -  -  -  		pop	hl
  108 D1:E5D5 ED B0 -  -  _:		ldir
  109 D1:E5D7 ED 53 1A EA 
              D1 -  -  -  		ld	(programPtr), de
  110 D1:E5DC 06 03 -  -  		ld	b, 3
  111 D1:E5DE CD CD E4 D1 		call	CInsertCallPops
  112 D1:E5E2 3A D6 E4 D1 		ld	a, (CFunctionArgsSMC)
  113 D1:E5E6 FE 3B -  -  		cp	a, 59
  114 D1:E5E8 28 0C -  -  		jr	z, CInsertSprite
  115 D1:E5EA FE 3C -  -  		cp	a, 60
  116 D1:E5EC 28 08 -  -  		jr	z, CInsertSprite
  117 D1:E5EE F1 -  -  -  	pop	af
  118 D1:E5EF C9 -  -  -  	ret
  119 D1:E5F0 -  -  -  -  	
  120 D1:E5F0 -  -  -  -  CInsertSpriteScaled:
  121 D1:E5F0 01 F3 FF FF 		ld	bc, -13
  122 D1:E5F4 18 04 -  -  		jr	+_
  123 D1:E5F6 -  -  -  -  CInsertSprite:
  124 D1:E5F6 01 F5 FF FF 		ld	bc, -11
  125 D1:E5FA F1 -  -  -  _:	pop	af
  126 D1:E5FB 2A 1A EA D1 	ld	hl, (programPtr)
  127 D1:E5FF 28 1B -  -  	jr	z, +_
  128 D1:E601 09 -  -  -  	add	hl, bc
  129 D1:E602 E5 -  -  -  	push	hl
  130 D1:E603 ED 27 -  -  		ld	hl, (hl)
  131 D1:E605 E5 -  -  -  		push	hl
  132 D1:E606 D1 -  -  -  		pop	de
  133 D1:E607 29 -  -  -  		add	hl, hl
  134 D1:E608 19 -  -  -  		add	hl, de
  135 D1:E609 ED 5B 33 EA 
              D0 -  -  -  		ld	de, (PrevProgramPtr)
  136 D1:E60E 19 -  -  -  		add	hl, de
  137 D1:E60F 11 81 7C FC 		ld	de, UserMem - program
  138 D1:E613 19 -  -  -  		add	hl, de
  139 D1:E614 EB -  -  -  		ex	de, hl
  140 D1:E615 E1 -  -  -  	pop	hl
  141 D1:E616 ED 1F -  -  	ld	(hl), de
  142 D1:E618 2B -  -  -  	dec	hl
  143 D1:E619 36 2A -  -  	ld	(hl), 02Ah									; ld hl, (XXXXXX)
  144 D1:E61B C9 -  -  -  	ret
  145 D1:E61C 03 -  -  -  _:	inc	bc
  146 D1:E61D 03 -  -  -  	inc	bc
  147 D1:E61E 03 -  -  -  	inc	bc
  148 D1:E61F 09 -  -  -  	add	hl, bc
  149 D1:E620 22 1A EA D1 	ld	(programPtr), hl
  150 D1:E624 23 -  -  -  	inc	hl
  151 D1:E625 23 -  -  -  	inc	hl
  152 D1:E626 ED 27 -  -  	ld	hl, (hl)
  153 D1:E628 E5 -  -  -  	push	hl
  154 D1:E629 3E E5 -  -  		ld	a, 0E5h
  155 D1:E62B CD 18 AD D1 		call	InsertA									; push hl
  156 D1:E62F 3E D1 -  -  		ld	a, 0D1h
  157 D1:E631 21 29 19 11 		ld	hl, 0111929h
  158 D1:E635 CD 4C AC D1 		call	InsertAHL								; pop de \ add hl, hl \ add hl, de \ ld de, ******
  159 D1:E639 2A 33 EA D0 		ld	hl, (PrevProgramPtr)
  160 D1:E63D 11 81 7C FC 		ld	de, UserMem - program
  161 D1:E641 19 -  -  -  		add	hl, de
  162 D1:E642 CD 50 AC D1 		call	InsertHL								; ld de, XXXXXX
  163 D1:E646 3E 19 -  -  		ld	a, 019h
  164 D1:E648 21 ED 27 E5 		ld	hl, 0E527EDh
  165 D1:E64C CD 4C AC D1 		call	InsertAHL								; add hl, de \ ld hl, (hl) \ push hl
  166 D1:E650 E1 -  -  -  	pop	hl
  167 D1:E651 CD 6E AC D1 	call	InsertCallHL									; call ******
  168 D1:E655 21 E1 E1 E1 	ld	hl, 0E1E1E1h
  169 D1:E659 CD 50 AC D1 	call	InsertHL									; pop hl \ pop hl \ pop hl
  170 D1:E65D 3A D6 E4 D1 	ld	a, (CFunctionArgsSMC)
  171 D1:E661 FE 3E -  -  	cp	a, 62
  172 D1:E663 D8 -  -  -  	ret	c
  173 D1:E664 3E E1 -  -  	ld	a, 0E1h
  174 D1:E666 CD 18 AD D1 	call	InsertA										; pop hl
  175 D1:E66A C3 18 AD D1 	jp	InsertA										; pop hl
  176 D1:E66E -  -  -  -  	
  177 D1:E66E -  -  -  -  CFunction4Args:
  178 D1:E66E FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  179 D1:E672 CA 39 AF D1 	jp	z, ErrorSyntax
  180 D1:E676 2A 1A EA D1 	ld	hl, (programPtr)
  181 D1:E67A 22 A6 E6 D1 	ld	(CFunction4ArgsSMC2), hl
  182 D1:E67E 21 C6 52 D0 	ld	hl, tempArg1
  183 D1:E682 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  184 D1:E686 CD D3 AC D1 	call	CGetArgument
  185 D1:E68A E5 -  -  -  	push	hl
  186 D1:E68B 21 AE 56 D0 		ld	hl, tempArg2
  187 D1:E68F FD CB B0 5E 		bit	arg2_is_small, (iy+fFunction1)
  188 D1:E693 CD D3 AC D1 		call	CGetArgument
  189 D1:E697 E5 -  -  -  		push	hl
  190 D1:E698 21 96 5A D0 			ld	hl, tempArg3
  191 D1:E69C FD CB B0 56 			bit	arg3_is_small, (iy+fFunction1)
  192 D1:E6A0 CD D3 AC D1 			call	CGetArgument
  193 D1:E6A4 E5 -  -  -  			push	hl
  194 D1:E6A5 -  -  -  -  CFunction4ArgsSMC2 = $+1
  195 D1:E6A5 21 00 00 00 				ld	hl, 0
  196 D1:E6A9 FD CB B0 4E 				bit	arg4_is_small, (iy+fFunction1)
  197 D1:E6AD CD CF AC D1 				call	CGetArgumentLast
  198 D1:E6B1 ED 5B 1A EA 
              D1 -  -  -  				ld	de, (programPtr)
  199 D1:E6B6 E1 -  -  -  			pop	hl
  200 D1:E6B7 01 96 5A D0 			ld	bc, tempArg3
  201 D1:E6BB CD 3C E8 D1 			call	CCheckIfPrevArgIsSame
  202 D1:E6BF CD 25 AD D1 			call	CAddArgument
  203 D1:E6C3 E1 -  -  -  		pop	hl
  204 D1:E6C4 01 AE 56 D0 		ld	bc, tempArg2
  205 D1:E6C8 CD 3C E8 D1 		call	CCheckIfPrevArgIsSame
  206 D1:E6CC CD 25 AD D1 		call	CAddArgument
  207 D1:E6D0 E1 -  -  -  	pop	hl
  208 D1:E6D1 01 C6 52 D0 	ld	bc, tempArg1
  209 D1:E6D5 CD 3C E8 D1 	call	CCheckIfPrevArgIsSame
  210 D1:E6D9 CD 25 AD D1 	call	CAddArgument
  211 D1:E6DD ED 53 1A EA 
              D1 -  -  -  	ld	(programPtr), de
  212 D1:E6E2 06 04 -  -  	ld	b, 4
  213 D1:E6E4 C3 CD E4 D1 	jp	CInsertCallPops
  214 D1:E6E8 -  -  -  -  	
  215 D1:E6E8 -  -  -  -  CFunction5Args:
  216 D1:E6E8 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  217 D1:E6EC CA 39 AF D1 	jp	z, ErrorSyntax
  218 D1:E6F0 2A 1A EA D1 	ld	hl, (programPtr)
  219 D1:E6F4 22 32 E7 D1 	ld	(CFunction5ArgsSMC2), hl
  220 D1:E6F8 21 C6 52 D0 	ld	hl, tempArg1
  221 D1:E6FC FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  222 D1:E700 CD D3 AC D1 	call	CGetArgument
  223 D1:E704 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  224 D1:E708 F5 -  -  -  	push	af
  225 D1:E709 E5 -  -  -  		push	hl
  226 D1:E70A 21 AE 56 D0 			ld	hl, tempArg2
  227 D1:E70E FD CB B0 5E 			bit	arg2_is_small, (iy+fFunction1)
  228 D1:E712 CD D3 AC D1 			call	CGetArgument
  229 D1:E716 E5 -  -  -  			push	hl
  230 D1:E717 21 96 5A D0 				ld	hl, tempArg3
  231 D1:E71B FD CB B0 56 				bit	arg3_is_small, (iy+fFunction1)
  232 D1:E71F CD D3 AC D1 				call	CGetArgument
  233 D1:E723 E5 -  -  -  				push	hl
  234 D1:E724 21 7E 5E D0 					ld	hl, tempArg4
  235 D1:E728 FD CB B0 4E 					bit	arg4_is_small, (iy+fFunction1)
  236 D1:E72C CD D3 AC D1 					call	CGetArgument
  237 D1:E730 E5 -  -  -  					push	hl
  238 D1:E731 -  -  -  -  CFunction5ArgsSMC2 = $+1
  239 D1:E731 21 00 00 00 						ld	hl, 0
  240 D1:E735 FD CB B0 46 						bit	arg5_is_small, (iy+fFunction1)
  241 D1:E739 CD CF AC D1 						call	CGetArgumentLast
  242 D1:E73D ED 5B 1A EA 
              D1 -  -  -  						ld	de, (programPtr)
  243 D1:E742 E1 -  -  -  					pop	hl
  244 D1:E743 01 7E 5E D0 					ld	bc, tempArg4
  245 D1:E747 CD 3C E8 D1 					call	CCheckIfPrevArgIsSame
  246 D1:E74B CD 25 AD D1 					call	CAddArgument
  247 D1:E74F E1 -  -  -  				pop	hl
  248 D1:E750 01 96 5A D0 				ld	bc, tempArg3
  249 D1:E754 CD 3C E8 D1 				call	CCheckIfPrevArgIsSame
  250 D1:E758 CD 25 AD D1 				call	CAddArgument
  251 D1:E75C E1 -  -  -  			pop	hl
  252 D1:E75D 01 AE 56 D0 			ld	bc, tempArg2
  253 D1:E761 CD 3C E8 D1 			call	CCheckIfPrevArgIsSame
  254 D1:E765 CD 25 AD D1 			call	CAddArgument
  255 D1:E769 E1 -  -  -  		pop	hl
  256 D1:E76A 01 C6 52 D0 		ld	bc, tempArg1
  257 D1:E76E CD 3C E8 D1 		call	CCheckIfPrevArgIsSame
  258 D1:E772 CD 25 AD D1 		call	CAddArgument
  259 D1:E776 ED 53 1A EA 
              D1 -  -  -  		ld	(programPtr), de
  260 D1:E77B 06 05 -  -  		ld	b, 5
  261 D1:E77D CD CD E4 D1 		call	CInsertCallPops
  262 D1:E781 3A D6 E4 D1 		ld	a, (CFunctionArgsSMC)
  263 D1:E785 FE 3E -  -  		cp	a, 62
  264 D1:E787 CA F0 E5 D1 _:		jp	z, CInsertSpriteScaled
  265 D1:E78B FE 3F -  -  		cp	a, 63
  266 D1:E78D 28 F8 -  -  		jr	z, -_
  267 D1:E78F F1 -  -  -  	pop	af
  268 D1:E790 C9 -  -  -  	ret
  269 D1:E791 -  -  -  -  	
  270 D1:E791 -  -  -  -  CFunction6Args:
  271 D1:E791 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  272 D1:E795 CA 39 AF D1 	jp	z, ErrorSyntax
  273 D1:E799 2A 1A EA D1 	ld	hl, (programPtr)
  274 D1:E79D 22 E3 E7 D1 	ld	(CFunction6ArgsSMC2), hl
  275 D1:E7A1 21 C6 52 D0 	ld	hl, tempArg1
  276 D1:E7A5 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  277 D1:E7A9 CD D3 AC D1 	call	CGetArgument
  278 D1:E7AD E5 -  -  -  	push	hl
  279 D1:E7AE 21 AE 56 D0 		ld	hl, tempArg2
  280 D1:E7B2 FD CB B0 5E 		bit	arg2_is_small, (iy+fFunction1)
  281 D1:E7B6 CD D3 AC D1 		call	CGetArgument
  282 D1:E7BA E5 -  -  -  		push	hl
  283 D1:E7BB 21 96 5A D0 			ld	hl, tempArg3
  284 D1:E7BF FD CB B0 56 			bit	arg3_is_small, (iy+fFunction1)
  285 D1:E7C3 CD D3 AC D1 			call	CGetArgument
  286 D1:E7C7 E5 -  -  -  			push	hl
  287 D1:E7C8 21 7E 5E D0 				ld	hl, tempArg4
  288 D1:E7CC FD CB B0 4E 				bit	arg4_is_small, (iy+fFunction1)
  289 D1:E7D0 CD D3 AC D1 				call	CGetArgument
  290 D1:E7D4 E5 -  -  -  				push	hl
  291 D1:E7D5 21 66 62 D0 					ld	hl, tempArg5
  292 D1:E7D9 FD CB B0 46 					bit	arg5_is_small, (iy+fFunction1)
  293 D1:E7DD CD D3 AC D1 					call	CGetArgument
  294 D1:E7E1 E5 -  -  -  					push	hl
  295 D1:E7E2 -  -  -  -  CFunction6ArgsSMC2 = $+1
  296 D1:E7E2 21 00 00 00 						ld	hl, 0
  297 D1:E7E6 BF -  -  -  						cp	a, a					;	reset zero flag
  298 D1:E7E7 CD CF AC D1 						call	CGetArgumentLast
  299 D1:E7EB ED 5B 1A EA 
              D1 -  -  -  						ld	de, (programPtr)
  300 D1:E7F0 E1 -  -  -  					pop	hl
  301 D1:E7F1 01 66 62 D0 					ld	bc, tempArg5
  302 D1:E7F5 CD 3C E8 D1 					call	CCheckIfPrevArgIsSame
  303 D1:E7F9 CD 25 AD D1 					call	CAddArgument
  304 D1:E7FD E1 -  -  -  				pop	hl
  305 D1:E7FE 01 7E 5E D0 				ld	bc, tempArg4
  306 D1:E802 CD 3C E8 D1 				call	CCheckIfPrevArgIsSame
  307 D1:E806 CD 25 AD D1 				call	CAddArgument
  308 D1:E80A E1 -  -  -  			pop	hl
  309 D1:E80B 01 96 5A D0 			ld	bc, tempArg3
  310 D1:E80F CD 3C E8 D1 			call	CCheckIfPrevArgIsSame
  311 D1:E813 CD 25 AD D1 			call	CAddArgument
  312 D1:E817 E1 -  -  -  		pop	hl
  313 D1:E818 01 AE 56 D0 		ld	bc, tempArg2
  314 D1:E81C CD 3C E8 D1 		call	CCheckIfPrevArgIsSame
  315 D1:E820 CD 25 AD D1 		call	CAddArgument
  316 D1:E824 E1 -  -  -  	pop	hl
  317 D1:E825 01 C6 52 D0 	ld	bc, tempArg1
  318 D1:E829 CD 3C E8 D1 	call	CCheckIfPrevArgIsSame
  319 D1:E82D CD 25 AD D1 	call	CAddArgument
  320 D1:E831 ED 53 1A EA 
              D1 -  -  -  	ld	(programPtr), de
  321 D1:E836 06 06 -  -  	ld	b, 6
  322 D1:E838 C3 CD E4 D1 	jp	CInsertCallPops
  323 D1:E83C -  -  -  -  	
  324 D1:E83C -  -  -  -  CCheckIfPrevArgIsSame:
  325 D1:E83C E5 -  -  -  	push	hl
  326 D1:E83D D5 -  -  -  		push	de
  327 D1:E83E C5 -  -  -  			push	bc
  328 D1:E83F B7 -  -  -  				or	a
  329 D1:E840 ED 42 -  -  				sbc	hl, bc
  330 D1:E842 EB -  -  -  				ex	de, hl
  331 D1:E843 ED 52 -  -  				sbc	hl, de
  332 D1:E845 D1 -  -  -  			pop	de
  333 D1:E846 1A -  -  -  _:			ld	a, (de)
  334 D1:E847 BE -  -  -  			cp	a, (hl)
  335 D1:E848 23 -  -  -  			inc	hl
  336 D1:E849 13 -  -  -  			inc	de
  337 D1:E84A 28 FA -  -  			jr	z, -_
  338 D1:E84C D1 -  -  -  		pop	de
  339 D1:E84D E1 -  -  -  	pop	hl
  340 D1:E84E C0 -  -  -  	ret	nz
  341 D1:E84F E5 -  -  -  	push	hl
  342 D1:E850 C1 -  -  -  	pop	bc
  343 D1:E851 0B -  -  -  	dec	bc
  344 D1:E852 C9 -  -  -  	ret
Listing for file "ice.asm"
  450 D1:E853 -  -  -  -  #include "clibs/graphics.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\clibs\graphics.asm"
    1 D1:E853 -  -  -  -  ; Byte:                                                                 . . . . . . . .
    2 D1:E853 -  -  -  -  ;       <---> <------->
    3 D1:E853 -  -  -  -  ;       Args  1 = that argument is small (0-255)
    4 D1:E853 -  -  -  -  ;       1 1 1:
    5 D1:E853 -  -  -  -  ;    	bit   1 reset = not implemented
    6 D1:E853 -  -  -  -  ;		bit   0 set   = special function (none yet)
    7 D1:E853 -  -  -  -  
    8 D1:E853 -  -  -  -  CFunctionsArguments:
    9 D1:E853 00 -  -  -  Begin:									.db 000000000b
   10 D1:E854 00 -  -  -  End_:									.db 000000000b
   11 D1:E855 30 -  -  -  SetColor:								.db 000110000b
   12 D1:E856 00 -  -  -  SetDefaultPalette:						        .db 000000000b
   13 D1:E857 E0 -  -  -  SetPalette:								.db 011100000b
   14 D1:E858 30 -  -  -  FillScreen:								.db 000110000b
   15 D1:E859 48 -  -  -  SetPixel:								.db 001001000b
   16 D1:E85A E0 -  -  -  GetPixel:								.db 011100000b
   17 D1:E85B E0 -  -  -  GetDraw:								.db 011100000b
   18 D1:E85C 30 -  -  -  SetDraw:								.db 000110000b
   19 D1:E85D 00 -  -  -  SwapDraw:								.db 000000000b
   20 D1:E85E 30 -  -  -  Blit:									.db 000110000b
   21 D1:E85F 7C -  -  -  BlitLines:								.db 001111100b
   22 D1:E860 B5 -  -  -  BlitArea:								.db 010110101b
   23 D1:E861 30 -  -  -  PrintChar:								.db 000110000b
   24 D1:E862 48 -  -  -  PrintInt:								.db 001001000b
   25 D1:E863 48 -  -  -  PrintUInt:								.db 001001000b
   26 D1:E864 20 -  -  -  PrintString_:							        .db 000100000b
   27 D1:E865 60 -  -  -  PrintStringXY:							        .db 001100000b
   28 D1:E866 48 -  -  -  SetTextXY:								.db 001001000b
   29 D1:E867 30 -  -  -  SetTextBGColor:							        .db 000110000b
   30 D1:E868 30 -  -  -  SetTextFGColor:							        .db 000110000b
   31 D1:E869 30 -  -  -  SetTextTransparentColor:				                .db 000110000b
   32 D1:E86A E0 -  -  -  SetCustomFontData:						        .db 011100000b
   33 D1:E86B E0 -  -  -  SetCustomFontSpacing:					                .db 011100000b
   34 D1:E86C 30 -  -  -  SetMonospaceFont:						        .db 000110000b
   35 D1:E86D E0 -  -  -  GetStringWidth:							        .db 011100000b
   36 D1:E86E E0 -  -  -  GetCharWidth:							        .db 011100000b
   37 D1:E86F E0 -  -  -  GetTextX:								.db 011100000b
   38 D1:E870 E0 -  -  -  GetTextY:								.db 011100000b
   39 D1:E871 80 -  -  -  Line:									.db 010000000b
   40 D1:E872 60 -  -  -  HorizLine:								.db 001100000b
   41 D1:E873 60 -  -  -  VertLine:								.db 001100000b
   42 D1:E874 60 -  -  -  Circle:									.db 001100000b
   43 D1:E875 60 -  -  -  FillCircle:								.db 001100000b
   44 D1:E876 80 -  -  -  Rectangle:								.db 010000000b
   45 D1:E877 80 -  -  -  FillRectangle:							        .db 010000000b
   46 D1:E878 80 -  -  -  LineNoClip:								.db 010000000b
   47 D1:E879 60 -  -  -  HorizLineNoClip:						        .db 001100000b
   48 D1:E87A 60 -  -  -  VertLineNoClip:							        .db 001100000b
   49 D1:E87B 60 -  -  -  FillCircleNoClip:						        .db 001100000b
   50 D1:E87C 80 -  -  -  RectangleNoClip:						        .db 010000000b
   51 D1:E87D 80 -  -  -  FillRectangleNoClip:					                .db 010000000b
   52 D1:E87E 82 -  -  -  SetClipRegion:							        .db 010000010b
   53 D1:E87F E0 -  -  -  GetClipRegion:							        .db 011100000b
   54 D1:E880 20 -  -  -  ShiftDown:								.db 000100000b
   55 D1:E881 20 -  -  -  ShiftUp:								.db 000100000b
   56 D1:E882 20 -  -  -  ShiftLeft:								.db 000100000b
   57 D1:E883 20 -  -  -  ShiftRight:								.db 000100000b
   58 D1:E884 E0 -  -  -  Tilemap:								.db 011100000b
   59 D1:E885 E0 -  -  -  TilemapNoClip:							        .db 011100000b
   60 D1:E886 E0 -  -  -  TransparentTilemap:						        .db 011100000b
   61 D1:E887 E0 -  -  -  TransparentTilemapNoClip:				                .db 011100000b
   62 D1:E888 E0 -  -  -  TilePtr:								.db 011100000b
   63 D1:E889 E0 -  -  -  TilePtrMapped:							        .db 011100000b
   64 D1:E88A E0 -  -  -  LZDecompress:							        .db 011100000b
   65 D1:E88B E0 -  -  -  AllocSprite:							        .db 011100000b
   66 D1:E88C E0 -  -  -  Sprite:									.db 011100000b
   67 D1:E88D E0 -  -  -  TransparentSprite:						        .db 011100000b
   68 D1:E88E 64 -  -  -  SpriteNoClip:							        .db 001100100b
   69 D1:E88F 64 -  -  -  TransparentSpriteNoClip:				                .db 001100100b
   70 D1:E890 E0 -  -  -  GetSpriteNoClip:						        .db 011100000b
   71 D1:E891 A7 -  -  -  ScaledSpriteNoClip:						        .db 010100111b
   72 D1:E892 A7 -  -  -  ScaledTransparentSpriteNoClip:			                        .db 010100111b
   73 D1:E893 E0 -  -  -  FlipSpriteY:							        .db 011100000b
   74 D1:E894 E0 -  -  -  FlipSpriteX:							        .db 011100000b
   75 D1:E895 E0 -  -  -  RotateSpriteC:							        .db 011100000b
   76 D1:E896 E0 -  -  -  RotateSpriteCC:							        .db 011100000b
   77 D1:E897 E0 -  -  -  RotateSpriteHalf:						        .db 011100000b
   78 D1:E898 E0 -  -  -  Polygon:								.db 011100000b
   79 D1:E899 E0 -  -  -  PolygonNoClip:							        .db 011100000b
   80 D1:E89A C0 -  -  -  FillTriangle:							        .db 011000000b
   81 D1:E89B C0 -  -  -  FillTriangleNoClip:						        .db 011000000b
   82 D1:E89C E0 -  -  -  LZDecompressSprite:						        .db 011100000b
   83 D1:E89D 58 -  -  -  SetTextScale:							        .db 001011000b
   84 D1:E89E 30 -  -  -  SetTransparentColor:					                .db 000110000b
   85 D1:E89F 00 -  -  -  ZeroScreen:								.db 000000000b
   86 D1:E8A0 30 -  -  -  SetTextConfig:							        .db 000110000b
   87 D1:E8A1 E0 -  -  -  GetSpriteChar:							        .db 011100000b
   88 D1:E8A2 E0 -  -  -  Lighten:								.db 011100000b
   89 D1:E8A3 E0 -  -  -  Darken:									.db 011100000b
   90 D1:E8A4 30 -  -  -  SetFontHeight:								.db 000110000b
   91 D1:E8A5 E0 -  -  -  ScaleSprite:								.db 011100000b
   92 D1:E8A6 6C -  -  -  FloodFill:								.db 001101100b
Listing for file "ice.asm"
  451 D1:E8A7 -  -  -  -  #include "data.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\data.asm"
    1 D1:E8A7 -  -  -  -  operators_booleans:
    2 D1:E8A7 04 40 3D 3C 
              6A 6B 6C 6D 
              6E 6F 82 83 
              70 71 00 -  	.db tStore, tAnd, tXor, tOr, tEQ, tLT, tGT, tLE, tGE, tNE, tMul, tDiv, tAdd, tSub, 0			;	0 = temp +
    3 D1:E8B6 -  -  -  -  operators_special:
    4 D1:E8B6 00 01 02 03 
              04 05 05 05 
              05 04 06 06 
              06 07 -  -  	.db 0, 1, 2, 3, 4, 5, 5, 5, 5, 4, 6, 6, 6, 7
    5 D1:E8C4 -  -  -  -  	
    6 D1:E8C4 -  -  -  -  FunctionsWithReturnValue:
    7 D1:E8C4 AD AB 10 -  	.db tGetKey, trand, tLParen
    8 D1:E8C7 -  -  -  -  FunctionsWithReturnValueArguments:
    9 D1:E8C7 21 1A 19 B8 
              EF 0D BC -  	.db tMean, tMin, tMax, tNot, tExtTok, tSqr, tSqrt
   10 D1:E8CE -  -  -  -  FunctionsWithReturnValueEnd:
   11 D1:E8CE -  -  -  -  
   12 D1:E8CE -  -  -  -  FunctionsWithReturnValueStart:
   13 D1:E8CE 83 D0 D1 66 
              CF D1 D1 CB 
              D1 5F CB D1 
              5E CD D1 62 
              CD D1 5A CD 
              D1 -  -  -  	.dl functionRoot, functionSqrt, functionCE, functionNot, functionMax, functionMin, functionMean
   14 D1:E8E3 -  -  -  -  
   15 D1:E8E3 -  -  -  -  FunctionsSingle:
   16 D1:E8E3 E0 DC E1 D8 
              CE D1 D2 DE 
              D3 D5 62 D6 
              D7 2C B3 5F 	.db tOutput, tInput, tClLCD, tPause, tIf, tWhile, tRepeat, tDisp, tFor, tReturn, tVarOut, tLbl, tGoto, tii, tDet, tProg
   17 D1:E8F3 -  -  -  -  FunctionsSingleEnd:
   18 D1:E8F3 -  -  -  -  
   19 D1:E8F3 -  -  -  -  FunctionsSingleStart:
   20 D1:E8F3 3F C5 D1 CF 
              CF D1 81 C6 
              D1 A0 C6 D1 
              66 C6 D1 2C 
              D0 D1 C7 C6 
              D1 E6 E1 D1 	.dl functionPrgm, functionC, functionSkipLine, functionGoto, functionLbl, functionCustom, functionReturn, functionFor
   21 D1:E90B 13 C6 D1 F7 
              C6 D1 ED C8 
              D1 FE C7 D1 
              D0 C9 D1 B4 
              C9 D1 96 CA 
              D1 8A C5 D1 	.dl functionDisp, functionRepeat, functionWhile, functionIf, functionPause, functionClrHome, functionInput, functionOutput
   22 D1:E923 -  -  -  -  	
   23 D1:E923 -  -  -  -  operator_start:
   24 D1:E923 C9 D2 D1 1F 
              D3 D1 80 D3 
              D1 C2 D3 D1 
              54 D4 D1 CE 
              AE D1 -  -  	.dl SubNumberXXX, SubVariableXXX, SubChainPushXXX, SubChainAnsXXX, SubFunctionXXX, SubError
   25 D1:E935 BD D4 D1 F7 
              D4 D1 41 D5 
              D1 8A D5 D1 
              2A D6 D1 D2 
              AE D1 -  -  	.dl AddNumberXXX, AddVariableXXX, AddChainPushXXX, AddChainAnsXXX, AddFunctionXXX, AddError
   26 D1:E947 93 D6 D1 EF 
              D6 D1 62 D7 
              D1 AB D7 D1 
              20 D8 D1 D6 
              AE D1 -  -  	.dl DivNumberXXX, DivVariableXXX, DivChainPushXXX, DivChainAnsXXX, DivFunctionXXX, DivError
   27 D1:E959 7D D8 D1 BA 
              D8 D1 05 D9 
              D1 51 D9 D1 
              2C DA D1 DA 
              AE D1 -  -  	.dl MulNumberXXX, MulVariableXXX, MulChainPushXXX, MulChainAnsXXX, MulFunctionXXX, MulError
   28 D1:E96B 69 DC D1 BF 
              DC D1 38 DD 
              D1 84 DD D1 
              03 DE D1 F8 
              AE D1 -  -  	.dl NEQNumberXXX, NEQVariableXXX, NEQChainPushXXX, NEQChainAnsXXX, NEQFunctionXXX, NEQError
   29 D1:E97D 8F DA D1 EC 
              DA D1 60 DB 
              D1 A7 DB D1 
              08 DC D1 DE 
              AE D1 -  -  	.dl GLETNumberXXX, GLETVariableXXX, GLETChainPushXXX, GLETChainAnsXXX, GLETFunctionXXX, GLETError
   30 D1:E98F 46 DE D1 C2 
              DE D1 47 DF 
              D1 8A DF D1 
              F5 DF D1 06 
              AF D1 -  -  	.dl XORANDNumberXXX, XORANDVariableXXX, XORANDChainPushXXX, XORANDChainAnsXXX, XORANDFunctionXXX, XORANDError
   31 D1:E9A1 38 E0 D1 8F 
              E0 D1 D5 E0 
              D1 F3 E0 D1 
              1A E1 D1 69 
              E1 D1 -  -  	.dl StoNumberXXX, StoVariableXXX, StoChainPushXXX, StoChainAnsXXX, StoFunctionXXX, StoListXXX
   32 D1:E9B3 -  -  -  -  	
   33 D1:E9B3 -  -  -  -  CArguments:
   34 D1:E9B3 C3 E4 D1 03 
              E5 D1 1B E5 
              D1 61 E5 D1 
              6E E6 D1 E8 
              E6 D1 91 E7 
              D1 -  -  -  	.dl CFunction0Args, CFunction1Arg, CFunction2Args, CFunction3Args, CFunction4Args, CFunction5Args, CFunction6Args
   35 D1:E9C8 -  -  -  -  	
   36 D1:E9C8 -  -  -  -  functionCustomStart:
   37 D1:E9C8 49 D0 D1 13 
              D1 D1 9C C6 
              D1 93 D1 D1 	.dl functionExecHex, functionDefineSprite, functionCall, functionCompilePrgm
   38 D1:E9D4 -  -  -  -  	
   39 D1:E9D4 07 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 00 -  precedence:	.db 7, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  0
   40 D1:E9E3 -  -  -  -  	         ;   t+ - + / * ≠ ≥ ≤ > < = or xor and →
   41 D1:E9E3 00 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 06 -  precedence2: 	.db 0, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  6
   42 D1:E9F2 -  -  -  -  
   43 D1:E9F2 -  -  -  -  lists:
   44 D1:E9F2 1F EA D0 96 
              73 D0 C6 52 
              D0 66 94 D0 
              F6 31 D0 2F 
              11 D1 -  -  	.dl L1, L2, L3, L4, L5, L6
   45 D1:EA04 -  -  -  -  	
   46 D1:EA04 -  -  -  -  hexadecimals:
   47 D1:EA04 46 45 44 43 
              42 41 39 38 
              37 36 35 34 
              33 32 31 30 	.db tF, tE, tD, tC, tB, tA, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0
   48 D1:EA14 -  -  -  -  	
   49 D1:EA14 83 EA D0 -  stackPtr:		.dl stack
   50 D1:EA17 6B EE D0 -  outputPtr:		.dl output
   51 D1:EA1A 00 2C D5 -  programPtr:		.dl program
   52 D1:EA1D D7 F5 D0 -  programNamesPtr:	.dl programNamesStack
   53 D1:EA20 D7 F5 D0 -  labelPtr:		.dl labelStack
   54 D1:EA23 BF F9 D0 -  gotoPtr:		.dl gotoStack
   55 D1:EA26 A7 FD D0 -  programDataOffsetPtr:	.dl programDataOffsetStack
   56 D1:EA29 83 03 D1 -  tempStringsPtr:		.dl tempStringsStack
   57 D1:EA2C 5F 09 D1 -  tempListsPtr:		.dl tempListsStack
   58 D1:EA2F 17 15 D1 -  programDataDataPtr:	.dl programDataData
   59 D1:EA32 00 -  -  -  amountOfPrograms	.db 0
   60 D1:EA33 00 -  -  -  openedParensE		.db 0
   61 D1:EA34 00 -  -  -  openedParensF		.db 0
   62 D1:EA35 00 -  -  -  amountOfArguments	.db 0
   63 D1:EA36 00 -  -  -  amountOfCRoutines	.db 0
   64 D1:EA37 00 -  -  -  amountOfEnds		.db 0
   65 D1:EA38 00 -  -  -  amountOfInput		.db 0
   66 D1:EA39 00 -  -  -  amountOfPause		.db 0
   67 D1:EA3A 00 -  -  -  amountOfRoot		.db 0
   68 D1:EA3B 00 -  -  -  ExprOutput		.db 0
   69 D1:EA3C 00 -  -  -  ExprOutput2		.db 0
   70 D1:EA3D 00 -  -  -  AmountOfSubPrograms	.db 0
   71 D1:EA3E -  -  -  -  
   72 D1:EA3E -  -  -  -  varname:
   73 D1:EA3E 06 00 00 00 
              00 00 00 00 
              00 00 -  -  	.db ProtProgObj, 0,0,0,0,0,0,0,0,0
   74 D1:EA48 -  -  -  -  	
   75 D1:EA48 -  -  -  -  usedCroutines:
   76 D1:EA48 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .fill	AMOUNT_OF_C_FUNCTIONS, 0
   77 D1:EA9C -  -  -  -  
   78 D1:EA9C -  -  -  -  ICEAppvar:
   79 D1:EA9C 15 49 43 45 
              41 50 50 56 
              00 -  -  -  	.db AppVarObj, "ICEAPPV", 0
   80 D1:EAA5 -  -  -  -  ICEProgram:
   81 D1:EAA5 06 49 43 45 
              00 -  -  -  	.db ProtProgObj, "ICE", 0
   82 D1:EAAA -  -  -  -  	
   83 D1:EAAA -  -  -  -  ErrorMessageStandard:
   84 D1:EAAA 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 66 6F 
              72 20 27 00 	.db "Invalid arguments for '", 0
   85 D1:EAC2 -  -  -  -  EndErrorMessage:
   86 D1:EAC2 54 6F 6F 20 
              6D 61 6E 79 
              20 45 6E 64 
              73 21 00 -  	.db "Too many Ends!", 0
   87 D1:EAD1 -  -  -  -  GoodCompileMessage:
   88 D1:EAD1 53 75 63 63 
              65 73 66 75 
              6C 6C 79 20 
              63 6F 6D 70 
              69 6C 65 64 
              21 00 -  -  	.db "Succesfully compiled!", 0
   89 D1:EAE7 -  -  -  -  NoProgramsMessage:
   90 D1:EAE7 4E 6F 20 70 
              72 6F 67 72 
              61 6D 73 20 
              66 6F 75 6E 
              64 21 00 -  	.db "No programs found!", 0
   91 D1:EAFA -  -  -  -  InvalidTokenMessage:
   92 D1:EAFA 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              74 6F 6B 65 
              6E 21 00 -  	.db "Unsupported token!", 0
   93 D1:EB0D -  -  -  -  InvalidListArgumentMessage:
   94 D1:EB0D 4F 6E 6C 79 
              20 69 6E 74 
              65 67 65 72 
              73 20 69 6E 
              20 6C 69 73 
              74 73 20 73 
              75 70 70 6F 
              72 74 65 64 
              21 00 -  -  	.db "Only integers in lists supported!", 0
   95 D1:EB2F -  -  -  -  InvalidNameLengthMessage:
   96 D1:EB2F 50 72 6F 67 
              72 61 6D 20 
              6E 61 6D 65 
              20 74 6F 6F 
              20 6C 6F 6E 
              67 21 00 -  	.db "Program name too long!", 0
   97 D1:EB46 -  -  -  -  SameNameMessage:
   98 D1:EB46 4F 75 74 70 
              75 74 20 6E 
              61 6D 65 20 
              69 73 20 74 
              68 65 20 73 
              61 6D 65 20 
              61 73 20 69 
              6E 70 75 74 
              20 6E 61 6D 
              65 21 00 -  	.db "Output name is the same as input name!", 0
   99 D1:EB6D -  -  -  -  WrongSpriteDataMessgae:
  100 D1:EB6D 49 6E 76 61 
              6C 69 64 20 
              73 70 72 69 
              74 65 20 64 
              61 74 61 21 
              00 -  -  -  	.db "Invalid sprite data!", 0
  101 D1:EB82 -  -  -  -  FunctionFunctionMessage:
  102 D1:EB82 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 61 20 
              66 75 6E 63 
              74 69 6F 6E 
              20 69 6E 20 
              61 20 66 75 
              6E 63 74 69 
              6F 6E 21 00 	.db "You can't use a function in a function!", 0
  103 D1:EBAA -  -  -  -  NotFoundMessage:
  104 D1:EBAA 50 72 6F 67 
              72 61 6D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 21 00 -  	.db "Program not found!", 0
  105 D1:EBBD -  -  -  -  ImplementMessage:
  106 D1:EBBD 54 68 69 73 
              20 66 75 6E 
              63 74 69 6F 
              6E 20 68 61 
              73 20 6E 6F 
              74 20 62 65 
              65 6E 20 69 
              6D 70 6C 65 
              6D 65 6E 74 
              65 64 20 79 
              65 74 21 00 	.db "This function has not been implemented yet!", 0
  107 D1:EBE9 -  -  -  -  SyntaxErrorMessage:
  108 D1:EBE9 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 65 6E 
              74 65 72 65 
              64 21 00 -  	.db "Invalid arguments entered!", 0
  109 D1:EC04 -  -  -  -  TooLargeLoopMessage:
  110 D1:EC04 54 6F 6F 20 
              6C 61 72 67 
              65 20 61 6E 
              6F 6E 79 6D 
              6F 75 73 20 
              6C 6F 6F 70 
              21 00 -  -  	.db "Too large anonymous loop!", 0
  111 D1:EC1E -  -  -  -  UsedCodeMessage:
  112 D1:EC1E 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 63 6F 
              64 65 20 62 
              65 66 6F 72 
              65 20 44 65 
              66 69 6E 65 
              53 70 72 69 
              74 65 28 29 
              21 00 -  -  	.db "You can't use code before DefineSprite()!", 0
  113 D1:EC48 -  -  -  -  LineNumber:
  114 D1:EC48 45 72 72 6F 
              72 20 6F 6E 
              20 6C 69 6E 
              65 20 00 -  	.db "Error on line ", 0
  115 D1:EC57 -  -  -  -  MismatchErrorMessage:
  116 D1:EC57 4D 69 73 6D 
              61 74 63 68 
              65 64 20 70 
              61 72 65 6E 
              74 68 65 73 
              69 73 21 00 	.db "Mismatched parenthesis!", 0
  117 D1:EC6F -  -  -  -  UnknownMessage:
  118 D1:EC6F 53 6F 6D 65 
              74 68 69 6E 
              67 20 77 65 
              6E 74 20 77 
              72 6F 6E 67 
              21 20 50 6C 
              65 61 73 65 
              20 72 65 70 
              6F 72 74 20 
              69 74 21 00 	.db "Something went wrong! Please report it!", 0
  119 D1:EC97 -  -  -  -  NotEnoughMem:
  120 D1:EC97 4E 6F 74 20 
              65 6E 6F 75 
              67 68 20 66 
              72 65 65 20 
              52 41 4D 21 
              00 -  -  -  	.db "Not enough free RAM!", 0
  121 D1:ECAC -  -  -  -  LabelErrorMessage:
  122 D1:ECAC 43 61 6E 27 
              74 20 66 69 
              6E 64 20 73 
              70 65 63 69 
              66 69 63 20 
              6C 61 62 65 
              6C 21 00 -  	.db "Can't find specific label!", 0
  123 D1:ECC7 -  -  -  -  StartParseMessage:
  124 D1:ECC7 43 6F 6D 70 
              69 6C 69 6E 
              67 20 70 72 
              6F 67 72 61 
              6D 20 00 -  	.db "Compiling program ", 0
  125 D1:ECDA -  -  -  -  ICEName:
  126 D1:ECDA 49 43 45 20 
              43 6F 6D 70 
              69 6C 65 72 
              20 76 31 2E 
              35 20 2D 20 
              42 79 20 50 
              65 74 65 72 
              20 22 50 54 
              5F 22 20 54 
              69 6C 6C 65 
              6D 61 00 -  	.db "ICE Compiler v1.5 - By Peter \"PT_\" Tillema", 0
  127 D1:ED05 -  -  -  -  PressKey:
  128 D1:ED05 5B 50 72 65 
              73 73 20 61 
              6E 79 20 6B 
              65 79 20 74 
              6F 20 65 78 
              69 74 5D 00 	.db "[Press any key to exit]", 0
  129 D1:ED1D -  -  -  -  	
  130 D1:ED1D -  -  -  -  ;MulTable:
  131 D1:ED1D -  -  -  -  ;  1 + log2(x) + popcnt(x) - (popcnt(x) == 1)
  132 D1:ED1D -  -  -  -  ; https://gist.github.com/jacobly0/049c51a353632d7fa284364f4b6244b6
  133 D1:ED1D -  -  -  -  ;	.db 1 \ add hl, hl \ .db 0,0,0,0,0,0,0,0	                                                                ; 2
  134 D1:ED1D -  -  -  -  ;	.db 4 \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0,0	                                        ; 3
  135 D1:ED1D -  -  -  -  ;	.db 2 \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0,0								; 4
  136 D1:ED1D -  -  -  -  ;	.db 5 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0,0					; 5
  137 D1:ED1D -  -  -  -  ;	.db 5 \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0					; 6
  138 D1:ED1D -  -  -  -  ;	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0,0			; 7
  139 D1:ED1D -  -  -  -  ;	.db 3 \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0							; 8
  140 D1:ED1D -  -  -  -  ;	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0			; 9
  141 D1:ED1D -  -  -  -  ;	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0,0			; 10
  142 D1:ED1D -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0             ; 11
  143 D1:ED1D -  -  -  -  ;	.db 6 \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0                        ; 12
  144 D1:ED1D -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0		; 13
  145 D1:ED1D -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0             ; 14
  146 D1:ED1D -  -  -  -  ;	.db 8 \	push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0	; 15
  147 D1:ED1D -  -  -  -  ;	.db 4 \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0                                       ; 16
  148 D1:ED1D -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0             ; 17
  149 D1:ED1D -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0             ; 18
  150 D1:ED1D -  -  -  -  ;	.db 8 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0	; 19
  151 D1:ED1D -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ .db 0,0             ; 20
  152 D1:ED1D -  -  -  -  	
  153 D1:ED1D -  -  -  -  InputRoutine:
  154 D1:ED1D CD 14 08 02 	call	_ClrScrn
  155 D1:ED21 CD 28 08 02 	call	_HomeUp
  156 D1:ED25 AF -  -  -  	xor	a, a
  157 D1:ED26 32 79 08 D0 	ld	(ioPrompt), a
  158 D1:ED2A 32 99 05 D0 	ld	(curUnder), a
  159 D1:ED2E CD 20 13 02 	call	_GetStringInput
  160 D1:ED32 2A 4E 24 D0 	ld	hl, (editSym)
  161 D1:ED36 CD E8 0A 02 	call	_VarNameToOP1HL
  162 D1:ED3A CD 0C 05 02 	call	_ChkFindSym
  163 D1:ED3E 1A -  -  -  	ld	a, (de)
  164 D1:ED3F 13 -  -  -  	inc	de
  165 D1:ED40 13 -  -  -  	inc	de
  166 D1:ED41 47 -  -  -  	ld	b, a
  167 D1:ED42 ED 62 -  -  	sbc	hl, hl
  168 D1:ED44 C5 -  -  -  _:	push	bc
  169 D1:ED45 29 -  -  -  		add	hl, hl
  170 D1:ED46 E5 -  -  -  		push	hl
  171 D1:ED47 C1 -  -  -  		pop	bc
  172 D1:ED48 29 -  -  -  		add	hl, hl
  173 D1:ED49 29 -  -  -  		add	hl, hl
  174 D1:ED4A 09 -  -  -  		add	hl, bc
  175 D1:ED4B 1A -  -  -  		ld	a, (de)
  176 D1:ED4C D6 30 -  -  		sub	a, t0
  177 D1:ED4E 01 00 00 00 		ld	bc, 0
  178 D1:ED52 4F -  -  -  		ld	c, a
  179 D1:ED53 09 -  -  -  		add	hl, bc
  180 D1:ED54 13 -  -  -  		inc	de
  181 D1:ED55 C1 -  -  -  	pop	bc
  182 D1:ED56 10 EC -  -  	djnz	-_
  183 D1:ED58 -  -  -  -  InputOffset = $+2
  184 D1:ED58 DD 2F 00 -  	ld	(ix+0), hl
  185 D1:ED5B C3 78 15 02 	jp	_DeleteTempEditEqu
  186 D1:ED5F -  -  -  -  InputRoutineEnd:
  187 D1:ED5F -  -  -  -  
  188 D1:ED5F -  -  -  -  RandRoutine:
  189 D1:ED5F DD 27 51 -  	ld	hl, (ix+rand1)
  190 D1:ED62 DD 17 54 -  	ld	de, (ix+rand1+3)
  191 D1:ED65 44 -  -  -  	ld	b, h
  192 D1:ED66 4D -  -  -  	ld	c, l
  193 D1:ED67 29 -  -  -  	add	hl, hl
  194 D1:ED68 CB 13 -  -  	rl	e
  195 D1:ED6A CB 12 -  -  	rl	d
  196 D1:ED6C 29 -  -  -  	add	hl, hl
  197 D1:ED6D CB 13 -  -  	rl	e
  198 D1:ED6F CB 12 -  -  	rl	d
  199 D1:ED71 2C -  -  -  	inc	l
  200 D1:ED72 09 -  -  -  	add	hl, bc
  201 D1:ED73 DD 2F 51 -  	ld	(ix+rand1), hl
  202 D1:ED76 ED 5A -  -  	adc	hl, de
  203 D1:ED78 DD 2F 54 -  	ld	(ix+rand1+3), hl
  204 D1:ED7B EB -  -  -  	ex	de, hl
  205 D1:ED7C DD 27 57 -  	ld	hl, (ix+rand1+6)
  206 D1:ED7F DD 07 5A -  	ld	bc, (ix+rand1+9)
  207 D1:ED82 29 -  -  -  	add	hl, hl
  208 D1:ED83 CB 11 -  -  	rl	c
  209 D1:ED85 CB 10 -  -  	rl	b
  210 D1:ED87 DD 0F 5A -  	ld	(ix+rand1+9), bc
  211 D1:ED8A 9F -  -  -  	sbc	a, a
  212 D1:ED8B E6 C5 -  -  	and	%11000101
  213 D1:ED8D AD -  -  -  	xor	l
  214 D1:ED8E 6F -  -  -  	ld	l, a
  215 D1:ED8F DD 2F 57 -  	ld	(ix+rand1+6), hl
  216 D1:ED92 EB -  -  -  	ex	de, hl
  217 D1:ED93 09 -  -  -  	add	hl, bc
  218 D1:ED94 C9 -  -  -  	ret
  219 D1:ED95 -  -  -  -  RandRoutineEnd:
  220 D1:ED95 -  -  -  -  
  221 D1:ED95 -  -  -  -  DispNumberRoutine:
  222 D1:ED95 3E 12 -  -  	ld	a, 18
  223 D1:ED97 32 96 05 D0 	ld	(curCol), a
  224 D1:ED9B CD E0 1E 02 	call	_DispHL
  225 D1:ED9F CD F0 07 02 	call	_NewLine
  226 D1:EDA3 -  -  -  -  	
  227 D1:EDA3 -  -  -  -  DispStringRoutine:
  228 D1:EDA3 AF -  -  -  	xor	a, a
  229 D1:EDA4 32 96 05 D0 	ld	(curCol), a
  230 D1:EDA8 CD C0 07 02 	call	_PutS
  231 D1:EDAC CD F0 07 02 	call	_NewLine
  232 D1:EDB0 -  -  -  -  
  233 D1:EDB0 -  -  -  -  PauseRoutine:
  234 D1:EDB0 2B -  -  -  	dec	hl
  235 D1:EDB1 -  -  -  -  PauseRoutine2:
  236 D1:EDB1 0E 6E -  -  	ld	c, 110
  237 D1:EDB3 06 20 -  -  _:	ld	b, 32
  238 D1:EDB5 10 FE -  -  	djnz	$
  239 D1:EDB7 0D -  -  -  	dec	c
  240 D1:EDB8 20 F9 -  -  	jr	nz, -_
  241 D1:EDBA B7 -  -  -  	or	a, a
  242 D1:EDBB 11 FF FF FF 	ld	de, -1
  243 D1:EDBF 19 -  -  -  	add	hl, de
  244 D1:EDC0 38 EF -  -  	jr	c, PauseRoutine2
  245 D1:EDC2 C9 -  -  -  	ret
  246 D1:EDC3 -  -  -  -  PauseRoutineEnd:
  247 D1:EDC3 -  -  -  -  
  248 D1:EDC3 -  -  -  -  MeanRoutine:
  249 D1:EDC3 DD 21 00 00 
              00 -  -  -  	ld	ix, 0
  250 D1:EDC8 DD 39 -  -  	add	ix, sp
  251 D1:EDCA 19 -  -  -  	add	hl, de
  252 D1:EDCB E5 -  -  -  	push	hl
  253 D1:EDCC DD CB FF 1E 		rr	(ix-1)
  254 D1:EDD0 E1 -  -  -  	pop	hl
  255 D1:EDD1 CB 1C -  -  	rr	h
  256 D1:EDD3 CB 1D -  -  	rr	l
  257 D1:EDD5 DD 21 3F 38 
              D1 -  -  -  	ld	ix, L1+20000
  258 D1:EDDA C9 -  -  -  	ret
  259 D1:EDDB -  -  -  -  MeanRoutineEnd:
  260 D1:EDDB -  -  -  -  
  261 D1:EDDB -  -  -  -  KeypadRoutine:
  262 D1:EDDB F3 -  -  -  	di
  263 D1:EDDC 21 00 00 F5 	ld	hl, 0F50000h
  264 D1:EDE0 36 02 -  -  	ld	(hl), 2
  265 D1:EDE2 AF -  -  -  	xor	a, a
  266 D1:EDE3 BE -  -  -  _:	cp	a, (hl)
  267 D1:EDE4 20 FD -  -  	jr	nz, -_
  268 D1:EDE6 FB -  -  -  	ei
  269 D1:EDE7 68 -  -  -  	ld	l, b
  270 D1:EDE8 7E -  -  -  	ld	a, (hl)
  271 D1:EDE9 ED 62 -  -  	sbc	hl, hl
  272 D1:EDEB A1 -  -  -  	and	c
  273 D1:EDEC C8 -  -  -  	ret	z
  274 D1:EDED 2C -  -  -  	inc	l
  275 D1:EDEE C9 -  -  -  	ret
  276 D1:EDEF -  -  -  -  KeypadRoutineEnd:
  277 D1:EDEF -  -  -  -  
  278 D1:EDEF -  -  -  -  RootRoutine:
  279 D1:EDEF F3 -  -  -  	di
  280 D1:EDF0 3B -  -  -  	dec sp      ; (sp) = ?
  281 D1:EDF1 E5 -  -  -  	push hl      ; (sp) = ?uhl
  282 D1:EDF2 3B -  -  -  		dec sp      ; (sp) = ?uhl?
  283 D1:EDF3 FD E1 -  -  		pop iy      ; (sp) = ?u, uix = hl?
  284 D1:EDF5 3B -  -  -  		dec sp      ; (sp) = ?u?
  285 D1:EDF6 F1 -  -  -  	pop af      ; af = u?
  286 D1:EDF7 B7 -  -  -  	or  a,a
  287 D1:EDF8 ED 62 -  -  	sbc hl,hl
  288 D1:EDFA EB -  -  -  	ex  de,hl   ; de = 0
  289 D1:EDFB ED 62 -  -  	sbc hl,hl   ; hl = 0
  290 D1:EDFD 01 40 0C 00 	ld  bc,$C40 ; b = 12, c = 0x40
  291 D1:EE01 -  -  -  -  Sqrt24Loop:
  292 D1:EE01 91 -  -  -  	sub     a,c
  293 D1:EE02 ED 52 -  -  	sbc     hl,de
  294 D1:EE04 30 03 -  -  	jr      nc,Sqrt24Skip
  295 D1:EE06 81 -  -  -  	add     a,c
  296 D1:EE07 ED 5A -  -  	adc     hl,de
  297 D1:EE09 -  -  -  -  Sqrt24Skip:
  298 D1:EE09 3F -  -  -  	ccf
  299 D1:EE0A CB 13 -  -  	rl	e
  300 D1:EE0C CB 12 -  -  	rl	d
  301 D1:EE0E FD 29 -  -  	add	iy,iy
  302 D1:EE10 17 -  -  -  	rla
  303 D1:EE11 ED 6A -  -  	adc	hl,hl
  304 D1:EE13 FD 29 -  -  	add	iy,iy
  305 D1:EE15 17 -  -  -  	rla
  306 D1:EE16 ED 6A -  -  	adc	hl,hl
  307 D1:EE18 10 E7 -  -  	djnz	Sqrt24Loop
  308 D1:EE1A EB -  -  -  	ex	de,hl
  309 D1:EE1B C9 -  -  -  	ret
  310 D1:EE1C -  -  -  -  RootRoutineEnd:
  311 D1:EE1C -  -  -  -  
  312 D1:EE1C -  -  -  -  XORANDData:
  313 D1:EE1C 01 FF FF FF 	ld	bc, -1
  314 D1:EE20 09 -  -  -  	add	hl, bc
  315 D1:EE21 9F -  -  -  	sbc	a, a
  316 D1:EE22 EB -  -  -  	ex	de, hl
  317 D1:EE23 57 -  -  -  	ld	d, a
  318 D1:EE24 09 -  -  -  	add	hl, bc
  319 D1:EE25 9F -  -  -  	sbc	a, a
  320 D1:EE26 -  -  -  -  XORANDSMC:
  321 D1:EE26 A2 -  -  -  	and	a, d
  322 D1:EE27 ED 62 -  -  	sbc	hl, hl
  323 D1:EE29 E6 01 -  -  	and	a, 1
  324 D1:EE2B 6F -  -  -  	ld	l, a
  325 D1:EE2C -  -  -  -  
  326 D1:EE2C -  -  -  -  CData:
  327 D1:EE2C DD 21 3F 38 
              D1 -  -  -  	ld	ix, L1+20000
  328 D1:EE31 21 DA A8 D1 	ld	hl, LibLoadAppVar - CData + UserMem
  329 D1:EE35 CD 20 03 02 	call	_Mov9ToOP1
  330 D1:EE39 3E 15 -  -  	ld	a, AppVarObj
  331 D1:EE3B 32 F8 05 D0 	ld	(OP1), a
  332 D1:EE3F CD 0C 05 02 _:	call	_ChkFindSym
  333 D1:EE43 38 24 -  -  	jr	c, NotFound
  334 D1:EE45 CD 98 1F 02 	call	_ChkInRAM
  335 D1:EE49 20 0E -  -  	jr	nz, InArc
  336 D1:EE4B CD 28 06 02 	call	_PushOP1
  337 D1:EE4F CD 48 14 02 	call	_Arc_UnArc
  338 D1:EE53 CD C4 05 02 	call	_PopOP1
  339 D1:EE57 18 E6 -  -  	jr	-_
  340 D1:EE59 -  -  -  -  InArc:
  341 D1:EE59 EB -  -  -  	ex	de, hl
  342 D1:EE5A 11 09 00 00 	ld	de, 9
  343 D1:EE5E 19 -  -  -  	add	hl, de
  344 D1:EE5F 5E -  -  -  	ld	e, (hl)
  345 D1:EE60 19 -  -  -  	add	hl, de
  346 D1:EE61 23 -  -  -  	inc	hl
  347 D1:EE62 23 -  -  -  	inc	hl
  348 D1:EE63 23 -  -  -  	inc	hl
  349 D1:EE64 11 F1 A8 D1 	ld	de, RelocationStart - CData + UserMem
  350 D1:EE68 E9 -  -  -  	jp	(hl)
  351 D1:EE69 -  -  -  -  NotFound:
  352 D1:EE69 CD 14 08 02 	call	_ClrScrn
  353 D1:EE6D CD 28 08 02 	call	_HomeUp
  354 D1:EE71 21 D6 A8 D1 	ld	hl, MissingAppVar - CData + UserMem
  355 D1:EE75 CD C0 07 02 	call	_PutS
  356 D1:EE79 CD F0 07 02 	call	_NewLine
  357 D1:EE7D C3 C0 07 02 	jp	_PutS
  358 D1:EE81 -  -  -  -  MissingAppVar:
  359 D1:EE81 4E 65 65 64 	.db "Need"
  360 D1:EE85 -  -  -  -  LibLoadAppVar:
  361 D1:EE85 20 4C 69 62 
              4C 6F 61 64 
              00 -  -  -  	.db " LibLoad", 0
  362 D1:EE8E 74 69 6E 79 
              2E 63 63 2F 
              63 6C 69 62 
              73 00 -  -  	.db "tiny.cc/clibs", 0
  363 D1:EE9C -  -  -  -  RelocationStart:
  364 D1:EE9C C0 47 52 41 
              50 48 58 00 
              05 -  -  -  	.db 0C0h, "GRAPHX", 0, 5
  365 D1:EEA5 -  -  -  -  CData2:
Listing for file "ice.asm"
  452 D1:EEA5 -  -  -  -  
  453 D1:EEA5 -  -  -  -  stop:
  454 D1:EEA5 -  -  -  -  
  455 D1:EEA5 -  -  -  -  .echo stop-start+14
