    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\ti84pce.inc"
Listing for file "ICE.asm"
    2 00:0000 -  -  -  -  #include "defines.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\defines.asm"
    1 00:0000 -  -  -  -  tempToken				.equ saveSScreen+00
    2 00:0000 -  -  -  -  tempToken2				.equ saveSScreen+01
    3 00:0000 -  -  -  -  InputStartData			.equ saveSScreen+02
    4 00:0000 -  -  -  -  RandStartData			.equ saveSScreen+05
    5 00:0000 -  -  -  -  PauseStartData			.equ saveSScreen+08
    6 00:0000 -  -  -  -  MeanStartData			.equ saveSScreen+11
    7 00:0000 -  -  -  -  KeypadStartData			.equ saveSScreen+14
    8 00:0000 -  -  -  -  
    9 00:0000 -  -  -  -  stack					.equ saveSScreen+00100
   10 00:0000 -  -  -  -  output					.equ saveSScreen+01100
   11 00:0000 -  -  -  -  programNamesStack		.equ saveSScreen+03000
   12 00:0000 -  -  -  -  labelStack				.equ saveSScreen+03000
   13 00:0000 -  -  -  -  gotoStack				.equ saveSScreen+04000
   14 00:0000 -  -  -  -  programDataOffsetStack	.equ saveSScreen+05000
   15 00:0000 -  -  -  -  tempStringsStack		.equ saveSScreen+06500
   16 00:0000 -  -  -  -  tempListsStack			.equ saveSScreen+08000
   17 00:0000 -  -  -  -  spriteStack				.equ saveSScreen+10000
   18 00:0000 -  -  -  -  programDataData			.equ saveSScreen+12000
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  tempArg1				.equ pixelShadow2+0000
   21 00:0000 -  -  -  -  tempArg2				.equ pixelShadow2+1000
   22 00:0000 -  -  -  -  tempArg3				.equ pixelShadow2+2000
   23 00:0000 -  -  -  -  tempArg4				.equ pixelShadow2+3000
   24 00:0000 -  -  -  -  tempArg5				.equ pixelShadow2+4000
   25 00:0000 -  -  -  -  tempArg6				.equ pixelShadow2+5000
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  startTab				.equ saveSScreen
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  program					.equ vRAM+(320*240)
   30 00:0000 -  -  -  -  
   31 00:0000 -  -  -  -  fProgram1				.equ -30h
   32 00:0000 -  -  -  -  comp_with_libs			.equ 0										; used if compile with C libs
   33 00:0000 -  -  -  -  good_compilation		.equ 1										; used if compilation is succesfull
   34 00:0000 -  -  -  -  has_already_input		.equ 2										; only once time "Input" routine
   35 00:0000 -  -  -  -  has_already_rand		.equ 3										; only once time "rand" routine
   36 00:0000 -  -  -  -  has_already_pause		.equ 4										; only once time "Pause" routine
   37 00:0000 -  -  -  -  has_already_mean		.equ 5										; only once time "mean()" routine
   38 00:0000 -  -  -  -  has_already_keypad		.equ 6										; only once time scanning the keypad
   39 00:0000 -  -  -  -  used_code				.equ 7										; DefineSprite( must be in front of all the code
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  fExpression1			.equ -40h
   42 00:0000 -  -  -  -  prev_is_number			.equ 0										; used if a number consists of more digits
   43 00:0000 -  -  -  -  chain_operators			.equ 1										; used if the calculation is needed for another calculation
   44 00:0000 -  -  -  -  last_token_is_ret		.equ 2										; used if last token is "Return"
   45 00:0000 -  -  -  -  op_is_last_one			.equ 3										; used if the operator is the last of that line
   46 00:0000 -  -  -  -  output_is_number		.equ 4										; used if the calculation is only a single number, loop-statements can be 
   47 00:0000 -  -  -  -  ans_set_z_flag			.equ 5										; used if the previous calculation sets the zero flag, useful for loop/conditions
   48 00:0000 -  -  -  -  need_push				.equ 6										; used if Ans may not be overwritten
   49 00:0000 -  -  -  -  output_is_string		.equ 7										; used for strings
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  fExpression2			.equ -41h
   52 00:0000 -  -  -  -  use_mean_routine		.equ 0										; used if the function is mean()
   53 00:0000 -  -  -  -  triggered_a_comma		.equ 1										; used if a comma is entered outside parens, used by functions
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  fFunction1				.equ -50h
   56 00:0000 -  -  -  -  arg1_is_small			.equ 4										; used in C functions
   57 00:0000 -  -  -  -  function_implemented	.equ 4										; used if C function is implemented
   58 00:0000 -  -  -  -  arg2_is_small			.equ 3										; used in C functions
   59 00:0000 -  -  -  -  arg3_is_small			.equ 2										; used in C functions
   60 00:0000 -  -  -  -  arg4_is_small			.equ 1										; used in C functions
   61 00:0000 -  -  -  -  arg5_is_small			.equ 0										; used in C functions
   62 00:0000 -  -  -  -  
   63 00:0000 -  -  -  -  fFunction2				.equ -51h
   64 00:0000 -  -  -  -  negative_for_step		.equ 0										; used for the step in a For loop
   65 00:0000 -  -  -  -  for_step_is_number		.equ 1										; used for the step in a For loop
   66 00:0000 -  -  -  -  end_point_is_number		.equ 2										; used for the end point in a For loop
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  fAlways1				.equ -50h
   69 00:0000 -  -  -  -  displayed_det			.equ 0										; used if the text of a det( function is displayed in the statusbar
   70 00:0000 -  -  -  -  
   71 00:0000 -  -  -  -  typeNumber				.equ 0
   72 00:0000 -  -  -  -  typeVariable			.equ 1
   73 00:0000 -  -  -  -  typeChainPush			.equ 2
   74 00:0000 -  -  -  -  typeChainAns			.equ 3
   75 00:0000 -  -  -  -  typeReturnValue			.equ 4										; getKey, rand
   76 00:0000 -  -  -  -  typeList				.equ 5
   77 00:0000 -  -  -  -  typeOSList				.equ 6
   78 00:0000 -  -  -  -  typeString				.equ 7
   79 00:0000 -  -  -  -  typeFunction			.equ 00111111b
   80 00:0000 -  -  -  -  typeOperator			.equ 00011111b
   81 00:0000 -  -  -  -  
   82 00:0000 -  -  -  -  ChainPush				.equ 0
   83 00:0000 -  -  -  -  ChainAns				.equ 1
   84 00:0000 -  -  -  -  ChainListPush			.equ 2
   85 00:0000 -  -  -  -  ChainListAns			.equ 3
   86 00:0000 -  -  -  -  
   87 00:0000 -  -  -  -  OutputInBC				.equ 0
   88 00:0000 -  -  -  -  OutputInDE				.equ 1
   89 00:0000 -  -  -  -  OutputInHL				.equ 2
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  OutputIsInDE			.equ 0
   92 00:0000 -  -  -  -  OutputIsInHL			.equ 1
   93 00:0000 -  -  -  -  
   94 00:0000 -  -  -  -  ;---------------------------;
   95 00:0000 -  -  -  -  ;----- User Variables ------;
   96 00:0000 -  -  -  -  ;---------------------------;
   97 00:0000 -  -  -  -  Str0					.equ saveSScreen+15500
   98 00:0000 -  -  -  -  Str1					.equ saveSScreen+16000
   99 00:0000 -  -  -  -  Str2					.equ saveSScreen+16500
  100 00:0000 -  -  -  -  Str3					.equ saveSScreen+17000
  101 00:0000 -  -  -  -  Str4					.equ saveSScreen+17500
  102 00:0000 -  -  -  -  Str5					.equ saveSScreen+18000
  103 00:0000 -  -  -  -  Str6					.equ saveSScreen+18500
  104 00:0000 -  -  -  -  Str7					.equ saveSScreen+19000
  105 00:0000 -  -  -  -  Str8					.equ saveSScreen+19500
  106 00:0000 -  -  -  -  Str9					.equ saveSScreen+20000
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  L1						.equ saveSScreen
  109 00:0000 -  -  -  -  L2						.equ cmdPixelShadow
  110 00:0000 -  -  -  -  L3						.equ pixelShadow2
  111 00:0000 -  -  -  -  L4						.equ plotSScreen
  112 00:0000 -  -  -  -  L5						.equ pixelShadow
  113 00:0000 -  -  -  -  L6						.equ cursorImage
  114 00:0000 -  -  -  -  
  115 00:0000 -  -  -  -  ; IX offsets
  116 00:0000 -  -  -  -  vA						.equ 0
  117 00:0000 -  -  -  -  vB						.equ 3
  118 00:0000 -  -  -  -  vC						.equ 6
  119 00:0000 -  -  -  -  vD						.equ 9
  120 00:0000 -  -  -  -  vE						.equ 12
  121 00:0000 -  -  -  -  vF						.equ 15
  122 00:0000 -  -  -  -  vG						.equ 18
  123 00:0000 -  -  -  -  vH						.equ 21
  124 00:0000 -  -  -  -  vI						.equ 24
  125 00:0000 -  -  -  -  vJ						.equ 27
  126 00:0000 -  -  -  -  vK						.equ 30
  127 00:0000 -  -  -  -  vL						.equ 33
  128 00:0000 -  -  -  -  vM						.equ 36
  129 00:0000 -  -  -  -  vN						.equ 39
  130 00:0000 -  -  -  -  vO						.equ 42
  131 00:0000 -  -  -  -  vP						.equ 45
  132 00:0000 -  -  -  -  vQ						.equ 48
  133 00:0000 -  -  -  -  vR						.equ 51
  134 00:0000 -  -  -  -  vS						.equ 54
  135 00:0000 -  -  -  -  vT						.equ 57
  136 00:0000 -  -  -  -  vU						.equ 60
  137 00:0000 -  -  -  -  vV						.equ 63
  138 00:0000 -  -  -  -  vW						.equ 66
  139 00:0000 -  -  -  -  vX						.equ 69
  140 00:0000 -  -  -  -  vY						.equ 72
  141 00:0000 -  -  -  -  vZ						.equ 75
  142 00:0000 -  -  -  -  vtheta					.equ 78
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  rand1					.equ 81
  145 00:0000 -  -  -  -  rand2					.equ 84
Listing for file "ICE.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 EF 7B -  -  .db tExtTok, tAsm84CeCmp
    5 00:0002 -  -  -  -  .org UserMem
    6 D1:A881 -  -  -  -  
    7 D1:A881 -  -  -  -  start:
    8 D1:A881 ED 73 F6 AF 
              D1 -  -  -  	ld (backupSP), sp
    9 D1:A886 2A 17 23 D0 	ld hl, (begPC)
   10 D1:A88A 22 FA AF D1 	ld (backupBegPC), hl
   11 D1:A88E 2A 1A 23 D0 	ld hl, (curPC)
   12 D1:A892 22 02 B0 D1 	ld (backupCurPC), hl
   13 D1:A896 2A 1D 23 D0 	ld hl, (endPC)
   14 D1:A89A 22 0A B0 D1 	ld (backupEndPC), hl
   15 D1:A89E CD 48 08 02 	call _RunIndicOff
   16 D1:A8A2 CD 96 BC D1 	call InstallHooks
   17 D1:A8A6 -  -  -  -  GUI:
   18 D1:A8A6 3E 27 -  -  	ld a, lcdBpp8
   19 D1:A8A8 32 18 00 E3 	ld (mpLcdCtrl), a
   20 D1:A8AC -  -  -  -  SetPalette:
   21 D1:A8AC 21 00 02 E3 	ld hl, mpLcdPalette
   22 D1:A8B0 06 00 -  -  	ld b, 0
   23 D1:A8B2 50 -  -  -  _:	ld d, b
   24 D1:A8B3 78 -  -  -  	ld a, b
   25 D1:A8B4 E6 C0 -  -  	and 011000000b
   26 D1:A8B6 CB 3A -  -  	srl d
   27 D1:A8B8 1F -  -  -  	rra
   28 D1:A8B9 5F -  -  -  	ld e, a
   29 D1:A8BA 3E 1F -  -  	ld a, 000011111b
   30 D1:A8BC A0 -  -  -  	and b
   31 D1:A8BD B3 -  -  -  	or e
   32 D1:A8BE 77 -  -  -  	ld (hl), a
   33 D1:A8BF 23 -  -  -  	inc hl
   34 D1:A8C0 72 -  -  -  	ld (hl), d
   35 D1:A8C1 23 -  -  -  	inc hl
   36 D1:A8C2 04 -  -  -  	inc b
   37 D1:A8C3 20 ED -  -  	jr nz, -_
   38 D1:A8C5 21 00 00 D4 	ld hl, vRAM
   39 D1:A8C9 36 BD -  -  	ld (hl), 189
   40 D1:A8CB E5 -  -  -  	push hl
   41 D1:A8CC D1 -  -  -  	pop de
   42 D1:A8CD 13 -  -  -  	inc de
   43 D1:A8CE 01 80 0C 00 	ld bc, 320*10
   44 D1:A8D2 ED B0 -  -  	ldir
   45 D1:A8D4 36 00 -  -  	ld (hl), 0
   46 D1:A8D6 01 40 01 00 	ld bc, 320
   47 D1:A8DA ED B0 -  -  	ldir
   48 D1:A8DC 36 FF -  -  	ld (hl), 255
   49 D1:A8DE 01 3F 1E 01 	ld bc, 320*229-1
   50 D1:A8E2 ED B0 -  -  	ldir
   51 D1:A8E4 FD CB D0 CE 	set good_compilation, (iy+fProgram1)
   52 D1:A8E8 21 2F EF D1 	ld hl, ICEName
   53 D1:A8EC 3E 01 -  -  	ld a, 1
   54 D1:A8EE 32 AB B7 D1 	ld (TextYPos_ASM), a
   55 D1:A8F2 C6 14 -  -  	add a, 20
   56 D1:A8F4 32 7A B7 D1 	ld (TextXPos_ASM), a
   57 D1:A8F8 CD 64 B0 D1 	call PrintString
   58 D1:A8FC 21 AB B7 D1 	ld hl, TextYPos_ASM
   59 D1:A900 34 -  -  -  	inc (hl)
   60 D1:A901 34 -  -  -  	inc (hl)
   61 D1:A902 2A 9D 25 D0 	ld hl, (progPtr)
   62 D1:A906 -  -  -  -  FindPrograms:
   63 D1:A906 CD A9 BB D1 	call FindNextGoodVar
   64 D1:A90A 20 34 -  -  	jr nz, StopFindingPrograms
   65 D1:A90C E5 -  -  -  	push hl
   66 D1:A90D 3A AB B7 D1 		ld a, (TextYPos_ASM)
   67 D1:A911 C6 0A -  -  		add a, 10
   68 D1:A913 38 28 -  -  		jr c, +_
   69 D1:A915 32 AB B7 D1 		ld (TextYPos_ASM), a
   70 D1:A919 21 0A 00 00 		ld hl, 10
   71 D1:A91D 22 7A B7 D1 		ld (TextXPos_ASM), hl
   72 D1:A921 21 8E EC D1 		ld hl, AmountOfPrograms
   73 D1:A925 34 -  -  -  		inc (hl)
   74 D1:A926 CD 98 1F 02 		call _ChkInRAM
   75 D1:A92A 3E 23 -  -  		ld a, '#'
   76 D1:A92C DC 78 B7 D1 		call c, _PrintChar_ASM
   77 D1:A930 2A 79 EC D1 		ld hl, (ProgramNamesPtr)
   78 D1:A934 11 F8 FF FF 		ld de, -8
   79 D1:A938 19 -  -  -  		add hl, de
   80 D1:A939 CD 64 B0 D1 		call PrintString
   81 D1:A93D E1 -  -  -  _:	pop hl
   82 D1:A93E 18 C6 -  -  	jr FindPrograms
   83 D1:A940 -  -  -  -  StopFindingPrograms:
   84 D1:A940 3E 0D -  -  	ld a, 13
   85 D1:A942 32 AB B7 D1 	ld (TextYPos_ASM), a
   86 D1:A946 21 01 00 00 	ld hl, 1
   87 D1:A94A 22 7A B7 D1 	ld (TextXPos_ASM), hl
   88 D1:A94E 3A 8E EC D1 	ld a, (AmountOfPrograms)
   89 D1:A952 B7 -  -  -  	or a
   90 D1:A953 CA 11 AF D1 	jp z, NoProgramsError
   91 D1:A957 32 C0 A9 D1 	ld (AmountPrograms), a
   92 D1:A95B 2E 01 -  -  	ld l, 1
   93 D1:A95D -  -  -  -  PrintCursor:
   94 D1:A95D 5D -  -  -  	ld e, l
   95 D1:A95E 16 0A -  -  	ld d, 10
   96 D1:A960 ED 5C -  -  	mlt de
   97 D1:A962 1C -  -  -  	inc e
   98 D1:A963 1C -  -  -  	inc e
   99 D1:A964 1C -  -  -  	inc e
  100 D1:A965 7B -  -  -  	ld a, e
  101 D1:A966 32 AB B7 D1 	ld (TextYPos_ASM), a
  102 D1:A96A AF -  -  -  	xor a
  103 D1:A96B 32 D0 B7 D1 	ld (color), a
  104 D1:A96F 3C -  -  -  	inc a
  105 D1:A970 32 7A B7 D1 	ld (TextXPos_ASM), a
  106 D1:A974 3E 3E -  -  	ld a, '>'
  107 D1:A976 CD 78 B7 D1 	call _PrintChar_ASM
  108 D1:A97A 3E FF -  -  	ld a, 255
  109 D1:A97C 32 D0 B7 D1 	ld (color), a
  110 D1:A980 3E 01 -  -  	ld a, 1
  111 D1:A982 32 7A B7 D1 	ld (TextXPos_ASM), a
  112 D1:A986 E5 -  -  -  _:	push hl
  113 D1:A987 CD 4C 01 02 		call _GetCSC
  114 D1:A98B E1 -  -  -  	pop hl
  115 D1:A98C B7 -  -  -  	or a
  116 D1:A98D 28 F7 -  -  	jr z, -_
  117 D1:A98F FE 04 -  -  	cp skUp
  118 D1:A991 28 1E -  -  	jr z, PressedUp
  119 D1:A993 FE 01 -  -  	cp skDown
  120 D1:A995 28 27 -  -  	jr z, PressedDown
  121 D1:A997 FE 0F -  -  	cp skClear
  122 D1:A999 CA E5 AF D1 	jp z, StopProgram
  123 D1:A99D FE 09 -  -  	cp skEnter
  124 D1:A99F 20 E5 -  -  	jr nz, -_
  125 D1:A9A1 -  -  -  -  PressedEnter:
  126 D1:A9A1 2D -  -  -  	dec l
  127 D1:A9A2 26 08 -  -  	ld h, 8
  128 D1:A9A4 ED 6C -  -  	mlt hl
  129 D1:A9A6 11 D6 F5 D0 	ld de, ProgramNamesStack-1
  130 D1:A9AA 19 -  -  -  	add hl, de
  131 D1:A9AB CD 20 03 02 	call _Mov9ToOP1
  132 D1:A9AF 18 1B -  -  	jr StartParsing
  133 D1:A9B1 -  -  -  -  PressedUp:
  134 D1:A9B1 7D -  -  -  	ld a, l
  135 D1:A9B2 3D -  -  -  	dec a
  136 D1:A9B3 28 D1 -  -  	jr z, -_
  137 D1:A9B5 2D -  -  -  	dec l
  138 D1:A9B6 3E 17 -  -  	ld a, 23
  139 D1:A9B8 CD 78 B7 D1 	call _PrintChar_ASM
  140 D1:A9BC 18 9F -  -  	jr PrintCursor
  141 D1:A9BE -  -  -  -  PressedDown:
  142 D1:A9BE 7D -  -  -  	ld a, l
  143 D1:A9BF -  -  -  -  AmountPrograms = $+1
  144 D1:A9BF FE 00 -  -  	cp a, 0
  145 D1:A9C1 28 C3 -  -  	jr z, -_
  146 D1:A9C3 2C -  -  -  	inc l
  147 D1:A9C4 3E 17 -  -  	ld a, 23
  148 D1:A9C6 CD 78 B7 D1 	call _PrintChar_ASM
  149 D1:A9CA 18 91 -  -  	jr PrintCursor
  150 D1:A9CC -  -  -  -  StartParsing:
  151 D1:A9CC 3E 05 -  -  	ld a, ProgObj
  152 D1:A9CE 32 F8 05 D0 	ld (OP1), a
  153 D1:A9D2 CD 0C 05 02 _:	call _ChkFindSym
  154 D1:A9D6 30 07 -  -  	jr nc, +_
  155 D1:A9D8 21 F8 05 D0 	ld hl, OP1
  156 D1:A9DC 34 -  -  -  	inc (hl)
  157 D1:A9DD 18 F3 -  -  	jr -_
  158 D1:A9DF CD 98 1F 02 _:	call _ChkInRAM
  159 D1:A9E3 30 0A -  -  	jr nc, +_
  160 D1:A9E5 EB -  -  -  	ex de, hl
  161 D1:A9E6 11 09 00 00 	ld de, 9
  162 D1:A9EA 19 -  -  -  	add hl, de
  163 D1:A9EB 5E -  -  -  	ld e, (hl)
  164 D1:A9EC 19 -  -  -  	add hl, de
  165 D1:A9ED 23 -  -  -  	inc hl
  166 D1:A9EE EB -  -  -  	ex de, hl
  167 D1:A9EF 01 00 00 00 _:	ld bc, 0
  168 D1:A9F3 EB -  -  -  	ex de, hl
  169 D1:A9F4 4E -  -  -  	ld c, (hl)																; BC = program length
  170 D1:A9F5 23 -  -  -  	inc hl
  171 D1:A9F6 46 -  -  -  	ld b, (hl)
  172 D1:A9F7 23 -  -  -  	inc hl
  173 D1:A9F8 22 1A 23 D0 	ld (curPC), hl
  174 D1:A9FC 22 17 23 D0 	ld (begPC), hl
  175 D1:AA00 09 -  -  -  	add hl, bc
  176 D1:AA01 2B -  -  -  	dec hl
  177 D1:AA02 22 1D 23 D0 	ld (endPC), hl
  178 D1:AA06 CD 4F B0 D1 	call PrintCompilingProgram
  179 D1:AA0A FD 36 D0 01 	ld (iy+fProgram1), 1
  180 D1:AA0E 21 20 F1 D1 	ld hl, CData
  181 D1:AA12 ED 5B 76 EC 
              D1 -  -  -  	ld de, (programPtr)
  182 D1:AA17 01 84 00 00 	ld bc, CData2 - CData
  183 D1:AA1B ED B0 -  -  	ldir
  184 D1:AA1D ED 53 76 EC 
              D1 -  -  -  	ld (programPtr), de
  185 D1:AA22 CD 6E B0 D1 	call PreScanPrograms
  186 D1:AA26 3E CD -  -  	ld a, 0CDh
  187 D1:AA28 21 48 08 02 	ld hl, _RunIndicOff
  188 D1:AA2C CD 62 AC D1 	call InsertAHL															; call _RunIndicOff
  189 D1:AA30 2A 76 EC D1 	ld hl, (programPtr)
  190 D1:AA34 11 8E 7C FC 	ld de, 4+4+5+UserMem-program
  191 D1:AA38 19 -  -  -  	add hl, de
  192 D1:AA39 CD 62 AC D1 	call InsertAHL															; call *
  193 D1:AA3D 01 FD 21 80 	ld bc, 08021FDh
  194 D1:AA41 11 00 D0 C3 	ld de, 0C3D000h
  195 D1:AA45 21 3C 1A 02 	ld hl, _DrawStatusBar
  196 D1:AA49 CD 97 AC D1 	call InsertBCDEHL														; ld iy, flags \ jp _DrawStatusBar
  197 D1:AA4D 3A 92 EC D1 	ld a, (amountOfCRoutines)
  198 D1:AA51 B7 -  -  -  	or a
  199 D1:AA52 20 0C -  -  	jr nz, CompileProgramFull
  200 D1:AA54 FD CB D0 86 	res comp_with_libs, (iy+fProgram1)
  201 D1:AA58 21 05 2C D5 	ld hl, program+5
  202 D1:AA5C 22 76 EC D1 	ld (programPtr), hl
  203 D1:AA60 -  -  -  -  CompileProgramFull:
  204 D1:AA60 3A 98 EC D1 	ld a, (AmountOfSubPrograms)
  205 D1:AA64 B7 -  -  -  	or a
  206 D1:AA65 20 43 -  -  	jr nz, SkipGetProgramName
  207 D1:AA67 21 99 EC D1 	ld hl, varname
  208 D1:AA6B 1E 09 -  -  	ld e, 9
  209 D1:AA6D -  -  -  -  GetProgramName:
  210 D1:AA6D E5 -  -  -  	push hl
  211 D1:AA6E CD 28 10 02 		call _IncFetch
  212 D1:AA72 E1 -  -  -  	pop hl
  213 D1:AA73 DA 90 AA D1 	jp c, +_
  214 D1:AA77 23 -  -  -  	inc hl
  215 D1:AA78 FE 3F -  -  	cp tEnter
  216 D1:AA7A 28 14 -  -  	jr z, +_
  217 D1:AA7C FE 41 -  -  	cp tA
  218 D1:AA7E DA 1B AF D1 	jp c, InvalidTokenError
  219 D1:AA82 FE 5C -  -  	cp ttheta+1
  220 D1:AA84 D2 1B AF D1 	jp nc, InvalidTokenError
  221 D1:AA88 77 -  -  -  	ld (hl), a
  222 D1:AA89 1D -  -  -  	dec e
  223 D1:AA8A 20 E1 -  -  	jr nz, GetProgramName
  224 D1:AA8C C3 21 AF D1 	jp InvalidNameLength
  225 D1:AA90 21 F9 05 D0 _:	ld hl, OP1+1
  226 D1:AA94 11 9A EC D1 	ld de, varname+1
  227 D1:AA98 06 08 -  -  	ld b, 8
  228 D1:AA9A -  -  -  -  CheckNames:
  229 D1:AA9A 1A -  -  -  	ld a, (de)
  230 D1:AA9B B7 -  -  -  	or a
  231 D1:AA9C 28 07 -  -  	jr z, CheckNamesSameLength
  232 D1:AA9E BE -  -  -  	cp (hl)
  233 D1:AA9F 20 09 -  -  	jr nz, GoodProgramName
  234 D1:AAA1 23 -  -  -  	inc hl
  235 D1:AAA2 13 -  -  -  	inc de
  236 D1:AAA3 10 F5 -  -  	djnz CheckNames
  237 D1:AAA5 -  -  -  -  CheckNamesSameLength:
  238 D1:AAA5 BE -  -  -  	cp (hl)
  239 D1:AAA6 CA 33 AF D1 	jp z, SameNameError
  240 D1:AAAA -  -  -  -  GoodProgramName:
  241 D1:AAAA -  -  -  -  SkipGetProgramName:
  242 D1:AAAA -  -  -  -  
  243 D1:AAAA -  -  -  -  ParseProgramUntilEnd:
  244 D1:AAAA CD 28 10 02 	call _IncFetch
  245 D1:AAAE -  -  -  -  CompileLoop:
  246 D1:AAAE 32 1F EA D0 	ld (tempToken), a
  247 D1:AAB2 47 -  -  -  	ld b, a
  248 D1:AAB3 AF -  -  -  	xor a
  249 D1:AAB4 FD 77 C0 -  	ld (iy+fExpression1), a
  250 D1:AAB7 FD 77 BF -  	ld (iy+fExpression2), a
  251 D1:AABA FD 77 B0 -  	ld (iy+fFunction1), a
  252 D1:AABD FD 77 AF -  	ld (iy+fFunction2), a
  253 D1:AAC0 32 8F EC D1 	ld (openedParensE), a
  254 D1:AAC4 32 90 EC D1 	ld (openedParensF), a
  255 D1:AAC8 78 -  -  -  	ld a, b
  256 D1:AAC9 FE D4 -  -  	cp tEnd
  257 D1:AACB 20 10 -  -  	jr nz, ++_
  258 D1:AACD 21 93 EC D1 _:	ld hl, amountOfEnds
  259 D1:AAD1 7E -  -  -  	ld a, (hl)
  260 D1:AAD2 35 -  -  -  	dec (hl)
  261 D1:AAD3 B7 -  -  -  	or a
  262 D1:AAD4 CA 51 AF D1 	jp z, EndError
  263 D1:AAD8 3A 1F EA D0 	ld a, (tempToken)
  264 D1:AADC C9 -  -  -  	ret
  265 D1:AADD FE D0 -  -  _:	cp tElse
  266 D1:AADF 28 EC -  -  	jr z, --_
  267 D1:AAE1 CD DF B1 D1 	call ParseLine
  268 D1:AAE5 2A 1A 23 D0 	ld hl, (curPC)
  269 D1:AAE9 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  270 D1:AAEE B7 -  -  -  	or a
  271 D1:AAEF ED 52 -  -  	sbc hl, de
  272 D1:AAF1 01 40 01 00 	ld bc, 320
  273 D1:AAF5 CD 54 01 00 	call __imulu
  274 D1:AAF9 E5 -  -  -  	push hl
  275 D1:AAFA 2A 1D 23 D0 		ld hl, (endPC)
  276 D1:AAFE B7 -  -  -  		or a
  277 D1:AAFF ED 52 -  -  		sbc hl, de
  278 D1:AB01 23 -  -  -  		inc hl
  279 D1:AB02 E5 -  -  -  		push hl
  280 D1:AB03 C1 -  -  -  		pop bc
  281 D1:AB04 E1 -  -  -  	pop hl
  282 D1:AB05 CD 40 01 00 	call __idivu
  283 D1:AB09 E5 -  -  -  	push hl
  284 D1:AB0A C1 -  -  -  	pop bc
  285 D1:AB0B 19 -  -  -  	add hl, de
  286 D1:AB0C B7 -  -  -  	or a
  287 D1:AB0D ED 52 -  -  	sbc hl, de
  288 D1:AB0F 28 12 -  -  	jr z, +_
  289 D1:AB11 21 40 1F D4 	ld hl, vRAM+(320*25)
  290 D1:AB15 36 00 -  -  	ld (hl), 0
  291 D1:AB17 E5 -  -  -  	push hl
  292 D1:AB18 D1 -  -  -  	pop de
  293 D1:AB19 13 -  -  -  	inc de
  294 D1:AB1A 0B -  -  -  	dec bc
  295 D1:AB1B CD 48 1D 02 	call _ChkBCIs0
  296 D1:AB1F 28 02 -  -  	jr z, +_
  297 D1:AB21 ED B0 -  -  	ldir
  298 D1:AB23 CD 28 10 02 _:	call _IncFetch
  299 D1:AB27 30 85 -  -  	jr nc, CompileLoop
  300 D1:AB29 -  -  -  -  FindGotos:
  301 D1:AB29 21 93 EC D1 	ld hl, amountOfEnds
  302 D1:AB2D 7E -  -  -  	ld a, (hl)
  303 D1:AB2E B7 -  -  -  	or a
  304 D1:AB2F 28 02 -  -  	jr z, +_
  305 D1:AB31 35 -  -  -  	dec (hl)
  306 D1:AB32 C9 -  -  -  	ret
  307 D1:AB33 21 98 EC D1 _:	ld hl, AmountOfSubPrograms
  308 D1:AB37 7E -  -  -  	ld a, (hl)
  309 D1:AB38 35 -  -  -  	dec (hl)
  310 D1:AB39 B7 -  -  -  	or a
  311 D1:AB3A C0 -  -  -  	ret nz	
  312 D1:AB3B -  -  -  -  FindGotosLoop:
  313 D1:AB3B 2A 7F EC D1 	ld hl, (gotoPtr)
  314 D1:AB3F 11 BF F9 D0 	ld de, gotoStack
  315 D1:AB43 B7 -  -  -  	or a
  316 D1:AB44 ED 52 -  -  	sbc hl, de
  317 D1:AB46 28 4F -  -  	jr z, AddDataToProgramData												; have we finished all the Goto's?
  318 D1:AB48 19 -  -  -  	add hl, de
  319 D1:AB49 2B -  -  -  	dec hl
  320 D1:AB4A 2B -  -  -  	dec hl
  321 D1:AB4B 2B -  -  -  	dec hl
  322 D1:AB4C E5 -  -  -  	push hl
  323 D1:AB4D ED 27 -  -  		ld hl, (hl)
  324 D1:AB4F EB -  -  -  		ex de, hl															; de = pointer to goto data
  325 D1:AB50 2A 7C EC D1 		ld hl, (labelPtr)
  326 D1:AB54 -  -  -  -  FindLabels:
  327 D1:AB54 01 D7 F5 D0 		ld bc, labelStack
  328 D1:AB58 B7 -  -  -  		or a
  329 D1:AB59 ED 42 -  -  		sbc hl, bc
  330 D1:AB5B CA 5D AF D1 		jp z, LabelError													; have we finished all the Lbl's?
  331 D1:AB5F 09 -  -  -  		add hl, bc
  332 D1:AB60 2B -  -  -  		dec hl
  333 D1:AB61 2B -  -  -  		dec hl
  334 D1:AB62 2B -  -  -  		dec hl																; hl = pointer to label
  335 D1:AB63 -  -  -  -  FindLabel:
  336 D1:AB63 E5 -  -  -  		push hl
  337 D1:AB64 D5 -  -  -  			push de
  338 D1:AB65 ED 27 -  -  				ld hl, (hl)													; hl = pointer to label data
  339 D1:AB67 CD 8C AE D1 				call CompareStrings											; is it the right label?
  340 D1:AB6B D1 -  -  -  			pop de
  341 D1:AB6C E1 -  -  -  		pop hl
  342 D1:AB6D 20 22 -  -  		jr nz, LabelNotRightOne
  343 D1:AB6F -  -  -  -  RightLabel:
  344 D1:AB6F 2B -  -  -  		dec hl
  345 D1:AB70 2B -  -  -  		dec hl
  346 D1:AB71 2B -  -  -  		dec hl
  347 D1:AB72 ED 27 -  -  		ld hl, (hl)
  348 D1:AB74 11 81 7C FC 		ld de, UserMem-program
  349 D1:AB78 19 -  -  -  		add hl, de
  350 D1:AB79 EB -  -  -  		ex de, hl															; de points to label memory
  351 D1:AB7A E1 -  -  -  	pop hl																	; hl = pointer to goto
  352 D1:AB7B 2B -  -  -  	dec hl
  353 D1:AB7C 2B -  -  -  	dec hl
  354 D1:AB7D 2B -  -  -  	dec hl
  355 D1:AB7E ED 27 -  -  	ld hl, (hl)																; hl = pointer to jump to
  356 D1:AB80 ED 1F -  -  	ld (hl), de
  357 D1:AB82 2A 7F EC D1 	ld hl, (gotoPtr)
  358 D1:AB86 11 FA FF FF 	ld de, -6
  359 D1:AB8A 19 -  -  -  	add hl, de																; get next Goto
  360 D1:AB8B 22 7F EC D1 	ld (gotoPtr), hl
  361 D1:AB8F 18 AA -  -  	jr FindGotosLoop
  362 D1:AB91 -  -  -  -  LabelNotRightOne:
  363 D1:AB91 2B -  -  -  		dec hl
  364 D1:AB92 2B -  -  -  		dec hl
  365 D1:AB93 2B -  -  -  		dec hl
  366 D1:AB94 18 BE -  -  		jr FindLabels
  367 D1:AB96 -  -  -  -  StopFindLabels:
  368 D1:AB96 E1 -  -  -  	pop hl
  369 D1:AB97 -  -  -  -  AddDataToProgramData:
  370 D1:AB97 FD CB C0 56 	bit last_token_is_ret, (iy+fExpression1)
  371 D1:AB9B 20 06 -  -  	jr nz, +_
  372 D1:AB9D 3E C9 -  -  	ld a, 0C9h
  373 D1:AB9F CD AE AC D1 	call InsertA															; ret
  374 D1:ABA3 2A 8B EC D1 _:	ld hl, (programDataDataPtr)
  375 D1:ABA7 01 FF 18 D1 	ld bc, programDataData
  376 D1:ABAB B7 -  -  -  	or a
  377 D1:ABAC ED 42 -  -  	sbc hl, bc
  378 D1:ABAE E5 -  -  -  	push hl
  379 D1:ABAF C1 -  -  -  	pop bc																	; bc = data length
  380 D1:ABB0 28 3D -  -  	jr z, CreateProgram														; check IF there is data
  381 D1:ABB2 ED 5B 76 EC 
              D1 -  -  -  	ld de, (programPtr)
  382 D1:ABB7 21 FF 18 D1 	ld hl, programDataData
  383 D1:ABBB B7 -  -  -  	or a
  384 D1:ABBC ED 52 -  -  	sbc hl, de
  385 D1:ABBE E5 -  -  -  	push hl
  386 D1:ABBF 19 -  -  -  		add hl, de
  387 D1:ABC0 ED B0 -  -  		ldir																; move the data to the end of the program
  388 D1:ABC2 ED 53 76 EC 
              D1 -  -  -  		ld (programPtr), de
  389 D1:ABC7 D1 -  -  -  	pop de
  390 D1:ABC8 2A 82 EC D1 	ld hl, (programDataOffsetPtr)
  391 D1:ABCC -  -  -  -  AddDataLoop:																; update all the pointers pointing to data
  392 D1:ABCC 01 A7 FD D0 	ld bc, programDataOffsetStack
  393 D1:ABD0 B7 -  -  -  	or a
  394 D1:ABD1 ED 42 -  -  	sbc hl, bc
  395 D1:ABD3 28 1A -  -  	jr z, CreateProgram														; no more pointers left
  396 D1:ABD5 09 -  -  -  	add hl, bc
  397 D1:ABD6 2B -  -  -  	dec hl
  398 D1:ABD7 2B -  -  -  	dec hl
  399 D1:ABD8 2B -  -  -  	dec hl
  400 D1:ABD9 E5 -  -  -  	push hl
  401 D1:ABDA ED 27 -  -  		ld hl, (hl)															; complicated stuff XD
  402 D1:ABDC E5 -  -  -  		push hl
  403 D1:ABDD ED 27 -  -  			ld hl, (hl)
  404 D1:ABDF B7 -  -  -  			or a
  405 D1:ABE0 ED 52 -  -  			sbc hl, de
  406 D1:ABE2 01 81 7C FC 			ld bc, UserMem-program
  407 D1:ABE6 09 -  -  -  			add hl, bc
  408 D1:ABE7 E5 -  -  -  			push hl
  409 D1:ABE8 C1 -  -  -  			pop bc
  410 D1:ABE9 E1 -  -  -  		pop hl
  411 D1:ABEA ED 0F -  -  		ld (hl), bc															; ld (XXXXXX), hl
  412 D1:ABEC E1 -  -  -  	pop hl
  413 D1:ABED 18 DD -  -  	jr AddDataLoop
  414 D1:ABEF -  -  -  -  CreateProgram:
  415 D1:ABEF 21 99 EC D1 	ld hl, varname
  416 D1:ABF3 CD 20 03 02 	call _Mov9ToOP1
  417 D1:ABF7 CD 0C 05 02 	call _ChkFindSym
  418 D1:ABFB 38 13 -  -  	jr c, ++_
  419 D1:ABFD CD 98 1F 02 	call _ChkInRAM
  420 D1:AC01 30 09 -  -  	jr nc, +_
  421 D1:AC03 CD 48 14 02 	call _Arc_Unarc
  422 D1:AC07 01 05 00 00 	ld bc, 5
  423 D1:AC0B 09 -  -  -  	add hl, bc
  424 D1:AC0C CD 88 05 02 _:	call _DelVar
  425 D1:AC10 2A 76 EC D1 _:	ld hl, (programPtr)
  426 D1:AC14 01 00 2C D5 	ld bc, program
  427 D1:AC18 B7 -  -  -  	or a
  428 D1:AC19 ED 42 -  -  	sbc hl, bc
  429 D1:AC1B E5 -  -  -  	push hl
  430 D1:AC1C 01 11 00 00 		ld bc, 17
  431 D1:AC20 09 -  -  -  		add hl, bc
  432 D1:AC21 E5 -  -  -  		push hl
  433 D1:AC22 CD 1C 05 02 			call _EnoughMem
  434 D1:AC26 21 EC EE D1 			ld hl, NotEnoughMem
  435 D1:AC2A DA 61 AF D1 			jp c, DispFinalString
  436 D1:AC2E E1 -  -  -  		pop hl
  437 D1:AC2F 01 F1 FF FF 		ld bc, -15
  438 D1:AC33 09 -  -  -  		add hl, bc
  439 D1:AC34 CD 34 13 02 		call _CreateProtProg
  440 D1:AC38 C1 -  -  -  	pop bc
  441 D1:AC39 13 -  -  -  	inc de
  442 D1:AC3A 13 -  -  -  	inc de
  443 D1:AC3B 21 00 2C D5 	ld hl, program
  444 D1:AC3F EB -  -  -  	ex de, hl
  445 D1:AC40 36 EF -  -  	ld (hl), tExtTok														; insert header
  446 D1:AC42 23 -  -  -  	inc hl
  447 D1:AC43 36 7B -  -  	ld (hl), tAsm84CeCmp
  448 D1:AC45 23 -  -  -  	inc hl
  449 D1:AC46 EB -  -  -  	ex de, hl
  450 D1:AC47 ED B0 -  -  	ldir																	; insert the program data
  451 D1:AC49 21 26 ED D1 	ld hl, GoodCompileMessage
  452 D1:AC4D FD CB D0 CE 	set good_compilation, (iy+fProgram1)
  453 D1:AC51 C3 61 AF D1 	jp DispFinalString														; DONE :D :D :D
  454 D1:AC55 -  -  -  -  	
  455 D1:AC55 -  -  -  -  #include "routines.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\routines.asm"
    1 D1:AC55 -  -  -  -  InsertBCDEAHL:
    2 D1:AC55 E5 -  -  -  	push hl
    3 D1:AC56 C5 -  -  -  		push bc
    4 D1:AC57 E1 -  -  -  		pop hl
    5 D1:AC58 CD 66 AC D1 		call InsertHL
    6 D1:AC5C EB -  -  -  		ex de, hl
    7 D1:AC5D CD 66 AC D1 		call InsertHL
    8 D1:AC61 E1 -  -  -  	pop hl
    9 D1:AC62 -  -  -  -  InsertAHL:
   10 D1:AC62 CD AE AC D1 	call InsertA
   11 D1:AC66 -  -  -  -  InsertHL:
   12 D1:AC66 D5 -  -  -  	push de
   13 D1:AC67 EB -  -  -  		ex de, hl
   14 D1:AC68 2A 76 EC D1 		ld hl, (programPtr)
   15 D1:AC6C ED 1F -  -  		ld (hl), de
   16 D1:AC6E 23 -  -  -  		inc hl
   17 D1:AC6F 23 -  -  -  		inc hl
   18 D1:AC70 23 -  -  -  		inc hl
   19 D1:AC71 22 76 EC D1 		ld (programPtr), hl
   20 D1:AC75 D1 -  -  -  	pop de
   21 D1:AC76 C9 -  -  -  	ret
   22 D1:AC77 -  -  -  -  	
   23 D1:AC77 -  -  -  -  InsertCallHL:
   24 D1:AC77 3E CD -  -  	ld a, 0CDh
   25 D1:AC79 18 E7 -  -  	jr InsertAHL
   26 D1:AC7B -  -  -  -  	
   27 D1:AC7B -  -  -  -  InsertHIXC:
   28 D1:AC7B 26 27 -  -  	ld h, 027h
   29 D1:AC7D 06 03 -  -  	ld b, 3
   30 D1:AC7F ED 4C -  -  	mlt bc
   31 D1:AC81 79 -  -  -  	ld a, c
   32 D1:AC82 18 07 -  -  	jr ++_
   33 D1:AC84 -  -  -  -  InsertIXE:
   34 D1:AC84 26 17 -  -  	ld h, 017h
   35 D1:AC86 16 03 -  -  _:	ld d, 3
   36 D1:AC88 ED 5C -  -  	mlt de
   37 D1:AC8A 7B -  -  -  	ld a, e
   38 D1:AC8B 2E DD -  -  _:	ld l, 0DDh
   39 D1:AC8D CD 70 1D 02 	call _SetHLUToA
   40 D1:AC91 18 D3 -  -  	jr InsertHL																; ld hl/de/bc, (ix+*)
   41 D1:AC93 -  -  -  -  InsertIXC:
   42 D1:AC93 26 07 -  -  	ld h, 007h
   43 D1:AC95 18 EF -  -  	jr --_
   44 D1:AC97 -  -  -  -  
   45 D1:AC97 -  -  -  -  InsertBCDEHL:
   46 D1:AC97 E5 -  -  -  	push hl
   47 D1:AC98 C5 -  -  -  		push bc
   48 D1:AC99 E1 -  -  -  		pop hl
   49 D1:AC9A CD 66 AC D1 		call InsertHL
   50 D1:AC9E E1 -  -  -  	pop hl
   51 D1:AC9F 18 04 -  -  	jr InsertDEHL
   52 D1:ACA1 -  -  -  -  InsertADEHL:
   53 D1:ACA1 CD AE AC D1 	call InsertA
   54 D1:ACA5 -  -  -  -  InsertDEHL:
   55 D1:ACA5 EB -  -  -  	ex de, hl
   56 D1:ACA6 CD 66 AC D1 	call InsertHL
   57 D1:ACAA EB -  -  -  	ex de, hl
   58 D1:ACAB 18 B9 -  -  	jr InsertHL
   59 D1:ACAD -  -  -  -  
   60 D1:ACAD -  -  -  -  InsertE:
   61 D1:ACAD 7B -  -  -  	ld a, e
   62 D1:ACAE -  -  -  -  InsertA:
   63 D1:ACAE E5 -  -  -  	push hl
   64 D1:ACAF 2A 76 EC D1 		ld hl, (programPtr)
   65 D1:ACB3 77 -  -  -  		ld (hl), a
   66 D1:ACB4 23 -  -  -  		inc hl
   67 D1:ACB5 22 76 EC D1 		ld (programPtr), hl
   68 D1:ACB9 E1 -  -  -  	pop hl
   69 D1:ACBA C9 -  -  -  	ret
   70 D1:ACBB -  -  -  -  	
   71 D1:ACBB -  -  -  -  MaybeChangeHLToDE:
   72 D1:ACBB 3A 96 EC D1 	ld a, (ExprOutput)
   73 D1:ACBF B7 -  -  -  	or a
   74 D1:ACC0 C8 -  -  -  	ret z
   75 D1:ACC1 3E EB -  -  _:	ld a, 0EBh
   76 D1:ACC3 C3 AE AC D1 	jp InsertA																; ex de, hl
   77 D1:ACC7 -  -  -  -  	
   78 D1:ACC7 -  -  -  -  MaybeChangeDEToHL:
   79 D1:ACC7 3A 96 EC D1 	ld a, (ExprOutput)
   80 D1:ACCB B7 -  -  -  	or a
   81 D1:ACCC C0 -  -  -  	ret nz
   82 D1:ACCD 18 F2 -  -  	jr -_
   83 D1:ACCF -  -  -  -  	
   84 D1:ACCF -  -  -  -  MaybeChangeDEToHL2:
   85 D1:ACCF 3A 97 EC D1 	ld a, (ExprOutput2)
   86 D1:ACD3 B7 -  -  -  	or a
   87 D1:ACD4 C0 -  -  -  	ret nz
   88 D1:ACD5 18 EA -  -  	jr -_
   89 D1:ACD7 -  -  -  -  	
   90 D1:ACD7 -  -  -  -  InsertPushHLDE:
   91 D1:ACD7 3A 97 EC D1 	ld a, (ExprOutput2)
   92 D1:ACDB 87 -  -  -  	add a, a
   93 D1:ACDC 87 -  -  -  	add a, a
   94 D1:ACDD 87 -  -  -  	add a, a
   95 D1:ACDE 87 -  -  -  	add a, a
   96 D1:ACDF C6 D5 -  -  	add a, 0D5h
   97 D1:ACE1 CD AE AC D1 	call InsertA															; push hl/de
   98 D1:ACE5 2A 76 EC D1 	ld hl, (programPtr)
   99 D1:ACE9 C9 -  -  -  	ret
  100 D1:ACEA -  -  -  -  	
  101 D1:ACEA -  -  -  -  InsertProgramPtrToDataOffset:
  102 D1:ACEA D5 -  -  -  	push de
  103 D1:ACEB 2A 82 EC D1 		ld hl, (programDataOffsetPtr)
  104 D1:ACEF ED 5B 76 EC 
              D1 -  -  -  		ld de, (programPtr)
  105 D1:ACF4 ED 1F -  -  		ld (hl), de
  106 D1:ACF6 23 -  -  -  		inc hl
  107 D1:ACF7 23 -  -  -  		inc hl
  108 D1:ACF8 23 -  -  -  		inc hl
  109 D1:ACF9 22 82 EC D1 		ld (programDataOffsetPtr), hl
  110 D1:ACFD D1 -  -  -  	pop de
  111 D1:ACFE C9 -  -  -  	ret
  112 D1:ACFF -  -  -  -  	
  113 D1:ACFF -  -  -  -  GetFunction:
  114 D1:ACFF C5 -  -  -  	push bc
  115 D1:AD00 D5 -  -  -  		push de
  116 D1:AD01 CD 08 AD D1 			call GetRightFunction
  117 D1:AD05 D1 -  -  -  		pop de
  118 D1:AD06 C1 -  -  -  	pop bc
  119 D1:AD07 C9 -  -  -  	ret
  120 D1:AD08 -  -  -  -  	
  121 D1:AD08 -  -  -  -  GetRightFunction:
  122 D1:AD08 05 -  -  -  	dec b
  123 D1:AD09 CA 4F AD D1 	jp z, GetFunctionDE
  124 D1:AD0D 05 -  -  -  	dec b
  125 D1:AD0E 28 04 -  -  	jr z, GetFunctionHL
  126 D1:AD10 C3 B7 AD D1 	jp GetFunctionBC
  127 D1:AD14 -  -  -  -  GetFunctionHL:
  128 D1:AD14 FE AD -  -  	cp tGetKey
  129 D1:AD16 20 12 -  -  	jr nz, +_
  130 D1:AD18 21 4C 01 02 	ld hl, _GetCSC
  131 D1:AD1C CD 77 AC D1 	call InsertCallHL														; call _GetCSC
  132 D1:AD20 3E B7 -  -  	ld a, 0B7h
  133 D1:AD22 21 ED 62 6F 	ld hl, 06F62EDh
  134 D1:AD26 C3 62 AC D1 	jp InsertAHL															; or a \ sbc hl, hl \ ld l, a
  135 D1:AD2A FE AB -  -  _:	cp trand
  136 D1:AD2C 20 19 -  -  	jr nz, +_
  137 D1:AD2E 3E D5 -  -  	ld a, 0D5h
  138 D1:AD30 FD CB C0 76 	bit need_push, (iy+fExpression1)
  139 D1:AD34 C4 AE AC D1 	call nz, InsertA														; push de
  140 D1:AD38 CD 54 AE D1 	call InsertRandRoutine
  141 D1:AD3C FD CB C0 76 	bit need_push, (iy+fExpression1)
  142 D1:AD40 C8 -  -  -  	ret z
  143 D1:AD41 3E D1 -  -  	ld a, 0D1h
  144 D1:AD43 C3 AE AC D1 	jp InsertA																; pop de
  145 D1:AD47 CD F0 AD D1 _:	call InsertKeypadRoutine1
  146 D1:AD4B C3 18 AE D1 	jp InsertKeypadRoutine2
  147 D1:AD4F -  -  -  -  GetFunctionDE:
  148 D1:AD4F FE AD -  -  	cp tGetKey
  149 D1:AD51 20 2D -  -  	jr nz, +_
  150 D1:AD53 3E E5 -  -  	ld a, 0E5h
  151 D1:AD55 FD CB C0 76 	bit need_push, (iy+fExpression1)
  152 D1:AD59 C4 AE AC D1 	call nz, InsertA														; push hl
  153 D1:AD5D 21 4C 01 02 	ld hl, _GetCSC
  154 D1:AD61 CD 77 AC D1 	call InsertCallHL														; call _GetCSC
  155 D1:AD65 FD CB C0 76 	bit need_push, (iy+fExpression1)
  156 D1:AD69 28 06 -  -  	jr z, $+8
  157 D1:AD6B 3E E1 -  -  	ld a, 0E1h
  158 D1:AD6D CD AE AC D1 	call InsertA															; pop hl
  159 D1:AD71 3E 11 -  -  	ld a, 011h
  160 D1:AD73 CD AE AC D1 	call InsertA															; ld de, *
  161 D1:AD77 AF -  -  -  	xor a
  162 D1:AD78 21 00 00 5F 	ld hl, 05F0000h
  163 D1:AD7C C3 62 AC D1 	jp InsertAHL															; ld de, 0 \ ld e, a
  164 D1:AD80 FE AB -  -  _:	cp trand
  165 D1:AD82 20 1F -  -  	jr nz, ++_
  166 D1:AD84 3E E5 -  -  	ld a, 0E5h
  167 D1:AD86 FD CB C0 76 	bit need_push, (iy+fExpression1)
  168 D1:AD8A C4 AE AC D1 	call nz, InsertA														; push hl
  169 D1:AD8E CD 54 AE D1 	call InsertRandRoutine
  170 D1:AD92 3E EB -  -  _:	ld a, 0EBh
  171 D1:AD94 CD AE AC D1 	call InsertA															; ex de, hl
  172 D1:AD98 FD CB C0 76 	bit need_push, (iy+fExpression1)
  173 D1:AD9C C8 -  -  -  	ret z
  174 D1:AD9D 3E E1 -  -  	ld a, 0E1h
  175 D1:AD9F C3 AE AC D1 	jp InsertA																; pop hl
  176 D1:ADA3 CD F0 AD D1 _:	call InsertKeypadRoutine1
  177 D1:ADA7 3E E5 -  -  	ld a, 0E5h
  178 D1:ADA9 FD CB C0 76 	bit need_push, (iy+fExpression1)
  179 D1:ADAD C4 AE AC D1 	call nz, InsertA														; push hl
  180 D1:ADB1 CD 18 AE D1 	call InsertKeypadRoutine2
  181 D1:ADB5 18 DB -  -  	jr --_
  182 D1:ADB7 -  -  -  -  GetFunctionBC:
  183 D1:ADB7 FE AD -  -  	cp tGetKey
  184 D1:ADB9 20 17 -  -  	jr nz, +_
  185 D1:ADBB 21 4C 01 02 	ld hl, _GetCSC
  186 D1:ADBF CD 77 AC D1 	call InsertCallHL														; call _GetCSC
  187 D1:ADC3 3E 01 -  -  	ld a, 001h
  188 D1:ADC5 CD AE AC D1 	call InsertA															; ld bc, *
  189 D1:ADC9 AF -  -  -  	xor a
  190 D1:ADCA 21 00 00 5F 	ld hl, 05F0000h
  191 D1:ADCE C3 62 AC D1 	jp InsertAHL															; ld bc, 0 \ ld e, a
  192 D1:ADD2 FE AB -  -  _:	cp trand
  193 D1:ADD4 20 10 -  -  	jr nz, ++_
  194 D1:ADD6 CD 54 AE D1 	call InsertRandRoutine
  195 D1:ADDA 3E E5 -  -  _:	ld a, 0E5h
  196 D1:ADDC CD AE AC D1 	call InsertA															; push hl
  197 D1:ADE0 3E C1 -  -  	ld a, 0C1h
  198 D1:ADE2 C3 AE AC D1 	jp InsertA																; pop bc
  199 D1:ADE6 CD F0 AD D1 _:	call InsertKeypadRoutine1
  200 D1:ADEA CD 18 AE D1 	call InsertKeypadRoutine2
  201 D1:ADEE 18 EA -  -  	jr --_
  202 D1:ADF0 -  -  -  -  InsertKeypadRoutine1:
  203 D1:ADF0 47 -  -  -  	ld b, a
  204 D1:ADF1 3E 06 -  -  	ld a, 006h
  205 D1:ADF3 CD AE AC D1 	call InsertA															; ld b, *
  206 D1:ADF7 78 -  -  -  	ld a, b
  207 D1:ADF8 3D -  -  -  	dec a
  208 D1:ADF9 0F -  -  -  	rrca
  209 D1:ADFA 0F -  -  -  	rrca
  210 D1:ADFB E6 0E -  -  	and %0001110
  211 D1:ADFD 4F -  -  -  	ld c, a
  212 D1:ADFE 3E 1E -  -  	ld a, 01Eh
  213 D1:AE00 91 -  -  -  	sub c
  214 D1:AE01 CD AE AC D1 	call InsertA															; ld b, X
  215 D1:AE05 3E 0E -  -  	ld a, 00Eh
  216 D1:AE07 CD AE AC D1 	call InsertA															; ld c, *
  217 D1:AE0B 78 -  -  -  	ld a, b
  218 D1:AE0C E6 07 -  -  	and %00000111
  219 D1:AE0E 47 -  -  -  	ld b, a
  220 D1:AE0F AF -  -  -  	xor a
  221 D1:AE10 37 -  -  -  	scf
  222 D1:AE11 17 -  -  -  _:	rla
  223 D1:AE12 10 FD -  -  	djnz -_
  224 D1:AE14 C3 AE AC D1 	jp InsertA																; ld c, X
  225 D1:AE18 -  -  -  -  	
  226 D1:AE18 -  -  -  -  InsertKeypadRoutine2:
  227 D1:AE18 3E CD -  -  	ld a, 0CDh
  228 D1:AE1A CD AE AC D1 	call InsertA															; call *
  229 D1:AE1E CD EA AC D1 	call InsertProgramPtrToDataOffset
  230 D1:AE22 2A 2D EA D0 	ld hl, (KeypadStartData)
  231 D1:AE26 FD CB D0 76 	bit has_already_keypad, (iy+fProgram1)
  232 D1:AE2A C2 66 AC D1 	jp nz, InsertHL															; call XXXXXX
  233 D1:AE2E 2A 8B EC D1 	ld hl, (programDataDataPtr)
  234 D1:AE32 22 2D EA D0 	ld (KeypadStartData), hl
  235 D1:AE36 E5 -  -  -  	push hl
  236 D1:AE37 D1 -  -  -  	pop de
  237 D1:AE38 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  238 D1:AE3C CD 66 AC D1 	call InsertHL															; call *
  239 D1:AE40 21 ED F0 D1 	ld hl, KeypadRoutine
  240 D1:AE44 01 14 00 00 	ld bc, KeypadRoutineEnd - KeypadRoutine
  241 D1:AE48 ED B0 -  -  	ldir
  242 D1:AE4A ED 53 8B EC 
              D1 -  -  -  	ld (programDataDataPtr), de
  243 D1:AE4F FD CB D0 F6 	set has_already_keypad, (iy+fProgram1)
  244 D1:AE53 C9 -  -  -  	ret
  245 D1:AE54 -  -  -  -  	
  246 D1:AE54 -  -  -  -  InsertRandRoutine:
  247 D1:AE54 3E CD -  -  	ld a, 0CDh
  248 D1:AE56 CD AE AC D1 	call InsertA															; call *
  249 D1:AE5A CD EA AC D1 	call InsertProgramPtrToDataOffset
  250 D1:AE5E 2A 24 EA D0 	ld hl, (RandStartData)
  251 D1:AE62 FD CB D0 5E 	bit has_already_rand, (iy+fProgram1)
  252 D1:AE66 C2 66 AC D1 	jp nz, InsertHL															; call XXXXXX
  253 D1:AE6A 2A 8B EC D1 	ld hl, (programDataDataPtr)
  254 D1:AE6E 22 24 EA D0 	ld (RandStartData), hl
  255 D1:AE72 E5 -  -  -  	push hl
  256 D1:AE73 D1 -  -  -  	pop de
  257 D1:AE74 CD 66 AC D1 	call InsertHL															; call XXXXXX
  258 D1:AE78 21 71 F0 D1 	ld hl, RandRoutine
  259 D1:AE7C 01 36 00 00 	ld bc, RandRoutineEnd - RandRoutine
  260 D1:AE80 ED B0 -  -  	ldir
  261 D1:AE82 ED 53 8B EC 
              D1 -  -  -  	ld (programDataDataPtr), de
  262 D1:AE87 FD CB D0 DE 	set has_already_rand, (iy+fProgram1)
  263 D1:AE8B C9 -  -  -  	ret
  264 D1:AE8C -  -  -  -  	
  265 D1:AE8C -  -  -  -  CompareStrings:
  266 D1:AE8C 1A -  -  -  	ld a, (de)
  267 D1:AE8D BE -  -  -  	cp a, (hl)
  268 D1:AE8E 23 -  -  -  	inc hl
  269 D1:AE8F 13 -  -  -  	inc de
  270 D1:AE90 C0 -  -  -  	ret nz
  271 D1:AE91 FE 3F -  -  	cp tEnter
  272 D1:AE93 20 F7 -  -  	jr nz, CompareStrings
  273 D1:AE95 C9 -  -  -  	ret
  274 D1:AE96 -  -  -  -  	
  275 D1:AE96 -  -  -  -  SubError:
  276 D1:AE96 3E 2D -  -  	ld a, '-'
  277 D1:AE98 18 51 -  -  	jr DispOperatorErrorString
  278 D1:AE9A -  -  -  -  AddError:
  279 D1:AE9A 3E 2B -  -  	ld a, '+'
  280 D1:AE9C 18 4D -  -  	jr DispOperatorErrorString
  281 D1:AE9E -  -  -  -  DivError:
  282 D1:AE9E 3E 2F -  -  	ld a, '/'
  283 D1:AEA0 18 49 -  -  	jr DispOperatorErrorString
  284 D1:AEA2 -  -  -  -  MulError:
  285 D1:AEA2 3E 2A -  -  	ld a, '*'
  286 D1:AEA4 18 45 -  -  	jr DispOperatorErrorString
  287 D1:AEA6 -  -  -  -  	
  288 D1:AEA6 -  -  -  -  GLETError:
  289 D1:AEA6 3A 20 EA D0 	ld a, (tempToken2)
  290 D1:AEAA 4F -  -  -  	ld c, a
  291 D1:AEAB FE 6E -  -  	cp tGE
  292 D1:AEAD 3E 19 -  -  	ld a, 019h
  293 D1:AEAF 28 3A -  -  	jr z, DispOperatorErrorString
  294 D1:AEB1 79 -  -  -  	ld a, c
  295 D1:AEB2 FE 6D -  -  	cp tLE
  296 D1:AEB4 3E 17 -  -  	ld a, 017h
  297 D1:AEB6 28 33 -  -  	jr z, DispOperatorErrorString
  298 D1:AEB8 79 -  -  -  	ld a, c
  299 D1:AEB9 FE 6C -  -  	cp tGT
  300 D1:AEBB 3E 3E -  -  	ld a, '>'
  301 D1:AEBD 28 2C -  -  	jr z, DispOperatorErrorString
  302 D1:AEBF 3E 3C -  -  	ld a, '<'
  303 D1:AEC1 18 28 -  -  	jr DispOperatorErrorString
  304 D1:AEC3 -  -  -  -  
  305 D1:AEC3 -  -  -  -  NEQError:
  306 D1:AEC3 3A 20 EA D0 	ld a, (tempToken2)
  307 D1:AEC7 FE 6A -  -  	cp tEq
  308 D1:AEC9 3E 3D -  -  	ld a, '='
  309 D1:AECB 28 1E -  -  	jr z, DispOperatorErrorString
  310 D1:AECD 3E 18 -  -  	ld a, 018h
  311 D1:AECF 18 1A -  -  	jr DispOperatorErrorString
  312 D1:AED1 -  -  -  -  XORANDError:
  313 D1:AED1 3A 20 EA D0 	ld a, (tempToken2)
  314 D1:AED5 4F -  -  -  	ld c, a
  315 D1:AED6 FE 3C -  -  	cp tOr
  316 D1:AED8 3E 7C -  -  	ld a, '|'
  317 D1:AEDA 28 0F -  -  	jr z, DispOperatorErrorString
  318 D1:AEDC 79 -  -  -  	ld a, c
  319 D1:AEDD FE 3D -  -  	cp tXor
  320 D1:AEDF 3E 5E -  -  	ld a, '^'
  321 D1:AEE1 28 08 -  -  	jr z, DispOperatorErrorString
  322 D1:AEE3 3E 26 -  -  	ld a, '&'
  323 D1:AEE5 18 04 -  -  	jr DispOperatorErrorString
  324 D1:AEE7 -  -  -  -  StoError:
  325 D1:AEE7 3E 1C -  -  	ld a, 01Ch
  326 D1:AEE9 18 00 -  -  	jr DispOperatorErrorString
  327 D1:AEEB -  -  -  -  	
  328 D1:AEEB -  -  -  -  DispOperatorErrorString:
  329 D1:AEEB F5 -  -  -  	push af
  330 D1:AEEC CD 2C B0 D1 		call ClearScreen
  331 D1:AEF0 21 FF EC D1 		ld hl, ErrorMessageStandard
  332 D1:AEF4 CD 64 B0 D1 		call PrintString
  333 D1:AEF8 F1 -  -  -  	pop af
  334 D1:AEF9 CD 78 B7 D1 	call _PrintChar_ASM
  335 D1:AEFD 3E 27 -  -  	ld a, '\''
  336 D1:AEFF CD 78 B7 D1 	call _PrintChar_ASM
  337 D1:AF03 18 66 -  -  	jr ReturnToOS
  338 D1:AF05 -  -  -  -  	
  339 D1:AF05 -  -  -  -  ErrorSyntax:
  340 D1:AF05 21 3E EE D1 	ld hl, SyntaxErrorMessage
  341 D1:AF09 18 56 -  -  	jr DispFinalString
  342 D1:AF0B -  -  -  -  MismatchError:
  343 D1:AF0B 21 AC EE D1 	ld hl, MismatchErrorMessage
  344 D1:AF0F 18 50 -  -  	jr DispFinalString
  345 D1:AF11 -  -  -  -  NoProgramsError:
  346 D1:AF11 21 3C ED D1 	ld hl, NoProgramsMessage
  347 D1:AF15 FD CB D0 CE 	set good_compilation, (iy+fProgram1)
  348 D1:AF19 18 46 -  -  	jr DispFinalString
  349 D1:AF1B -  -  -  -  InvalidTokenError:
  350 D1:AF1B 21 4F ED D1 	ld hl, InvalidTokenMessage
  351 D1:AF1F 18 40 -  -  	jr DispFinalString
  352 D1:AF21 -  -  -  -  InvalidNameLength:
  353 D1:AF21 21 84 ED D1 	ld hl, InvalidNameLengthMessage
  354 D1:AF25 18 3A -  -  	jr DispFinalString
  355 D1:AF27 -  -  -  -  ErrorNotFound:
  356 D1:AF27 21 FF ED D1 	ld hl, NotFoundMessage
  357 D1:AF2B 18 34 -  -  	jr DispFinalString
  358 D1:AF2D -  -  -  -  ErrorUsedCode:
  359 D1:AF2D 21 73 EE D1 	ld hl, UsedCodeMessage
  360 D1:AF31 18 2E -  -  	jr DispFinalString
  361 D1:AF33 -  -  -  -  SameNameError:
  362 D1:AF33 21 9B ED D1 	ld hl, SameNameMessage
  363 D1:AF37 18 28 -  -  	jr DispFinalString
  364 D1:AF39 -  -  -  -  FunctionError:
  365 D1:AF39 21 D7 ED D1 	ld hl, FunctionFunctionMessage
  366 D1:AF3D 18 22 -  -  	jr DispFinalString
  367 D1:AF3F -  -  -  -  UnknownError:
  368 D1:AF3F 21 C4 EE D1 	ld hl, UnknownMessage
  369 D1:AF43 18 1C -  -  	jr DispFinalString
  370 D1:AF45 -  -  -  -  WrongSpriteDataError:
  371 D1:AF45 21 C2 ED D1 	ld hl, WrongSpriteDataMessgae
  372 D1:AF49 18 16 -  -  	jr DispFinalString
  373 D1:AF4B -  -  -  -  ImplementError:
  374 D1:AF4B 21 12 EE D1 	ld hl, ImplementMessage
  375 D1:AF4F 18 10 -  -  	jr DispFinalString
  376 D1:AF51 -  -  -  -  EndError:
  377 D1:AF51 21 17 ED D1 	ld hl, EndErrorMessage
  378 D1:AF55 18 0A -  -  	jr DispFinalString
  379 D1:AF57 -  -  -  -  ErrorTooLargeLoop:
  380 D1:AF57 21 59 EE D1 	ld hl, TooLargeLoopMessage
  381 D1:AF5B 18 04 -  -  	jr DispFinalString
  382 D1:AF5D -  -  -  -  LabelError:
  383 D1:AF5D 21 01 EF D1 	ld hl, LabelErrorMessage
  384 D1:AF61 -  -  -  -  	
  385 D1:AF61 -  -  -  -  DispFinalString:
  386 D1:AF61 E5 -  -  -  	push hl
  387 D1:AF62 CD 2C B0 D1 		call ClearScreen
  388 D1:AF66 E1 -  -  -  	pop hl
  389 D1:AF67 CD 64 B0 D1 	call PrintString
  390 D1:AF6B -  -  -  -  ReturnToOS:
  391 D1:AF6B FD CB D0 4E 	bit good_compilation, (iy+fProgram1)
  392 D1:AF6F 20 57 -  -  	jr nz, SkipDisplayLineNumber
  393 D1:AF71 3E 15 -  -  	ld a, 21
  394 D1:AF73 32 AB B7 D1 	ld (TextYPos_ASM), a
  395 D1:AF77 21 01 00 00 	ld hl, 1
  396 D1:AF7B 22 7A B7 D1 	ld (TextXPos_ASM), hl
  397 D1:AF7F 21 9D EE D1 	ld hl, LineNumber
  398 D1:AF83 CD 64 B0 D1 	call PrintString
  399 D1:AF87 2A 1A 23 D0 	ld hl, (curPC)
  400 D1:AF8B ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  401 D1:AF90 B7 -  -  -  	or a
  402 D1:AF91 ED 52 -  -  	sbc hl, de
  403 D1:AF93 E5 -  -  -  	push hl
  404 D1:AF94 C1 -  -  -  	pop bc
  405 D1:AF95 ED 62 -  -  	sbc hl, hl
  406 D1:AF97 23 -  -  -  	inc hl
  407 D1:AF98 EB -  -  -  	ex de, hl
  408 D1:AF99 -  -  -  -  GetAmountOfLines:
  409 D1:AF99 78 -  -  -  	ld a, b
  410 D1:AF9A B1 -  -  -  	or c
  411 D1:AF9B 28 09 -  -  	jr z, +_
  412 D1:AF9D 3E 3F -  -  	ld a, tEnter
  413 D1:AF9F ED B1 -  -  	cpir
  414 D1:AFA1 20 03 -  -  	jr nz, +_
  415 D1:AFA3 13 -  -  -  	inc de
  416 D1:AFA4 18 F3 -  -  	jr GetAmountOfLines
  417 D1:AFA6 EB -  -  -  _:	ex de, hl
  418 D1:AFA7 AF -  -  -  	xor a
  419 D1:AFA8 11 18 06 D0 	ld de, OP3+10
  420 D1:AFAC 12 -  -  -  	ld (de), a
  421 D1:AFAD 1B -  -  -  	dec de
  422 D1:AFAE 06 08 -  -  	ld b, 8
  423 D1:AFB0 3E 0A -  -  _:	ld a, 10
  424 D1:AFB2 CD 90 1D 02 	call _DivHLByA
  425 D1:AFB6 C6 30 -  -  	add a, t0
  426 D1:AFB8 12 -  -  -  	ld (de), a
  427 D1:AFB9 1B -  -  -  	dec de
  428 D1:AFBA 19 -  -  -  	add hl, de
  429 D1:AFBB B7 -  -  -  	or a
  430 D1:AFBC ED 52 -  -  	sbc hl, de
  431 D1:AFBE 28 02 -  -  	jr z, +_
  432 D1:AFC0 10 EE -  -  	djnz -_
  433 D1:AFC2 EB -  -  -  _:	ex de, hl
  434 D1:AFC3 23 -  -  -  	inc hl
  435 D1:AFC4 CD 64 B0 D1 	call PrintString
  436 D1:AFC8 -  -  -  -  SkipDisplayLineNumber:
  437 D1:AFC8 3E E6 -  -  	ld a, 230
  438 D1:AFCA 32 AB B7 D1 	ld (TextYPos_ASM), a
  439 D1:AFCE 21 55 00 00 	ld hl, 85
  440 D1:AFD2 22 7A B7 D1 	ld (TextXPos_ASM), hl
  441 D1:AFD6 21 5A EF D1 	ld hl, PressKey
  442 D1:AFDA CD 64 B0 D1 	call PrintString
  443 D1:AFDE CD 4C 01 02 _:	call _GetCSC
  444 D1:AFE2 B7 -  -  -  	or a
  445 D1:AFE3 28 F9 -  -  	jr z, -_
  446 D1:AFE5 -  -  -  -  StopProgram:
  447 D1:AFE5 2A 1A 23 D0 	ld hl, (curPC)
  448 D1:AFE9 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  449 D1:AFEE 37 -  -  -  	scf
  450 D1:AFEF ED 52 -  -  	sbc hl, de
  451 D1:AFF1 40 22 E3 08 	ld.sis (errOffset - 0D00000h), hl
  452 D1:AFF5 -  -  -  -  backupSP = $+1
  453 D1:AFF5 31 00 00 00 	ld sp, 0
  454 D1:AFF9 -  -  -  -  backupBegPC = $+1
  455 D1:AFF9 21 00 00 00 	ld hl, 0
  456 D1:AFFD 22 17 23 D0 	ld (begPC), hl
  457 D1:B001 -  -  -  -  backupCurPC = $+1
  458 D1:B001 21 00 00 00 	ld hl, 0
  459 D1:B005 22 1A 23 D0 	ld (curPC), hl
  460 D1:B009 -  -  -  -  backupEndPC = $+1
  461 D1:B009 21 00 00 00 	ld hl, 0
  462 D1:B00D 22 1D 23 D0 	ld (endPC), hl
  463 D1:B011 CD 08 08 02 	call _ClrLCDFull
  464 D1:B015 CD 28 08 02 	call _HomeUp
  465 D1:B019 3E 2D -  -  	ld a, lcdBpp16
  466 D1:B01B 32 18 00 E3 	ld (mpLcdCtrl), a
  467 D1:B01F CD 3C 1A 02 	call _DrawStatusBar
  468 D1:B023 FD CB D0 4E 	bit good_compilation, (iy+fProgram1)
  469 D1:B027 C0 -  -  -  	ret nz
  470 D1:B028 C3 0F BC D1 	jp OpenEditBuffer
  471 D1:B02C -  -  -  -  	
  472 D1:B02C -  -  -  -  ClearScreen:
  473 D1:B02C 21 00 0F D4 	ld hl, vRAM+(320*12)
  474 D1:B030 36 FF -  -  	ld (hl), 255
  475 D1:B032 E5 -  -  -  	push hl
  476 D1:B033 D1 -  -  -  	pop de
  477 D1:B034 13 -  -  -  	inc de
  478 D1:B035 01 FF 1C 01 	ld bc, 320*228-1
  479 D1:B039 ED B0 -  -  	ldir
  480 D1:B03B 21 01 00 00 	ld hl, 1
  481 D1:B03F 22 7A B7 D1 	ld (TextXPos_ASM), hl
  482 D1:B043 3E 0C -  -  	ld a, 12
  483 D1:B045 32 AB B7 D1 	ld (TextYPos_ASM), a
  484 D1:B049 AF -  -  -  	xor a
  485 D1:B04A 32 D0 B7 D1 	ld (color), a
  486 D1:B04E C9 -  -  -  	ret
  487 D1:B04F -  -  -  -  	
  488 D1:B04F -  -  -  -  PrintCompilingProgram:
  489 D1:B04F AF -  -  -  	xor a
  490 D1:B050 32 01 06 D0 	ld (OP1+9), a
  491 D1:B054 CD 2C B0 D1 	call ClearScreen
  492 D1:B058 21 1C EF D1 	ld hl, StartParseMessage
  493 D1:B05C CD 64 B0 D1 	call PrintString
  494 D1:B060 21 F9 05 D0 	ld hl, OP1+1
  495 D1:B064 -  -  -  -  	
  496 D1:B064 -  -  -  -  PrintString:
  497 D1:B064 7E -  -  -  	ld a, (hl)
  498 D1:B065 23 -  -  -  	inc hl
  499 D1:B066 B7 -  -  -  	or a
  500 D1:B067 C4 78 B7 D1 	call nz, _PrintChar_ASM
  501 D1:B06B 20 F7 -  -  	jr nz, PrintString
  502 D1:B06D C9 -  -  -  	ret
  503 D1:B06E -  -  -  -  	
  504 D1:B06E -  -  -  -  PreScanPrograms:
  505 D1:B06E 2A 1D 23 D0 	ld hl, (endPC)
  506 D1:B072 ED 5B 17 23 
              D0 -  -  -  	ld de, (begPC)
  507 D1:B077 B7 -  -  -  	or a
  508 D1:B078 ED 52 -  -  	sbc hl, de
  509 D1:B07A 23 -  -  -  	inc hl
  510 D1:B07B E5 -  -  -  	push hl
  511 D1:B07C C1 -  -  -  	pop bc
  512 D1:B07D 2A 1A 23 D0 	ld hl, (curPC)
  513 D1:B081 -  -  -  -  ScanLoop:
  514 D1:B081 78 -  -  -  	ld a, b
  515 D1:B082 B1 -  -  -  	or c
  516 D1:B083 C8 -  -  -  	ret z
  517 D1:B084 3E 3F -  -  	ld a, tEnter
  518 D1:B086 ED B1 -  -  	cpir
  519 D1:B088 C0 -  -  -  	ret nz
  520 D1:B089 7E -  -  -  	ld a, (hl)
  521 D1:B08A FE B3 -  -  	cp tDet
  522 D1:B08C 28 20 -  -  	jr z, ScanFoundDet
  523 D1:B08E FE D8 -  -  	cp tPause
  524 D1:B090 28 11 -  -  	jr z, ScanFoundPause
  525 D1:B092 FE DC -  -  	cp tInput
  526 D1:B094 28 02 -  -  	jr z, ScanFoundInput
  527 D1:B096 18 E9 -  -  	jr ScanLoop
  528 D1:B098 -  -  -  -  ScanFoundInput:
  529 D1:B098 3A 94 EC D1 	ld a, (amountOfInput)
  530 D1:B09C 3C -  -  -  	inc a
  531 D1:B09D 32 94 EC D1 	ld (amountOfInput), a
  532 D1:B0A1 18 DE -  -  	jr ScanLoop
  533 D1:B0A3 -  -  -  -  ScanFoundPause:
  534 D1:B0A3 3A 95 EC D1 	ld a, (amountOfPause)
  535 D1:B0A7 3C -  -  -  	inc a
  536 D1:B0A8 32 95 EC D1 	ld (amountOfPause), a
  537 D1:B0AC 18 D3 -  -  	jr ScanLoop
  538 D1:B0AE -  -  -  -  ScanFoundDet:
  539 D1:B0AE 23 -  -  -  	inc hl
  540 D1:B0AF 7E -  -  -  	ld a, (hl)
  541 D1:B0B0 D6 30 -  -  	sub t0
  542 D1:B0B2 38 CD -  -  	jr c, ScanLoop
  543 D1:B0B4 FE 0A -  -  	cp t9-t0+1
  544 D1:B0B6 30 C9 -  -  	jr nc, ScanLoop
  545 D1:B0B8 11 00 00 00 	ld de, 0
  546 D1:B0BC 5F -  -  -  	ld e, a
  547 D1:B0BD 23 -  -  -  	inc hl
  548 D1:B0BE 0B -  -  -  	dec bc
  549 D1:B0BF 78 -  -  -  	ld a, b
  550 D1:B0C0 B1 -  -  -  	or c
  551 D1:B0C1 28 21 -  -  	jr z, FoundRightCFunction
  552 D1:B0C3 7E -  -  -  	ld a, (hl)
  553 D1:B0C4 FE 2B -  -  	cp tComma
  554 D1:B0C6 28 1C -  -  	jr z, FoundRightCFunction
  555 D1:B0C8 FE 3F -  -  	cp tEnter
  556 D1:B0CA 28 18 -  -  	jr z, FoundRightCFunction
  557 D1:B0CC D6 30 -  -  	sub t0
  558 D1:B0CE 38 14 -  -  	jr c, FoundRightCFunction
  559 D1:B0D0 FE 0A -  -  	cp t9-t0+1
  560 D1:B0D2 30 10 -  -  	jr nc, FoundRightCFunction
  561 D1:B0D4 E5 -  -  -  	push hl
  562 D1:B0D5 EB -  -  -  		ex de, hl
  563 D1:B0D6 29 -  -  -  		add hl, hl
  564 D1:B0D7 E5 -  -  -  		push hl
  565 D1:B0D8 D1 -  -  -  		pop de
  566 D1:B0D9 29 -  -  -  		add hl, hl
  567 D1:B0DA 29 -  -  -  		add hl, hl
  568 D1:B0DB 19 -  -  -  		add hl, de
  569 D1:B0DC 11 00 00 00 		ld de, 0
  570 D1:B0E0 5F -  -  -  		ld e, a
  571 D1:B0E1 19 -  -  -  		add hl, de
  572 D1:B0E2 EB -  -  -  		ex de, hl
  573 D1:B0E3 E1 -  -  -  	pop hl
  574 D1:B0E4 -  -  -  -  FoundRightCFunction:
  575 D1:B0E4 E5 -  -  -  	push hl
  576 D1:B0E5 EB -  -  -  		ex de, hl
  577 D1:B0E6 11 4F 00 00 		ld de, AMOUNT_OF_C_FUNCTIONS
  578 D1:B0EA B7 -  -  -  		or a
  579 D1:B0EB ED 52 -  -  		sbc hl, de
  580 D1:B0ED 30 1F -  -  		jr nc,  WrongCFunction
  581 D1:B0EF 19 -  -  -  		add hl, de
  582 D1:B0F0 EB -  -  -  		ex de, hl
  583 D1:B0F1 21 A2 EC D1 		ld hl, usedCroutines
  584 D1:B0F5 19 -  -  -  		add hl, de
  585 D1:B0F6 7E -  -  -  		ld a, (hl)
  586 D1:B0F7 B7 -  -  -  		or a
  587 D1:B0F8 20 14 -  -  		jr nz, FunctionAlreadyInProgram
  588 D1:B0FA -  -  -  -  AddCFunctionToProgram:
  589 D1:B0FA 3A 92 EC D1 		ld a, (amountOfCRoutines)
  590 D1:B0FE 3C -  -  -  		inc a
  591 D1:B0FF 77 -  -  -  		ld (hl), a
  592 D1:B100 32 92 EC D1 		ld (amountOfCRoutines), a
  593 D1:B104 3E C3 -  -  		ld a, 0C3h
  594 D1:B106 D5 -  -  -  		push de
  595 D1:B107 E1 -  -  -  		pop hl
  596 D1:B108 29 -  -  -  		add hl, hl
  597 D1:B109 19 -  -  -  		add hl, de
  598 D1:B10A CD 62 AC D1 		call InsertAHL																; jp *
  599 D1:B10E -  -  -  -  FunctionAlreadyInProgram:
  600 D1:B10E -  -  -  -  WrongCFunction:
  601 D1:B10E E1 -  -  -  	pop hl
  602 D1:B10F C3 81 B0 D1 	jp ScanLoop
  603 D1:B113 -  -  -  -  
  604 D1:B113 -  -  -  -  GetSpriteData:
  605 D1:B113 B7 -  -  -  	or a
  606 D1:B114 ED 52 -  -  	sbc hl, de
  607 D1:B116 C8 -  -  -  	ret z
  608 D1:B117 19 -  -  -  	add hl, de
  609 D1:B118 1A -  -  -  	ld a, (de)
  610 D1:B119 D6 30 -  -  	sub t0
  611 D1:B11B DA 45 AF D1 	jp c, WrongSpriteDataError
  612 D1:B11F FE 11 -  -  	cp tA-t0
  613 D1:B121 38 0A -  -  	jr c, +_
  614 D1:B123 D6 11 -  -  	sub tA-t0
  615 D1:B125 FE 06 -  -  	cp tG-tA
  616 D1:B127 D2 45 AF D1 	jp nc, WrongSpriteDataError
  617 D1:B12B C6 0A -  -  	add a, 10
  618 D1:B12D 87 -  -  -  _:	add a, a
  619 D1:B12E 87 -  -  -  	add a, a
  620 D1:B12F 87 -  -  -  	add a, a
  621 D1:B130 87 -  -  -  	add a, a
  622 D1:B131 DD 67 -  -  	ld ixh, a
  623 D1:B133 13 -  -  -  	inc de
  624 D1:B134 B7 -  -  -  	or a
  625 D1:B135 ED 52 -  -  	sbc hl, de
  626 D1:B137 CA 05 AF D1 	jp z, ErrorSyntax
  627 D1:B13B 19 -  -  -  	add hl, de
  628 D1:B13C 1A -  -  -  	ld a, (de)
  629 D1:B13D D6 30 -  -  	sub t0
  630 D1:B13F DA 45 AF D1 	jp c, WrongSpriteDataError
  631 D1:B143 FE 11 -  -  	cp tA-t0
  632 D1:B145 38 0A -  -  	jr c, +_
  633 D1:B147 D6 11 -  -  	sub tA-t0
  634 D1:B149 FE 06 -  -  	cp tG-tA
  635 D1:B14B D2 45 AF D1 	jp nc, WrongSpriteDataError
  636 D1:B14F C6 0A -  -  	add a, 10
  637 D1:B151 DD B4 -  -  _:	or a, ixh
  638 D1:B153 02 -  -  -  	ld (bc), a
  639 D1:B154 03 -  -  -  	inc bc
  640 D1:B155 13 -  -  -  	inc de
  641 D1:B156 18 BB -  -  	jr GetSpriteData
  642 D1:B158 -  -  -  -  	
  643 D1:B158 -  -  -  -  UpdateSpritePointers:
  644 D1:B158 2A 88 EC D1 	ld hl, (tempListsPtr)
  645 D1:B15C 11 5F 09 D1 	ld de, tempListsStack
  646 D1:B160 B7 -  -  -  	or a
  647 D1:B161 ED 52 -  -  	sbc hl, de
  648 D1:B163 22 72 B1 D1 	ld (UpdateOffset), hl
  649 D1:B167 EB -  -  -  	ex de, hl
  650 D1:B168 D5 -  -  -  	push de
  651 D1:B169 C1 -  -  -  	pop bc
  652 D1:B16A 78 -  -  -  _:	ld a, b
  653 D1:B16B B1 -  -  -  	or c
  654 D1:B16C 28 14 -  -  	jr z, +_
  655 D1:B16E E5 -  -  -  	push hl
  656 D1:B16F ED 27 -  -  		ld hl, (hl)
  657 D1:B171 -  -  -  -  UpdateOffset = $+1
  658 D1:B171 11 00 00 00 		ld de, 0
  659 D1:B175 19 -  -  -  		add hl, de
  660 D1:B176 EB -  -  -  		ex de, hl
  661 D1:B177 E1 -  -  -  	pop hl
  662 D1:B178 ED 1F -  -  	ld (hl), de
  663 D1:B17A 23 -  -  -  	inc hl
  664 D1:B17B 23 -  -  -  	inc hl
  665 D1:B17C 23 -  -  -  	inc hl
  666 D1:B17D 0B -  -  -  	dec bc
  667 D1:B17E 0B -  -  -  	dec bc
  668 D1:B17F 0B -  -  -  	dec bc
  669 D1:B180 18 E8 -  -  	jr -_
  670 D1:B182 21 2F 11 D1 _:	ld hl, spriteStack
  671 D1:B186 ED 4B 72 B1 
              D1 -  -  -  	ld bc, (UpdateOffset)
  672 D1:B18B 78 -  -  -  _:	ld a, b
  673 D1:B18C B1 -  -  -  	or c
  674 D1:B18D 28 15 -  -  	jr z, +_
  675 D1:B18F E5 -  -  -  	push hl
  676 D1:B190 ED 27 -  -  		ld hl, (hl)
  677 D1:B192 ED 5B 72 B1 
              D1 -  -  -  		ld de, (UpdateOffset)
  678 D1:B197 19 -  -  -  		add hl, de
  679 D1:B198 EB -  -  -  		ex de, hl
  680 D1:B199 E1 -  -  -  	pop hl
  681 D1:B19A ED 1F -  -  	ld (hl), de
  682 D1:B19C 23 -  -  -  	inc hl
  683 D1:B19D 23 -  -  -  	inc hl
  684 D1:B19E 23 -  -  -  	inc hl
  685 D1:B19F 0B -  -  -  	dec bc
  686 D1:B1A0 0B -  -  -  	dec bc
  687 D1:B1A1 0B -  -  -  	dec bc
  688 D1:B1A2 18 E7 -  -  	jr -_
  689 D1:B1A4 2A 72 B1 D1 _:	ld hl, (UpdateOffset)
  690 D1:B1A8 7C -  -  -  	ld a, h
  691 D1:B1A9 B5 -  -  -  	or l
  692 D1:B1AA C8 -  -  -  	ret z
  693 D1:B1AB 2A 8B EC D1 	ld hl, (programDataDataPtr)
  694 D1:B1AF E5 -  -  -  	push hl
  695 D1:B1B0 11 FF 18 D1 		ld de, programDataData
  696 D1:B1B4 ED 52 -  -  		sbc hl, de
  697 D1:B1B6 E5 -  -  -  		push hl
  698 D1:B1B7 C1 -  -  -  		pop bc
  699 D1:B1B8 E1 -  -  -  	pop hl
  700 D1:B1B9 E5 -  -  -  	push hl
  701 D1:B1BA ED 5B 72 B1 
              D1 -  -  -  		ld de, (UpdateOffset)
  702 D1:B1BF 19 -  -  -  		add hl, de
  703 D1:B1C0 22 8B EC D1 		ld (programDataDataPtr), hl
  704 D1:B1C4 D1 -  -  -  	pop de
  705 D1:B1C5 2B -  -  -  	dec hl
  706 D1:B1C6 EB -  -  -  	ex de, hl
  707 D1:B1C7 2B -  -  -  	dec hl
  708 D1:B1C8 ED B8 -  -  	lddr
  709 D1:B1CA ED 4B 72 B1 
              D1 -  -  -  	ld bc, (UpdateOffset)
  710 D1:B1CF 2A 88 EC D1 	ld hl, (tempListsPtr)
  711 D1:B1D3 2B -  -  -  	dec hl
  712 D1:B1D4 ED B8 -  -  	lddr
  713 D1:B1D6 21 5F 09 D1 	ld hl, tempListsStack
  714 D1:B1DA 22 88 EC D1 	ld (tempListsPtr), hl
  715 D1:B1DE C9 -  -  -  	ret
Listing for file "ICE.asm"
  456 D1:B1DF -  -  -  -  #include "parse.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
    1 D1:B1DF -  -  -  -  ParseLine:
    2 D1:B1DF CD 2C 10 02 	call _CurFetch
    3 D1:B1E3 FE 3F -  -  	cp tEnter
    4 D1:B1E5 C8 -  -  -  	ret z
    5 D1:B1E6 21 F8 EA D1 	ld hl, FunctionsSingle
    6 D1:B1EA 01 0E 00 00 	ld bc, FunctionsSingleEnd - FunctionsSingle
    7 D1:B1EE ED B1 -  -  	cpir
    8 D1:B1F0 20 2F -  -  	jr nz, ParseExpression2
    9 D1:B1F2 FE 62 -  -  	cp tVarOut
   10 D1:B1F4 28 10 -  -  	jr z, +_
   11 D1:B1F6 FE 2C -  -  	cp tii
   12 D1:B1F8 28 0C -  -  	jr z, +_
   13 D1:B1FA FD CB D0 7E 	bit used_code, (iy+fProgram1)
   14 D1:B1FE FD CB D0 FE 	set used_code, (iy+fProgram1)
   15 D1:B202 CC 58 B1 D1 	call z, UpdateSpritePointers
   16 D1:B206 3A 90 EC D1 _:	ld a, (openedParensF)
   17 D1:B20A B7 -  -  -  	or a
   18 D1:B20B C2 39 AF D1 	jp nz, FunctionError
   19 D1:B20F FD 77 B0 -  	ld (iy+fFunction1), a
   20 D1:B212 FD 77 AF -  	ld (iy+fFunction2), a
   21 D1:B215 06 03 -  -  	ld b, 3
   22 D1:B217 ED 4C -  -  	mlt bc
   23 D1:B219 21 06 EB D1 	ld hl, FunctionsSingleStart
   24 D1:B21D 09 -  -  -  	add hl, bc
   25 D1:B21E ED 27 -  -  	ld hl, (hl)
   26 D1:B220 E9 -  -  -  	jp (hl)
   27 D1:B221 -  -  -  -  	
   28 D1:B221 -  -  -  -  ParseExpression2:
   29 D1:B221 FD CB D0 7E 	bit used_code, (iy+fProgram1)
   30 D1:B225 FD CB D0 FE 	set used_code, (iy+fProgram1)
   31 D1:B229 CC 58 B1 D1 	call z, UpdateSpritePointers
   32 D1:B22D -  -  -  -  ParseExpression:
   33 D1:B22D CD 2C 10 02 	call _CurFetch
   34 D1:B231 21 83 EA D0 	ld hl, stack
   35 D1:B235 22 70 EC D1 	ld (stackPtr), hl
   36 D1:B239 21 6B EE D0 	ld hl, output
   37 D1:B23D 22 73 EC D1 	ld (outputPtr), hl
   38 D1:B241 21 8F EC D1 	ld hl, openedParensE
   39 D1:B245 36 00 -  -  	ld (hl), 0
   40 D1:B247 FD 36 C0 00 	ld (iy+fExpression1), 0
   41 D1:B24B FD 36 BF 00 	ld (iy+fExpression2), 0
   42 D1:B24F -  -  -  -  MainLoopResCarryFlag:
   43 D1:B24F B7 -  -  -  	or a	
   44 D1:B250 -  -  -  -  MainLoop:
   45 D1:B250 32 1F EA D0 	ld (tempToken), a
   46 D1:B254 DA CE B5 D1 	jp c, StopParsing
   47 D1:B258 FE 30 -  -  	cp t0
   48 D1:B25A 38 45 -  -  	jr c, NotANumber
   49 D1:B25C FE 3A -  -  	cp t9+1
   50 D1:B25E 30 41 -  -  	jr nc, NotANumber
   51 D1:B260 -  -  -  -  ANumber:
   52 D1:B260 -  -  -  -  #include "number.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\number.asm"
    1 D1:B260 2A 73 EC D1 	ld hl, (outputPtr)
    2 D1:B264 FD CB C0 46 	bit prev_is_number, (iy+fExpression1)
    3 D1:B268 FD CB C0 C6 	set prev_is_number, (iy+fExpression1)
    4 D1:B26C 28 1A -  -  	jr z, AddNumberToStack
    5 D1:B26E -  -  -  -  ChangeLastNumberFromStack:
    6 D1:B26E 2B -  -  -  	dec hl
    7 D1:B26F 2B -  -  -  	dec hl
    8 D1:B270 2B -  -  -  	dec hl
    9 D1:B271 E5 -  -  -  	push hl
   10 D1:B272 ED 27 -  -  		ld hl, (hl)
   11 D1:B274 29 -  -  -  		add hl, hl											; HL * 10
   12 D1:B275 E5 -  -  -  		push hl
   13 D1:B276 D1 -  -  -  		pop de
   14 D1:B277 29 -  -  -  		add hl, hl
   15 D1:B278 29 -  -  -  		add hl, hl
   16 D1:B279 19 -  -  -  		add hl, de
   17 D1:B27A D6 30 -  -  		sub a, t0											; HL + <number>
   18 D1:B27C 11 00 00 00 		ld de, 0
   19 D1:B280 5F -  -  -  		ld e, a
   20 D1:B281 19 -  -  -  		add hl, de
   21 D1:B282 D1 -  -  -  	pop de
   22 D1:B283 EB -  -  -  	ex de, hl
   23 D1:B284 ED 1F -  -  	ld (hl), de
   24 D1:B286 18 13 -  -  	jr NumberStop
   25 D1:B288 -  -  -  -  AddNumberToStack:
   26 D1:B288 36 00 -  -  	ld (hl), typeNumber
   27 D1:B28A 23 -  -  -  	inc hl
   28 D1:B28B D6 30 -  -  	sub a, t0												; new number
   29 D1:B28D -  -  -  -  InsertAndUpdatePointer
   30 D1:B28D 11 00 00 00 	ld de, 0
   31 D1:B291 5F -  -  -  	ld e, a
   32 D1:B292 ED 1F -  -  	ld (hl), de
   33 D1:B294 -  -  -  -  UpdatePointer:
   34 D1:B294 23 -  -  -  	inc hl
   35 D1:B295 23 -  -  -  	inc hl
   36 D1:B296 23 -  -  -  	inc hl
   37 D1:B297 22 73 EC D1 	ld (outputPtr), hl
   38 D1:B29B -  -  -  -  NumberStop:
   39 D1:B29B CD 28 10 02 	call _IncFetch
   40 D1:B29F 18 AF -  -  	jr MainLoop
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
   53 D1:B2A1 -  -  -  -  
   54 D1:B2A1 -  -  -  -  NotANumber:
   55 D1:B2A1 FD CB C0 86 	res prev_is_number, (iy+fExpression1)
   56 D1:B2A5 FE 41 -  -  	cp tA
   57 D1:B2A7 38 0F -  -  	jr c, NotAVariable
   58 D1:B2A9 FE 5C -  -  	cp ttheta+1
   59 D1:B2AB 30 0B -  -  	jr nc, NotAVariable
   60 D1:B2AD -  -  -  -  AVariable:
   61 D1:B2AD 2A 73 EC D1 	ld hl, (outputPtr)
   62 D1:B2B1 36 01 -  -  	ld (hl), typeVariable
   63 D1:B2B3 23 -  -  -  	inc hl
   64 D1:B2B4 D6 41 -  -  	sub a, tA
   65 D1:B2B6 18 D5 -  -  	jr InsertAndUpdatePointer
   66 D1:B2B8 -  -  -  -  NotAVariable:
   67 D1:B2B8 21 C4 EA D1 	ld hl, operators_booleans
   68 D1:B2BC 01 0F 00 00 	ld bc, 15
   69 D1:B2C0 ED B1 -  -  	cpir
   70 D1:B2C2 20 75 -  -  	jr nz, NotABoolean
   71 D1:B2C4 -  -  -  -  ABoolean:
   72 D1:B2C4 -  -  -  -  #include "operator.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operator.asm"
    1 D1:B2C4 21 0A EC D1 	ld hl, precedence
    2 D1:B2C8 09 -  -  -  	add hl, bc
    3 D1:B2C9 5E -  -  -  	ld e, (hl)										; e = precedence of current token
    4 D1:B2CA FE 04 -  -  	cp tStore
    5 D1:B2CC CC 43 B7 D1 	call z, MoveStackEntryToOutput
    6 D1:B2D0 -  -  -  -  CheckOperator:
    7 D1:B2D0 2A 70 EC D1 	ld hl, (stackPtr)
    8 D1:B2D4 01 83 EA D0 	ld bc, stack
    9 D1:B2D8 B7 -  -  -  	or a
   10 D1:B2D9 ED 42 -  -  	sbc hl, bc
   11 D1:B2DB 28 41 -  -  	jr z, InsertBoolean
   12 D1:B2DD 09 -  -  -  	add hl, bc
   13 D1:B2DE 2B -  -  -  	dec hl
   14 D1:B2DF 2B -  -  -  	dec hl
   15 D1:B2E0 2B -  -  -  	dec hl
   16 D1:B2E1 2B -  -  -  	dec hl
   17 D1:B2E2 7E -  -  -  	ld a, (hl)
   18 D1:B2E3 FE 1F -  -  	cp typeOperator
   19 D1:B2E5 20 37 -  -  	jr nz, InsertBoolean
   20 D1:B2E7 23 -  -  -  	inc hl
   21 D1:B2E8 7E -  -  -  	ld a, (hl)
   22 D1:B2E9 21 C4 EA D1 	ld hl, operators_booleans
   23 D1:B2ED 01 0F 00 00 	ld bc, 15
   24 D1:B2F1 ED B1 -  -  	cpir
   25 D1:B2F3 21 19 EC D1 	ld hl, precedence2
   26 D1:B2F7 09 -  -  -  	add hl, bc
   27 D1:B2F8 7E -  -  -  	ld a, (hl)										; a = precedence of last token on stack
   28 D1:B2F9 BB -  -  -  	cp a, e											; if a <= e then move
   29 D1:B2FA 38 22 -  -  	jr c, InsertBoolean
   30 D1:B2FC -  -  -  -  MoveBooleanFromStackToOutput:
   31 D1:B2FC 7B -  -  -  	ld a, e											; save for the precedence of current token
   32 D1:B2FD ED 5B 73 EC 
              D1 -  -  -  	ld de, (outputPtr)
   33 D1:B302 2A 70 EC D1 	ld hl, (stackPtr)
   34 D1:B306 2B -  -  -  	dec hl
   35 D1:B307 2B -  -  -  	dec hl
   36 D1:B308 2B -  -  -  	dec hl
   37 D1:B309 2B -  -  -  	dec hl
   38 D1:B30A 22 70 EC D1 	ld (stackPtr), hl
   39 D1:B30E ED A0 -  -  	ldi
   40 D1:B310 ED A0 -  -  	ldi
   41 D1:B312 ED A0 -  -  	ldi
   42 D1:B314 ED A0 -  -  	ldi
   43 D1:B316 ED 53 73 EC 
              D1 -  -  -  	ld (outputPtr), de
   44 D1:B31B 5F -  -  -  	ld e, a
   45 D1:B31C 18 B2 -  -  	jr CheckOperator
   46 D1:B31E -  -  -  -  InsertBoolean:
   47 D1:B31E 2A 70 EC D1 	ld hl, (stackPtr)
   48 D1:B322 36 1F -  -  	ld (hl), typeOperator
   49 D1:B324 23 -  -  -  	inc hl
   50 D1:B325 3A 1F EA D0 	ld a, (tempToken)
   51 D1:B329 77 -  -  -  	ld (hl), a
   52 D1:B32A 23 -  -  -  	inc hl
   53 D1:B32B 23 -  -  -  	inc hl
   54 D1:B32C 23 -  -  -  	inc hl
   55 D1:B32D 22 70 EC D1 	ld (stackPtr), hl
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
   73 D1:B331 -  -  -  -  
   74 D1:B331 -  -  -  -  ReturnToLoop:
   75 D1:B331 CD 28 10 02 	call _IncFetch
   76 D1:B335 C3 50 B2 D1 	jp MainLoop
   77 D1:B339 -  -  -  -  NotABoolean:
   78 D1:B339 FE 2B -  -  	cp tComma
   79 D1:B33B 28 06 -  -  	jr z, CloseArgument
   80 D1:B33D FE 11 -  -  	cp tRParen
   81 D1:B33F C2 D2 B3 D1 	jp nz, NotACommaOrRParen
   82 D1:B343 -  -  -  -  CloseArgument:
   83 D1:B343 -  -  -  -  #include "closing.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\closing.asm"
    1 D1:B343 21 8F EC D1 	ld hl, openedParensE
    2 D1:B347 47 -  -  -  	ld b, a
    3 D1:B348 7E -  -  -  	ld a, (hl)
    4 D1:B349 B7 -  -  -  	or a
    5 D1:B34A 28 6D -  -  	jr z, MismatchedParens
    6 D1:B34C 78 -  -  -  	ld a, b
    7 D1:B34D FE 2B -  -  	cp tComma
    8 D1:B34F 28 01 -  -  	jr z, +_
    9 D1:B351 35 -  -  -  	dec (hl)
   10 D1:B352 2A 70 EC D1 _:	ld hl, (stackPtr)
   11 D1:B356 01 83 EA D0 	ld bc, stack
   12 D1:B35A B7 -  -  -  	or a
   13 D1:B35B ED 42 -  -  	sbc hl, bc
   14 D1:B35D 28 52 -  -  	jr z, StopMovingForArgument2
   15 D1:B35F 09 -  -  -  	add hl, bc
   16 D1:B360 2B -  -  -  	dec hl
   17 D1:B361 2B -  -  -  	dec hl
   18 D1:B362 2B -  -  -  	dec hl
   19 D1:B363 2B -  -  -  	dec hl
   20 D1:B364 7E -  -  -  	ld a, (hl)
   21 D1:B365 FE 3F -  -  	cp typeFunction
   22 D1:B367 28 23 -  -  	jr z, StopMovingForArgument
   23 D1:B369 FE 1F -  -  	cp typeOperator
   24 D1:B36B 20 06 -  -  	jr nz, +_
   25 D1:B36D 23 -  -  -  	inc hl
   26 D1:B36E 7E -  -  -  	ld a, (hl)
   27 D1:B36F 2B -  -  -  	dec hl
   28 D1:B370 B7 -  -  -  	or a
   29 D1:B371 28 19 -  -  	jr z, StopMovingForArgument
   30 D1:B373 22 70 EC D1 _:	ld (stackPtr), hl
   31 D1:B377 ED 5B 73 EC 
              D1 -  -  -  	ld de, (outputPtr)
   32 D1:B37C ED A0 -  -  	ldi
   33 D1:B37E ED A0 -  -  	ldi
   34 D1:B380 ED A0 -  -  	ldi
   35 D1:B382 ED A0 -  -  	ldi
   36 D1:B384 ED 53 73 EC 
              D1 -  -  -  	ld (outputPtr), de
   37 D1:B389 18 C7 -  -  	jr --_
   38 D1:B38B 09 -  -  -  _:	add hl, bc
   39 D1:B38C -  -  -  -  StopMovingForArgument:
   40 D1:B38C 3A 1F EA D0 	ld a, (tempToken)
   41 D1:B390 FE 2B -  -  	cp tComma
   42 D1:B392 28 1D -  -  	jr z, StopMovingForArgument2
   43 D1:B394 22 70 EC D1 	ld (stackPtr), hl
   44 D1:B398 23 -  -  -  	inc hl
   45 D1:B399 7E -  -  -  	ld a, (hl)
   46 D1:B39A FE 10 -  -  	cp tLParen
   47 D1:B39C 28 13 -  -  	jr z, StopMovingForArgument2
   48 D1:B39E 2B -  -  -  	dec hl
   49 D1:B39F ED 5B 73 EC 
              D1 -  -  -  	ld de, (outputPtr)
   50 D1:B3A4 ED A0 -  -  	ldi
   51 D1:B3A6 ED A0 -  -  	ldi
   52 D1:B3A8 ED A0 -  -  	ldi
   53 D1:B3AA ED A0 -  -  	ldi
   54 D1:B3AC ED 53 73 EC 
              D1 -  -  -  	ld (outputPtr), de
   55 D1:B3B1 -  -  -  -  StopMovingForArgument2:
   56 D1:B3B1 CD 28 10 02 	call _IncFetch
   57 D1:B3B5 C3 50 B2 D1 	jp MainLoop
   58 D1:B3B9 -  -  -  -  MismatchedParens:
   59 D1:B3B9 3A 90 EC D1 	ld a, (openedParensF)
   60 D1:B3BD B7 -  -  -  	or a
   61 D1:B3BE CA 0B AF D1 	jp z, MismatchError
   62 D1:B3C2 3A 1F EA D0 	ld a, (tempToken)
   63 D1:B3C6 FE 2B -  -  	cp tComma
   64 D1:B3C8 20 04 -  -  	jr nz, +_
   65 D1:B3CA FD CB BF CE 	set triggered_a_comma, (iy+fExpression2)
   66 D1:B3CE C3 CE B5 D1 _:	jp StopParsing
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
   84 D1:B3D2 -  -  -  -  
   85 D1:B3D2 -  -  -  -  NotACommaOrRParen:
   86 D1:B3D2 FE 08 -  -  	cp tLBrace
   87 D1:B3D4 C2 64 B4 D1 	jp nz, NotAList
   88 D1:B3D8 -  -  -  -  AList:
   89 D1:B3D8 -  -  -  -  #include "list.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\list.asm"
    1 D1:B3D8 2A 73 EC D1 	ld hl, (outputPtr)
    2 D1:B3DC 36 05 -  -  	ld (hl), typeList
    3 D1:B3DE 23 -  -  -  	inc hl
    4 D1:B3DF ED 5B 88 EC 
              D1 -  -  -  	ld de, (tempListsPtr)
    5 D1:B3E4 ED 1F -  -  	ld (hl), de
    6 D1:B3E6 ED 53 46 B4 
              D1 -  -  -  	ld (ListLengthSMC), de
    7 D1:B3EB 23 -  -  -  	inc hl
    8 D1:B3EC 23 -  -  -  	inc hl
    9 D1:B3ED 23 -  -  -  	inc hl
   10 D1:B3EE 22 73 EC D1 	ld (outputPtr), hl
   11 D1:B3F2 EB -  -  -  	ex de, hl
   12 D1:B3F3 23 -  -  -  	inc hl
   13 D1:B3F4 23 -  -  -  	inc hl
   14 D1:B3F5 23 -  -  -  	inc hl
   15 D1:B3F6 22 88 EC D1 	ld (tempListsPtr), hl
   16 D1:B3FA -  -  -  -  ListStart:
   17 D1:B3FA B7 -  -  -  	or a
   18 D1:B3FB ED 62 -  -  	sbc hl, hl
   19 D1:B3FD -  -  -  -  ListLoop:
   20 D1:B3FD E5 -  -  -  	push hl
   21 D1:B3FE CD 28 10 02 		call _IncFetch
   22 D1:B402 E1 -  -  -  	pop hl
   23 D1:B403 FE 30 -  -  	cp t0
   24 D1:B405 38 14 -  -  	jr c, ListNotNumber
   25 D1:B407 FE 3A -  -  	cp t9+1
   26 D1:B409 30 10 -  -  	jr nc, ListNotNumber
   27 D1:B40B D6 30 -  -  	sub t0
   28 D1:B40D 29 -  -  -  	add hl, hl
   29 D1:B40E E5 -  -  -  	push hl
   30 D1:B40F D1 -  -  -  	pop de
   31 D1:B410 29 -  -  -  	add hl, hl
   32 D1:B411 29 -  -  -  	add hl, hl
   33 D1:B412 19 -  -  -  	add hl, de
   34 D1:B413 11 00 00 00 	ld de, 0
   35 D1:B417 5F -  -  -  	ld e, a
   36 D1:B418 19 -  -  -  	add hl, de
   37 D1:B419 18 E2 -  -  	jr ListLoop
   38 D1:B41B -  -  -  -  ListNotNumber:
   39 D1:B41B FE 2B -  -  	cp tComma
   40 D1:B41D 20 10 -  -  	jr nz, ListNotNumberOrComma
   41 D1:B41F EB -  -  -  	ex de, hl
   42 D1:B420 2A 88 EC D1 	ld hl, (tempListsPtr)
   43 D1:B424 ED 1F -  -  	ld (hl), de
   44 D1:B426 23 -  -  -  	inc hl
   45 D1:B427 23 -  -  -  	inc hl
   46 D1:B428 23 -  -  -  	inc hl
   47 D1:B429 22 88 EC D1 	ld (tempListsPtr), hl
   48 D1:B42D 18 CB -  -  	jr ListStart
   49 D1:B42F -  -  -  -  ListNotNumberOrComma:
   50 D1:B42F FE 09 -  -  	cp tRBrace
   51 D1:B431 28 04 -  -  	jr z, ListStop
   52 D1:B433 FE 04 -  -  	cp tStore
   53 D1:B435 20 25 -  -  	jr nz, ListError
   54 D1:B437 -  -  -  -  ListStop:
   55 D1:B437 EB -  -  -  	ex de, hl
   56 D1:B438 2A 88 EC D1 	ld hl, (tempListsPtr)
   57 D1:B43C ED 1F -  -  	ld (hl), de
   58 D1:B43E 23 -  -  -  	inc hl
   59 D1:B43F 23 -  -  -  	inc hl
   60 D1:B440 23 -  -  -  	inc hl
   61 D1:B441 22 88 EC D1 	ld (tempListsPtr),  hl
   62 D1:B445 -  -  -  -  ListLengthSMC = $+1
   63 D1:B445 11 00 00 00 	ld de, 0
   64 D1:B449 2B -  -  -  	dec hl
   65 D1:B44A 2B -  -  -  	dec hl
   66 D1:B44B 2B -  -  -  	dec hl
   67 D1:B44C B7 -  -  -  	or a
   68 D1:B44D ED 52 -  -  	sbc hl, de
   69 D1:B44F EB -  -  -  	ex de, hl
   70 D1:B450 ED 1F -  -  	ld (hl), de
   71 D1:B452 FE 04 -  -  	cp tStore
   72 D1:B454 C4 28 10 02 	call nz, _IncFetch
   73 D1:B458 C3 50 B2 D1 	jp MainLoop
   74 D1:B45C -  -  -  -  ListError:
   75 D1:B45C 21 62 ED D1 	ld hl, InvalidListArgumentMessage
   76 D1:B460 C3 61 AF D1 	jp DispFinalString
Listing for file "C:\programming\spasm\ICE\ICE v1.5\parse.asm"
   90 D1:B464 -  -  -  -  
   91 D1:B464 -  -  -  -  NotAList:
   92 D1:B464 FE 5D -  -  	cp tVarLst
   93 D1:B466 20 4E -  -  	jr nz, NotAnOSList
   94 D1:B468 -  -  -  -  AnOSList:
   95 D1:B468 CD 28 10 02 	call _IncFetch
   96 D1:B46C FE 06 -  -  	cp 6
   97 D1:B46E D2 1B AF D1 	jp nc, InvalidTokenError
   98 D1:B472 4F -  -  -  	ld c, a
   99 D1:B473 06 03 -  -  	ld b, 3
  100 D1:B475 ED 4C -  -  	mlt bc
  101 D1:B477 21 4E EC D1 	ld hl, lists
  102 D1:B47B 09 -  -  -  	add hl, bc
  103 D1:B47C ED 27 -  -  	ld hl, (hl)
  104 D1:B47E EB -  -  -  	ex de, hl
  105 D1:B47F 2A 73 EC D1 	ld hl, (outputPtr)
  106 D1:B483 36 06 -  -  	ld (hl), typeOSList
  107 D1:B485 23 -  -  -  	inc hl
  108 D1:B486 ED 1F -  -  	ld (hl), de
  109 D1:B488 23 -  -  -  	inc hl
  110 D1:B489 23 -  -  -  	inc hl
  111 D1:B48A 23 -  -  -  	inc hl
  112 D1:B48B 22 73 EC D1 	ld (outputPtr), hl
  113 D1:B48F CD 28 10 02 	call _IncFetch
  114 D1:B493 FE 10 -  -  	cp tLParen
  115 D1:B495 C2 4F B2 D1 	jp nz, MainLoopResCarryFlag
  116 D1:B499 21 8F EC D1 	ld hl, openedParensE
  117 D1:B49D 34 -  -  -  	inc (hl)
  118 D1:B49E 2A 70 EC D1 	ld hl, (stackPtr)
  119 D1:B4A2 36 1F -  -  	ld (hl), typeOperator
  120 D1:B4A4 23 -  -  -  	inc hl
  121 D1:B4A5 36 00 -  -  	ld (hl), 0
  122 D1:B4A7 23 -  -  -  	inc hl
  123 D1:B4A8 23 -  -  -  	inc hl
  124 D1:B4A9 23 -  -  -  	inc hl
  125 D1:B4AA 22 70 EC D1 	ld (stackPtr), hl
  126 D1:B4AE CD 28 10 02 	call _IncFetch
  127 D1:B4B2 C3 50 B2 D1 	jp MainLoop
  128 D1:B4B6 -  -  -  -  NotAnOSList:
  129 D1:B4B6 FE 2A -  -  	cp tString
  130 D1:B4B8 20 53 -  -  	jr nz, NotAString
  131 D1:B4BA -  -  -  -  AString:
  132 D1:B4BA 2A 73 EC D1 	ld hl, (outputPtr)
  133 D1:B4BE 36 07 -  -  	ld (hl), typeString
  134 D1:B4C0 23 -  -  -  	inc hl
  135 D1:B4C1 ED 5B 85 EC 
              D1 -  -  -  	ld de, (tempStringsPtr)
  136 D1:B4C6 ED 1F -  -  	ld (hl), de
  137 D1:B4C8 23 -  -  -  	inc hl
  138 D1:B4C9 23 -  -  -  	inc hl
  139 D1:B4CA 23 -  -  -  	inc hl
  140 D1:B4CB 22 73 EC D1 	ld (outputPtr), hl
  141 D1:B4CF -  -  -  -  StringLoop:
  142 D1:B4CF CD 28 10 02 	call _IncFetch
  143 D1:B4D3 38 2C -  -  	jr c, StringStop2
  144 D1:B4D5 FE 3F -  -  	cp tEnter
  145 D1:B4D7 28 28 -  -  	jr z, StringStop2
  146 D1:B4D9 FE 2A -  -  	cp tString
  147 D1:B4DB 28 1E -  -  	jr z, StringStop
  148 D1:B4DD FE 04 -  -  	cp tStore
  149 D1:B4DF 28 1A -  -  	jr z, StringStop
  150 D1:B4E1 CD AC 04 02 	call _IsA2ByteTok
  151 D1:B4E5 20 06 -  -  	jr nz, +_
  152 D1:B4E7 23 -  -  -  	inc hl
  153 D1:B4E8 22 1A 23 D0 	ld (curPC), hl
  154 D1:B4EC 2B -  -  -  	dec hl
  155 D1:B4ED D5 -  -  -  _:	push de
  156 D1:B4EE CD 70 08 02 		call _Get_Tok_Strng
  157 D1:B4F2 D1 -  -  -  	pop de
  158 D1:B4F3 21 0E 06 D0 	ld hl, OP3
  159 D1:B4F7 ED B0 -  -  	ldir
  160 D1:B4F9 18 D4 -  -  	jr StringLoop
  161 D1:B4FB -  -  -  -  StringStop:
  162 D1:B4FB FE 3F -  -  	cp tEnter
  163 D1:B4FD C4 28 10 02 	call nz, _IncFetch
  164 D1:B501 -  -  -  -  StringStop2:
  165 D1:B501 EB -  -  -  	ex de, hl
  166 D1:B502 36 00 -  -  	ld (hl), 0
  167 D1:B504 23 -  -  -  	inc hl
  168 D1:B505 22 85 EC D1 	ld (tempStringsPtr), hl
  169 D1:B509 C3 50 B2 D1 	jp MainLoop
  170 D1:B50D -  -  -  -  NotAString:
  171 D1:B50D FE 3F -  -  	cp tEnter
  172 D1:B50F CA CE B5 D1 	jp z, StopParsing
  173 D1:B513 21 E1 EA D1 	ld hl, FunctionsWithReturnValue
  174 D1:B517 01 08 00 00 	ld bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValue
  175 D1:B51B ED B1 -  -  	cpir
  176 D1:B51D C2 1B AF D1 	jp nz, InvalidTokenError
  177 D1:B521 FE AD -  -  	cp tGetKey
  178 D1:B523 28 04 -  -  	jr z, AddFunctionToOutput
  179 D1:B525 FE AB -  -  	cp trand
  180 D1:B527 20 7F -  -  	jr nz, AddFunctionToStack
  181 D1:B529 -  -  -  -  AddFunctionToOutput:
  182 D1:B529 2A 73 EC D1 	ld hl, (outputPtr)
  183 D1:B52D 36 04 -  -  	ld (hl), typeReturnValue
  184 D1:B52F 23 -  -  -  	inc hl
  185 D1:B530 77 -  -  -  	ld (hl), a
  186 D1:B531 23 -  -  -  	inc hl
  187 D1:B532 23 -  -  -  	inc hl
  188 D1:B533 23 -  -  -  	inc hl
  189 D1:B534 22 73 EC D1 	ld (outputPtr), hl
  190 D1:B538 FE AD -  -  	cp tGetKey
  191 D1:B53A C2 31 B3 D1 	jp nz, ReturnToLoop
  192 D1:B53E CD 28 10 02 	call _IncFetch
  193 D1:B542 DA 50 B2 D1 	jp c, MainLoop
  194 D1:B546 FE 10 -  -  	cp tLParen
  195 D1:B548 C2 4F B2 D1 	jp nz, MainLoopResCarryFlag
  196 D1:B54C CD 28 10 02 	call _IncFetch
  197 D1:B550 DA 05 AF D1 _:	jp c, ErrorSyntax
  198 D1:B554 FE 3F -  -  	cp tEnter
  199 D1:B556 CA 05 AF D1 	jp z, ErrorSyntax
  200 D1:B55A D6 30 -  -  	sub t0
  201 D1:B55C 38 F2 -  -  	jr c, -_
  202 D1:B55E FE 0A -  -  	cp t9-t0+1
  203 D1:B560 D2 05 AF D1 _:	jp nc, ErrorSyntax
  204 D1:B564 11 00 00 00 	ld de, 0
  205 D1:B568 5F -  -  -  	ld e, a
  206 D1:B569 CD 28 10 02 	call _IncFetch
  207 D1:B56D 38 2D -  -  	jr c, ++_
  208 D1:B56F FE 3F -  -  	cp tEnter
  209 D1:B571 28 29 -  -  	jr z, ++_
  210 D1:B573 FE 11 -  -  	cp tRParen
  211 D1:B575 28 21 -  -  	jr z, +_
  212 D1:B577 D6 30 -  -  	sub t0
  213 D1:B579 38 D5 -  -  	jr c, --_
  214 D1:B57B FE 0A -  -  	cp t9-t0+1
  215 D1:B57D 30 E1 -  -  	jr nc, -_
  216 D1:B57F D5 -  -  -  	push de
  217 D1:B580 E1 -  -  -  	pop hl
  218 D1:B581 29 -  -  -  	add hl, hl
  219 D1:B582 29 -  -  -  	add hl, hl
  220 D1:B583 19 -  -  -  	add hl, de
  221 D1:B584 29 -  -  -  	add hl, hl
  222 D1:B585 5F -  -  -  	ld e, a
  223 D1:B586 19 -  -  -  	add hl, de
  224 D1:B587 EB -  -  -  	ex de, hl
  225 D1:B588 CD 28 10 02 	call _IncFetch
  226 D1:B58C 38 0E -  -  	jr c, ++_
  227 D1:B58E FE 3F -  -  	cp tEnter
  228 D1:B590 28 0A -  -  	jr z, ++_
  229 D1:B592 FE 11 -  -  	cp tRParen
  230 D1:B594 C2 05 AF D1 	jp nz, ErrorSyntax
  231 D1:B598 CD 28 10 02 _:	call _IncFetch
  232 D1:B59C 2A 73 EC D1 _:	ld hl, (outputPtr)
  233 D1:B5A0 2B -  -  -  	dec hl
  234 D1:B5A1 2B -  -  -  	dec hl
  235 D1:B5A2 2B -  -  -  	dec hl
  236 D1:B5A3 73 -  -  -  	ld (hl), e
  237 D1:B5A4 C3 50 B2 D1 	jp MainLoop
  238 D1:B5A8 -  -  -  -  AddFunctionToStack:
  239 D1:B5A8 21 8F EC D1 	ld hl, openedParensE
  240 D1:B5AC 34 -  -  -  	inc (hl)
  241 D1:B5AD CD AC 04 02 	call _IsA2ByteTok
  242 D1:B5B1 CC 28 10 02 	call z, _IncFetch
  243 D1:B5B5 47 -  -  -  	ld b, a
  244 D1:B5B6 2A 70 EC D1 	ld hl, (stackPtr)
  245 D1:B5BA 3A 1F EA D0 	ld a, (tempToken)
  246 D1:B5BE 36 3F -  -  	ld (hl), typeFunction
  247 D1:B5C0 23 -  -  -  	inc hl
  248 D1:B5C1 77 -  -  -  	ld (hl), a
  249 D1:B5C2 23 -  -  -  	inc hl
  250 D1:B5C3 70 -  -  -  	ld (hl), b
  251 D1:B5C4 23 -  -  -  	inc hl
  252 D1:B5C5 23 -  -  -  	inc hl
  253 D1:B5C6 22 70 EC D1 	ld (stackPtr), hl
  254 D1:B5CA C3 31 B3 D1 	jp ReturnToLoop
  255 D1:B5CE -  -  -  -  StopParsing:																; move stack to output
  256 D1:B5CE CD 43 B7 D1 	call MoveStackEntryToOutput
  257 D1:B5D2 2A 73 EC D1 	ld hl, (outputPtr)
  258 D1:B5D6 11 6B EE D0 	ld de, output
  259 D1:B5DA B7 -  -  -  	or a
  260 D1:B5DB ED 52 -  -  	sbc hl, de
  261 D1:B5DD E5 -  -  -  	push hl
  262 D1:B5DE C1 -  -  -  	pop bc																	; BC / 4 is amount of elements in the stack
  263 D1:B5DF D5 -  -  -  	push de
  264 D1:B5E0 E1 -  -  -  	pop hl
  265 D1:B5E1 3E 01 -  -  	ld a, OutputIsInHL
  266 D1:B5E3 32 96 EC D1 	ld (ExprOutput), a
  267 D1:B5E7 32 97 EC D1 	ld (ExprOutput2), a
  268 D1:B5EB 78 -  -  -  	ld a, b
  269 D1:B5EC B1 -  -  -  	or a, c
  270 D1:B5ED FE 04 -  -  	cp 4
  271 D1:B5EF D8 -  -  -  	ret c
  272 D1:B5F0 CA DB B6 D1 	jp z, ParseSingleArgument
  273 D1:B5F4 -  -  -  -  Loop:
  274 D1:B5F4 AF -  -  -  	xor a
  275 D1:B5F5 FD 77 C0 -  	ld (iy+fExpression1), a
  276 D1:B5F8 FD CB BF 86 	res use_mean_routine, (iy+fExpression2)
  277 D1:B5FC ED 42 -  -  	sbc hl, bc
  278 D1:B5FE 11 6B EE D0 	ld de, output
  279 D1:B602 ED 52 -  -  	sbc hl, de
  280 D1:B604 CA 05 AF D1 	jp z, ErrorSyntax
  281 D1:B608 19 -  -  -  	add hl, de
  282 D1:B609 09 -  -  -  	add hl, bc
  283 D1:B60A E5 -  -  -  	push hl
  284 D1:B60B 21 0C 00 00 		ld hl, 12
  285 D1:B60F B7 -  -  -  		or a
  286 D1:B610 ED 42 -  -  		sbc hl, bc
  287 D1:B612 20 04 -  -  		jr nz, +_
  288 D1:B614 FD CB C0 DE 		set op_is_last_one, (iy+fExpression1)
  289 D1:B618 E1 -  -  -  _:	pop hl
  290 D1:B619 78 -  -  -  	ld a, b
  291 D1:B61A B1 -  -  -  	or a, c
  292 D1:B61B FE 04 -  -  	cp 4
  293 D1:B61D CA C7 AC D1 	jp z, MaybeChangeDEToHL
  294 D1:B621 7E -  -  -  	ld a, (hl)
  295 D1:B622 FE 1F -  -  	cp typeOperator
  296 D1:B624 28 4B -  -  	jr z, ExpressOperator
  297 D1:B626 FE 3F -  -  	cp typeFunction
  298 D1:B628 28 06 -  -  	jr z, ExpressFunction
  299 D1:B62A 23 -  -  -  	inc hl
  300 D1:B62B 23 -  -  -  	inc hl
  301 D1:B62C 23 -  -  -  	inc hl
  302 D1:B62D 23 -  -  -  	inc hl
  303 D1:B62E 18 C4 -  -  	jr Loop
  304 D1:B630 -  -  -  -  ExpressFunction:
  305 D1:B630 23 -  -  -  	inc hl																	; function = a
  306 D1:B631 7E -  -  -  	ld a, (hl)
  307 D1:B632 2B -  -  -  	dec hl
  308 D1:B633 C5 -  -  -  	push bc
  309 D1:B634 E5 -  -  -  		push hl
  310 D1:B635 CD 1A C5 D1 			call ExecuteFunction
  311 D1:B639 D1 -  -  -  		pop de
  312 D1:B63A D5 -  -  -  		push de
  313 D1:B63B DD E1 -  -  		pop ix
  314 D1:B63D ED 22 04 -  		lea hl, ix+4
  315 D1:B640 3A 91 EC D1 		ld a, (amountOfArguments)
  316 D1:B644 3D -  -  -  		dec a
  317 D1:B645 28 07 -  -  		jr z, ++_
  318 D1:B647 47 -  -  -  		ld b, a
  319 D1:B648 1B -  -  -  _:		dec de
  320 D1:B649 1B -  -  -  		dec de
  321 D1:B64A 1B -  -  -  		dec de
  322 D1:B64B 1B -  -  -  		dec de
  323 D1:B64C 10 FA -  -  		djnz -_
  324 D1:B64E C1 -  -  -  _:	pop bc
  325 D1:B64F D5 -  -  -  	push de
  326 D1:B650 C5 -  -  -  		push bc
  327 D1:B651 E5 -  -  -  			push hl
  328 D1:B652 ED B0 -  -  				ldir
  329 D1:B654 E1 -  -  -  			pop hl
  330 D1:B655 C1 -  -  -  		pop bc
  331 D1:B656 D1 -  -  -  	pop de
  332 D1:B657 EB -  -  -  	ex de, hl
  333 D1:B658 09 -  -  -  	add hl, bc
  334 D1:B659 B7 -  -  -  	or a
  335 D1:B65A ED 52 -  -  	sbc hl, de
  336 D1:B65C E5 -  -  -  	push hl
  337 D1:B65D C1 -  -  -  	pop bc																	; BC = BC+DE-HL
  338 D1:B65E 78 -  -  -  	ld a, b
  339 D1:B65F B1 -  -  -  	or c
  340 D1:B660 FE 04 -  -  	cp 4
  341 D1:B662 C8 -  -  -  	ret z
  342 D1:B663 EB -  -  -  	ex de, hl
  343 D1:B664 3A 91 EC D1 	ld a, (amountOfArguments)
  344 D1:B668 47 -  -  -  	ld b, a
  345 D1:B669 2B -  -  -  _:	dec hl
  346 D1:B66A 2B -  -  -  	dec hl
  347 D1:B66B 2B -  -  -  	dec hl
  348 D1:B66C 2B -  -  -  	dec hl
  349 D1:B66D 10 FA -  -  	djnz -_
  350 D1:B66F 18 43 -  -  	jr AddChain
  351 D1:B671 -  -  -  -  ExpressOperator:
  352 D1:B671 23 -  -  -  	inc hl
  353 D1:B672 7E -  -  -  	ld a, (hl)
  354 D1:B673 2B -  -  -  	dec hl
  355 D1:B674 C5 -  -  -  	push bc
  356 D1:B675 E5 -  -  -  		push hl
  357 D1:B676 DD E1 -  -  		pop ix
  358 D1:B678 DD 17 FD -  		ld de, (ix-3)
  359 D1:B67B DD 07 F9 -  		ld bc, (ix-7)
  360 D1:B67E CD D3 CF D1 		call ExecuteOperator
  361 D1:B682 ED 12 FC -  		lea de, ix-4
  362 D1:B685 C1 -  -  -  	pop bc
  363 D1:B686 21 08 00 00 	ld hl, 8
  364 D1:B68A 19 -  -  -  	add hl, de
  365 D1:B68B D5 -  -  -  	push de
  366 D1:B68C C5 -  -  -  		push bc
  367 D1:B68D ED B0 -  -  			ldir
  368 D1:B68F C1 -  -  -  		pop bc
  369 D1:B690 21 F4 FF FF 		ld hl, -12
  370 D1:B694 09 -  -  -  		add hl, bc
  371 D1:B695 19 -  -  -  		add hl, de
  372 D1:B696 B7 -  -  -  		or a
  373 D1:B697 ED 52 -  -  		sbc hl, de
  374 D1:B699 E5 -  -  -  		push hl
  375 D1:B69A C1 -  -  -  		pop bc
  376 D1:B69B E1 -  -  -  	pop hl
  377 D1:B69C 20 0A -  -  	jr nz, +_
  378 D1:B69E FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  379 D1:B6A2 C8 -  -  -  	ret z
  380 D1:B6A3 2B -  -  -  	dec hl
  381 D1:B6A4 2B -  -  -  	dec hl
  382 D1:B6A5 2B -  -  -  	dec hl
  383 D1:B6A6 18 3C -  -  	jr ParseSingleArgument2
  384 D1:B6A8 03 -  -  -  _:	inc bc
  385 D1:B6A9 03 -  -  -  	inc bc
  386 D1:B6AA 03 -  -  -  	inc bc
  387 D1:B6AB 03 -  -  -  	inc bc
  388 D1:B6AC FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  389 D1:B6B0 C2 F4 B5 D1 	jp nz, Loop
  390 D1:B6B4 -  -  -  -  AddChain:
  391 D1:B6B4 1E 03 -  -  	ld e, typeChainAns
  392 D1:B6B6 7E -  -  -  	ld a, (hl)
  393 D1:B6B7 FE 1F -  -  	cp typeOperator
  394 D1:B6B9 30 15 -  -  	jr nc, ChainAns2
  395 D1:B6BB 23 -  -  -  	inc hl
  396 D1:B6BC 23 -  -  -  	inc hl
  397 D1:B6BD 23 -  -  -  	inc hl
  398 D1:B6BE 23 -  -  -  	inc hl
  399 D1:B6BF B6 -  -  -  	or a, (hl)
  400 D1:B6C0 2B -  -  -  	dec hl
  401 D1:B6C1 2B -  -  -  	dec hl
  402 D1:B6C2 2B -  -  -  	dec hl
  403 D1:B6C3 2B -  -  -  	dec hl
  404 D1:B6C4 FE 1F -  -  	cp typeOperator
  405 D1:B6C6 30 08 -  -  	jr nc, ChainAns2
  406 D1:B6C8 -  -  -  -  ChainPush2:
  407 D1:B6C8 E5 -  -  -  	push hl
  408 D1:B6C9 CD D7 AC D1 		call InsertPushHLDE
  409 D1:B6CD E1 -  -  -  	pop hl
  410 D1:B6CE 1E 02 -  -  	ld e, typeChainPush
  411 D1:B6D0 -  -  -  -  ChainAns2:
  412 D1:B6D0 E5 -  -  -  	push hl
  413 D1:B6D1 2B -  -  -  		dec hl
  414 D1:B6D2 2B -  -  -  		dec hl
  415 D1:B6D3 2B -  -  -  		dec hl
  416 D1:B6D4 2B -  -  -  		dec hl
  417 D1:B6D5 73 -  -  -  		ld (hl), e
  418 D1:B6D6 E1 -  -  -  	pop hl
  419 D1:B6D7 C3 F4 B5 D1 	jp Loop
  420 D1:B6DB -  -  -  -  	
  421 D1:B6DB -  -  -  -  ParseSingleArgument:
  422 D1:B6DB 7E -  -  -  	ld a, (hl)
  423 D1:B6DC B7 -  -  -  	or a
  424 D1:B6DD 20 0D -  -  	jr nz, ParseSingleNotNumber
  425 D1:B6DF FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  426 D1:B6E3 23 -  -  -  	inc hl
  427 D1:B6E4 -  -  -  -  ParseSingleArgument2:
  428 D1:B6E4 ED 27 -  -  	ld hl, (hl)
  429 D1:B6E6 3E 21 -  -  	ld a, 021h
  430 D1:B6E8 C3 62 AC D1 	jp InsertAHL															; ld hl, *
  431 D1:B6EC -  -  -  -  ParseSingleNotNumber:
  432 D1:B6EC 3D -  -  -  	dec a
  433 D1:B6ED 20 06 -  -  	jr nz, ParseSingleNotVariable
  434 D1:B6EF 23 -  -  -  	inc hl
  435 D1:B6F0 4E -  -  -  	ld c, (hl)
  436 D1:B6F1 C3 7B AC D1 	jp InsertHIXC
  437 D1:B6F5 -  -  -  -  ParseSingleNotVariable:
  438 D1:B6F5 D6 03 -  -  	sub a, 3
  439 D1:B6F7 20 0C -  -  	jr nz, ParseSingleNotFunction
  440 D1:B6F9 23 -  -  -  	inc hl
  441 D1:B6FA 7E -  -  -  	ld a, (hl)
  442 D1:B6FB 06 02 -  -  	ld b, OutputInHL
  443 D1:B6FD FD CB C0 B6 	res need_push, (iy+fExpression1)
  444 D1:B701 C3 FF AC D1 	jp GetFunction
  445 D1:B705 -  -  -  -  ParseSingleNotFunction:
  446 D1:B705 D6 03 -  -  	sub a, 3
  447 D1:B707 C2 05 AF D1 	jp nz, ErrorSyntax
  448 D1:B70B FD CB C0 FE 	set output_is_string, (iy+fExpression1)
  449 D1:B70F E5 -  -  -  	push hl
  450 D1:B710 3E 21 -  -  		ld a, 021h
  451 D1:B712 CD AE AC D1 		call InsertA														; ld hl, *
  452 D1:B716 CD EA AC D1 		call InsertProgramPtrToDataOffset
  453 D1:B71A 2A 8B EC D1 		ld hl, (programDataDataPtr)
  454 D1:B71E CD 66 AC D1 		call InsertHL														; ld hl, XXXXXXX
  455 D1:B722 E1 -  -  -  	pop hl
  456 D1:B723 23 -  -  -  	inc hl
  457 D1:B724 ED 17 -  -  	ld de, (hl)																; hl points to string in string stack
  458 D1:B726 ED 27 -  -  	ld hl, (hl)
  459 D1:B728 01 FF FF FF 	ld bc, -1
  460 D1:B72C AF -  -  -  	xor a
  461 D1:B72D ED B1 -  -  	cpir
  462 D1:B72F ED 52 -  -  	sbc hl, de
  463 D1:B731 E5 -  -  -  	push hl
  464 D1:B732 C1 -  -  -  	pop bc																	; bc = length of string
  465 D1:B733 EB -  -  -  	ex de, hl
  466 D1:B734 ED 5B 8B EC 
              D1 -  -  -  	ld de, (programDataDataPtr)
  467 D1:B739 D5 -  -  -  	push de
  468 D1:B73A ED B0 -  -  		ldir
  469 D1:B73C ED 53 8B EC 
              D1 -  -  -  		ld (programDataDataPtr), de
  470 D1:B741 E1 -  -  -  	pop hl
  471 D1:B742 C9 -  -  -  	ret
  472 D1:B743 -  -  -  -  	
  473 D1:B743 -  -  -  -  MoveStackEntryToOutput:
  474 D1:B743 2A 70 EC D1 	ld hl, (stackPtr)
  475 D1:B747 11 83 EA D0 	ld de, stack
  476 D1:B74B B7 -  -  -  	or a
  477 D1:B74C ED 52 -  -  	sbc hl, de
  478 D1:B74E C8 -  -  -  	ret z
  479 D1:B74F 19 -  -  -  	add hl, de
  480 D1:B750 2B -  -  -  	dec hl
  481 D1:B751 2B -  -  -  	dec hl
  482 D1:B752 2B -  -  -  	dec hl
  483 D1:B753 2B -  -  -  	dec hl
  484 D1:B754 22 70 EC D1 	ld (stackPtr), hl
  485 D1:B758 ED 5B 73 EC 
              D1 -  -  -  	ld de, (outputPtr)
  486 D1:B75D 7E -  -  -  	ld a, (hl)
  487 D1:B75E FE 3F -  -  	cp typeFunction
  488 D1:B760 20 07 -  -  	jr nz, +_
  489 D1:B762 23 -  -  -  	inc hl
  490 D1:B763 7E -  -  -  	ld a, (hl)
  491 D1:B764 2B -  -  -  	dec hl
  492 D1:B765 FE 10 -  -  	cp tLParen
  493 D1:B767 28 DA -  -  	jr z, MoveStackEntryToOutput
  494 D1:B769 ED A0 -  -  _:	ldi
  495 D1:B76B ED A0 -  -  	ldi
  496 D1:B76D ED A0 -  -  	ldi
  497 D1:B76F ED A0 -  -  	ldi
  498 D1:B771 ED 53 73 EC 
              D1 -  -  -  	ld (outputPtr), de
  499 D1:B776 18 CB -  -  	jr MoveStackEntryToOutput
Listing for file "ICE.asm"
  457 D1:B778 -  -  -  -  #include "putchar.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\putchar.asm"
    1 D1:B778 -  -  -  -  _PrintChar_ASM:
    2 D1:B778 E5 -  -  -  	push hl
    3 D1:B779 -  -  -  -  TextXPos_ASM = $+1
    4 D1:B779 01 00 00 00 		ld	bc, 0
    5 D1:B77D F5 -  -  -  		push af
    6 D1:B77E F5 -  -  -  			push af
    7 D1:B77F C5 -  -  -  				push bc
    8 D1:B780 B7 -  -  -  					or	a,a
    9 D1:B781 ED 62 -  -  					sbc	hl,hl
   10 D1:B783 6F -  -  -  					ld	l,a
   11 D1:B784 11 E6 B7 D1 					ld	de, DefaultCharSpacing_ASM
   12 D1:B788 19 -  -  -  					add	hl,de
   13 D1:B789 7E -  -  -  					ld	a,(hl)
   14 D1:B78A 32 CD B7 D1 					ld	(charwidth),a
   15 D1:B78E B7 -  -  -  					or	a,a
   16 D1:B78F ED 62 -  -  					sbc	hl,hl
   17 D1:B791 6F -  -  -  					ld	l,a
   18 D1:B792 ED 44 -  -  					neg
   19 D1:B794 32 9E B7 D1 					ld	(CharWidthDelta_ASM),a
   20 D1:B798 09 -  -  -  					add	hl,bc
   21 D1:B799 22 7A B7 D1 					ld	(TextXPos_ASM),hl
   22 D1:B79D -  -  -  -  CharWidthDelta_ASM =$+1
   23 D1:B79D 11 FF FF FF 					ld	de,$FFFFFF
   24 D1:B7A1 21 40 01 00 					ld	hl,lcdWidth
   25 D1:B7A5 19 -  -  -  					add	hl,de
   26 D1:B7A6 22 DA B7 D1 					ld	(line_change),hl
   27 D1:B7AA -  -  -  -  TextYPos_ASM = $+1
   28 D1:B7AA 2E 00 -  -  					ld	l,0
   29 D1:B7AC 26 A0 -  -  					ld	h,160
   30 D1:B7AE ED 6C -  -  					mlt	hl
   31 D1:B7B0 29 -  -  -  					add	hl,hl
   32 D1:B7B1 11 00 00 D4 					ld	de,vRAM
   33 D1:B7B5 19 -  -  -  					add	hl,de
   34 D1:B7B6 D1 -  -  -  				pop	de
   35 D1:B7B7 19 -  -  -  				add	hl,de
   36 D1:B7B8 F1 -  -  -  			pop	af
   37 D1:B7B9 EB -  -  -  			ex	de,hl
   38 D1:B7BA B7 -  -  -  			or	a,a
   39 D1:B7BB ED 62 -  -  			sbc	hl,hl
   40 D1:B7BD D6 17 -  -  			sub a, 23
   41 D1:B7BF 6F -  -  -  			ld	l,a
   42 D1:B7C0 29 -  -  -  			add	hl,hl
   43 D1:B7C1 29 -  -  -  			add	hl,hl
   44 D1:B7C2 29 -  -  -  			add	hl,hl
   45 D1:B7C3 01 61 B8 D1 			ld	bc, DefaultTextData_ASM
   46 D1:B7C7 09 -  -  -  			add	hl,bc
   47 D1:B7C8 06 08 -  -  			ld	b,8
   48 D1:B7CA C5 -  -  -  iloop:		push bc
   49 D1:B7CB 4E -  -  -  				ld c,(hl)
   50 D1:B7CC -  -  -  -  charwidth =$+1
   51 D1:B7CC 06 00 -  -  				ld b,0
   52 D1:B7CE EB -  -  -  				ex de,hl
   53 D1:B7CF -  -  -  -  color = $+1
   54 D1:B7CF 3E 00 -  -  				ld a, 0
   55 D1:B7D1 CB 21 -  -  cloop:			sla	c
   56 D1:B7D3 30 01 -  -  				jr nc,+_
   57 D1:B7D5 77 -  -  -  				ld (hl), a
   58 D1:B7D6 23 -  -  -  _:				inc	hl
   59 D1:B7D7 10 F8 -  -  				djnz cloop
   60 D1:B7D9 -  -  -  -  line_change =$+1
   61 D1:B7D9 01 00 00 00 				ld bc,0
   62 D1:B7DD 09 -  -  -  				add	hl,bc
   63 D1:B7DE EB -  -  -  				ex de,hl
   64 D1:B7DF 23 -  -  -  				inc	hl
   65 D1:B7E0 C1 -  -  -  			pop	bc
   66 D1:B7E1 10 E7 -  -  			djnz iloop
   67 D1:B7E3 F1 -  -  -  		pop	af
   68 D1:B7E4 E1 -  -  -  	pop	hl
   69 D1:B7E5 C9 -  -  -  	ret
   70 D1:B7E6 -  -  -  -  
   71 D1:B7E6 -  -  -  -  DefaultCharSpacing_ASM:
   72 D1:B7E6 -  -  -  -  	;   0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
   73 D1:B7E6 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 02 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8	; 0
   74 D1:B7F6 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	; 1
   75 D1:B806 03 04 06 08 
              08 08 08 05 
              05 05 08 07 
              04 07 03 08 	.db 3,4,6,8,8,8,8,5,5,5,8,7,4,7,3,8	; 2
   76 D1:B816 08 07 08 08 
              08 08 08 08 
              08 08 03 04 
              06 07 06 07 	.db 8,7,8,8,8,8,8,8,8,8,3,4,6,7,6,7	; 3
   77 D1:B826 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	; 4
   78 D1:B836 08 08 08 08 
              08 08 08 08 
              08 08 08 05 
              08 05 08 08 	.db 8,8,8,8,8,8,8,8,8,8,8,5,8,5,8,8	; 5
   79 D1:B846 04 08 08 08 
              08 08 08 08 
              08 05 08 08 
              05 08 08 08 	.db 4,8,8,8,8,8,8,8,8,5,8,8,5,8,8,8	; 6
   80 D1:B856 08 08 08 08 
              07 08 08 08 
              08 08 08 -  	.db 8,8,8,8,7,8,8,8,8,8,8			; 7
   81 D1:B861 -  -  -  -   
   82 D1:B861 -  -  -  -  ;-------------------------------------------------------------------------------
   83 D1:B861 -  -  -  -  DefaultTextData_ASM:
   84 D1:B861 FF FF FF FF 
              FF FF FF FF Char000: .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF	; _
   85 D1:B869 18 3C 7E 18 
              18 18 18 00 Char024: .db $18,$3C,$7E,$18,$18,$18,$18,$00	; .
   86 D1:B871 18 18 18 18 
              7E 3C 18 00 Char025: .db $18,$18,$18,$18,$7E,$3C,$18,$00	; .
   87 D1:B879 00 18 0C FE 
              0C 18 00 00 Char026: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	; .
   88 D1:B881 00 30 60 FE 
              60 30 00 00 Char027: .db $00,$30,$60,$FE,$60,$30,$00,$00	; .
   89 D1:B889 00 18 0C FE 
              0C 18 00 00 Char028: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	; ->
   90 D1:B891 00 24 66 FF 
              66 24 00 00 Char029: .db $00,$24,$66,$FF,$66,$24,$00,$00	; .
   91 D1:B899 00 18 3C 7E 
              FF FF 00 00 Char030: .db $00,$18,$3C,$7E,$FF,$FF,$00,$00	; .
   92 D1:B8A1 00 FF FF 7E 
              3C 18 00 00 Char031: .db $00,$FF,$FF,$7E,$3C,$18,$00,$00	; .
   93 D1:B8A9 00 00 00 00 
              00 00 00 00 Char032: .db $00,$00,$00,$00,$00,$00,$00,$00	;  
   94 D1:B8B1 C0 C0 C0 C0 
              C0 00 C0 00 Char033: .db $C0,$C0,$C0,$C0,$C0,$00,$C0,$00	; !
   95 D1:B8B9 D8 D8 D8 00 
              00 00 00 00 Char034: .db $D8,$D8,$D8,$00,$00,$00,$00,$00	; "
   96 D1:B8C1 6C 6C FE 6C 
              FE 6C 6C 00 Char035: .db $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
   97 D1:B8C9 18 7E C0 7C 
              06 FC 18 00 Char036: .db $18,$7E,$C0,$7C,$06,$FC,$18,$00	; $
   98 D1:B8D1 00 C6 CC 18 
              30 66 C6 00 Char037: .db $00,$C6,$CC,$18,$30,$66,$C6,$00	; %
   99 D1:B8D9 38 6C 38 76 
              DC CC 76 00 Char038: .db $38,$6C,$38,$76,$DC,$CC,$76,$00	; &
  100 D1:B8E1 30 30 60 00 
              00 00 00 00 Char039: .db $30,$30,$60,$00,$00,$00,$00,$00	; '
  101 D1:B8E9 30 60 C0 C0 
              C0 60 30 00 Char040: .db $30,$60,$C0,$C0,$C0,$60,$30,$00	; (
  102 D1:B8F1 C0 60 30 30 
              30 60 C0 00 Char041: .db $C0,$60,$30,$30,$30,$60,$C0,$00	; )
  103 D1:B8F9 00 66 3C FF 
              3C 66 00 00 Char042: .db $00,$66,$3C,$FF,$3C,$66,$00,$00	; *
  104 D1:B901 00 30 30 FC 
              FC 30 30 00 Char043: .db $00,$30,$30,$FC,$FC,$30,$30,$00	; +
  105 D1:B909 00 00 00 00 
              00 60 60 C0 Char044: .db $00,$00,$00,$00,$00,$60,$60,$C0	; ,
  106 D1:B911 00 00 00 FC 
              00 00 00 00 Char045: .db $00,$00,$00,$FC,$00,$00,$00,$00	; -
  107 D1:B919 00 00 00 00 
              00 C0 C0 00 Char046: .db $00,$00,$00,$00,$00,$C0,$C0,$00	; .
  108 D1:B921 06 0C 18 30 
              60 C0 80 00 Char047: .db $06,$0C,$18,$30,$60,$C0,$80,$00	; /
  109 D1:B929 7C CE DE F6 
              E6 C6 7C 00 Char048: .db $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00	; 0
  110 D1:B931 30 70 30 30 
              30 30 FC 00 Char049: .db $30,$70,$30,$30,$30,$30,$FC,$00	; 1
  111 D1:B939 7C C6 06 7C 
              C0 C0 FE 00 Char050: .db $7C,$C6,$06,$7C,$C0,$C0,$FE,$00	; 2
  112 D1:B941 FC 06 06 3C 
              06 06 FC 00 Char051: .db $FC,$06,$06,$3C,$06,$06,$FC,$00	; 3
  113 D1:B949 0C CC CC CC 
              FE 0C 0C 00 Char052: .db $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00	; 4
  114 D1:B951 FE C0 FC 06 
              06 C6 7C 00 Char053: .db $FE,$C0,$FC,$06,$06,$C6,$7C,$00	; 5
  115 D1:B959 7C C0 C0 FC 
              C6 C6 7C 00 Char054: .db $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00	; 6
  116 D1:B961 FE 06 06 0C 
              18 30 30 00 Char055: .db $FE,$06,$06,$0C,$18,$30,$30,$00	; 7
  117 D1:B969 7C C6 C6 7C 
              C6 C6 7C 00 Char056: .db $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00	; 8
  118 D1:B971 7C C6 C6 7E 
              06 06 7C 00 Char057: .db $7C,$C6,$C6,$7E,$06,$06,$7C,$00	; 9
  119 D1:B979 00 C0 C0 00 
              00 C0 C0 00 Char058: .db $00,$C0,$C0,$00,$00,$C0,$C0,$00	; :
  120 D1:B981 00 60 60 00 
              00 60 60 C0 Char059: .db $00,$60,$60,$00,$00,$60,$60,$C0	; ;
  121 D1:B989 18 30 60 C0 
              60 30 18 00 Char060: .db $18,$30,$60,$C0,$60,$30,$18,$00	; <
  122 D1:B991 00 00 FC 00 
              FC 00 00 00 Char061: .db $00,$00,$FC,$00,$FC,$00,$00,$00	; =
  123 D1:B999 C0 60 30 18 
              30 60 C0 00 Char062: .db $C0,$60,$30,$18,$30,$60,$C0,$00	; >
  124 D1:B9A1 78 CC 18 30 
              30 00 30 00 Char063: .db $78,$CC,$18,$30,$30,$00,$30,$00	; ?
  125 D1:B9A9 7C C6 DE DE 
              DE C0 7E 00 Char064: .db $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00	; @
  126 D1:B9B1 38 6C C6 C6 
              FE C6 C6 00 Char065: .db $38,$6C,$C6,$C6,$FE,$C6,$C6,$00	; A
  127 D1:B9B9 FC C6 C6 FC 
              C6 C6 FC 00 Char066: .db $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00	; B
  128 D1:B9C1 7C C6 C0 C0 
              C0 C6 7C 00 Char067: .db $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00	; C
  129 D1:B9C9 F8 CC C6 C6 
              C6 CC F8 00 Char068: .db $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00	; D
  130 D1:B9D1 FE C0 C0 F8 
              C0 C0 FE 00 Char069: .db $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00	; E
  131 D1:B9D9 FE C0 C0 F8 
              C0 C0 C0 00 Char070: .db $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00	; F
  132 D1:B9E1 7C C6 C0 C0 
              CE C6 7C 00 Char071: .db $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00	; G
  133 D1:B9E9 C6 C6 C6 FE 
              C6 C6 C6 00 Char072: .db $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00	; H
  134 D1:B9F1 7E 18 18 18 
              18 18 7E 00 Char073: .db $7E,$18,$18,$18,$18,$18,$7E,$00	; I
  135 D1:B9F9 06 06 06 06 
              06 C6 7C 00 Char074: .db $06,$06,$06,$06,$06,$C6,$7C,$00	; J
  136 D1:BA01 C6 CC D8 F0 
              D8 CC C6 00 Char075: .db $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
  137 D1:BA09 C0 C0 C0 C0 
              C0 C0 FE 00 Char076: .db $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00	; L
  138 D1:BA11 C6 EE FE FE 
              D6 C6 C6 00 Char077: .db $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00	; M
  139 D1:BA19 C6 E6 F6 DE 
              CE C6 C6 00 Char078: .db $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
  140 D1:BA21 7C C6 C6 C6 
              C6 C6 7C 00 Char079: .db $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00	; O
  141 D1:BA29 FC C6 C6 FC 
              C0 C0 C0 00 Char080: .db $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00	; P
  142 D1:BA31 7C C6 C6 C6 
              D6 DE 7C 06 Char081: .db $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06	; Q
  143 D1:BA39 FC C6 C6 FC 
              D8 CC C6 00 Char082: .db $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00	; R
  144 D1:BA41 7C C6 C0 7C 
              06 C6 7C 00 Char083: .db $7C,$C6,$C0,$7C,$06,$C6,$7C,$00	; S
  145 D1:BA49 FF 18 18 18 
              18 18 18 00 Char084: .db $FF,$18,$18,$18,$18,$18,$18,$00	; T
  146 D1:BA51 C6 C6 C6 C6 
              C6 C6 FE 00 Char085: .db $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00	; U
  147 D1:BA59 C6 C6 C6 C6 
              C6 7C 38 00 Char086: .db $C6,$C6,$C6,$C6,$C6,$7C,$38,$00	; V
  148 D1:BA61 C6 C6 C6 C6 
              D6 FE 6C 00 Char087: .db $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00	; W
  149 D1:BA69 C6 C6 6C 38 
              6C C6 C6 00 Char088: .db $C6,$C6,$6C,$38,$6C,$C6,$C6,$00	; X
  150 D1:BA71 C6 C6 C6 7C 
              18 30 E0 00 Char089: .db $C6,$C6,$C6,$7C,$18,$30,$E0,$00	; Y
  151 D1:BA79 FE 06 0C 18 
              30 60 FE 00 Char090: .db $FE,$06,$0C,$18,$30,$60,$FE,$00	; Z
  152 D1:BA81 F0 C0 C0 C0 
              C0 C0 F0 00 Char091: .db $F0,$C0,$C0,$C0,$C0,$C0,$F0,$00	; [
  153 D1:BA89 C0 60 30 18 
              0C 06 02 00 Char092: .db $C0,$60,$30,$18,$0C,$06,$02,$00	; \
  154 D1:BA91 F0 30 30 30 
              30 30 F0 00 Char093: .db $F0,$30,$30,$30,$30,$30,$F0,$00	; ]
  155 D1:BA99 10 38 6C C6 
              00 00 00 00 Char094: .db $10,$38,$6C,$C6,$00,$00,$00,$00	; ^
  156 D1:BAA1 00 00 00 00 
              00 00 00 FF Char095: .db $00,$00,$00,$00,$00,$00,$00,$FF	; _
  157 D1:BAA9 C0 C0 60 00 
              00 00 00 00 Char096: .db $C0,$C0,$60,$00,$00,$00,$00,$00	; `
  158 D1:BAB1 00 00 7C 06 
              7E C6 7E 00 Char097: .db $00,$00,$7C,$06,$7E,$C6,$7E,$00	; a
  159 D1:BAB9 C0 C0 C0 FC 
              C6 C6 FC 00 Char098: .db $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00	; b
  160 D1:BAC1 00 00 7C C6 
              C0 C6 7C 00 Char099: .db $00,$00,$7C,$C6,$C0,$C6,$7C,$00	; c
  161 D1:BAC9 06 06 06 7E 
              C6 C6 7E 00 Char100: .db $06,$06,$06,$7E,$C6,$C6,$7E,$00	; d
  162 D1:BAD1 00 00 7C C6 
              FE C0 7C 00 Char101: .db $00,$00,$7C,$C6,$FE,$C0,$7C,$00	; e
  163 D1:BAD9 1C 36 30 78 
              30 30 78 00 Char102: .db $1C,$36,$30,$78,$30,$30,$78,$00	; f
  164 D1:BAE1 00 00 7E C6 
              C6 7E 06 FC Char103: .db $00,$00,$7E,$C6,$C6,$7E,$06,$FC	; g
  165 D1:BAE9 C0 C0 FC C6 
              C6 C6 C6 00 Char104: .db $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00	; h
  166 D1:BAF1 60 00 E0 60 
              60 60 F0 00 Char105: .db $60,$00,$E0,$60,$60,$60,$F0,$00	; i
  167 D1:BAF9 06 00 06 06 
              06 06 C6 7C Char106: .db $06,$00,$06,$06,$06,$06,$C6,$7C	; j
  168 D1:BB01 C0 C0 CC D8 
              F8 CC C6 00 Char107: .db $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00	; k
  169 D1:BB09 E0 60 60 60 
              60 60 F0 00 Char108: .db $E0,$60,$60,$60,$60,$60,$F0,$00	; l
  170 D1:BB11 00 00 CC FE 
              FE D6 D6 00 Char109: .db $00,$00,$CC,$FE,$FE,$D6,$D6,$00	; m
  171 D1:BB19 00 00 FC C6 
              C6 C6 C6 00 Char110: .db $00,$00,$FC,$C6,$C6,$C6,$C6,$00	; n
  172 D1:BB21 00 00 7C C6 
              C6 C6 7C 00 Char111: .db $00,$00,$7C,$C6,$C6,$C6,$7C,$00	; o
  173 D1:BB29 00 00 FC C6 
              C6 FC C0 C0 Char112: .db $00,$00,$FC,$C6,$C6,$FC,$C0,$C0	; p
  174 D1:BB31 00 00 7E C6 
              C6 7E 06 06 Char113: .db $00,$00,$7E,$C6,$C6,$7E,$06,$06	; q
  175 D1:BB39 00 00 FC C6 
              C0 C0 C0 00 Char114: .db $00,$00,$FC,$C6,$C0,$C0,$C0,$00	; r
  176 D1:BB41 00 00 7E C0 
              7C 06 FC 00 Char115: .db $00,$00,$7E,$C0,$7C,$06,$FC,$00	; s
  177 D1:BB49 30 30 FC 30 
              30 30 1C 00 Char116: .db $30,$30,$FC,$30,$30,$30,$1C,$00	; t
  178 D1:BB51 00 00 C6 C6 
              C6 C6 7E 00 Char117: .db $00,$00,$C6,$C6,$C6,$C6,$7E,$00	; u
  179 D1:BB59 00 00 C6 C6 
              C6 7C 38 00 Char118: .db $00,$00,$C6,$C6,$C6,$7C,$38,$00	; v
  180 D1:BB61 00 00 C6 C6 
              D6 FE 6C 00 Char119: .db $00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
  181 D1:BB69 00 00 C6 6C 
              38 6C C6 00 Char120: .db $00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
  182 D1:BB71 00 00 C6 C6 
              C6 7E 06 FC Char121: .db $00,$00,$C6,$C6,$C6,$7E,$06,$FC	; y
  183 D1:BB79 00 00 FE 0C 
              38 60 FE 00 Char122: .db $00,$00,$FE,$0C,$38,$60,$FE,$00	; z
  184 D1:BB81 1C 30 30 E0 
              30 30 1C 00 Char123: .db $1C,$30,$30,$E0,$30,$30,$1C,$00	; {
  185 D1:BB89 C0 C0 C0 00 
              C0 C0 C0 00 Char124: .db $C0,$C0,$C0,$00,$C0,$C0,$C0,$00	; |
  186 D1:BB91 E0 30 30 1C 
              30 30 E0 00 Char125: .db $E0,$30,$30,$1C,$30,$30,$E0,$00	; }
  187 D1:BB99 76 DC 00 00 
              00 00 00 00 Char126: .db $76,$DC,$00,$00,$00,$00,$00,$00	; ~
  188 D1:BBA1 00 10 38 6C 
              C6 C6 FE 00 Char127: .db $00,$10,$38,$6C,$C6,$C6,$FE,$00	; .
Listing for file "ICE.asm"
  458 D1:BBA9 -  -  -  -  #include "programs.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\programs.asm"
    1 D1:BBA9 -  -  -  -  FindNextGoodVar:
    2 D1:BBA9 ED 5B 9A 25 
              D0 -  -  -  	ld de, (pTemp)
    3 D1:BBAE CD 3C 01 02 	call _CpHLDE
    4 D1:BBB2 20 02 -  -  	jr nz, FindContinue
    5 D1:BBB4 3C -  -  -  	inc a									; return nz
    6 D1:BBB5 C9 -  -  -  	ret
    7 D1:BBB6 -  -  -  -  FindContinue:
    8 D1:BBB6 7E -  -  -  	ld a, (hl)
    9 D1:BBB7 2B -  -  -  	dec hl
   10 D1:BBB8 2B -  -  -  	dec hl
   11 D1:BBB9 2B -  -  -  	dec hl
   12 D1:BBBA FE 05 -  -  	cp ProgObj
   13 D1:BBBC 28 04 -  -  	jr z, FindGoodProgram
   14 D1:BBBE FE 06 -  -  	cp ProtProgObj
   15 D1:BBC0 20 43 -  -  	jr nz, FindWrongProgram
   16 D1:BBC2 -  -  -  -  FindGoodProgram:
   17 D1:BBC2 5E -  -  -  	ld e, (hl)
   18 D1:BBC3 2B -  -  -  	dec hl
   19 D1:BBC4 56 -  -  -  	ld d, (hl)
   20 D1:BBC5 2B -  -  -  	dec hl
   21 D1:BBC6 7E -  -  -  	ld a, (hl)
   22 D1:BBC7 CD 68 1D 02 	call _SetDEUToA
   23 D1:BBCB FE D0 -  -  	cp 0D0h
   24 D1:BBCD 30 0C -  -  	jr nc, +_
   25 D1:BBCF E5 -  -  -  	push hl
   26 D1:BBD0 EB -  -  -  		ex de, hl
   27 D1:BBD1 11 09 00 00 		ld de, 9
   28 D1:BBD5 19 -  -  -  		add hl, de
   29 D1:BBD6 5E -  -  -  		ld e, (hl)
   30 D1:BBD7 1C -  -  -  		inc e
   31 D1:BBD8 19 -  -  -  		add hl, de
   32 D1:BBD9 EB -  -  -  		ex de, hl
   33 D1:BBDA E1 -  -  -  	pop hl
   34 D1:BBDB 13 -  -  -  _:	inc de
   35 D1:BBDC 13 -  -  -  	inc de
   36 D1:BBDD 1A -  -  -  	ld a, (de)
   37 D1:BBDE FE 2C -  -  	cp tii
   38 D1:BBE0 20 25 -  -  	jr nz, FindWrongProgram2
   39 D1:BBE2 2B -  -  -  	dec hl
   40 D1:BBE3 D5 -  -  -  	push de
   41 D1:BBE4 E5 -  -  -  		push hl
   42 D1:BBE5 2A 79 EC D1 			ld hl, (ProgramNamesPtr)
   43 D1:BBE9 11 08 00 00 			ld de, 8
   44 D1:BBED 19 -  -  -  			add hl, de
   45 D1:BBEE 22 79 EC D1 			ld (ProgramNamesPtr), hl
   46 D1:BBF2 B7 -  -  -  			or a
   47 D1:BBF3 ED 52 -  -  			sbc hl, de
   48 D1:BBF5 EB -  -  -  			ex de, hl
   49 D1:BBF6 E1 -  -  -  		pop hl
   50 D1:BBF7 46 -  -  -  		ld b, (hl)
   51 D1:BBF8 48 -  -  -  		ld c, b
   52 D1:BBF9 2B -  -  -  		dec hl
   53 D1:BBFA -  -  -  -  FindCopyProgName:
   54 D1:BBFA 7E -  -  -  		ld a, (hl)
   55 D1:BBFB 12 -  -  -  		ld (de), a
   56 D1:BBFC 2B -  -  -  		dec hl
   57 D1:BBFD 13 -  -  -  		inc de
   58 D1:BBFE 10 FA -  -  		djnz FindCopyProgName
   59 D1:BC00 AF -  -  -  		xor a
   60 D1:BC01 12 -  -  -  		ld (de), a
   61 D1:BC02 D1 -  -  -  	pop de
   62 D1:BC03 BF -  -  -  	cp a
   63 D1:BC04 C9 -  -  -  	ret
   64 D1:BC05 -  -  -  -  FindWrongProgram:
   65 D1:BC05 2B -  -  -  	dec hl
   66 D1:BC06 2B -  -  -  	dec hl
   67 D1:BC07 -  -  -  -  FindWrongProgram2:
   68 D1:BC07 2B -  -  -  	dec hl
   69 D1:BC08 46 -  -  -  	ld b, (hl)
   70 D1:BC09 2B -  -  -  	dec hl
   71 D1:BC0A -  -  -  -  FindSkipProgramName:
   72 D1:BC0A 2B -  -  -  	dec hl
   73 D1:BC0B 10 FD -  -  	djnz FindSkipProgramName
   74 D1:BC0D 18 9A -  -  	jr FindNextGoodVar
Listing for file "ICE.asm"
  459 D1:BC0F -  -  -  -  #include "editor2.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\editor2.asm"
    1 D1:BC0F -  -  -  -  OpenEditBuffer:
    2 D1:BC0F 21 F9 05 D0 	ld hl, OP1+1
    3 D1:BC13 11 5B 06 D0 	ld de, progToEdit
    4 D1:BC17 01 08 00 00 	ld bc, 8
    5 D1:BC1B ED B0 -  -  	ldir
    6 D1:BC1D 11 1F EA D0 	ld de, saveSScreen
    7 D1:BC21 21 2F BC D1 	ld hl, +_
    8 D1:BC25 01 67 00 00 	ld bc, StopProgramEditor - +_
    9 D1:BC29 ED B0 -  -  	ldir
   10 D1:BC2B C3 1F EA D0 	jp saveSScreen
   11 D1:BC2F 21 81 A8 D1 _:	ld hl, UserMem
   12 D1:BC33 ED 5B 8C 11 
              D0 -  -  -  	ld de, (asm_prgm_size)
   13 D1:BC38 CD 90 05 02 	call _DelMem
   14 D1:BC3C 3E 46 -  -  	ld a, kPrgmEd
   15 D1:BC3E CD 6C 01 02 	call _NewContext
   16 D1:BC42 40 ED 4B E3 
              08 -  -  -  	ld.sis bc, (errOffset - 0D00000h)
   17 D1:BC47 2A 3D 24 D0 	ld hl, (editTail)
   18 D1:BC4B ED 5B 3A 24 
              D0 -  -  -  	ld de, (editCursor)
   19 D1:BC50 ED B0 -  -  	ldir
   20 D1:BC52 22 3D 24 D0 	ld (editTail), hl
   21 D1:BC56 ED 53 3A 24 
              D0 -  -  -  	ld (editCursor), de
   22 D1:BC5B 01 00 00 00 	ld bc, 0
   23 D1:BC5F CD F8 0C 02 _:	call _BufLeft
   24 D1:BC63 28 0C -  -  	jr z, AtTopOfProgram
   25 D1:BC65 7B -  -  -  	ld a, e
   26 D1:BC66 FE 3F -  -  	cp tEnter
   27 D1:BC68 28 03 -  -  	jr z, +_
   28 D1:BC6A 03 -  -  -  	inc bc
   29 D1:BC6B 18 F2 -  -  	jr -_
   30 D1:BC6D CD FC 0C 02 _:	call _BufRight
   31 D1:BC71 -  -  -  -  AtTopOfProgram:
   32 D1:BC71 C5 -  -  -  	push bc
   33 D1:BC72 CD 1C 08 02 		call _ClrWindow
   34 D1:BC76 21 01 00 00 		ld hl, 0000001h
   35 D1:BC7A 22 95 05 D0 		ld (curRow), hl
   36 D1:BC7E 3E 3A -  -  		ld a, ':'
   37 D1:BC80 CD B8 07 02 		call _PutC
   38 D1:BC84 CD 68 0D 02 		call _DispEOW
   39 D1:BC88 C1 -  -  -  	pop bc
   40 D1:BC89 78 -  -  -  _:	ld a, b
   41 D1:BC8A B1 -  -  -  	or c
   42 D1:BC8B CA 54 01 02 	jp z, _Mon
   43 D1:BC8F CD 4C 0D 02 	call _CursorRight
   44 D1:BC93 0B -  -  -  	dec bc
   45 D1:BC94 18 F3 -  -  	jr -_
   46 D1:BC96 -  -  -  -  StopProgramEditor:
Listing for file "ICE.asm"
  460 D1:BC96 -  -  -  -  #include "hooks.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\hooks.asm"
    1 D1:BC96 -  -  -  -  InstallHooks:
    2 D1:BC96 21 F1 EC D1 	ld hl, ICEAppvar
    3 D1:BC9A CD 20 03 02 	call _Mov9ToOP1
    4 D1:BC9E CD 0C 05 02 	call _ChkFindSym
    5 D1:BCA2 38 13 -  -  	jr c, ++_
    6 D1:BCA4 CD 98 1F 02 	call _ChkInRAM
    7 D1:BCA8 30 09 -  -  	jr nc, +_
    8 D1:BCAA CD 48 14 02 	call _Arc_Unarc
    9 D1:BCAE 01 05 00 00 	ld bc, 5
   10 D1:BCB2 09 -  -  -  	add hl, bc
   11 D1:BCB3 CD 88 05 02 _:	call _DelVar
   12 D1:BCB7 21 28 08 00 _:	ld hl, Hooks_end - KeyHook_start
   13 D1:BCBB CD 30 13 02 	call _CreateAppVar
   14 D1:BCBF 13 -  -  -  	inc de
   15 D1:BCC0 13 -  -  -  	inc de
   16 D1:BCC1 21 F2 BC D1 	ld hl, KeyHook_start
   17 D1:BCC5 01 28 08 00 	ld bc, Hooks_end - KeyHook_start
   18 D1:BCC9 ED B0 -  -  	ldir
   19 D1:BCCB CD C8 02 02 	call _OP4ToOP1
   20 D1:BCCF CD 48 14 02 	call _Arc_Unarc
   21 D1:BCD3 CD 0C 05 02 	call _ChkFindSym
   22 D1:BCD7 21 13 00 00 	ld hl, 19														; archived program header+VAT entry
   23 D1:BCDB 19 -  -  -  	add hl, de
   24 D1:BCDC CD CC 13 02 	call _SetGetKeyHook
   25 D1:BCE0 -  -  -  -  	
   26 D1:BCE0 11 4F 07 00 	ld de, KeyHook_end - KeyHook_start
   27 D1:BCE4 19 -  -  -  	add hl, de
   28 D1:BCE5 CD F8 13 02 	call _SetTokenHook
   29 D1:BCE9 -  -  -  -  	
   30 D1:BCE9 11 2B 00 00 	ld de, TokenHook_end - TokenHook_start
   31 D1:BCED 19 -  -  -  	add hl, de
   32 D1:BCEE C3 C4 13 02 	jp _SetCursorhook
   33 D1:BCF2 -  -  -  -  	
   34 D1:BCF2 -  -  -  -  KeyHook_start:
   35 D1:BCF2 83 -  -  -  	.db 83h
   36 D1:BCF3 B7 -  -  -  	or a
   37 D1:BCF4 C8 -  -  -  	ret z
   38 D1:BCF5 47 -  -  -  	ld b, a
   39 D1:BCF6 3A E0 07 D0 	ld a, (cxCurApp)
   40 D1:BCFA FE 46 -  -  	cp cxPrgmEdit
   41 D1:BCFC 78 -  -  -  	ld a, b
   42 D1:BCFD C0 -  -  -  	ret nz
   43 D1:BCFE F5 -  -  -  	push af
   44 D1:BCFF CD A0 20 02 		call _os_ClearStatusBarLow
   45 D1:BD03 FD CB B0 86 		res displayed_det, (iy+fAlways1)
   46 D1:BD07 F1 -  -  -  	pop af
   47 D1:BD08 FE 5A -  -  	cp kTrace
   48 D1:BD0A C0 -  -  -  	ret nz
   49 D1:BD0B -  -  -  -  DisplayCustomTokensAndCFunctions:
   50 D1:BD0B CD A8 08 02 	call _CursorOff
   51 D1:BD0F 16 00 -  -  	ld d, 0
   52 D1:BD11 -  -  -  -  DisplayTabWithTokens:
   53 D1:BD11 D5 -  -  -  	push de
   54 D1:BD12 CD 08 08 02 		call _ClrLCDFull
   55 D1:BD16 D1 -  -  -  	pop de
   56 D1:BD17 21 1E 00 00 	ld hl, 30
   57 D1:BD1B 22 D5 08 D0 	ld (penRow), hl
   58 D1:BD1F 21 0C 00 00 	ld hl, 12
   59 D1:BD23 22 D2 08 D0 	ld (penCol), hl
   60 D1:BD27 06 00 -  -  	ld b, 0
   61 D1:BD29 7A -  -  -  	ld a, d
   62 D1:BD2A 1E 03 -  -  	ld e, 3
   63 D1:BD2C ED 5C -  -  	mlt de
   64 D1:BD2E 21 19 06 00 	ld hl, TabData - KeyHook_start
   65 D1:BD32 19 -  -  -  	add hl, de
   66 D1:BD33 ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
   67 D1:BD38 19 -  -  -  	add hl, de
   68 D1:BD39 ED 27 -  -  	ld hl, (hl)
   69 D1:BD3B 19 -  -  -  	add hl, de
   70 D1:BD3C 57 -  -  -  	ld d, a
   71 D1:BD3D 1E 00 -  -  	ld e, 0
   72 D1:BD3F 18 0F -  -  	jr DisplayTokensLoop
   73 D1:BD41 -  -  -  -  KeyIsLeft:
   74 D1:BD41 7A -  -  -  	ld a, d
   75 D1:BD42 B7 -  -  -  	or a
   76 D1:BD43 28 61 -  -  	jr z, KeyLoop
   77 D1:BD45 15 -  -  -  	dec d
   78 D1:BD46 18 C9 -  -  	jr DisplayTabWithTokens
   79 D1:BD48 -  -  -  -  KeyIsRight:
   80 D1:BD48 7A -  -  -  	ld a, d
   81 D1:BD49 FE 05 -  -  	cp 5
   82 D1:BD4B 28 59 -  -  	jr z, KeyLoop
   83 D1:BD4D 14 -  -  -  	inc d
   84 D1:BD4E 18 C1 -  -  	jr DisplayTabWithTokens
   85 D1:BD50 -  -  -  -  DisplayTokensLoop:
   86 D1:BD50 78 -  -  -  	ld a, b
   87 D1:BD51 FE 10 -  -  	cp 16
   88 D1:BD53 28 22 -  -  	jr z, StopDisplayingTokens
   89 D1:BD55 04 -  -  -  	inc b
   90 D1:BD56 CD 34 08 02 	call _VPutS
   91 D1:BD5A E5 -  -  -  	push hl
   92 D1:BD5B D5 -  -  -  		push de
   93 D1:BD5C 2A D5 08 D0 			ld hl, (penRow)
   94 D1:BD60 11 0D 00 00 			ld de, 13
   95 D1:BD64 19 -  -  -  			add hl, de
   96 D1:BD65 22 D5 08 D0 			ld (penRow), hl
   97 D1:BD69 21 0C 00 00 			ld hl, 12
   98 D1:BD6D 22 D2 08 D0 			ld (penCol), hl
   99 D1:BD71 D1 -  -  -  		pop de
  100 D1:BD72 E1 -  -  -  	pop hl
  101 D1:BD73 7E -  -  -  	ld a, (hl)
  102 D1:BD74 B7 -  -  -  	or a
  103 D1:BD75 20 D9 -  -  	jr nz, DisplayTokensLoop
  104 D1:BD77 -  -  -  -  StopDisplayingTokens:
  105 D1:BD77 21 01 00 00 	ld hl, 1
  106 D1:BD7B 22 D2 08 D0 	ld (penCol), hl
  107 D1:BD7F -  -  -  -  GetRightCustomToken:
  108 D1:BD7F 7B -  -  -  	ld a, e
  109 D1:BD80 42 -  -  -  	ld b, d
  110 D1:BD81 16 0D -  -  	ld d, 13
  111 D1:BD83 ED 5C -  -  	mlt de
  112 D1:BD85 21 1E 00 00 	ld hl, 30
  113 D1:BD89 19 -  -  -  	add hl, de
  114 D1:BD8A 50 -  -  -  	ld d, b
  115 D1:BD8B 5F -  -  -  	ld e, a
  116 D1:BD8C 22 D5 08 D0 	ld (penRow), hl
  117 D1:BD90 21 01 00 00 	ld hl, 1
  118 D1:BD94 22 D2 08 D0 	ld (penCol), hl
  119 D1:BD98 E5 -  -  -  	push hl
  120 D1:BD99 D5 -  -  -  		push de
  121 D1:BD9A 3E 3E -  -  			ld a, '>'
  122 D1:BD9C CD 30 08 02 			call _VPutMap
  123 D1:BDA0 D1 -  -  -  		pop de
  124 D1:BDA1 E1 -  -  -  	pop hl
  125 D1:BDA2 22 D2 08 D0 	ld (penCol), hl
  126 D1:BDA6 -  -  -  -  KeyLoop:
  127 D1:BDA6 CD 4C 01 02 	call _GetCSC
  128 D1:BDAA B7 -  -  -  	or a
  129 D1:BDAB 28 F9 -  -  	jr z, KeyLoop
  130 D1:BDAD FE 02 -  -  	cp skLeft
  131 D1:BDAF 28 90 -  -  	jr z, KeyIsLeft
  132 D1:BDB1 FE 03 -  -  	cp skRight
  133 D1:BDB3 28 93 -  -  	jr z, KeyIsRight
  134 D1:BDB5 FE 04 -  -  	cp skUp
  135 D1:BDB7 20 1B -  -  	jr nz, KeyNotUp
  136 D1:BDB9 7B -  -  -  	ld a, e
  137 D1:BDBA B7 -  -  -  	or a
  138 D1:BDBB 28 E9 -  -  	jr z, KeyLoop
  139 D1:BDBD 1D -  -  -  	dec e
  140 D1:BDBE -  -  -  -  EraseCursor:
  141 D1:BDBE D5 -  -  -  	push de
  142 D1:BDBF 3E 20 -  -  		ld a, ' '
  143 D1:BDC1 CD 30 08 02 		call _VPutMap
  144 D1:BDC5 3E 20 -  -  		ld a, ' '
  145 D1:BDC7 CD 30 08 02 		call _VPutMap
  146 D1:BDCB 3E 20 -  -  		ld a, ' '
  147 D1:BDCD CD 30 08 02 		call _VPutMap
  148 D1:BDD1 D1 -  -  -  	pop de
  149 D1:BDD2 18 AB -  -  	jr GetRightCustomToken
  150 D1:BDD4 -  -  -  -  KeyNotUp:
  151 D1:BDD4 FE 01 -  -  	cp skDown
  152 D1:BDD6 20 12 -  -  	jr nz, KeyNotDown
  153 D1:BDD8 7A -  -  -  	ld a, d
  154 D1:BDD9 FE 05 -  -  	cp 5
  155 D1:BDDB 7B -  -  -  	ld a, e
  156 D1:BDDC 20 04 -  -  	jr nz, +_
  157 D1:BDDE FE 02 -  -  	cp (AMOUNT_OF_C_FUNCTIONS + AMOUNT_OF_CUSTOM_TOKENS)%16 - 1
  158 D1:BDE0 28 C4 -  -  	jr z, KeyLoop
  159 D1:BDE2 7B -  -  -  _:	ld a, e
  160 D1:BDE3 FE 0F -  -  	cp 16-1
  161 D1:BDE5 28 BF -  -  	jr z, KeyLoop
  162 D1:BDE7 1C -  -  -  	inc e
  163 D1:BDE8 18 D4 -  -  	jr EraseCursor
  164 D1:BDEA -  -  -  -  KeyNotDown:
  165 D1:BDEA FE 0F -  -  	cp skClear
  166 D1:BDEC 28 75 -  -  	jr z, KeyIsClear
  167 D1:BDEE FE 09 -  -  	cp skEnter
  168 D1:BDF0 20 B4 -  -  	jr nz, KeyLoop
  169 D1:BDF2 7B -  -  -  	ld a, e
  170 D1:BDF3 1E 10 -  -  	ld e, 16
  171 D1:BDF5 ED 5C -  -  	mlt de
  172 D1:BDF7 83 -  -  -  	add a, e
  173 D1:BDF8 D6 04 -  -  	sub AMOUNT_OF_CUSTOM_TOKENS
  174 D1:BDFA 38 4F -  -  	jr c, InsertCustomToken
  175 D1:BDFC 21 1F EA D0 	ld hl, saveSScreen
  176 D1:BE00 36 B3 -  -  	ld (hl), tDet
  177 D1:BE02 23 -  -  -  	inc hl
  178 D1:BE03 FE 0A -  -  	cp 10
  179 D1:BE05 38 17 -  -  	jr c, +_
  180 D1:BE07 57 -  -  -  	ld d, a
  181 D1:BE08 1E 0A -  -  	ld e, 10
  182 D1:BE0A AF -  -  -  	xor a
  183 D1:BE0B 06 08 -  -  	ld b, 8
  184 D1:BE0D -  -  -  -  _loop:
  185 D1:BE0D CB 22 -  -  	sla d
  186 D1:BE0F 17 -  -  -  	rla
  187 D1:BE10 BB -  -  -  	cp e
  188 D1:BE11 38 02 -  -  	jr c, $+4
  189 D1:BE13 93 -  -  -  	sub e
  190 D1:BE14 14 -  -  -  	inc d
  191 D1:BE15 10 F6 -  -  	djnz _loop
  192 D1:BE17 5F -  -  -  	ld e, a
  193 D1:BE18 7A -  -  -  	ld a, d
  194 D1:BE19 C6 30 -  -  	add a, t0
  195 D1:BE1B 77 -  -  -  	ld (hl), a
  196 D1:BE1C 23 -  -  -  	inc hl
  197 D1:BE1D 7B -  -  -  	ld a, e
  198 D1:BE1E C6 30 -  -  _:	add a, t0
  199 D1:BE20 77 -  -  -  	ld (hl), a
  200 D1:BE21 23 -  -  -  	inc hl
  201 D1:BE22 36 00 -  -  	ld (hl), 0
  202 D1:BE24 21 1F EA D0 	ld hl, saveSScreen
  203 D1:BE28 -  -  -  -  InsertCFunctionLoop:
  204 D1:BE28 7E -  -  -  	ld a, (hl)
  205 D1:BE29 B7 -  -  -  	or a
  206 D1:BE2A 28 37 -  -  	jr z, BufferSearch
  207 D1:BE2C ED 5B 3D 24 
              D0 -  -  -  	ld de, (editTail)
  208 D1:BE31 1A -  -  -  	ld a, (de)
  209 D1:BE32 FE 3F -  -  	cp tEnter
  210 D1:BE34 16 00 -  -  	ld d, 0
  211 D1:BE36 5E -  -  -  	ld e, (hl)
  212 D1:BE37 28 09 -  -  	jr z, +_
  213 D1:BE39 E5 -  -  -  	push hl
  214 D1:BE3A CD 08 0D 02 		call _BufReplace
  215 D1:BE3E E1 -  -  -  	pop hl
  216 D1:BE3F 23 -  -  -  	inc hl
  217 D1:BE40 18 E6 -  -  	jr InsertCFunctionLoop
  218 D1:BE42 E5 -  -  -  _:	push hl
  219 D1:BE43 CD 00 0D 02 		call _BufInsert
  220 D1:BE47 E1 -  -  -  	pop hl
  221 D1:BE48 23 -  -  -  	inc hl
  222 D1:BE49 18 DD -  -  	jr InsertCFunctionLoop
  223 D1:BE4B -  -  -  -  InsertCustomToken:
  224 D1:BE4B C6 0E -  -  	add a, 10+AMOUNT_OF_CUSTOM_TOKENS
  225 D1:BE4D 5F -  -  -  	ld e, a
  226 D1:BE4E 16 62 -  -  	ld d, tVarOut
  227 D1:BE50 2A 3A 24 D0 	ld hl, (editCursor)
  228 D1:BE54 7E -  -  -  	ld a, (hl)
  229 D1:BE55 FE 3F -  -  	cp tEnter
  230 D1:BE57 28 06 -  -  	jr z, +_
  231 D1:BE59 CD 08 0D 02 	call _BufReplace
  232 D1:BE5D 18 04 -  -  	jr BufferSearch
  233 D1:BE5F CD 00 0D 02 _:	call _BufInsert
  234 D1:BE63 -  -  -  -  KeyIsClear:
  235 D1:BE63 -  -  -  -  BufferSearch:
  236 D1:BE63 01 00 00 00 	ld bc, 0
  237 D1:BE67 CD F8 0C 02 _:	call _BufLeft
  238 D1:BE6B 28 0C -  -  	jr z, BufferFound
  239 D1:BE6D 7B -  -  -  	ld a, e
  240 D1:BE6E FE 3F -  -  	cp tEnter
  241 D1:BE70 28 03 -  -  	jr z, +_
  242 D1:BE72 03 -  -  -  	inc bc
  243 D1:BE73 18 F2 -  -  	jr -_
  244 D1:BE75 CD FC 0C 02 _:	call _BufRight
  245 D1:BE79 -  -  -  -  BufferFound:
  246 D1:BE79 C5 -  -  -  	push bc
  247 D1:BE7A CD 08 08 02 		call _ClrLCDFull
  248 D1:BE7E CD 18 08 02 		call _ClrTxtShd
  249 D1:BE82 11 46 07 00 		ld de, CustomTokensProgramText - KeyHook_start
  250 D1:BE86 2A DB 25 D0 		ld hl, (rawKeyHookPtr)
  251 D1:BE8A 19 -  -  -  		add hl, de
  252 D1:BE8B AF -  -  -  		xor a
  253 D1:BE8C 32 96 05 D0 		ld (curCol), a
  254 D1:BE90 32 95 05 D0 		ld (curRow), a
  255 D1:BE94 CD C0 07 02 		call _PutS
  256 D1:BE98 21 5B 06 D0 		ld hl, progToEdit
  257 D1:BE9C 06 08 -  -  		ld b, 8
  258 D1:BE9E 7E -  -  -  _:		ld a, (hl)
  259 D1:BE9F B7 -  -  -  		or a
  260 D1:BEA0 28 07 -  -  		jr z, +_
  261 D1:BEA2 CD B8 07 02 		call _PutC
  262 D1:BEA6 23 -  -  -  		inc hl
  263 D1:BEA7 10 F5 -  -  		djnz -_
  264 D1:BEA9 CD F0 07 02 _:		call _NewLine
  265 D1:BEAD 3E 3A -  -  		ld a, ':'
  266 D1:BEAF CD B8 07 02 		call _PutC
  267 D1:BEB3 CD 68 0D 02 		call _DispEOW
  268 D1:BEB7 C1 -  -  -  	pop bc
  269 D1:BEB8 -  -  -  -  MoveCursorOnce:
  270 D1:BEB8 78 -  -  -  	ld a, b
  271 D1:BEB9 B1 -  -  -  	or c
  272 D1:BEBA 28 07 -  -  	jr z, ReturnToEditor
  273 D1:BEBC CD 4C 0D 02 	call _CursorRight
  274 D1:BEC0 0B -  -  -  	dec bc
  275 D1:BEC1 18 F5 -  -  	jr MoveCursorOnce
  276 D1:BEC3 -  -  -  -  ReturnToEditor:
  277 D1:BEC3 CD B0 08 02 	call _CursorOn
  278 D1:BEC7 3C -  -  -  	inc a																	; reset zero flag
  279 D1:BEC8 3E 00 -  -  	ld a, 0
  280 D1:BECA C9 -  -  -  	ret
  281 D1:BECB -  -  -  -  CustomTokensData:
  282 D1:BECB -  -  -  -  Tab1:
  283 D1:BECB 45 78 65 63 
              48 65 78 28 
              00 -  -  -  C1:		.db "ExecHex(", 0
  284 D1:BED4 44 65 66 69 
              6E 65 53 70 
              72 69 74 65 
              28 00 -  -  C2:		.db "DefineSprite(", 0
  285 D1:BEE2 43 61 6C 6C 
              20 00 -  -  C3:		.db "Call ", 0
  286 D1:BEE8 43 6F 6D 70 
              69 6C 65 50 
              72 67 6D 28 
              00 -  -  -  C4:		.db "CompilePrgm(", 0
  287 D1:BEF5 -  -  -  -  
  288 D1:BEF5 -  -  -  -  #define AMOUNT_OF_C_FUNCTIONS 79
  289 D1:BEF5 -  -  -  -  
  290 D1:BEF5 42 65 67 69 
              6E 00 -  -  C6:		.db "Begin", 0
  291 D1:BEFB 45 6E 64 00 C7:		.db "End", 0
  292 D1:BEFF 53 65 74 43 
              6F 6C 6F 72 
              00 -  -  -  C8:		.db "SetColor", 0
  293 D1:BF08 53 65 74 44 
              65 66 61 75 
              6C 74 50 61 
              6C 65 74 74 
              65 00 -  -  C9:		.db "SetDefaultPalette", 0
  294 D1:BF1A 53 65 74 50 
              61 6C 65 74 
              74 65 00 -  C10:	.db "SetPalette", 0
  295 D1:BF25 46 69 6C 6C 
              53 63 72 65 
              65 6E 00 -  C11:	.db "FillScreen", 0
  296 D1:BF30 53 65 74 50 
              69 78 65 6C 
              00 -  -  -  C12:	.db "SetPixel", 0
  297 D1:BF39 47 65 74 50 
              69 78 65 6C 
              00 -  -  -  C13:	.db "GetPixel", 0
  298 D1:BF42 47 65 74 44 
              72 61 77 00 C14:	.db "GetDraw", 0
  299 D1:BF4A 53 65 74 44 
              72 61 77 00 C15:	.db "SetDraw", 0
  300 D1:BF52 53 77 61 70 
              44 72 61 77 
              00 -  -  -  C16:	.db "SwapDraw", 0
  301 D1:BF5B 42 6C 69 74 
              00 -  -  -  C17:	.db "Blit", 0
  302 D1:BF60 -  -  -  -  Tab2:
  303 D1:BF60 42 6C 69 74 
              4C 69 6E 65 
              73 00 -  -  C18:	.db "BlitLines", 0
  304 D1:BF6A 42 6C 69 74 
              41 72 65 61 
              00 -  -  -  C19:	.db "BlitArea", 0
  305 D1:BF73 50 72 69 6E 
              74 43 68 61 
              72 00 -  -  C20:	.db "PrintChar", 0
  306 D1:BF7D 50 72 69 6E 
              74 49 6E 74 
              00 -  -  -  C21:	.db "PrintInt", 0
  307 D1:BF86 50 72 69 6E 
              74 55 49 6E 
              74 00 -  -  C22:	.db "PrintUInt", 0
  308 D1:BF90 50 72 69 6E 
              74 53 74 72 
              69 6E 67 00 C23:	.db "PrintString", 0
  309 D1:BF9C 50 72 69 6E 
              74 53 74 72 
              69 6E 67 58 
              59 00 -  -  C24:	.db "PrintStringXY", 0
  310 D1:BFAA 53 65 74 54 
              65 78 74 58 
              59 00 -  -  C25:	.db "SetTextXY", 0
  311 D1:BFB4 53 65 74 54 
              65 78 74 42 
              47 43 6F 6C 
              6F 72 00 -  C26:	.db "SetTextBGColor", 0
  312 D1:BFC3 53 65 74 54 
              65 78 74 46 
              47 43 6F 6C 
              6F 72 00 -  C27:	.db "SetTextFGColor", 0
  313 D1:BFD2 53 65 74 54 
              65 78 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C28:	.db "SetTextTransparentColor", 0
  314 D1:BFEA 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 44 61 74 
              61 00 -  -  C29:	.db "SetCustomFontData", 0
  315 D1:BFFC 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 53 70 61 
              63 69 6E 67 
              00 -  -  -  C30:	.db "SetCustomFontSpacing", 0
  316 D1:C011 53 65 74 4D 
              6F 6E 6F 73 
              70 61 63 65 
              46 6F 6E 74 
              00 -  -  -  C31:	.db "SetMonospaceFont", 0
  317 D1:C022 47 65 74 53 
              74 72 69 6E 
              67 57 69 64 
              74 68 00 -  C32:	.db "GetStringWidth", 0
  318 D1:C031 47 65 74 43 
              68 61 72 57 
              69 64 74 68 
              00 -  -  -  C33:	.db "GetCharWidth", 0
  319 D1:C03E -  -  -  -  Tab3:
  320 D1:C03E 47 65 74 54 
              65 78 74 58 
              00 -  -  -  C34:	.db "GetTextX", 0
  321 D1:C047 47 65 74 54 
              65 78 74 59 
              00 -  -  -  C35:	.db "GetTextY", 0
  322 D1:C050 4C 69 6E 65 
              00 -  -  -  C36:	.db "Line", 0
  323 D1:C055 48 6F 72 69 
              7A 4C 69 6E 
              65 00 -  -  C37:	.db "HorizLine", 0
  324 D1:C05F 56 65 72 74 
              4C 69 6E 65 
              00 -  -  -  C38:	.db "VertLine", 0
  325 D1:C068 43 69 72 63 
              6C 65 00 -  C39:	.db "Circle", 0
  326 D1:C06F 46 69 6C 6C 
              43 69 72 63 
              6C 65 00 -  C40:	.db "FillCircle", 0
  327 D1:C07A 52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C41:	.db "Rectangle", 0
  328 D1:C084 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C42:	.db "FillRectangle", 0
  329 D1:C092 4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C43:	.db "Line_NoClip", 0
  330 D1:C09E 48 6F 72 69 
              7A 4C 69 6E 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C44:	.db "HorizLine_NoClip", 0
  331 D1:C0AF 56 65 72 74 
              4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C45:	.db "VertLine_NoClip", 0
  332 D1:C0BF 46 69 6C 6C 
              43 69 72 63 
              6C 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C46:	.db "FillCircle_NoClip", 0
  333 D1:C0D1 52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C47:	.db "Rectangle_NoClip", 0
  334 D1:C0E2 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C48:	.db "FillRectangle_NoClip", 0
  335 D1:C0F7 53 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C49:	.db "SetClipRegion", 0
  336 D1:C105 -  -  -  -  Tab4:
  337 D1:C105 47 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C50:	.db "GetClipRegion", 0
  338 D1:C113 53 68 69 66 
              74 44 6F 77 
              6E 00 -  -  C51:	.db "ShiftDown", 0
  339 D1:C11D 53 68 69 66 
              74 55 70 00 C52:	.db "ShiftUp", 0
  340 D1:C125 53 68 69 66 
              74 4C 65 66 
              74 00 -  -  C53:	.db "ShiftLeft", 0
  341 D1:C12F 53 68 69 66 
              74 52 69 67 
              68 74 00 -  C54:	.db "ShiftRight", 0
  342 D1:C13A 54 69 6C 65 
              6D 61 70 00 C55:	.db "Tilemap", 0
  343 D1:C142 54 69 6C 65 
              6D 61 70 5F 
              4E 6F 43 6C 
              69 70 00 -  C56:	.db "Tilemap_NoClip", 0
  344 D1:C151 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 00 -  C57:	.db "TransparentTilemap", 0
  345 D1:C164 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C58:	.db "TransparentTilemap_NoClip", 0
  346 D1:C17E 54 69 6C 65 
              50 74 72 00 C59:	.db "TilePtr", 0
  347 D1:C186 54 69 6C 65 
              50 74 72 4D 
              61 70 70 65 
              64 00 -  -  C60:	.db "TilePtrMapped", 0
  348 D1:C194 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              00 -  -  -  C61:	.db "LZDecompress", 0
  349 D1:C1A1 41 6C 6C 6F 
              63 53 70 72 
              69 74 65 00 C62:	.db "AllocSprite", 0
  350 D1:C1AD 53 70 72 69 
              74 65 00 -  C63:	.db "Sprite", 0
  351 D1:C1B4 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 00 -  -  C64:	.db "TransparentSprite", 0
  352 D1:C1C6 53 70 72 69 
              74 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C65:	.db "Sprite_NoClip", 0
  353 D1:C1D4 -  -  -  -  Tab5:
  354 D1:C1D4 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C66:	.db "TransparentSprite_NoClip", 0
  355 D1:C1ED 47 65 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C67:	.db "GetSprite_NoClip", 0
  356 D1:C1FE 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              5F 4E 6F 43 
              6C 69 70 00 C68:	.db "ScaledSprite_NoClip", 0
  357 D1:C212 53 63 61 6C 
              65 64 54 72 
              61 6E 73 70 
              61 72 65 6E 
              74 53 70 72 
              69 74 65 5F 
              4E 6F 43 6C 
              69 70 00 -  C69:	.db "ScaledTransparentSprite_NoClip", 0
  358 D1:C231 46 6C 69 70 
              53 70 72 69 
              74 65 59 00 C70:	.db "FlipSpriteY", 0
  359 D1:C23D 46 6C 69 70 
              53 70 72 69 
              74 65 58 00 C71:	.db "FlipSpriteX", 0
  360 D1:C249 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 00 -  -  C72:	.db "RotateSpriteC", 0
  361 D1:C257 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 43 00 -  C73:	.db "RotateSpriteCC", 0
  362 D1:C266 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              48 61 6C 66 
              00 -  -  -  C74:	.db "RotateSpriteHalf", 0
  363 D1:C277 50 6F 6C 79 
              67 6F 6E 00 C75:	.db "Polygon", 0
  364 D1:C27F 50 6F 6C 79 
              67 6F 6E 5F 
              4E 6F 43 6C 
              69 70 00 -  C76:	.db "Polygon_NoClip", 0
  365 D1:C28E 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              00 -  -  -  C77:	.db "FillTriangle", 0
  366 D1:C29B 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              5F 4E 6F 43 
              6C 69 70 00 C78:	.db "FillTriangle_NoClip", 0
  367 D1:C2AF 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              53 70 72 69 
              74 65 00 -  C79:	.db "LZDecompressSprite", 0
  368 D1:C2C2 53 65 74 54 
              65 78 74 53 
              63 61 6C 65 
              00 -  -  -  C80:	.db "SetTextScale", 0
  369 D1:C2CF 53 65 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C81:	.db "SetTransparentColor", 0
  370 D1:C2E3 -  -  -  -  Tab6:
  371 D1:C2E3 5A 65 72 6F 
              53 63 72 65 
              65 6E 00 -  C82:	.db "ZeroScreen", 0
  372 D1:C2EE 53 65 74 54 
              65 78 74 43 
              6F 6E 66 69 
              67 00 -  -  C83:	.db "SetTextConfig", 0
  373 D1:C2FC 47 65 74 53 
              70 72 69 74 
              65 43 68 61 
              72 00 -  -  C84:	.db "GetSpriteChar", 0
  374 D1:C30A 00 -  -  -  		.db 0
  375 D1:C30B -  -  -  -  TabData:
  376 D1:C30B D9 01 00 -  	.dl Tab1 - KeyHook_start
  377 D1:C30E 6E 02 00 -  	.dl Tab2 - KeyHook_start
  378 D1:C311 4C 03 00 -  	.dl Tab3 - KeyHook_start
  379 D1:C314 13 04 00 -  	.dl Tab4 - KeyHook_start
  380 D1:C317 E2 04 00 -  	.dl Tab5 - KeyHook_start
  381 D1:C31A F1 05 00 -  	.dl Tab6 - KeyHook_start
  382 D1:C31D -  -  -  -  	
  383 D1:C31D -  -  -  -  CData5:
  384 D1:C31D 03 02 00 -  	.dl C6 - KeyHook_start
  385 D1:C320 09 02 00 -  	.dl C7 - KeyHook_start
  386 D1:C323 0D 02 00 -  	.dl C8 - KeyHook_start
  387 D1:C326 16 02 00 -  	.dl C9 - KeyHook_start
  388 D1:C329 28 02 00 -  	.dl C10 - KeyHook_start
  389 D1:C32C 33 02 00 -  	.dl C11 - KeyHook_start
  390 D1:C32F 3E 02 00 -  	.dl C12 - KeyHook_start
  391 D1:C332 47 02 00 -  	.dl C13 - KeyHook_start
  392 D1:C335 50 02 00 -  	.dl C14 - KeyHook_start
  393 D1:C338 58 02 00 -  	.dl C15 - KeyHook_start
  394 D1:C33B 60 02 00 -  	.dl C16 - KeyHook_start
  395 D1:C33E 69 02 00 -  	.dl C17 - KeyHook_start
  396 D1:C341 6E 02 00 -  	.dl C18 - KeyHook_start
  397 D1:C344 78 02 00 -  	.dl C19 - KeyHook_start
  398 D1:C347 81 02 00 -  	.dl C20 - KeyHook_start
  399 D1:C34A 8B 02 00 -  	.dl C21 - KeyHook_start
  400 D1:C34D 94 02 00 -  	.dl C22 - KeyHook_start
  401 D1:C350 9E 02 00 -  	.dl C23 - KeyHook_start
  402 D1:C353 AA 02 00 -  	.dl C24 - KeyHook_start
  403 D1:C356 B8 02 00 -  	.dl C25 - KeyHook_start
  404 D1:C359 C2 02 00 -  	.dl C26 - KeyHook_start
  405 D1:C35C D1 02 00 -  	.dl C27 - KeyHook_start
  406 D1:C35F E0 02 00 -  	.dl C28 - KeyHook_start
  407 D1:C362 F8 02 00 -  	.dl C29 - KeyHook_start
  408 D1:C365 0A 03 00 -  	.dl C30 - KeyHook_start
  409 D1:C368 1F 03 00 -  	.dl C31 - KeyHook_start
  410 D1:C36B 30 03 00 -  	.dl C32 - KeyHook_start
  411 D1:C36E 3F 03 00 -  	.dl C33 - KeyHook_start
  412 D1:C371 4C 03 00 -  	.dl C34 - KeyHook_start
  413 D1:C374 55 03 00 -  	.dl C35 - KeyHook_start
  414 D1:C377 5E 03 00 -  	.dl C36 - KeyHook_start
  415 D1:C37A 63 03 00 -  	.dl C37 - KeyHook_start
  416 D1:C37D 6D 03 00 -  	.dl C38 - KeyHook_start
  417 D1:C380 76 03 00 -  	.dl C39 - KeyHook_start
  418 D1:C383 7D 03 00 -  	.dl C40 - KeyHook_start
  419 D1:C386 88 03 00 -  	.dl C41 - KeyHook_start
  420 D1:C389 92 03 00 -  	.dl C42 - KeyHook_start
  421 D1:C38C A0 03 00 -  	.dl C43 - KeyHook_start
  422 D1:C38F AC 03 00 -  	.dl C44 - KeyHook_start
  423 D1:C392 BD 03 00 -  	.dl C45 - KeyHook_start
  424 D1:C395 CD 03 00 -  	.dl C46 - KeyHook_start
  425 D1:C398 DF 03 00 -  	.dl C47 - KeyHook_start
  426 D1:C39B F0 03 00 -  	.dl C48 - KeyHook_start
  427 D1:C39E 05 04 00 -  	.dl C49 - KeyHook_start
  428 D1:C3A1 13 04 00 -  	.dl C50 - KeyHook_start
  429 D1:C3A4 21 04 00 -  	.dl C51 - KeyHook_start
  430 D1:C3A7 2B 04 00 -  	.dl C52 - KeyHook_start
  431 D1:C3AA 33 04 00 -  	.dl C53 - KeyHook_start
  432 D1:C3AD 3D 04 00 -  	.dl C54 - KeyHook_start
  433 D1:C3B0 48 04 00 -  	.dl C55 - KeyHook_start
  434 D1:C3B3 50 04 00 -  	.dl C56 - KeyHook_start
  435 D1:C3B6 5F 04 00 -  	.dl C57 - KeyHook_start
  436 D1:C3B9 72 04 00 -  	.dl C58 - KeyHook_start
  437 D1:C3BC 8C 04 00 -  	.dl C59 - KeyHook_start
  438 D1:C3BF 94 04 00 -  	.dl C60 - KeyHook_start
  439 D1:C3C2 A2 04 00 -  	.dl C61 - KeyHook_start
  440 D1:C3C5 AF 04 00 -  	.dl C62 - KeyHook_start
  441 D1:C3C8 BB 04 00 -  	.dl C63 - KeyHook_start
  442 D1:C3CB C2 04 00 -  	.dl C64 - KeyHook_start
  443 D1:C3CE D4 04 00 -  	.dl C65 - KeyHook_start
  444 D1:C3D1 E2 04 00 -  	.dl C66 - KeyHook_start
  445 D1:C3D4 FB 04 00 -  	.dl C67 - KeyHook_start
  446 D1:C3D7 0C 05 00 -  	.dl C68 - KeyHook_start
  447 D1:C3DA 20 05 00 -  	.dl C69 - KeyHook_start
  448 D1:C3DD 3F 05 00 -  	.dl C70 - KeyHook_start
  449 D1:C3E0 4B 05 00 -  	.dl C71 - KeyHook_start
  450 D1:C3E3 57 05 00 -  	.dl C72 - KeyHook_start
  451 D1:C3E6 65 05 00 -  	.dl C73 - KeyHook_start
  452 D1:C3E9 74 05 00 -  	.dl C74 - KeyHook_start
  453 D1:C3EC 85 05 00 -  	.dl C75 - KeyHook_start
  454 D1:C3EF 8D 05 00 -  	.dl C76 - KeyHook_start
  455 D1:C3F2 9C 05 00 -  	.dl C77 - KeyHook_start
  456 D1:C3F5 A9 05 00 -  	.dl C78 - KeyHook_start
  457 D1:C3F8 BD 05 00 -  	.dl C79 - KeyHook_start
  458 D1:C3FB D0 05 00 -  	.dl C80 - KeyHook_start
  459 D1:C3FE DD 05 00 -  	.dl C81 - KeyHook_start
  460 D1:C401 F1 05 00 -  	.dl C82 - KeyHook_start
  461 D1:C404 FC 05 00 -  	.dl C83 - KeyHook_start
  462 D1:C407 0A 06 00 -  	.dl C84 - KeyHook_start
  463 D1:C40A -  -  -  -  	
  464 D1:C40A -  -  -  -  #define AMOUNT_OF_CUSTOM_TOKENS 4
  465 D1:C40A 08 45 78 65 
              63 48 65 78 
              28 00 -  -  Token1: .db 8,  "ExecHex(", 0
  466 D1:C414 0D 44 65 66 
              69 6E 65 53 
              70 72 69 74 
              65 28 00 -  Token2: .db 13, "DefineSprite(", 0
  467 D1:C423 05 43 61 6C 
              6C 20 00 -  Token3: .db 5,  "Call ", 0
  468 D1:C42A 0C 43 6F 6D 
              70 69 6C 65 
              50 72 67 6D 
              28 00 -  -  Token4: .db 12, "CompilePrgm(", 0
  469 D1:C438 -  -  -  -  CustomTokensProgramText:
  470 D1:C438 50 52 4F 47 
              52 41 4D 3A 
              00 -  -  -  	.db "PROGRAM:", 0
  471 D1:C441 -  -  -  -  KeyHook_end:
  472 D1:C441 -  -  -  -  
  473 D1:C441 -  -  -  -  TokenHook_start:
  474 D1:C441 83 -  -  -  	.db 83h
  475 D1:C442 7A -  -  -  	ld a, d
  476 D1:C443 FE 04 -  -  	cp 4
  477 D1:C445 C0 -  -  -  	ret nz
  478 D1:C446 7B -  -  -  	ld a, e
  479 D1:C447 FE 14 -  -  	cp 5+3+(AMOUNT_OF_CUSTOM_TOKENS*3)
  480 D1:C449 D0 -  -  -  	ret nc
  481 D1:C44A D6 05 -  -  	sub 5
  482 D1:C44C ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
  483 D1:C451 21 6E 07 00 	ld hl, TokenHook_data - KeyHook_start
  484 D1:C455 19 -  -  -  	add hl, de
  485 D1:C456 01 00 00 00 	ld bc, 0
  486 D1:C45A 4F -  -  -  	ld c, a
  487 D1:C45B 09 -  -  -  	add hl, bc
  488 D1:C45C ED 27 -  -  	ld hl, (hl)
  489 D1:C45E 19 -  -  -  	add hl, de
  490 D1:C45F C9 -  -  -  	ret
  491 D1:C460 -  -  -  -  TokenHook_data:
  492 D1:C460 17 07 00 -  	.dl Token1 - KeyHook_start - 1
  493 D1:C463 21 07 00 -  	.dl Token2 - KeyHook_start - 1
  494 D1:C466 30 07 00 -  	.dl Token3 - KeyHook_start - 1
  495 D1:C469 37 07 00 -  	.dl Token4 - KeyHook_start - 1
  496 D1:C46C -  -  -  -  TokenHook_end:
  497 D1:C46C -  -  -  -  
  498 D1:C46C -  -  -  -  CursorHook_start:
  499 D1:C46C 83 -  -  -  	.db 83h
  500 D1:C46D FE 24 -  -  	cp 24h
  501 D1:C46F 20 06 -  -  	jr nz, +_
  502 D1:C471 3C -  -  -  	inc a
  503 D1:C472 3A 99 05 D0 	ld a, (curUnder)
  504 D1:C476 C9 -  -  -  	ret
  505 D1:C477 FE 22 -  -  _:	cp 22h
  506 D1:C479 C0 -  -  -  	ret nz
  507 D1:C47A 3A E0 07 D0 	ld a, (cxCurApp)
  508 D1:C47E FE 46 -  -  	cp cxPrgmEdit
  509 D1:C480 C0 -  -  -  	ret nz
  510 D1:C481 2A 3A 24 D0 	ld hl, (editCursor)
  511 D1:C485 7E -  -  -  	ld a, (hl)
  512 D1:C486 FE B3 -  -  	cp tDet
  513 D1:C488 C0 -  -  -  	ret nz
  514 D1:C489 -  -  -  -  DrawDetText:
  515 D1:C489 FD CB B0 46 	bit displayed_det, (iy+fAlways1)
  516 D1:C48D C0 -  -  -  	ret nz
  517 D1:C48E 2A 3D 24 D0 	ld hl, (editTail)
  518 D1:C492 23 -  -  -  	inc hl
  519 D1:C493 7E -  -  -  	ld a, (hl)
  520 D1:C494 D6 30 -  -  	sub t0
  521 D1:C496 D8 -  -  -  	ret c
  522 D1:C497 FE 0A -  -  	cp t9-t0+1
  523 D1:C499 ED 4B 40 24 
              D0 -  -  -  	ld bc, (editBtm)
  524 D1:C49E 11 00 00 00 	ld de, 0
  525 D1:C4A2 5F -  -  -  	ld e, a
  526 D1:C4A3 38 02 -  -  	jr c, GetDetValueLoop
  527 D1:C4A5 -  -  -  -  WrongDetValue:
  528 D1:C4A5 3C -  -  -  	inc a
  529 D1:C4A6 C9 -  -  -  	ret
  530 D1:C4A7 -  -  -  -  GetDetValueLoop:
  531 D1:C4A7 23 -  -  -  	inc hl
  532 D1:C4A8 B7 -  -  -  	or a
  533 D1:C4A9 ED 42 -  -  	sbc hl, bc
  534 D1:C4AB 28 1C -  -  	jr z, GetDetValueStop
  535 D1:C4AD 09 -  -  -  	add hl, bc
  536 D1:C4AE 7E -  -  -  	ld a, (hl)
  537 D1:C4AF D6 30 -  -  	sub t0
  538 D1:C4B1 38 16 -  -  	jr c, GetDetValueStop
  539 D1:C4B3 FE 0A -  -  	cp t9-t0+1
  540 D1:C4B5 30 12 -  -  	jr nc, GetDetValueStop
  541 D1:C4B7 E5 -  -  -  	push hl
  542 D1:C4B8 EB -  -  -  		ex de, hl
  543 D1:C4B9 29 -  -  -  		add hl, hl
  544 D1:C4BA E5 -  -  -  		push hl
  545 D1:C4BB D1 -  -  -  		pop de
  546 D1:C4BC 29 -  -  -  		add hl, hl
  547 D1:C4BD 29 -  -  -  		add hl, hl
  548 D1:C4BE 19 -  -  -  		add hl, de
  549 D1:C4BF 11 00 00 00 		ld de, 0
  550 D1:C4C3 5F -  -  -  		ld e, a
  551 D1:C4C4 19 -  -  -  		add hl, de
  552 D1:C4C5 EB -  -  -  		ex de, hl
  553 D1:C4C6 E1 -  -  -  	pop hl
  554 D1:C4C7 18 DE -  -  	jr GetDetValueLoop
  555 D1:C4C9 -  -  -  -  GetDetValueStop:
  556 D1:C4C9 EB -  -  -  	ex de, hl
  557 D1:C4CA 11 4F 00 00 	ld de, AMOUNT_OF_C_FUNCTIONS
  558 D1:C4CE B7 -  -  -  	or a
  559 D1:C4CF ED 52 -  -  	sbc hl, de
  560 D1:C4D1 30 D2 -  -  	jr nc, WrongDetValue
  561 D1:C4D3 19 -  -  -  	add hl, de
  562 D1:C4D4 26 03 -  -  	ld h, 3
  563 D1:C4D6 ED 6C -  -  	mlt hl
  564 D1:C4D8 11 2B 06 00 	ld de, CData5 - KeyHook_start
  565 D1:C4DC 19 -  -  -  	add hl, de
  566 D1:C4DD ED 5B DB 25 
              D0 -  -  -  	ld de, (rawKeyHookPtr)
  567 D1:C4E2 19 -  -  -  	add hl, de
  568 D1:C4E3 ED 27 -  -  	ld hl, (hl)
  569 D1:C4E5 19 -  -  -  	add hl, de
  570 D1:C4E6 11 1C E7 00 	ld de, 000E71Ch
  571 D1:C4EA 40 ED 53 AC 
              26 -  -  -  	ld.sis (drawFGColor - 0D00000h), de
  572 D1:C4EF 40 ED 5B CC 
              2A -  -  -  	ld.sis de, (statusBarBGColor - 0D00000h)
  573 D1:C4F4 40 ED 53 AA 
              26 -  -  -  	ld.sis (drawBGColor - 0D00000h), de
  574 D1:C4F9 3E 0E -  -  	ld a, 14
  575 D1:C4FB 32 D5 08 D0 	ld (penRow),a
  576 D1:C4FF 11 02 00 00 	ld de, 2
  577 D1:C503 40 ED 53 D2 
              08 -  -  -  	ld.sis (penCol - 0D00000h), de
  578 D1:C508 CD 34 08 02 	call _VPutS
  579 D1:C50C 11 FF FF 00 	ld de, $FFFF
  580 D1:C510 40 ED 53 AA 
              26 -  -  -  	ld.sis (drawBGColor - 0D00000h), de
  581 D1:C515 FD CB B0 C6 	set displayed_det, (iy+fAlways1)
  582 D1:C519 C9 -  -  -  	ret
  583 D1:C51A -  -  -  -  CursorHook_end:
  584 D1:C51A -  -  -  -  
  585 D1:C51A -  -  -  -  Hooks_end:
Listing for file "ICE.asm"
  461 D1:C51A -  -  -  -  #include "operators functions/functions.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operators functions\functions.asm"
    1 D1:C51A -  -  -  -  ExecuteFunction:
    2 D1:C51A E5 -  -  -  	push hl
    3 D1:C51B 21 E4 EA D1 		ld hl, FunctionsWithReturnValueArguments
    4 D1:C51F 01 05 00 00 		ld bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValueArguments
    5 D1:C523 ED B1 -  -  		cpir
    6 D1:C525 06 03 -  -  		ld b, 3
    7 D1:C527 ED 4C -  -  		mlt bc
    8 D1:C529 21 E9 EA D1 		ld hl, FunctionsWithReturnValueStart
    9 D1:C52D 09 -  -  -  		add hl, bc
   10 D1:C52E ED 27 -  -  		ld hl, (hl)
   11 D1:C530 22 36 C5 D1 		ld (JumpFunction), hl
   12 D1:C534 E1 -  -  -  	pop hl
   13 D1:C535 -  -  -  -  JumpFunction = $+1
   14 D1:C535 C3 00 00 00 	jp 0
   15 D1:C539 -  -  -  -  	
   16 D1:C539 -  -  -  -  functionLbl:
   17 D1:C539 DD 2A 7C EC 
              D1 -  -  -  	ld ix, (labelPtr)
   18 D1:C53E 2A 76 EC D1 	ld hl, (programPtr)
   19 D1:C542 DD 2F 00 -  	ld (ix), hl
   20 D1:C545 2A 1A 23 D0 	ld hl, (curPC)
   21 D1:C549 23 -  -  -  	inc hl
   22 D1:C54A DD 2F 03 -  	ld (ix+3), hl
   23 D1:C54D ED 22 06 -  	lea hl, ix+6
   24 D1:C550 22 7C EC D1 	ld (labelPtr), hl
   25 D1:C554 -  -  -  -  functionSkipLine:
   26 D1:C554 2A 1D 23 D0 	ld hl, (endPC)
   27 D1:C558 ED 5B 1A 23 
              D0 -  -  -  	ld de, (curPC)
   28 D1:C55D B7 -  -  -  	or a
   29 D1:C55E ED 52 -  -  	sbc hl, de
   30 D1:C560 D8 -  -  -  	ret c
   31 D1:C561 23 -  -  -  	inc hl
   32 D1:C562 E5 -  -  -  	push hl
   33 D1:C563 C1 -  -  -  	pop bc
   34 D1:C564 EB -  -  -  	ex de, hl
   35 D1:C565 3E 3F -  -  	ld a, tEnter
   36 D1:C567 ED B1 -  -  	cpir
   37 D1:C569 2B -  -  -  	dec hl
   38 D1:C56A 22 1A 23 D0 	ld (curPC), hl
   39 D1:C56E C9 -  -  -  	ret
   40 D1:C56F -  -  -  -  	
   41 D1:C56F -  -  -  -  functionCall:
   42 D1:C56F 3E CD -  -  	ld a, 0CDh
   43 D1:C571 18 02 -  -  	jr $+4
   44 D1:C573 -  -  -  -  functionGoto:
   45 D1:C573 3E C3 -  -  	ld a, 0C3h
   46 D1:C575 CD AE AC D1 	call InsertA															; jp/call ******
   47 D1:C579 DD 2A 7F EC 
              D1 -  -  -  	ld ix, (gotoPtr)
   48 D1:C57E 2A 76 EC D1 	ld hl, (programPtr)
   49 D1:C582 DD 2F 00 -  	ld (ix), hl
   50 D1:C585 2A 1A 23 D0 	ld hl, (curPC)
   51 D1:C589 23 -  -  -  	inc hl
   52 D1:C58A DD 2F 03 -  	ld (ix+3), hl
   53 D1:C58D ED 22 06 -  	lea hl, ix+6
   54 D1:C590 22 7F EC D1 	ld (gotoPtr), hl
   55 D1:C594 CD 66 AC D1 	call InsertHL															; jp/call RANDOM
   56 D1:C598 18 BA -  -  	jr functionSkipLine
   57 D1:C59A -  -  -  -  	
   58 D1:C59A -  -  -  -  functionReturn:
   59 D1:C59A CD C0 0F 02 	call _NxtFetch
   60 D1:C59E 30 04 -  -  	jr nc, +_
   61 D1:C5A0 FD CB C0 D6 	set last_token_is_ret, (iy+fExpression1)
   62 D1:C5A4 3E C9 -  -  _:	ld a, 0C9h
   63 D1:C5A6 C3 AE AC D1 	jp InsertA																; ret
   64 D1:C5AA -  -  -  -  	
   65 D1:C5AA -  -  -  -  functionDisp:
   66 D1:C5AA 3E 01 -  -  	ld a, 1
   67 D1:C5AC 32 90 EC D1 	ld (openedParensF), a
   68 D1:C5B0 CD 28 10 02 	call _IncFetch
   69 D1:C5B4 CD 2D B2 D1 	call ParseExpression
   70 D1:C5B8 ED 5B 76 EC 
              D1 -  -  -  	ld de, (programPtr)
   71 D1:C5BD 01 0E 00 00 	ld bc, 14
   72 D1:C5C1 FD CB C0 7E 	bit output_is_string, (iy+fExpression1)
   73 D1:C5C5 20 06 -  -  	jr nz, DispString
   74 D1:C5C7 21 A7 F0 D1 	ld hl, DispNumberRoutine
   75 D1:C5CB 18 05 -  -  	jr +_
   76 D1:C5CD -  -  -  -  DispString:
   77 D1:C5CD 21 B5 F0 D1 	ld hl, DispStringRoutine
   78 D1:C5D1 0B -  -  -  	dec bc
   79 D1:C5D2 ED B0 -  -  _:	ldir
   80 D1:C5D4 ED 53 76 EC 
              D1 -  -  -  	ld (programPtr), de
   81 D1:C5D9 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
   82 D1:C5DD C8 -  -  -  	ret z
   83 D1:C5DE 18 CA -  -  	jr functionDisp
   84 D1:C5E0 -  -  -  -  		
   85 D1:C5E0 -  -  -  -  functionRepeat:
   86 D1:C5E0 21 93 EC D1 	ld hl, amountOfEnds
   87 D1:C5E4 34 -  -  -  	inc (hl)
   88 D1:C5E5 2A 76 EC D1 	ld hl, (programPtr)
   89 D1:C5E9 11 81 7C FC 	ld de, UserMem - program
   90 D1:C5ED 19 -  -  -  	add hl, de
   91 D1:C5EE E5 -  -  -  	push hl
   92 D1:C5EF 2A 1A 23 D0 		ld hl, (curPC)
   93 D1:C5F3 23 -  -  -  		inc hl
   94 D1:C5F4 E5 -  -  -  		push hl
   95 D1:C5F5 CD 28 10 02 _:			call _IncFetch
   96 D1:C5F9 DA 05 AF D1 			jp c, ErrorSyntax
   97 D1:C5FD FE 3F -  -  			cp tEnter
   98 D1:C5FF 20 F4 -  -  			jr nz, -_
   99 D1:C601 CD AA AA D1 			call ParseProgramUntilEnd
  100 D1:C605 FE D0 -  -  			cp tElse
  101 D1:C607 CA 05 AF D1 			jp z, ErrorSyntax
  102 D1:C60B ED 5B 1A 23 
              D0 -  -  -  			ld de, (curPC)
  103 D1:C610 E1 -  -  -  		pop hl
  104 D1:C611 22 1A 23 D0 		ld (curPC), hl
  105 D1:C615 D5 -  -  -  		push de
  106 D1:C616 CD 2D B2 D1 			call ParseExpression
  107 D1:C61A D1 -  -  -  		pop de
  108 D1:C61B ED 53 1A 23 
              D0 -  -  -  		ld (curPC), de
  109 D1:C620 FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  110 D1:C624 20 5F -  -  		jr nz, functionRepeatInfinite
  111 D1:C626 FD CB C0 6E 		bit ans_set_z_flag, (iy+fExpression1)
  112 D1:C62A 28 14 -  -  		jr z, +_
  113 D1:C62C 2A 76 EC D1 		ld hl, (programPtr)
  114 D1:C630 2B -  -  -  		dec hl
  115 D1:C631 2B -  -  -  		dec hl
  116 D1:C632 2B -  -  -  		dec hl
  117 D1:C633 7E -  -  -  		ld a, (hl)
  118 D1:C634 DD 67 -  -  		ld ixh, a
  119 D1:C636 2B -  -  -  		dec hl
  120 D1:C637 2B -  -  -  		dec hl
  121 D1:C638 2B -  -  -  		dec hl
  122 D1:C639 2B -  -  -  		dec hl
  123 D1:C63A 22 76 EC D1 		ld (programPtr), hl
  124 D1:C63E 18 0A -  -  		jr ++_
  125 D1:C640 3E 19 -  -  _:		ld a, 019h
  126 D1:C642 21 B7 ED 52 		ld hl, 052EDB7h
  127 D1:C646 CD 62 AC D1 		call InsertAHL														; add hl, de \ or a \ sbc hl, de
  128 D1:C64A 01 81 7C FC _:		ld bc, UserMem - program
  129 D1:C64E 09 -  -  -  		add hl, bc
  130 D1:C64F D1 -  -  -  	pop de
  131 D1:C650 B7 -  -  -  	or a
  132 D1:C651 ED 52 -  -  	sbc hl, de
  133 D1:C653 7C -  -  -  	ld a, h
  134 D1:C654 B7 -  -  -  	or a
  135 D1:C655 20 1B -  -  	jr nz, functionRepeatLarge
  136 D1:C657 7D -  -  -  	ld a, l
  137 D1:C658 2F -  -  -  	cpl
  138 D1:C659 3D -  -  -  	dec a
  139 D1:C65A FE 80 -  -  	cp %10000000
  140 D1:C65C 38 14 -  -  	jr c, functionRepeatLarge
  141 D1:C65E -  -  -  -  functionRepeatSmall:
  142 D1:C65E 47 -  -  -  	ld b, a
  143 D1:C65F 3E 28 -  -  	ld a, 028h
  144 D1:C661 FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  145 D1:C665 28 02 -  -  	jr z, +_
  146 D1:C667 DD 7C -  -  	ld a, ixh
  147 D1:C669 CD AE AC D1 _:	call InsertA															; jr [n]z, *
  148 D1:C66D 78 -  -  -  	ld a, b
  149 D1:C66E C3 AE AC D1 	jp InsertA																; jr [n]z, *
  150 D1:C672 -  -  -  -  functionRepeatLarge:
  151 D1:C672 EB -  -  -  	ex de, hl
  152 D1:C673 FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  153 D1:C677 28 06 -  -  	jr z, +_
  154 D1:C679 DD 7C -  -  	ld a, ixh
  155 D1:C67B C6 A2 -  -  	add a, 0A2h
  156 D1:C67D 18 02 -  -  	jr ++_
  157 D1:C67F 3E CA -  -  _:	ld a, 0CAh
  158 D1:C681 C3 62 AC D1 _:	jp InsertAHL															; jp [n]z, XXXXXX
  159 D1:C685 -  -  -  -  functionRepeatInfinite:
  160 D1:C685 2A 76 EC D1 		ld hl, (programPtr)
  161 D1:C689 2B -  -  -  		dec hl
  162 D1:C68A 2B -  -  -  		dec hl
  163 D1:C68B 2B -  -  -  		dec hl
  164 D1:C68C 2B -  -  -  		dec hl
  165 D1:C68D 22 76 EC D1 		ld (programPtr), hl
  166 D1:C691 E5 -  -  -  		push hl
  167 D1:C692 23 -  -  -  			inc hl
  168 D1:C693 ED 27 -  -  			ld hl, (hl)
  169 D1:C695 19 -  -  -  			add hl, de
  170 D1:C696 B7 -  -  -  			or a
  171 D1:C697 ED 52 -  -  			sbc hl, de
  172 D1:C699 E1 -  -  -  		pop hl
  173 D1:C69A C0 -  -  -  		ret nz
  174 D1:C69B 11 81 7C FC 		ld de, UserMem - program
  175 D1:C69F 19 -  -  -  		add hl, de
  176 D1:C6A0 D1 -  -  -  	pop de
  177 D1:C6A1 B7 -  -  -  	or a
  178 D1:C6A2 ED 52 -  -  	sbc hl, de
  179 D1:C6A4 7C -  -  -  	ld a, h
  180 D1:C6A5 B7 -  -  -  	or a
  181 D1:C6A6 20 13 -  -  	jr nz, functionRepeatInfiniteLarge
  182 D1:C6A8 7D -  -  -  	ld a, l
  183 D1:C6A9 2F -  -  -  	cpl
  184 D1:C6AA 3D -  -  -  	dec a
  185 D1:C6AB FE 80 -  -  	cp %10000000
  186 D1:C6AD 38 0C -  -  	jr c, functionRepeatInfiniteLarge
  187 D1:C6AF -  -  -  -  functionRepeatInfiniteSmall:
  188 D1:C6AF 47 -  -  -  	ld b, a
  189 D1:C6B0 3E 18 -  -  	ld a, 018h
  190 D1:C6B2 CD AE AC D1 	call InsertA															; jr *
  191 D1:C6B6 78 -  -  -  	ld a, b
  192 D1:C6B7 C3 AE AC D1 	jp InsertA																; jr *
  193 D1:C6BB -  -  -  -  functionRepeatInfiniteLarge:
  194 D1:C6BB EB -  -  -  	ex de, hl
  195 D1:C6BC 3E C3 -  -  	ld a, 0C3h
  196 D1:C6BE C3 62 AC D1 	jp InsertAHL															; jp XXXXXX
  197 D1:C6C2 -  -  -  -  
  198 D1:C6C2 -  -  -  -  functionIf:
  199 D1:C6C2 21 93 EC D1 	ld hl, amountOfEnds
  200 D1:C6C6 34 -  -  -  	inc (hl)
  201 D1:C6C7 CD 28 10 02 	call _IncFetch
  202 D1:C6CB CD 2D B2 D1 	call ParseExpression
  203 D1:C6CF FD CB C0 6E 	bit ans_set_z_flag, (iy+fExpression1)
  204 D1:C6D3 28 14 -  -  	jr z, +_
  205 D1:C6D5 2A 76 EC D1 	ld hl, (programPtr)
  206 D1:C6D9 2B -  -  -  	dec hl
  207 D1:C6DA 2B -  -  -  	dec hl
  208 D1:C6DB 2B -  -  -  	dec hl
  209 D1:C6DC 7E -  -  -  	ld a, (hl)
  210 D1:C6DD C6 A2 -  -  	add a, 0A2h
  211 D1:C6DF 2B -  -  -  	dec hl
  212 D1:C6E0 2B -  -  -  	dec hl
  213 D1:C6E1 2B -  -  -  	dec hl
  214 D1:C6E2 2B -  -  -  	dec hl
  215 D1:C6E3 22 76 EC D1 	ld (programPtr), hl
  216 D1:C6E7 18 0C -  -  	jr ++_
  217 D1:C6E9 3E 19 -  -  _:	ld a, 019h
  218 D1:C6EB 21 B7 ED 52 	ld hl, 052EDB7h
  219 D1:C6EF CD 62 AC D1 	call InsertAHL															; add hl, de \ or a \ sbc hl, de
  220 D1:C6F3 3E CA -  -  	ld a, 0CAh
  221 D1:C6F5 CD AE AC D1 _:	call InsertA															; jp z, ******
  222 D1:C6F9 2A 76 EC D1 	ld hl, (programPtr)
  223 D1:C6FD E5 -  -  -  	push hl
  224 D1:C6FE CD 66 AC D1 		call InsertHL														; jp z, XXXXXX
  225 D1:C702 CD AA AA D1 		call ParseProgramUntilEnd
  226 D1:C706 FE D0 -  -  		cp tElse
  227 D1:C708 20 29 -  -  		jr nz, +_
  228 D1:C70A 21 93 EC D1 		ld hl, amountOfEnds
  229 D1:C70E 34 -  -  -  		inc (hl)
  230 D1:C70F 3E C3 -  -  		ld a, 0C3h
  231 D1:C711 CD AE AC D1 		call InsertA														; jp ******
  232 D1:C715 ED 5B 76 EC 
              D1 -  -  -  		ld de, (programPtr)
  233 D1:C71A CD 66 AC D1 		call InsertHL														; jp XXXXXX
  234 D1:C71E 01 81 7C FC 		ld bc, UserMem - program
  235 D1:C722 09 -  -  -  		add hl, bc
  236 D1:C723 E5 -  -  -  		push hl
  237 D1:C724 C1 -  -  -  		pop bc
  238 D1:C725 E1 -  -  -  	pop hl
  239 D1:C726 ED 0F -  -  	ld (hl), bc
  240 D1:C728 D5 -  -  -  	push de
  241 D1:C729 CD AA AA D1 		call ParseProgramUntilEnd
  242 D1:C72D FE D0 -  -  		cp tElse
  243 D1:C72F CA 05 AF D1 		jp z, ErrorSyntax
  244 D1:C733 2A 76 EC D1 _:		ld hl, (programPtr)
  245 D1:C737 11 81 7C FC 		ld de, UserMem - program
  246 D1:C73B 19 -  -  -  		add hl, de
  247 D1:C73C EB -  -  -  		ex de, hl
  248 D1:C73D E1 -  -  -  	pop hl
  249 D1:C73E ED 1F -  -  	ld (hl), de
  250 D1:C740 C9 -  -  -  	ret
  251 D1:C741 -  -  -  -  	
  252 D1:C741 -  -  -  -  functionWhile:
  253 D1:C741 21 93 EC D1 	ld hl, amountOfEnds
  254 D1:C745 34 -  -  -  	inc (hl)
  255 D1:C746 CD 28 10 02 	call _IncFetch
  256 D1:C74A DA 05 AF D1 	jp c, ErrorSyntax
  257 D1:C74E FE 3F -  -  	cp tEnter
  258 D1:C750 CA 05 AF D1 	jp z, ErrorSyntax
  259 D1:C754 2A 76 EC D1 	ld hl, (programPtr)
  260 D1:C758 E5 -  -  -  	push hl
  261 D1:C759 CD 2D B2 D1 		call ParseExpression
  262 D1:C75D FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  263 D1:C761 20 4F -  -  		jr nz, functionWhileInfinite
  264 D1:C763 FD CB C0 6E 		bit ans_set_z_flag, (iy+fExpression1)
  265 D1:C767 28 14 -  -  		jr z, +_
  266 D1:C769 2A 76 EC D1 		ld hl, (programPtr)
  267 D1:C76D 2B -  -  -  		dec hl
  268 D1:C76E 2B -  -  -  		dec hl
  269 D1:C76F 2B -  -  -  		dec hl
  270 D1:C770 7E -  -  -  		ld a, (hl)
  271 D1:C771 C6 A2 -  -  		add a, 0A2h
  272 D1:C773 2B -  -  -  		dec hl
  273 D1:C774 2B -  -  -  		dec hl
  274 D1:C775 2B -  -  -  		dec hl
  275 D1:C776 2B -  -  -  		dec hl
  276 D1:C777 22 76 EC D1 		ld (programPtr), hl
  277 D1:C77B 18 0C -  -  		jr ++_
  278 D1:C77D 3E 19 -  -  _:		ld a, 019h
  279 D1:C77F 21 B7 ED 52 		ld hl, 052EDB7h
  280 D1:C783 CD 62 AC D1 		call InsertAHL														; add hl, de \ or a \ sbc hl, de
  281 D1:C787 3E CA -  -  		ld a, 0CAh
  282 D1:C789 CD AE AC D1 _:		call InsertA														; jp z, ******
  283 D1:C78D 2A 76 EC D1 		ld hl, (programPtr)
  284 D1:C791 E5 -  -  -  		push hl
  285 D1:C792 CD 66 AC D1 			call InsertHL													; jp z, ******
  286 D1:C796 CD AA AA D1 			call ParseProgramUntilEnd
  287 D1:C79A FE D0 -  -  			cp tElse
  288 D1:C79C CA 05 AF D1 			jp z, ErrorSyntax
  289 D1:C7A0 3E C3 -  -  			ld a, 0C3h
  290 D1:C7A2 D1 -  -  -  		pop de
  291 D1:C7A3 E1 -  -  -  	pop hl
  292 D1:C7A4 01 81 7C FC 	ld bc, UserMem - program
  293 D1:C7A8 09 -  -  -  	add hl, bc
  294 D1:C7A9 CD 62 AC D1 	call InsertAHL															; jp XXXXXX
  295 D1:C7AD 09 -  -  -  	add hl, bc
  296 D1:C7AE EB -  -  -  	ex de, hl
  297 D1:C7AF ED 1F -  -  	ld (hl), de
  298 D1:C7B1 C9 -  -  -  	ret
  299 D1:C7B2 -  -  -  -  functionWhileInfinite:
  300 D1:C7B2 2A 76 EC D1 		ld hl, (programPtr)
  301 D1:C7B6 2B -  -  -  		dec hl
  302 D1:C7B7 2B -  -  -  		dec hl
  303 D1:C7B8 2B -  -  -  		dec hl
  304 D1:C7B9 2B -  -  -  		dec hl
  305 D1:C7BA 22 76 EC D1 		ld (programPtr), hl
  306 D1:C7BE 23 -  -  -  		inc hl
  307 D1:C7BF ED 27 -  -  		ld hl, (hl)
  308 D1:C7C1 19 -  -  -  		add hl, de
  309 D1:C7C2 B7 -  -  -  		or a
  310 D1:C7C3 ED 52 -  -  		sbc hl, de
  311 D1:C7C5 28 16 -  -  		jr z, +_
  312 D1:C7C7 CD AA AA D1 		call ParseProgramUntilEnd
  313 D1:C7CB FE D0 -  -  		cp tElse
  314 D1:C7CD CA 05 AF D1 		jp z, ErrorSyntax
  315 D1:C7D1 3E C3 -  -  		ld a, 0C3h
  316 D1:C7D3 E1 -  -  -  	pop hl
  317 D1:C7D4 01 81 7C FC 	ld bc, UserMem - program
  318 D1:C7D8 09 -  -  -  	add hl, bc
  319 D1:C7D9 C3 62 AC D1 	jp InsertAHL															; jp XXXXXX
  320 D1:C7DD CD AA AA D1 _:		call ParseProgramUntilEnd
  321 D1:C7E1 FE D0 -  -  		cp tElse
  322 D1:C7E3 CA 05 AF D1 		jp z, ErrorSyntax
  323 D1:C7E7 E1 -  -  -  	pop hl
  324 D1:C7E8 22 76 EC D1 	ld (programPtr), hl
  325 D1:C7EC C9 -  -  -  	ret
  326 D1:C7ED -  -  -  -  	
  327 D1:C7ED -  -  -  -  functionClrHome:
  328 D1:C7ED CD C0 0F 02 	call _NxtFetch
  329 D1:C7F1 38 06 -  -  	jr c, +_
  330 D1:C7F3 FE 3F -  -  	cp tEnter
  331 D1:C7F5 C2 05 AF D1 	jp nz, ErrorSyntax
  332 D1:C7F9 21 28 08 02 _:	ld hl, _HomeUp
  333 D1:C7FD CD 77 AC D1 	call InsertCallHL														; call _HomeUp
  334 D1:C801 21 08 08 02 	ld hl, _ClrLCDFull
  335 D1:C805 C3 62 AC D1 	jp InsertAHL															; call _ClrLCDFull
  336 D1:C809 -  -  -  -  	
  337 D1:C809 -  -  -  -  functionPause:
  338 D1:C809 CD 28 10 02 	call _IncFetch
  339 D1:C80D 38 59 -  -  	jr c, ++_
  340 D1:C80F FE 3F -  -  	cp tEnter
  341 D1:C811 28 55 -  -  	jr z, ++_
  342 D1:C813 CD 2D B2 D1 	call ParseExpression
  343 D1:C817 3A 95 EC D1 	ld a, (amountOfPause)
  344 D1:C81B 3D -  -  -  	dec a
  345 D1:C81C CA A2 C8 D1 	jp z, functionPauseOnce
  346 D1:C820 FD CB D0 66 	bit has_already_pause, (iy+fProgram1)
  347 D1:C824 20 54 -  -  	jr nz, AddPause
  348 D1:C826 3E CD -  -  	ld a, 0CDh
  349 D1:C828 CD AE AC D1 	call InsertA															; call *
  350 D1:C82C CD EA AC D1 	call InsertProgramPtrToDataOffset
  351 D1:C830 2A 8B EC D1 	ld hl, (programDataDataPtr)
  352 D1:C834 22 27 EA D0 	ld (PauseStartData), hl
  353 D1:C838 E5 -  -  -  	push hl
  354 D1:C839 D1 -  -  -  	pop de
  355 D1:C83A FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  356 D1:C83E 28 10 -  -  	jr z, +_
  357 D1:C840 E5 -  -  -  	push hl
  358 D1:C841 2A 76 EC D1 	ld hl, (programPtr)
  359 D1:C845 2B -  -  -  		dec hl
  360 D1:C846 2B -  -  -  		dec hl
  361 D1:C847 2B -  -  -  		dec hl
  362 D1:C848 2B -  -  -  		dec hl
  363 D1:C849 ED 07 -  -  		ld bc, (hl)
  364 D1:C84B 0B -  -  -  		dec bc
  365 D1:C84C ED 0F -  -  		ld (hl), bc
  366 D1:C84E E1 -  -  -  	pop hl
  367 D1:C84F 23 -  -  -  	inc hl
  368 D1:C850 CD 66 AC D1 _:	call InsertHL															; call *
  369 D1:C854 21 C2 F0 D1 	ld hl, PauseRoutine
  370 D1:C858 01 13 00 00 	ld bc, PauseRoutineEnd - PauseRoutine
  371 D1:C85C ED B0 -  -  	ldir
  372 D1:C85E ED 53 8B EC 
              D1 -  -  -  	ld (programDataDataPtr), de
  373 D1:C863 FD CB D0 E6 	set has_already_pause, (iy+fProgram1)
  374 D1:C867 C9 -  -  -  	ret
  375 D1:C868 21 4C 01 02 _:	ld hl, _GetCSC
  376 D1:C86C CD 77 AC D1 	call InsertCallHL														; call _GetCSC
  377 D1:C870 3E FE -  -  	ld a, 0FEh
  378 D1:C872 21 09 20 F8 	ld hl, 0F82009h
  379 D1:C876 C3 62 AC D1 	jp InsertAHL															; cp tEnter \ jr nz, $-9
  380 D1:C87A -  -  -  -  AddPause:
  381 D1:C87A 3E CD -  -  	ld a, 0CDh
  382 D1:C87C CD AE AC D1 	call InsertA															; call ******
  383 D1:C880 CD EA AC D1 	call InsertProgramPtrToDataOffset
  384 D1:C884 2A 27 EA D0 	ld hl, (PauseStartData)
  385 D1:C888 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  386 D1:C88C 28 10 -  -  	jr z, +_
  387 D1:C88E E5 -  -  -  	push hl
  388 D1:C88F 2A 76 EC D1 		ld hl, (programPtr)
  389 D1:C893 2B -  -  -  		dec hl
  390 D1:C894 2B -  -  -  		dec hl
  391 D1:C895 2B -  -  -  		dec hl
  392 D1:C896 2B -  -  -  		dec hl
  393 D1:C897 ED 17 -  -  		ld de, (hl)
  394 D1:C899 1B -  -  -  		dec de
  395 D1:C89A ED 1F -  -  		ld (hl), de
  396 D1:C89C E1 -  -  -  	pop hl
  397 D1:C89D 23 -  -  -  	inc hl
  398 D1:C89E C3 66 AC D1 _:	jp InsertHL																; call XXXXXX
  399 D1:C8A2 -  -  -  -  functionPauseOnce:
  400 D1:C8A2 ED 5B 76 EC 
              D1 -  -  -  	ld de, (programPtr)
  401 D1:C8A7 21 C2 F0 D1 	ld hl, PauseRoutine
  402 D1:C8AB 01 13 00 00 	ld bc, PauseRoutineEnd - PauseRoutine
  403 D1:C8AF FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  404 D1:C8B3 28 11 -  -  	jr z, +_
  405 D1:C8B5 DD 2A 76 EC 
              D1 -  -  -  	ld ix, (programPtr)
  406 D1:C8BA DD 17 FD -  	ld de, (ix-3)
  407 D1:C8BD 1B -  -  -  	dec de
  408 D1:C8BE DD 1F FD -  	ld (ix-3), de
  409 D1:C8C1 ED 12 00 -  	lea de, ix
  410 D1:C8C4 23 -  -  -  	inc hl
  411 D1:C8C5 0B -  -  -  	dec bc
  412 D1:C8C6 ED B0 -  -  _:	ldir
  413 D1:C8C8 1B -  -  -  	dec de
  414 D1:C8C9 ED 53 76 EC 
              D1 -  -  -  	ld (programPtr), de
  415 D1:C8CE C9 -  -  -  	ret
  416 D1:C8CF -  -  -  -  	
  417 D1:C8CF -  -  -  -  functionInput:
  418 D1:C8CF CD 28 10 02 	call _IncFetch
  419 D1:C8D3 FE 41 -  -  	cp tA
  420 D1:C8D5 DA 05 AF D1 	jp c, ErrorSyntax
  421 D1:C8D9 FE 5C -  -  	cp ttheta+1
  422 D1:C8DB D2 05 AF D1 	jp nc, ErrorSyntax
  423 D1:C8DF CD C0 0F 02 	call _NxtFetch
  424 D1:C8E3 38 06 -  -  	jr c, +_
  425 D1:C8E5 FE 3F -  -  	cp tEnter
  426 D1:C8E7 C2 05 AF D1 	jp nz, ErrorSyntax
  427 D1:C8EB 3A 94 EC D1 _:	ld a, (amountOfInput)
  428 D1:C8EF 3D -  -  -  	dec a
  429 D1:C8F0 28 79 -  -  	jr z, functionInputOnce
  430 D1:C8F2 3E 3E -  -  	ld a, 03Eh
  431 D1:C8F4 CD AE AC D1 	call InsertA															; ld a, **
  432 D1:C8F8 CD 2C 10 02 	call _CurFetch
  433 D1:C8FC D6 41 -  -  	sub tA
  434 D1:C8FE 47 -  -  -  	ld b, a
  435 D1:C8FF 87 -  -  -  	add a, a
  436 D1:C900 80 -  -  -  	add a, b
  437 D1:C901 CD AE AC D1 	call InsertA															; ld a, XX
  438 D1:C905 3E 32 -  -  	ld a, 032h
  439 D1:C907 CD AE AC D1 	call InsertA															; ld (******), a
  440 D1:C90B CD EA AC D1 	call InsertProgramPtrToDataOffset
  441 D1:C90F FD CB D0 56 	bit has_already_input, (iy+fProgram1)
  442 D1:C913 20 39 -  -  	jr nz, AddPointerToInput
  443 D1:C915 2A 8B EC D1 	ld hl, (programDataDataPtr)
  444 D1:C919 22 21 EA D0 	ld (InputStartData), hl
  445 D1:C91D 01 3D 00 00 	ld bc, InputOffset-InputRoutine
  446 D1:C921 09 -  -  -  	add hl, bc
  447 D1:C922 CD 66 AC D1 	call InsertHL															; ld (XXXXXX), a
  448 D1:C926 3E CD -  -  	ld a, 0CDh
  449 D1:C928 CD AE AC D1 	call InsertA															; call ******
  450 D1:C92C CD EA AC D1 	call InsertProgramPtrToDataOffset
  451 D1:C930 2A 8B EC D1 	ld hl, (programDataDataPtr)
  452 D1:C934 E5 -  -  -  	push hl
  453 D1:C935 D1 -  -  -  	pop de
  454 D1:C936 CD 66 AC D1 	call InsertHL															; call XXXXXX
  455 D1:C93A 21 2F F0 D1 _:	ld hl, InputRoutine
  456 D1:C93E 01 42 00 00 	ld bc, InputRoutineEnd-InputRoutine
  457 D1:C942 ED B0 -  -  	ldir
  458 D1:C944 ED 53 8B EC 
              D1 -  -  -  	ld (programDataDataPtr), de
  459 D1:C949 FD CB D0 D6 	set has_already_input, (iy+fProgram1)
  460 D1:C94D C9 -  -  -  	ret
  461 D1:C94E -  -  -  -  AddPointerToInput:
  462 D1:C94E 2A 21 EA D0 	ld hl, (InputStartData)
  463 D1:C952 E5 -  -  -  	push hl
  464 D1:C953 01 3D 00 00 		ld bc, InputOffset-InputRoutine
  465 D1:C957 09 -  -  -  		add hl, bc
  466 D1:C958 CD 66 AC D1 		call InsertHL														; ld (XXXXXX), a
  467 D1:C95C 3E CD -  -  		ld a, 0CDh
  468 D1:C95E CD AE AC D1 		call InsertA														; call ******
  469 D1:C962 CD EA AC D1 		call InsertProgramPtrToDataOffset
  470 D1:C966 E1 -  -  -  	pop hl
  471 D1:C967 C3 66 AC D1 	jp InsertHL																; call XXXXXX
  472 D1:C96B -  -  -  -  functionInputOnce:
  473 D1:C96B CD 2C 10 02 	call _CurFetch
  474 D1:C96F D6 41 -  -  	sub tA
  475 D1:C971 47 -  -  -  	ld b, a
  476 D1:C972 87 -  -  -  	add a, a
  477 D1:C973 80 -  -  -  	add a, b
  478 D1:C974 32 6C F0 D1 	ld (InputOffset), a
  479 D1:C978 ED 5B 76 EC 
              D1 -  -  -  	ld de, (programPtr)
  480 D1:C97D 21 2F F0 D1 	ld hl, InputRoutine
  481 D1:C981 01 42 00 00 	ld bc, InputRoutineEnd - InputRoutine
  482 D1:C985 ED B0 -  -  	ldir
  483 D1:C987 D5 -  -  -  	push de
  484 D1:C988 DD E1 -  -  	pop ix
  485 D1:C98A DD 36 FC CD 	ld (ix-4), 0CDh
  486 D1:C98E ED 53 76 EC 
              D1 -  -  -  	ld (programPtr), de
  487 D1:C993 C9 -  -  -  	ret
  488 D1:C994 -  -  -  -  	
  489 D1:C994 -  -  -  -  functionNot:
  490 D1:C994 3E 01 -  -  	ld a, 1
  491 D1:C996 32 91 EC D1 	ld (amountOfArguments), a
  492 D1:C99A E5 -  -  -  	push hl
  493 D1:C99B DD E1 -  -  	pop ix
  494 D1:C99D DD 7E FC -  	ld a, (ix-4)
  495 D1:C9A0 B7 -  -  -  	or a
  496 D1:C9A1 28 10 -  -  	jr z, NotNumber
  497 D1:C9A3 3D -  -  -  	dec a
  498 D1:C9A4 28 23 -  -  	jr z, NotVariable
  499 D1:C9A6 3D -  -  -  	dec a
  500 D1:C9A7 28 36 -  -  	jr z, NotChainPush
  501 D1:C9A9 3D -  -  -  	dec a
  502 D1:C9AA 28 37 -  -  	jr z, NotChainAns
  503 D1:C9AC 3D -  -  -  	dec a
  504 D1:C9AD 28 48 -  -  	jr z, NotFunction
  505 D1:C9AF C3 05 AF D1 	jp ErrorSyntax
  506 D1:C9B3 -  -  -  -  NotNumber:
  507 D1:C9B3 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  508 D1:C9B7 DD 27 FD -  	ld hl, (ix-3)
  509 D1:C9BA 19 -  -  -  	add hl, de
  510 D1:C9BB B7 -  -  -  	or a
  511 D1:C9BC ED 52 -  -  	sbc hl, de
  512 D1:C9BE 21 00 00 00 	ld hl, 0
  513 D1:C9C2 20 01 -  -  	jr nz, +_
  514 D1:C9C4 23 -  -  -  	inc hl
  515 D1:C9C5 DD 2F FD -  _:	ld (ix-3), hl
  516 D1:C9C8 C9 -  -  -  	ret
  517 D1:C9C9 -  -  -  -  NotVariable:
  518 D1:C9C9 DD 4E FD -  	ld c, (ix-3)
  519 D1:C9CC 06 03 -  -  	ld b, 3
  520 D1:C9CE ED 4C -  -  	mlt bc
  521 D1:C9D0 79 -  -  -  	ld a, c
  522 D1:C9D1 21 DD 27 00 	ld hl, 00027DDh
  523 D1:C9D5 CD 70 1D 02 	call _SetHLUToA
  524 D1:C9D9 CD 66 AC D1 	call InsertHL															; ld hl, (ix+*)
  525 D1:C9DD 18 04 -  -  	jr NotChainAns
  526 D1:C9DF -  -  -  -  NotChainPush:
  527 D1:C9DF C3 3F AF D1 	jp UnknownError
  528 D1:C9E3 -  -  -  -  NotChainAns:
  529 D1:C9E3 3E 11 -  -  	ld a, 011h
  530 D1:C9E5 CD AE AC D1 	call InsertA															; ld de, *
  531 D1:C9E9 3E FF -  -  	ld a, 0FFh
  532 D1:C9EB 11 FF FF 19 	ld de, 019FFFFh
  533 D1:C9EF 21 ED 62 23 	ld hl, 02362EDh
  534 D1:C9F3 C3 A1 AC D1 	jp InsertADEHL															; ld de, -1 \ add hl, de \ sbc hl, hl \ inc hl
  535 D1:C9F7 -  -  -  -  NotFunction:
  536 D1:C9F7 DD 7E FD -  	ld a, (ix-3)
  537 D1:C9FA 06 02 -  -  	ld b, OutputInHL
  538 D1:C9FC CD FF AC D1 	call GetFunction
  539 D1:CA00 18 E1 -  -  	jr NotChainAns
  540 D1:CA02 -  -  -  -  	
  541 D1:CA02 -  -  -  -  functionCE:
  542 D1:CA02 23 -  -  -  	inc hl
  543 D1:CA03 23 -  -  -  	inc hl
  544 D1:CA04 7E -  -  -  	ld a, (hl)
  545 D1:CA05 FE 32 -  -  	cp tRemainder
  546 D1:CA07 C2 05 AF D1 	jp nz, ErrorSyntax
  547 D1:CA0B 11 F6 FF FF 	ld de, -10
  548 D1:CA0F 19 -  -  -  	add hl, de
  549 D1:CA10 -  -  -  -  		
  550 D1:CA10 -  -  -  -  functionRemainder:
  551 D1:CA10 3E 02 -  -  	ld a, 2
  552 D1:CA12 32 91 EC D1 	ld (amountOfArguments), a
  553 D1:CA16 7E -  -  -  	ld a, (hl)
  554 D1:CA17 DD 67 -  -  	ld ixh, a
  555 D1:CA19 23 -  -  -  	inc hl
  556 D1:CA1A E5 -  -  -  	push hl
  557 D1:CA1B ED 07 -  -  		ld bc, (hl)
  558 D1:CA1D 23 -  -  -  		inc hl
  559 D1:CA1E 23 -  -  -  		inc hl
  560 D1:CA1F 23 -  -  -  		inc hl
  561 D1:CA20 7E -  -  -  		ld a, (hl)
  562 D1:CA21 DD 6F -  -  		ld ixl, a
  563 D1:CA23 23 -  -  -  		inc hl
  564 D1:CA24 ED 17 -  -  		ld de, (hl)
  565 D1:CA26 E1 -  -  -  	pop hl
  566 D1:CA27 DD 7C -  -  	ld a, ixh
  567 D1:CA29 B7 -  -  -  	or a
  568 D1:CA2A 28 18 -  -  	jr z, RemainderNumberXXX
  569 D1:CA2C 3D -  -  -  	dec a
  570 D1:CA2D CA A4 CA D1 	jp z, RemainderVariableXXX
  571 D1:CA31 3D -  -  -  	dec a
  572 D1:CA32 CA EA CA D1 	jp z, RemainderChainPushXXX
  573 D1:CA36 3D -  -  -  	dec a
  574 D1:CA37 CA FC CA D1 	jp z, RemainderChainAnsXXX
  575 D1:CA3B 3D -  -  -  	dec a
  576 D1:CA3C CA 3B CB D1 	jp z, RemainderFunctionXXX
  577 D1:CA40 C3 05 AF D1 	jp ErrorSyntax
  578 D1:CA44 -  -  -  -  RemainderNumberXXX:
  579 D1:CA44 DD 7D -  -  	ld a, ixl
  580 D1:CA46 B7 -  -  -  	or a
  581 D1:CA47 28 10 -  -  	jr z, RemainderNumberNumber
  582 D1:CA49 3D -  -  -  	dec a
  583 D1:CA4A 28 1F -  -  	jr z, RemainderNumberVariable
  584 D1:CA4C 3D -  -  -  	dec a
  585 D1:CA4D 28 28 -  -  	jr z, RemainderNumberChainPush
  586 D1:CA4F 3D -  -  -  	dec a
  587 D1:CA50 28 29 -  -  	jr z, RemainderNumberChainAns
  588 D1:CA52 3D -  -  -  	dec a
  589 D1:CA53 28 38 -  -  	jr z, RemainderNumberFunction
  590 D1:CA55 C3 05 AF D1 	jp ErrorSyntax
  591 D1:CA59 -  -  -  -  RemainderNumberNumber:
  592 D1:CA59 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  593 D1:CA5D E5 -  -  -  	push hl
  594 D1:CA5E C5 -  -  -  		push bc
  595 D1:CA5F E1 -  -  -  		pop hl
  596 D1:CA60 D5 -  -  -  		push de
  597 D1:CA61 C1 -  -  -  		pop bc
  598 D1:CA62 CD 44 01 00 		call __idvrmu
  599 D1:CA66 EB -  -  -  		ex de, hl
  600 D1:CA67 E1 -  -  -  	pop hl
  601 D1:CA68 ED 1F -  -  	ld (hl), de
  602 D1:CA6A C9 -  -  -  	ret
  603 D1:CA6B -  -  -  -  RemainderNumberVariable:
  604 D1:CA6B 3E 21 -  -  	ld a, 021h
  605 D1:CA6D C5 -  -  -  	push bc
  606 D1:CA6E E1 -  -  -  	pop hl
  607 D1:CA6F CD 62 AC D1 	call InsertAHL															; ld hl, *
  608 D1:CA73 C3 20 CB D1 	jp RemainderChainAnsVariable
  609 D1:CA77 -  -  -  -  RemainderNumberChainPush:
  610 D1:CA77 C3 3F AF D1 	jp UnknownError
  611 D1:CA7B -  -  -  -  RemainderNumberChainAns:
  612 D1:CA7B 11 E5 C1 21 	ld de, 021C1E5h
  613 D1:CA7F C5 -  -  -  	push bc
  614 D1:CA80 E1 -  -  -  	pop hl
  615 D1:CA81 CD A5 AC D1 	call InsertDEHL															; push hl \ pop bc \ ld hl, *
  616 D1:CA85 21 44 01 00 	ld hl, __idvrmu
  617 D1:CA89 C3 77 AC D1 	jp InsertCallHL															; call __idvrmu
  618 D1:CA8D -  -  -  -  RemainderNumberFunction:
  619 D1:CA8D 7B -  -  -  	ld a, e
  620 D1:CA8E C5 -  -  -  	push bc
  621 D1:CA8F 06 00 -  -  		ld b, OutputInBC
  622 D1:CA91 CD FF AC D1 		call GetFunction
  623 D1:CA95 E1 -  -  -  	pop hl
  624 D1:CA96 3E 21 -  -  	ld a, 021h
  625 D1:CA98 CD 62 AC D1 	call InsertAHL															; ld hl, *
  626 D1:CA9C 21 44 01 00 	ld hl, __idvrmu
  627 D1:CAA0 C3 77 AC D1 	jp InsertCallHL															; call __idvrmu
  628 D1:CAA4 -  -  -  -  RemainderVariableXXX:
  629 D1:CAA4 DD 7D -  -  	ld a, ixl
  630 D1:CAA6 B7 -  -  -  	or a
  631 D1:CAA7 28 10 -  -  	jr z, RemainderVariableNumber
  632 D1:CAA9 3D -  -  -  	dec a
  633 D1:CAAA 28 13 -  -  	jr z, RemainderVariableVariable
  634 D1:CAAC 3D -  -  -  	dec a
  635 D1:CAAD 28 16 -  -  	jr z, RemainderVariableChainPush
  636 D1:CAAF 3D -  -  -  	dec a
  637 D1:CAB0 28 17 -  -  	jr z, RemainderVariableChainAns
  638 D1:CAB2 3D -  -  -  	dec a
  639 D1:CAB3 28 2C -  -  	jr z, RemainderVariableFunction
  640 D1:CAB5 C3 05 AF D1 	jp ErrorSyntax
  641 D1:CAB9 -  -  -  -  RemainderVariableNumber:
  642 D1:CAB9 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  643 D1:CABD 18 52 -  -  	jr RemainderChainAnsNumber
  644 D1:CABF -  -  -  -  RemainderVariableVariable
  645 D1:CABF CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  646 D1:CAC3 18 5B -  -  	jr RemainderChainAnsVariable
  647 D1:CAC5 -  -  -  -  RemainderVariableChainPush:
  648 D1:CAC5 C3 3F AF D1 	jp UnknownError
  649 D1:CAC9 -  -  -  -  RemainderVariableChainAns:
  650 D1:CAC9 3E E5 -  -  	ld a, 0E5h
  651 D1:CACB CD AE AC D1 	call InsertA															; push hl
  652 D1:CACF 3E C1 -  -  	ld a, 0C1h
  653 D1:CAD1 CD AE AC D1 	call InsertA															; pop bc
  654 D1:CAD5 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  655 D1:CAD9 21 44 01 00 	ld hl, __idvrmu
  656 D1:CADD C3 77 AC D1 	jp InsertCallHL															; call __idvrmu
  657 D1:CAE1 -  -  -  -  RemainderVariableFunction:
  658 D1:CAE1 7B -  -  -  	ld a, e
  659 D1:CAE2 06 00 -  -  	ld b, OutputInBC
  660 D1:CAE4 CD FF AC D1 	call GetFunction
  661 D1:CAE8 18 EB -  -  	jr -_
  662 D1:CAEA -  -  -  -  RemainderChainPushXXX:
  663 D1:CAEA DD 7D -  -  	ld a, ixl
  664 D1:CAEC FE 03 -  -  	cp typeChainAns
  665 D1:CAEE C2 3F AF D1 	jp nz, UnknownError
  666 D1:CAF2 21 E5 C1 E1 	ld hl, 0E1C1E5h
  667 D1:CAF6 CD 62 AC D1 	call InsertAHL															; push hl \ pop bc \ pop hl
  668 D1:CAFA 18 1C -  -  	jr +_
  669 D1:CAFC -  -  -  -  RemainderChainAnsXXX:
  670 D1:CAFC DD 7D -  -  	ld a, ixl
  671 D1:CAFE B7 -  -  -  	or a
  672 D1:CAFF 28 10 -  -  	jr z, RemainderChainAnsNumber
  673 D1:CB01 3D -  -  -  	dec a
  674 D1:CB02 28 1C -  -  	jr z, RemainderChainAnsVariable
  675 D1:CB04 3D -  -  -  	dec a
  676 D1:CB05 28 1F -  -  	jr z, RemainderChainAnsChainPush
  677 D1:CB07 3D -  -  -  	dec a
  678 D1:CB08 28 20 -  -  	jr z, RemainderChainAnsChainAns
  679 D1:CB0A 3D -  -  -  	dec a
  680 D1:CB0B 28 21 -  -  	jr z, RemainderChainAnsFunction
  681 D1:CB0D C3 05 AF D1 	jp ErrorSyntax
  682 D1:CB11 -  -  -  -  RemainderChainAnsNumber:
  683 D1:CB11 EB -  -  -  	ex de, hl
  684 D1:CB12 3E 01 -  -  	ld a, 001h
  685 D1:CB14 CD 62 AC D1 	call InsertAHL															; ld bc, *
  686 D1:CB18 21 44 01 00 _:	ld hl, __idvrmu
  687 D1:CB1C C3 77 AC D1 	jp InsertCallHL															; call __idvrmu
  688 D1:CB20 -  -  -  -  RemainderChainAnsVariable:
  689 D1:CB20 CD 93 AC D1 	call InsertIXC															; ld bc, (ix+*)
  690 D1:CB24 18 F2 -  -  	jr -_
  691 D1:CB26 -  -  -  -  RemainderChainAnsChainPush:
  692 D1:CB26 C3 3F AF D1 	jp UnknownError
  693 D1:CB2A -  -  -  -  RemainderChainAnsChainAns:
  694 D1:CB2A C3 3F AF D1 	jp UnknownError
  695 D1:CB2E -  -  -  -  RemainderChainAnsFunction:
  696 D1:CB2E 7B -  -  -  	ld a, e
  697 D1:CB2F 06 00 -  -  	ld b, OutputInBC
  698 D1:CB31 FD CB C0 F6 	set need_push, (iy+fExpression1)
  699 D1:CB35 CD FF AC D1 	call GetFunction
  700 D1:CB39 18 DD -  -  	jr -_
  701 D1:CB3B -  -  -  -  RemainderFunctionXXX:
  702 D1:CB3B DD 7D -  -  	ld a, ixl
  703 D1:CB3D B7 -  -  -  	or a
  704 D1:CB3E 28 10 -  -  	jr z, RemainderFunctionNumber
  705 D1:CB40 3D -  -  -  	dec a
  706 D1:CB41 28 16 -  -  	jr z, RemainderFunctionVariable
  707 D1:CB43 3D -  -  -  	dec a
  708 D1:CB44 28 1C -  -  	jr z, RemainderFunctionChainPush
  709 D1:CB46 3D -  -  -  	dec a
  710 D1:CB47 28 1D -  -  	jr z, RemainderFunctionChainAns
  711 D1:CB49 3D -  -  -  	dec a
  712 D1:CB4A 28 2F -  -  	jr z, RemainderFunctionFunction
  713 D1:CB4C C3 05 AF D1 	jp ErrorSyntax
  714 D1:CB50 -  -  -  -  RemainderFunctionNumber:
  715 D1:CB50 79 -  -  -  	ld a, c
  716 D1:CB51 06 02 -  -  	ld b, OutputInHL
  717 D1:CB53 CD FF AC D1 	call GetFunction
  718 D1:CB57 18 B8 -  -  	jr RemainderChainAnsNumber
  719 D1:CB59 -  -  -  -  RemainderFunctionVariable:
  720 D1:CB59 79 -  -  -  	ld a, c
  721 D1:CB5A 06 02 -  -  	ld b, OutputInHL
  722 D1:CB5C CD FF AC D1 	call GetFunction
  723 D1:CB60 18 BE -  -  	jr RemainderChainAnsVariable
  724 D1:CB62 -  -  -  -  RemainderFunctionChainPush:
  725 D1:CB62 C3 3F AF D1 	jp UnknownError
  726 D1:CB66 -  -  -  -  RemainderFunctionChainAns:
  727 D1:CB66 3E E5 -  -  	ld a, 0E5h
  728 D1:CB68 CD AE AC D1 	call InsertA														; push hl
  729 D1:CB6C 3E C1 -  -  	ld a, 0C1h
  730 D1:CB6E CD AE AC D1 	call InsertA														; pop bc
  731 D1:CB72 79 -  -  -  	ld a, c
  732 D1:CB73 06 02 -  -  	ld b, OutputInHL
  733 D1:CB75 CD FF AC D1 	call GetFunction
  734 D1:CB79 18 9D -  -  	jr -_
  735 D1:CB7B -  -  -  -  RemainderFunctionFunction:
  736 D1:CB7B 7B -  -  -  	ld a, e
  737 D1:CB7C 06 00 -  -  	ld b, OutputInBC
  738 D1:CB7E CD FF AC D1 	call GetFunction
  739 D1:CB82 79 -  -  -  	ld a, c
  740 D1:CB83 06 02 -  -  	ld b, OutputInHL
  741 D1:CB85 CD FF AC D1 	call GetFunction
  742 D1:CB89 18 8D -  -  	jr -_
  743 D1:CB8B -  -  -  -  	
  744 D1:CB8B -  -  -  -  functionMean:
  745 D1:CB8B FD CB BF C6 	set use_mean_routine, (iy+fExpression2)
  746 D1:CB8F -  -  -  -  functionMax:
  747 D1:CB8F 3E 30 -  -  	ld a, 030h
  748 D1:CB91 18 02 -  -  	jr +_
  749 D1:CB93 -  -  -  -  functionMin:
  750 D1:CB93 3E 38 -  -  	ld a, 038h
  751 D1:CB95 32 D2 CC D1 _:	ld (MaxMinMeanInsertSMC), a
  752 D1:CB99 3E 02 -  -  	ld a, 2
  753 D1:CB9B 32 91 EC D1 	ld (amountOfArguments), a
  754 D1:CB9F 2B -  -  -  	dec hl
  755 D1:CBA0 2B -  -  -  	dec hl
  756 D1:CBA1 2B -  -  -  	dec hl
  757 D1:CBA2 ED 17 -  -  	ld de, (hl)
  758 D1:CBA4 2B -  -  -  	dec hl
  759 D1:CBA5 7E -  -  -  	ld a, (hl)
  760 D1:CBA6 DD 6F -  -  	ld ixl, a
  761 D1:CBA8 2B -  -  -  	dec hl
  762 D1:CBA9 2B -  -  -  	dec hl
  763 D1:CBAA 2B -  -  -  	dec hl
  764 D1:CBAB ED 07 -  -  	ld bc, (hl)
  765 D1:CBAD 2B -  -  -  	dec hl
  766 D1:CBAE 7E -  -  -  	ld a, (hl)
  767 D1:CBAF 23 -  -  -  	inc hl
  768 D1:CBB0 B7 -  -  -  	or a
  769 D1:CBB1 28 18 -  -  	jr z, MaxMinMeanNumberXXX
  770 D1:CBB3 3D -  -  -  	dec a
  771 D1:CBB4 CA 3A CC D1 	jp z, MaxMinMeanVariableXXX
  772 D1:CBB8 3D -  -  -  	dec a
  773 D1:CBB9 CA 83 CC D1 	jp z, MaxMinMeanChainPushXXX
  774 D1:CBBD 3D -  -  -  	dec a
  775 D1:CBBE CA A7 CC D1 	jp z, MaxMinMeanChainAnsXXX
  776 D1:CBC2 3D -  -  -  	dec a
  777 D1:CBC3 CA F4 CC D1 	jp z, MaxMinMeanFunctionXXX
  778 D1:CBC7 C3 05 AF D1 	jp ErrorSyntax
  779 D1:CBCB -  -  -  -  MaxMinMeanNumberXXX:
  780 D1:CBCB DD 7D -  -  	ld a, ixl
  781 D1:CBCD B7 -  -  -  	or a
  782 D1:CBCE 28 10 -  -  	jr z, MaxMinMeanNumberNumber
  783 D1:CBD0 3D -  -  -  	dec a
  784 D1:CBD1 28 4B -  -  	jr z, MaxMinMeanNumberVariable
  785 D1:CBD3 3D -  -  -  	dec a
  786 D1:CBD4 28 4F -  -  	jr z, MaxMinMeanNumberChainPush
  787 D1:CBD6 3D -  -  -  	dec a
  788 D1:CBD7 28 50 -  -  	jr z, MaxMinMeanNumberChainAns
  789 D1:CBD9 3D -  -  -  	dec a
  790 D1:CBDA 28 51 -  -  	jr z, MaxMinMeanNumberFunction
  791 D1:CBDC C3 05 AF D1 	jp ErrorSyntax
  792 D1:CBE0 -  -  -  -  MaxMinMeanNumberNumber:
  793 D1:CBE0 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  794 D1:CBE4 E5 -  -  -  	push hl
  795 D1:CBE5 FD CB BF 46 		bit use_mean_routine, (iy+fExpression2)
  796 D1:CBE9 20 1C -  -  		jr nz, ++_
  797 D1:CBEB 3A D2 CC D1 		ld a, (MaxMinMeanInsertSMC)
  798 D1:CBEF C5 -  -  -  		push bc
  799 D1:CBF0 E1 -  -  -  		pop hl
  800 D1:CBF1 FE 30 -  -  		cp 030h
  801 D1:CBF3 28 09 -  -  		jr z, +_
  802 D1:CBF5 B7 -  -  -  		or a
  803 D1:CBF6 ED 52 -  -  		sbc hl, de
  804 D1:CBF8 19 -  -  -  		add hl, de
  805 D1:CBF9 30 01 -  -  		jr nc, $+3
  806 D1:CBFB EB -  -  -  		ex de, hl
  807 D1:CBFC 18 1C -  -  		jr +++_
  808 D1:CBFE B7 -  -  -  _:		or a
  809 D1:CBFF ED 52 -  -  		sbc hl, de
  810 D1:CC01 19 -  -  -  		add hl, de
  811 D1:CC02 38 01 -  -  		jr c, $+3
  812 D1:CC04 EB -  -  -  		ex de, hl
  813 D1:CC05 18 13 -  -  		jr ++_
  814 D1:CC07 EB -  -  -  _:		ex de, hl
  815 D1:CC08 DD 21 00 00 
              00 -  -  -  		ld ix, 0
  816 D1:CC0D DD 39 -  -  		add ix, sp
  817 D1:CC0F 09 -  -  -  		add hl, bc
  818 D1:CC10 E5 -  -  -  		push hl
  819 D1:CC11 DD CB FF 1E 			rr (ix-1)
  820 D1:CC15 D1 -  -  -  		pop de
  821 D1:CC16 CB 1A -  -  		rr d
  822 D1:CC18 CB 1B -  -  		rr e
  823 D1:CC1A E1 -  -  -  _:	pop hl
  824 D1:CC1B ED 1F -  -  	ld (hl), de
  825 D1:CC1D C9 -  -  -  	ret
  826 D1:CC1E -  -  -  -  MaxMinMeanNumberVariable:
  827 D1:CC1E C5 -  -  -  	push bc
  828 D1:CC1F E1 -  -  -  	pop hl
  829 D1:CC20 EB -  -  -  	ex de, hl
  830 D1:CC21 E5 -  -  -  	push hl
  831 D1:CC22 C1 -  -  -  	pop bc
  832 D1:CC23 18 2A -  -  	jr MaxMinMeanVariableNumber
  833 D1:CC25 -  -  -  -  MaxMinMeanNumberChainPush:
  834 D1:CC25 C3 3F AF D1 	jp UnknownError
  835 D1:CC29 -  -  -  -  MaxMinMeanNumberChainAns:
  836 D1:CC29 C5 -  -  -  	push bc
  837 D1:CC2A D1 -  -  -  	pop de
  838 D1:CC2B 18 09 -  -  	jr +_
  839 D1:CC2D -  -  -  -  MaxMinMeanNumberFunction:
  840 D1:CC2D 7B -  -  -  	ld a, e
  841 D1:CC2E C5 -  -  -  	push bc
  842 D1:CC2F 06 02 -  -  		ld b, OutputInHL
  843 D1:CC31 CD FF AC D1 		call GetFunction
  844 D1:CC35 D1 -  -  -  	pop de
  845 D1:CC36 C3 BC CC D1 _:	jp MaxMinMeanChainAnsNumber
  846 D1:CC3A -  -  -  -  MaxMinMeanVariableXXX:
  847 D1:CC3A DD 7D -  -  	ld a, ixl
  848 D1:CC3C B7 -  -  -  	or a
  849 D1:CC3D 28 10 -  -  	jr z, MaxMinMeanVariableNumber
  850 D1:CC3F 3D -  -  -  	dec a
  851 D1:CC40 28 13 -  -  	jr z, MaxMinMeanVariableVariable
  852 D1:CC42 3D -  -  -  	dec a
  853 D1:CC43 28 18 -  -  	jr z, MaxMinMeanVariableChainPush
  854 D1:CC45 3D -  -  -  	dec a
  855 D1:CC46 28 2B -  -  	jr z, MaxMinMeanVariableChainAns
  856 D1:CC48 3D -  -  -  	dec a
  857 D1:CC49 28 2F -  -  	jr z, MaxMinMeanVariableFunction
  858 D1:CC4B C3 05 AF D1 	jp ErrorSyntax
  859 D1:CC4F -  -  -  -  MaxMinMeanVariableNumber:
  860 D1:CC4F CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  861 D1:CC53 18 67 -  -  	jr MaxMinMeanChainAnsNumber
  862 D1:CC55 -  -  -  -  MaxMinMeanVariableVariable
  863 D1:CC55 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  864 D1:CC59 C3 D9 CC D1 	jp MaxMinMeanChainAnsVariable
  865 D1:CC5D -  -  -  -  MaxMinMeanVariableChainPush:
  866 D1:CC5D 2A 76 EC D1 	ld hl, (programPtr)
  867 D1:CC61 2B -  -  -  	dec hl
  868 D1:CC62 7E -  -  -  	ld a, (hl)
  869 D1:CC63 FE E5 -  -  	cp 0E5h
  870 D1:CC65 28 03 -  -  	jr z, +_
  871 D1:CC67 36 E1 -  -  	ld (hl), 0E1h
  872 D1:CC69 23 -  -  -  	inc hl
  873 D1:CC6A 22 76 EC D1 _:	ld (programPtr), hl
  874 D1:CC6E 59 -  -  -  	ld e, c
  875 D1:CC6F C3 D9 CC D1 	jp MaxMinMeanChainAnsVariable
  876 D1:CC73 -  -  -  -  MaxMinMeanVariableChainAns:
  877 D1:CC73 59 -  -  -  _:	ld e, c
  878 D1:CC74 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
  879 D1:CC78 18 49 -  -  	jr MaxMinMeanInsert
  880 D1:CC7A -  -  -  -  MaxMinMeanVariableFunction:
  881 D1:CC7A 7B -  -  -  	ld a, e
  882 D1:CC7B 06 02 -  -  	ld b, OutputInHL
  883 D1:CC7D CD FF AC D1 	call GetFunction
  884 D1:CC81 18 F0 -  -  	jr -_
  885 D1:CC83 -  -  -  -  MaxMinMeanChainPushXXX:
  886 D1:CC83 DD 7D -  -  	ld a, ixl
  887 D1:CC85 FE 03 -  -  	cp typeChainAns
  888 D1:CC87 C2 3F AF D1 	jp nz, UnknownError
  889 D1:CC8B FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
  890 D1:CC8F 20 0E -  -  	jr nz, +_
  891 D1:CC91 3E ED -  -  	ld a, 0EDh
  892 D1:CC93 CD AE AC D1 	call InsertA															; ex de, hl
  893 D1:CC97 3E E1 -  -  	ld a, 0E1h
  894 D1:CC99 CD AE AC D1 	call InsertA															; pop hl
  895 D1:CC9D 18 24 -  -  	jr MaxMinMeanInsert
  896 D1:CC9F 3E D1 -  -  _:	ld a, 0D1h
  897 D1:CCA1 CD AE AC D1 	call InsertA															; pop de
  898 D1:CCA5 18 1C -  -  	jr MaxMinMeanInsert
  899 D1:CCA7 -  -  -  -  MaxMinMeanChainAnsXXX:
  900 D1:CCA7 DD 7D -  -  	ld a, ixl
  901 D1:CCA9 B7 -  -  -  	or a
  902 D1:CCAA 28 10 -  -  	jr z, MaxMinMeanChainAnsNumber
  903 D1:CCAC 3D -  -  -  	dec a
  904 D1:CCAD 28 2A -  -  	jr z, MaxMinMeanChainAnsVariable
  905 D1:CCAF 3D -  -  -  	dec a
  906 D1:CCB0 28 2D -  -  	jr z, MaxMinMeanChainAnsChainPush
  907 D1:CCB2 3D -  -  -  	dec a
  908 D1:CCB3 28 2E -  -  	jr z, MaxMinMeanChainAnsChainAns
  909 D1:CCB5 3D -  -  -  	dec a
  910 D1:CCB6 28 2F -  -  	jr z, MaxMinMeanChainAnsFunction
  911 D1:CCB8 C3 05 AF D1 	jp ErrorSyntax
  912 D1:CCBC -  -  -  -  MaxMinMeanChainAnsNumber:
  913 D1:CCBC EB -  -  -  	ex de, hl
  914 D1:CCBD 3E 11 -  -  	ld a, 011h
  915 D1:CCBF CD 62 AC D1 	call InsertAHL															; ld de, *
  916 D1:CCC3 -  -  -  -  MaxMinMeanInsert:
  917 D1:CCC3 FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
  918 D1:CCC7 C2 53 CD D1 	jp nz, MeanInsert
  919 D1:CCCB 3E B7 -  -  	ld a, 0B7h
  920 D1:CCCD 11 ED 52 19 	ld de, 01952EDh
  921 D1:CCD1 -  -  -  -  MaxMinMeanInsertSMC = $+1
  922 D1:CCD1 21 30 01 EB 	ld hl, 0EB0130h
  923 D1:CCD5 C3 A1 AC D1 	jp InsertADEHL															; or a \ sbc hl, de \ add hl, de \ jr [n]c, $+3 \ add hl, de
  924 D1:CCD9 -  -  -  -  MaxMinMeanChainAnsVariable:
  925 D1:CCD9 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
  926 D1:CCDD 18 E4 -  -  	jr MaxMinMeanInsert
  927 D1:CCDF -  -  -  -  MaxMinMeanChainAnsChainPush:
  928 D1:CCDF C3 3F AF D1 	jp UnknownError
  929 D1:CCE3 -  -  -  -  MaxMinMeanChainAnsChainAns:
  930 D1:CCE3 C3 3F AF D1 	jp UnknownError
  931 D1:CCE7 -  -  -  -  MaxMinMeanChainAnsFunction:
  932 D1:CCE7 7B -  -  -  	ld a, e
  933 D1:CCE8 06 01 -  -  	ld b, OutputInDE
  934 D1:CCEA FD CB C0 F6 	set need_push, (iy+fExpression1)
  935 D1:CCEE CD FF AC D1 	call GetFunction
  936 D1:CCF2 18 CF -  -  _:	jr MaxMinMeanInsert
  937 D1:CCF4 -  -  -  -  MaxMinMeanFunctionXXX:
  938 D1:CCF4 DD 7D -  -  	ld a, ixl
  939 D1:CCF6 B7 -  -  -  	or a
  940 D1:CCF7 28 10 -  -  	jr z, MaxMinMeanFunctionNumber
  941 D1:CCF9 3D -  -  -  	dec a
  942 D1:CCFA 28 16 -  -  	jr z, MaxMinMeanFunctionVariable
  943 D1:CCFC 3D -  -  -  	dec a
  944 D1:CCFD 28 1C -  -  	jr z, MaxMinMeanFunctionChainPush
  945 D1:CCFF 3D -  -  -  	dec a
  946 D1:CD00 28 1D -  -  	jr z, MaxMinMeanFunctionChainAns
  947 D1:CD02 3D -  -  -  	dec a
  948 D1:CD03 28 38 -  -  	jr z, MaxMinMeanFunctionFunction
  949 D1:CD05 C3 05 AF D1 	jp ErrorSyntax
  950 D1:CD09 -  -  -  -  MaxMinMeanFunctionNumber:
  951 D1:CD09 79 -  -  -  	ld a, c
  952 D1:CD0A 06 02 -  -  	ld b, OutputInHL
  953 D1:CD0C CD FF AC D1 	call GetFunction
  954 D1:CD10 18 AA -  -  	jr MaxMinMeanChainAnsNumber
  955 D1:CD12 -  -  -  -  MaxMinMeanFunctionVariable:
  956 D1:CD12 79 -  -  -  	ld a, c
  957 D1:CD13 06 02 -  -  	ld b, OutputInHL
  958 D1:CD15 CD FF AC D1 	call GetFunction
  959 D1:CD19 18 BE -  -  	jr MaxMinMeanChainAnsVariable
  960 D1:CD1B -  -  -  -  MaxMinMeanFunctionChainPush:
  961 D1:CD1B C3 3F AF D1 	jp UnknownError
  962 D1:CD1F -  -  -  -  MaxMinMeanFunctionChainAns:
  963 D1:CD1F FD CB BF 46 	bit use_mean_routine, (iy+fExpression2)
  964 D1:CD23 20 13 -  -  	jr nz, ++_
  965 D1:CD25 3E EB -  -  	ld a, 0EBh
  966 D1:CD27 CD AE AC D1 	call InsertA															; ex de, hl
  967 D1:CD2B 79 -  -  -  	ld a, c
  968 D1:CD2C 06 02 -  -  	ld b, OutputInHL
  969 D1:CD2E FD CB C0 F6 _:	set need_push, (iy+fExpression1)
  970 D1:CD32 CD FF AC D1 	call GetFunction
  971 D1:CD36 18 8B -  -  	jr MaxMinMeanInsert
  972 D1:CD38 79 -  -  -  _:	ld a, c
  973 D1:CD39 06 01 -  -  	ld b, OutputInDE
  974 D1:CD3B 18 F1 -  -  	jr --_
  975 D1:CD3D -  -  -  -  MaxMinMeanFunctionFunction:
  976 D1:CD3D 7B -  -  -  	ld a, e
  977 D1:CD3E 06 01 -  -  	ld b, OutputInDE
  978 D1:CD40 CD FF AC D1 	call GetFunction
  979 D1:CD44 79 -  -  -  	ld a, c
  980 D1:CD45 06 02 -  -  	ld b, OutputInHL
  981 D1:CD47 FD CB C0 F6 	set need_push, (iy+fExpression1)
  982 D1:CD4B CD FF AC D1 	call GetFunction
  983 D1:CD4F C3 C3 CC D1 	jp MaxMinMeanInsert
  984 D1:CD53 -  -  -  -  MeanInsert:
  985 D1:CD53 FD CB D0 6E 	bit has_already_mean, (iy+fProgram1)
  986 D1:CD57 20 2C -  -  	jr nz, +_
  987 D1:CD59 3E CD -  -  	ld a, 0CDh
  988 D1:CD5B CD AE AC D1 	call InsertA															; call *
  989 D1:CD5F CD EA AC D1 	call InsertProgramPtrToDataOffset
  990 D1:CD63 2A 8B EC D1 	ld hl, (programDataDataPtr)
  991 D1:CD67 22 2A EA D0 	ld (MeanStartData), hl
  992 D1:CD6B E5 -  -  -  	push hl
  993 D1:CD6C D1 -  -  -  	pop de
  994 D1:CD6D CD 66 AC D1 	call InsertHL															; call *
  995 D1:CD71 21 D5 F0 D1 	ld hl, MeanRoutine
  996 D1:CD75 01 18 00 00 	ld bc, MeanRoutineEnd - MeanRoutine
  997 D1:CD79 ED B0 -  -  	ldir
  998 D1:CD7B ED 53 8B EC 
              D1 -  -  -  	ld (programDataDataPtr), de
  999 D1:CD80 FD CB D0 EE 	set has_already_mean, (iy+fProgram1)
 1000 D1:CD84 C9 -  -  -  	ret
 1001 D1:CD85 3E CD -  -  _:	ld a, 0CDh
 1002 D1:CD87 CD AE AC D1 	call InsertA															; call ******
 1003 D1:CD8B CD EA AC D1 	call InsertProgramPtrToDataOffset
 1004 D1:CD8F 2A 2A EA D0 	ld hl, (MeanStartData)
 1005 D1:CD93 C3 66 AC D1 	jp InsertHL																; call XXXXXX
 1006 D1:CD97 -  -  -  -  	
 1007 D1:CD97 -  -  -  -  functionC:
 1008 D1:CD97 3E 01 -  -  	ld a, 1
 1009 D1:CD99 32 90 EC D1 	ld (openedParensF), a
 1010 D1:CD9D CD 28 10 02 	call _IncFetch
 1011 D1:CDA1 CD 2D B2 D1 	call ParseExpression
 1012 D1:CDA5 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
 1013 D1:CDA9 CA 05 AF D1 	jp z, ErrorSyntax
 1014 D1:CDAD 2A 76 EC D1 	ld hl, (programPtr)
 1015 D1:CDB1 2B -  -  -  	dec hl
 1016 D1:CDB2 2B -  -  -  	dec hl
 1017 D1:CDB3 2B -  -  -  	dec hl
 1018 D1:CDB4 2B -  -  -  	dec hl
 1019 D1:CDB5 22 76 EC D1 	ld (programPtr), hl
 1020 D1:CDB9 23 -  -  -  	inc hl
 1021 D1:CDBA ED 27 -  -  	ld hl, (hl)
 1022 D1:CDBC 11 4F 00 00 	ld de, AMOUNT_OF_C_FUNCTIONS
 1023 D1:CDC0 B7 -  -  -  	or a
 1024 D1:CDC1 ED 52 -  -  	sbc hl, de
 1025 D1:CDC3 D2 05 AF D1 	jp nc, ErrorSyntax
 1026 D1:CDC7 19 -  -  -  	add hl, de
 1027 D1:CDC8 7D -  -  -  	ld a, l
 1028 D1:CDC9 B7 -  -  -  	or a
 1029 D1:CDCA ED 62 -  -  	sbc hl, hl
 1030 D1:CDCC 6F -  -  -  	ld l, a
 1031 D1:CDCD 11 75 EA D1 	ld de, CFunctionsArguments
 1032 D1:CDD1 19 -  -  -  	add hl, de
 1033 D1:CDD2 47 -  -  -  	ld b, a
 1034 D1:CDD3 7E -  -  -  	ld a, (hl)
 1035 D1:CDD4 FE E0 -  -  	cp %11100000
 1036 D1:CDD6 CA 4B AF D1 	jp z, ImplementError
 1037 D1:CDDA FD 77 B0 -  	ld (iy+fFunction1), a
 1038 D1:CDDD 07 -  -  -  	rlca
 1039 D1:CDDE 07 -  -  -  	rlca
 1040 D1:CDDF 07 -  -  -  	rlca
 1041 D1:CDE0 E6 07 -  -  	and 000000111b
 1042 D1:CDE2 57 -  -  -  	ld d, a
 1043 D1:CDE3 78 -  -  -  	ld a, b
 1044 D1:CDE4 21 C0 EB D1 	ld hl, CSpecialFunctions
 1045 D1:CDE8 01 05 00 00 	ld bc, CSpecialFunctionsEnd - CSpecialFunctions
 1046 D1:CDEC ED B1 -  -  	cpir
 1047 D1:CDEE 20 0C -  -  	jr nz, +_
 1048 D1:CDF0 06 03 -  -  	ld b, 3
 1049 D1:CDF2 ED 4C -  -  	mlt bc
 1050 D1:CDF4 21 C5 EB D1 	ld hl, CSpecialFunctionsStart
 1051 D1:CDF8 09 -  -  -  	add hl, bc
 1052 D1:CDF9 ED 27 -  -  	ld hl, (hl)
 1053 D1:CDFB E9 -  -  -  	jp (hl)
 1054 D1:CDFC 4A -  -  -  _:	ld c, d
 1055 D1:CDFD 06 03 -  -  	ld b, 3
 1056 D1:CDFF ED 4C -  -  	mlt bc
 1057 D1:CE01 DD 21 D4 EB 
              D1 -  -  -  	ld ix, CArguments
 1058 D1:CE06 DD 09 -  -  	add ix, bc
 1059 D1:CE08 DD 27 15 -  	ld hl, (ix+21)
 1060 D1:CE0B 77 -  -  -  	ld (hl), a
 1061 D1:CE0C DD 27 00 -  	ld hl, (ix)
 1062 D1:CE0F E9 -  -  -  	jp (hl)
 1063 D1:CE10 -  -  -  -  
 1064 D1:CE10 -  -  -  -  functionCustom:
 1065 D1:CE10 CD 28 10 02 	call _IncFetch
 1066 D1:CE14 D6 0A -  -  	sub 10
 1067 D1:CE16 DA 05 AF D1 	jp c, ErrorSyntax
 1068 D1:CE1A FE 05 -  -  	cp AMOUNT_OF_CUSTOM_TOKENS + 1
 1069 D1:CE1C D2 05 AF D1 	jp nc, ErrorSyntax
 1070 D1:CE20 4F -  -  -  	ld c, a
 1071 D1:CE21 06 03 -  -  	ld b, 3
 1072 D1:CE23 ED 4C -  -  	mlt bc
 1073 D1:CE25 21 FE EB D1 	ld hl, functionCustomStart
 1074 D1:CE29 09 -  -  -  	add hl, bc
 1075 D1:CE2A ED 27 -  -  	ld hl, (hl)
 1076 D1:CE2C E9 -  -  -  	jp (hl)
 1077 D1:CE2D -  -  -  -  	
 1078 D1:CE2D -  -  -  -  functionExecHex:
 1079 D1:CE2D CD 28 10 02 	call _IncFetch
 1080 D1:CE31 D8 -  -  -  	ret c
 1081 D1:CE32 FE 3F -  -  	cp tEnter
 1082 D1:CE34 C8 -  -  -  	ret z
 1083 D1:CE35 FE 2A -  -  	cp tString
 1084 D1:CE37 C8 -  -  -  	ret z
 1085 D1:CE38 21 60 EC D1 	ld hl, hexadecimals
 1086 D1:CE3C 01 10 00 00 	ld bc, 16
 1087 D1:CE40 ED B1 -  -  	cpir
 1088 D1:CE42 C2 05 AF D1 _:	jp nz, ErrorSyntax
 1089 D1:CE46 51 -  -  -  	ld d, c
 1090 D1:CE47 CD 28 10 02 	call _IncFetch
 1091 D1:CE4B DA 05 AF D1 	jp c, ErrorSyntax
 1092 D1:CE4F 21 60 EC D1 	ld hl, hexadecimals
 1093 D1:CE53 01 10 00 00 	ld bc, 16
 1094 D1:CE57 ED B1 -  -  	cpir
 1095 D1:CE59 20 E7 -  -  	jr nz, -_
 1096 D1:CE5B 7A -  -  -  	ld a, d
 1097 D1:CE5C 87 -  -  -  	add a, a
 1098 D1:CE5D 87 -  -  -  	add a, a
 1099 D1:CE5E 87 -  -  -  	add a, a
 1100 D1:CE5F 87 -  -  -  	add a, a
 1101 D1:CE60 81 -  -  -  	add a, c
 1102 D1:CE61 CD AE AC D1 	call InsertA
 1103 D1:CE65 18 C6 -  -  	jr functionExecHex
 1104 D1:CE67 -  -  -  -  	
 1105 D1:CE67 -  -  -  -  functionDefineSprite:
 1106 D1:CE67 FD CB D0 7E 	bit used_code, (iy+fProgram1)
 1107 D1:CE6B C2 2D AF D1 	jp nz, ErrorUsedCode
 1108 D1:CE6F 3E 01 -  -  	ld a, 1
 1109 D1:CE71 32 90 EC D1 	ld (openedParensF), a
 1110 D1:CE75 CD 28 10 02 	call _IncFetch
 1111 D1:CE79 CD 2D B2 D1 	call ParseExpression
 1112 D1:CE7D FD CB C0 66 	bit output_is_number, (iy+fExpression1)
 1113 D1:CE81 CA 05 AF D1 	jp z, ErrorSyntax
 1114 D1:CE85 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
 1115 D1:CE89 CA 05 AF D1 	jp z, ErrorSyntax
 1116 D1:CE8D 2A 76 EC D1 	ld hl, (programPtr)
 1117 D1:CE91 2B -  -  -  	dec hl
 1118 D1:CE92 2B -  -  -  	dec hl
 1119 D1:CE93 2B -  -  -  	dec hl
 1120 D1:CE94 2B -  -  -  	dec hl
 1121 D1:CE95 22 76 EC D1 	ld (programPtr), hl
 1122 D1:CE99 23 -  -  -  	inc hl
 1123 D1:CE9A ED 27 -  -  	ld hl, (hl)
 1124 D1:CE9C E5 -  -  -  	push hl
 1125 D1:CE9D C1 -  -  -  	pop bc
 1126 D1:CE9E 29 -  -  -  	add hl, hl
 1127 D1:CE9F 09 -  -  -  	add hl, bc
 1128 D1:CEA0 ED 5B 8B EC 
              D1 -  -  -  	ld de, (programDataDataPtr)
 1129 D1:CEA5 01 2F 11 D1 	ld bc, spriteStack
 1130 D1:CEA9 09 -  -  -  	add hl, bc
 1131 D1:CEAA ED 1F -  -  	ld (hl), de
 1132 D1:CEAC 2A 88 EC D1 	ld hl, (tempListsPtr)
 1133 D1:CEB0 ED 1F -  -  	ld (hl), de
 1134 D1:CEB2 23 -  -  -  	inc hl
 1135 D1:CEB3 23 -  -  -  	inc hl
 1136 D1:CEB4 23 -  -  -  	inc hl
 1137 D1:CEB5 22 88 EC D1 	ld (tempListsPtr), hl
 1138 D1:CEB9 06 02 -  -  	ld b, 2
 1139 D1:CEBB D5 -  -  -  _:	push de
 1140 D1:CEBC C5 -  -  -  		push bc
 1141 D1:CEBD CD 28 10 02 			call _IncFetch
 1142 D1:CEC1 CD 2D B2 D1 			call ParseExpression
 1143 D1:CEC5 FD CB C0 66 			bit output_is_number, (iy+fExpression1)
 1144 D1:CEC9 CA 05 AF D1 			jp z, ErrorSyntax
 1145 D1:CECD FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
 1146 D1:CED1 CA 05 AF D1 			jp z, ErrorSyntax
 1147 D1:CED5 2A 76 EC D1 			ld hl, (programPtr)
 1148 D1:CED9 2B -  -  -  			dec hl
 1149 D1:CEDA 2B -  -  -  			dec hl
 1150 D1:CEDB 2B -  -  -  			dec hl
 1151 D1:CEDC 2B -  -  -  			dec hl
 1152 D1:CEDD 22 76 EC D1 			ld (programPtr), hl
 1153 D1:CEE1 23 -  -  -  			inc hl
 1154 D1:CEE2 7E -  -  -  			ld a, (hl)
 1155 D1:CEE3 C1 -  -  -  		pop bc
 1156 D1:CEE4 D1 -  -  -  	pop de
 1157 D1:CEE5 12 -  -  -  	ld (de), a
 1158 D1:CEE6 13 -  -  -  	inc de
 1159 D1:CEE7 10 D2 -  -  	djnz -_
 1160 D1:CEE9 2A 76 EC D1 	ld hl, (programPtr)
 1161 D1:CEED E5 -  -  -  	push hl
 1162 D1:CEEE ED 53 76 EC 
              D1 -  -  -  		ld (programPtr), de
 1163 D1:CEF3 CD 28 10 02 		call _IncFetch
 1164 D1:CEF7 FE 2A -  -  		cp tString
 1165 D1:CEF9 C2 05 AF D1 		jp nz, ErrorSyntax
 1166 D1:CEFD CD C0 0F 02 		call _NxtFetch
 1167 D1:CF01 DA 05 AF D1 		jp c, ErrorSyntax
 1168 D1:CF05 FE 3F -  -  		cp tEnter
 1169 D1:CF07 CA 05 AF D1 		jp z, ErrorSyntax
 1170 D1:CF0B CD 2D CE D1 		call functionExecHex
 1171 D1:CF0F 2A 76 EC D1 		ld hl, (programPtr)
 1172 D1:CF13 22 8B EC D1 		ld (programDataDataPtr), hl
 1173 D1:CF17 E1 -  -  -  	pop hl
 1174 D1:CF18 22 76 EC D1 	ld (programPtr), hl
 1175 D1:CF1C C9 -  -  -  	ret
 1176 D1:CF1D -  -  -  -  	
 1177 D1:CF1D -  -  -  -  functionCompilePrgm:
 1178 D1:CF1D 21 F8 05 D0 	ld hl, OP1
 1179 D1:CF21 1E 09 -  -  	ld e, 9
 1180 D1:CF23 -  -  -  -  GetSubProgramName:
 1181 D1:CF23 E5 -  -  -  	push hl
 1182 D1:CF24 CD 28 10 02 		call _IncFetch
 1183 D1:CF28 E1 -  -  -  	pop hl
 1184 D1:CF29 23 -  -  -  	inc hl
 1185 D1:CF2A 38 18 -  -  	jr c, +_
 1186 D1:CF2C FE 3F -  -  	cp tEnter
 1187 D1:CF2E 28 14 -  -  	jr z, +_
 1188 D1:CF30 FE 41 -  -  	cp tA
 1189 D1:CF32 DA 1B AF D1 	jp c, InvalidTokenError
 1190 D1:CF36 FE 5C -  -  	cp ttheta+1
 1191 D1:CF38 D2 1B AF D1 	jp nc, InvalidTokenError
 1192 D1:CF3C 77 -  -  -  	ld (hl), a
 1193 D1:CF3D 1D -  -  -  	dec e
 1194 D1:CF3E 20 E3 -  -  	jr nz, GetSubProgramName
 1195 D1:CF40 C3 21 AF D1 	jp InvalidNameLength
 1196 D1:CF44 3E 05 -  -  _:	ld a, ProgObj
 1197 D1:CF46 32 F8 05 D0 	ld (OP1), a
 1198 D1:CF4A 36 00 -  -  	ld (hl), 0
 1199 D1:CF4C CD 0C 05 02 	call _ChkFindSym
 1200 D1:CF50 30 0D -  -  	jr nc, +_
 1201 D1:CF52 21 F8 05 D0 	ld hl, OP1
 1202 D1:CF56 34 -  -  -  	inc (hl)
 1203 D1:CF57 CD 0C 05 02 	call _ChkFindSym
 1204 D1:CF5B DA 27 AF D1 	jp c, ErrorNotFound
 1205 D1:CF5F CD 98 1F 02 _:	call _ChkInRAM
 1206 D1:CF63 30 0A -  -  	jr nc, +_
 1207 D1:CF65 EB -  -  -  	ex de, hl
 1208 D1:CF66 11 09 00 00 	ld de, 9
 1209 D1:CF6A 19 -  -  -  	add hl, de
 1210 D1:CF6B 5E -  -  -  	ld e, (hl)
 1211 D1:CF6C 19 -  -  -  	add hl, de
 1212 D1:CF6D 23 -  -  -  	inc hl
 1213 D1:CF6E EB -  -  -  	ex de, hl
 1214 D1:CF6F 2A F8 05 D0 _:	ld hl, (OP1)
 1215 D1:CF73 E5 -  -  -  	push hl
 1216 D1:CF74 2A FB 05 D0 		ld hl, (OP1+3)
 1217 D1:CF78 E5 -  -  -  		push hl
 1218 D1:CF79 2A FE 05 D0 			ld hl, (OP1+6)
 1219 D1:CF7D E5 -  -  -  			push hl
 1220 D1:CF7E 2A 17 23 D0 				ld hl, (begPC)
 1221 D1:CF82 E5 -  -  -  				push hl
 1222 D1:CF83 2A 1A 23 D0 					ld hl, (curPC)
 1223 D1:CF87 E5 -  -  -  					push hl
 1224 D1:CF88 2A 1D 23 D0 						ld hl, (endPC)
 1225 D1:CF8C E5 -  -  -  						push hl
 1226 D1:CF8D EB -  -  -  							ex de, hl
 1227 D1:CF8E 01 00 00 00 							ld bc, 0
 1228 D1:CF92 4E -  -  -  							ld c, (hl)
 1229 D1:CF93 23 -  -  -  							inc hl
 1230 D1:CF94 22 1A 23 D0 							ld (curPC), hl
 1231 D1:CF98 46 -  -  -  							ld b, (hl)
 1232 D1:CF99 23 -  -  -  							inc hl
 1233 D1:CF9A 22 17 23 D0 							ld (begPC), hl
 1234 D1:CF9E 09 -  -  -  							add hl, bc
 1235 D1:CF9F 2B -  -  -  							dec hl
 1236 D1:CFA0 22 1D 23 D0 							ld (endPC), hl
 1237 D1:CFA4 CD 4F B0 D1 							call PrintCompilingProgram
 1238 D1:CFA8 21 98 EC D1 							ld hl, AmountOfSubPrograms
 1239 D1:CFAC 34 -  -  -  							inc (hl)
 1240 D1:CFAD CD 60 AA D1 							call CompileProgramFull
 1241 D1:CFB1 E1 -  -  -  						pop hl
 1242 D1:CFB2 22 1D 23 D0 						ld (endPC), hl
 1243 D1:CFB6 E1 -  -  -  					pop hl
 1244 D1:CFB7 22 1A 23 D0 					ld (curPC), hl
 1245 D1:CFBB E1 -  -  -  				pop hl
 1246 D1:CFBC 22 17 23 D0 				ld (begPC), hl
 1247 D1:CFC0 E1 -  -  -  			pop hl
 1248 D1:CFC1 22 FE 05 D0 			ld (OP1+6), hl
 1249 D1:CFC5 E1 -  -  -  		pop hl
 1250 D1:CFC6 22 FB 05 D0 		ld (OP1+3), hl
 1251 D1:CFCA E1 -  -  -  	pop hl
 1252 D1:CFCB 22 F8 05 D0 	ld (OP1), hl
 1253 D1:CFCF C3 4F B0 D1 	jp PrintCompilingProgram
Listing for file "ICE.asm"
  462 D1:CFD3 -  -  -  -  #include "operators functions/operators.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operators functions\operators.asm"
    1 D1:CFD3 -  -  -  -  ExecuteOperator:
    2 D1:CFD3 32 20 EA D0 	ld (tempToken2), a
    3 D1:CFD7 B7 -  -  -  	or a
    4 D1:CFD8 CA 2D D0 D1 	jp z, ListElementXXX
    5 D1:CFDC FE 6D -  -  	cp tLE
    6 D1:CFDE CC 13 D8 D1 	call z, SwapLEToGE
    7 D1:CFE2 FE 6B -  -  	cp tLT
    8 D1:CFE4 CC 27 D8 D1 	call z, SwapLTToGT
    9 D1:CFE8 32 1F EA D0 	ld (tempToken), a
   10 D1:CFEC C5 -  -  -  	push bc
   11 D1:CFED 21 C4 EA D1 		ld hl, operators_booleans
   12 D1:CFF1 01 0E 00 00 		ld bc, 14
   13 D1:CFF5 ED B1 -  -  		cpir
   14 D1:CFF7 21 D3 EA D1 		ld hl, operators_special
   15 D1:CFFB 09 -  -  -  		add hl, bc
   16 D1:CFFC 4E -  -  -  		ld c, (hl)
   17 D1:CFFD 79 -  -  -  		ld a, c
   18 D1:CFFE FE 04 -  -  		cp 4
   19 D1:D000 20 04 -  -  		jr nz, +_
   20 D1:D002 FD CB C0 EE 		set ans_set_z_flag, (iy+fExpression1)
   21 D1:D006 06 12 -  -  _:		ld b, 18
   22 D1:D008 ED 4C -  -  		mlt bc
   23 D1:D00A 21 30 EB D1 		ld hl, operator_start											; start of bunch jumps
   24 D1:D00E 09 -  -  -  		add hl, bc														; start of right operator
   25 D1:D00F DD 7E F8 -  		ld a, (ix-8)
   26 D1:D012 4F -  -  -  		ld c, a
   27 D1:D013 FE 06 -  -  		cp 6
   28 D1:D015 D2 05 AF D1 		jp nc, ErrorSyntax
   29 D1:D019 E5 -  -  -  		push hl
   30 D1:D01A 21 97 EC D1 			ld hl, ExprOutput2
   31 D1:D01E 7E -  -  -  			ld a, (hl)
   32 D1:D01F 36 01 -  -  			ld (hl), OutputIsInHL
   33 D1:D021 2B -  -  -  			dec hl
   34 D1:D022 77 -  -  -  			ld (hl), a
   35 D1:D023 E1 -  -  -  		pop hl
   36 D1:D024 06 03 -  -  		ld b, 3
   37 D1:D026 ED 4C -  -  		mlt bc
   38 D1:D028 09 -  -  -  		add hl, bc														; start of right subelement
   39 D1:D029 ED 27 -  -  		ld hl, (hl)
   40 D1:D02B C1 -  -  -  	pop bc
   41 D1:D02C E9 -  -  -  	jp (hl)
   42 D1:D02D -  -  -  -  	
   43 D1:D02D -  -  -  -  ListElementXXX:
   44 D1:D02D DD 7E FC -  	ld a, (ix-4)
   45 D1:D030 B7 -  -  -  	or a
   46 D1:D031 28 0C -  -  	jr z, ListElementNumber
   47 D1:D033 3D -  -  -  	dec a
   48 D1:D034 28 14 -  -  	jr z, ListElementVariable
   49 D1:D036 3D -  -  -  	dec a
   50 D1:D037 28 17 -  -  	jr z, ListElementChainPush
   51 D1:D039 3D -  -  -  	dec a
   52 D1:D03A 28 18 -  -  	jr z, ListElementChainAns
   53 D1:D03C 3D -  -  -  	dec a
   54 D1:D03D 28 31 -  -  	jr z, ListElementFunction
   55 D1:D03F -  -  -  -  ListElementNumber:
   56 D1:D03F 3E 2A -  -  	ld a, 02Ah
   57 D1:D041 C5 -  -  -  	push bc
   58 D1:D042 E1 -  -  -  	pop hl
   59 D1:D043 19 -  -  -  	add hl, de
   60 D1:D044 19 -  -  -  	add hl, de
   61 D1:D045 19 -  -  -  	add hl, de
   62 D1:D046 C3 62 AC D1 	jp InsertAHL															; ld hl, (*)
   63 D1:D04A -  -  -  -  ListElementVariable:
   64 D1:D04A CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
   65 D1:D04E 18 08 -  -  	jr +_
   66 D1:D050 -  -  -  -  ListElementChainPush:
   67 D1:D050 C3 3F AF D1 	jp UnknownError
   68 D1:D054 -  -  -  -  ListElementChainAns:
   69 D1:D054 CD BB AC D1 	call MaybeChangeHLToDE
   70 D1:D058 3E 21 -  -  _:	ld a, 021h
   71 D1:D05A C5 -  -  -  	push bc
   72 D1:D05B D1 -  -  -  	pop de
   73 D1:D05C 21 19 19 19 	ld hl, 0191919h
   74 D1:D060 CD A1 AC D1 	call InsertADEHL														; ld hl, * \ add hl, de \ add hl, de \ add hl, de
   75 D1:D064 3E ED -  -  	ld a, 0EDh
   76 D1:D066 CD AE AC D1 	call InsertA															; ld hl, (hl) (1)
   77 D1:D06A 3E 27 -  -  	ld a, 027h
   78 D1:D06C C3 AE AC D1 	jp InsertA																; ld hl, (hl) (2)
   79 D1:D070 -  -  -  -  ListElementFunction:
   80 D1:D070 7B -  -  -  	ld a, e
   81 D1:D071 06 01 -  -  	ld b, OutputInDE
   82 D1:D073 CD FF AC D1 	call GetFunction
   83 D1:D077 18 DF -  -  	jr -_
   84 D1:D079 -  -  -  -  	
   85 D1:D079 -  -  -  -  SubNumberXXX:
   86 D1:D079 DD 7E FC -  	ld a, (ix-4)
   87 D1:D07C B7 -  -  -  	or a
   88 D1:D07D 28 10 -  -  	jr z, SubNumberNumber
   89 D1:D07F 3D -  -  -  	dec a
   90 D1:D080 28 1A -  -  	jr z, SubNumberVariable
   91 D1:D082 3D -  -  -  	dec a
   92 D1:D083 28 23 -  -  	jr z, SubNumberChainPush
   93 D1:D085 3D -  -  -  	dec a
   94 D1:D086 28 24 -  -  	jr z, SubNumberChainAns
   95 D1:D088 3D -  -  -  	dec a
   96 D1:D089 28 31 -  -  	jr z, SubNumberFunction
   97 D1:D08B C3 96 AE D1 	jp SubError
   98 D1:D08F -  -  -  -  SubNumberNumber:
   99 D1:D08F FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  100 D1:D093 C5 -  -  -  	push bc
  101 D1:D094 E1 -  -  -  	pop hl
  102 D1:D095 B7 -  -  -  	or a
  103 D1:D096 ED 52 -  -  	sbc hl, de
  104 D1:D098 DD 2F F9 -  	ld (ix-7), hl
  105 D1:D09B C9 -  -  -  	ret
  106 D1:D09C -  -  -  -  SubNumberVariable:
  107 D1:D09C 3E 21 -  -  	ld a, 021h
  108 D1:D09E C5 -  -  -  	push bc
  109 D1:D09F E1 -  -  -  	pop hl
  110 D1:D0A0 CD 62 AC D1 	call InsertAHL															; ld hl, *
  111 D1:D0A4 C3 CD D1 D1 	jp SubChainAnsVariable
  112 D1:D0A8 -  -  -  -  SubNumberChainPush:
  113 D1:D0A8 C3 3F AF D1 	jp UnknownError
  114 D1:D0AC -  -  -  -  SubNumberChainAns:
  115 D1:D0AC CD BB AC D1 	call MaybeChangeHLToDE
  116 D1:D0B0 3E 21 -  -  	ld a, 021h
  117 D1:D0B2 C5 -  -  -  	push bc
  118 D1:D0B3 D1 -  -  -  	pop de
  119 D1:D0B4 21 B7 ED 52 	ld hl, 052EDB7h
  120 D1:D0B8 C3 A1 AC D1 	jp InsertADEHL															; ld hl, * \ or a \ sbc hl, de
  121 D1:D0BC -  -  -  -  SubNumberFunction:
  122 D1:D0BC 7B -  -  -  	ld a, e
  123 D1:D0BD C5 -  -  -  	push bc
  124 D1:D0BE 06 01 -  -  		ld b, OutputInDE
  125 D1:D0C0 CD FF AC D1 		call GetFunction
  126 D1:D0C4 3E 21 -  -  		ld a, 021h
  127 D1:D0C6 D1 -  -  -  	pop de
  128 D1:D0C7 21 B7 ED 52 	ld hl, 052EDB7h
  129 D1:D0CB C3 A1 AC D1 	jp InsertADEHL															; ld hl, * \ or a \ sbc hl, de
  130 D1:D0CF -  -  -  -  SubVariableXXX:
  131 D1:D0CF DD 7E FC -  	ld a, (ix-4)
  132 D1:D0D2 B7 -  -  -  	or a
  133 D1:D0D3 28 12 -  -  	jr z, SubVariableNumber
  134 D1:D0D5 3D -  -  -  	dec a
  135 D1:D0D6 28 17 -  -  	jr z, SubVariableVariable
  136 D1:D0D8 3D -  -  -  	dec a
  137 D1:D0D9 28 2E -  -  	jr z, SubVariableChainPush
  138 D1:D0DB 3D -  -  -  	dec a
  139 D1:D0DC 28 2F -  -  	jr z, SubVariableChainAns
  140 D1:D0DE 3D -  -  -  	dec a
  141 D1:D0DF CA 1D D1 D1 	jp z, SubVariableFunction
  142 D1:D0E3 C3 96 AE D1 	jp SubError
  143 D1:D0E7 -  -  -  -  SubVariableNumber:
  144 D1:D0E7 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  145 D1:D0EB C3 8A D1 D1 	jp SubChainAnsNumber
  146 D1:D0EF -  -  -  -  SubVariableVariable:
  147 D1:D0EF 79 -  -  -  	ld a, c
  148 D1:D0F0 BB -  -  -  	cp e
  149 D1:D0F1 20 0E -  -  	jr nz, +_
  150 D1:D0F3 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  151 D1:D0F7 36 00 -  -  	ld (hl), typeNumber
  152 D1:D0F9 11 00 00 00 	ld de, 0
  153 D1:D0FD 23 -  -  -  	inc hl
  154 D1:D0FE ED 1F -  -  	ld (hl), de
  155 D1:D100 C9 -  -  -  	ret
  156 D1:D101 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  157 D1:D105 C3 CD D1 D1 	jp SubChainAnsVariable
  158 D1:D109 -  -  -  -  SubVariableChainPush:
  159 D1:D109 C3 3F AF D1 	jp UnknownError
  160 D1:D10D -  -  -  -  SubVariableChainAns:
  161 D1:D10D CD BB AC D1 	call MaybeChangeHLToDE
  162 D1:D111 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  163 D1:D115 21 B7 ED 52 	ld hl, 052EDB7h
  164 D1:D119 C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, de
  165 D1:D11D -  -  -  -  SubVariableFunction:
  166 D1:D11D 7B -  -  -  	ld a, e
  167 D1:D11E 06 01 -  -  	ld b, OutputInDE
  168 D1:D120 CD FF AC D1 	call GetFunction
  169 D1:D124 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  170 D1:D128 21 B7 ED 52 	ld hl, 052EDB7h
  171 D1:D12C C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, de
  172 D1:D130 -  -  -  -  SubChainPushXXX:
  173 D1:D130 DD 7E FC -  	ld a, (ix-4)
  174 D1:D133 B7 -  -  -  	or a
  175 D1:D134 28 12 -  -  	jr z, SubChainPushNumber
  176 D1:D136 3D -  -  -  	dec a
  177 D1:D137 28 17 -  -  	jr z, SubChainPushVariable
  178 D1:D139 3D -  -  -  	dec a
  179 D1:D13A 28 1C -  -  	jr z, SubChainPushChainPush
  180 D1:D13C 3D -  -  -  	dec a
  181 D1:D13D 28 1D -  -  	jr z, SubChainPushChainAns
  182 D1:D13F 3D -  -  -  	dec a
  183 D1:D140 CA 6A D1 D1 	jp z, SubChainPushFunction
  184 D1:D144 C3 96 AE D1 	jp SubError
  185 D1:D148 -  -  -  -  SubChainPushNumber:
  186 D1:D148 3E E1 -  -  	ld a, 0E1h
  187 D1:D14A CD AE AC D1 	call InsertA															; pop hl
  188 D1:D14E 18 3A -  -  	jr SubChainAnsNumber
  189 D1:D150 -  -  -  -  SubChainPushVariable:
  190 D1:D150 3E E1 -  -  	ld a, 0E1h
  191 D1:D152 CD AE AC D1 	call InsertA															; pop hl
  192 D1:D156 18 75 -  -  	jr SubChainAnsVariable
  193 D1:D158 -  -  -  -  SubChainPushChainPush:
  194 D1:D158 C3 3F AF D1 	jp UnknownError
  195 D1:D15C -  -  -  -  SubChainPushChainAns:
  196 D1:D15C CD BB AC D1 	call MaybeChangeHLToDE
  197 D1:D160 3E E1 -  -  	ld a, 0E1h
  198 D1:D162 21 B7 ED 52 	ld hl, 052EDB7h
  199 D1:D166 C3 62 AC D1 	jp InsertAHL															; pop hl \ or a \ sbc hl, de
  200 D1:D16A -  -  -  -  SubChainPushFunction:
  201 D1:D16A 3E E1 -  -  	ld a, 0E1h
  202 D1:D16C CD AE AC D1 	call InsertA															; pop hl
  203 D1:D170 18 73 -  -  	jr SubChainAnsFunction
  204 D1:D172 -  -  -  -  SubChainAnsXXX:
  205 D1:D172 DD 7E FC -  	ld a, (ix-4)
  206 D1:D175 B7 -  -  -  	or a
  207 D1:D176 28 12 -  -  	jr z, SubChainAnsNumber
  208 D1:D178 3D -  -  -  	dec a
  209 D1:D179 28 52 -  -  	jr z, SubChainAnsVariable
  210 D1:D17B 3D -  -  -  	dec a
  211 D1:D17C 28 5F -  -  	jr z, SubChainAnsChainPush
  212 D1:D17E 3D -  -  -  	dec a
  213 D1:D17F 28 60 -  -  	jr z, SubChainAnsChainAns
  214 D1:D181 3D -  -  -  	dec a
  215 D1:D182 CA E5 D1 D1 	jp z, SubChainAnsFunction
  216 D1:D186 C3 96 AE D1 	jp SubError
  217 D1:D18A -  -  -  -  SubChainAnsNumber:
  218 D1:D18A B7 -  -  -  	or a
  219 D1:D18B ED 62 -  -  	sbc hl, hl
  220 D1:D18D EB -  -  -  	ex de, hl
  221 D1:D18E ED 52 -  -  	sbc hl, de
  222 D1:D190 C8 -  -  -  	ret z
  223 D1:D191 1E 07 -  -  	ld e, 7
  224 D1:D193 ED 52 -  -  	sbc hl, de
  225 D1:D195 30 1C -  -  	jr nc, SubHLDE
  226 D1:D197 19 -  -  -  	add hl, de
  227 D1:D198 45 -  -  -  	ld b, l
  228 D1:D199 3A 96 EC D1 	ld a, (ExprOutput)
  229 D1:D19D B7 -  -  -  	or a
  230 D1:D19E 28 09 -  -  	jr z, ++_
  231 D1:D1A0 3E 2B -  -  	ld a, 02Bh
  232 D1:D1A2 CD AE AC D1 _:	call InsertA															; dec hl/de
  233 D1:D1A6 10 FA -  -  	djnz -_
  234 D1:D1A8 C9 -  -  -  	ret
  235 D1:D1A9 3E 00 -  -  _:	ld a, OutputIsInDE
  236 D1:D1AB 32 97 EC D1 	ld (ExprOutput2), a
  237 D1:D1AF 3E 1B -  -  	ld a, 01Bh
  238 D1:D1B1 18 EF -  -  	jr --_
  239 D1:D1B3 -  -  -  -  SubHLDE:
  240 D1:D1B3 19 -  -  -  	add hl, de
  241 D1:D1B4 CD 60 01 00 	call __ineg
  242 D1:D1B8 3A 96 EC D1 	ld a, (ExprOutput)
  243 D1:D1BC B7 -  -  -  	or a
  244 D1:D1BD 3E 11 -  -  	ld a, 011h
  245 D1:D1BF 20 02 -  -  	jr nz, +_
  246 D1:D1C1 3E 21 -  -  	ld a, 021h
  247 D1:D1C3 CD 62 AC D1 _:	call InsertAHL															; ld hl/de, 16777215-*
  248 D1:D1C7 3E 19 -  -  	ld a, 019h
  249 D1:D1C9 C3 AE AC D1 	jp InsertA																; add hl, de
  250 D1:D1CD -  -  -  -  SubChainAnsVariable:
  251 D1:D1CD CD C7 AC D1 	call MaybeChangeDEToHL
  252 D1:D1D1 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
  253 D1:D1D5 21 B7 ED 52 	ld hl, 052EDB7h
  254 D1:D1D9 C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, de
  255 D1:D1DD -  -  -  -  SubChainAnsChainPush:
  256 D1:D1DD C3 3F AF D1 	jp UnknownError
  257 D1:D1E1 -  -  -  -  SubChainAnsChainAns:
  258 D1:D1E1 C3 3F AF D1 	jp UnknownError
  259 D1:D1E5 -  -  -  -  SubChainAnsFunction:
  260 D1:D1E5 3A 96 EC D1 	ld a, (ExprOutput)
  261 D1:D1E9 87 -  -  -  	add a, a
  262 D1:D1EA 87 -  -  -  	add a, a
  263 D1:D1EB 87 -  -  -  	add a, a
  264 D1:D1EC 87 -  -  -  	add a, a
  265 D1:D1ED C6 D5 -  -  	add a, 0D5h
  266 D1:D1EF CD AE AC D1 	call InsertA															; push hl/de
  267 D1:D1F3 7B -  -  -  	ld a, e
  268 D1:D1F4 06 01 -  -  	ld b, OutputInDE
  269 D1:D1F6 CD FF AC D1 	call GetFunction
  270 D1:D1FA 3E E1 -  -  	ld a, 0E1h
  271 D1:D1FC 21 B7 ED 52 	ld hl, 052EDB7h
  272 D1:D200 C3 62 AC D1 	jp InsertAHL															; pop hl \ or a \ sbc hl, de
  273 D1:D204 -  -  -  -  SubFunctionXXX:
  274 D1:D204 DD 7E FC -  	ld a, (ix-4)
  275 D1:D207 B7 -  -  -  	or a
  276 D1:D208 28 10 -  -  	jr z, SubFunctionNumber
  277 D1:D20A 3D -  -  -  	dec a
  278 D1:D20B 28 18 -  -  	jr z, SubFunctionVariable
  279 D1:D20D 3D -  -  -  	dec a
  280 D1:D20E 28 20 -  -  	jr z, SubFunctionChainPush
  281 D1:D210 3D -  -  -  	dec a
  282 D1:D211 28 21 -  -  	jr z, SubFunctionChainAns
  283 D1:D213 3D -  -  -  	dec a
  284 D1:D214 28 3D -  -  	jr z, SubFunctionFunction
  285 D1:D216 C3 96 AE D1 	jp SubError
  286 D1:D21A -  -  -  -  SubFunctionNumber:
  287 D1:D21A 79 -  -  -  	ld a, c
  288 D1:D21B 06 02 -  -  	ld b, OutputInHL
  289 D1:D21D CD FF AC D1 	call GetFunction
  290 D1:D221 C3 8A D1 D1 	jp SubChainAnsNumber
  291 D1:D225 -  -  -  -  SubFunctionVariable:
  292 D1:D225 79 -  -  -  	ld a, c
  293 D1:D226 06 02 -  -  	ld b, OutputInHL
  294 D1:D228 CD FF AC D1 	call GetFunction
  295 D1:D22C C3 CD D1 D1 	jp SubChainAnsVariable
  296 D1:D230 -  -  -  -  SubFunctionChainPush:
  297 D1:D230 C3 3F AF D1 	jp UnknownError
  298 D1:D234 -  -  -  -  SubFunctionChainAns:
  299 D1:D234 3A 96 EC D1 	ld a, (ExprOutput)
  300 D1:D238 87 -  -  -  	add a, a
  301 D1:D239 87 -  -  -  	add a, a
  302 D1:D23A 87 -  -  -  	add a, a
  303 D1:D23B 87 -  -  -  	add a, a
  304 D1:D23C C6 D5 -  -  	add a, 0D5h
  305 D1:D23E CD AE AC D1 	call InsertA															; push hl/de
  306 D1:D242 79 -  -  -  	ld a, c
  307 D1:D243 06 02 -  -  	ld b, OutputInHL
  308 D1:D245 CD FF AC D1 	call GetFunction
  309 D1:D249 3E E1 -  -  	ld a, 0E1h
  310 D1:D24B 21 B7 ED 52 	ld hl, 052EDB7h
  311 D1:D24F C3 62 AC D1 	jp InsertAHL															; pop de \ or a \ sbc hl, de
  312 D1:D253 -  -  -  -  SubFunctionFunction:
  313 D1:D253 7B -  -  -  	ld a, e
  314 D1:D254 06 02 -  -  	ld b, OutputInHL
  315 D1:D256 CD FF AC D1 	call GetFunction
  316 D1:D25A 79 -  -  -  	ld a, c
  317 D1:D25B 06 01 -  -  	ld b, OutputInDE
  318 D1:D25D FD CB C0 F6 	set need_push, (iy+fExpression1)
  319 D1:D261 CD FF AC D1 	call GetFunction
  320 D1:D265 21 B7 ED 52 	ld hl, 052EDB7h
  321 D1:D269 C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, de
  322 D1:D26D -  -  -  -  
  323 D1:D26D -  -  -  -  AddNumberXXX:
  324 D1:D26D DD 7E FC -  	ld a, (ix-4)
  325 D1:D270 B7 -  -  -  	or a
  326 D1:D271 28 10 -  -  	jr z, AddNumberNumber
  327 D1:D273 3D -  -  -  	dec a
  328 D1:D274 28 17 -  -  	jr z, AddNumberVariable
  329 D1:D276 3D -  -  -  	dec a
  330 D1:D277 28 1B -  -  	jr z, AddNumberChainPush
  331 D1:D279 3D -  -  -  	dec a
  332 D1:D27A 28 1C -  -  	jr z, AddNumberChainAns
  333 D1:D27C 3D -  -  -  	dec a
  334 D1:D27D 28 1F -  -  	jr z, AddNumberFunction
  335 D1:D27F C3 9A AE D1 	jp AddError
  336 D1:D283 -  -  -  -  AddNumberNumber:
  337 D1:D283 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  338 D1:D287 EB -  -  -  	ex de, hl
  339 D1:D288 09 -  -  -  	add hl, bc
  340 D1:D289 DD 2F F9 -  	ld (ix-7), hl
  341 D1:D28C C9 -  -  -  	ret
  342 D1:D28D -  -  -  -  AddNumberVariable:
  343 D1:D28D C5 -  -  -  	push bc
  344 D1:D28E E1 -  -  -  	pop hl
  345 D1:D28F EB -  -  -  	ex de, hl
  346 D1:D290 E5 -  -  -  	push hl
  347 D1:D291 C1 -  -  -  	pop bc
  348 D1:D292 18 2B -  -  	jr AddVariableNumber
  349 D1:D294 -  -  -  -  AddNumberChainPush:
  350 D1:D294 C3 3F AF D1 	jp UnknownError
  351 D1:D298 -  -  -  -  AddNumberChainAns:
  352 D1:D298 C5 -  -  -  	push bc
  353 D1:D299 D1 -  -  -  	pop de
  354 D1:D29A C3 52 D3 D1 	jp AddChainAnsNumber
  355 D1:D29E -  -  -  -  AddNumberFunction:
  356 D1:D29E C5 -  -  -  	push bc
  357 D1:D29F E1 -  -  -  	pop hl
  358 D1:D2A0 EB -  -  -  	ex de, hl
  359 D1:D2A1 E5 -  -  -  	push hl
  360 D1:D2A2 C1 -  -  -  	pop bc
  361 D1:D2A3 C3 F0 D3 D1 	jp AddFunctionNumber
  362 D1:D2A7 -  -  -  -  AddVariableXXX:
  363 D1:D2A7 DD 7E FC -  	ld a, (ix-4)
  364 D1:D2AA B7 -  -  -  	or a
  365 D1:D2AB 28 12 -  -  	jr z, AddVariableNumber
  366 D1:D2AD 3D -  -  -  	dec a
  367 D1:D2AE 28 17 -  -  	jr z, AddVariableVariable
  368 D1:D2B0 3D -  -  -  	dec a
  369 D1:D2B1 28 1C -  -  	jr z, AddVariableChainPush
  370 D1:D2B3 3D -  -  -  	dec a
  371 D1:D2B4 28 24 -  -  	jr z, AddVariableChainAns
  372 D1:D2B6 3D -  -  -  	dec a
  373 D1:D2B7 CA DF D2 D1 	jp z, AddVariableFunction
  374 D1:D2BB C3 9A AE D1 	jp AddError
  375 D1:D2BF -  -  -  -  AddVariableNumber:
  376 D1:D2BF CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  377 D1:D2C3 C3 52 D3 D1 	jp AddChainAnsNumber
  378 D1:D2C7 -  -  -  -  AddVariableVariable:
  379 D1:D2C7 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  380 D1:D2CB C3 91 D3 D1 	jp AddChainAnsVariable
  381 D1:D2CF -  -  -  -  AddVariableChainPush:
  382 D1:D2CF 3E E1 -  -  	ld a, 0E1h
  383 D1:D2D1 CD AE AC D1 	call InsertA															; pop hl
  384 D1:D2D5 59 -  -  -  	ld e, c
  385 D1:D2D6 C3 91 D3 D1 	jp AddChainAnsVariable
  386 D1:D2DA -  -  -  -  AddVariableChainAns:
  387 D1:D2DA 59 -  -  -  	ld e, c
  388 D1:D2DB C3 91 D3 D1 	jp AddChainAnsVariable
  389 D1:D2DF -  -  -  -  AddVariableFunction:
  390 D1:D2DF 7B -  -  -  	ld a, e
  391 D1:D2E0 06 02 -  -  	ld b, OutputInHL
  392 D1:D2E2 CD FF AC D1 	call GetFunction
  393 D1:D2E6 59 -  -  -  	ld e, c
  394 D1:D2E7 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
  395 D1:D2EB 3E 19 -  -  	ld a, 019h
  396 D1:D2ED C3 AE AC D1 	jp InsertA																; add hl, de
  397 D1:D2F1 -  -  -  -  AddChainPushXXX:
  398 D1:D2F1 DD 7E FC -  	ld a, (ix-4)
  399 D1:D2F4 B7 -  -  -  	or a
  400 D1:D2F5 28 12 -  -  	jr z, AddChainPushNumber
  401 D1:D2F7 3D -  -  -  	dec a
  402 D1:D2F8 28 17 -  -  	jr z, AddChainPushVariable
  403 D1:D2FA 3D -  -  -  	dec a
  404 D1:D2FB 28 1C -  -  	jr z, AddChainPushChainPush
  405 D1:D2FD 3D -  -  -  	dec a
  406 D1:D2FE 28 1D -  -  	jr z, AddChainPushChainAns
  407 D1:D300 3D -  -  -  	dec a
  408 D1:D301 CA 32 D3 D1 	jp z, AddChainPushFunction
  409 D1:D305 C3 9A AE D1 	jp AddError
  410 D1:D309 -  -  -  -  AddChainPushNumber:
  411 D1:D309 3E E1 -  -  	ld a, 0E1h
  412 D1:D30B CD AE AC D1 	call InsertA															; pop hl
  413 D1:D30F 18 41 -  -  	jr AddChainAnsNumber
  414 D1:D311 -  -  -  -  AddChainPushVariable:
  415 D1:D311 3E E1 -  -  	ld a, 0E1h
  416 D1:D313 CD AE AC D1 	call InsertA															; pop hl
  417 D1:D317 18 78 -  -  	jr AddChainAnsVariable
  418 D1:D319 -  -  -  -  AddChainPushChainPush:
  419 D1:D319 C3 3F AF D1 	jp UnknownError
  420 D1:D31D -  -  -  -  AddChainPushChainAns:
  421 D1:D31D 3A 96 EC D1 	ld a, (ExprOutput)
  422 D1:D321 B7 -  -  -  	or a
  423 D1:D322 3E D1 -  -  	ld a, 0D1h
  424 D1:D324 20 02 -  -  	jr nz, +_
  425 D1:D326 3E E1 -  -  	ld a, 0E1h
  426 D1:D328 CD AE AC D1 _:	call InsertA															; pop hl/de
  427 D1:D32C 3E 19 -  -  	ld a, 019h
  428 D1:D32E C3 AE AC D1 	jp InsertA																; add hl, de
  429 D1:D332 -  -  -  -  AddChainPushFunction:
  430 D1:D332 3E E1 -  -  	ld a, 0E1h
  431 D1:D334 CD AE AC D1 	call InsertA															; pop hl
  432 D1:D338 18 7F -  -  	jr AddChainAnsFunction
  433 D1:D33A -  -  -  -  AddChainAnsXXX:
  434 D1:D33A DD 7E FC -  	ld a, (ix-4)
  435 D1:D33D B7 -  -  -  	or a
  436 D1:D33E 28 12 -  -  	jr z, AddChainAnsNumber
  437 D1:D340 3D -  -  -  	dec a
  438 D1:D341 28 4E -  -  	jr z, AddChainAnsVariable
  439 D1:D343 3D -  -  -  	dec a
  440 D1:D344 28 6B -  -  	jr z, AddChainAnsChainPush
  441 D1:D346 3D -  -  -  	dec a
  442 D1:D347 28 6C -  -  	jr z, AddChainAnsChainAns
  443 D1:D349 3D -  -  -  	dec a
  444 D1:D34A CA B9 D3 D1 	jp z, AddChainAnsFunction
  445 D1:D34E C3 9A AE D1 	jp AddError
  446 D1:D352 -  -  -  -  AddChainAnsNumber:
  447 D1:D352 B7 -  -  -  	or a
  448 D1:D353 ED 62 -  -  	sbc hl, hl
  449 D1:D355 EB -  -  -  	ex de, hl
  450 D1:D356 ED 52 -  -  	sbc hl, de
  451 D1:D358 C8 -  -  -  	ret z
  452 D1:D359 1E 06 -  -  	ld e, 6
  453 D1:D35B ED 52 -  -  	sbc hl, de
  454 D1:D35D 30 1C -  -  	jr nc, AddHLDE
  455 D1:D35F 19 -  -  -  	add hl, de
  456 D1:D360 45 -  -  -  	ld b, l
  457 D1:D361 3A 96 EC D1 	ld a, (ExprOutput)
  458 D1:D365 B7 -  -  -  	or a
  459 D1:D366 28 09 -  -  	jr z, ++_
  460 D1:D368 3E 23 -  -  	ld a, 023h
  461 D1:D36A CD AE AC D1 _:	call InsertA															; inc hl/de
  462 D1:D36E 10 FA -  -  	djnz -_
  463 D1:D370 C9 -  -  -  	ret
  464 D1:D371 3E 00 -  -  _:	ld a, OutputIsInDE
  465 D1:D373 32 97 EC D1 	ld (ExprOutput2), a
  466 D1:D377 3E 13 -  -  	ld a, 013h
  467 D1:D379 18 EF -  -  	jr --_
  468 D1:D37B -  -  -  -  AddHLDE:
  469 D1:D37B 19 -  -  -  	add hl, de
  470 D1:D37C 3A 96 EC D1 	ld a, (ExprOutput)
  471 D1:D380 B7 -  -  -  	or a
  472 D1:D381 3E 11 -  -  	ld a, 011h
  473 D1:D383 20 02 -  -  	jr nz, +_
  474 D1:D385 3E 21 -  -  	ld a, 021h
  475 D1:D387 CD 62 AC D1 _:	call InsertAHL															; ld hl/de, *
  476 D1:D38B 3E 19 -  -  	ld a, 019h
  477 D1:D38D C3 AE AC D1 	jp InsertA																; add hl, de
  478 D1:D391 -  -  -  -  AddChainAnsVariable:
  479 D1:D391 26 17 -  -  	ld h, 017h
  480 D1:D393 16 03 -  -  	ld d, 3
  481 D1:D395 ED 5C -  -  	mlt de
  482 D1:D397 7B -  -  -  	ld a, e
  483 D1:D398 2E DD -  -  	ld l, 0DDh
  484 D1:D39A CD 70 1D 02 	call _SetHLUToA
  485 D1:D39E 3A 96 EC D1 	ld a, (ExprOutput)
  486 D1:D3A2 B7 -  -  -  	or a
  487 D1:D3A3 20 02 -  -  	jr nz, +_
  488 D1:D3A5 26 27 -  -  	ld h, 027h
  489 D1:D3A7 CD 66 AC D1 _:	call InsertHL															; ld hl/de, (ix+*)
  490 D1:D3AB 3E 19 -  -  	ld a, 019h
  491 D1:D3AD C3 AE AC D1 	jp InsertA																; add hl, de
  492 D1:D3B1 -  -  -  -  AddChainAnsChainPush:
  493 D1:D3B1 C3 3F AF D1 	jp UnknownError
  494 D1:D3B5 -  -  -  -  AddChainAnsChainAns:
  495 D1:D3B5 C3 3F AF D1 	jp UnknownError
  496 D1:D3B9 -  -  -  -  AddChainAnsFunction:
  497 D1:D3B9 3A 96 EC D1 	ld a, (ExprOutput)
  498 D1:D3BD 87 -  -  -  	add a, a
  499 D1:D3BE 87 -  -  -  	add a, a
  500 D1:D3BF 87 -  -  -  	add a, a
  501 D1:D3C0 87 -  -  -  	add a, a
  502 D1:D3C1 C6 D5 -  -  	add a, 0D5h
  503 D1:D3C3 CD AE AC D1 	call InsertA															; push hl/de
  504 D1:D3C7 7B -  -  -  	ld a, e
  505 D1:D3C8 06 02 -  -  	ld b, OutputInHL
  506 D1:D3CA CD FF AC D1 	call GetFunction
  507 D1:D3CE 3E D1 -  -  	ld a, 0D1h
  508 D1:D3D0 CD AE AC D1 	call InsertA															; pop de
  509 D1:D3D4 3E 19 -  -  	ld a, 019h
  510 D1:D3D6 C3 AE AC D1 	jp InsertA																; add hl, de
  511 D1:D3DA -  -  -  -  AddFunctionXXX:
  512 D1:D3DA DD 7E FC -  	ld a, (ix-4)
  513 D1:D3DD B7 -  -  -  	or a
  514 D1:D3DE 28 10 -  -  	jr z, AddFunctionNumber
  515 D1:D3E0 3D -  -  -  	dec a
  516 D1:D3E1 28 18 -  -  	jr z, AddFunctionVariable
  517 D1:D3E3 3D -  -  -  	dec a
  518 D1:D3E4 28 20 -  -  	jr z, AddFunctionChainPush
  519 D1:D3E6 3D -  -  -  	dec a
  520 D1:D3E7 28 21 -  -  	jr z, AddFunctionChainAns
  521 D1:D3E9 3D -  -  -  	dec a
  522 D1:D3EA 28 3F -  -  	jr z, AddFunctionFunction
  523 D1:D3EC C3 9A AE D1 	jp AddError
  524 D1:D3F0 -  -  -  -  AddFunctionNumber:
  525 D1:D3F0 79 -  -  -  	ld a, c
  526 D1:D3F1 06 02 -  -  	ld b, OutputInHL
  527 D1:D3F3 CD FF AC D1 	call GetFunction
  528 D1:D3F7 C3 52 D3 D1 	jp AddChainAnsNumber
  529 D1:D3FB -  -  -  -  AddFunctionVariable:
  530 D1:D3FB 79 -  -  -  	ld a, c
  531 D1:D3FC 06 02 -  -  	ld b, OutputInHL
  532 D1:D3FE CD FF AC D1 	call GetFunction
  533 D1:D402 C3 91 D3 D1 	jp AddChainAnsVariable
  534 D1:D406 -  -  -  -  AddFunctionChainPush:
  535 D1:D406 C3 3F AF D1 	jp UnknownError
  536 D1:D40A -  -  -  -  AddFunctionChainAns:
  537 D1:D40A 3A 96 EC D1 	ld a, (ExprOutput)
  538 D1:D40E 87 -  -  -  	add a, a
  539 D1:D40F 87 -  -  -  	add a, a
  540 D1:D410 87 -  -  -  	add a, a
  541 D1:D411 87 -  -  -  	add a, a
  542 D1:D412 C6 D5 -  -  	add a, 0D5h
  543 D1:D414 CD AE AC D1 	call InsertA															; push hl/de
  544 D1:D418 79 -  -  -  	ld a, c
  545 D1:D419 06 02 -  -  	ld b, OutputInHL
  546 D1:D41B CD FF AC D1 	call GetFunction
  547 D1:D41F 3E D1 -  -  	ld a, 0D1h
  548 D1:D421 CD AE AC D1 	call InsertA															; pop de
  549 D1:D425 3E 19 -  -  	ld a, 019h
  550 D1:D427 C3 AE AC D1 	jp InsertA																; add hl, de
  551 D1:D42B -  -  -  -  AddFunctionFunction:
  552 D1:D42B 7B -  -  -  	ld a, e
  553 D1:D42C 06 02 -  -  	ld b, OutputInHL
  554 D1:D42E CD FF AC D1 	call GetFunction
  555 D1:D432 79 -  -  -  	ld a, c
  556 D1:D433 06 01 -  -  	ld b, OutputInDE
  557 D1:D435 FD CB C0 F6 	set need_push, (iy+fExpression1)
  558 D1:D439 CD FF AC D1 	call GetFunction
  559 D1:D43D 3E 19 -  -  	ld a, 019h
  560 D1:D43F C3 AE AC D1 	jp InsertA																; add hl, de
  561 D1:D443 -  -  -  -  	
  562 D1:D443 -  -  -  -  DivNumberXXX:
  563 D1:D443 DD 7E FC -  	ld a, (ix-4)
  564 D1:D446 B7 -  -  -  	or a
  565 D1:D447 28 10 -  -  	jr z, DivNumberNumber
  566 D1:D449 3D -  -  -  	dec a
  567 D1:D44A 28 1D -  -  	jr z, DivNumberVariable
  568 D1:D44C 3D -  -  -  	dec a
  569 D1:D44D 28 26 -  -  	jr z, DivNumberChainPush
  570 D1:D44F 3D -  -  -  	dec a
  571 D1:D450 28 27 -  -  	jr z, DivNumberChainAns
  572 D1:D452 3D -  -  -  	dec a
  573 D1:D453 28 39 -  -  	jr z, DivNumberFunction
  574 D1:D455 C3 9E AE D1 	jp DivError
  575 D1:D459 -  -  -  -  DivNumberNumber:
  576 D1:D459 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  577 D1:D45D C5 -  -  -  	push bc
  578 D1:D45E E1 -  -  -  	pop hl
  579 D1:D45F D5 -  -  -  	push de
  580 D1:D460 C1 -  -  -  	pop bc
  581 D1:D461 CD 44 01 00 	call __idvrmu
  582 D1:D465 DD 1F F9 -  	ld (ix-7), de
  583 D1:D468 C9 -  -  -  	ret
  584 D1:D469 -  -  -  -  DivNumberVariable:
  585 D1:D469 3E 21 -  -  	ld a, 021h
  586 D1:D46B C5 -  -  -  	push bc
  587 D1:D46C E1 -  -  -  	pop hl
  588 D1:D46D CD 62 AC D1 	call InsertAHL															; ld hl, *
  589 D1:D471 C3 A1 D5 D1 	jp DivChainAnsVariable
  590 D1:D475 -  -  -  -  DivNumberChainPush:
  591 D1:D475 C3 3F AF D1 	jp UnknownError
  592 D1:D479 -  -  -  -  DivNumberChainAns:
  593 D1:D479 11 E5 C1 21 	ld de, 021C1E5h
  594 D1:D47D C5 -  -  -  	push bc
  595 D1:D47E E1 -  -  -  	pop hl
  596 D1:D47F 3A 96 EC D1 	ld a, (ExprOutput)
  597 D1:D483 B7 -  -  -  	or a
  598 D1:D484 20 02 -  -  	jr nz, +_
  599 D1:D486 1E D5 -  -  	ld e, 0D5h
  600 D1:D488 CD A5 AC D1 _:	call InsertDEHL															; push hl/de \ pop bc \ ld hl, *
  601 D1:D48C 18 74 -  -  	jr DivInsert
  602 D1:D48E -  -  -  -  DivNumberFunction:
  603 D1:D48E 7B -  -  -  	ld a, e
  604 D1:D48F C5 -  -  -  	push bc
  605 D1:D490 06 00 -  -  		ld b, OutputInBC
  606 D1:D492 CD FF AC D1 		call GetFunction
  607 D1:D496 3E 21 -  -  		ld a, 021h
  608 D1:D498 E1 -  -  -  	pop hl
  609 D1:D499 CD 62 AC D1 	call InsertAHL															; ld hl, *
  610 D1:D49D 18 63 -  -  	jr DivInsert
  611 D1:D49F -  -  -  -  DivVariableXXX:
  612 D1:D49F DD 7E FC -  	ld a, (ix-4)
  613 D1:D4A2 B7 -  -  -  	or a
  614 D1:D4A3 28 12 -  -  	jr z, DivVariableNumber
  615 D1:D4A5 3D -  -  -  	dec a
  616 D1:D4A6 28 17 -  -  	jr z, DivVariableVariable
  617 D1:D4A8 3D -  -  -  	dec a
  618 D1:D4A9 28 2E -  -  	jr z, DivVariableChainPush
  619 D1:D4AB 3D -  -  -  	dec a
  620 D1:D4AC 28 2F -  -  	jr z, DivVariableChainAns
  621 D1:D4AE 3D -  -  -  	dec a
  622 D1:D4AF CA F7 D4 D1 	jp z, DivVariableFunction
  623 D1:D4B3 C3 9E AE D1 	jp DivError
  624 D1:D4B7 -  -  -  -  DivVariableNumber:
  625 D1:D4B7 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  626 D1:D4BB C3 73 D5 D1 	jp DivChainAnsNumber
  627 D1:D4BF -  -  -  -  DivVariableVariable:
  628 D1:D4BF 79 -  -  -  	ld a, c
  629 D1:D4C0 BB -  -  -  	cp e
  630 D1:D4C1 20 0E -  -  	jr nz, +_
  631 D1:D4C3 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  632 D1:D4C7 36 00 -  -  	ld (hl), typeNumber
  633 D1:D4C9 11 01 00 00 	ld de, 1
  634 D1:D4CD 23 -  -  -  	inc hl
  635 D1:D4CE ED 1F -  -  	ld (hl), de
  636 D1:D4D0 C9 -  -  -  	ret
  637 D1:D4D1 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
  638 D1:D4D5 C3 A1 D5 D1 	jp DivChainAnsVariable
  639 D1:D4D9 -  -  -  -  DivVariableChainPush:
  640 D1:D4D9 C3 3F AF D1 	jp UnknownError
  641 D1:D4DD -  -  -  -  DivVariableChainAns:
  642 D1:D4DD 3A 96 EC D1 	ld a, (ExprOutput)
  643 D1:D4E1 87 -  -  -  	add a, a
  644 D1:D4E2 87 -  -  -  	add a, a
  645 D1:D4E3 87 -  -  -  	add a, a
  646 D1:D4E4 87 -  -  -  	add a, a
  647 D1:D4E5 C6 D5 -  -  	add a, 0D5h
  648 D1:D4E7 CD AE AC D1 	call InsertA															; push hl/de
  649 D1:D4EB 3E C1 -  -  	ld a, 0C1h
  650 D1:D4ED CD AE AC D1 	call InsertA															; pop bc
  651 D1:D4F1 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  652 D1:D4F5 18 0B -  -  	jr DivInsert
  653 D1:D4F7 -  -  -  -  DivVariableFunction:
  654 D1:D4F7 7B -  -  -  	ld a, e
  655 D1:D4F8 06 00 -  -  	ld b, OutputInBC
  656 D1:D4FA CD FF AC D1 	call GetFunction
  657 D1:D4FE CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  658 D1:D502 -  -  -  -  DivInsert:
  659 D1:D502 3E 00 -  -  	ld a, OutputIsInDE
  660 D1:D504 32 97 EC D1 	ld (ExprOutput2), a
  661 D1:D508 3E CD -  -  	ld a, 0CDh
  662 D1:D50A 21 44 01 00 	ld hl, __idvrmu
  663 D1:D50E C3 62 AC D1 	jp InsertAHL															; call __idvrmu
  664 D1:D512 -  -  -  -  DivChainPushXXX:
  665 D1:D512 DD 7E FC -  	ld a, (ix-4)
  666 D1:D515 B7 -  -  -  	or a
  667 D1:D516 28 12 -  -  	jr z, DivChainPushNumber
  668 D1:D518 3D -  -  -  	dec a
  669 D1:D519 28 17 -  -  	jr z, DivChainPushVariable
  670 D1:D51B 3D -  -  -  	dec a
  671 D1:D51C 28 1C -  -  	jr z, DivChainPushChainPush
  672 D1:D51E 3D -  -  -  	dec a
  673 D1:D51F 28 1D -  -  	jr z, DivChainPushChainAns
  674 D1:D521 3D -  -  -  	dec a
  675 D1:D522 CA 53 D5 D1 	jp z, DivChainPushFunction
  676 D1:D526 C3 9E AE D1 	jp DivError
  677 D1:D52A -  -  -  -  DivChainPushNumber:
  678 D1:D52A 3E E1 -  -  	ld a, 0E1h
  679 D1:D52C CD AE AC D1 	call InsertA															; pop hl
  680 D1:D530 18 41 -  -  	jr DivChainAnsNumber
  681 D1:D532 -  -  -  -  DivChainPushVariable:
  682 D1:D532 3E E1 -  -  	ld a, 0E1h
  683 D1:D534 CD AE AC D1 	call InsertA															; pop hl
  684 D1:D538 18 67 -  -  	jr DivChainAnsVariable
  685 D1:D53A -  -  -  -  DivChainPushChainPush:
  686 D1:D53A C3 3F AF D1 	jp UnknownError
  687 D1:D53E -  -  -  -  DivChainPushChainAns:
  688 D1:D53E 21 E5 C1 E1 	ld hl, 0E1C1E5h
  689 D1:D542 3A 96 EC D1 	ld a, (ExprOutput)
  690 D1:D546 87 -  -  -  	add a, a
  691 D1:D547 87 -  -  -  	add a, a
  692 D1:D548 87 -  -  -  	add a, a
  693 D1:D549 87 -  -  -  	add a, a
  694 D1:D54A C6 D5 -  -  	add a, 0D5h
  695 D1:D54C 6F -  -  -  	ld l, a
  696 D1:D54D CD 66 AC D1 	call InsertHL															; push hl/de \ pop bc \ pop hl
  697 D1:D551 18 AF -  -  _:	jr DivInsert
  698 D1:D553 -  -  -  -  DivChainPushFunction:
  699 D1:D553 3E E1 -  -  	ld a, 0E1h
  700 D1:D555 CD AE AC D1 	call InsertA															; pop hl
  701 D1:D559 18 58 -  -  	jr DivChainAnsFunction
  702 D1:D55B -  -  -  -  DivChainAnsXXX:
  703 D1:D55B DD 7E FC -  	ld a, (ix-4)
  704 D1:D55E B7 -  -  -  	or a
  705 D1:D55F 28 12 -  -  	jr z, DivChainAnsNumber
  706 D1:D561 3D -  -  -  	dec a
  707 D1:D562 28 3D -  -  	jr z, DivChainAnsVariable
  708 D1:D564 3D -  -  -  	dec a
  709 D1:D565 28 44 -  -  	jr z, DivChainAnsChainPush
  710 D1:D567 3D -  -  -  	dec a
  711 D1:D568 28 45 -  -  	jr z, DivChainAnsChainAns
  712 D1:D56A 3D -  -  -  	dec a
  713 D1:D56B CA B3 D5 D1 	jp z, DivChainAnsFunction
  714 D1:D56F C3 9E AE D1 	jp DivError
  715 D1:D573 -  -  -  -  DivChainAnsNumber:
  716 D1:D573 CD C7 AC D1 	call MaybeChangeDEToHL
  717 D1:D577 3E 01 -  -  	ld a, 001h
  718 D1:D579 EB -  -  -  	ex de, hl
  719 D1:D57A 11 00 01 00 	ld de, 256
  720 D1:D57E B7 -  -  -  	or a
  721 D1:D57F ED 52 -  -  	sbc hl, de
  722 D1:D581 30 17 -  -  	jr nc, +_
  723 D1:D583 19 -  -  -  	add hl, de
  724 D1:D584 4D -  -  -  	ld c, l
  725 D1:D585 3E 3E -  -  	ld a, 03Eh
  726 D1:D587 CD AE AC D1 	call InsertA															; ld a, *
  727 D1:D58B 79 -  -  -  	ld a, c
  728 D1:D58C CD AE AC D1 	call InsertA															; ld a, *
  729 D1:D590 3E CD -  -  	ld a, 0CDh
  730 D1:D592 21 90 1D 02 	ld hl, _DivHLByA
  731 D1:D596 C3 62 AC D1 	jp InsertAHL															; call _DivHLByA
  732 D1:D59A 19 -  -  -  _:	add hl, de
  733 D1:D59B CD 62 AC D1 	call InsertAHL															; ld bc, *
  734 D1:D59F 18 B0 -  -  _:	jr ---_
  735 D1:D5A1 -  -  -  -  DivChainAnsVariable:
  736 D1:D5A1 CD C7 AC D1 	call MaybeChangeDEToHL
  737 D1:D5A5 CD 93 AC D1 	call InsertIXC
  738 D1:D5A9 18 F4 -  -  	jr -_
  739 D1:D5AB -  -  -  -  DivChainAnsChainPush:
  740 D1:D5AB C3 3F AF D1 	jp UnknownError
  741 D1:D5AF -  -  -  -  DivChainAnsChainAns:
  742 D1:D5AF C3 3F AF D1 	jp UnknownError
  743 D1:D5B3 -  -  -  -  DivChainAnsFunction:
  744 D1:D5B3 3A 96 EC D1 	ld a, (ExprOutput)
  745 D1:D5B7 87 -  -  -  	add a, a
  746 D1:D5B8 87 -  -  -  	add a, a
  747 D1:D5B9 87 -  -  -  	add a, a
  748 D1:D5BA 87 -  -  -  	add a, a
  749 D1:D5BB C6 D5 -  -  	add a, 0D5h
  750 D1:D5BD CD AE AC D1 	call InsertA															; push hl/de
  751 D1:D5C1 7B -  -  -  	ld a, e
  752 D1:D5C2 06 00 -  -  	ld b, OutputInBC
  753 D1:D5C4 CD FF AC D1 	call GetFunction
  754 D1:D5C8 3E E1 -  -  	ld a, 0E1h
  755 D1:D5CA CD AE AC D1 	call InsertA															; pop hl
  756 D1:D5CE 18 CF -  -  _:	jr --_
  757 D1:D5D0 -  -  -  -  DivFunctionXXX:
  758 D1:D5D0 DD 7E FC -  	ld a, (ix-4)
  759 D1:D5D3 B7 -  -  -  	or a
  760 D1:D5D4 28 10 -  -  	jr z, DivFunctionNumber
  761 D1:D5D6 3D -  -  -  	dec a
  762 D1:D5D7 28 18 -  -  	jr z, DivFunctionVariable
  763 D1:D5D9 3D -  -  -  	dec a
  764 D1:D5DA 28 20 -  -  	jr z, DivFunctionChainPush
  765 D1:D5DC 3D -  -  -  	dec a
  766 D1:D5DD 28 21 -  -  	jr z, DivFunctionChainAns
  767 D1:D5DF 3D -  -  -  	dec a
  768 D1:D5E0 28 3B -  -  	jr z, DivFunctionFunction
  769 D1:D5E2 C3 9E AE D1 	jp DivError
  770 D1:D5E6 -  -  -  -  DivFunctionNumber:
  771 D1:D5E6 79 -  -  -  	ld a, c
  772 D1:D5E7 06 02 -  -  	ld b, OutputInHL
  773 D1:D5E9 CD FF AC D1 	call GetFunction
  774 D1:D5ED C3 73 D5 D1 	jp DivChainAnsNumber
  775 D1:D5F1 -  -  -  -  DivFunctionVariable:
  776 D1:D5F1 79 -  -  -  	ld a, c
  777 D1:D5F2 06 02 -  -  	ld b, OutputInHL
  778 D1:D5F4 CD FF AC D1 	call GetFunction
  779 D1:D5F8 C3 A1 D5 D1 	jp DivChainAnsVariable
  780 D1:D5FC -  -  -  -  DivFunctionChainPush:
  781 D1:D5FC C3 3F AF D1 	jp UnknownError
  782 D1:D600 -  -  -  -  DivFunctionChainAns:
  783 D1:D600 3A 96 EC D1 	ld a, (ExprOutput)
  784 D1:D604 87 -  -  -  	add a, a
  785 D1:D605 87 -  -  -  	add a, a
  786 D1:D606 87 -  -  -  	add a, a
  787 D1:D607 87 -  -  -  	add a, a
  788 D1:D608 C6 D5 -  -  	add a, 0D5h
  789 D1:D60A CD AE AC D1 	call InsertA															; push hl/de
  790 D1:D60E 3E C1 -  -  	ld a, 0C1h
  791 D1:D610 CD AE AC D1 	call InsertA															; pop bc
  792 D1:D614 79 -  -  -  	ld a, c
  793 D1:D615 06 02 -  -  	ld b, OutputInHL
  794 D1:D617 CD FF AC D1 	call GetFunction
  795 D1:D61B 18 B1 -  -  	jr -_
  796 D1:D61D -  -  -  -  DivFunctionFunction:
  797 D1:D61D 7B -  -  -  	ld a, e
  798 D1:D61E 06 00 -  -  	ld b, OutputInBC
  799 D1:D620 CD FF AC D1 	call GetFunction
  800 D1:D624 79 -  -  -  	ld a, c
  801 D1:D625 06 02 -  -  	ld b, OutputInHL
  802 D1:D627 CD FF AC D1 	call GetFunction
  803 D1:D62B 18 A1 -  -  	jr -_
  804 D1:D62D -  -  -  -  	
  805 D1:D62D -  -  -  -  MulNumberXXX:
  806 D1:D62D DD 7E FC -  	ld a, (ix-4)
  807 D1:D630 B7 -  -  -  	or a
  808 D1:D631 28 10 -  -  	jr z, MulNumberNumber
  809 D1:D633 3D -  -  -  	dec a
  810 D1:D634 28 1A -  -  	jr z, MulNumberVariable
  811 D1:D636 3D -  -  -  	dec a
  812 D1:D637 28 1E -  -  	jr z, MulNumberChainPush
  813 D1:D639 3D -  -  -  	dec a
  814 D1:D63A 28 1F -  -  	jr z, MulNumberChainAns
  815 D1:D63C 3D -  -  -  	dec a
  816 D1:D63D 28 22 -  -  	jr z, MulNumberFunction
  817 D1:D63F C3 A2 AE D1 	jp MulError
  818 D1:D643 -  -  -  -  MulNumberNumber:
  819 D1:D643 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
  820 D1:D647 EB -  -  -  	ex de, hl
  821 D1:D648 CD 54 01 00 	call __imulu
  822 D1:D64C DD 2F F9 -  	ld (ix-7), hl
  823 D1:D64F C9 -  -  -  	ret
  824 D1:D650 -  -  -  -  MulNumberVariable:
  825 D1:D650 C5 -  -  -  	push bc
  826 D1:D651 E1 -  -  -  	pop hl
  827 D1:D652 EB -  -  -  	ex de, hl
  828 D1:D653 E5 -  -  -  	push hl
  829 D1:D654 C1 -  -  -  	pop bc
  830 D1:D655 18 2B -  -  	jr MulVariableNumber
  831 D1:D657 -  -  -  -  MulNumberChainPush:
  832 D1:D657 C3 3F AF D1 	jp UnknownError
  833 D1:D65B -  -  -  -  MulNumberChainAns:
  834 D1:D65B C5 -  -  -  	push bc
  835 D1:D65C D1 -  -  -  	pop de
  836 D1:D65D C3 1F D7 D1 	jp MulChainAnsNumber
  837 D1:D661 -  -  -  -  MulNumberFunction:
  838 D1:D661 C5 -  -  -  	push bc
  839 D1:D662 E1 -  -  -  	pop hl
  840 D1:D663 EB -  -  -  	ex de, hl
  841 D1:D664 E5 -  -  -  	push hl
  842 D1:D665 C1 -  -  -  	pop bc
  843 D1:D666 C3 DE D7 D1 	jp MulFunctionNumber
  844 D1:D66A -  -  -  -  MulVariableXXX:
  845 D1:D66A DD 7E FC -  	ld a, (ix-4)
  846 D1:D66D B7 -  -  -  	or a
  847 D1:D66E 28 12 -  -  	jr z, MulVariableNumber
  848 D1:D670 3D -  -  -  	dec a
  849 D1:D671 28 17 -  -  	jr z, MulVariableVariable
  850 D1:D673 3D -  -  -  	dec a
  851 D1:D674 28 1C -  -  	jr z, MulVariableChainPush
  852 D1:D676 3D -  -  -  	dec a
  853 D1:D677 28 24 -  -  	jr z, MulVariableChainAns
  854 D1:D679 3D -  -  -  	dec a
  855 D1:D67A CA A2 D6 D1 	jp z, MulVariableFunction
  856 D1:D67E C3 A2 AE D1 	jp MulError
  857 D1:D682 -  -  -  -  MulVariableNumber:
  858 D1:D682 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  859 D1:D686 C3 1F D7 D1 	jp MulChainAnsNumber
  860 D1:D68A -  -  -  -  MulVariableVariable:
  861 D1:D68A CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
  862 D1:D68E C3 89 D7 D1 	jp MulChainAnsVariable
  863 D1:D692 -  -  -  -  MulVariableChainPush:
  864 D1:D692 3E E1 -  -  	ld a, 0E1h
  865 D1:D694 CD AE AC D1 	call InsertA															; pop hl
  866 D1:D698 59 -  -  -  	ld e, c
  867 D1:D699 C3 89 D7 D1 	jp MulChainAnsVariable
  868 D1:D69D -  -  -  -  MulVariableChainAns:
  869 D1:D69D 59 -  -  -  	ld e, c
  870 D1:D69E C3 89 D7 D1 	jp MulChainAnsVariable
  871 D1:D6A2 -  -  -  -  MulVariableFunction:
  872 D1:D6A2 7B -  -  -  	ld a, e
  873 D1:D6A3 06 02 -  -  	ld b, OutputInHL
  874 D1:D6A5 CD FF AC D1 	call GetFunction
  875 D1:D6A9 CD 93 AC D1 	call InsertIXC
  876 D1:D6AD 3E CD -  -  	ld a, 0CDh
  877 D1:D6AF 21 54 01 00 	ld hl, __imulu
  878 D1:D6B3 C3 62 AC D1 	jp InsertAHL															; call __imulu
  879 D1:D6B7 -  -  -  -  MulChainPushXXX:
  880 D1:D6B7 DD 7E FC -  	ld a, (ix-4)
  881 D1:D6BA B7 -  -  -  	or a
  882 D1:D6BB 28 12 -  -  	jr z, MulChainPushNumber
  883 D1:D6BD 3D -  -  -  	dec a
  884 D1:D6BE 28 17 -  -  	jr z, MulChainPushVariable
  885 D1:D6C0 3D -  -  -  	dec a
  886 D1:D6C1 28 1E -  -  	jr z, MulChainPushChainPush
  887 D1:D6C3 3D -  -  -  	dec a
  888 D1:D6C4 28 1F -  -  	jr z, MulChainPushChainAns
  889 D1:D6C6 3D -  -  -  	dec a
  890 D1:D6C7 CA F9 D6 D1 	jp z, MulChainPushFunction
  891 D1:D6CB C3 A2 AE D1 	jp MulError
  892 D1:D6CF -  -  -  -  MulChainPushNumber:
  893 D1:D6CF 3E E1 -  -  	ld a, 0E1h
  894 D1:D6D1 CD AE AC D1 	call InsertA															; pop hl
  895 D1:D6D5 18 48 -  -  	jr MulChainAnsNumber
  896 D1:D6D7 -  -  -  -  MulChainPushVariable:
  897 D1:D6D7 3E E1 -  -  	ld a, 0E1h
  898 D1:D6D9 CD AE AC D1 	call InsertA															; pop hl
  899 D1:D6DD C3 89 D7 D1 	jp MulChainAnsVariable
  900 D1:D6E1 -  -  -  -  MulChainPushChainPush:
  901 D1:D6E1 C3 3F AF D1 	jp UnknownError
  902 D1:D6E5 -  -  -  -  MulChainPushChainAns:
  903 D1:D6E5 CD C7 AC D1 	call MaybeChangeDEToHL
  904 D1:D6E9 3E C1 -  -  	ld a, 0C1h
  905 D1:D6EB CD AE AC D1 	call InsertA															; pop bc
  906 D1:D6EF 3E CD -  -  	ld a, 0CDh
  907 D1:D6F1 21 54 01 00 	ld hl, __imulu
  908 D1:D6F5 C3 62 AC D1 	jp InsertAHL															; call __imulu
  909 D1:D6F9 -  -  -  -  MulChainPushFunction:
  910 D1:D6F9 3E E1 -  -  	ld a, 0E1h
  911 D1:D6FB CD AE AC D1 	call InsertA															; pop hl
  912 D1:D6FF C3 A3 D7 D1 	jp MulChainAnsFunction
  913 D1:D703 -  -  -  -  MulChainAnsXXX:
  914 D1:D703 DD 7E FC -  	ld a, (ix-4)
  915 D1:D706 B7 -  -  -  	or a
  916 D1:D707 28 16 -  -  	jr z, MulChainAnsNumber
  917 D1:D709 3D -  -  -  	dec a
  918 D1:D70A 28 7D -  -  	jr z, MulChainAnsVariable
  919 D1:D70C 3D -  -  -  	dec a
  920 D1:D70D CA 9B D7 D1 	jp z, MulChainAnsChainPush
  921 D1:D711 3D -  -  -  	dec a
  922 D1:D712 CA 9F D7 D1 	jp z, MulChainAnsChainAns
  923 D1:D716 3D -  -  -  	dec a
  924 D1:D717 CA A3 D7 D1 	jp z, MulChainAnsFunction
  925 D1:D71B C3 A2 AE D1 	jp MulError
  926 D1:D71F -  -  -  -  MulChainAnsNumber:
  927 D1:D71F CD 4C 1D 02 	call _ChkDEIs0
  928 D1:D723 20 08 -  -  	jr nz, +_
  929 D1:D725 21 B7 ED 62 	ld hl, 062EDB7h
  930 D1:D729 C3 66 AC D1 	jp InsertHL																; or a \ sbc hl, hl
  931 D1:D72D CD C7 AC D1 _:	call MaybeChangeDEToHL
  932 D1:D731 1B -  -  -  	dec de
  933 D1:D732 CD 4C 1D 02 	call _ChkDEIs0
  934 D1:D736 C8 -  -  -  	ret z
  935 D1:D737 13 -  -  -  	inc de
  936 D1:D738 EB -  -  -  	ex de, hl
  937 D1:D739 11 15 00 00 	ld de, 21
  938 D1:D73D B7 -  -  -  	or a
  939 D1:D73E ED 52 -  -  	sbc hl, de
  940 D1:D740 30 16 -  -  	jr nc, ++_
  941 D1:D742 19 -  -  -  	add hl, de
  942 D1:D743 2D -  -  -  	dec l
  943 D1:D744 2D -  -  -  	dec l
  944 D1:D745 26 0A -  -  	ld h, 10
  945 D1:D747 ED 6C -  -  	mlt hl
  946 D1:D749 11 72 EF D1 	ld de, MulTable
  947 D1:D74D 19 -  -  -  	add hl, de
  948 D1:D74E 46 -  -  -  	ld b, (hl)
  949 D1:D74F 23 -  -  -  _:	inc hl
  950 D1:D750 7E -  -  -  	ld a, (hl)
  951 D1:D751 CD AE AC D1 	call InsertA
  952 D1:D755 10 F8 -  -  	djnz -_
  953 D1:D757 C9 -  -  -  	ret
  954 D1:D758 19 -  -  -  _:	add hl, de
  955 D1:D759 11 00 01 00 	ld de, 256
  956 D1:D75D B7 -  -  -  	or a
  957 D1:D75E ED 52 -  -  	sbc hl, de
  958 D1:D760 38 10 -  -  	jr c, +_
  959 D1:D762 3E 01 -  -  	ld a, 001h
  960 D1:D764 CD 62 AC D1 	call InsertAHL															; ld bc, *
  961 D1:D768 3E CD -  -  	ld a, 0CDh
  962 D1:D76A 21 54 01 00 	ld hl, __imulu
  963 D1:D76E C3 62 AC D1 	jp InsertAHL															; call __imulu
  964 D1:D772 19 -  -  -  _:	add hl, de
  965 D1:D773 4D -  -  -  	ld c, l
  966 D1:D774 3E 3E -  -  	ld a, 03Eh
  967 D1:D776 CD AE AC D1 	call InsertA															; ld a, *
  968 D1:D77A 79 -  -  -  	ld a, c
  969 D1:D77B CD AE AC D1 	call InsertA															; ld a, *
  970 D1:D77F 3E CD -  -  	ld a, 0CDh
  971 D1:D781 21 50 01 00 	ld hl, __imul_b
  972 D1:D785 C3 62 AC D1 	jp InsertAHL															; call __imul_b
  973 D1:D789 -  -  -  -  MulChainAnsVariable:
  974 D1:D789 CD C7 AC D1 	call MaybeChangeDEToHL
  975 D1:D78D CD 93 AC D1 	call InsertIXC															; ld bc, (ix+*)
  976 D1:D791 3E CD -  -  	ld a, 0CDh
  977 D1:D793 21 54 01 00 	ld hl, __imulu
  978 D1:D797 C3 62 AC D1 	jp InsertAHL															; call __imulu
  979 D1:D79B -  -  -  -  MulChainAnsChainPush:
  980 D1:D79B C3 3F AF D1 	jp UnknownError
  981 D1:D79F -  -  -  -  MulChainAnsChainAns:
  982 D1:D79F C3 3F AF D1 	jp UnknownError
  983 D1:D7A3 -  -  -  -  MulChainAnsFunction:
  984 D1:D7A3 3A 96 EC D1 	ld a, (ExprOutput)
  985 D1:D7A7 87 -  -  -  	add a, a
  986 D1:D7A8 87 -  -  -  	add a, a
  987 D1:D7A9 87 -  -  -  	add a, a
  988 D1:D7AA 87 -  -  -  	add a, a
  989 D1:D7AB C6 D5 -  -  	add a, 0D5h
  990 D1:D7AD CD AE AC D1 	call InsertA															; push hl/de
  991 D1:D7B1 7B -  -  -  	ld a, e
  992 D1:D7B2 06 00 -  -  	ld b, OutputInBC
  993 D1:D7B4 CD FF AC D1 	call GetFunction
  994 D1:D7B8 3E E1 -  -  	ld a, 0E1h
  995 D1:D7BA CD AE AC D1 	call InsertA															; pop hl
  996 D1:D7BE 3E CD -  -  	ld a, 0CDh
  997 D1:D7C0 21 54 01 00 	ld hl, __imulu
  998 D1:D7C4 C3 62 AC D1 	jp InsertAHL															; call __imulu
  999 D1:D7C8 -  -  -  -  MulFunctionXXX:
 1000 D1:D7C8 DD 7E FC -  	ld a, (ix-4)
 1001 D1:D7CB B7 -  -  -  	or a
 1002 D1:D7CC 28 10 -  -  	jr z, MulFunctionNumber
 1003 D1:D7CE 3D -  -  -  	dec a
 1004 D1:D7CF 28 18 -  -  	jr z, MulFunctionVariable
 1005 D1:D7D1 3D -  -  -  	dec a
 1006 D1:D7D2 28 20 -  -  	jr z, MulFunctionChainPush
 1007 D1:D7D4 3D -  -  -  	dec a
 1008 D1:D7D5 28 21 -  -  	jr z, MulFunctionChainAns
 1009 D1:D7D7 3D -  -  -  	dec a
 1010 D1:D7D8 28 21 -  -  	jr z, MulFunctionFunction
 1011 D1:D7DA C3 A2 AE D1 	jp MulError
 1012 D1:D7DE -  -  -  -  MulFunctionNumber:
 1013 D1:D7DE 79 -  -  -  	ld a, c
 1014 D1:D7DF 06 02 -  -  	ld b, OutputInHL
 1015 D1:D7E1 CD FF AC D1 	call GetFunction
 1016 D1:D7E5 C3 1F D7 D1 	jp MulChainAnsNumber
 1017 D1:D7E9 -  -  -  -  MulFunctionVariable:
 1018 D1:D7E9 79 -  -  -  	ld a, c
 1019 D1:D7EA 06 02 -  -  	ld b, OutputInHL
 1020 D1:D7EC CD FF AC D1 	call GetFunction
 1021 D1:D7F0 C3 89 D7 D1 	jp MulChainAnsVariable
 1022 D1:D7F4 -  -  -  -  MulFunctionChainPush:
 1023 D1:D7F4 C3 3F AF D1 	jp UnknownError
 1024 D1:D7F8 -  -  -  -  MulFunctionChainAns:
 1025 D1:D7F8 59 -  -  -  	ld e, c
 1026 D1:D7F9 18 A8 -  -  	jr MulChainAnsFunction
 1027 D1:D7FB -  -  -  -  MulFunctionFunction:
 1028 D1:D7FB 7B -  -  -  	ld a, e
 1029 D1:D7FC 06 00 -  -  	ld b, OutputInBC
 1030 D1:D7FE CD FF AC D1 	call GetFunction
 1031 D1:D802 79 -  -  -  	ld a, c
 1032 D1:D803 06 02 -  -  	ld b, OutputInHL
 1033 D1:D805 CD FF AC D1 	call GetFunction
 1034 D1:D809 3E CD -  -  	ld a, 0CDh
 1035 D1:D80B 21 54 01 00 	ld hl, __imulu
 1036 D1:D80F C3 62 AC D1 	jp InsertAHL															; call __imulu
 1037 D1:D813 -  -  -  -  	
 1038 D1:D813 -  -  -  -  SwapLEToGE:
 1039 D1:D813 C5 -  -  -  	push bc
 1040 D1:D814 E1 -  -  -  	pop hl
 1041 D1:D815 DD 7E FC -  	ld a, (ix-4)
 1042 D1:D818 DD 46 F8 -  	ld b, (ix-8)
 1043 D1:D81B DD 70 FC -  	ld (ix-4), b
 1044 D1:D81E DD 77 F8 -  	ld (ix-8), a
 1045 D1:D821 EB -  -  -  	ex de, hl
 1046 D1:D822 E5 -  -  -  	push hl
 1047 D1:D823 C1 -  -  -  	pop bc
 1048 D1:D824 3E 6E -  -  	ld a, tGE
 1049 D1:D826 C9 -  -  -  	ret
 1050 D1:D827 -  -  -  -  	
 1051 D1:D827 -  -  -  -  SwapLTToGT:
 1052 D1:D827 C5 -  -  -  	push bc
 1053 D1:D828 E1 -  -  -  	pop hl
 1054 D1:D829 DD 7E FC -  	ld a, (ix-4)
 1055 D1:D82C DD 46 F8 -  	ld b, (ix-8)
 1056 D1:D82F DD 70 FC -  	ld (ix-4), b
 1057 D1:D832 DD 77 F8 -  	ld (ix-8), a
 1058 D1:D835 EB -  -  -  	ex de, hl
 1059 D1:D836 E5 -  -  -  	push hl
 1060 D1:D837 C1 -  -  -  	pop bc
 1061 D1:D838 3E 6C -  -  	ld a, tGT
 1062 D1:D83A C9 -  -  -  	ret
 1063 D1:D83B -  -  -  -  
 1064 D1:D83B -  -  -  -  GLETNumberXXX:
 1065 D1:D83B DD 7E FC -  	ld a, (ix-4)
 1066 D1:D83E B7 -  -  -  	or a
 1067 D1:D83F 28 10 -  -  	jr z, GLETNumberNumber
 1068 D1:D841 3D -  -  -  	dec a
 1069 D1:D842 28 25 -  -  	jr z, GLETNumberVariable
 1070 D1:D844 3D -  -  -  	dec a
 1071 D1:D845 28 2E -  -  	jr z, GLETNumberChainPush
 1072 D1:D847 3D -  -  -  	dec a
 1073 D1:D848 28 2F -  -  	jr z, GLETNumberChainAns
 1074 D1:D84A 3D -  -  -  	dec a
 1075 D1:D84B 28 3A -  -  	jr z, GLETNumberFunction
 1076 D1:D84D C3 A6 AE D1 	jp GLETError
 1077 D1:D851 -  -  -  -  GLETNumberNumber:
 1078 D1:D851 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1079 D1:D855 C5 -  -  -  	push bc
 1080 D1:D856 E1 -  -  -  	pop hl
 1081 D1:D857 3A 1F EA D0 	ld a, (tempToken)
 1082 D1:D85B FE 6E -  -  	cp tGE
 1083 D1:D85D 28 01 -  -  	jr z, +_
 1084 D1:D85F 37 -  -  -  	scf
 1085 D1:D860 ED 52 -  -  _:	sbc hl, de
 1086 D1:D862 ED 62 -  -  	sbc hl, hl
 1087 D1:D864 23 -  -  -  	inc hl
 1088 D1:D865 DD 2F F9 -  	ld (ix-7), hl
 1089 D1:D868 C9 -  -  -  	ret
 1090 D1:D869 -  -  -  -  GLETNumberVariable:
 1091 D1:D869 3E 21 -  -  	ld a, 021h
 1092 D1:D86B C5 -  -  -  	push bc
 1093 D1:D86C E1 -  -  -  	pop hl
 1094 D1:D86D CD 62 AC D1 	call InsertAHL															; ld hl, *
 1095 D1:D871 C3 85 D9 D1 	jp GLETChainAnsVariable
 1096 D1:D875 -  -  -  -  GLETNumberChainPush:
 1097 D1:D875 C3 3F AF D1 	jp UnknownError
 1098 D1:D879 -  -  -  -  GLETNumberChainAns:
 1099 D1:D879 CD BB AC D1 	call MaybeChangeHLToDE
 1100 D1:D87D 3E 21 -  -  	ld a, 021h
 1101 D1:D87F C5 -  -  -  	push bc
 1102 D1:D880 E1 -  -  -  	pop hl
 1103 D1:D881 CD 62 AC D1 	call InsertAHL															; ld hl, *
 1104 D1:D885 18 6F -  -  	jr GLETInsert
 1105 D1:D887 -  -  -  -  GLETNumberFunction:
 1106 D1:D887 7B -  -  -  	ld a, e
 1107 D1:D888 C5 -  -  -  	push bc
 1108 D1:D889 06 01 -  -  		ld b, OutputInDE
 1109 D1:D88B CD FF AC D1 		call GetFunction
 1110 D1:D88F 3E 21 -  -  		ld a, 021h
 1111 D1:D891 E1 -  -  -  	pop hl
 1112 D1:D892 CD 62 AC D1 	call InsertAHL															; ld hl, *
 1113 D1:D896 18 5E -  -  	jr GLETInsert
 1114 D1:D898 -  -  -  -  GLETVariableXXX:
 1115 D1:D898 DD 7E FC -  	ld a, (ix-4)
 1116 D1:D89B B7 -  -  -  	or a
 1117 D1:D89C 28 12 -  -  	jr z, GLETVariableNumber
 1118 D1:D89E 3D -  -  -  	dec a
 1119 D1:D89F 28 17 -  -  	jr z, GLETVariableVariable
 1120 D1:D8A1 3D -  -  -  	dec a
 1121 D1:D8A2 28 39 -  -  	jr z, GLETVariableChainPush
 1122 D1:D8A4 3D -  -  -  	dec a
 1123 D1:D8A5 28 3A -  -  	jr z, GLETVariableChainAns
 1124 D1:D8A7 3D -  -  -  	dec a
 1125 D1:D8A8 CA EB D8 D1 	jp z, GLETVariableFunction
 1126 D1:D8AC C3 A6 AE D1 	jp GLETError
 1127 D1:D8B0 -  -  -  -  GLETVariableNumber:
 1128 D1:D8B0 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1129 D1:D8B4 C3 6B D9 D1 	jp GLETChainAnsNumber
 1130 D1:D8B8 -  -  -  -  GLETVariableVariable:
 1131 D1:D8B8 79 -  -  -  	ld a, c
 1132 D1:D8B9 BB -  -  -  	cp e
 1133 D1:D8BA 20 19 -  -  	jr nz, ++_
 1134 D1:D8BC FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1135 D1:D8C0 3A 1F EA D0 	ld a, (tempToken)
 1136 D1:D8C4 D6 6C -  -  	sub tGT
 1137 D1:D8C6 28 02 -  -  	jr z, +_
 1138 D1:D8C8 3E 01 -  -  	ld a, 1
 1139 D1:D8CA 11 00 00 00 _:	ld de, 0
 1140 D1:D8CE 5F -  -  -  	ld e, a
 1141 D1:D8CF 36 00 -  -  	ld (hl), typeNumber
 1142 D1:D8D1 23 -  -  -  	inc hl
 1143 D1:D8D2 ED 1F -  -  	ld (hl), de
 1144 D1:D8D4 C9 -  -  -  	ret
 1145 D1:D8D5 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1146 D1:D8D9 C3 85 D9 D1 	jp GLETChainAnsVariable
 1147 D1:D8DD -  -  -  -  GLETVariableChainPush:
 1148 D1:D8DD C3 3F AF D1 	jp UnknownError
 1149 D1:D8E1 -  -  -  -  GLETVariableChainAns:
 1150 D1:D8E1 CD BB AC D1 	call MaybeChangeHLToDE
 1151 D1:D8E5 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1152 D1:D8E9 18 0B -  -  	jr GLETInsert
 1153 D1:D8EB -  -  -  -  GLETVariableFunction:
 1154 D1:D8EB 7B -  -  -  	ld a, e
 1155 D1:D8EC 06 01 -  -  	ld b, OutputInDE
 1156 D1:D8EE CD FF AC D1 	call GetFunction
 1157 D1:D8F2 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1158 D1:D8F6 -  -  -  -  GLETInsert:
 1159 D1:D8F6 11 37 ED 52 	ld de, 052ED37h
 1160 D1:D8FA 21 ED 62 23 	ld hl, 02362EDh
 1161 D1:D8FE 3A 1F EA D0 	ld a, (tempToken)
 1162 D1:D902 FE 6C -  -  	cp tGT
 1163 D1:D904 28 02 -  -  	jr z, +_
 1164 D1:D906 1E B7 -  -  	ld e, 0B7h
 1165 D1:D908 C3 A5 AC D1 _:	jp InsertDEHL															; scf/or a \ sbc hl, de \ sbc hl, hl \ inc hl
 1166 D1:D90C -  -  -  -  GLETChainPushXXX:
 1167 D1:D90C DD 7E FC -  	ld a, (ix-4)
 1168 D1:D90F B7 -  -  -  	or a
 1169 D1:D910 28 12 -  -  	jr z, GLETChainPushNumber
 1170 D1:D912 3D -  -  -  	dec a
 1171 D1:D913 28 17 -  -  	jr z, GLETChainPushVariable
 1172 D1:D915 3D -  -  -  	dec a
 1173 D1:D916 28 1C -  -  	jr z, GLETChainPushChainPush
 1174 D1:D918 3D -  -  -  	dec a
 1175 D1:D919 28 1D -  -  	jr z, GLETChainPushChainAns
 1176 D1:D91B 3D -  -  -  	dec a
 1177 D1:D91C CA 44 D9 D1 	jp z, GLETChainPushFunction
 1178 D1:D920 C3 A6 AE D1 	jp GLETError
 1179 D1:D924 -  -  -  -  GLETChainPushNumber:
 1180 D1:D924 3E E1 -  -  	ld a, 0E1h
 1181 D1:D926 CD AE AC D1 	call InsertA															; pop hl
 1182 D1:D92A 18 3F -  -  	jr GLETChainAnsNumber
 1183 D1:D92C -  -  -  -  GLETChainPushVariable:
 1184 D1:D92C 3E E1 -  -  	ld a, 0E1h
 1185 D1:D92E CD AE AC D1 	call InsertA															; pop hl
 1186 D1:D932 18 51 -  -  	jr GLETChainAnsVariable
 1187 D1:D934 -  -  -  -  GLETChainPushChainPush:
 1188 D1:D934 C3 3F AF D1 	jp UnknownError
 1189 D1:D938 -  -  -  -  GLETChainPushChainAns:
 1190 D1:D938 CD BB AC D1 	call MaybeChangeHLToDE
 1191 D1:D93C 3E E1 -  -  	ld a, 0E1h
 1192 D1:D93E CD AE AC D1 	call InsertA															; pop hl
 1193 D1:D942 18 B2 -  -  	jr GLETInsert
 1194 D1:D944 -  -  -  -  GLETChainPushFunction:
 1195 D1:D944 7B -  -  -  	ld a, e
 1196 D1:D945 06 01 -  -  	ld b, OutputInDE
 1197 D1:D947 CD FF AC D1 	call GetFunction
 1198 D1:D94B 3E E1 -  -  	ld a, 0E1h
 1199 D1:D94D CD AE AC D1 	call InsertA															; pop hl
 1200 D1:D951 18 A3 -  -  _:	jr GLETInsert
 1201 D1:D953 -  -  -  -  GLETChainAnsXXX:
 1202 D1:D953 DD 7E FC -  	ld a, (ix-4)
 1203 D1:D956 B7 -  -  -  	or a
 1204 D1:D957 28 12 -  -  	jr z, GLETChainAnsNumber
 1205 D1:D959 3D -  -  -  	dec a
 1206 D1:D95A 28 29 -  -  	jr z, GLETChainAnsVariable
 1207 D1:D95C 3D -  -  -  	dec a
 1208 D1:D95D 28 30 -  -  	jr z, GLETChainAnsChainPush
 1209 D1:D95F 3D -  -  -  	dec a
 1210 D1:D960 28 31 -  -  	jr z, GLETChainAnsChainAns
 1211 D1:D962 3D -  -  -  	dec a
 1212 D1:D963 CA 97 D9 D1 	jp z, GLETChainAnsFunction
 1213 D1:D967 C3 A6 AE D1 	jp GLETError
 1214 D1:D96B -  -  -  -  GLETChainAnsNumber:
 1215 D1:D96B CD C7 AC D1 	call MaybeChangeDEToHL
 1216 D1:D96F 21 1F EA D0 	ld hl, tempToken
 1217 D1:D973 7E -  -  -  	ld a, (hl)
 1218 D1:D974 FE 6C -  -  	cp tGT
 1219 D1:D976 20 04 -  -  	jr nz, +_
 1220 D1:D978 13 -  -  -  	inc de
 1221 D1:D979 3E 6E -  -  	ld a, tGE
 1222 D1:D97B 77 -  -  -  	ld (hl), a
 1223 D1:D97C 3E 11 -  -  _:	ld a, 011h
 1224 D1:D97E EB -  -  -  	ex de, hl
 1225 D1:D97F CD 62 AC D1 	call InsertAHL															; ld de, *
 1226 D1:D983 18 CC -  -  	jr --_
 1227 D1:D985 -  -  -  -  GLETChainAnsVariable:
 1228 D1:D985 CD C7 AC D1 	call MaybeChangeDEToHL
 1229 D1:D989 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
 1230 D1:D98D 18 C2 -  -  	jr --_
 1231 D1:D98F -  -  -  -  GLETChainAnsChainPush:
 1232 D1:D98F C3 3F AF D1 	jp UnknownError
 1233 D1:D993 -  -  -  -  GLETChainAnsChainAns:
 1234 D1:D993 C3 3F AF D1 	jp UnknownError
 1235 D1:D997 -  -  -  -  GLETChainAnsFunction:
 1236 D1:D997 3A 96 EC D1 	ld a, (ExprOutput)
 1237 D1:D99B 87 -  -  -  	add a, a
 1238 D1:D99C 87 -  -  -  	add a, a
 1239 D1:D99D 87 -  -  -  	add a, a
 1240 D1:D99E 87 -  -  -  	add a, a
 1241 D1:D99F C6 D5 -  -  	add a, 0D5h
 1242 D1:D9A1 CD AE AC D1 	call InsertA															; push hl/de
 1243 D1:D9A5 7B -  -  -  	ld a, e
 1244 D1:D9A6 06 01 -  -  	ld b, OutputInDE
 1245 D1:D9A8 CD FF AC D1 	call GetFunction
 1246 D1:D9AC 3E E1 -  -  	ld a, 0E1h
 1247 D1:D9AE CD AE AC D1 	call InsertA															; pop hl
 1248 D1:D9B2 18 C8 -  -  _:	jr --_
 1249 D1:D9B4 -  -  -  -  GLETFunctionXXX:
 1250 D1:D9B4 DD 7E FC -  	ld a, (ix-4)
 1251 D1:D9B7 B7 -  -  -  	or a
 1252 D1:D9B8 28 10 -  -  	jr z, GLETFunctionNumber
 1253 D1:D9BA 3D -  -  -  	dec a
 1254 D1:D9BB 28 18 -  -  	jr z, GLETFunctionVariable
 1255 D1:D9BD 3D -  -  -  	dec a
 1256 D1:D9BE 28 20 -  -  	jr z, GLETFunctionChainPush
 1257 D1:D9C0 3D -  -  -  	dec a
 1258 D1:D9C1 28 21 -  -  	jr z, GLETFunctionChainAns
 1259 D1:D9C3 3D -  -  -  	dec a
 1260 D1:D9C4 28 3B -  -  	jr z, GLETFunctionFunction
 1261 D1:D9C6 C3 A6 AE D1 	jp GLETError
 1262 D1:D9CA -  -  -  -  GLETFunctionNumber:
 1263 D1:D9CA 79 -  -  -  	ld a, c
 1264 D1:D9CB 06 02 -  -  	ld b, OutputInHL
 1265 D1:D9CD CD FF AC D1 	call GetFunction
 1266 D1:D9D1 C3 6B D9 D1 	jp GLETChainAnsNumber
 1267 D1:D9D5 -  -  -  -  GLETFunctionVariable:
 1268 D1:D9D5 79 -  -  -  	ld a, c
 1269 D1:D9D6 06 02 -  -  	ld b, OutputInHL
 1270 D1:D9D8 CD FF AC D1 	call GetFunction
 1271 D1:D9DC C3 85 D9 D1 	jp GLETChainAnsVariable
 1272 D1:D9E0 -  -  -  -  GLETFunctionChainPush:
 1273 D1:D9E0 C3 3F AF D1 	jp UnknownError
 1274 D1:D9E4 -  -  -  -  GLETFunctionChainAns:
 1275 D1:D9E4 3A 96 EC D1 	ld a, (ExprOutput)
 1276 D1:D9E8 87 -  -  -  	add a, a
 1277 D1:D9E9 87 -  -  -  	add a, a
 1278 D1:D9EA 87 -  -  -  	add a, a
 1279 D1:D9EB 87 -  -  -  	add a, a
 1280 D1:D9EC C6 D5 -  -  	add a, 0D5h
 1281 D1:D9EE CD AE AC D1 	call InsertA															; push hl/de
 1282 D1:D9F2 79 -  -  -  	ld a, c
 1283 D1:D9F3 06 02 -  -  	ld b, OutputInHL
 1284 D1:D9F5 CD FF AC D1 	call GetFunction
 1285 D1:D9F9 3E D1 -  -  	ld a, 0D1h
 1286 D1:D9FB CD AE AC D1 	call InsertA															; pop de
 1287 D1:D9FF 18 B1 -  -  	jr -_
 1288 D1:DA01 -  -  -  -  GLETFunctionFunction:
 1289 D1:DA01 7B -  -  -  	ld a, e
 1290 D1:DA02 06 01 -  -  	ld b, OutputInDE
 1291 D1:DA04 CD FF AC D1 	call GetFunction
 1292 D1:DA08 79 -  -  -  	ld a, c
 1293 D1:DA09 06 02 -  -  	ld b, OutputInHL
 1294 D1:DA0B FD CB C0 F6 	set need_push, (iy+fExpression1)
 1295 D1:DA0F CD FF AC D1 	call GetFunction
 1296 D1:DA13 18 9D -  -  	jr -_
 1297 D1:DA15 -  -  -  -  	
 1298 D1:DA15 -  -  -  -  NEQNumberXXX:
 1299 D1:DA15 DD 7E FC -  	ld a, (ix-4)
 1300 D1:DA18 B7 -  -  -  	or a
 1301 D1:DA19 28 10 -  -  	jr z, NEQNumberNumber
 1302 D1:DA1B 3D -  -  -  	dec a
 1303 D1:DA1C 28 33 -  -  	jr z, NEQNumberVariable
 1304 D1:DA1E 3D -  -  -  	dec a
 1305 D1:DA1F 28 37 -  -  	jr z, NEQNumberChainPush
 1306 D1:DA21 3D -  -  -  	dec a
 1307 D1:DA22 28 38 -  -  	jr z, NEQNumberChainAns
 1308 D1:DA24 3D -  -  -  	dec a
 1309 D1:DA25 28 3B -  -  	jr z, NEQNumberFunction
 1310 D1:DA27 C3 C3 AE D1 	jp NEQError
 1311 D1:DA2B -  -  -  -  NEQNumberNumber:
 1312 D1:DA2B FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1313 D1:DA2F EB -  -  -  	ex de, hl
 1314 D1:DA30 3A 1F EA D0 	ld a, (tempToken)
 1315 D1:DA34 FE 6A -  -  	cp tEq
 1316 D1:DA36 28 0C -  -  	jr z, +_
 1317 D1:DA38 B7 -  -  -  	or a
 1318 D1:DA39 ED 42 -  -  	sbc hl, bc
 1319 D1:DA3B 21 00 00 00 	ld hl, 0
 1320 D1:DA3F 28 01 -  -  	jr z, $+3
 1321 D1:DA41 23 -  -  -  	inc hl
 1322 D1:DA42 18 09 -  -  	jr ++_
 1323 D1:DA44 ED 42 -  -  _:	sbc hl, bc
 1324 D1:DA46 21 00 00 00 	ld hl, 0
 1325 D1:DA4A 20 01 -  -  	jr nz, $+3
 1326 D1:DA4C 23 -  -  -  	inc hl
 1327 D1:DA4D DD 2F F9 -  _:	ld (ix-7), hl
 1328 D1:DA50 C9 -  -  -  	ret
 1329 D1:DA51 -  -  -  -  NEQNumberVariable:
 1330 D1:DA51 C5 -  -  -  	push bc
 1331 D1:DA52 E1 -  -  -  	pop hl
 1332 D1:DA53 EB -  -  -  	ex de, hl
 1333 D1:DA54 E5 -  -  -  	push hl
 1334 D1:DA55 C1 -  -  -  	pop bc
 1335 D1:DA56 18 2B -  -  	jr NEQVariableNumber
 1336 D1:DA58 -  -  -  -  NEQNumberChainPush:
 1337 D1:DA58 C3 3F AF D1 	jp UnknownError
 1338 D1:DA5C -  -  -  -  NEQNumberChainAns:
 1339 D1:DA5C C5 -  -  -  	push bc
 1340 D1:DA5D D1 -  -  -  	pop de
 1341 D1:DA5E C3 48 DB D1 	jp NEQChainAnsNumber
 1342 D1:DA62 -  -  -  -  NEQNumberFunction:
 1343 D1:DA62 C5 -  -  -  	push bc
 1344 D1:DA63 E1 -  -  -  	pop hl
 1345 D1:DA64 EB -  -  -  	ex de, hl
 1346 D1:DA65 E5 -  -  -  	push hl
 1347 D1:DA66 C1 -  -  -  	pop bc
 1348 D1:DA67 C3 C5 DB D1 	jp NEQFunctionNumber
 1349 D1:DA6B -  -  -  -  NEQVariableXXX:
 1350 D1:DA6B DD 7E FC -  	ld a, (ix-4)
 1351 D1:DA6E B7 -  -  -  	or a
 1352 D1:DA6F 28 12 -  -  	jr z, NEQVariableNumber
 1353 D1:DA71 3D -  -  -  	dec a
 1354 D1:DA72 28 17 -  -  	jr z, NEQVariableVariable
 1355 D1:DA74 3D -  -  -  	dec a
 1356 D1:DA75 28 39 -  -  	jr z, NEQVariableChainPush
 1357 D1:DA77 3D -  -  -  	dec a
 1358 D1:DA78 28 3A -  -  	jr z, NEQVariableChainAns
 1359 D1:DA7A 3D -  -  -  	dec a
 1360 D1:DA7B CA B9 DA D1 	jp z, NEQVariableFunction
 1361 D1:DA7F C3 C3 AE D1 	jp NEQError
 1362 D1:DA83 -  -  -  -  NEQVariableNumber:
 1363 D1:DA83 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1364 D1:DA87 C3 48 DB D1 	jp NEQChainAnsNumber
 1365 D1:DA8B -  -  -  -  NEQVariableVariable:
 1366 D1:DA8B 79 -  -  -  	ld a, c
 1367 D1:DA8C BB -  -  -  	cp e
 1368 D1:DA8D 20 19 -  -  	jr nz, ++_
 1369 D1:DA8F FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1370 D1:DA93 3A 1F EA D0 	ld a, (tempToken)
 1371 D1:DA97 D6 6F -  -  	sub tNE
 1372 D1:DA99 28 02 -  -  	jr z, +_
 1373 D1:DA9B 3E 01 -  -  	ld a, 1
 1374 D1:DA9D 11 00 00 00 _:	ld de, 0
 1375 D1:DAA1 5F -  -  -  	ld e, a
 1376 D1:DAA2 36 00 -  -  	ld (hl), typeNumber
 1377 D1:DAA4 23 -  -  -  	inc hl
 1378 D1:DAA5 ED 1F -  -  	ld (hl), de
 1379 D1:DAA7 C9 -  -  -  	ret
 1380 D1:DAA8 CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1381 D1:DAAC C3 6C DB D1 	jp NEQChainAnsVariable
 1382 D1:DAB0 -  -  -  -  NEQVariableChainPush:
 1383 D1:DAB0 C3 3F AF D1 	jp UnknownError
 1384 D1:DAB4 -  -  -  -  NEQVariableChainAns:
 1385 D1:DAB4 59 -  -  -  	ld e, c
 1386 D1:DAB5 C3 6C DB D1 	jp NEQChainAnsVariable
 1387 D1:DAB9 -  -  -  -  NEQVariableFunction:
 1388 D1:DAB9 7B -  -  -  	ld a, e
 1389 D1:DABA 06 01 -  -  	ld b, OutputInDE
 1390 D1:DABC CD FF AC D1 	call GetFunction
 1391 D1:DAC0 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1392 D1:DAC4 -  -  -  -  NEQInsert:
 1393 D1:DAC4 21 B7 ED 52 	ld hl, 052EDB7h
 1394 D1:DAC8 CD 66 AC D1 	call InsertHL															; or a \ sbc hl, de
 1395 D1:DACC 11 00 00 00 	ld de, 0
 1396 D1:DAD0 21 20 01 23 	ld hl, 0230120h
 1397 D1:DAD4 3A 1F EA D0 	ld a, (tempToken)
 1398 D1:DAD8 FE 6A -  -  	cp tEq
 1399 D1:DADA 28 02 -  -  	jr z, +_
 1400 D1:DADC 2E 28 -  -  	ld l, 028h
 1401 D1:DADE 3E 21 -  -  _:	ld a, 021h
 1402 D1:DAE0 C3 A1 AC D1 	jp InsertADEHL															; ld hl, 0 \ jr [n]z, $+3 \ inc hl
 1403 D1:DAE4 -  -  -  -  NEQChainPushXXX:
 1404 D1:DAE4 DD 7E FC -  	ld a, (ix-4)
 1405 D1:DAE7 B7 -  -  -  	or a
 1406 D1:DAE8 28 12 -  -  	jr z, NEQChainPushNumber
 1407 D1:DAEA 3D -  -  -  	dec a
 1408 D1:DAEB 28 17 -  -  	jr z, NEQChainPushVariable
 1409 D1:DAED 3D -  -  -  	dec a
 1410 D1:DAEE 28 1C -  -  	jr z, NEQChainPushChainPush
 1411 D1:DAF0 3D -  -  -  	dec a
 1412 D1:DAF1 28 1D -  -  	jr z, NEQChainPushChainAns
 1413 D1:DAF3 3D -  -  -  	dec a
 1414 D1:DAF4 CA 21 DB D1 	jp z, NEQChainPushFunction
 1415 D1:DAF8 C3 C3 AE D1 	jp NEQError
 1416 D1:DAFC -  -  -  -  NEQChainPushNumber:
 1417 D1:DAFC 3E E1 -  -  	ld a, 0E1h
 1418 D1:DAFE CD AE AC D1 	call InsertA															; pop hl
 1419 D1:DB02 18 44 -  -  	jr NEQChainAnsNumber
 1420 D1:DB04 -  -  -  -  NEQChainPushVariable:
 1421 D1:DB04 3E E1 -  -  	ld a, 0E1h
 1422 D1:DB06 CD AE AC D1 	call InsertA															; pop hl
 1423 D1:DB0A 18 60 -  -  	jr NEQChainAnsVariable
 1424 D1:DB0C -  -  -  -  NEQChainPushChainPush:
 1425 D1:DB0C C3 3F AF D1 	jp UnknownError
 1426 D1:DB10 -  -  -  -  NEQChainPushChainAns:
 1427 D1:DB10 3A 96 EC D1 	ld a, (ExprOutput)
 1428 D1:DB14 B7 -  -  -  	or a
 1429 D1:DB15 3E D1 -  -  	ld a, 0D1h
 1430 D1:DB17 20 02 -  -  	jr nz, +_
 1431 D1:DB19 3E E1 -  -  	ld a, 0E1h
 1432 D1:DB1B CD AE AC D1 _:	call InsertA															; pop hl/de
 1433 D1:DB1F 18 A3 -  -  	jr NEQInsert
 1434 D1:DB21 -  -  -  -  NEQChainPushFunction:
 1435 D1:DB21 7B -  -  -  	ld a, e
 1436 D1:DB22 06 02 -  -  	ld b, OutputInHL
 1437 D1:DB24 CD FF AC D1 	call GetFunction
 1438 D1:DB28 3E D1 -  -  	ld a, 0D1h
 1439 D1:DB2A CD AE AC D1 	call InsertA															; pop de
 1440 D1:DB2E 18 94 -  -  _:	jr NEQInsert
 1441 D1:DB30 -  -  -  -  NEQChainAnsXXX:
 1442 D1:DB30 DD 7E FC -  	ld a, (ix-4)
 1443 D1:DB33 B7 -  -  -  	or a
 1444 D1:DB34 28 12 -  -  	jr z, NEQChainAnsNumber
 1445 D1:DB36 3D -  -  -  	dec a
 1446 D1:DB37 28 33 -  -  	jr z, NEQChainAnsVariable
 1447 D1:DB39 3D -  -  -  	dec a
 1448 D1:DB3A 28 4C -  -  	jr z, NEQChainAnsChainPush
 1449 D1:DB3C 3D -  -  -  	dec a
 1450 D1:DB3D 28 4D -  -  	jr z, NEQChainAnsChainAns
 1451 D1:DB3F 3D -  -  -  	dec a
 1452 D1:DB40 CA 90 DB D1 	jp z, NEQChainAnsFunction
 1453 D1:DB44 C3 C3 AE D1 	jp NEQError
 1454 D1:DB48 -  -  -  -  NEQChainAnsNumber:
 1455 D1:DB48 FD CB C0 5E 	bit op_is_last_one, (iy+fExpression1)
 1456 D1:DB4C 28 0C -  -  	jr z, +_
 1457 D1:DB4E 3A 1F EA D0 	ld a, (tempToken)
 1458 D1:DB52 FE 6F -  -  	cp tNE
 1459 D1:DB54 20 04 -  -  	jr nz, +_
 1460 D1:DB56 FD CB C0 AE 	res ans_set_z_flag, (iy+fExpression1)
 1461 D1:DB5A 3A 96 EC D1 _:	ld a, (ExprOutput)
 1462 D1:DB5E B7 -  -  -  	or a
 1463 D1:DB5F 3E 11 -  -  	ld a, 011h
 1464 D1:DB61 20 02 -  -  	jr nz, $+4
 1465 D1:DB63 3E 21 -  -  	ld a, 021h
 1466 D1:DB65 EB -  -  -  	ex de, hl
 1467 D1:DB66 CD 62 AC D1 	call InsertAHL															; ld hl/de, *
 1468 D1:DB6A 18 C2 -  -  	jr --_
 1469 D1:DB6C -  -  -  -  NEQChainAnsVariable:
 1470 D1:DB6C 26 17 -  -  	ld h, 017h
 1471 D1:DB6E 16 03 -  -  	ld d, 3
 1472 D1:DB70 ED 5C -  -  	mlt de
 1473 D1:DB72 7B -  -  -  	ld a, e
 1474 D1:DB73 2E DD -  -  	ld l, 0DDh
 1475 D1:DB75 CD 70 1D 02 	call _SetHLUToA
 1476 D1:DB79 3A 96 EC D1 	ld a, (ExprOutput)
 1477 D1:DB7D B7 -  -  -  	or a
 1478 D1:DB7E 20 02 -  -  	jr nz, $+4
 1479 D1:DB80 26 27 -  -  	ld h, 027h
 1480 D1:DB82 CD 66 AC D1 	call InsertHL															; ld hl/de, (ix+*)
 1481 D1:DB86 18 A6 -  -  	jr --_
 1482 D1:DB88 -  -  -  -  NEQChainAnsChainPush:
 1483 D1:DB88 C3 3F AF D1 	jp UnknownError
 1484 D1:DB8C -  -  -  -  NEQChainAnsChainAns:
 1485 D1:DB8C C3 3F AF D1 	jp UnknownError
 1486 D1:DB90 -  -  -  -  NEQChainAnsFunction:
 1487 D1:DB90 3A 96 EC D1 	ld a, (ExprOutput)
 1488 D1:DB94 87 -  -  -  	add a, a
 1489 D1:DB95 87 -  -  -  	add a, a
 1490 D1:DB96 87 -  -  -  	add a, a
 1491 D1:DB97 87 -  -  -  	add a, a
 1492 D1:DB98 C6 D5 -  -  	add a, 0D5h
 1493 D1:DB9A CD AE AC D1 	call InsertA															; push hl/de
 1494 D1:DB9E 7B -  -  -  	ld a, e
 1495 D1:DB9F 06 02 -  -  	ld b, OutputInHL
 1496 D1:DBA1 CD FF AC D1 	call GetFunction
 1497 D1:DBA5 3E D1 -  -  	ld a, 0D1h
 1498 D1:DBA7 CD AE AC D1 	call InsertA															; pop de
 1499 D1:DBAB C3 C4 DA D1 _:	jp NEQInsert
 1500 D1:DBAF -  -  -  -  NEQFunctionXXX:
 1501 D1:DBAF DD 7E FC -  	ld a, (ix-4)
 1502 D1:DBB2 B7 -  -  -  	or a
 1503 D1:DBB3 28 10 -  -  	jr z, NEQFunctionNumber
 1504 D1:DBB5 3D -  -  -  	dec a
 1505 D1:DBB6 28 18 -  -  	jr z, NEQFunctionVariable
 1506 D1:DBB8 3D -  -  -  	dec a
 1507 D1:DBB9 28 1C -  -  	jr z, NEQFunctionChainPush
 1508 D1:DBBB 3D -  -  -  	dec a
 1509 D1:DBBC 28 1D -  -  	jr z, NEQFunctionChainAns
 1510 D1:DBBE 3D -  -  -  	dec a
 1511 D1:DBBF 28 1D -  -  	jr z, NEQFunctionFunction
 1512 D1:DBC1 C3 C3 AE D1 	jp NEQError
 1513 D1:DBC5 -  -  -  -  NEQFunctionNumber:
 1514 D1:DBC5 79 -  -  -  	ld a, c
 1515 D1:DBC6 06 02 -  -  	ld b, OutputInHL
 1516 D1:DBC8 CD FF AC D1 	call GetFunction
 1517 D1:DBCC C3 48 DB D1 	jp NEQChainAnsNumber
 1518 D1:DBD0 -  -  -  -  NEQFunctionVariable:
 1519 D1:DBD0 79 -  -  -  	ld a, c
 1520 D1:DBD1 4B -  -  -  	ld c, e
 1521 D1:DBD2 5F -  -  -  	ld e, a
 1522 D1:DBD3 C3 B9 DA D1 	jp NEQVariableFunction
 1523 D1:DBD7 -  -  -  -  NEQFunctionChainPush:
 1524 D1:DBD7 C3 3F AF D1 	jp UnknownError
 1525 D1:DBDB -  -  -  -  NEQFunctionChainAns:
 1526 D1:DBDB 59 -  -  -  	ld e, c
 1527 D1:DBDC 18 B2 -  -  	jr NEQChainAnsFunction
 1528 D1:DBDE -  -  -  -  NEQFunctionFunction:
 1529 D1:DBDE 7B -  -  -  	ld a, e
 1530 D1:DBDF 06 01 -  -  	ld b, OutputInDE
 1531 D1:DBE1 CD FF AC D1 	call GetFunction
 1532 D1:DBE5 79 -  -  -  	ld a, c
 1533 D1:DBE6 06 02 -  -  	ld b, OutputInHL
 1534 D1:DBE8 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1535 D1:DBEC CD FF AC D1 	call GetFunction
 1536 D1:DBF0 18 B9 -  -  	jr -_
 1537 D1:DBF2 -  -  -  -  
 1538 D1:DBF2 -  -  -  -  XORANDNumberXXX:
 1539 D1:DBF2 DD 7E FC -  	ld a, (ix-4)
 1540 D1:DBF5 B7 -  -  -  	or a
 1541 D1:DBF6 28 10 -  -  	jr z, XORANDNumberNumber
 1542 D1:DBF8 3D -  -  -  	dec a
 1543 D1:DBF9 28 59 -  -  	jr z, XORANDNumberVariable
 1544 D1:DBFB 3D -  -  -  	dec a
 1545 D1:DBFC 28 5D -  -  	jr z, XORANDNumberChainPush
 1546 D1:DBFE 3D -  -  -  	dec a
 1547 D1:DBFF 28 5E -  -  	jr z, XORANDNumberChainAns
 1548 D1:DC01 3D -  -  -  	dec a
 1549 D1:DC02 28 61 -  -  	jr z, XORANDNumberFunction
 1550 D1:DC04 C3 D1 AE D1 	jp XORANDError
 1551 D1:DC08 -  -  -  -  XORANDNumberNumber:
 1552 D1:DC08 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1553 D1:DC0C B7 -  -  -  	or a
 1554 D1:DC0D ED 62 -  -  	sbc hl, hl
 1555 D1:DC0F 3A 1F EA D0 	ld a, (tempToken)
 1556 D1:DC13 FE 3D -  -  	cp tXor
 1557 D1:DC15 28 22 -  -  	jr z, ++_
 1558 D1:DC17 FE 3C -  -  	cp tOr
 1559 D1:DC19 28 0F -  -  	jr z, +_
 1560 D1:DC1B CD 48 1D 02 	call _ChkBCIs0
 1561 D1:DC1F 28 2F -  -  	jr z, +++_
 1562 D1:DC21 CD 4C 1D 02 	call _ChkDEIs0
 1563 D1:DC25 28 29 -  -  	jr z, +++_
 1564 D1:DC27 23 -  -  -  	inc hl
 1565 D1:DC28 18 26 -  -  	jr +++_
 1566 D1:DC2A CD 48 1D 02 _:	call _ChkBCIs0
 1567 D1:DC2E 47 -  -  -  	ld b, a
 1568 D1:DC2F CD 4C 1D 02 	call _ChkDEIs0
 1569 D1:DC33 B0 -  -  -  	or a, b
 1570 D1:DC34 28 1A -  -  	jr z, ++_
 1571 D1:DC36 23 -  -  -  	inc hl
 1572 D1:DC37 18 17 -  -  	jr ++_
 1573 D1:DC39 CD 4C 1D 02 _:	call _ChkDEIs0
 1574 D1:DC3D 11 00 00 00 	ld de, 0
 1575 D1:DC41 28 01 -  -  	jr z, $+3
 1576 D1:DC43 13 -  -  -  	inc de
 1577 D1:DC44 CD 48 1D 02 	call _ChkBCIs0
 1578 D1:DC48 3E 00 -  -  	ld a, 0
 1579 D1:DC4A 28 01 -  -  	jr z, $+3
 1580 D1:DC4C 3C -  -  -  	inc a
 1581 D1:DC4D AB -  -  -  	xor e
 1582 D1:DC4E 5F -  -  -  	ld e, a
 1583 D1:DC4F EB -  -  -  	ex de, hl
 1584 D1:DC50 DD 2F F9 -  _:	ld (ix-7), hl
 1585 D1:DC53 C9 -  -  -  	ret
 1586 D1:DC54 -  -  -  -  XORANDNumberVariable:
 1587 D1:DC54 C5 -  -  -  	push bc
 1588 D1:DC55 E1 -  -  -  	pop hl
 1589 D1:DC56 EB -  -  -  	ex de, hl
 1590 D1:DC57 E5 -  -  -  	push hl
 1591 D1:DC58 C1 -  -  -  	pop bc
 1592 D1:DC59 18 2B -  -  	jr XORANDVariableNumber
 1593 D1:DC5B -  -  -  -  XORANDNumberChainPush:
 1594 D1:DC5B C3 3F AF D1 	jp UnknownError
 1595 D1:DC5F -  -  -  -  XORANDNumberChainAns:
 1596 D1:DC5F C5 -  -  -  	push bc
 1597 D1:DC60 D1 -  -  -  	pop de
 1598 D1:DC61 C3 4E DD D1 	jp XORANDChainAnsNumber
 1599 D1:DC65 -  -  -  -  XORANDNumberFunction:
 1600 D1:DC65 C5 -  -  -  	push bc
 1601 D1:DC66 E1 -  -  -  	pop hl
 1602 D1:DC67 EB -  -  -  	ex de, hl
 1603 D1:DC68 E5 -  -  -  	push hl
 1604 D1:DC69 C1 -  -  -  	pop bc
 1605 D1:DC6A C3 B7 DD D1 	jp XORANDFunctionNumber
 1606 D1:DC6E -  -  -  -  XORANDVariableXXX:
 1607 D1:DC6E DD 7E FC -  	ld a, (ix-4)
 1608 D1:DC71 B7 -  -  -  	or a
 1609 D1:DC72 28 12 -  -  	jr z, XORANDVariableNumber
 1610 D1:DC74 3D -  -  -  	dec a
 1611 D1:DC75 28 17 -  -  	jr z, XORANDVariableVariable
 1612 D1:DC77 3D -  -  -  	dec a
 1613 D1:DC78 28 39 -  -  	jr z, XORANDVariableChainPush
 1614 D1:DC7A 3D -  -  -  	dec a
 1615 D1:DC7B 28 3A -  -  	jr z, XORANDVariableChainAns
 1616 D1:DC7D 3D -  -  -  	dec a
 1617 D1:DC7E CA BC DC D1 	jp z, XORANDVariableFunction
 1618 D1:DC82 C3 D1 AE D1 	jp XORANDError
 1619 D1:DC86 -  -  -  -  XORANDVariableNumber:
 1620 D1:DC86 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1621 D1:DC8A C3 4E DD D1 	jp XORANDChainAnsNumber
 1622 D1:DC8E -  -  -  -  XORANDVariableVariable:
 1623 D1:DC8E 79 -  -  -  	ld a, c
 1624 D1:DC8F BB -  -  -  	cp e
 1625 D1:DC90 20 19 -  -  	jr nz, ++_
 1626 D1:DC92 FD CB C0 E6 	set output_is_number, (iy+fExpression1)
 1627 D1:DC96 3A 1F EA D0 	ld a, (tempToken)
 1628 D1:DC9A D6 6F -  -  	sub tNE
 1629 D1:DC9C 28 02 -  -  	jr z, +_
 1630 D1:DC9E 3E 01 -  -  	ld a, 1
 1631 D1:DCA0 11 00 00 00 _:	ld de, 0
 1632 D1:DCA4 5F -  -  -  	ld e, a
 1633 D1:DCA5 36 00 -  -  	ld (hl), typeNumber
 1634 D1:DCA7 23 -  -  -  	inc hl
 1635 D1:DCA8 ED 1F -  -  	ld (hl), de
 1636 D1:DCAA C9 -  -  -  	ret
 1637 D1:DCAB CD 7B AC D1 _:	call InsertHIXC															; ld hl, (ix+*)
 1638 D1:DCAF C3 60 DD D1 	jp XORANDChainAnsVariable
 1639 D1:DCB3 -  -  -  -  XORANDVariableChainPush:
 1640 D1:DCB3 C3 3F AF D1 	jp UnknownError
 1641 D1:DCB7 -  -  -  -  XORANDVariableChainAns:
 1642 D1:DCB7 59 -  -  -  	ld e, c
 1643 D1:DCB8 C3 60 DD D1 	jp XORANDChainAnsVariable
 1644 D1:DCBC -  -  -  -  XORANDVariableFunction:
 1645 D1:DCBC 7B -  -  -  	ld a, e
 1646 D1:DCBD 06 01 -  -  	ld b, OutputInDE
 1647 D1:DCBF CD FF AC D1 	call GetFunction
 1648 D1:DCC3 CD 7B AC D1 	call InsertHIXC															; ld hl, (ix+*)
 1649 D1:DCC7 -  -  -  -  XORANDInsert:
 1650 D1:DCC7 ED 5B 76 EC 
              D1 -  -  -  	ld de, (programPtr)
 1651 D1:DCCC 21 01 F1 D1 	ld hl, XORANDData
 1652 D1:DCD0 06 A2 -  -  	ld b, 0A2h
 1653 D1:DCD2 3A 1F EA D0 	ld a, (tempToken)
 1654 D1:DCD6 FE 3D -  -  	cp tXor
 1655 D1:DCD8 20 02 -  -  	jr nz, +_
 1656 D1:DCDA 06 AA -  -  	ld b, 0AAh
 1657 D1:DCDC FE 3C -  -  _:	cp tOr
 1658 D1:DCDE 20 02 -  -  	jr nz, +_
 1659 D1:DCE0 06 B2 -  -  	ld b, 0B2h
 1660 D1:DCE2 78 -  -  -  _:	ld a, b
 1661 D1:DCE3 32 0B F1 D1 	ld (XORANDSMC), a
 1662 D1:DCE7 01 10 00 00 	ld bc, 16
 1663 D1:DCEB ED B0 -  -  	ldir
 1664 D1:DCED ED 53 76 EC 
              D1 -  -  -  	ld (programPtr), de
 1665 D1:DCF2 C9 -  -  -  	ret
 1666 D1:DCF3 -  -  -  -  XORANDChainPushXXX:
 1667 D1:DCF3 DD 7E FC -  	ld a, (ix-4)
 1668 D1:DCF6 B7 -  -  -  	or a
 1669 D1:DCF7 28 12 -  -  	jr z, XORANDChainPushNumber
 1670 D1:DCF9 3D -  -  -  	dec a
 1671 D1:DCFA 28 17 -  -  	jr z, XORANDChainPushVariable
 1672 D1:DCFC 3D -  -  -  	dec a
 1673 D1:DCFD 28 1C -  -  	jr z, XORANDChainPushChainPush
 1674 D1:DCFF 3D -  -  -  	dec a
 1675 D1:DD00 28 1D -  -  	jr z, XORANDChainPushChainAns
 1676 D1:DD02 3D -  -  -  	dec a
 1677 D1:DD03 CA 27 DD D1 	jp z, XORANDChainPushFunction
 1678 D1:DD07 C3 D1 AE D1 	jp XORANDError
 1679 D1:DD0B -  -  -  -  XORANDChainPushNumber:
 1680 D1:DD0B 3E E1 -  -  	ld a, 0E1h
 1681 D1:DD0D CD AE AC D1 	call InsertA															; pop hl
 1682 D1:DD11 18 3B -  -  	jr XORANDChainAnsNumber
 1683 D1:DD13 -  -  -  -  XORANDChainPushVariable:
 1684 D1:DD13 3E E1 -  -  	ld a, 0E1h
 1685 D1:DD15 CD AE AC D1 	call InsertA															; pop hl
 1686 D1:DD19 18 45 -  -  	jr XORANDChainAnsVariable
 1687 D1:DD1B -  -  -  -  XORANDChainPushChainPush:
 1688 D1:DD1B C3 3F AF D1 	jp UnknownError
 1689 D1:DD1F -  -  -  -  XORANDChainPushChainAns:
 1690 D1:DD1F 3E D1 -  -  	ld a, 0D1h
 1691 D1:DD21 CD AE AC D1 	call InsertA															; pop de
 1692 D1:DD25 18 A0 -  -  	jr XORANDInsert
 1693 D1:DD27 -  -  -  -  XORANDChainPushFunction:
 1694 D1:DD27 7B -  -  -  	ld a, e
 1695 D1:DD28 06 02 -  -  	ld b, OutputInHL
 1696 D1:DD2A CD FF AC D1 	call GetFunction
 1697 D1:DD2E 3E D1 -  -  	ld a, 0D1h
 1698 D1:DD30 CD AE AC D1 	call InsertA															; pop de
 1699 D1:DD34 18 91 -  -  _:	jr XORANDInsert
 1700 D1:DD36 -  -  -  -  XORANDChainAnsXXX:
 1701 D1:DD36 DD 7E FC -  	ld a, (ix-4)
 1702 D1:DD39 B7 -  -  -  	or a
 1703 D1:DD3A 28 12 -  -  	jr z, XORANDChainAnsNumber
 1704 D1:DD3C 3D -  -  -  	dec a
 1705 D1:DD3D 28 21 -  -  	jr z, XORANDChainAnsVariable
 1706 D1:DD3F 3D -  -  -  	dec a
 1707 D1:DD40 28 3A -  -  	jr z, XORANDChainAnsChainPush
 1708 D1:DD42 3D -  -  -  	dec a
 1709 D1:DD43 28 3B -  -  	jr z, XORANDChainAnsChainAns
 1710 D1:DD45 3D -  -  -  	dec a
 1711 D1:DD46 CA 84 DD D1 	jp z, XORANDChainAnsFunction
 1712 D1:DD4A C3 D1 AE D1 	jp XORANDError
 1713 D1:DD4E -  -  -  -  XORANDChainAnsNumber:
 1714 D1:DD4E 3A 96 EC D1 	ld a, (ExprOutput)
 1715 D1:DD52 B7 -  -  -  	or a
 1716 D1:DD53 3E 11 -  -  	ld a, 011h
 1717 D1:DD55 20 02 -  -  	jr nz, +_
 1718 D1:DD57 3E 21 -  -  	ld a, 021h
 1719 D1:DD59 EB -  -  -  _:	ex de, hl
 1720 D1:DD5A CD 62 AC D1 	call InsertAHL															; ld hl/de, *
 1721 D1:DD5E 18 D4 -  -  	jr --_
 1722 D1:DD60 -  -  -  -  XORANDChainAnsVariable:
 1723 D1:DD60 26 17 -  -  	ld h, 017h
 1724 D1:DD62 16 03 -  -  	ld d, 3
 1725 D1:DD64 ED 5C -  -  	mlt de
 1726 D1:DD66 7B -  -  -  	ld a, e
 1727 D1:DD67 2E DD -  -  	ld l, 0DDh
 1728 D1:DD69 CD 70 1D 02 	call _SetHLUToA
 1729 D1:DD6D 3A 96 EC D1 	ld a, (ExprOutput)
 1730 D1:DD71 B7 -  -  -  	or a
 1731 D1:DD72 20 02 -  -  	jr nz, $+4
 1732 D1:DD74 26 27 -  -  	ld h, 027h
 1733 D1:DD76 CD 66 AC D1 	call InsertHL															; ld hl/de, (ix+*)
 1734 D1:DD7A 18 B8 -  -  	jr --_
 1735 D1:DD7C -  -  -  -  XORANDChainAnsChainPush:
 1736 D1:DD7C C3 3F AF D1 	jp UnknownError
 1737 D1:DD80 -  -  -  -  XORANDChainAnsChainAns:
 1738 D1:DD80 C3 3F AF D1 	jp UnknownError
 1739 D1:DD84 -  -  -  -  XORANDChainAnsFunction:
 1740 D1:DD84 3A 96 EC D1 	ld a, (ExprOutput)
 1741 D1:DD88 87 -  -  -  	add a, a
 1742 D1:DD89 87 -  -  -  	add a, a
 1743 D1:DD8A 87 -  -  -  	add a, a
 1744 D1:DD8B 87 -  -  -  	add a, a
 1745 D1:DD8C C6 D5 -  -  	add a, 0D5h
 1746 D1:DD8E CD AE AC D1 	call InsertA															; push hl/de
 1747 D1:DD92 7B -  -  -  	ld a, e
 1748 D1:DD93 06 02 -  -  	ld b, OutputInHL
 1749 D1:DD95 CD FF AC D1 	call GetFunction
 1750 D1:DD99 3E D1 -  -  	ld a, 0D1h
 1751 D1:DD9B CD AE AC D1 	call InsertA															; pop de
 1752 D1:DD9F 18 93 -  -  _:	jr ---_
 1753 D1:DDA1 -  -  -  -  XORANDFunctionXXX:
 1754 D1:DDA1 DD 7E FC -  	ld a, (ix-4)
 1755 D1:DDA4 B7 -  -  -  	or a
 1756 D1:DDA5 28 10 -  -  	jr z, XORANDFunctionNumber
 1757 D1:DDA7 3D -  -  -  	dec a
 1758 D1:DDA8 28 18 -  -  	jr z, XORANDFunctionVariable
 1759 D1:DDAA 3D -  -  -  	dec a
 1760 D1:DDAB 28 1C -  -  	jr z, XORANDFunctionChainPush
 1761 D1:DDAD 3D -  -  -  	dec a
 1762 D1:DDAE 28 1D -  -  	jr z, XORANDFunctionChainAns
 1763 D1:DDB0 3D -  -  -  	dec a
 1764 D1:DDB1 28 1D -  -  	jr z, XORANDFunctionFunction
 1765 D1:DDB3 C3 D1 AE D1 	jp XORANDError
 1766 D1:DDB7 -  -  -  -  XORANDFunctionNumber:
 1767 D1:DDB7 79 -  -  -  	ld a, c
 1768 D1:DDB8 06 02 -  -  	ld b, OutputInHL
 1769 D1:DDBA CD FF AC D1 	call GetFunction
 1770 D1:DDBE C3 4E DD D1 	jp XORANDChainAnsNumber
 1771 D1:DDC2 -  -  -  -  XORANDFunctionVariable:
 1772 D1:DDC2 79 -  -  -  	ld a, c
 1773 D1:DDC3 4B -  -  -  	ld c, e
 1774 D1:DDC4 5F -  -  -  	ld e, a
 1775 D1:DDC5 C3 BC DC D1 	jp XORANDVariableFunction
 1776 D1:DDC9 -  -  -  -  XORANDFunctionChainPush:
 1777 D1:DDC9 C3 3F AF D1 	jp UnknownError
 1778 D1:DDCD -  -  -  -  XORANDFunctionChainAns:
 1779 D1:DDCD 59 -  -  -  	ld e, c
 1780 D1:DDCE 18 B4 -  -  	jr XORANDChainAnsFunction
 1781 D1:DDD0 -  -  -  -  XORANDFunctionFunction:
 1782 D1:DDD0 7B -  -  -  	ld a, e
 1783 D1:DDD1 06 01 -  -  	ld b, OutputInDE
 1784 D1:DDD3 CD FF AC D1 	call GetFunction
 1785 D1:DDD7 79 -  -  -  	ld a, c
 1786 D1:DDD8 06 02 -  -  	ld b, OutputInHL
 1787 D1:DDDA FD CB C0 F6 	set need_push, (iy+fExpression1)
 1788 D1:DDDE CD FF AC D1 	call GetFunction
 1789 D1:DDE2 18 BB -  -  	jr -_
 1790 D1:DDE4 -  -  -  -  	
 1791 D1:DDE4 -  -  -  -  StoNumberXXX:
 1792 D1:DDE4 DD 7E FC -  	ld a, (ix-4)
 1793 D1:DDE7 FE 03 -  -  	cp typeChainAns
 1794 D1:DDE9 28 0A -  -  	jr z, +_
 1795 D1:DDEB FE 01 -  -  	cp typeVariable
 1796 D1:DDED CA 18 DE D1 	jp z, ++_
 1797 D1:DDF1 C3 3F AF D1 	jp UnknownError
 1798 D1:DDF5 CD 6B DF D1 _:	call StoTestStoToListElement
 1799 D1:DDF9 C2 3F AF D1 	jp nz, UnknownError
 1800 D1:DDFD 3E 11 -  -  	ld a, 011h
 1801 D1:DDFF C5 -  -  -  	push bc
 1802 D1:DE00 E1 -  -  -  	pop hl
 1803 D1:DE01 CD 62 AC D1 	call InsertAHL															; ld de, *
 1804 D1:DE05 3E ED -  -  	ld a, 0EDh
 1805 D1:DE07 CD AE AC D1 	call InsertA															; ld (hl), de (1)
 1806 D1:DE0B 3E 1F -  -  	ld a, 01Fh
 1807 D1:DE0D CD AE AC D1 	call InsertA															; ld (hl), de (2)
 1808 D1:DE11 3E 00 -  -  	ld a, OutputIsInDE
 1809 D1:DE13 32 97 EC D1 	ld (ExprOutput2), a
 1810 D1:DE17 C9 -  -  -  	ret
 1811 D1:DE18 21 DD 2F 00 _:	ld hl, 0002FDDh
 1812 D1:DE1C 16 03 -  -  	ld d, 3
 1813 D1:DE1E ED 5C -  -  	mlt de
 1814 D1:DE20 7B -  -  -  	ld a, e
 1815 D1:DE21 CD 70 1D 02 	call _SetHLUToA
 1816 D1:DE25 C5 -  -  -  	push bc
 1817 D1:DE26 D1 -  -  -  	pop de
 1818 D1:DE27 CD 48 1D 02 	call _ChkBCIs0
 1819 D1:DE2B 3E 21 -  -  	ld a, 021h
 1820 D1:DE2D 20 08 -  -  	jr nz, +_
 1821 D1:DE2F 11 B7 ED 62 	ld de, 062EDB7h
 1822 D1:DE33 C3 A5 AC D1 	jp InsertDEHL															; or a \ sbc hl, hl \ ld (ix+*), hl
 1823 D1:DE37 C3 A1 AC D1 _:	jp InsertADEHL															; ld hl, * \ ld (ix+*), hl
 1824 D1:DE3B -  -  -  -  StoVariableXXX:
 1825 D1:DE3B DD 7E FC -  	ld a, (ix-4)
 1826 D1:DE3E FE 03 -  -  	cp typeChainAns
 1827 D1:DE40 28 0A -  -  	jr z, +_
 1828 D1:DE42 FE 01 -  -  	cp typeVariable
 1829 D1:DE44 CA 6C DE D1 	jp z, ++_
 1830 D1:DE48 C3 3F AF D1 	jp UnknownError
 1831 D1:DE4C CD 6B DF D1 _:	call StoTestStoToListElement
 1832 D1:DE50 C2 3F AF D1 	jp nz, UnknownError
 1833 D1:DE54 59 -  -  -  	ld e, c
 1834 D1:DE55 CD 84 AC D1 	call InsertIXE															; ld de, (ix+*)
 1835 D1:DE59 3E ED -  -  	ld a, 0EDh
 1836 D1:DE5B CD AE AC D1 	call InsertA															; ld (hl), de (1)
 1837 D1:DE5F 3E 1F -  -  	ld a, 01Fh
 1838 D1:DE61 CD AE AC D1 	call InsertA															; ld (hl), de (2)
 1839 D1:DE65 3E 00 -  -  	ld a, OutputIsInDE
 1840 D1:DE67 32 97 EC D1 	ld (ExprOutput2), a
 1841 D1:DE6B C9 -  -  -  	ret
 1842 D1:DE6C CD 7B AC D1 _:	call InsertHIXC
 1843 D1:DE70 21 DD 2F 00 	ld hl, 0002FDDh
 1844 D1:DE74 16 03 -  -  	ld d, 3
 1845 D1:DE76 ED 5C -  -  	mlt de
 1846 D1:DE78 7B -  -  -  	ld a, e
 1847 D1:DE79 CD 70 1D 02 	call _SetHLUToA
 1848 D1:DE7D C3 66 AC D1 	jp InsertHL																; ld ld (ix+*), hl
 1849 D1:DE81 -  -  -  -  StoChainPushXXX:
 1850 D1:DE81 DD 7E FC -  	ld a, (ix-4)
 1851 D1:DE84 FE 03 -  -  	cp typeChainAns
 1852 D1:DE86 C2 3F AF D1 _:	jp nz, UnknownError
 1853 D1:DE8A CD 6B DF D1 	call StoTestStoToListElement
 1854 D1:DE8E 20 F6 -  -  	jr nz, -_
 1855 D1:DE90 21 D1 ED 1F 	ld hl, 01FEDD1h
 1856 D1:DE94 CD 66 AC D1 	call InsertHL															; pop de \ ld (hl), de
 1857 D1:DE98 3E 00 -  -  	ld a, OutputIsInDE
 1858 D1:DE9A 32 97 EC D1 	ld (ExprOutput2), a
 1859 D1:DE9E C9 -  -  -  	ret
 1860 D1:DE9F -  -  -  -  StoChainAnsXXX:
 1861 D1:DE9F DD 7E FC -  	ld a, (ix-4)
 1862 D1:DEA2 FE 01 -  -  	cp typeVariable
 1863 D1:DEA4 C2 E7 AE D1 	jp nz, StoError
 1864 D1:DEA8 21 DD 2F 00 _:	ld hl, 0002FDDh
 1865 D1:DEAC 16 03 -  -  	ld d, 3
 1866 D1:DEAE ED 5C -  -  	mlt de
 1867 D1:DEB0 7B -  -  -  	ld a, e
 1868 D1:DEB1 CD 70 1D 02 	call _SetHLUToA
 1869 D1:DEB5 3A 96 EC D1 	ld a, (ExprOutput)
 1870 D1:DEB9 B7 -  -  -  	or a
 1871 D1:DEBA 20 02 -  -  	jr nz, $+4
 1872 D1:DEBC 26 1F -  -  	ld h, 01Fh
 1873 D1:DEBE 32 97 EC D1 	ld (ExprOutput2), a
 1874 D1:DEC2 C3 66 AC D1 	jp InsertHL																; ld (ix+*), hl/de
 1875 D1:DEC6 -  -  -  -  StoFunctionXXX:
 1876 D1:DEC6 DD 7E FC -  	ld a, (ix-4)
 1877 D1:DEC9 FE 03 -  -  	cp typeChainAns
 1878 D1:DECB 28 0A -  -  	jr z, +_
 1879 D1:DECD FE 01 -  -  	cp typeVariable
 1880 D1:DECF CA FD DE D1 	jp z, ++_
 1881 D1:DED3 C3 3F AF D1 	jp UnknownError
 1882 D1:DED7 CD 6B DF D1 _:	call StoTestStoToListElement
 1883 D1:DEDB C2 3F AF D1 	jp nz, UnknownError
 1884 D1:DEDF 79 -  -  -  	ld a, c
 1885 D1:DEE0 06 01 -  -  	ld b, OutputInDE
 1886 D1:DEE2 FD CB C0 F6 	set need_push, (iy+fExpression1)
 1887 D1:DEE6 CD FF AC D1 	call GetFunction
 1888 D1:DEEA 3E ED -  -  	ld a, 0EDh
 1889 D1:DEEC CD AE AC D1 	call InsertA															; ld (hl), de (1)
 1890 D1:DEF0 3E 1F -  -  	ld a, 01Fh
 1891 D1:DEF2 CD AE AC D1 	call InsertA															; ld (hl), de (2)
 1892 D1:DEF6 3E 00 -  -  	ld a, OutputIsInDE
 1893 D1:DEF8 32 97 EC D1 	ld (ExprOutput2), a
 1894 D1:DEFC C9 -  -  -  	ret
 1895 D1:DEFD 79 -  -  -  _:	ld a, c
 1896 D1:DEFE 06 02 -  -  	ld b, OutputInHL
 1897 D1:DF00 CD FF AC D1 	call GetFunction
 1898 D1:DF04 21 DD 2F 00 	ld hl, 0002FDDh
 1899 D1:DF08 16 03 -  -  	ld d, 3
 1900 D1:DF0A ED 5C -  -  	mlt de
 1901 D1:DF0C 7B -  -  -  	ld a, e
 1902 D1:DF0D CD 70 1D 02 	call _SetHLUToA
 1903 D1:DF11 C3 66 AC D1 	jp InsertHL																; ld (ix+*), hl
 1904 D1:DF15 -  -  -  -  StoListXXX:
 1905 D1:DF15 DD 7E FC -  	ld a, (ix-4)
 1906 D1:DF18 FE 06 -  -  	cp typeOSList
 1907 D1:DF1A C2 E7 AE D1 	jp nz, StoError
 1908 D1:DF1E 3E 21 -  -  	ld a, 021h
 1909 D1:DF20 CD AE AC D1 	call InsertA															; ld hl, *
 1910 D1:DF24 CD EA AC D1 	call InsertProgramPtrToDataOffset
 1911 D1:DF28 2A 8B EC D1 	ld hl, (programDataDataPtr)
 1912 D1:DF2C CD 66 AC D1 	call InsertHL															; ld hl, RANDOM
 1913 D1:DF30 3E 11 -  -  	ld a, 011h
 1914 D1:DF32 D5 -  -  -  	push de
 1915 D1:DF33 E1 -  -  -  	pop hl
 1916 D1:DF34 CD 62 AC D1 	call InsertAHL															; ld de, OSList
 1917 D1:DF38 3E 01 -  -  	ld a, 01h
 1918 D1:DF3A CD AE AC D1 	call InsertA															; ld bc, *
 1919 D1:DF3E C5 -  -  -  	push bc
 1920 D1:DF3F E1 -  -  -  	pop hl
 1921 D1:DF40 22 52 DF D1 	ld (StartData), hl
 1922 D1:DF44 ED 27 -  -  	ld hl, (hl)
 1923 D1:DF46 E5 -  -  -  	push hl
 1924 D1:DF47 C1 -  -  -  	pop bc
 1925 D1:DF48 CD 66 AC D1 	call InsertHL															; ld bc, LENGTH
 1926 D1:DF4C ED 5B 8B EC 
              D1 -  -  -  	ld de, (programDataDataPtr)
 1927 D1:DF51 -  -  -  -  StartData = $+1
 1928 D1:DF51 21 00 00 00 	ld hl, 0
 1929 D1:DF55 23 -  -  -  	inc hl
 1930 D1:DF56 23 -  -  -  	inc hl
 1931 D1:DF57 23 -  -  -  	inc hl
 1932 D1:DF58 ED B0 -  -  	ldir
 1933 D1:DF5A ED 53 8B EC 
              D1 -  -  -  	ld (programDataDataPtr), de
 1934 D1:DF5F 3E ED -  -  	ld a, 0EDh
 1935 D1:DF61 CD AE AC D1 	call InsertA															; ldir (1)
 1936 D1:DF65 3E B0 -  -  	ld a, 0B0h
 1937 D1:DF67 C3 AE AC D1 	jp InsertA																; ldir (2)
 1938 D1:DF6B -  -  -  -  	
 1939 D1:DF6B -  -  -  -  StoTestStoToListElement:
 1940 D1:DF6B 2A 76 EC D1 	ld hl, (programPtr)
 1941 D1:DF6F 2B -  -  -  	dec hl
 1942 D1:DF70 7E -  -  -  	ld a, (hl)
 1943 D1:DF71 FE 27 -  -  	cp 027h
 1944 D1:DF73 20 0B -  -  	jr nz, StoLastOpcodeNotHLHL
 1945 D1:DF75 2B -  -  -  	dec hl
 1946 D1:DF76 7E -  -  -  	ld a, (hl)
 1947 D1:DF77 FE ED -  -  	cp 0EDh
 1948 D1:DF79 20 05 -  -  	jr nz, StoLastOpcodeNotHLHL
 1949 D1:DF7B 22 76 EC D1 	ld (programPtr), hl
 1950 D1:DF7F C9 -  -  -  	ret
 1951 D1:DF80 -  -  -  -  StoLastOpcodeNotHLHL:
 1952 D1:DF80 2A 76 EC D1 	ld hl, (programPtr)
 1953 D1:DF84 2B -  -  -  	dec hl
 1954 D1:DF85 2B -  -  -  	dec hl
 1955 D1:DF86 2B -  -  -  	dec hl
 1956 D1:DF87 2B -  -  -  	dec hl
 1957 D1:DF88 7E -  -  -  	ld a, (hl)
 1958 D1:DF89 FE 2A -  -  	cp 02Ah
 1959 D1:DF8B C0 -  -  -  	ret nz
 1960 D1:DF8C 36 21 -  -  	ld (hl), 021h
 1961 D1:DF8E C9 -  -  -  	ret
Listing for file "ICE.asm"
  463 D1:DF8F -  -  -  -  #include "operators functions/function_for.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operators functions\function_for.asm"
    1 D1:DF8F -  -  -  -  functionFor:
    2 D1:DF8F 21 93 EC D1 	ld hl, amountOfEnds
    3 D1:DF93 34 -  -  -  	inc (hl)
    4 D1:DF94 3E 01 -  -  	ld a, 1
    5 D1:DF96 32 90 EC D1 	ld (openedParensF), a
    6 D1:DF9A FD 36 AF 00 	ld (iy+fFunction2), 0
    7 D1:DF9E CD 28 10 02 	call _IncFetch
    8 D1:DFA2 D6 41 -  -  	sub tA
    9 D1:DFA4 DA 14 E2 D1 	jp c, functionForSmall
   10 D1:DFA8 FE 1B -  -  	cp ttheta+1-tA
   11 D1:DFAA D2 14 E2 D1 	jp nc, functionForSmall
   12 D1:DFAE -  -  -  -  	; loop variable
   13 D1:DFAE 47 -  -  -  	ld b, a
   14 D1:DFAF 87 -  -  -  	add a, a
   15 D1:DFB0 80 -  -  -  	add a, b
   16 D1:DFB1 32 E9 DF D1 	ld (ForVariable1), a
   17 D1:DFB5 6F -  -  -  	ld l, a
   18 D1:DFB6 E5 -  -  -  	push hl
   19 D1:DFB7 CD 28 10 02 		call _IncFetch
   20 D1:DFBB DA 05 AF D1 _:		jp c, ErrorSyntax
   21 D1:DFBF FE 2B -  -  		cp tComma
   22 D1:DFC1 C2 05 AF D1 		jp nz, ErrorSyntax
   23 D1:DFC5 CD 28 10 02 		call _IncFetch
   24 D1:DFC9 -  -  -  -  		; loop start point
   25 D1:DFC9 2A 76 EC D1 		ld hl, (programPtr)
   26 D1:DFCD E5 -  -  -  		push hl
   27 D1:DFCE 21 C6 52 D0 			ld hl, tempArg1
   28 D1:DFD2 22 76 EC D1 			ld (programPtr), hl
   29 D1:DFD6 CD 2D B2 D1 			call ParseExpression
   30 D1:DFDA FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
   31 D1:DFDE FD CB BF 8E 			res triggered_a_comma, (iy+fExpression2)
   32 D1:DFE2 CA 05 AF D1 			jp z, ErrorSyntax
   33 D1:DFE6 -  -  -  -  ForVariable1 = $+3
   34 D1:DFE6 21 DD 2F 00 			ld hl, 0002FDDh
   35 D1:DFEA CD 66 AC D1 			call InsertHL										; ld (ix+*), hl
   36 D1:DFEE CD 28 10 02 			call _IncFetch
   37 D1:DFF2 38 C7 -  -  			jr c, -_
   38 D1:DFF4 2A 76 EC D1 			ld hl, (programPtr)
   39 D1:DFF8 11 C6 52 D0 			ld de, tempArg1
   40 D1:DFFC B7 -  -  -  			or a
   41 D1:DFFD ED 52 -  -  			sbc hl, de
   42 D1:DFFF EB -  -  -  			ex de, hl
   43 D1:E000 E1 -  -  -  		pop hl
   44 D1:E001 22 76 EC D1 		ld (programPtr), hl
   45 D1:E005 D5 -  -  -  		push de
   46 D1:E006 -  -  -  -  			; loop end point
   47 D1:E006 CD 2D B2 D1 			call ParseExpression
   48 D1:E00A FD CB C0 66 			bit output_is_number, (iy+fExpression1)
   49 D1:E00E 20 14 -  -  			jr nz, ForEndPointIsNumber
   50 D1:E010 -  -  -  -  ForEndPointIsExpression:
   51 D1:E010 3E 22 -  -  			ld a, 022h
   52 D1:E012 CD AE AC D1 			call InsertA										; ld (******), hl
   53 D1:E016 2A 76 EC D1 			ld hl, (programPtr)
   54 D1:E01A 22 0C E1 D1 			ld (ForEndPointExpression), hl
   55 D1:E01E CD 66 AC D1 			call InsertHL										; ld (RANDOM), hl
   56 D1:E022 18 17 -  -  			jr ForGetStep
   57 D1:E024 -  -  -  -  ForEndPointIsNumber:
   58 D1:E024 FD CB AF D6 			set end_point_is_number, (iy+fFunction2)
   59 D1:E028 2A 76 EC D1 			ld hl, (programPtr)
   60 D1:E02C 2B -  -  -  			dec hl
   61 D1:E02D 2B -  -  -  			dec hl
   62 D1:E02E 2B -  -  -  			dec hl
   63 D1:E02F ED 17 -  -  			ld de, (hl)
   64 D1:E031 2B -  -  -  			dec hl
   65 D1:E032 22 76 EC D1 			ld (programPtr), hl
   66 D1:E036 ED 53 1A E1 
              D1 -  -  -  			ld (ForFixedEndPoint), de
   67 D1:E03B -  -  -  -  ForGetStep:
   68 D1:E03B FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
   69 D1:E03F FD CB BF 8E 			res triggered_a_comma, (iy+fExpression2)
   70 D1:E043 20 0B -  -  			jr nz, +_
   71 D1:E045 -  -  -  -  			; loop step
   72 D1:E045 FD CB AF CE 			set for_step_is_number, (iy+fFunction2)
   73 D1:E049 21 01 00 00 			ld hl, 1
   74 D1:E04D E5 -  -  -  			push hl
   75 D1:E04E 18 76 -  -  				jr ForStart
   76 D1:E050 CD 28 10 02 _:			call _IncFetch
   77 D1:E054 DA 05 AF D1 			jp c, ErrorSyntax
   78 D1:E058 FE B0 -  -  			cp tChs
   79 D1:E05A 20 0C -  -  			jr nz, +_
   80 D1:E05C FD CB AF C6 			set negative_for_step, (iy+fFunction2)
   81 D1:E060 CD 28 10 02 			call _IncFetch
   82 D1:E064 DA 05 AF D1 			jp c, ErrorSyntax
   83 D1:E068 FE 41 -  -  _:			cp tA
   84 D1:E06A 38 34 -  -  			jr c, ForGetStepNumber
   85 D1:E06C FE 5C -  -  			cp ttheta+1
   86 D1:E06E D2 A0 E0 D1 			jp nc, ForGetStepNumber
   87 D1:E072 -  -  -  -  ForGetStepVariable:
   88 D1:E072 FD CB AF 8E 			res for_step_is_number, (iy+fFunction2)
   89 D1:E076 CD 2C 10 02 			call _CurFetch
   90 D1:E07A D6 41 -  -  			sub tA
   91 D1:E07C 4F -  -  -  			ld c, a
   92 D1:E07D CD 7B AC D1 			call InsertHIXC										; ld hl, (ix+*)
   93 D1:E081 CD C0 0F 02 			call _NxtFetch
   94 D1:E085 DA 05 AF D1 			jp c, ErrorSyntax
   95 D1:E089 FE 3F -  -  			cp tEnter
   96 D1:E08B C2 05 AF D1 			jp nz, ErrorSyntax
   97 D1:E08F 3E 22 -  -  			ld a, 022h
   98 D1:E091 CD AE AC D1 			call InsertA										; ld (*), hl
   99 D1:E095 2A 76 EC D1 			ld hl, (programPtr)
  100 D1:E099 E5 -  -  -  			push hl
  101 D1:E09A CD 66 AC D1 				call InsertHL									; ld (RANDOM), hl
  102 D1:E09E 18 26 -  -  				jr ForStart
  103 D1:E0A0 -  -  -  -  ForGetStepNumber:
  104 D1:E0A0 FD CB AF CE 			set for_step_is_number, (iy+fFunction2)
  105 D1:E0A4 CD 2D B2 D1 			call ParseExpression
  106 D1:E0A8 FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
  107 D1:E0AC 20 BA -  -  			jr nz, -_
  108 D1:E0AE FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  109 D1:E0B2 CA 05 AF D1 			jp z, ErrorSyntax
  110 D1:E0B6 2A 76 EC D1 			ld hl, (programPtr)
  111 D1:E0BA 2B -  -  -  			dec hl
  112 D1:E0BB 2B -  -  -  			dec hl
  113 D1:E0BC 2B -  -  -  			dec hl
  114 D1:E0BD 2B -  -  -  			dec hl
  115 D1:E0BE 22 76 EC D1 			ld (programPtr), hl
  116 D1:E0C2 23 -  -  -  			inc hl
  117 D1:E0C3 ED 27 -  -  			ld hl, (hl)
  118 D1:E0C5 E5 -  -  -  			push hl
  119 D1:E0C6 -  -  -  -  ForStart:
  120 D1:E0C6 E1 -  -  -  			pop hl
  121 D1:E0C7 D1 -  -  -  		pop de
  122 D1:E0C8 E5 -  -  -  		push hl
  123 D1:E0C9 2A 76 EC D1 			ld hl, (programPtr)
  124 D1:E0CD 19 -  -  -  			add hl, de
  125 D1:E0CE E5 -  -  -  			push hl
  126 D1:E0CF D5 -  -  -  				push de
  127 D1:E0D0 C1 -  -  -  				pop bc
  128 D1:E0D1 ED 5B 76 EC 
              D1 -  -  -  				ld de, (programPtr)
  129 D1:E0D6 21 C6 52 D0 				ld hl, tempArg1
  130 D1:E0DA ED B0 -  -  				ldir
  131 D1:E0DC ED 53 76 EC 
              D1 -  -  -  				ld (programPtr), de
  132 D1:E0E1 FD CB AF 56 				bit end_point_is_number, (iy+fFunction2)
  133 D1:E0E5 20 30 -  -  				jr nz, ForInsertEndPointNumber
  134 D1:E0E7 -  -  -  -  ForInsertEndPointExpression:
  135 D1:E0E7 3E B7 -  -  				ld a, 0B7h
  136 D1:E0E9 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  137 D1:E0ED 20 08 -  -  				jr nz, +_
  138 D1:E0EF FD CB AF 56 				bit end_point_is_number, (iy+fFunction2)
  139 D1:E0F3 20 02 -  -  				jr nz, +_
  140 D1:E0F5 3E 37 -  -  				ld a, 037h
  141 D1:E0F7 32 29 E1 D1 _:				ld (ForSetCarryFlag), a
  142 D1:E0FB 3E 11 -  -  				ld a, 011h
  143 D1:E0FD CD AE AC D1 				call InsertA										; ld de, *
  144 D1:E101 2A 76 EC D1 				ld hl, (programPtr)
  145 D1:E105 11 81 7C FC 				ld de, UserMem-program
  146 D1:E109 19 -  -  -  				add hl, de
  147 D1:E10A EB -  -  -  				ex de, hl
  148 D1:E10B -  -  -  -  ForEndPointExpression = $+1
  149 D1:E10B 21 00 00 00 				ld hl, 0
  150 D1:E10F ED 1F -  -  				ld (hl), de
  151 D1:E111 CD 66 AC D1 				call InsertHL										; ld de, RANDOM
  152 D1:E115 18 11 -  -  				jr ForSkip
  153 D1:E117 -  -  -  -  ForInsertEndPointNumber:
  154 D1:E117 3E 11 -  -  				ld a, 011h
  155 D1:E119 -  -  -  -  ForFixedEndPoint = $+1
  156 D1:E119 21 00 00 00 				ld hl, 0
  157 D1:E11D FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  158 D1:E121 20 01 -  -  				jr nz, +_
  159 D1:E123 23 -  -  -  				inc hl
  160 D1:E124 CD 62 AC D1 _:				call InsertAHL										; ld de, *
  161 D1:E128 -  -  -  -  ForSkip:
  162 D1:E128 -  -  -  -  ForSetCarryFlag = $+1
  163 D1:E128 21 B7 ED 52 				ld hl, 052EDB7h
  164 D1:E12C CD 66 AC D1 				call InsertHL										; or a \ sbc hl, de
  165 D1:E130 3E D2 -  -  				ld a, 0D2h
  166 D1:E132 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  167 D1:E136 28 02 -  -  				jr z, +_
  168 D1:E138 C6 08 -  -  				add a, 8
  169 D1:E13A CD AE AC D1 _:				call InsertA										; jp [n]c, *
  170 D1:E13E 2A 76 EC D1 				ld hl, (programPtr)
  171 D1:E142 E5 -  -  -  				push hl
  172 D1:E143 CD 66 AC D1 					call InsertHL									; jp [n]c, RANDOM
  173 D1:E147 FD 46 AF -  					ld b, (iy+fFunction2)
  174 D1:E14A C5 -  -  -  					push bc
  175 D1:E14B CD AA AA D1 						call ParseProgramUntilEnd
  176 D1:E14F C1 -  -  -  					pop bc
  177 D1:E150 FD 70 AF -  					ld (iy+fFunction2), b
  178 D1:E153 FE D0 -  -  					cp tElse
  179 D1:E155 CA 05 AF D1 					jp z, ErrorSyntax
  180 D1:E159 DD 21 00 00 
              00 -  -  -  					ld ix, 0
  181 D1:E15E DD 39 -  -  					add ix, sp
  182 D1:E160 DD 7E 09 -  					ld a, (ix+9)
  183 D1:E163 21 DD 27 00 					ld hl, 00027DDh
  184 D1:E167 CD 70 1D 02 					call _SetHLUToA
  185 D1:E16B CD 66 AC D1 					call InsertHL									; ld hl, (ix+*)
  186 D1:E16F C1 -  -  -  				pop bc
  187 D1:E170 D1 -  -  -  			pop de
  188 D1:E171 E1 -  -  -  		pop hl
  189 D1:E172 D5 -  -  -  		push de
  190 D1:E173 C5 -  -  -  			push bc
  191 D1:E174 FD CB AF 4E 				bit for_step_is_number, (iy+fFunction2)
  192 D1:E178 28 19 -  -  				jr z, InsertVariableChange
  193 D1:E17A -  -  -  -  InsertNumberChange:
  194 D1:E17A EB -  -  -  				ex de, hl
  195 D1:E17B 3E 01 -  -  				ld a, 1
  196 D1:E17D 32 96 EC D1 				ld (ExprOutput), a
  197 D1:E181 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  198 D1:E185 28 06 -  -  				jr z, $+8
  199 D1:E187 CD 8A D1 D1 				call SubChainAnsNumber
  200 D1:E18B 18 04 -  -  				jr $+6
  201 D1:E18D CD 52 D3 D1 				call AddChainAnsNumber
  202 D1:E191 18 29 -  -  				jr InsertStop
  203 D1:E193 -  -  -  -  InsertVariableChange:
  204 D1:E193 EB -  -  -  				ex de, hl
  205 D1:E194 3E 11 -  -  				ld a, 011h
  206 D1:E196 CD AE AC D1 				call InsertA										; ld de, *
  207 D1:E19A 2A 76 EC D1 				ld hl, (programPtr)
  208 D1:E19E 01 81 7C FC 				ld bc, UserMem-program
  209 D1:E1A2 09 -  -  -  				add hl, bc
  210 D1:E1A3 EB -  -  -  				ex de, hl
  211 D1:E1A4 ED 1F -  -  				ld (hl), de
  212 D1:E1A6 CD 66 AC D1 				call InsertHL										; ld de, RANDOM
  213 D1:E1AA 3E 19 -  -  				ld a, 019h
  214 D1:E1AC 21 B7 ED 52 				ld hl, 052EDB7h
  215 D1:E1B0 FD CB AF 46 				bit negative_for_step, (iy+fFunction2)
  216 D1:E1B4 C4 66 AC D1 				call nz, InsertHL									; or a \ sbc hl, de
  217 D1:E1B8 CC AE AC D1 				call z, InsertA										; add hl, de
  218 D1:E1BC -  -  -  -  InsertStop:
  219 D1:E1BC C1 -  -  -  			pop bc
  220 D1:E1BD D1 -  -  -  		pop de
  221 D1:E1BE E1 -  -  -  	pop hl
  222 D1:E1BF 7D -  -  -  	ld a, l
  223 D1:E1C0 21 DD 2F 00 	ld hl, 0002FDDh
  224 D1:E1C4 CD 70 1D 02 	call _SetHLUToA
  225 D1:E1C8 CD 66 AC D1 	call InsertHL													; ld (ix+*), hl
  226 D1:E1CC 2A 76 EC D1 	ld hl, (programPtr)
  227 D1:E1D0 B7 -  -  -  	or a
  228 D1:E1D1 ED 52 -  -  	sbc hl, de
  229 D1:E1D3 7D -  -  -  	ld a, l
  230 D1:E1D4 2F -  -  -  	cpl
  231 D1:E1D5 3D -  -  -  	dec a
  232 D1:E1D6 FE 80 -  -  	cp %10000000
  233 D1:E1D8 30 15 -  -  	jr nc, ForSmallLoop
  234 D1:E1DA -  -  -  -  ForBigLoop:
  235 D1:E1DA 3E C3 -  -  	ld a, 0C3h
  236 D1:E1DC FD CB AF 46 	bit negative_for_step, (iy+fFunction2)
  237 D1:E1E0 28 02 -  -  	jr z, $+4
  238 D1:E1E2 3E D2 -  -  	ld a, 0D2h
  239 D1:E1E4 21 81 7C FC 	ld hl, UserMem-program
  240 D1:E1E8 19 -  -  -  	add hl, de
  241 D1:E1E9 CD 62 AC D1 	call InsertAHL													; jp [nc], ******
  242 D1:E1ED 18 1A -  -  	jr ForLoopInsert
  243 D1:E1EF -  -  -  -  ForSmallLoop:
  244 D1:E1EF DD 6F -  -  	ld ixl, a
  245 D1:E1F1 3E 18 -  -  	ld a, 018h
  246 D1:E1F3 FD CB AF 46 	bit negative_for_step, (iy+fFunction2)
  247 D1:E1F7 28 02 -  -  	jr z, $+4
  248 D1:E1F9 3E 30 -  -  	ld a, 030h
  249 D1:E1FB CD AE AC D1 	call InsertA													; jr [nc], **
  250 D1:E1FF DD 7D -  -  	ld a, ixl
  251 D1:E201 CD AE AC D1 	call InsertA													; jr [nc], **
  252 D1:E205 2A 76 EC D1 	ld hl, (programPtr)
  253 D1:E209 -  -  -  -  ForLoopInsert:
  254 D1:E209 11 81 7C FC 	ld de, UserMem-program
  255 D1:E20D 19 -  -  -  	add hl, de
  256 D1:E20E EB -  -  -  	ex de, hl
  257 D1:E20F C5 -  -  -  	push bc
  258 D1:E210 E1 -  -  -  	pop hl
  259 D1:E211 ED 1F -  -  	ld (hl), de
  260 D1:E213 C9 -  -  -  	ret
  261 D1:E214 -  -  -  -  	
  262 D1:E214 -  -  -  -  functionForSmall:
  263 D1:E214 CD 2D B2 D1 	call ParseExpression
  264 D1:E218 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  265 D1:E21C 28 10 -  -  	jr z, +_
  266 D1:E21E 2A 76 EC D1 	ld hl, (programPtr)
  267 D1:E222 2B -  -  -  	dec hl
  268 D1:E223 2B -  -  -  	dec hl
  269 D1:E224 22 76 EC D1 	ld (programPtr), hl
  270 D1:E228 2B -  -  -  	dec hl
  271 D1:E229 2B -  -  -  	dec hl
  272 D1:E22A 36 06 -  -  	ld (hl), 06h													; ld b, *
  273 D1:E22C 18 06 -  -  	jr ++_
  274 D1:E22E 3E 45 -  -  _:	ld a, 045h
  275 D1:E230 CD AE AC D1 	call InsertA													; ld b, l
  276 D1:E234 2A 76 EC D1 _:	ld hl, (programPtr)
  277 D1:E238 E5 -  -  -  	push hl
  278 D1:E239 3E C5 -  -  		ld a, 0C5h
  279 D1:E23B CD AE AC D1 		call InsertA												; push bc
  280 D1:E23F CD AA AA D1 		call ParseProgramUntilEnd
  281 D1:E243 3E C1 -  -  		ld a, 0C1h
  282 D1:E245 CD AE AC D1 		call InsertA												; pop bc
  283 D1:E249 D1 -  -  -  	pop de
  284 D1:E24A 2A 76 EC D1 	ld hl, (programPtr)
  285 D1:E24E B7 -  -  -  	or a
  286 D1:E24F ED 52 -  -  	sbc hl, de
  287 D1:E251 7C -  -  -  	ld a, h
  288 D1:E252 B7 -  -  -  	or a
  289 D1:E253 C2 57 AF D1 _:	jp nz, ErrorTooLargeLoop
  290 D1:E257 7D -  -  -  	ld a, l
  291 D1:E258 2F -  -  -  	cpl
  292 D1:E259 3D -  -  -  	dec a
  293 D1:E25A FE 80 -  -  	cp %10000000
  294 D1:E25C DA 53 E2 D1 	jp c, -_
  295 D1:E260 47 -  -  -  	ld b, a
  296 D1:E261 3E 10 -  -  	ld a, 010h
  297 D1:E263 CD AE AC D1 	call InsertA													; djnz *
  298 D1:E267 78 -  -  -  	ld a, b
  299 D1:E268 C3 AE AC D1 	jp InsertA														; djnz *
Listing for file "ICE.asm"
  464 D1:E26C -  -  -  -  #include "operators functions/function_C.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\operators functions\function_C.asm"
    1 D1:E26C -  -  -  -  CFunction0Args:
    2 D1:E26C FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
    3 D1:E270 C2 05 AF D1 	jp nz, ErrorSyntax
    4 D1:E274 21 A2 EC D1 	ld hl, usedCroutines
    5 D1:E278 -  -  -  -  CFunction0ArgsSMC = $+1
    6 D1:E278 11 00 00 00 	ld de, 0
    7 D1:E27C 19 -  -  -  	add hl, de
    8 D1:E27D 4E -  -  -  	ld c, (hl)
    9 D1:E27E 06 04 -  -  	ld b, 4
   10 D1:E280 ED 4C -  -  	mlt bc
   11 D1:E282 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
   12 D1:E286 09 -  -  -  	add hl, bc
   13 D1:E287 C3 77 AC D1 	jp InsertCallHL															; call *
   14 D1:E28B -  -  -  -  	
   15 D1:E28B -  -  -  -  CFunction1Arg:
   16 D1:E28B FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
   17 D1:E28F CA 05 AF D1 	jp z, ErrorSyntax
   18 D1:E293 CD 28 10 02 	call _IncFetch
   19 D1:E297 CD 2D B2 D1 	call ParseExpression
   20 D1:E29B FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
   21 D1:E29F 28 14 -  -  	jr z, +_
   22 D1:E2A1 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
   23 D1:E2A5 28 0E -  -  	jr z, +_
   24 D1:E2A7 2A 76 EC D1 	ld hl, (programPtr)
   25 D1:E2AB 2B -  -  -  	dec hl
   26 D1:E2AC 2B -  -  -  	dec hl
   27 D1:E2AD 22 76 EC D1 	ld (programPtr), hl
   28 D1:E2B1 2B -  -  -  	dec hl
   29 D1:E2B2 2B -  -  -  	dec hl
   30 D1:E2B3 36 2E -  -  	ld (hl), 02Eh															; ld l, *
   31 D1:E2B5 CD D7 AC D1 _:	call InsertPushHLDE
   32 D1:E2B9 21 A2 EC D1 	ld hl, usedCroutines
   33 D1:E2BD -  -  -  -  CFunction1ArgSMC = $+1
   34 D1:E2BD 11 00 00 00 	ld de, 0
   35 D1:E2C1 19 -  -  -  	add hl, de
   36 D1:E2C2 4E -  -  -  	ld c, (hl)
   37 D1:E2C3 06 04 -  -  	ld b, 4
   38 D1:E2C5 ED 4C -  -  	mlt bc
   39 D1:E2C7 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
   40 D1:E2CB 09 -  -  -  	add hl, bc
   41 D1:E2CC CD 77 AC D1 	call InsertCallHL														; call *
   42 D1:E2D0 3E E1 -  -  	ld a, 0E1h
   43 D1:E2D2 C3 AE AC D1 	jp InsertA																; pop hl
   44 D1:E2D6 -  -  -  -  		
   45 D1:E2D6 -  -  -  -  CFunction2Args:
   46 D1:E2D6 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
   47 D1:E2DA CA 05 AF D1 	jp z, ErrorSyntax
   48 D1:E2DE CD 28 10 02 	call _IncFetch
   49 D1:E2E2 2A 76 EC D1 	ld hl, (programPtr)
   50 D1:E2E6 E5 -  -  -  	push hl
   51 D1:E2E7 21 C6 52 D0 		ld hl, tempArg1
   52 D1:E2EB 22 76 EC D1 		ld (programPtr), hl
   53 D1:E2EF CD 2D B2 D1 		call ParseExpression
   54 D1:E2F3 FD CB BF 4E 		bit triggered_a_comma, (iy+fExpression2)
   55 D1:E2F7 CA 05 AF D1 		jp z, ErrorSyntax
   56 D1:E2FB FD CB B0 66 		bit arg1_is_small, (iy+fFunction1)
   57 D1:E2FF 28 18 -  -  		jr z, +_
   58 D1:E301 FD CB C0 66 		bit output_is_number, (iy+fExpression1)
   59 D1:E305 28 12 -  -  		jr z, +_
   60 D1:E307 2A 76 EC D1 		ld hl, (programPtr)
   61 D1:E30B 2B -  -  -  		dec hl
   62 D1:E30C 2B -  -  -  		dec hl
   63 D1:E30D 22 76 EC D1 		ld (programPtr), hl
   64 D1:E311 2B -  -  -  		dec hl
   65 D1:E312 2B -  -  -  		dec hl
   66 D1:E313 36 2E -  -  		ld (hl), 02Eh														; ld l, *
   67 D1:E315 23 -  -  -  		inc hl
   68 D1:E316 ED 17 -  -  		ld de, (hl)
   69 D1:E318 73 -  -  -  		ld (hl), e
   70 D1:E319 CD D7 AC D1 _:		call InsertPushHLDE
   71 D1:E31D E1 -  -  -  	pop hl
   72 D1:E31E ED 5B 76 EC 
              D1 -  -  -  	ld de, (programPtr)
   73 D1:E323 22 76 EC D1 	ld (programPtr), hl
   74 D1:E327 D5 -  -  -  	push de
   75 D1:E328 CD 28 10 02 		call _IncFetch
   76 D1:E32C CD 2D B2 D1 		call ParseExpression
   77 D1:E330 FD CB BF 4E 		bit triggered_a_comma, (iy+fExpression2)
   78 D1:E334 C2 05 AF D1 		jp nz, ErrorSyntax
   79 D1:E338 FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
   80 D1:E33C 28 18 -  -  		jr z, +_
   81 D1:E33E FD CB C0 66 		bit output_is_number, (iy+fExpression1)
   82 D1:E342 28 12 -  -  		jr z, +_
   83 D1:E344 2A 76 EC D1 		ld hl, (programPtr)
   84 D1:E348 2B -  -  -  		dec hl
   85 D1:E349 2B -  -  -  		dec hl
   86 D1:E34A 22 76 EC D1 		ld (programPtr), hl
   87 D1:E34E 2B -  -  -  		dec hl
   88 D1:E34F 2B -  -  -  		dec hl
   89 D1:E350 36 2E -  -  		ld (hl), 02Eh														; ld l, *
   90 D1:E352 23 -  -  -  		inc hl
   91 D1:E353 ED 17 -  -  		ld de, (hl)
   92 D1:E355 73 -  -  -  		ld (hl), e
   93 D1:E356 CD D7 AC D1 _:		call InsertPushHLDE
   94 D1:E35A E1 -  -  -  	pop hl
   95 D1:E35B 11 C6 52 D0 	ld de, tempArg1
   96 D1:E35F B7 -  -  -  	or a
   97 D1:E360 ED 52 -  -  	sbc hl, de
   98 D1:E362 E5 -  -  -  	push hl
   99 D1:E363 C1 -  -  -  	pop bc
  100 D1:E364 2A 76 EC D1 	ld hl, (programPtr)
  101 D1:E368 EB -  -  -  	ex de, hl
  102 D1:E369 ED B0 -  -  	ldir
  103 D1:E36B 21 A2 EC D1 	ld hl, usedCroutines
  104 D1:E36F -  -  -  -  CFunction2ArgsSMC = $+1
  105 D1:E36F 11 00 00 00 	ld de, 0
  106 D1:E373 19 -  -  -  	add hl, de
  107 D1:E374 4E -  -  -  	ld c, (hl)
  108 D1:E375 06 04 -  -  	ld b, 4
  109 D1:E377 ED 4C -  -  	mlt bc
  110 D1:E379 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
  111 D1:E37D 09 -  -  -  	add hl, bc
  112 D1:E37E CD 77 AC D1 	call InsertCallHL														; call *
  113 D1:E382 3E E1 -  -  	ld a, 0E1h
  114 D1:E384 CD AE AC D1 	call InsertA															; pop hl
  115 D1:E388 C3 AE AC D1 	jp InsertA																; pop hl
  116 D1:E38C -  -  -  -  	
  117 D1:E38C -  -  -  -  CFunction3Args:
  118 D1:E38C FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  119 D1:E390 CA 05 AF D1 	jp z, ErrorSyntax
  120 D1:E394 2A 76 EC D1 	ld hl, (programPtr)
  121 D1:E398 22 1F E4 D1 	ld (CFunction3ArgsSMC2), hl
  122 D1:E39C 21 C6 52 D0 	ld hl, tempArg1
  123 D1:E3A0 22 76 EC D1 	ld (programPtr), hl
  124 D1:E3A4 CD 28 10 02 	call _IncFetch
  125 D1:E3A8 CD 2D B2 D1 	call ParseExpression
  126 D1:E3AC FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  127 D1:E3B0 CA 05 AF D1 	jp z, ErrorSyntax
  128 D1:E3B4 2A 76 EC D1 	ld hl, (programPtr)
  129 D1:E3B8 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  130 D1:E3BC 28 15 -  -  	jr z, +_
  131 D1:E3BE FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  132 D1:E3C2 28 0F -  -  	jr z, +_
  133 D1:E3C4 2B -  -  -  	dec hl
  134 D1:E3C5 2B -  -  -  	dec hl
  135 D1:E3C6 22 76 EC D1 	ld (programPtr), hl
  136 D1:E3CA 2B -  -  -  	dec hl
  137 D1:E3CB 2B -  -  -  	dec hl
  138 D1:E3CC 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  139 D1:E3CE 23 -  -  -  	inc hl
  140 D1:E3CF ED 17 -  -  	ld de, (hl)
  141 D1:E3D1 73 -  -  -  	ld (hl), e
  142 D1:E3D2 23 -  -  -  	inc hl
  143 D1:E3D3 CD D7 AC D1 _:	call InsertPushHLDE
  144 D1:E3D7 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  145 D1:E3DB F5 -  -  -  	push af
  146 D1:E3DC FD CB C0 7E 		bit output_is_string, (iy+fExpression1)
  147 D1:E3E0 F5 -  -  -  		push af
  148 D1:E3E1 E5 -  -  -  			push hl
  149 D1:E3E2 21 AE 56 D0 				ld hl, tempArg2
  150 D1:E3E6 22 76 EC D1 				ld (programPtr), hl
  151 D1:E3EA CD 28 10 02 				call _IncFetch
  152 D1:E3EE CD 2D B2 D1 				call ParseExpression
  153 D1:E3F2 FD CB BF 4E 				bit triggered_a_comma, (iy+fExpression2)
  154 D1:E3F6 CA 05 AF D1 				jp z, ErrorSyntax
  155 D1:E3FA 2A 76 EC D1 				ld hl, (programPtr)
  156 D1:E3FE FD CB B0 5E 				bit arg2_is_small, (iy+fFunction1)
  157 D1:E402 28 15 -  -  				jr z, +_
  158 D1:E404 FD CB C0 66 				bit output_is_number, (iy+fExpression1)
  159 D1:E408 28 0F -  -  				jr z, +_
  160 D1:E40A 2B -  -  -  				dec hl
  161 D1:E40B 2B -  -  -  				dec hl
  162 D1:E40C 22 76 EC D1 				ld (programPtr), hl
  163 D1:E410 2B -  -  -  				dec hl
  164 D1:E411 2B -  -  -  				dec hl
  165 D1:E412 36 2E -  -  				ld (hl), 02Eh												; ld l, *
  166 D1:E414 23 -  -  -  				inc hl
  167 D1:E415 ED 17 -  -  				ld de, (hl)
  168 D1:E417 73 -  -  -  				ld (hl), e
  169 D1:E418 23 -  -  -  				inc hl
  170 D1:E419 CD D7 AC D1 _:				call InsertPushHLDE
  171 D1:E41D E5 -  -  -  				push hl
  172 D1:E41E -  -  -  -  CFunction3ArgsSMC2 = $+1
  173 D1:E41E 21 00 00 00 					ld hl, 0
  174 D1:E422 22 76 EC D1 					ld (programPtr), hl
  175 D1:E426 CD 28 10 02 					call _IncFetch
  176 D1:E42A CD 2D B2 D1 					call ParseExpression
  177 D1:E42E FD CB BF 4E 					bit triggered_a_comma, (iy+fExpression2)
  178 D1:E432 C2 05 AF D1 					jp nz, ErrorSyntax
  179 D1:E436 FD CB B0 56 					bit arg3_is_small, (iy+fFunction1)
  180 D1:E43A 28 18 -  -  					jr z, +_
  181 D1:E43C FD CB C0 66 					bit output_is_number, (iy+fExpression1)
  182 D1:E440 28 12 -  -  					jr z, +_
  183 D1:E442 2A 76 EC D1 					ld hl, (programPtr)
  184 D1:E446 2B -  -  -  					dec hl
  185 D1:E447 2B -  -  -  					dec hl
  186 D1:E448 22 76 EC D1 					ld (programPtr), hl
  187 D1:E44C 2B -  -  -  					dec hl
  188 D1:E44D 2B -  -  -  					dec hl
  189 D1:E44E 36 2E -  -  					ld (hl), 02Eh											; ld l, *
  190 D1:E450 23 -  -  -  					inc hl
  191 D1:E451 ED 17 -  -  					ld de, (hl)
  192 D1:E453 73 -  -  -  					ld (hl), e
  193 D1:E454 CD D7 AC D1 _:					call InsertPushHLDE
  194 D1:E458 ED 5B 76 EC 
              D1 -  -  -  					ld de, (programPtr)
  195 D1:E45D E1 -  -  -  				pop hl
  196 D1:E45E 01 AE 56 D0 				ld bc, tempArg2
  197 D1:E462 B7 -  -  -  				or a
  198 D1:E463 ED 42 -  -  				sbc hl, bc
  199 D1:E465 E5 -  -  -  				push hl
  200 D1:E466 C1 -  -  -  				pop bc
  201 D1:E467 21 AE 56 D0 				ld hl, tempArg2
  202 D1:E46B ED B0 -  -  				ldir
  203 D1:E46D E1 -  -  -  			pop hl
  204 D1:E46E 01 C6 52 D0 			ld bc, tempArg1
  205 D1:E472 B7 -  -  -  			or a
  206 D1:E473 ED 42 -  -  			sbc hl, bc
  207 D1:E475 E5 -  -  -  			push hl
  208 D1:E476 C1 -  -  -  			pop bc
  209 D1:E477 21 C6 52 D0 			ld hl, tempArg1
  210 D1:E47B ED A0 -  -  			ldi
  211 D1:E47D F1 -  -  -  		pop af
  212 D1:E47E 28 0B -  -  		jr z, +_
  213 D1:E480 E5 -  -  -  		push hl
  214 D1:E481 2A 82 EC D1 			ld hl, (programDataOffsetPtr)
  215 D1:E485 2B -  -  -  			dec hl
  216 D1:E486 2B -  -  -  			dec hl
  217 D1:E487 2B -  -  -  			dec hl
  218 D1:E488 ED 1F -  -  			ld (hl), de
  219 D1:E48A E1 -  -  -  		pop hl
  220 D1:E48B ED B0 -  -  _:		ldir
  221 D1:E48D ED 53 76 EC 
              D1 -  -  -  		ld (programPtr), de
  222 D1:E492 21 A2 EC D1 		ld hl, usedCroutines
  223 D1:E496 -  -  -  -  CFunction3ArgsSMC = $+1
  224 D1:E496 11 00 00 00 		ld de, 0
  225 D1:E49A 19 -  -  -  		add hl, de
  226 D1:E49B 4E -  -  -  		ld c, (hl)
  227 D1:E49C 06 04 -  -  		ld b, 4
  228 D1:E49E ED 4C -  -  		mlt bc
  229 D1:E4A0 21 01 A9 D1 		ld hl, CData2-CData+UserMem-4
  230 D1:E4A4 09 -  -  -  		add hl, bc
  231 D1:E4A5 CD 77 AC D1 		call InsertCallHL													; call *
  232 D1:E4A9 21 E1 E1 E1 		ld hl, 0E1E1E1h
  233 D1:E4AD F1 -  -  -  	pop af
  234 D1:E4AE C3 66 AC D1 	jp InsertHL																; pop hl \ pop hl \ pop hl
  235 D1:E4B2 -  -  -  -  	
  236 D1:E4B2 -  -  -  -  CFunction4Args:
  237 D1:E4B2 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  238 D1:E4B6 CA 05 AF D1 	jp z, ErrorSyntax
  239 D1:E4BA 2A 76 EC D1 	ld hl, (programPtr)
  240 D1:E4BE 22 77 E5 D1 	ld (CFunction4ArgsSMC2), hl
  241 D1:E4C2 21 C6 52 D0 	ld hl, tempArg1
  242 D1:E4C6 22 76 EC D1 	ld (programPtr), hl
  243 D1:E4CA CD 28 10 02 	call _IncFetch
  244 D1:E4CE CD 2D B2 D1 	call ParseExpression
  245 D1:E4D2 FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  246 D1:E4D6 CA 05 AF D1 	jp z, ErrorSyntax
  247 D1:E4DA 2A 76 EC D1 	ld hl, (programPtr)
  248 D1:E4DE FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  249 D1:E4E2 28 15 -  -  	jr z, +_
  250 D1:E4E4 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  251 D1:E4E8 28 0F -  -  	jr z, +_
  252 D1:E4EA 2B -  -  -  	dec hl
  253 D1:E4EB 2B -  -  -  	dec hl
  254 D1:E4EC 22 76 EC D1 	ld (programPtr), hl
  255 D1:E4F0 2B -  -  -  	dec hl
  256 D1:E4F1 2B -  -  -  	dec hl
  257 D1:E4F2 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  258 D1:E4F4 23 -  -  -  	inc hl
  259 D1:E4F5 ED 17 -  -  	ld de, (hl)
  260 D1:E4F7 73 -  -  -  	ld (hl), e
  261 D1:E4F8 23 -  -  -  	inc hl
  262 D1:E4F9 CD D7 AC D1 _:	call InsertPushHLDE
  263 D1:E4FD E5 -  -  -  	push hl
  264 D1:E4FE 21 AE 56 D0 		ld hl, tempArg2
  265 D1:E502 22 76 EC D1 		ld (programPtr), hl
  266 D1:E506 CD 28 10 02 		call _IncFetch
  267 D1:E50A CD 2D B2 D1 		call ParseExpression
  268 D1:E50E FD CB BF 4E 		bit triggered_a_comma, (iy+fExpression2)
  269 D1:E512 CA 05 AF D1 		jp z, ErrorSyntax
  270 D1:E516 2A 76 EC D1 		ld hl, (programPtr)
  271 D1:E51A FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
  272 D1:E51E 28 15 -  -  		jr z, +_
  273 D1:E520 FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  274 D1:E524 28 0F -  -  		jr z, +_
  275 D1:E526 2B -  -  -  		dec hl
  276 D1:E527 2B -  -  -  		dec hl
  277 D1:E528 22 76 EC D1 		ld (programPtr), hl
  278 D1:E52C 2B -  -  -  		dec hl
  279 D1:E52D 2B -  -  -  		dec hl
  280 D1:E52E 36 2E -  -  		ld (hl), 02Eh														; ld l, *
  281 D1:E530 23 -  -  -  		inc hl
  282 D1:E531 ED 17 -  -  		ld de, (hl)
  283 D1:E533 73 -  -  -  		ld (hl), e
  284 D1:E534 23 -  -  -  		inc hl
  285 D1:E535 CD D7 AC D1 _:		call InsertPushHLDE
  286 D1:E539 E5 -  -  -  		push hl
  287 D1:E53A 21 96 5A D0 			ld hl, tempArg3
  288 D1:E53E 22 76 EC D1 			ld (programPtr), hl
  289 D1:E542 CD 28 10 02 			call _IncFetch
  290 D1:E546 CD 2D B2 D1 			call ParseExpression
  291 D1:E54A FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
  292 D1:E54E CA 05 AF D1 			jp z, ErrorSyntax
  293 D1:E552 2A 76 EC D1 			ld hl, (programPtr)
  294 D1:E556 FD CB B0 56 			bit arg3_is_small, (iy+fFunction1)
  295 D1:E55A 28 15 -  -  			jr z, +_
  296 D1:E55C FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  297 D1:E560 28 0F -  -  			jr z, +_
  298 D1:E562 2B -  -  -  			dec hl
  299 D1:E563 2B -  -  -  			dec hl
  300 D1:E564 22 76 EC D1 			ld (programPtr), hl
  301 D1:E568 2B -  -  -  			dec hl
  302 D1:E569 2B -  -  -  			dec hl
  303 D1:E56A 36 2E -  -  			ld (hl), 02Eh													; ld l, *
  304 D1:E56C 23 -  -  -  			inc hl
  305 D1:E56D ED 17 -  -  			ld de, (hl)
  306 D1:E56F 73 -  -  -  			ld (hl), e
  307 D1:E570 23 -  -  -  			inc hl
  308 D1:E571 CD D7 AC D1 _:			call InsertPushHLDE
  309 D1:E575 E5 -  -  -  			push hl
  310 D1:E576 -  -  -  -  CFunction4ArgsSMC2 = $+1
  311 D1:E576 21 00 00 00 				ld hl, 0
  312 D1:E57A 22 76 EC D1 				ld (programPtr), hl
  313 D1:E57E CD 28 10 02 				call _IncFetch
  314 D1:E582 CD 2D B2 D1 				call ParseExpression
  315 D1:E586 FD CB BF 4E 				bit triggered_a_comma, (iy+fExpression2)
  316 D1:E58A C2 05 AF D1 				jp nz, ErrorSyntax
  317 D1:E58E FD CB B0 4E 				bit arg4_is_small, (iy+fFunction1)
  318 D1:E592 28 18 -  -  				jr z, +_
  319 D1:E594 FD CB C0 66 				bit output_is_number, (iy+fExpression1)
  320 D1:E598 28 12 -  -  				jr z, +_
  321 D1:E59A 2A 76 EC D1 				ld hl, (programPtr)
  322 D1:E59E 2B -  -  -  				dec hl
  323 D1:E59F 2B -  -  -  				dec hl
  324 D1:E5A0 22 76 EC D1 				ld (programPtr), hl
  325 D1:E5A4 2B -  -  -  				dec hl
  326 D1:E5A5 2B -  -  -  				dec hl
  327 D1:E5A6 36 2E -  -  				ld (hl), 02Eh												; ld l, *
  328 D1:E5A8 23 -  -  -  				inc hl
  329 D1:E5A9 ED 17 -  -  				ld de, (hl)
  330 D1:E5AB 73 -  -  -  				ld (hl), e
  331 D1:E5AC CD D7 AC D1 _:				call InsertPushHLDE
  332 D1:E5B0 ED 5B 76 EC 
              D1 -  -  -  				ld de, (programPtr)
  333 D1:E5B5 E1 -  -  -  			pop hl
  334 D1:E5B6 01 96 5A D0 			ld bc, tempArg3
  335 D1:E5BA B7 -  -  -  			or a
  336 D1:E5BB ED 42 -  -  			sbc hl, bc
  337 D1:E5BD E5 -  -  -  			push hl
  338 D1:E5BE C1 -  -  -  			pop bc
  339 D1:E5BF 21 96 5A D0 			ld hl, tempArg3
  340 D1:E5C3 ED B0 -  -  			ldir
  341 D1:E5C5 E1 -  -  -  		pop hl
  342 D1:E5C6 01 AE 56 D0 		ld bc, tempArg2
  343 D1:E5CA B7 -  -  -  		or a
  344 D1:E5CB ED 42 -  -  		sbc hl, bc
  345 D1:E5CD E5 -  -  -  		push hl
  346 D1:E5CE C1 -  -  -  		pop bc
  347 D1:E5CF 21 AE 56 D0 		ld hl, tempArg2
  348 D1:E5D3 ED B0 -  -  		ldir
  349 D1:E5D5 E1 -  -  -  	pop hl
  350 D1:E5D6 01 C6 52 D0 	ld bc, tempArg1
  351 D1:E5DA B7 -  -  -  	or a
  352 D1:E5DB ED 42 -  -  	sbc hl, bc
  353 D1:E5DD E5 -  -  -  	push hl
  354 D1:E5DE C1 -  -  -  	pop bc
  355 D1:E5DF 21 C6 52 D0 	ld hl, tempArg1
  356 D1:E5E3 ED B0 -  -  	ldir
  357 D1:E5E5 ED 53 76 EC 
              D1 -  -  -  	ld (programPtr), de
  358 D1:E5EA 21 A2 EC D1 	ld hl, usedCroutines
  359 D1:E5EE -  -  -  -  CFunction4ArgsSMC = $+1
  360 D1:E5EE 11 00 00 00 	ld de, 0
  361 D1:E5F2 19 -  -  -  	add hl, de
  362 D1:E5F3 4E -  -  -  	ld c, (hl)
  363 D1:E5F4 06 04 -  -  	ld b, 4
  364 D1:E5F6 ED 4C -  -  	mlt bc
  365 D1:E5F8 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
  366 D1:E5FC 09 -  -  -  	add hl, bc
  367 D1:E5FD CD 77 AC D1 	call InsertCallHL														; call *
  368 D1:E601 3E E1 -  -  	ld a, 0E1h
  369 D1:E603 21 E1 E1 E1 	ld hl, 0E1E1E1h
  370 D1:E607 C3 62 AC D1 	jp InsertAHL															; pop hl \ pop hl \ pop hl \ pop hl
  371 D1:E60B -  -  -  -  	
  372 D1:E60B -  -  -  -  CFunction5Args:
  373 D1:E60B FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  374 D1:E60F CA 05 AF D1 	jp z, ErrorSyntax
  375 D1:E613 2A 76 EC D1 	ld hl, (programPtr)
  376 D1:E617 22 11 E7 D1 	ld (CFunction5ArgsSMC2), hl
  377 D1:E61B 21 C6 52 D0 	ld hl, tempArg1
  378 D1:E61F 22 76 EC D1 	ld (programPtr), hl
  379 D1:E623 CD 28 10 02 	call _IncFetch
  380 D1:E627 CD 2D B2 D1 	call ParseExpression
  381 D1:E62B FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  382 D1:E62F CA 05 AF D1 	jp z, ErrorSyntax
  383 D1:E633 2A 76 EC D1 	ld hl, (programPtr)
  384 D1:E637 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  385 D1:E63B 28 15 -  -  	jr z, +_
  386 D1:E63D FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  387 D1:E641 28 0F -  -  	jr z, +_
  388 D1:E643 2B -  -  -  	dec hl
  389 D1:E644 2B -  -  -  	dec hl
  390 D1:E645 22 76 EC D1 	ld (programPtr), hl
  391 D1:E649 2B -  -  -  	dec hl
  392 D1:E64A 2B -  -  -  	dec hl
  393 D1:E64B 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  394 D1:E64D 23 -  -  -  	inc hl
  395 D1:E64E ED 17 -  -  	ld de, (hl)
  396 D1:E650 73 -  -  -  	ld (hl), e
  397 D1:E651 23 -  -  -  	inc hl
  398 D1:E652 CD D7 AC D1 _:	call InsertPushHLDE
  399 D1:E656 FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  400 D1:E65A F5 -  -  -  	push af
  401 D1:E65B E5 -  -  -  		push hl
  402 D1:E65C 21 AE 56 D0 			ld hl, tempArg2
  403 D1:E660 22 76 EC D1 			ld (programPtr), hl
  404 D1:E664 CD 28 10 02 			call _IncFetch
  405 D1:E668 CD 2D B2 D1 			call ParseExpression
  406 D1:E66C FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
  407 D1:E670 CA 05 AF D1 			jp z, ErrorSyntax
  408 D1:E674 2A 76 EC D1 			ld hl, (programPtr)
  409 D1:E678 FD CB B0 5E 			bit arg2_is_small, (iy+fFunction1)
  410 D1:E67C 28 15 -  -  			jr z, +_
  411 D1:E67E FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  412 D1:E682 28 0F -  -  			jr z, +_
  413 D1:E684 2B -  -  -  			dec hl
  414 D1:E685 2B -  -  -  			dec hl
  415 D1:E686 22 76 EC D1 			ld (programPtr), hl
  416 D1:E68A 2B -  -  -  			dec hl
  417 D1:E68B 2B -  -  -  			dec hl
  418 D1:E68C 36 2E -  -  			ld (hl), 02Eh													; ld l, *
  419 D1:E68E 23 -  -  -  			inc hl
  420 D1:E68F ED 17 -  -  			ld de, (hl)
  421 D1:E691 73 -  -  -  			ld (hl), e
  422 D1:E692 23 -  -  -  			inc hl
  423 D1:E693 CD D7 AC D1 _:			call InsertPushHLDE
  424 D1:E697 E5 -  -  -  			push hl
  425 D1:E698 21 96 5A D0 				ld hl, tempArg3
  426 D1:E69C 22 76 EC D1 				ld (programPtr), hl
  427 D1:E6A0 CD 28 10 02 				call _IncFetch
  428 D1:E6A4 CD 2D B2 D1 				call ParseExpression
  429 D1:E6A8 FD CB BF 4E 				bit triggered_a_comma, (iy+fExpression2)
  430 D1:E6AC CA 05 AF D1 				jp z, ErrorSyntax
  431 D1:E6B0 2A 76 EC D1 				ld hl, (programPtr)
  432 D1:E6B4 FD CB B0 56 				bit arg3_is_small, (iy+fFunction1)
  433 D1:E6B8 28 15 -  -  				jr z, +_
  434 D1:E6BA FD CB C0 66 				bit output_is_number, (iy+fExpression1)
  435 D1:E6BE 28 0F -  -  				jr z, +_
  436 D1:E6C0 2B -  -  -  				dec hl
  437 D1:E6C1 2B -  -  -  				dec hl
  438 D1:E6C2 22 76 EC D1 				ld (programPtr), hl
  439 D1:E6C6 2B -  -  -  				dec hl
  440 D1:E6C7 2B -  -  -  				dec hl
  441 D1:E6C8 36 2E -  -  				ld (hl), 02Eh												; ld l, *
  442 D1:E6CA 23 -  -  -  				inc hl
  443 D1:E6CB ED 17 -  -  				ld de, (hl)
  444 D1:E6CD 73 -  -  -  				ld (hl), e
  445 D1:E6CE 23 -  -  -  				inc hl
  446 D1:E6CF CD D7 AC D1 _:				call InsertPushHLDE
  447 D1:E6D3 E5 -  -  -  				push hl
  448 D1:E6D4 21 7E 5E D0 					ld hl, tempArg4
  449 D1:E6D8 22 76 EC D1 					ld (programPtr), hl
  450 D1:E6DC CD 28 10 02 					call _IncFetch
  451 D1:E6E0 CD 2D B2 D1 					call ParseExpression
  452 D1:E6E4 FD CB BF 4E 					bit triggered_a_comma, (iy+fExpression2)
  453 D1:E6E8 CA 05 AF D1 					jp z, ErrorSyntax
  454 D1:E6EC 2A 76 EC D1 					ld hl, (programPtr)
  455 D1:E6F0 FD CB B0 4E 					bit arg4_is_small, (iy+fFunction1)
  456 D1:E6F4 28 15 -  -  					jr z, +_
  457 D1:E6F6 FD CB C0 66 					bit output_is_number, (iy+fExpression1)
  458 D1:E6FA 28 0F -  -  					jr z, +_
  459 D1:E6FC 2B -  -  -  					dec hl
  460 D1:E6FD 2B -  -  -  					dec hl
  461 D1:E6FE 22 76 EC D1 					ld (programPtr), hl
  462 D1:E702 2B -  -  -  					dec hl
  463 D1:E703 2B -  -  -  					dec hl
  464 D1:E704 36 2E -  -  					ld (hl), 02Eh											; ld l, *
  465 D1:E706 23 -  -  -  					inc hl
  466 D1:E707 ED 17 -  -  					ld de, (hl)
  467 D1:E709 73 -  -  -  					ld (hl), e
  468 D1:E70A 23 -  -  -  					inc hl
  469 D1:E70B CD D7 AC D1 _:					call InsertPushHLDE
  470 D1:E70F E5 -  -  -  					push hl
  471 D1:E710 -  -  -  -  CFunction5ArgsSMC2 = $+1
  472 D1:E710 21 00 00 00 						ld hl, 0
  473 D1:E714 22 76 EC D1 						ld (programPtr), hl
  474 D1:E718 CD 28 10 02 						call _IncFetch
  475 D1:E71C CD 2D B2 D1 						call ParseExpression
  476 D1:E720 FD CB BF 4E 						bit triggered_a_comma, (iy+fExpression2)
  477 D1:E724 C2 05 AF D1 						jp nz, ErrorSyntax
  478 D1:E728 FD CB B0 46 						bit arg5_is_small, (iy+fFunction1)
  479 D1:E72C 28 18 -  -  						jr z, +_
  480 D1:E72E FD CB C0 66 						bit output_is_number, (iy+fExpression1)
  481 D1:E732 28 12 -  -  						jr z, +_
  482 D1:E734 2A 76 EC D1 						ld hl, (programPtr)
  483 D1:E738 2B -  -  -  						dec hl
  484 D1:E739 2B -  -  -  						dec hl
  485 D1:E73A 22 76 EC D1 						ld (programPtr), hl
  486 D1:E73E 2B -  -  -  						dec hl
  487 D1:E73F 2B -  -  -  						dec hl
  488 D1:E740 36 2E -  -  						ld (hl), 02Eh										; ld l, *
  489 D1:E742 23 -  -  -  						inc hl
  490 D1:E743 ED 17 -  -  						ld de, (hl)
  491 D1:E745 73 -  -  -  						ld (hl), e
  492 D1:E746 CD D7 AC D1 _:						call InsertPushHLDE
  493 D1:E74A ED 5B 76 EC 
              D1 -  -  -  						ld de, (programPtr)
  494 D1:E74F E1 -  -  -  					pop hl
  495 D1:E750 01 7E 5E D0 					ld bc, tempArg4
  496 D1:E754 B7 -  -  -  					or a
  497 D1:E755 ED 42 -  -  					sbc hl, bc
  498 D1:E757 E5 -  -  -  					push hl
  499 D1:E758 C1 -  -  -  					pop bc
  500 D1:E759 21 7E 5E D0 					ld hl, tempArg4
  501 D1:E75D ED B0 -  -  					ldir
  502 D1:E75F E1 -  -  -  				pop hl
  503 D1:E760 01 96 5A D0 				ld bc, tempArg3
  504 D1:E764 B7 -  -  -  				or a
  505 D1:E765 ED 42 -  -  				sbc hl, bc
  506 D1:E767 E5 -  -  -  				push hl
  507 D1:E768 C1 -  -  -  				pop bc
  508 D1:E769 21 96 5A D0 				ld hl, tempArg3
  509 D1:E76D ED B0 -  -  				ldir
  510 D1:E76F E1 -  -  -  			pop hl
  511 D1:E770 01 AE 56 D0 			ld bc, tempArg2
  512 D1:E774 B7 -  -  -  			or a
  513 D1:E775 ED 42 -  -  			sbc hl, bc
  514 D1:E777 E5 -  -  -  			push hl
  515 D1:E778 C1 -  -  -  			pop bc
  516 D1:E779 21 AE 56 D0 			ld hl, tempArg2
  517 D1:E77D ED B0 -  -  			ldir
  518 D1:E77F E1 -  -  -  		pop hl
  519 D1:E780 01 C6 52 D0 		ld bc, tempArg1
  520 D1:E784 B7 -  -  -  		or a
  521 D1:E785 ED 42 -  -  		sbc hl, bc
  522 D1:E787 E5 -  -  -  		push hl
  523 D1:E788 C1 -  -  -  		pop bc
  524 D1:E789 21 C6 52 D0 		ld hl, tempArg1
  525 D1:E78D ED B0 -  -  		ldir
  526 D1:E78F ED 53 76 EC 
              D1 -  -  -  		ld (programPtr), de
  527 D1:E794 21 A2 EC D1 		ld hl, usedCroutines
  528 D1:E798 -  -  -  -  CFunction5ArgsSMC = $+1
  529 D1:E798 11 00 00 00 		ld de, 0
  530 D1:E79C 19 -  -  -  		add hl, de
  531 D1:E79D 4E -  -  -  		ld c, (hl)
  532 D1:E79E 06 04 -  -  		ld b, 4
  533 D1:E7A0 ED 4C -  -  		mlt bc
  534 D1:E7A2 21 01 A9 D1 		ld hl, CData2-CData+UserMem-4
  535 D1:E7A6 09 -  -  -  		add hl, bc
  536 D1:E7A7 CD 77 AC D1 		call InsertCallHL													; call *
  537 D1:E7AB 3E E1 -  -  		ld a, 0E1h
  538 D1:E7AD CD AE AC D1 		call InsertA														; pop hl
  539 D1:E7B1 21 E1 E1 E1 		ld hl, 0E1E1E1h
  540 D1:E7B5 F1 -  -  -  	pop af
  541 D1:E7B6 3E E1 -  -  	ld a, 0E1h
  542 D1:E7B8 C3 62 AC D1 	jp InsertAHL															; pop hl \ pop hl \ pop hl \ pop hl
  543 D1:E7BC -  -  -  -  	
  544 D1:E7BC -  -  -  -  CFunction6Args:
  545 D1:E7BC FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  546 D1:E7C0 CA 05 AF D1 	jp z, ErrorSyntax
  547 D1:E7C4 2A 76 EC D1 	ld hl, (programPtr)
  548 D1:E7C8 22 F9 E8 D1 	ld (CFunction6ArgsSMC2), hl
  549 D1:E7CC 21 C6 52 D0 	ld hl, tempArg1
  550 D1:E7D0 22 76 EC D1 	ld (programPtr), hl
  551 D1:E7D4 CD 28 10 02 	call _IncFetch
  552 D1:E7D8 CD 2D B2 D1 	call ParseExpression
  553 D1:E7DC FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  554 D1:E7E0 CA 05 AF D1 	jp z, ErrorSyntax
  555 D1:E7E4 2A 76 EC D1 	ld hl, (programPtr)
  556 D1:E7E8 FD CB B0 66 	bit arg1_is_small, (iy+fFunction1)
  557 D1:E7EC 28 15 -  -  	jr z, +_
  558 D1:E7EE FD CB C0 66 	bit output_is_number, (iy+fExpression1)
  559 D1:E7F2 28 0F -  -  	jr z, +_
  560 D1:E7F4 2B -  -  -  	dec hl
  561 D1:E7F5 2B -  -  -  	dec hl
  562 D1:E7F6 22 76 EC D1 	ld (programPtr), hl
  563 D1:E7FA 2B -  -  -  	dec hl
  564 D1:E7FB 2B -  -  -  	dec hl
  565 D1:E7FC 36 2E -  -  	ld (hl), 02Eh															; ld l, *
  566 D1:E7FE 23 -  -  -  	inc hl
  567 D1:E7FF ED 17 -  -  	ld de, (hl)
  568 D1:E801 73 -  -  -  	ld (hl), e
  569 D1:E802 23 -  -  -  	inc hl
  570 D1:E803 CD D7 AC D1 _:	call InsertPushHLDE
  571 D1:E807 E5 -  -  -  	push hl
  572 D1:E808 21 AE 56 D0 		ld hl, tempArg2
  573 D1:E80C 22 76 EC D1 		ld (programPtr), hl
  574 D1:E810 CD 28 10 02 		call _IncFetch
  575 D1:E814 CD 2D B2 D1 		call ParseExpression
  576 D1:E818 FD CB BF 4E 		bit triggered_a_comma, (iy+fExpression2)
  577 D1:E81C CA 05 AF D1 		jp z, ErrorSyntax
  578 D1:E820 2A 76 EC D1 		ld hl, (programPtr)
  579 D1:E824 FD CB B0 5E 		bit arg2_is_small, (iy+fFunction1)
  580 D1:E828 28 15 -  -  		jr z, +_
  581 D1:E82A FD CB C0 66 		bit output_is_number, (iy+fExpression1)
  582 D1:E82E 28 0F -  -  		jr z, +_
  583 D1:E830 2B -  -  -  		dec hl
  584 D1:E831 2B -  -  -  		dec hl
  585 D1:E832 22 76 EC D1 		ld (programPtr), hl
  586 D1:E836 2B -  -  -  		dec hl
  587 D1:E837 2B -  -  -  		dec hl
  588 D1:E838 36 2E -  -  		ld (hl), 02Eh														; ld l, *
  589 D1:E83A 23 -  -  -  		inc hl
  590 D1:E83B ED 17 -  -  		ld de, (hl)
  591 D1:E83D 73 -  -  -  		ld (hl), e
  592 D1:E83E 23 -  -  -  		inc hl
  593 D1:E83F CD D7 AC D1 _:		call InsertPushHLDE
  594 D1:E843 E5 -  -  -  		push hl
  595 D1:E844 21 96 5A D0 			ld hl, tempArg3
  596 D1:E848 22 76 EC D1 			ld (programPtr), hl
  597 D1:E84C CD 28 10 02 			call _IncFetch
  598 D1:E850 CD 2D B2 D1 			call ParseExpression
  599 D1:E854 FD CB BF 4E 			bit triggered_a_comma, (iy+fExpression2)
  600 D1:E858 CA 05 AF D1 			jp z, ErrorSyntax
  601 D1:E85C 2A 76 EC D1 			ld hl, (programPtr)
  602 D1:E860 FD CB B0 56 			bit arg3_is_small, (iy+fFunction1)
  603 D1:E864 28 15 -  -  			jr z, +_
  604 D1:E866 FD CB C0 66 			bit output_is_number, (iy+fExpression1)
  605 D1:E86A 28 0F -  -  			jr z, +_
  606 D1:E86C 2B -  -  -  			dec hl
  607 D1:E86D 2B -  -  -  			dec hl
  608 D1:E86E 22 76 EC D1 			ld (programPtr), hl
  609 D1:E872 2B -  -  -  			dec hl
  610 D1:E873 2B -  -  -  			dec hl
  611 D1:E874 36 2E -  -  			ld (hl), 02Eh													; ld l, *
  612 D1:E876 23 -  -  -  			inc hl
  613 D1:E877 ED 17 -  -  			ld de, (hl)
  614 D1:E879 73 -  -  -  			ld (hl), e
  615 D1:E87A 23 -  -  -  			inc hl
  616 D1:E87B CD D7 AC D1 _:			call InsertPushHLDE
  617 D1:E87F E5 -  -  -  			push hl
  618 D1:E880 21 7E 5E D0 				ld hl, tempArg4
  619 D1:E884 22 76 EC D1 				ld (programPtr), hl
  620 D1:E888 CD 28 10 02 				call _IncFetch
  621 D1:E88C CD 2D B2 D1 				call ParseExpression
  622 D1:E890 FD CB BF 4E 				bit triggered_a_comma, (iy+fExpression2)
  623 D1:E894 CA 05 AF D1 				jp z, ErrorSyntax
  624 D1:E898 2A 76 EC D1 				ld hl, (programPtr)
  625 D1:E89C FD CB B0 4E 				bit arg4_is_small, (iy+fFunction1)
  626 D1:E8A0 28 15 -  -  				jr z, +_
  627 D1:E8A2 FD CB C0 66 				bit output_is_number, (iy+fExpression1)
  628 D1:E8A6 28 0F -  -  				jr z, +_
  629 D1:E8A8 2B -  -  -  				dec hl
  630 D1:E8A9 2B -  -  -  				dec hl
  631 D1:E8AA 22 76 EC D1 				ld (programPtr), hl
  632 D1:E8AE 2B -  -  -  				dec hl
  633 D1:E8AF 2B -  -  -  				dec hl
  634 D1:E8B0 36 2E -  -  				ld (hl), 02Eh												; ld l, *
  635 D1:E8B2 23 -  -  -  				inc hl
  636 D1:E8B3 ED 17 -  -  				ld de, (hl)
  637 D1:E8B5 73 -  -  -  				ld (hl), e
  638 D1:E8B6 23 -  -  -  				inc hl
  639 D1:E8B7 CD D7 AC D1 _:				call InsertPushHLDE
  640 D1:E8BB E5 -  -  -  				push hl
  641 D1:E8BC 21 66 62 D0 					ld hl, tempArg5
  642 D1:E8C0 22 76 EC D1 					ld (programPtr), hl
  643 D1:E8C4 CD 28 10 02 					call _IncFetch
  644 D1:E8C8 CD 2D B2 D1 					call ParseExpression
  645 D1:E8CC FD CB BF 4E 					bit triggered_a_comma, (iy+fExpression2)
  646 D1:E8D0 CA 05 AF D1 					jp z, ErrorSyntax
  647 D1:E8D4 2A 76 EC D1 					ld hl, (programPtr)
  648 D1:E8D8 FD CB B0 46 					bit arg5_is_small, (iy+fFunction1)
  649 D1:E8DC 28 15 -  -  					jr z, +_
  650 D1:E8DE FD CB C0 66 					bit output_is_number, (iy+fExpression1)
  651 D1:E8E2 28 0F -  -  					jr z, +_
  652 D1:E8E4 2B -  -  -  					dec hl
  653 D1:E8E5 2B -  -  -  					dec hl
  654 D1:E8E6 22 76 EC D1 					ld (programPtr), hl
  655 D1:E8EA 2B -  -  -  					dec hl
  656 D1:E8EB 2B -  -  -  					dec hl
  657 D1:E8EC 36 2E -  -  					ld (hl), 02Eh											; ld l, *
  658 D1:E8EE 23 -  -  -  					inc hl
  659 D1:E8EF ED 17 -  -  					ld de, (hl)
  660 D1:E8F1 73 -  -  -  					ld (hl), e
  661 D1:E8F2 23 -  -  -  					inc hl
  662 D1:E8F3 CD D7 AC D1 _:					call InsertPushHLDE
  663 D1:E8F7 E5 -  -  -  					push hl
  664 D1:E8F8 -  -  -  -  CFunction6ArgsSMC2 = $+1
  665 D1:E8F8 21 00 00 00 						ld hl, 0
  666 D1:E8FC 22 76 EC D1 						ld (programPtr), hl
  667 D1:E900 CD 28 10 02 						call _IncFetch
  668 D1:E904 CD 2D B2 D1 						call ParseExpression
  669 D1:E908 FD CB BF 4E 						bit triggered_a_comma, (iy+fExpression2)
  670 D1:E90C C2 05 AF D1 						jp nz, ErrorSyntax
  671 D1:E910 CD D7 AC D1 						call InsertPushHLDE
  672 D1:E914 ED 5B 76 EC 
              D1 -  -  -  						ld de, (programPtr)
  673 D1:E919 E1 -  -  -  					pop hl
  674 D1:E91A 01 66 62 D0 					ld bc, tempArg5
  675 D1:E91E B7 -  -  -  					or a
  676 D1:E91F ED 42 -  -  					sbc hl, bc
  677 D1:E921 E5 -  -  -  					push hl
  678 D1:E922 C1 -  -  -  					pop bc
  679 D1:E923 21 66 62 D0 					ld hl, tempArg5
  680 D1:E927 ED B0 -  -  					ldir
  681 D1:E929 E1 -  -  -  				pop hl
  682 D1:E92A 01 7E 5E D0 				ld bc, tempArg4
  683 D1:E92E B7 -  -  -  				or a
  684 D1:E92F ED 42 -  -  				sbc hl, bc
  685 D1:E931 E5 -  -  -  				push hl
  686 D1:E932 C1 -  -  -  				pop bc
  687 D1:E933 21 7E 5E D0 				ld hl, tempArg4
  688 D1:E937 ED B0 -  -  				ldir
  689 D1:E939 E1 -  -  -  			pop hl
  690 D1:E93A 01 96 5A D0 			ld bc, tempArg3
  691 D1:E93E B7 -  -  -  			or a
  692 D1:E93F ED 42 -  -  			sbc hl, bc
  693 D1:E941 E5 -  -  -  			push hl
  694 D1:E942 C1 -  -  -  			pop bc
  695 D1:E943 21 96 5A D0 			ld hl, tempArg3
  696 D1:E947 ED B0 -  -  			ldir
  697 D1:E949 E1 -  -  -  		pop hl
  698 D1:E94A 01 AE 56 D0 		ld bc, tempArg2
  699 D1:E94E B7 -  -  -  		or a
  700 D1:E94F ED 42 -  -  		sbc hl, bc
  701 D1:E951 E5 -  -  -  		push hl
  702 D1:E952 C1 -  -  -  		pop bc
  703 D1:E953 21 AE 56 D0 		ld hl, tempArg2
  704 D1:E957 ED B0 -  -  		ldir
  705 D1:E959 E1 -  -  -  	pop hl
  706 D1:E95A 01 C6 52 D0 	ld bc, tempArg1
  707 D1:E95E B7 -  -  -  	or a
  708 D1:E95F ED 42 -  -  	sbc hl, bc
  709 D1:E961 E5 -  -  -  	push hl
  710 D1:E962 C1 -  -  -  	pop bc
  711 D1:E963 21 C6 52 D0 	ld hl, tempArg1
  712 D1:E967 ED B0 -  -  	ldir
  713 D1:E969 ED 53 76 EC 
              D1 -  -  -  	ld (programPtr), de
  714 D1:E96E 21 A2 EC D1 	ld hl, usedCroutines
  715 D1:E972 -  -  -  -  CFunction6ArgsSMC = $+1
  716 D1:E972 11 00 00 00 	ld de, 0
  717 D1:E976 19 -  -  -  	add hl, de
  718 D1:E977 4E -  -  -  	ld c, (hl)
  719 D1:E978 06 04 -  -  	ld b, 4
  720 D1:E97A ED 4C -  -  	mlt bc
  721 D1:E97C 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
  722 D1:E980 09 -  -  -  	add hl, bc
  723 D1:E981 CD 77 AC D1 	call InsertCallHL														; call *
  724 D1:E985 21 E1 E1 E1 	ld hl, 0E1E1E1h
  725 D1:E989 E5 -  -  -  	push hl
  726 D1:E98A D1 -  -  -  	pop de
  727 D1:E98B C3 A5 AC D1 	jp InsertDEHL															; pop hl (x6)
  728 D1:E98F -  -  -  -  	
  729 D1:E98F -  -  -  -  CTransparentSpriteNoClip:
  730 D1:E98F 3E 3C -  -  	ld a, 60
  731 D1:E991 18 02 -  -  	jr +_	
  732 D1:E993 -  -  -  -  CSpriteNoClip:
  733 D1:E993 3E 3B -  -  	ld a, 59
  734 D1:E995 FD 36 B0 04 _:	ld (iy+fFunction1), %00000100
  735 D1:E999 37 -  -  -  	scf
  736 D1:E99A ED 62 -  -  	sbc hl, hl
  737 D1:E99C -  -  -  -  	;ld (hl), 2
  738 D1:E99C 32 97 E4 D1 	ld (CFunction3ArgsSMC), a
  739 D1:E9A0 CD 8C E3 D1 	call CFunction3Args
  740 D1:E9A4 28 29 -  -  	jr z, +_
  741 D1:E9A6 2A 76 EC D1 	ld hl, (programPtr)
  742 D1:E9AA 11 F5 FF FF 	ld de, -11
  743 D1:E9AE 19 -  -  -  	add hl, de
  744 D1:E9AF E5 -  -  -  	push hl
  745 D1:E9B0 ED 27 -  -  		ld hl, (hl)
  746 D1:E9B2 E5 -  -  -  		push hl
  747 D1:E9B3 D1 -  -  -  		pop de
  748 D1:E9B4 29 -  -  -  		add hl, hl
  749 D1:E9B5 19 -  -  -  		add hl, de
  750 D1:E9B6 11 2F 11 D1 		ld de, spriteStack
  751 D1:E9BA 19 -  -  -  		add hl, de
  752 D1:E9BB ED 07 -  -  		ld bc, (hl)
  753 D1:E9BD D1 -  -  -  	pop de
  754 D1:E9BE 2A 82 EC D1 	ld hl, (programDataOffsetPtr)
  755 D1:E9C2 ED 1F -  -  	ld (hl), de
  756 D1:E9C4 23 -  -  -  	inc hl
  757 D1:E9C5 23 -  -  -  	inc hl
  758 D1:E9C6 23 -  -  -  	inc hl
  759 D1:E9C7 22 82 EC D1 	ld (programDataOffsetPtr), hl
  760 D1:E9CB EB -  -  -  	ex de, hl
  761 D1:E9CC ED 0F -  -  	ld (hl), bc
  762 D1:E9CE C9 -  -  -  	ret
  763 D1:E9CF 2A 76 EC D1 _:	ld hl, (programPtr)
  764 D1:E9D3 11 F8 FF FF 	ld de, -8
  765 D1:E9D7 19 -  -  -  	add hl, de
  766 D1:E9D8 22 76 EC D1 	ld (programPtr), hl
  767 D1:E9DC 23 -  -  -  	inc hl
  768 D1:E9DD 23 -  -  -  	inc hl
  769 D1:E9DE ED 27 -  -  	ld hl, (hl)
  770 D1:E9E0 E5 -  -  -  	push hl
  771 D1:E9E1 3E 11 -  -  		ld a, 011h
  772 D1:E9E3 CD AE AC D1 		call InsertA															; ld de, *
  773 D1:E9E7 CD EA AC D1 		call InsertProgramPtrToDataOffset
  774 D1:E9EB 21 FF 18 D1 		ld hl, programDataData
  775 D1:E9EF CD 66 AC D1 		call InsertHL															; ld de, RANDOM
  776 D1:E9F3 21 19 ED 27 		ld hl, 027ED19h
  777 D1:E9F7 CD 66 AC D1 		call InsertHL															; add hl, de \ ld hl, (hl)
  778 D1:E9FB 3E E5 -  -  		ld a, 0E5h
  779 D1:E9FD CD AE AC D1 		call InsertA															; push hl
  780 D1:EA01 E1 -  -  -  	pop hl
  781 D1:EA02 CD 77 AC D1 	call InsertCallHL															; call ******
  782 D1:EA06 21 E1 E1 E1 	ld hl, 0E1E1E1h
  783 D1:EA0A C3 66 AC D1 	jp InsertHL																	; pop hl \ pop hl \ pop hl
  784 D1:EA0E -  -  -  -  	
  785 D1:EA0E -  -  -  -  CScaledSpriteNoClip:
  786 D1:EA0E 3E 3E -  -  	ld a, 62
  787 D1:EA10 32 99 E7 D1 _:	ld (CFunction5ArgsSMC), a
  788 D1:EA14 FD 36 B0 07 	ld (iy+fFunction1), %00000111
  789 D1:EA18 CD 0B E6 D1 	call CFunction5Args
  790 D1:EA1C CA 05 AF D1 	jp z, ErrorSyntax
  791 D1:EA20 2A 76 EC D1 	ld hl, (programPtr)
  792 D1:EA24 11 F3 FF FF 	ld de, -13
  793 D1:EA28 19 -  -  -  	add hl, de
  794 D1:EA29 E5 -  -  -  	push hl
  795 D1:EA2A ED 27 -  -  		ld hl, (hl)
  796 D1:EA2C E5 -  -  -  		push hl
  797 D1:EA2D D1 -  -  -  		pop de
  798 D1:EA2E 29 -  -  -  		add hl, hl
  799 D1:EA2F 19 -  -  -  		add hl, de
  800 D1:EA30 11 2F 11 D1 		ld de, spriteStack
  801 D1:EA34 19 -  -  -  		add hl, de
  802 D1:EA35 ED 07 -  -  		ld bc, (hl)
  803 D1:EA37 D1 -  -  -  	pop de
  804 D1:EA38 2A 82 EC D1 	ld hl, (programDataOffsetPtr)
  805 D1:EA3C ED 1F -  -  	ld (hl), de
  806 D1:EA3E 23 -  -  -  	inc hl
  807 D1:EA3F 23 -  -  -  	inc hl
  808 D1:EA40 23 -  -  -  	inc hl
  809 D1:EA41 22 82 EC D1 	ld (programDataOffsetPtr), hl
  810 D1:EA45 EB -  -  -  	ex de, hl
  811 D1:EA46 ED 0F -  -  	ld (hl), bc
  812 D1:EA48 C9 -  -  -  	ret
  813 D1:EA49 -  -  -  -  
  814 D1:EA49 -  -  -  -  CTransparentScaledSpriteNoClip:
  815 D1:EA49 3E 3F -  -  	ld a, 63
  816 D1:EA4B 18 C3 -  -  	jr -_
  817 D1:EA4D -  -  -  -  	
  818 D1:EA4D -  -  -  -  CBegin:
  819 D1:EA4D FD CB BF 4E 	bit triggered_a_comma, (iy+fExpression2)
  820 D1:EA51 C2 05 AF D1 	jp nz, ErrorSyntax
  821 D1:EA55 21 2E 27 E5 	ld hl, 0E5272Eh
  822 D1:EA59 CD 66 AC D1 	call InsertHL															; ld l, lcdBpp8 \ push hl
  823 D1:EA5D 21 A2 EC D1 	ld hl, usedCroutines
  824 D1:EA61 4E -  -  -  	ld c, (hl)
  825 D1:EA62 06 04 -  -  	ld b, 4
  826 D1:EA64 ED 4C -  -  	mlt bc
  827 D1:EA66 21 01 A9 D1 	ld hl, CData2-CData+UserMem-4
  828 D1:EA6A 09 -  -  -  	add hl, bc
  829 D1:EA6B CD 77 AC D1 	call InsertCallHL														; call *
  830 D1:EA6F 3E E1 -  -  	ld a, 0E1h
  831 D1:EA71 C3 AE AC D1 	jp InsertA																; pop hl
Listing for file "ICE.asm"
  465 D1:EA75 -  -  -  -  #include "clibs/graphics.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\clibs\graphics.asm"
    1 D1:EA75 -  -  -  -  ; Byte: . . . . . . . .
    2 D1:EA75 -  -  -  -  ;       <---> <------->
    3 D1:EA75 -  -  -  -  ;       Args  1 = that argument is small (0-255)
    4 D1:EA75 -  -  -  -  ;       1 1 1:
    5 D1:EA75 -  -  -  -  ;    	bit   1 set = special
    6 D1:EA75 -  -  -  -  ;    	bit   1 reset = not implemented
    7 D1:EA75 -  -  -  -  
    8 D1:EA75 -  -  -  -  CFunctionsArguments:
    9 D1:EA75 F0 -  -  -  Begin_:									.db %11110000
   10 D1:EA76 00 -  -  -  End_:									.db %00000000
   11 D1:EA77 30 -  -  -  SetColor_:								.db %00110000
   12 D1:EA78 00 -  -  -  SetDefaultPalette_:						.db %00000000
   13 D1:EA79 E0 -  -  -  SetPalette_:							.db %11100000
   14 D1:EA7A 30 -  -  -  FillScreen_:							.db %00110000
   15 D1:EA7B 48 -  -  -  SetPixel_:								.db %01001000
   16 D1:EA7C E0 -  -  -  GetPixel_:								.db %11100000
   17 D1:EA7D E0 -  -  -  GetDraw_:								.db %11100000
   18 D1:EA7E 30 -  -  -  SetDraw_:								.db %00110000
   19 D1:EA7F 00 -  -  -  SwapDraw_:								.db %00000000
   20 D1:EA80 30 -  -  -  Blit_:									.db %00110000
   21 D1:EA81 7C -  -  -  BlitLines_:								.db %01111100
   22 D1:EA82 B5 -  -  -  BlitArea_:								.db %10110101
   23 D1:EA83 30 -  -  -  PrintChar_:								.db %00110000
   24 D1:EA84 E0 -  -  -  PrintInt_:								.db %11100000
   25 D1:EA85 48 -  -  -  PrintUInt_:								.db %01001000
   26 D1:EA86 20 -  -  -  PrintString_:							.db %00100000
   27 D1:EA87 60 -  -  -  PrintStringXY_:							.db %01100000
   28 D1:EA88 48 -  -  -  SetTextXY_:								.db %01001000
   29 D1:EA89 30 -  -  -  SetTextBGColor_:						.db %00110000
   30 D1:EA8A 30 -  -  -  SetTextFGColor_:						.db %00110000
   31 D1:EA8B 30 -  -  -  SetTextTransparentColor_:				.db %00110000
   32 D1:EA8C E0 -  -  -  SetCustomFontData_:						.db %11100000
   33 D1:EA8D E0 -  -  -  SetCustomFontSpacing_:					.db %11100000
   34 D1:EA8E 30 -  -  -  SetMonospaceFont_:						.db %00110000
   35 D1:EA8F E0 -  -  -  GetStringWidth_:						.db %11100000
   36 D1:EA90 E0 -  -  -  GetCharWidth_:							.db %11100000
   37 D1:EA91 E0 -  -  -  GetTextX_:								.db %11100000
   38 D1:EA92 E0 -  -  -  GetTextY_:								.db %11100000
   39 D1:EA93 80 -  -  -  Line_:									.db %10000000
   40 D1:EA94 60 -  -  -  HorizLine_:								.db %01100000
   41 D1:EA95 60 -  -  -  VertLine_:								.db %01100000
   42 D1:EA96 60 -  -  -  Circle_:								.db %01100000
   43 D1:EA97 60 -  -  -  FillCircle_:							.db %01100000
   44 D1:EA98 80 -  -  -  Rectangle_:								.db %10000000
   45 D1:EA99 80 -  -  -  FillRectangle_:							.db %10000000
   46 D1:EA9A 80 -  -  -  LineNoClip_:							.db %10000000
   47 D1:EA9B 60 -  -  -  HorizLineNoClip_:						.db %01100000
   48 D1:EA9C 60 -  -  -  VertLineNoClip_:						.db %01100000
   49 D1:EA9D 60 -  -  -  FillCircleNoClip_:						.db %01100000
   50 D1:EA9E 80 -  -  -  RectangleNoClip_:						.db %10000000
   51 D1:EA9F 80 -  -  -  FillRectangleNoClip_:					.db %10000000
   52 D1:EAA0 82 -  -  -  SetClipRegion_:							.db %10000010
   53 D1:EAA1 E0 -  -  -  GetClipRegion_:							.db %11100000
   54 D1:EAA2 20 -  -  -  ShiftDown_:								.db %00100000
   55 D1:EAA3 20 -  -  -  ShiftUp_:								.db %00100000
   56 D1:EAA4 20 -  -  -  ShiftLeft_:								.db %00100000
   57 D1:EAA5 20 -  -  -  ShiftRight_:							.db %00100000
   58 D1:EAA6 E0 -  -  -  Tilemap_:								.db %11100000
   59 D1:EAA7 E0 -  -  -  TilemapNoClip_:							.db %11100000
   60 D1:EAA8 E0 -  -  -  TransparentTilemap_:					.db %11100000
   61 D1:EAA9 E0 -  -  -  TransparentTilemapNoClip_:				.db %11100000
   62 D1:EAAA E0 -  -  -  TilePtr_:								.db %11100000
   63 D1:EAAB E0 -  -  -  TilePtrMapped_:							.db %11100000
   64 D1:EAAC E0 -  -  -  LZDecompress_:							.db %11100000
   65 D1:EAAD E0 -  -  -  AllocSprite_:							.db %11100000
   66 D1:EAAE E0 -  -  -  Sprite_:								.db %11100000
   67 D1:EAAF E0 -  -  -  TransparentSprite_:						.db %11100000
   68 D1:EAB0 F0 -  -  -  SpriteNoClip_:							.db %11110000
   69 D1:EAB1 F0 -  -  -  TransparentSpriteNoClip_:				.db %11110000
   70 D1:EAB2 E0 -  -  -  GetSpriteNoClip_:						.db %11100000
   71 D1:EAB3 F0 -  -  -  ScaledSpriteNoClip_:					.db %11110000
   72 D1:EAB4 F0 -  -  -  ScaledTransparentSpriteNoClip_:			.db %11110000
   73 D1:EAB5 E0 -  -  -  FlipSpriteY_:							.db %11100000
   74 D1:EAB6 E0 -  -  -  FlipSpriteX_:							.db %11100000
   75 D1:EAB7 E0 -  -  -  RotateSpriteC_:							.db %11100000
   76 D1:EAB8 E0 -  -  -  RotateSpriteCC_:						.db %11100000
   77 D1:EAB9 E0 -  -  -  RotateSpriteHalf_:						.db %11100000
   78 D1:EABA E0 -  -  -  Polygon_:								.db %11100000
   79 D1:EABB E0 -  -  -  PolygonNoClip_:							.db %11100000
   80 D1:EABC C0 -  -  -  FillTriangle_:							.db %11000000
   81 D1:EABD C0 -  -  -  FillTriangleNoClip_:					.db %11000000
   82 D1:EABE E0 -  -  -  LZDecompressSprite_:					.db %11100000
   83 D1:EABF 58 -  -  -  SetTextScale_:							.db %01011000
   84 D1:EAC0 30 -  -  -  SetTransparentColor:					.db %00110000
   85 D1:EAC1 00 -  -  -  ZeroScreen:								.db %00000000
   86 D1:EAC2 30 -  -  -  SetTextConfig:							.db %00110000
   87 D1:EAC3 E0 -  -  -  GetSpriteChar:							.db %11100000
Listing for file "ICE.asm"
  466 D1:EAC4 -  -  -  -  #include "data.asm"
Listing for file "C:\programming\spasm\ICE\ICE v1.5\data.asm"
    1 D1:EAC4 -  -  -  -  operators_booleans:
    2 D1:EAC4 04 40 3D 3C 
              6A 6B 6C 6D 
              6E 6F 82 83 
              70 71 00 -  	.db tStore, tAnd, tXor, tOr, tEQ, tLT, tGT, tLE, tGE, tNE, tMul, tDiv, tAdd, tSub, 0			; 0 = temp +
    3 D1:EAD3 -  -  -  -  	;		7	6		6	6		4	5	5	5		5	4	3		2	1	0
    4 D1:EAD3 -  -  -  -  operators_special:
    5 D1:EAD3 00 01 02 03 
              04 05 05 05 
              05 04 06 06 
              06 07 -  -  	.db 0, 1, 2, 3, 4, 5, 5, 5, 5, 4, 6, 6, 6, 7
    6 D1:EAE1 -  -  -  -  	
    7 D1:EAE1 -  -  -  -  FunctionsWithReturnValue:
    8 D1:EAE1 AD AB 10 -  	.db tGetKey, trand, tLParen
    9 D1:EAE4 -  -  -  -  FunctionsWithReturnValueArguments:
   10 D1:EAE4 21 1A 19 B8 
              EF -  -  -  	.db tMean, tMin, tMax, tNot, tExtTok
   11 D1:EAE9 -  -  -  -  FunctionsWithReturnValueEnd:
   12 D1:EAE9 -  -  -  -  
   13 D1:EAE9 -  -  -  -  FunctionsWithReturnValueStart:
   14 D1:EAE9 02 CA D1 94 
              C9 D1 8F CB 
              D1 93 CB D1 
              8B CB D1 -  	.dl functionCE, functionNot, functionMax, functionMin, functionMean
   15 D1:EAF8 -  -  -  -  
   16 D1:EAF8 -  -  -  -  FunctionsSingle:
   17 D1:EAF8 DC E1 D8 CE 
              D1 D2 DE D3 
              D5 62 D6 D7 
              2C B3 -  -  	.db tInput, tClLCD, tPause, tIf, tWhile, tRepeat, tDisp, tFor, tReturn, tVarOut, tLbl, tGoto, tii, tDet
   18 D1:EB06 -  -  -  -  FunctionsSingleEnd:
   19 D1:EB06 -  -  -  -  
   20 D1:EB06 -  -  -  -  FunctionsSingleStart:
   21 D1:EB06 97 CD D1 54 
              C5 D1 73 C5 
              D1 39 C5 D1 
              10 CE D1 9A 
              C5 D1 8F DF 
              D1 AA C5 D1 	.dl functionC, functionSkipLine, functionGoto, functionLbl, functionCustom, functionReturn, functionFor, functionDisp
   22 D1:EB1E E0 C5 D1 41 
              C7 D1 C2 C6 
              D1 09 C8 D1 
              ED C7 D1 CF 
              C8 D1 -  -  	.dl functionRepeat, functionWhile, functionIf, functionPause, functionClrHome, functionInput
   23 D1:EB30 -  -  -  -  	
   24 D1:EB30 -  -  -  -  operator_start:
   25 D1:EB30 79 D0 D1 CF 
              D0 D1 30 D1 
              D1 72 D1 D1 
              04 D2 D1 96 
              AE D1 -  -  	.dl SubNumberXXX, SubVariableXXX, SubChainPushXXX, SubChainAnsXXX, SubFunctionXXX, SubError
   26 D1:EB42 6D D2 D1 A7 
              D2 D1 F1 D2 
              D1 3A D3 D1 
              DA D3 D1 9A 
              AE D1 -  -  	.dl AddNumberXXX, AddVariableXXX, AddChainPushXXX, AddChainAnsXXX, AddFunctionXXX, AddError
   27 D1:EB54 43 D4 D1 9F 
              D4 D1 12 D5 
              D1 5B D5 D1 
              D0 D5 D1 9E 
              AE D1 -  -  	.dl DivNumberXXX, DivVariableXXX, DivChainPushXXX, DivChainAnsXXX, DivFunctionXXX, DivError
   28 D1:EB66 2D D6 D1 6A 
              D6 D1 B7 D6 
              D1 03 D7 D1 
              C8 D7 D1 A2 
              AE D1 -  -  	.dl MulNumberXXX, MulVariableXXX, MulChainPushXXX, MulChainAnsXXX, MulFunctionXXX, MulError
   29 D1:EB78 15 DA D1 6B 
              DA D1 E4 DA 
              D1 30 DB D1 
              AF DB D1 C3 
              AE D1 -  -  	.dl NEQNumberXXX, NEQVariableXXX, NEQChainPushXXX, NEQChainAnsXXX, NEQFunctionXXX, NEQError
   30 D1:EB8A 3B D8 D1 98 
              D8 D1 0C D9 
              D1 53 D9 D1 
              B4 D9 D1 A6 
              AE D1 -  -  	.dl GLETNumberXXX, GLETVariableXXX, GLETChainPushXXX, GLETChainAnsXXX, GLETFunctionXXX, GLETError
   31 D1:EB9C F2 DB D1 6E 
              DC D1 F3 DC 
              D1 36 DD D1 
              A1 DD D1 D1 
              AE D1 -  -  	.dl XORANDNumberXXX, XORANDVariableXXX, XORANDChainPushXXX, XORANDChainAnsXXX, XORANDFunctionXXX, XORANDError
   32 D1:EBAE E4 DD D1 3B 
              DE D1 81 DE 
              D1 9F DE D1 
              C6 DE D1 15 
              DF D1 -  -  	.dl StoNumberXXX, StoVariableXXX, StoChainPushXXX, StoChainAnsXXX, StoFunctionXXX, StoListXXX
   33 D1:EBC0 -  -  -  -  	
   34 D1:EBC0 -  -  -  -  CSpecialFunctions:
   35 D1:EBC0 3F 3E 3C 3B 
              00 -  -  -  	.db 63, 62, 60, 59, 0
   36 D1:EBC5 -  -  -  -  CSpecialFunctionsEnd:
   37 D1:EBC5 -  -  -  -  
   38 D1:EBC5 -  -  -  -  CSpecialFunctionsStart:
   39 D1:EBC5 4D EA D1 93 
              E9 D1 8F E9 
              D1 0E EA D1 
              49 EA D1 -  	.dl CBegin, CSpriteNoClip, CTransparentSpriteNoClip, CScaledSpriteNoClip, CTransparentScaledSpriteNoClip
   40 D1:EBD4 -  -  -  -  	
   41 D1:EBD4 -  -  -  -  CArguments:
   42 D1:EBD4 6C E2 D1 8B 
              E2 D1 D6 E2 
              D1 8C E3 D1 
              B2 E4 D1 0B 
              E6 D1 BC E7 
              D1 -  -  -  	.dl CFunction0Args, CFunction1Arg, CFunction2Args, CFunction3Args, CFunction4Args, CFunction5Args, CFunction6Args
   43 D1:EBE9 79 E2 D1 BE 
              E2 D1 70 E3 
              D1 97 E4 D1 
              EF E5 D1 99 
              E7 D1 99 E7 
              D1 -  -  -  	.dl CFunction0ArgsSMC, CFunction1ArgSMC, CFunction2ArgsSMC, CFunction3ArgsSMC, CFunction4ArgsSMC, CFunction5ArgsSMC, CFunction5ArgsSMC
   44 D1:EBFE -  -  -  -  	
   45 D1:EBFE -  -  -  -  functionCustomStart:
   46 D1:EBFE 2D CE D1 67 
              CE D1 6F C5 
              D1 1D CF D1 	.dl functionExecHex, functionDefineSprite, functionCall, functionCompilePrgm
   47 D1:EC0A -  -  -  -  	
   48 D1:EC0A 07 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 00 -  precedence:	 .db 7, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  0
   49 D1:EC19 -  -  -  -  	         ;   t+ - + / * ≠ ≥ ≤ > < = or xor and →
   50 D1:EC19 00 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 06 -  precedence2: .db 0, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  6
   51 D1:EC28 -  -  -  -  	
   52 D1:EC28 -  -  -  -  offsets:
   53 D1:EC28 83 EA D0 6B 
              EE D0 00 2C 
              D5 D7 F5 D0 
              D7 F5 D0 BF 
              F9 D0 A7 FD 
              D0 83 03 D1 
              5F 09 D1 FF 
              18 D1 -  -  	.dl stack, output, program, programNamesStack, labelStack, gotoStack, programDataOffsetStack, tempStringsStack, tempListsStack, programDataData
   54 D1:EC46 00 00 00 00 
              00 00 00 00 	.fill 8, 0
   55 D1:EC4E -  -  -  -  offset_end:
   56 D1:EC4E -  -  -  -  
   57 D1:EC4E -  -  -  -  lists:
   58 D1:EC4E 1F EA D0 96 
              73 D0 C6 52 
              D0 66 94 D0 
              F6 31 D0 00 
              08 E3 -  -  	.dl L1, L2, L3, L4, L5, L6
   59 D1:EC60 -  -  -  -  	
   60 D1:EC60 -  -  -  -  hexadecimals:
   61 D1:EC60 46 45 44 43 
              42 41 39 38 
              37 36 35 34 
              33 32 31 30 	.db tF, tE, tD, tC, tB, tA, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0
   62 D1:EC70 -  -  -  -  	
   63 D1:EC70 83 EA D0 -  stackPtr:				.dl stack
   64 D1:EC73 6B EE D0 -  outputPtr:				.dl output
   65 D1:EC76 00 2C D5 -  programPtr:				.dl program
   66 D1:EC79 D7 F5 D0 -  programNamesPtr:		.dl programNamesStack
   67 D1:EC7C D7 F5 D0 -  labelPtr:				.dl labelStack
   68 D1:EC7F BF F9 D0 -  gotoPtr:				.dl gotoStack
   69 D1:EC82 A7 FD D0 -  programDataOffsetPtr:	.dl programDataOffsetStack
   70 D1:EC85 83 03 D1 -  tempStringsPtr:			.dl tempStringsStack
   71 D1:EC88 5F 09 D1 -  tempListsPtr:			.dl tempListsStack
   72 D1:EC8B FF 18 D1 -  programDataDataPtr:		.dl programDataData
   73 D1:EC8E 00 -  -  -  amountOfPrograms		.db 0
   74 D1:EC8F 00 -  -  -  openedParensE			.db 0
   75 D1:EC90 00 -  -  -  openedParensF			.db 0
   76 D1:EC91 00 -  -  -  amountOfArguments		.db 0
   77 D1:EC92 00 -  -  -  amountOfCRoutines		.db 0
   78 D1:EC93 00 -  -  -  amountOfEnds			.db 0
   79 D1:EC94 00 -  -  -  amountOfInput			.db 0
   80 D1:EC95 00 -  -  -  amountOfPause			.db 0
   81 D1:EC96 00 -  -  -  ExprOutput				.db 0
   82 D1:EC97 00 -  -  -  ExprOutput2				.db 0
   83 D1:EC98 00 -  -  -  AmountOfSubPrograms		.db 0
   84 D1:EC99 -  -  -  -  
   85 D1:EC99 -  -  -  -  varname:
   86 D1:EC99 06 00 00 00 
              00 00 00 00 
              00 -  -  -  	.db ProtProgObj, 0,0,0,0,0,0,0,0
   87 D1:ECA2 -  -  -  -  	
   88 D1:ECA2 -  -  -  -  usedCroutines:
   89 D1:ECA2 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  .fill AMOUNT_OF_C_FUNCTIONS, 0
   90 D1:ECF1 -  -  -  -  
   91 D1:ECF1 -  -  -  -  ICEAppvar:
   92 D1:ECF1 15 49 43 45 
              41 50 50 56 
              00 -  -  -  	.db AppVarObj, "ICEAPPV", 0
   93 D1:ECFA -  -  -  -  ICEProgram:
   94 D1:ECFA 06 49 43 45 
              00 -  -  -  	.db ProtProgObj, "ICE", 0
   95 D1:ECFF -  -  -  -  	
   96 D1:ECFF -  -  -  -  ErrorMessageStandard:
   97 D1:ECFF 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 66 6F 
              72 20 27 00 	.db "Invalid arguments for '", 0
   98 D1:ED17 -  -  -  -  EndErrorMessage:
   99 D1:ED17 54 6F 6F 20 
              6D 61 6E 79 
              20 45 6E 64 
              73 21 00 -  	.db "Too many Ends!", 0
  100 D1:ED26 -  -  -  -  GoodCompileMessage:
  101 D1:ED26 53 75 63 63 
              65 73 66 75 
              6C 6C 79 20 
              63 6F 6D 70 
              69 6C 65 64 
              21 00 -  -  	.db "Succesfully compiled!", 0
  102 D1:ED3C -  -  -  -  NoProgramsMessage:
  103 D1:ED3C 4E 6F 20 70 
              72 6F 67 72 
              61 6D 73 20 
              66 6F 75 6E 
              64 21 00 -  	.db "No programs found!", 0
  104 D1:ED4F -  -  -  -  InvalidTokenMessage:
  105 D1:ED4F 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              74 6F 6B 65 
              6E 21 00 -  	.db "Unsupported token!", 0
  106 D1:ED62 -  -  -  -  InvalidListArgumentMessage:
  107 D1:ED62 4F 6E 6C 79 
              20 69 6E 74 
              65 67 65 72 
              73 20 69 6E 
              20 6C 69 73 
              74 73 20 73 
              75 70 70 6F 
              72 74 65 64 
              21 00 -  -  	.db "Only integers in lists supported!", 0
  108 D1:ED84 -  -  -  -  InvalidNameLengthMessage:
  109 D1:ED84 50 72 6F 67 
              72 61 6D 20 
              6E 61 6D 65 
              20 74 6F 6F 
              20 6C 6F 6E 
              67 21 00 -  	.db "Program name too long!", 0
  110 D1:ED9B -  -  -  -  SameNameMessage:
  111 D1:ED9B 4F 75 74 70 
              75 74 20 6E 
              61 6D 65 20 
              69 73 20 74 
              68 65 20 73 
              61 6D 65 20 
              61 73 20 69 
              6E 70 75 74 
              20 6E 61 6D 
              65 21 00 -  	.db "Output name is the same as input name!", 0
  112 D1:EDC2 -  -  -  -  WrongSpriteDataMessgae:
  113 D1:EDC2 49 6E 76 61 
              6C 69 64 20 
              73 70 72 69 
              74 65 20 64 
              61 74 61 21 
              00 -  -  -  	.db "Invalid sprite data!", 0
  114 D1:EDD7 -  -  -  -  FunctionFunctionMessage:
  115 D1:EDD7 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 61 20 
              66 75 6E 63 
              74 69 6F 6E 
              20 69 6E 20 
              61 20 66 75 
              6E 63 74 69 
              6F 6E 21 00 	.db "You can't use a function in a function!", 0
  116 D1:EDFF -  -  -  -  NotFoundMessage:
  117 D1:EDFF 50 72 6F 67 
              72 61 6D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 21 00 -  	.db "Program not found!", 0
  118 D1:EE12 -  -  -  -  ImplementMessage:
  119 D1:EE12 54 68 69 73 
              20 66 75 6E 
              63 74 69 6F 
              6E 20 68 61 
              73 20 6E 6F 
              74 20 62 65 
              65 6E 20 69 
              6D 70 6C 65 
              6D 65 6E 74 
              65 64 20 79 
              65 74 21 00 	.db "This function has not been implemented yet!", 0
  120 D1:EE3E -  -  -  -  SyntaxErrorMessage:
  121 D1:EE3E 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 65 6E 
              74 65 72 65 
              64 21 00 -  	.db "Invalid arguments entered!", 0
  122 D1:EE59 -  -  -  -  TooLargeLoopMessage:
  123 D1:EE59 54 6F 6F 20 
              6C 61 72 67 
              65 20 61 6E 
              6F 6E 79 6D 
              6F 75 73 20 
              6C 6F 6F 70 
              21 00 -  -  	.db "Too large anonymous loop!", 0
  124 D1:EE73 -  -  -  -  UsedCodeMessage:
  125 D1:EE73 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 63 6F 
              64 65 20 62 
              65 66 6F 72 
              65 20 44 65 
              66 69 6E 65 
              53 70 72 69 
              74 65 28 29 
              21 00 -  -  	.db "You can't use code before DefineSprite()!", 0
  126 D1:EE9D -  -  -  -  LineNumber:
  127 D1:EE9D 45 72 72 6F 
              72 20 6F 6E 
              20 6C 69 6E 
              65 20 00 -  	.db "Error on line ", 0
  128 D1:EEAC -  -  -  -  MismatchErrorMessage:
  129 D1:EEAC 4D 69 73 6D 
              61 74 63 68 
              65 64 20 70 
              61 72 65 6E 
              74 68 65 73 
              69 73 21 00 	.db "Mismatched parenthesis!", 0
  130 D1:EEC4 -  -  -  -  UnknownMessage:
  131 D1:EEC4 53 6F 6D 65 
              74 68 69 6E 
              67 20 77 65 
              6E 74 20 77 
              72 6F 6E 67 
              21 20 50 6C 
              65 61 73 65 
              20 72 65 70 
              6F 72 74 20 
              69 74 21 00 	.db "Something went wrong! Please report it!", 0
  132 D1:EEEC -  -  -  -  NotEnoughMem:
  133 D1:EEEC 4E 6F 74 20 
              65 6E 6F 75 
              67 68 20 66 
              72 65 65 20 
              52 41 4D 21 
              00 -  -  -  	.db "Not enough free RAM!", 0
  134 D1:EF01 -  -  -  -  LabelErrorMessage:
  135 D1:EF01 43 61 6E 27 
              74 20 66 69 
              6E 64 20 73 
              70 65 63 69 
              66 69 63 20 
              6C 61 62 65 
              6C 21 00 -  	.db "Can't find specific label!", 0
  136 D1:EF1C -  -  -  -  StartParseMessage:
  137 D1:EF1C 43 6F 6D 70 
              69 6C 69 6E 
              67 20 70 72 
              6F 67 72 61 
              6D 20 00 -  	.db "Compiling program ", 0
  138 D1:EF2F -  -  -  -  ICEName:
  139 D1:EF2F 49 43 45 20 
              43 6F 6D 70 
              69 6C 65 72 
              20 76 31 2E 
              32 20 2D 20 
              42 79 20 50 
              65 74 65 72 
              20 22 50 54 
              5F 22 20 54 
              69 6C 6C 65 
              6D 61 00 -  	.db "ICE Compiler v1.2 - By Peter \"PT_\" Tillema", 0
  140 D1:EF5A -  -  -  -  PressKey:
  141 D1:EF5A 5B 50 72 65 
              73 73 20 61 
              6E 79 20 6B 
              65 79 20 74 
              6F 20 65 78 
              69 74 5D 00 	.db "[Press any key to exit]", 0
  142 D1:EF72 -  -  -  -  	
  143 D1:EF72 -  -  -  -  MulTable:
  144 D1:EF72 01 29 00 00 
              00 00 00 00 
              00 00 -  -  	.db 1 \ add hl, hl \ .db 0,0,0,0,0,0,0,0
  145 D1:EF7C 04 E5 D1 29 
              19 00 00 00 
              00 00 -  -  	.db 4 \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0,0
  146 D1:EF86 02 29 29 00 
              00 00 00 00 
              00 00 -  -  	.db 2 \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0,0
  147 D1:EF90 05 E5 D1 29 
              29 19 00 00 
              00 00 -  -  	.db 5 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0,0
  148 D1:EF9A 05 29 E5 D1 
              29 19 00 00 
              00 00 -  -  	.db 5 \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0
  149 D1:EFA4 06 E5 D1 29 
              19 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0,0
  150 D1:EFAE 03 29 29 29 
              00 00 00 00 
              00 00 -  -  	.db 3 \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0
  151 D1:EFB8 06 E5 D1 29 
              29 29 19 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0
  152 D1:EFC2 06 E5 D1 29 
              29 19 29 00 
              00 00 -  -  	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0,0
  153 D1:EFCC 07 E5 D1 29 
              29 19 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0
  154 D1:EFD6 06 29 29 E5 
              D1 29 19 00 
              00 00 -  -  	.db 6 \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0
  155 D1:EFE0 09 E5 C1 29 
              29 E5 D1 29 
              19 09 -  -  	.db 9 \ push hl \ pop bc \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, bc
  156 D1:EFEA 07 E5 D1 29 
              19 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0
  157 D1:EFF4 09 E5 D1 29 
              29 29 29 B7 
              ED 52 -  -  	.db 9 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ or a \ sbc hl, de
  158 D1:EFFE 04 29 29 29 
              29 00 00 00 
              00 00 -  -  	.db 4 \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0
  159 D1:F008 07 E5 D1 29 
              29 29 29 19 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0
  160 D1:F012 07 E5 D1 29 
              29 29 19 29 
              00 00 -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0
  161 D1:F01C 08 01 13 00 
              00 CD 54 01 
              00 00 -  -  	.db 8 \ ld bc, 19 \ call __imulu \ .db 0
  162 D1:F026 07 E5 D1 29 
              29 19 29 29 
              00 -  -  -  	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ .db 0
  163 D1:F02F -  -  -  -  	
  164 D1:F02F -  -  -  -  InputRoutine:
  165 D1:F02F CD 14 08 02 	call _ClrScrn
  166 D1:F033 CD 28 08 02 	call _HomeUp
  167 D1:F037 AF -  -  -  	xor	a, a
  168 D1:F038 32 79 08 D0 	ld (ioPrompt), a
  169 D1:F03C 32 99 05 D0 	ld	(curUnder), a
  170 D1:F040 CD 20 13 02 	call _GetStringInput
  171 D1:F044 2A 4E 24 D0 	ld	hl, (editSym)
  172 D1:F048 CD E8 0A 02 	call _VarNameToOP1HL
  173 D1:F04C CD 0C 05 02 	call _ChkFindSym
  174 D1:F050 1A -  -  -  	ld a, (de)
  175 D1:F051 13 -  -  -  	inc de
  176 D1:F052 13 -  -  -  	inc de
  177 D1:F053 47 -  -  -  	ld b, a
  178 D1:F054 ED 62 -  -  	sbc hl, hl
  179 D1:F056 C5 -  -  -  _:	push bc
  180 D1:F057 29 -  -  -  		add hl, hl
  181 D1:F058 E5 -  -  -  		push hl
  182 D1:F059 C1 -  -  -  		pop bc
  183 D1:F05A 29 -  -  -  		add hl, hl
  184 D1:F05B 29 -  -  -  		add hl, hl
  185 D1:F05C 09 -  -  -  		add hl, bc
  186 D1:F05D 1A -  -  -  		ld a, (de)
  187 D1:F05E D6 30 -  -  		sub t0
  188 D1:F060 01 00 00 00 		ld bc, 0
  189 D1:F064 4F -  -  -  		ld c, a
  190 D1:F065 09 -  -  -  		add hl, bc
  191 D1:F066 13 -  -  -  		inc de
  192 D1:F067 C1 -  -  -  	pop bc
  193 D1:F068 10 EC -  -  	djnz -_
  194 D1:F06A -  -  -  -  InputOffset = $+2
  195 D1:F06A DD 2F 00 -  	ld (ix+0), hl
  196 D1:F06D C3 78 15 02 	jp _DeleteTempEditEqu
  197 D1:F071 -  -  -  -  InputRoutineEnd:
  198 D1:F071 -  -  -  -  
  199 D1:F071 -  -  -  -  RandRoutine:
  200 D1:F071 DD 27 51 -  	ld hl, (ix+rand1)
  201 D1:F074 DD 17 54 -  	ld de, (ix+rand1+3)
  202 D1:F077 44 -  -  -  	ld b, h
  203 D1:F078 4D -  -  -  	ld c, l
  204 D1:F079 29 -  -  -  	add hl, hl
  205 D1:F07A CB 13 -  -  	rl e
  206 D1:F07C CB 12 -  -  	rl d
  207 D1:F07E 29 -  -  -  	add hl, hl
  208 D1:F07F CB 13 -  -  	rl e
  209 D1:F081 CB 12 -  -  	rl d
  210 D1:F083 2C -  -  -  	inc l
  211 D1:F084 09 -  -  -  	add hl, bc
  212 D1:F085 DD 2F 51 -  	ld (ix+rand1), hl
  213 D1:F088 ED 5A -  -  	adc hl, de
  214 D1:F08A DD 2F 54 -  	ld (ix+rand1+3), hl
  215 D1:F08D EB -  -  -  	ex de, hl
  216 D1:F08E DD 27 57 -  	ld hl, (ix+rand1+6)
  217 D1:F091 DD 07 5A -  	ld bc, (ix+rand1+9)
  218 D1:F094 29 -  -  -  	add hl, hl
  219 D1:F095 CB 11 -  -  	rl c
  220 D1:F097 CB 10 -  -  	rl b
  221 D1:F099 DD 0F 5A -  	ld (ix+rand1+9), bc
  222 D1:F09C 9F -  -  -  	sbc a, a
  223 D1:F09D E6 C5 -  -  	and %11000101
  224 D1:F09F AD -  -  -  	xor l
  225 D1:F0A0 6F -  -  -  	ld l, a
  226 D1:F0A1 DD 2F 57 -  	ld (ix+rand1+6), hl
  227 D1:F0A4 EB -  -  -  	ex de, hl
  228 D1:F0A5 09 -  -  -  	add hl, bc
  229 D1:F0A6 C9 -  -  -  	ret
  230 D1:F0A7 -  -  -  -  RandRoutineEnd:
  231 D1:F0A7 -  -  -  -  
  232 D1:F0A7 -  -  -  -  DispNumberRoutine:
  233 D1:F0A7 3E 12 -  -  	ld a, 18
  234 D1:F0A9 32 96 05 D0 	ld (curCol), a
  235 D1:F0AD CD E0 1E 02 	call _DispHL
  236 D1:F0B1 CD F0 07 02 	call _NewLine
  237 D1:F0B5 -  -  -  -  	
  238 D1:F0B5 -  -  -  -  DispStringRoutine:
  239 D1:F0B5 AF -  -  -  	xor a
  240 D1:F0B6 32 96 05 D0 	ld (curCol), a
  241 D1:F0BA CD C0 07 02 	call _PutS
  242 D1:F0BE CD F0 07 02 	call _NewLine
  243 D1:F0C2 -  -  -  -  
  244 D1:F0C2 -  -  -  -  PauseRoutine:
  245 D1:F0C2 2B -  -  -  	dec hl
  246 D1:F0C3 -  -  -  -  PauseRoutine2:
  247 D1:F0C3 0E 6E -  -  	ld c, 110
  248 D1:F0C5 06 20 -  -  _:	ld b, 32
  249 D1:F0C7 10 FE -  -  	djnz $
  250 D1:F0C9 0D -  -  -  	dec c
  251 D1:F0CA 20 F9 -  -  	jr nz, -_
  252 D1:F0CC B7 -  -  -  	or a
  253 D1:F0CD 11 FF FF FF 	ld de, -1
  254 D1:F0D1 19 -  -  -  	add hl, de
  255 D1:F0D2 38 EF -  -  	jr c, PauseRoutine2
  256 D1:F0D4 C9 -  -  -  	ret
  257 D1:F0D5 -  -  -  -  PauseRoutineEnd:
  258 D1:F0D5 -  -  -  -  
  259 D1:F0D5 -  -  -  -  MeanRoutine:
  260 D1:F0D5 DD 21 00 00 
              00 -  -  -  	ld ix, 0
  261 D1:F0DA DD 39 -  -  	add ix, sp
  262 D1:F0DC 19 -  -  -  	add hl, de
  263 D1:F0DD E5 -  -  -  	push hl
  264 D1:F0DE DD CB FF 1E 		rr (ix-1)
  265 D1:F0E2 E1 -  -  -  	pop hl
  266 D1:F0E3 CB 1C -  -  	rr h
  267 D1:F0E5 CB 1D -  -  	rr l
  268 D1:F0E7 DD 21 00 08 
              E3 -  -  -  	ld ix, cursorImage
  269 D1:F0EC C9 -  -  -  	ret
  270 D1:F0ED -  -  -  -  MeanRoutineEnd:
  271 D1:F0ED -  -  -  -  
  272 D1:F0ED -  -  -  -  KeypadRoutine:
  273 D1:F0ED F3 -  -  -  	di
  274 D1:F0EE 21 00 00 F5 	ld hl, 0F50000h
  275 D1:F0F2 36 02 -  -  	ld (hl), 2
  276 D1:F0F4 AF -  -  -  	xor a
  277 D1:F0F5 BE -  -  -  _:	cp a, (hl)
  278 D1:F0F6 20 FD -  -  	jr nz, -_
  279 D1:F0F8 FB -  -  -  	ei
  280 D1:F0F9 68 -  -  -  	ld l, b
  281 D1:F0FA 7E -  -  -  	ld a, (hl)
  282 D1:F0FB ED 62 -  -  	sbc hl, hl
  283 D1:F0FD A1 -  -  -  	and c
  284 D1:F0FE C8 -  -  -  	ret z
  285 D1:F0FF 2C -  -  -  	inc l
  286 D1:F100 C9 -  -  -  	ret
  287 D1:F101 -  -  -  -  KeypadRoutineEnd:
  288 D1:F101 -  -  -  -  
  289 D1:F101 -  -  -  -  XORANDData:
  290 D1:F101 01 FF FF FF 	ld bc, -1
  291 D1:F105 09 -  -  -  	add hl, bc
  292 D1:F106 9F -  -  -  	sbc a, a
  293 D1:F107 EB -  -  -  	ex de, hl
  294 D1:F108 57 -  -  -  	ld d, a
  295 D1:F109 09 -  -  -  	add hl, bc
  296 D1:F10A 9F -  -  -  	sbc a, a
  297 D1:F10B -  -  -  -  XORANDSMC:
  298 D1:F10B A2 -  -  -  	and a, d
  299 D1:F10C ED 62 -  -  	sbc hl, hl
  300 D1:F10E E6 01 -  -  	and 1
  301 D1:F110 6F -  -  -  	ld l, a
  302 D1:F111 -  -  -  -  	
  303 D1:F111 -  -  -  -  BackgroundData:
  304 D1:F111 7D -  -  -  	ld a, l
  305 D1:F112 21 00 00 D4 	ld hl, vRAM
  306 D1:F116 77 -  -  -  	ld (hl), a
  307 D1:F117 E5 -  -  -  	push hl
  308 D1:F118 D1 -  -  -  	pop de
  309 D1:F119 13 -  -  -  	inc de
  310 D1:F11A 01 FF 2B 01 	ld bc, 320*240-1
  311 D1:F11E ED B0 -  -  	ldir
  312 D1:F120 -  -  -  -  
  313 D1:F120 -  -  -  -  CData:
  314 D1:F120 DD 21 00 08 
              E3 -  -  -  	ld ix, cursorImage
  315 D1:F125 21 DE A8 D1 	ld hl, 0D1A8DEh						; LibLoadAppVar
  316 D1:F129 CD 20 03 02 	call _Mov9ToOP1
  317 D1:F12D 3E 15 -  -  	ld a, AppVarObj
  318 D1:F12F 32 F8 05 D0 	ld (OP1), a
  319 D1:F133 CD 0C 05 02 _:	call _ChkFindSym
  320 D1:F137 38 24 -  -  	jr c, NotFound
  321 D1:F139 CD 98 1F 02 	call _ChkInRAM
  322 D1:F13D 20 0E -  -  	jr nz, InArc
  323 D1:F13F CD 28 06 02 	call _PushOP1
  324 D1:F143 CD 48 14 02 	call _Arc_UnArc
  325 D1:F147 CD C4 05 02 	call _PopOP1
  326 D1:F14B 18 E6 -  -  	jr -_
  327 D1:F14D -  -  -  -  InArc:
  328 D1:F14D EB -  -  -  	ex de, hl
  329 D1:F14E 11 09 00 00 	ld de, 9
  330 D1:F152 19 -  -  -  	add hl, de
  331 D1:F153 5E -  -  -  	ld e, (hl)
  332 D1:F154 19 -  -  -  	add hl, de
  333 D1:F155 23 -  -  -  	inc hl
  334 D1:F156 23 -  -  -  	inc hl
  335 D1:F157 23 -  -  -  	inc hl
  336 D1:F158 11 FC A8 D1 	ld de, 0D1A8FCh						; RelocationStart
  337 D1:F15C E9 -  -  -  	jp (hl)
  338 D1:F15D -  -  -  -  NotFound:
  339 D1:F15D CD 14 08 02 	call _ClrScrn
  340 D1:F161 CD 28 08 02 	call _HomeUp
  341 D1:F165 21 DA A8 D1 	ld hl, 0D1A8DAh						; MissingAppVar
  342 D1:F169 CD C0 07 02 	call _PutS
  343 D1:F16D CD F0 07 02 	call _NewLine
  344 D1:F171 CD C0 07 02 	call _PutS
  345 D1:F175 C3 8C 0D 02 	jp _GetKey
  346 D1:F179 -  -  -  -  MissingAppVar:
  347 D1:F179 4E 65 65 64 	.db "Need"
  348 D1:F17D -  -  -  -  LibLoadAppVar:
  349 D1:F17D 20 4C 69 62 
              4C 6F 61 64 
              00 -  -  -  	.db " LibLoad", 0
  350 D1:F186 68 74 74 70 
              3A 2F 2F 74 
              69 6E 79 2E 
              63 63 2F 63 
              6C 69 62 73 
              00 -  -  -  	.db "http://tiny.cc/clibs", 0
  351 D1:F19B -  -  -  -  RelocationStart:
  352 D1:F19B C0 47 52 41 
              50 48 58 00 
              02 -  -  -  	.db 0C0h, "GRAPHX", 0, 2
  353 D1:F1A4 -  -  -  -  CData2:
Listing for file "ICE.asm"
  467 D1:F1A4 -  -  -  -  
  468 D1:F1A4 -  -  -  -  .echo $-start+14
